public class AgelessEntity extends CardImpl {
public AgelessEntity(UUID ownerId) {
public AgelessEntity(final AgelessEntity card) {
public AgelessEntity copy() {return new AgelessEntity(this);
class AgelessEntityEffect extends OneShotEffect {
public AgelessEntityEffect() {
public AgelessEntityEffect(final AgelessEntityEffect effect) {
public AgelessEntityEffect copy() {return new AgelessEntityEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.P1P1.createInstance(lifeGained)).apply(game, source);return false;
public class AgonizingDemise extends CardImpl {
public AgonizingDemise(UUID ownerId) {
public AgonizingDemise(final AgonizingDemise card) {
public AgonizingDemise copy() {return new AgonizingDemise(this);
class AgonizingDemiseEffect extends OneShotEffect {
public AgonizingDemiseEffect() {
public AgonizingDemiseEffect(final AgonizingDemiseEffect effect) {
public AgonizingDemiseEffect copy() {return new AgonizingDemiseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OgreSavant extends CardImpl {
public OgreSavant(UUID ownerId) {"if {U} was spent to cast {this}, return target creature to its owner's hand."),
public OgreSavant(final OgreSavant card) {
public OgreSavant copy() {return new OgreSavant(this);
public class Anathemancer extends CardImpl {
public Anathemancer(UUID ownerId) {
public Anathemancer(final Anathemancer card) {
public Anathemancer copy() {return new Anathemancer(this);
class AnathemancerCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return 0;return game.getBattlefield().count(filter, sourceAbility.getSourceId(), sourceAbility.getControllerId(), game);
public DynamicValue copy() {return new AnathemancerCount();
public String toString() {return "1";
public String getMessage() {return "nonbasic lands that player controls";
public class ArchitectsOfWill extends CardImpl {
public ArchitectsOfWill(UUID ownerId) {
public ArchitectsOfWill(final ArchitectsOfWill card) {
public ArchitectsOfWill copy() {return new ArchitectsOfWill(this);
class ArchitectsOfWillEffect extends OneShotEffect {
public ArchitectsOfWillEffect() {
public ArchitectsOfWillEffect(final ArchitectsOfWillEffect effect) {
public ArchitectsOfWillEffect copy() {return new ArchitectsOfWillEffect(this);
public boolean apply(Game game, Ability source) {
|| controller == null) {return false;return true;
public class ArdentPlea extends CardImpl {
public ArdentPlea (UUID ownerId) {
public ArdentPlea (final ArdentPlea card) {
public ArdentPlea copy() {return new ArdentPlea(this);
public class ArsenalThresher extends CardImpl {
public ArsenalThresher(UUID ownerId) {
public ArsenalThresher(final ArsenalThresher card) {
public ArsenalThresher copy() {return new ArsenalThresher(this);
class ArsenalThresherEffect extends OneShotEffect {
public ArsenalThresherEffect() {
public ArsenalThresherEffect(final ArsenalThresherEffect effect) {
public ArsenalThresherEffect copy() {return new ArsenalThresherEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class AvenMimeomancer extends CardImpl {
public AvenMimeomancer(UUID ownerId) {
public AvenMimeomancer(final AvenMimeomancer card) {
public AvenMimeomancer copy() {return new AvenMimeomancer(this);
class AvenEffect extends ContinuousEffectImpl {
public AvenEffect() {
public AvenEffect(final AvenEffect effect) {
public AvenEffect copy() {return new AvenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public boolean isInactive(Ability source, Game game) {return true;return false;
public String getText(Mode mode) {return sb.toString();
class AvenEffect2 extends ContinuousEffectImpl {
public AvenEffect2() {
public AvenEffect2(final AvenEffect2 effect) {
public AvenEffect2 copy() {return new AvenEffect2(this);
public boolean apply(Game game, Ability source) {return true;return false;
public boolean isInactive(Ability source, Game game) {return true;return false;
public class BantSojourners extends CardImpl {
public BantSojourners(UUID ownerId) {
public BantSojourners(final BantSojourners card) {
public BantSojourners copy() {return new BantSojourners(this);
public class BantSureblade extends CardImpl {
public BantSureblade(UUID ownerId) {
public BantSureblade(final BantSureblade card) {
public BantSureblade copy() {return new BantSureblade(this);
public class BehemothSledge extends CardImpl {
public BehemothSledge(UUID ownerId) {
protected BehemothSledge(BehemothSledge me) {
public BehemothSledge copy() {return new BehemothSledge(this);
public class BituminousBlast extends CardImpl {
public BituminousBlast(UUID ownerId) {
public BituminousBlast(final BituminousBlast card) {
public BituminousBlast copy() {return new BituminousBlast(this);
public class BlitzHellion extends CardImpl {
public BlitzHellion(UUID ownerId) {
public BlitzHellion(final BlitzHellion card) {
public BlitzHellion copy() {return new BlitzHellion(this);
public class BloodbraidElf extends CardImpl {
public BloodbraidElf(UUID ownerId) {
public BloodbraidElf(final BloodbraidElf card) {
public BloodbraidElf copy() {return new BloodbraidElf(this);
public class Brainbite extends CardImpl {
public Brainbite(UUID ownerId) {
public Brainbite(final Brainbite card) {
public Brainbite copy() {return new Brainbite(this);
public class BreathOfMalfegor extends CardImpl {
public BreathOfMalfegor(UUID ownerId) {
public BreathOfMalfegor(final BreathOfMalfegor card) {
public BreathOfMalfegor copy() {return new BreathOfMalfegor(this);
public class CapturedSunlight extends CardImpl {
public CapturedSunlight (UUID ownerId) {
public CapturedSunlight (final CapturedSunlight card) {
public CapturedSunlight copy() {return new CapturedSunlight(this);return new CerodonYearling(this);
public class Crystallization extends CardImpl {
public Crystallization(UUID ownerId) {
public Crystallization(final Crystallization card) {
public Crystallization copy() {return new Crystallization(this);
class CrystallizationTriggeredAbility extends TriggeredAbilityImpl {
public CrystallizationTriggeredAbility() {
public CrystallizationTriggeredAbility(final CrystallizationTriggeredAbility ability) {
public CrystallizationTriggeredAbility copy() {return new CrystallizationTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When enchanted creature becomes the target of a spell or ability, exile that creature.";
public class DauntlessEscort extends CardImpl {
public DauntlessEscort(UUID ownerId) {
public DauntlessEscort(final DauntlessEscort card) {
public DauntlessEscort copy() {return new DauntlessEscort(this);
public class DeadshotMinotaur extends CardImpl {
public DeadshotMinotaur(UUID ownerId) {
public DeadshotMinotaur(final DeadshotMinotaur card) {
public DeadshotMinotaur copy() {return new DeadshotMinotaur(this);
public class DeathbringerThoctar extends CardImpl {
public DeathbringerThoctar(UUID ownerId) {
public DeathbringerThoctar(final DeathbringerThoctar card) {
public DeathbringerThoctar copy() {return new DeathbringerThoctar(this);
public class DefilerOfSouls extends CardImpl {
public DefilerOfSouls(UUID ownerId) {
public DefilerOfSouls(final DefilerOfSouls card) {
public DefilerOfSouls copy() {return new DefilerOfSouls(this);
class DefilerOfSoulsEffect extends OneShotEffect {
DefilerOfSoulsEffect() {
DefilerOfSoulsEffect(final DefilerOfSoulsEffect effect) {
public boolean apply(Game game, Ability source) {return false;return abilityApplied;return false;
public DefilerOfSoulsEffect copy() {return new DefilerOfSoulsEffect(this);
public class DemonicDread extends CardImpl {
public DemonicDread(UUID ownerId) {
public DemonicDread(final DemonicDread card) {
public DemonicDread copy() {return new DemonicDread(this);
public class DemonspineWhip extends CardImpl {
public DemonspineWhip(UUID ownerId) {
public DemonspineWhip(final DemonspineWhip card) {
public DemonspineWhip copy() {return new DemonspineWhip(this);
class XPaid implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return paid;
public DynamicValue copy() {return this;
public String getMessage() {return "X paid";
public String toString() {return "X";
public class DenyReality extends CardImpl {
public DenyReality (UUID ownerId) {
public DenyReality (final DenyReality card) {
public DenyReality copy() {return new DenyReality(this);
public class DoubleNegative extends CardImpl {
public DoubleNegative(UUID ownerId) {
public DoubleNegative(final DoubleNegative card) {
public DoubleNegative copy() {return new DoubleNegative(this);
public class DragonAppeasement extends CardImpl {
public DragonAppeasement(UUID ownerId) {
public DragonAppeasement(final DragonAppeasement card) {
public DragonAppeasement copy() {return new DragonAppeasement(this);
class DragonAppeasementTriggeredAbility extends TriggeredAbilityImpl {
public DragonAppeasementTriggeredAbility() {
public DragonAppeasementTriggeredAbility(final DragonAppeasementTriggeredAbility ability) {
public DragonAppeasementTriggeredAbility copy() {return new DragonAppeasementTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SACRIFICED_PERMANENT;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.getControllerId())
public String getRule() {return "Whenever you sacrifice a creature, " + super.getRule();
public class DragonBroodmother extends CardImpl {
public DragonBroodmother(UUID ownerId) {
public DragonBroodmother(final DragonBroodmother card) {
public DragonBroodmother copy() {return new DragonBroodmother(this);
class DragonToken extends Token {
DragonToken() {
public class DrasticRevelation extends CardImpl {
public DrasticRevelation(UUID ownerId) {
public DrasticRevelation(final DrasticRevelation card) {
public DrasticRevelation copy() {return new DrasticRevelation(this);
class DrasticRevelationEffect extends OneShotEffect {
DrasticRevelationEffect() {
DrasticRevelationEffect(final DrasticRevelationEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public DrasticRevelationEffect copy() {return new DrasticRevelationEffect(this);
public class EnigmaSphinx extends CardImpl {
public EnigmaSphinx(UUID ownerId) {
public EnigmaSphinx(final EnigmaSphinx card) {
public EnigmaSphinx copy() {return new EnigmaSphinx(this);
class EnigmaSphinxTriggeredAbility extends TriggeredAbilityImpl {
public EnigmaSphinxTriggeredAbility(Effect effect) {
public EnigmaSphinxTriggeredAbility(Effect effect, boolean optional) {
EnigmaSphinxTriggeredAbility(EnigmaSphinxTriggeredAbility ability) {
public EnigmaSphinxTriggeredAbility copy() {return new EnigmaSphinxTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When {this} is put into your graveyard from the battlefield, " + super.getRule();
class EnigmaSphinxEffect extends OneShotEffect {
public EnigmaSphinxEffect() {
public EnigmaSphinxEffect(final EnigmaSphinxEffect effect) {
public EnigmaSphinxEffect copy() {return new EnigmaSphinxEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EnlistedWurm extends CardImpl {
public EnlistedWurm(UUID ownerId) {
public EnlistedWurm(final EnlistedWurm card) {
public EnlistedWurm copy() {return new EnlistedWurm(this);
public class EsperSojourners extends CardImpl {
public EsperSojourners(UUID ownerId) {
public EsperSojourners(final EsperSojourners card) {
public EsperSojourners copy() {return new EsperSojourners(this);
public class EsperStormblade extends CardImpl {
public EsperStormblade(UUID ownerId) {
public EsperStormblade(final EsperStormblade card) {
public EsperStormblade copy() {return new EsperStormblade(this);
public class EthercasteKnight extends CardImpl {
public EthercasteKnight (UUID ownerId) {
public EthercasteKnight (final EthercasteKnight card) {
public EthercasteKnight copy() {return new EthercasteKnight(this);
public class EtheriumAbomination extends CardImpl {
public EtheriumAbomination (UUID ownerId) {
public EtheriumAbomination (final EtheriumAbomination card) {
public EtheriumAbomination copy() {return new EtheriumAbomination(this);
public class FieldmistBorderpost extends CardImpl {
public FieldmistBorderpost (UUID ownerId) {
public FieldmistBorderpost (final FieldmistBorderpost card) {
public FieldmistBorderpost copy() {return new FieldmistBorderpost(this);
public class FightToTheDeath extends CardImpl {
public FightToTheDeath(UUID ownerId) {
public FightToTheDeath(final FightToTheDeath card) {
public FightToTheDeath copy() {return new FightToTheDeath(this);
public class FiligreeAngel extends CardImpl {
public FiligreeAngel (UUID ownerId) {
public FiligreeAngel (final FiligreeAngel card) {
public FiligreeAngel copy() {return new FiligreeAngel(this);
class FiligreeAngelEffect extends OneShotEffect {
public FiligreeAngelEffect() {
public FiligreeAngelEffect(final FiligreeAngelEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public FiligreeAngelEffect copy() {return new FiligreeAngelEffect(this);
public class FinestHour extends CardImpl {
public FinestHour(UUID ownerId) {
public FinestHour(final FinestHour card) {
public FinestHour copy() {return new FinestHour(this);
class FinestHourAbility extends TriggeredAbilityImpl {
public FinestHourAbility() {
public FinestHourAbility(final FinestHourAbility ability) {
public FinestHourAbility copy() {return new FinestHourAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public boolean checkInterveningIfClause(Game game) {return game.getTurn().getPhase(TurnPhase.COMBAT).getCount() == 0;
public String getRule() {return "Whenever a creature you control attacks alone, if it's the first combat phase of the turn, untap that creature. After this phase, there is an additional combat phase.";
class FinestHourEffect extends OneShotEffect {
public FinestHourEffect() {
public FinestHourEffect(final FinestHourEffect effect) {
public FinestHourEffect copy() {return new FinestHourEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FirewildBorderpost extends CardImpl {
public FirewildBorderpost (UUID ownerId) {
public FirewildBorderpost (final FirewildBorderpost card) {
public FirewildBorderpost copy() {return new FirewildBorderpost(this);
public class FlurryOfWings extends CardImpl {
public FlurryOfWings(UUID ownerId) {
public FlurryOfWings(final FlurryOfWings card) {
public FlurryOfWings copy() {return new FlurryOfWings(this);
class BirdSoldierToken extends Token {
public BirdSoldierToken() {
public class GiantAmbushBeetle extends CardImpl {
public GiantAmbushBeetle(UUID ownerId) {
public GiantAmbushBeetle(final GiantAmbushBeetle card) {
public GiantAmbushBeetle copy() {return new GiantAmbushBeetle(this);
public class GlassdustHulk extends CardImpl {
public GlassdustHulk(UUID ownerId) {
public GlassdustHulk(final GlassdustHulk card) {
public GlassdustHulk copy() {return new GlassdustHulk(this);
public class GloryOfWarfare extends CardImpl {
public GloryOfWarfare (UUID ownerId) {
public GloryOfWarfare (final GloryOfWarfare card) {
public GloryOfWarfare copy() {return new GloryOfWarfare(this);
public class GloryscaleViashino extends CardImpl {
public GloryscaleViashino (UUID ownerId) {
public GloryscaleViashino (final GloryscaleViashino card) {
public GloryscaleViashino copy() {return new GloryscaleViashino(this);
public class GodtrackerOfJund extends CardImpl {
public GodtrackerOfJund(UUID ownerId) {
public GodtrackerOfJund(final GodtrackerOfJund card) {
public GodtrackerOfJund copy() {return new GodtrackerOfJund(this);
public class GorgerWurm extends CardImpl {
public GorgerWurm(UUID ownerId) {
public GorgerWurm(final GorgerWurm card) {
public GorgerWurm copy() {return new GorgerWurm(this);
public class GrixisGrimblade extends CardImpl {
public GrixisGrimblade(UUID ownerId) {
public GrixisGrimblade(final GrixisGrimblade card) {
public GrixisGrimblade copy() {return new GrixisGrimblade(this);
public class GrixisSojourners extends CardImpl {
public GrixisSojourners(UUID ownerId) {
public GrixisSojourners(final GrixisSojourners card) {
public GrixisSojourners copy() {return new GrixisSojourners(this);
public class GrizzledLeotau extends CardImpl {
public GrizzledLeotau(UUID ownerId) {
public GrizzledLeotau(final GrizzledLeotau card) {
public GrizzledLeotau copy() {return new GrizzledLeotau(this);
public class IdentityCrisis extends CardImpl {
public IdentityCrisis (UUID ownerId) {
public IdentityCrisis (final IdentityCrisis card) {
public IdentityCrisis copy() {return new IdentityCrisis(this);
class IdentityCrisisEffect extends OneShotEffect {
IdentityCrisisEffect() {
IdentityCrisisEffect(final IdentityCrisisEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public IdentityCrisisEffect copy() {return new IdentityCrisisEffect(this);
public class IgneousPouncer extends CardImpl {
public IgneousPouncer(UUID ownerId) {
public IgneousPouncer(final IgneousPouncer card) {
public IgneousPouncer copy() {return new IgneousPouncer(this);
public class IllusoryDemon extends CardImpl {
public IllusoryDemon(UUID ownerId) {
public IllusoryDemon(final IllusoryDemon card) {
public IllusoryDemon copy() {return new IllusoryDemon(this);
public class JhessianZombies extends CardImpl {
public JhessianZombies(UUID ownerId) {
public JhessianZombies(final JhessianZombies card) {
public JhessianZombies copy() {return new JhessianZombies(this);
public class JundHackblade extends CardImpl {
public JundHackblade(UUID ownerId) {
public JundHackblade(final JundHackblade card) {
public JundHackblade copy() {return new JundHackblade(this);
public class JundSojourners extends CardImpl {
public JundSojourners(UUID ownerId) {
public JundSojourners(final JundSojourners card) {
public JundSojourners copy() {return new JundSojourners(this);
public class KarrthusTyrantOfJund extends CardImpl {
public KarrthusTyrantOfJund(UUID ownerId) {
public KarrthusTyrantOfJund(final KarrthusTyrantOfJund card) {
public KarrthusTyrantOfJund copy() {return new KarrthusTyrantOfJund(this);
class KarrthusEffect extends OneShotEffect {
public KarrthusEffect() {
public KarrthusEffect(final KarrthusEffect effect) {
public KarrthusEffect copy() {return new KarrthusEffect(this);
public boolean apply(Game game, Ability source) {return true;
class KarrthusControlEffect extends ContinuousEffectImpl {
public KarrthusControlEffect(UUID controllerId) {
public KarrthusControlEffect(final KarrthusControlEffect effect) {
public KarrthusControlEffect copy() {return new KarrthusControlEffect(this);
public boolean apply(Game game, Ability source) {return dragon.changeControllerId(controllerId, game);return false;
public class KathariBomber extends CardImpl {
public KathariBomber(UUID ownerId) {
public KathariBomber(final KathariBomber card) {
public KathariBomber copy() {return new KathariBomber(this);
public class KathariRemnant extends CardImpl {
public KathariRemnant (UUID ownerId) {
public KathariRemnant (final KathariRemnant card) {
public KathariRemnant copy() {return new KathariRemnant(this);
public class KnightOfNewAlara extends CardImpl {
public KnightOfNewAlara(UUID ownerId) {
public KnightOfNewAlara(final KnightOfNewAlara card) {
public KnightOfNewAlara copy() {return new KnightOfNewAlara(this);
class KnightOfNewAlaraEffect extends ContinuousEffectImpl {
public KnightOfNewAlaraEffect() {
public KnightOfNewAlaraEffect(final KnightOfNewAlaraEffect effect) {
public KnightOfNewAlaraEffect copy() {return new KnightOfNewAlaraEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class KnotvinePaladin extends CardImpl {
public KnotvinePaladin(UUID ownerId) {
public KnotvinePaladin(final KnotvinePaladin card) {
public KnotvinePaladin copy() {return new KnotvinePaladin(this);
public class Lavalanche extends CardImpl {
public Lavalanche(UUID ownerId) {
public Lavalanche(final Lavalanche card) {
public Lavalanche copy() {return new Lavalanche(this);
class LavalancheEffect extends OneShotEffect {
public LavalancheEffect(DynamicValue amount) {
public LavalancheEffect(final LavalancheEffect effect) {
public LavalancheEffect copy() {return new LavalancheEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class LeoninArmorguard extends CardImpl {
public LeoninArmorguard(UUID ownerId) {
public LeoninArmorguard(final LeoninArmorguard card) {
public LeoninArmorguard copy() {return new LeoninArmorguard(this);
public class LichLordOfUnx extends CardImpl {
public LichLordOfUnx (UUID ownerId) {
public LichLordOfUnx (final LichLordOfUnx card) {
public LichLordOfUnx copy() {return new LichLordOfUnx(this);
class ZombieWizardToken extends Token {
ZombieWizardToken() {
public class LightningReaver extends CardImpl {
public LightningReaver(UUID ownerId) {
public LightningReaver(final LightningReaver card) {
public LightningReaver copy() {return new LightningReaver(this);
class DamageOpponentsEffect extends OneShotEffect {
public DamageOpponentsEffect() {
public DamageOpponentsEffect(final DamageOpponentsEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public DamageOpponentsEffect copy() {return new DamageOpponentsEffect(this);
public class LordOfExtinction extends CardImpl {
public LordOfExtinction(UUID ownerId) {
public LordOfExtinction(final LordOfExtinction card) {
public LordOfExtinction copy() {return new LordOfExtinction(this);
class LordOfExtinctionDynamicCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count;
public DynamicValue copy() {return new LordOfExtinctionDynamicCount();
public String getMessage() {return "cards in all graveyards";
public String toString() {return "1";
public class LorescaleCoatl extends CardImpl {
public LorescaleCoatl (UUID ownerId) {
public LorescaleCoatl (final LorescaleCoatl card) {
public LorescaleCoatl copy() {return new LorescaleCoatl(this);
public class MadrushCyclops extends CardImpl {
public MadrushCyclops (UUID ownerId) {
public MadrushCyclops (final MadrushCyclops card) {
public MadrushCyclops copy() {return new MadrushCyclops(this);
public class MaelstromNexus extends CardImpl {
public MaelstromNexus(UUID ownerId) {
public MaelstromNexus(final MaelstromNexus card) {
public MaelstromNexus copy() {return new MaelstromNexus(this);
class MaelstromNexusGainCascadeFirstSpellEffect extends ContinuousEffectImpl {
public MaelstromNexusGainCascadeFirstSpellEffect() {
public MaelstromNexusGainCascadeFirstSpellEffect(final MaelstromNexusGainCascadeFirstSpellEffect effect) {
public MaelstromNexusGainCascadeFirstSpellEffect copy() {return new MaelstromNexusGainCascadeFirstSpellEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class FirstSpellCastThisTurnWatcher extends Watcher {
public FirstSpellCastThisTurnWatcher() {
public FirstSpellCastThisTurnWatcher(final FirstSpellCastThisTurnWatcher watcher) {
public void watch(GameEvent event, Game game) {
public FirstSpellCastThisTurnWatcher copy() {return new FirstSpellCastThisTurnWatcher(this);
public void reset() {
public UUID getIdOfFirstCastSpell(UUID playerId) {return playerFirstCastSpell.get(playerId);return playerFirstSpellCast.get(playerId);
public class MaelstromPulse extends CardImpl {
public MaelstromPulse(UUID ownerId) {
public MaelstromPulse(final MaelstromPulse card) {
public MaelstromPulse copy() {return new MaelstromPulse(this);
public class MagefireWings extends CardImpl {
public MagefireWings (UUID ownerId) {
public MagefireWings (final MagefireWings card) {
public MagefireWings copy() {return new MagefireWings(this);
public class MarrowChomper extends CardImpl {
public MarrowChomper(UUID ownerId) {
public MarrowChomper(final MarrowChomper card) {
public MarrowChomper copy() {return new MarrowChomper(this);
public class MaskOfRiddles extends CardImpl {
public MaskOfRiddles(UUID ownerId) {
public MaskOfRiddles(final MaskOfRiddles card) {
public MaskOfRiddles copy() {return new MaskOfRiddles(this);
public class MayaelsAria extends CardImpl {
public MayaelsAria(UUID ownerId) {
public MayaelsAria(final MayaelsAria card) {
public MayaelsAria copy() {return new MayaelsAria(this);
class MayaelsAriaEffect extends OneShotEffect {
public MayaelsAriaEffect() {
public MayaelsAriaEffect(final MayaelsAriaEffect effect) {
public MayaelsAriaEffect copy() {return new MayaelsAriaEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class MeddlingMage extends CardImpl {
public MeddlingMage(UUID ownerId) {
public MeddlingMage(final MeddlingMage card) {
public MeddlingMage copy() {return new MeddlingMage(this);
public MeddlingMageReplacementEffect() {
public MeddlingMageReplacementEffect(final MeddlingMageReplacementEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MeddlingMageReplacementEffect copy() {return new MeddlingMageReplacementEffect(this);
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast a card with that name (" + mageObject.getLogName() + " in play).";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return object != null && !object.isCopy() && object.getName().equals(game.getState().getValue(source.getSourceId().toString() + NameACardEffect.INFO_KEY));
public class MessengerFalcons extends CardImpl {
public MessengerFalcons(UUID ownerId) {
public MessengerFalcons(final MessengerFalcons card) {
public MessengerFalcons copy() {return new MessengerFalcons(this);
public class MindFuneral extends CardImpl {
public MindFuneral(UUID ownerId) {
public MindFuneral(final MindFuneral card) {
public MindFuneral copy() {return new MindFuneral(this);
class MindFuneralEffect extends OneShotEffect {
public MindFuneralEffect() {
public MindFuneralEffect(final MindFuneralEffect effect) {
public MindFuneralEffect copy() {return new MindFuneralEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MistveinBorderpost extends CardImpl {
public MistveinBorderpost (UUID ownerId) {
public MistveinBorderpost (final MistveinBorderpost card) {
public MistveinBorderpost copy() {return new MistveinBorderpost(this);
public class MonstrousCarabid extends CardImpl {
public MonstrousCarabid(UUID ownerId) {
public MonstrousCarabid(final MonstrousCarabid card) {
public MonstrousCarabid copy() {return new MonstrousCarabid(this);
public class MorbidBloom extends CardImpl {
public MorbidBloom(UUID ownerId) {
public MorbidBloom(final MorbidBloom card) {
public MorbidBloom copy() {return new MorbidBloom(this);
class MorbidBloomEffect extends OneShotEffect {
public MorbidBloomEffect() {
public MorbidBloomEffect(final MorbidBloomEffect effect) {
public MorbidBloomEffect copy() {return new MorbidBloomEffect(this);
public boolean apply(Game game, Ability source) {return token.putOntoBattlefield(toughness, game, source.getSourceId(), source.getControllerId());return false;
public class MycoidShepherd extends CardImpl {
public MycoidShepherd(UUID ownerId) {
public MycoidShepherd(final MycoidShepherd card) {
public MycoidShepherd copy() {return new MycoidShepherd(this);
class MycoidShepherdTriggeredAbility extends TriggeredAbilityImpl {
public MycoidShepherdTriggeredAbility() {
public MycoidShepherdTriggeredAbility(final MycoidShepherdTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return false;return false;return after != null && Zone.GRAVEYARD.match(after);return false;
public String getRule() {return "Whenever Mycoid Shepherd or another creature you control with power 5 or greater dies, you may gain 5 life.";
public MycoidShepherdTriggeredAbility copy() {return new MycoidShepherdTriggeredAbility(this);
public class NayaHushblade extends CardImpl {
public NayaHushblade(UUID ownerId) {
public NayaHushblade(final NayaHushblade card) {
public NayaHushblade copy() {return new NayaHushblade(this);
public class NayaSojourners extends CardImpl {
public NayaSojourners(UUID ownerId) {
public NayaSojourners(final NayaSojourners card) {
public NayaSojourners copy() {return new NayaSojourners(this);
public class NecromancersCovenant extends CardImpl {
public NecromancersCovenant(UUID ownerId) {
public NecromancersCovenant(final NecromancersCovenant card) {
public NecromancersCovenant copy() {return new NecromancersCovenant(this);
class NecromancersConvenantEffect extends OneShotEffect {
public NecromancersConvenantEffect() {
public NecromancersConvenantEffect(NecromancersConvenantEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public NecromancersConvenantEffect copy() {return new NecromancersConvenantEffect(this);
public class NemesisOfReason extends CardImpl {
public NemesisOfReason (UUID ownerId) {
public NemesisOfReason (final NemesisOfReason card) {
public NemesisOfReason copy() {return new NemesisOfReason(this);
class NemesisOfReasonTriggeredAbility extends TriggeredAbilityImpl {
NemesisOfReasonTriggeredAbility(Effect effect) {
NemesisOfReasonTriggeredAbility(final NemesisOfReasonTriggeredAbility ability) {
public NemesisOfReasonTriggeredAbility copy() {return new NemesisOfReasonTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks, defending player puts the top ten cards of his or her library into his or her graveyard.";
public class NulltreadGargantuan extends CardImpl {
public NulltreadGargantuan (UUID ownerId) {
public NulltreadGargantuan (final NulltreadGargantuan card) {
public NulltreadGargantuan copy() {return new NulltreadGargantuan(this);
public class OfferingToAsha extends CardImpl {
public OfferingToAsha(UUID ownerId) {
public OfferingToAsha(final OfferingToAsha card) {
public OfferingToAsha copy() {return new OfferingToAsha(this);
public class PaleRecluse extends CardImpl {
public PaleRecluse(UUID ownerId) {
public PaleRecluse(final PaleRecluse card) {
public PaleRecluse copy() {return new PaleRecluse(this);
public class PredatoryAdvantage extends CardImpl {
public PredatoryAdvantage(UUID ownerId) {
public PredatoryAdvantage(final PredatoryAdvantage card) {
public PredatoryAdvantage copy() {return new PredatoryAdvantage(this);
class DidNotCastCreatureCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public String toString() {return sb.toString();
class CastCreatureWatcher extends Watcher {
public CastCreatureWatcher() {
public CastCreatureWatcher(final CastCreatureWatcher watcher) {
public void watch(GameEvent event, Game game) {
public CastCreatureWatcher copy() {return new CastCreatureWatcher(this);
class LizardToken extends Token {
public LizardToken() {
public class RebornHope extends CardImpl {
public RebornHope(UUID ownerId) {
public RebornHope(final RebornHope card) {
public RebornHope copy() {return new RebornHope(this);return new RetaliatorGriffin(this);return new RetaliatorGriffinTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGED_PLAYER);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a source an opponent controls deals damage to you, you may put that many +1/+1 counters on {this}.";return new RetaliatorGriffinEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RhoxBrute extends CardImpl {
public RhoxBrute (UUID ownerId) {
public RhoxBrute (final RhoxBrute card) {
public RhoxBrute copy() {return new RhoxBrute(this);
public class SagesOfTheAnima extends CardImpl {
public SagesOfTheAnima(UUID ownerId) {
public SagesOfTheAnima(final SagesOfTheAnima card) {
public SagesOfTheAnima copy() {return new SagesOfTheAnima(this);
class SagesOfTheAnimaReplacementEffect extends ReplacementEffectImpl {
public SagesOfTheAnimaReplacementEffect() {
public SagesOfTheAnimaReplacementEffect(final SagesOfTheAnimaReplacementEffect effect) {
public SagesOfTheAnimaReplacementEffect copy() {return new SagesOfTheAnimaReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public class SanctumPlowbeast extends CardImpl {
public SanctumPlowbeast(UUID ownerId) {
public SanctumPlowbeast(final SanctumPlowbeast card) {
public SanctumPlowbeast copy() {return new SanctumPlowbeast(this);
public class SangriteBacklash extends CardImpl {
public SangriteBacklash(UUID ownerId) {
public SangriteBacklash(final SangriteBacklash card) {
public SangriteBacklash copy() {return new SangriteBacklash(this);
public class SanityGnawers extends CardImpl {
public SanityGnawers(UUID ownerId) {
public SanityGnawers(final SanityGnawers card) {
public SanityGnawers copy() {return new SanityGnawers(this);
public class SenTriplets extends CardImpl {
public SenTriplets(UUID ownerId) {
public SenTriplets(final SenTriplets card) {
public SenTriplets copy() {return new SenTriplets(this);return new SenTripletsRuleModifyingEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "This turn you can't cast spells or activate abilities" +return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL || event.getType() == GameEvent.EventType.ACTIVATE_ABILITY;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(getTargetPointer().getFirst(game, source));
class SenTripletsOpponentRevealsHandEffect extends ContinuousEffectImpl {
public SenTripletsOpponentRevealsHandEffect() {
public SenTripletsOpponentRevealsHandEffect(final SenTripletsOpponentRevealsHandEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SenTripletsOpponentRevealsHandEffect copy() {return new SenTripletsOpponentRevealsHandEffect(this);
class SenTripletsPlayFromOpponentsHandEffect extends AsThoughEffectImpl {
public SenTripletsPlayFromOpponentsHandEffect() {
public SenTripletsPlayFromOpponentsHandEffect(final SenTripletsPlayFromOpponentsHandEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SenTripletsPlayFromOpponentsHandEffect copy() {return new SenTripletsPlayFromOpponentsHandEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return card != null &&
public class SewnEyeDrake extends CardImpl {
public SewnEyeDrake (UUID ownerId) {
public SewnEyeDrake (final SewnEyeDrake card) {
public SewnEyeDrake copy() {return new SewnEyeDrake(this);
public class ShieldOfTheRighteous extends CardImpl {
public ShieldOfTheRighteous(UUID ownerId) {
public ShieldOfTheRighteous(final ShieldOfTheRighteous card) {
public ShieldOfTheRighteous copy() {return new ShieldOfTheRighteous(this);
public class SigilCaptain extends CardImpl {
public SigilCaptain(UUID ownerId) {
public SigilCaptain(final SigilCaptain card) {
public SigilCaptain copy() {return new SigilCaptain(this);
class SigilCaptainTriggeredAbility extends TriggeredAbilityImpl {
public SigilCaptainTriggeredAbility() {
public SigilCaptainTriggeredAbility(final SigilCaptainTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;return false;
public SigilCaptainTriggeredAbility copy() {return new SigilCaptainTriggeredAbility(this);
public String getRule() {return sb.toString();
public class SigiledBehemoth extends CardImpl {
public SigiledBehemoth (UUID ownerId) {
public SigiledBehemoth (final SigiledBehemoth card) {
public SigiledBehemoth copy() {return new SigiledBehemoth(this);
public class SigilOfTheNayanGods extends CardImpl {
public SigilOfTheNayanGods(UUID ownerId) {
public SigilOfTheNayanGods(final SigilOfTheNayanGods card) {
public SigilOfTheNayanGods copy() {return new SigilOfTheNayanGods(this);
public class SingeMindOgre extends CardImpl {
public SingeMindOgre(UUID ownerId) {
public SingeMindOgre(final SingeMindOgre card) {
public SingeMindOgre copy() {return new SingeMindOgre(this);
class SingeMindOgreEffect extends OneShotEffect {
public SingeMindOgreEffect() {
public SingeMindOgreEffect(final SingeMindOgreEffect effect) {
public SingeMindOgreEffect copy() {return new SingeMindOgreEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SkyclawThrash extends CardImpl {
public SkyclawThrash(UUID ownerId) {
public SkyclawThrash(final SkyclawThrash card) {
public SkyclawThrash copy() {return new SkyclawThrash(this);
public class SlaveOfBolas extends CardImpl {
public SlaveOfBolas(UUID ownerId) {
public SlaveOfBolas(final SlaveOfBolas card) {
public SlaveOfBolas copy() {return new SlaveOfBolas(this);
class SlaveOfBolasEffect extends OneShotEffect {
public SlaveOfBolasEffect() {
public SlaveOfBolasEffect(final SlaveOfBolasEffect effect) {
public SlaveOfBolasEffect copy() {return new SlaveOfBolasEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SoulManipulation extends CardImpl {
public SoulManipulation(UUID ownerId) {
public SoulManipulation(final SoulManipulation card) {
public SoulManipulation copy() {return new SoulManipulation(this);
public class Soulquake extends CardImpl {
public Soulquake(UUID ownerId) {
public Soulquake(final Soulquake card) {
public Soulquake copy() {return new Soulquake(this);
class SoulquakeEffect extends OneShotEffect {
public SoulquakeEffect() {
public SoulquakeEffect(final SoulquakeEffect effect) {
public SoulquakeEffect copy() {return new SoulquakeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class SpellbreakerBehemoth extends CardImpl {
public SpellbreakerBehemoth(UUID ownerId) {
public SpellbreakerBehemoth(final SpellbreakerBehemoth card) {
public SpellbreakerBehemoth copy() {return new SpellbreakerBehemoth(this);
public class SphinxOfTheSteelWind extends CardImpl {
public SphinxOfTheSteelWind (UUID ownerId) {
public SphinxOfTheSteelWind (final SphinxOfTheSteelWind card) {
public SphinxOfTheSteelWind copy() {return new SphinxOfTheSteelWind(this);
public class StormcallersBoon extends CardImpl {
public StormcallersBoon(UUID ownerId) {
public StormcallersBoon(final StormcallersBoon card) {
public StormcallersBoon copy() {return new StormcallersBoon(this);
public class StunSniper extends CardImpl {
public StunSniper (UUID ownerId) {
public StunSniper (final StunSniper card) {
public StunSniper copy() {return new StunSniper(this);
public class TaintedSigil extends CardImpl {
public TaintedSigil(UUID ownerId) {
public TaintedSigil(final TaintedSigil card) {
public TaintedSigil copy() {return new TaintedSigil(this);
public int calculate(Game game, Ability sourceAbility, Effect effect) {return this.calculate(game, sourceAbility.getControllerId());
public int calculate(Game game, UUID controllerId) {return amountLifeLost;return 0;
public DynamicValue copy() {return new AllPlayersLostLifeCount();
public String toString() {return "X";
public String getMessage() {return "the total life lost by all players this turn";
public class TalonTrooper extends CardImpl {
public TalonTrooper (UUID ownerId) {
public TalonTrooper (final TalonTrooper card) {
public TalonTrooper copy() {return new TalonTrooper(this);
public class Terminate extends CardImpl {
public Terminate(UUID ownerId) {
public Terminate(final Terminate card) {
public Terminate copy() {return new Terminate(this);
public class ThopterFoundry extends CardImpl {
public ThopterFoundry(UUID ownerId) {
public ThopterFoundry(final ThopterFoundry card) {
public ThopterFoundry copy() {return new ThopterFoundry(this);
class ThopterToken extends Token {
ThopterToken() {
public class ThoughtHemorrhage extends CardImpl {
public ThoughtHemorrhage(UUID ownerId) {
public ThoughtHemorrhage(final ThoughtHemorrhage card) {
public ThoughtHemorrhage copy() {return new ThoughtHemorrhage(this);
class ThoughtHemorrhageEffect extends OneShotEffect {
public ThoughtHemorrhageEffect() {
public ThoughtHemorrhageEffect(final ThoughtHemorrhageEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ThoughtHemorrhageEffect copy() {return new ThoughtHemorrhageEffect(this);
public class Thraximundar extends CardImpl {
public Thraximundar(UUID ownerId) {
public Thraximundar(final Thraximundar card) {
public Thraximundar copy() {return new Thraximundar(this);
class ThraximundarTriggeredAbility extends TriggeredAbilityImpl {
public ThraximundarTriggeredAbility() {
public ThraximundarTriggeredAbility(final ThraximundarTriggeredAbility ability) {
public ThraximundarTriggeredAbility copy() {return new ThraximundarTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks, defending player sacrifices a creature.";
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SACRIFICED_PERMANENT;
public boolean checkTrigger(GameEvent event, Game game) {return mageObject != null && mageObject.getCardType().contains(CardType.CREATURE);
public String getRule() {return "Whenever a player sacrifices a creature, " + super.getRule();return new PlayerSacrificesCreatureTriggeredAbility(this);
public class TimeSieve extends CardImpl {
public TimeSieve(UUID ownerId) {
public TimeSieve(final TimeSieve card) {
public TimeSieve copy() {return new TimeSieve(this);
public class TraceOfAbundance extends CardImpl {
public TraceOfAbundance(UUID ownerId) {
public TraceOfAbundance(final TraceOfAbundance card) {
public TraceOfAbundance copy() {return new TraceOfAbundance(this);
class TraceOfAbundanceTriggeredAbility extends TriggeredManaAbility {
public TraceOfAbundanceTriggeredAbility() {
public TraceOfAbundanceTriggeredAbility(final TraceOfAbundanceTriggeredAbility ability) {
public TraceOfAbundanceTriggeredAbility copy() {return new TraceOfAbundanceTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return enchantment != null && event.getSourceId().equals(enchantment.getAttachedTo());
public String getRule() {return "Whenever enchanted land is tapped for mana, its controller adds one mana of any color to his or her mana pool.";
public class UnbenderTine extends CardImpl {
public UnbenderTine(UUID ownerId) {
public UnbenderTine(final UnbenderTine card) {
public UnbenderTine copy() {return new UnbenderTine(this);
class UnbenderTineEffect extends OneShotEffect {
public UnbenderTineEffect() {
public UnbenderTineEffect(final UnbenderTineEffect effect) {
public UnbenderTineEffect copy() {return new UnbenderTineEffect(this);
public boolean apply(Game game, Ability source) {return false;return targetPermanent.untap(game);
public class UnscytheKillerOfKings extends CardImpl {
public UnscytheKillerOfKings(UUID ownerId) {
public UnscytheKillerOfKings(final UnscytheKillerOfKings card) {
public UnscytheKillerOfKings copy() {return new UnscytheKillerOfKings(this);
class UnscytheKillerOfKingsTriggeredAbility extends TriggeredAbilityImpl {
public UnscytheKillerOfKingsTriggeredAbility(Effect effect) {
public UnscytheKillerOfKingsTriggeredAbility(final UnscytheKillerOfKingsTriggeredAbility ability) {
public UnscytheKillerOfKingsTriggeredAbility copy() {return new UnscytheKillerOfKingsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {
public class UrilTheMiststalker extends CardImpl {
public UrilTheMiststalker(UUID ownerId) {
public UrilTheMiststalker(final UrilTheMiststalker card) {
public UrilTheMiststalker copy() {return new UrilTheMiststalker(this);
public class ValleyRannet extends CardImpl {
public ValleyRannet(UUID ownerId) {
public ValleyRannet(final ValleyRannet card) {
public ValleyRannet copy() {return new ValleyRannet(this);
public class VectisDominator extends CardImpl {
public VectisDominator(UUID ownerId) {
public VectisDominator(final VectisDominator card) {
public VectisDominator copy() {return new VectisDominator(this);
class VectisDominatorEffect extends OneShotEffect {
public VectisDominatorEffect(Cost cost) {
public VectisDominatorEffect(final VectisDominatorEffect effect) {
public VectisDominatorEffect copy() {return new VectisDominatorEffect(this);
public boolean apply(Game game, Ability source) {return targetCreature.tap(game);return false;
public class VedalkenGhoul extends CardImpl {
public VedalkenGhoul(UUID ownerId) {
public VedalkenGhoul(final VedalkenGhoul card) {
public VedalkenGhoul copy() {return new VedalkenGhoul(this);
class VedalkenGhoulTriggeredAbility extends TriggeredAbilityImpl {
public VedalkenGhoulTriggeredAbility() {
public VedalkenGhoulTriggeredAbility(final VedalkenGhoulTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.CREATURE_BLOCKED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} becomes blocked, defending player loses 4 life.";
public VedalkenGhoulTriggeredAbility copy() {return new VedalkenGhoulTriggeredAbility(this);
public class VengefulRebirth extends CardImpl {
public VengefulRebirth(UUID ownerId) {
public VengefulRebirth(final VengefulRebirth card) {
public VengefulRebirth copy() {return new VengefulRebirth(this);
class VengefulRebirthEffect extends OneShotEffect {
public VengefulRebirthEffect() {staticText = "Return target card from your graveyard to your hand. If you return a nonland card to your hand this way, {this} deals damage equal to that card's converted mana cost to target creature or player";
public VengefulRebirthEffect(final VengefulRebirthEffect effect) {
public VengefulRebirthEffect copy() {return new VengefulRebirthEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ViolentOutburst extends CardImpl {
public ViolentOutburst(UUID ownerId) {
public ViolentOutburst(final ViolentOutburst card) {
public ViolentOutburst copy() {return new ViolentOutburst(this);
public class VithianRenegades extends CardImpl {
public VithianRenegades (UUID ownerId) {
public VithianRenegades (final VithianRenegades card) {
public VithianRenegades copy() {return new VithianRenegades(this);
public class WallOfDenial extends CardImpl {
public WallOfDenial (UUID ownerId) {
public WallOfDenial (final WallOfDenial card) {
public WallOfDenial copy() {return new WallOfDenial(this);
public class Wargate extends CardImpl {
public Wargate(UUID ownerId) {
public Wargate(final Wargate card) {
public Wargate copy() {return new Wargate(this);
class WargateEffect extends OneShotEffect {
WargateEffect() {
WargateEffect(final WargateEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;
public WargateEffect copy() {return new WargateEffect(this);
public class WildfieldBorderpost extends CardImpl {
public WildfieldBorderpost (UUID ownerId) {
public WildfieldBorderpost (final WildfieldBorderpost card) {
public WildfieldBorderpost copy() {return new WildfieldBorderpost(this);
public class WingedCoatl extends CardImpl {
public WingedCoatl (UUID ownerId) {
public WingedCoatl (final WingedCoatl card) {
public WingedCoatl copy() {return new WingedCoatl(this);
public class ZealousPersecution extends CardImpl {
public ZealousPersecution(UUID ownerId) {
public ZealousPersecution(final ZealousPersecution card) {
public ZealousPersecution copy() {return new ZealousPersecution(this);
public class AesthirGlider1 extends CardImpl {
public AesthirGlider1(UUID ownerId) {
public AesthirGlider1(final AesthirGlider1 card) {
public AesthirGlider1 copy() {return new AesthirGlider1(this);
public class AgentOfStromgald1 extends CardImpl {
public AgentOfStromgald1(UUID ownerId) {
public AgentOfStromgald1(final AgentOfStromgald1 card) {
public AgentOfStromgald1 copy() {return new AgentOfStromgald1(this);
public class BalduvianHorde extends CardImpl {
public BalduvianHorde(UUID ownerId) {
public BalduvianHorde(final BalduvianHorde card) {
public BalduvianHorde copy() {return new BalduvianHorde(this);
public class BalduvianTradingPost extends CardImpl {
public BalduvianTradingPost(UUID ownerId) {
public BalduvianTradingPost(final BalduvianTradingPost card) {
public BalduvianTradingPost copy() {return new BalduvianTradingPost(this);
public class BalduvianWarMakers1 extends CardImpl {
public BalduvianWarMakers1(UUID ownerId) {
public BalduvianWarMakers1(final BalduvianWarMakers1 card) {
public BalduvianWarMakers1 copy() {return new BalduvianWarMakers1(this);
public class Browse extends CardImpl {
public Browse(UUID ownerId) {
public Browse(final Browse card) {
public Browse copy() {return new Browse(this);
class BrowseEffect extends OneShotEffect {
public BrowseEffect() {
public BrowseEffect(final BrowseEffect effect) {
public BrowseEffect copy() {return new BrowseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Burnout extends CardImpl {
public Burnout(UUID ownerId) {
public Burnout(final Burnout card) {
public Burnout copy() {return new Burnout(this);
class BurnoutCounterTargetEffect extends OneShotEffect {
public BurnoutCounterTargetEffect() {
public BurnoutCounterTargetEffect(final BurnoutCounterTargetEffect effect) {
public BurnoutCounterTargetEffect copy() {return new BurnoutCounterTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class CarrierPigeons1 extends CardImpl {
public CarrierPigeons1(UUID ownerId) {
public CarrierPigeons1(final CarrierPigeons1 card) {
public CarrierPigeons1 copy() {return new CarrierPigeons1(this);
public class Contagion extends CardImpl {
public Contagion(UUID ownerId) {
public class DiminishingReturns extends CardImpl {
public DiminishingReturns(UUID ownerId) {
public DiminishingReturns(final DiminishingReturns card) {
public DiminishingReturns copy() {return new DiminishingReturns(this);
class DiminishingReturnsEffect extends OneShotEffect {
public DiminishingReturnsEffect() {
public DiminishingReturnsEffect(final DiminishingReturnsEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public DiminishingReturnsEffect copy() {return new DiminishingReturnsEffect(this);
public class EnslavedScout1 extends CardImpl {
public EnslavedScout1(UUID ownerId) {
public EnslavedScout1(final EnslavedScout1 card) {
public EnslavedScout1 copy() {return new EnslavedScout1(this);
public class Exile extends CardImpl {
public Exile(UUID ownerId) {
public Exile(final Exile card) {
public Exile copy() {return new Exile(this);
class ExileEffect extends OneShotEffect {
public ExileEffect() {
public ExileEffect(final ExileEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public ExileEffect copy() {return new ExileEffect(this);
public class FeveredStrength1 extends CardImpl {
public FeveredStrength1(UUID ownerId) {
public FeveredStrength1(final FeveredStrength1 card) {
public FeveredStrength1 copy() {return new FeveredStrength1(this);
public class ForceOfWill extends CardImpl {
public ForceOfWill(UUID ownerId) {
public class GorillaBerserkers1 extends CardImpl {
public GorillaBerserkers1(UUID ownerId) {
public GorillaBerserkers1(final GorillaBerserkers1 card) {
public GorillaBerserkers1 copy() {return new GorillaBerserkers1(this);
public class GorillaShaman1 extends CardImpl {
public GorillaShaman1(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public GorillaShaman1(final GorillaShaman1 card) {
public GorillaShaman1 copy() {return new GorillaShaman1(this);
public class HeartOfYavimaya extends CardImpl {
public HeartOfYavimaya(UUID ownerId) {
public HeartOfYavimaya(final HeartOfYavimaya card) {
public HeartOfYavimaya copy() {return new HeartOfYavimaya(this);
public class HelmOfObedience extends CardImpl {
public HelmOfObedience(UUID ownerId) {
public HelmOfObedience(final HelmOfObedience card) {
public HelmOfObedience copy() {return new HelmOfObedience(this);
class HelmOfObedienceEffect extends OneShotEffect {
public HelmOfObedienceEffect() {
public HelmOfObedienceEffect(final HelmOfObedienceEffect effect) {
public HelmOfObedienceEffect copy() {return new HelmOfObedienceEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class Inheritance extends CardImpl {
public Inheritance(UUID ownerId) {
public Inheritance(final Inheritance card) {
public Inheritance copy() {return new Inheritance(this);
public class InsidiousBookworms1 extends CardImpl {
public InsidiousBookworms1(UUID ownerId) {
public InsidiousBookworms1(final InsidiousBookworms1 card) {
public InsidiousBookworms1 copy() {return new InsidiousBookworms1(this);
public class JuniperOrderAdvocate extends CardImpl {
public JuniperOrderAdvocate(UUID ownerId) {
public JuniperOrderAdvocate(final JuniperOrderAdvocate card) {
public JuniperOrderAdvocate copy() {return new JuniperOrderAdvocate(this);
public class Kaysa extends CardImpl {
public Kaysa(UUID ownerId) {
public Kaysa(final Kaysa card) {
public Kaysa copy() {return new Kaysa(this);
public class KeeperOfTresserhorn extends CardImpl {
public KeeperOfTresserhorn(UUID ownerId) {
public KeeperOfTresserhorn(final KeeperOfTresserhorn card) {
public KeeperOfTresserhorn copy() {return new KeeperOfTresserhorn(this);
public class LibraryOfLatNam extends CardImpl {
public LibraryOfLatNam(UUID ownerId) {
public LibraryOfLatNam(final LibraryOfLatNam card) {
public LibraryOfLatNam copy() {return new LibraryOfLatNam(this);
public class LimDulsHighGuard1 extends CardImpl {
public LimDulsHighGuard1(UUID ownerId) {
public LimDulsHighGuard1(final LimDulsHighGuard1 card) {
public LimDulsHighGuard1 copy() {return new LimDulsHighGuard1(this);
public class LimDulsPaladin extends CardImpl {
public LimDulsPaladin(UUID ownerId) {
public LimDulsPaladin(final LimDulsPaladin card) {
public LimDulsPaladin copy() {return new LimDulsPaladin(this);
public LimDulsPaladinEffect() {
public LimDulsPaladinEffect(final LimDulsPaladinEffect effect) {
public LimDulsPaladinEffect copy() {return new LimDulsPaladinEffect(this);
public boolean apply(Game game, Ability source) {return new DrawCardSourceControllerEffect(1).apply(game, source);return true;return false;
public class LordOfTresserhorn extends CardImpl {
public LordOfTresserhorn(UUID ownerId) {
public LordOfTresserhorn(final LordOfTresserhorn card) {
public LordOfTresserhorn copy() {return new LordOfTresserhorn(this);
public class MysticCompass extends CardImpl {
public MysticCompass(UUID ownerId) {
public MysticCompass(final MysticCompass card) {
public MysticCompass copy() {return new MysticCompass(this);
public class PhyrexianWarBeast1 extends CardImpl {
public PhyrexianWarBeast1(UUID ownerId) {
public PhyrexianWarBeast1(final PhyrexianWarBeast1 card) {
public PhyrexianWarBeast1 copy() {return new PhyrexianWarBeast1(this);
public class Pyrokinesis extends CardImpl {
public Pyrokinesis(UUID ownerId) {
public class RoyalHerbalist1 extends CardImpl {
public RoyalHerbalist1(UUID ownerId) {
public RoyalHerbalist1(final RoyalHerbalist1 card) {
public RoyalHerbalist1 copy() {return new RoyalHerbalist1(this);
public class SchoolOfTheUnseen extends CardImpl {
public SchoolOfTheUnseen(UUID ownerId) {
public SchoolOfTheUnseen(final SchoolOfTheUnseen card) {
public SchoolOfTheUnseen copy() {return new SchoolOfTheUnseen(this);
public class SeasonedTactician extends CardImpl {
public SeasonedTactician(UUID ownerId) {
public SeasonedTactician(final SeasonedTactician card) {
public SeasonedTactician copy() {return new SeasonedTactician(this);
public class ShelteredValley extends CardImpl {
public ShelteredValley(UUID ownerId) {
public ShelteredValley(final ShelteredValley card) {
public ShelteredValley copy() {return new ShelteredValley(this);
public class ShieldSphere extends CardImpl {
public ShieldSphere(UUID ownerId) {
public ShieldSphere(final ShieldSphere card) {
public ShieldSphere copy() {return new ShieldSphere(this);
public class SoldeviAdnate1 extends CardImpl {
public SoldeviAdnate1(UUID ownerId) {
public SoldeviAdnate1(final SoldeviAdnate1 card) {
public SoldeviAdnate1 copy() {return new SoldeviAdnate1(this);
public class SoldeviDigger extends CardImpl {
public SoldeviDigger(UUID ownerId) {
public SoldeviDigger(final SoldeviDigger card) {
public SoldeviDigger copy() {return new SoldeviDigger(this);
class SoldeviDiggerEffect extends OneShotEffect {
public SoldeviDiggerEffect() {
public SoldeviDiggerEffect(final SoldeviDiggerEffect effect) {
public SoldeviDiggerEffect copy() {return new SoldeviDiggerEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCardToLibraryWithInfo(topCard, source.getSourceId(), game, Zone.GRAVEYARD, false, true);return true;return false;
public class SoldeviExcavations extends CardImpl {
public SoldeviExcavations(UUID ownerId) {
public SoldeviExcavations(final SoldeviExcavations card) {
public SoldeviExcavations copy() {return new SoldeviExcavations(this);
public class SoldeviSage1 extends CardImpl {
public SoldeviSage1(UUID ownerId) {
public SoldeviSage1(final SoldeviSage1 card) {
public SoldeviSage1 copy() {return new SoldeviSage1(this);
class SoldeviSageEffect extends OneShotEffect {
public SoldeviSageEffect() {
public SoldeviSageEffect(final SoldeviSageEffect effect) {
public SoldeviSageEffect copy() {return new SoldeviSageEffect(this);
public boolean apply(Game game, Ability source) {return player.discard(card, source, game);return true;return false;
public class SoldierOfFortune extends CardImpl {
public SoldierOfFortune(UUID ownerId) {
public SoldierOfFortune(final SoldierOfFortune card) {
public SoldierOfFortune copy() {return new SoldierOfFortune(this);
public class SolGrail extends CardImpl {
public SolGrail(UUID ownerId) {
public SolGrail(final SolGrail card) {
public SolGrail copy() {return new SolGrail(this);
class SolGrailManaEffect extends ManaEffect {
public SolGrailManaEffect() {
public SolGrailManaEffect(final SolGrailManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public Mana getMana(Game game, Ability source) {return new Mana(ColoredManaSymbol.lookup(color.toString().charAt(0)));return null;
public SolGrailManaEffect copy() {return new SolGrailManaEffect(this);
public class StormShaman1 extends CardImpl {
public StormShaman1(UUID ownerId) {
public StormShaman1(final StormShaman1 card) {
public StormShaman1 copy() {return new StormShaman1(this);
public class SustainingSpirit extends CardImpl {
public SustainingSpirit(UUID ownerId) {
public SustainingSpirit(final SustainingSpirit card) {
public SustainingSpirit copy() {return new SustainingSpirit(this);
class SustainingSpiritReplacementEffect extends ReplacementEffectImpl {
public SustainingSpiritReplacementEffect() {
public SustainingSpiritReplacementEffect(final SustainingSpiritReplacementEffect effect) {
public SustainingSpiritReplacementEffect copy() {return new SustainingSpiritReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS;
public boolean applies(GameEvent event, Ability source, Game game) {
) {return false;
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class SwampMosquito1 extends CardImpl {
public SwampMosquito1(UUID ownerId) {
public SwampMosquito1(final SwampMosquito1 card) {
public SwampMosquito1 copy() {return new SwampMosquito1(this);return new Tornado(this);
public class WhipVine1 extends CardImpl {
public WhipVine1(UUID ownerId) {
public WhipVine1(final WhipVine1 card) {
public WhipVine1 copy() {return new WhipVine1(this);
public class VoidmageApprentice extends CardImpl {
public VoidmageApprentice(UUID ownerId) {
public VoidmageApprentice(final VoidmageApprentice card) {
public VoidmageApprentice copy() {return new VoidmageApprentice(this);
public class WallOfDeceit extends CardImpl {
public WallOfDeceit(UUID ownerId) {
public WallOfDeceit(final WallOfDeceit card) {
public WallOfDeceit copy() {return new WallOfDeceit(this);
public class ArgivianArchaeologist extends CardImpl {
public ArgivianArchaeologist(UUID ownerId) {
public ArgivianArchaeologist(final ArgivianArchaeologist card) {
public ArgivianArchaeologist copy() {return new ArgivianArchaeologist(this);
public class ArgivianBlacksmith extends CardImpl {
public ArgivianBlacksmith(UUID ownerId) {
public ArgivianBlacksmith(final ArgivianBlacksmith card) {
public ArgivianBlacksmith copy() {return new ArgivianBlacksmith(this);return new ArtifactBlast(this);
public class AshnodsBattleGear extends CardImpl {
public AshnodsBattleGear(UUID ownerId) {
public AshnodsBattleGear(final AshnodsBattleGear card) {
public AshnodsBattleGear copy() {return new AshnodsBattleGear(this);
public class CandelabraOfTawnos extends CardImpl {
public CandelabraOfTawnos(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public CandelabraOfTawnos(final CandelabraOfTawnos card) {
public CandelabraOfTawnos copy() {return new CandelabraOfTawnos(this);
public class CitanulDruid extends CardImpl {
public CitanulDruid(UUID ownerId) {
public CitanulDruid(final CitanulDruid card) {
public CitanulDruid copy() {return new CitanulDruid(this);
public class ClayStatue extends CardImpl {
public ClayStatue(UUID ownerId) {
public ClayStatue(final ClayStatue card) {
public ClayStatue copy() {return new ClayStatue(this);
public class DampingField extends CardImpl {
public DampingField(UUID ownerId) {
public DampingField(final DampingField card) {
public DampingField copy() {return new DampingField(this);
class DampingFieldEffect extends RestrictionUntapNotMoreThanEffect {
public DampingFieldEffect() {
public DampingFieldEffect(final DampingFieldEffect effect) {
public boolean applies(Player player, Ability source, Game game) {return true;
public DampingFieldEffect copy() {return new DampingFieldEffect(this);
public class DrafnasRestoration extends CardImpl {
public DrafnasRestoration(UUID ownerId) {
public DrafnasRestoration(final DrafnasRestoration card) {
public DrafnasRestoration copy() {return new DrafnasRestoration(this);
class DrafnasRestorationTarget extends TargetCardInGraveyard {
DrafnasRestorationTarget() {
DrafnasRestorationTarget(final DrafnasRestorationTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return targetPlayer != null && targetPlayer.getGraveyard().contains(id) && super.canTarget(id, source, game);
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public DrafnasRestorationTarget copy() {return new DrafnasRestorationTarget(this);
class DrafnasRestorationEffect extends OneShotEffect {
DrafnasRestorationEffect() {
DrafnasRestorationEffect(final DrafnasRestorationEffect effect) {
public DrafnasRestorationEffect copy() {return new DrafnasRestorationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EnergyFlux extends CardImpl {
public EnergyFlux(UUID ownerId) {
public EnergyFlux(final EnergyFlux card) {
public EnergyFlux copy() {return new EnergyFlux(this);
public class GateToPhyrexia extends CardImpl {
public GateToPhyrexia(UUID ownerId) {
public GateToPhyrexia(final GateToPhyrexia card) {
public GateToPhyrexia copy() {return new GateToPhyrexia(this);
class GateToPhyrexiaAbility extends LimitedTimesPerTurnActivatedAbility {
public GateToPhyrexiaAbility(Effect effect, Cost cost) {
public GateToPhyrexiaAbility(final GateToPhyrexiaAbility ability) {
public GateToPhyrexiaAbility copy() {return new GateToPhyrexiaAbility(this);
public boolean canActivate(UUID playerId, Game game) {return false;return super.canActivate(playerId, game);
public String getRule() {return "Sacrifice a creature: Destroy target artifact. Activate this ability only during your upkeep and only once each turn.";
public class IvoryTower extends CardImpl {
public IvoryTower(UUID ownerId) {
public IvoryTower(final IvoryTower card) {
public IvoryTower copy() {return new IvoryTower(this);
class IvoryTowerEffect extends OneShotEffect {
public IvoryTowerEffect() {
public IvoryTowerEffect(IvoryTowerEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public IvoryTowerEffect copy() {return new IvoryTowerEffect(this);
public class Mightstone extends CardImpl {
public Mightstone(UUID ownerId) {
public Mightstone(final Mightstone card) {
public Mightstone copy() {return new Mightstone(this);
public class OrcishMechanics extends CardImpl {
public OrcishMechanics(UUID ownerId) {
public OrcishMechanics(final OrcishMechanics card) {
public OrcishMechanics copy() {return new OrcishMechanics(this);
public class PhyrexianGremlins extends CardImpl {
public PhyrexianGremlins(UUID ownerId) {
public PhyrexianGremlins(final PhyrexianGremlins card) {
public PhyrexianGremlins copy() {return new PhyrexianGremlins(this);return new PowerArtifact(this);return true;return true;return false;return new PowerArtifactCostModificationEffect(this);
public class SageOfLatNam extends CardImpl {
public SageOfLatNam(UUID ownerId) {
public SageOfLatNam(final SageOfLatNam card) {
public SageOfLatNam copy() {return new SageOfLatNam(this);return new TransmuteArtifact(this);return new TransmuteArtifactEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;return false;
public class Weakstone extends CardImpl {
public Weakstone(UUID ownerId) {
public Weakstone(final Weakstone card) {
public Weakstone copy() {return new Weakstone(this);
public class AEtherMutation extends CardImpl {
public AEtherMutation(UUID ownerId) {
public AEtherMutation(final AEtherMutation card) {
public AEtherMutation copy() {return new AEtherMutation(this);
public class AnaDisciple extends CardImpl {
public AnaDisciple(UUID ownerId) {
public AnaDisciple(final AnaDisciple card) {
public AnaDisciple copy() {return new AnaDisciple(this);
public class Anavolver extends CardImpl {
public Anavolver(UUID ownerId) {
public Anavolver(final Anavolver card) {
public Anavolver copy() {return new Anavolver(this);
public class AngelfireCrusader extends CardImpl {
public AngelfireCrusader(UUID ownerId) {
public AngelfireCrusader(final AngelfireCrusader card) {
public AngelfireCrusader copy() {return new AngelfireCrusader(this);
public class BattlefieldForge extends CardImpl {
public BattlefieldForge(UUID ownerId) {
public BattlefieldForge(final BattlefieldForge card) {
public BattlefieldForge copy() {return new BattlefieldForge(this);
public class BloodfireColossus extends CardImpl {
public BloodfireColossus(UUID ownerId) {
public BloodfireColossus(final BloodfireColossus card) {
public BloodfireColossus copy() {return new BloodfireColossus(this);
public class BloodfireDwarf extends CardImpl {
public BloodfireDwarf(UUID ownerId) {
public BloodfireDwarf(final BloodfireDwarf card) {
public BloodfireDwarf copy() {return new BloodfireDwarf(this);
public class BloodfireKavu extends CardImpl {
public BloodfireKavu(UUID ownerId) {
public BloodfireKavu(final BloodfireKavu card) {
public BloodfireKavu copy() {return new BloodfireKavu(this);
public class BogGnarr extends CardImpl {
public BogGnarr(UUID ownerId) {
public BogGnarr(final BogGnarr card) {
public BogGnarr copy() {return new BogGnarr(this);
public class BrassHerald extends CardImpl {
public BrassHerald(UUID ownerId) {
public BrassHerald(final BrassHerald card) {
public BrassHerald copy() {return new BrassHerald(this);
public class CavesOfKoilos extends CardImpl {
public CavesOfKoilos(UUID ownerId) {
public CavesOfKoilos(final CavesOfKoilos card) {
public CavesOfKoilos copy() {return new CavesOfKoilos(this);
public class CetaDisciple extends CardImpl {
public CetaDisciple(UUID ownerId) {
public CetaDisciple(final CetaDisciple card) {
public CetaDisciple copy() {return new CetaDisciple(this);
public class Cetavolver extends CardImpl {
public Cetavolver(UUID ownerId) {
public Cetavolver(final Cetavolver card) {
public Cetavolver copy() {return new Cetavolver(this);
public class CoastalDrake extends CardImpl {
public CoastalDrake(UUID ownerId) {
public CoastalDrake(final CoastalDrake card) {
public CoastalDrake copy() {return new CoastalDrake(this);
public class ConsumeStrength extends CardImpl {
public ConsumeStrength(UUID ownerId) {
public ConsumeStrength(final ConsumeStrength card) {
public ConsumeStrength copy() {return new ConsumeStrength(this);
class ConsumeStrengthEffect extends ContinuousEffectImpl {
public ConsumeStrengthEffect() {
public ConsumeStrengthEffect(final ConsumeStrengthEffect effect) {
public ConsumeStrengthEffect copy() {return new ConsumeStrengthEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class DeathGrasp extends CardImpl {
public DeathGrasp (UUID ownerId) {
public DeathGrasp (final DeathGrasp card) {
public DeathGrasp copy() {return new DeathGrasp(this);
public class DeathMutation extends CardImpl {
public DeathMutation(UUID ownerId) {
public DeathMutation(final DeathMutation card) {
public DeathMutation copy() {return new DeathMutation(this);
public class DegaDisciple extends CardImpl {
public DegaDisciple(UUID ownerId) {
public DegaDisciple(final DegaDisciple card) {
public DegaDisciple copy() {return new DegaDisciple(this);
public class Degavolver extends CardImpl {
public Degavolver(UUID ownerId) {
public Degavolver(final Degavolver card) {
public Degavolver copy() {return new Degavolver(this);
public class DesolationAngel extends CardImpl {
public DesolationAngel(UUID ownerId) {
public DesolationAngel(final DesolationAngel card) {
public DesolationAngel copy() {return new DesolationAngel(this);
public class DesolationGiant extends CardImpl {
public DesolationGiant(UUID ownerId) {
public DesolationGiant(final DesolationGiant card) {
public DesolationGiant copy() {return new DesolationGiant(this);
public class DiversionaryTactics extends CardImpl {
public DiversionaryTactics(UUID ownerId) {
public DiversionaryTactics(final DiversionaryTactics card) {
public DiversionaryTactics copy() {return new DiversionaryTactics(this);
public class DivineLight extends CardImpl {
public DivineLight(UUID ownerId) {
public DivineLight(final DivineLight card) {
public DivineLight copy() {return new DivineLight(this);
public class Dodecapod extends CardImpl {
public Dodecapod(UUID ownerId) {
public Dodecapod(final Dodecapod card) {
public Dodecapod copy() {return new Dodecapod(this);
class DodecapodEffect extends DiscardOntoBattlefieldEffect {
public DodecapodEffect() {
public DodecapodEffect(final DodecapodEffect effect) {
public DodecapodEffect copy() {return new DodecapodEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public class DragonArch extends CardImpl {
public DragonArch(UUID ownerId) {
public DragonArch(final DragonArch card) {
public DragonArch copy() {return new DragonArch(this);
public class DwarvenLandslide extends CardImpl {
public DwarvenLandslide(UUID ownerId) {
public DwarvenLandslide(final DwarvenLandslide card) {
public void adjustTargets(Ability ability, Game game) {
public DwarvenLandslide copy() {return new DwarvenLandslide(this);
public class DwarvenPatrol extends CardImpl {
public DwarvenPatrol(UUID ownerId) {
public DwarvenPatrol(final DwarvenPatrol card) {
public DwarvenPatrol copy() {return new DwarvenPatrol(this);
public class EbonyTreefolk extends CardImpl {
public EbonyTreefolk(UUID ownerId) {
public EbonyTreefolk(final EbonyTreefolk card) {
public EbonyTreefolk copy() {return new EbonyTreefolk(this);
public class EnlistmentOfficer extends CardImpl {
public EnlistmentOfficer(UUID ownerId) {
public EnlistmentOfficer(final EnlistmentOfficer card) {
public EnlistmentOfficer copy() {return new EnlistmentOfficer(this);
public class EvasiveAction extends CardImpl {
public EvasiveAction(UUID ownerId) {
public EvasiveAction(final EvasiveAction card) {
public EvasiveAction copy() {return new EvasiveAction(this);
public class FerventCharge extends CardImpl {
public FerventCharge(UUID ownerId) {
public FerventCharge(final FerventCharge card) {
public FerventCharge copy() {return new FerventCharge(this);
public class FlowstoneCharger extends CardImpl {
public FlowstoneCharger(UUID ownerId) {
public FlowstoneCharger(final FlowstoneCharger card) {
public FlowstoneCharger copy() {return new FlowstoneCharger(this);
public class FoulPresence extends CardImpl {
public FoulPresence(UUID ownerId) {
public FoulPresence(final FoulPresence card) {
public FoulPresence copy() {return new FoulPresence(this);
public class GerrardCapashen extends CardImpl {
public GerrardCapashen(UUID ownerId) {
public GerrardCapashen(final GerrardCapashen card) {
public GerrardCapashen copy() {return new GerrardCapashen(this);
class GerrardCapashenEffect extends OneShotEffect {
public GerrardCapashenEffect() {
public GerrardCapashenEffect(final GerrardCapashenEffect effect) {
public GerrardCapashenEffect copy() {return new GerrardCapashenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GerrardsVerdict extends CardImpl {
public GerrardsVerdict(UUID ownerId) {
public GerrardsVerdict(final GerrardsVerdict card) {
public GerrardsVerdict copy() {return new GerrardsVerdict(this);
class GerrardsVerdictEffect extends OneShotEffect {
public GerrardsVerdictEffect() {
public GerrardsVerdictEffect(final GerrardsVerdictEffect effect) {
public GerrardsVerdictEffect copy() {return new GerrardsVerdictEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GladeGnarr extends CardImpl {
public GladeGnarr(UUID ownerId) {
public GladeGnarr(final GladeGnarr card) {
public GladeGnarr copy() {return new GladeGnarr(this);
public class GoblinLegionnaire extends CardImpl {
public GoblinLegionnaire(UUID ownerId) {
public GoblinLegionnaire(final GoblinLegionnaire card) {
public GoblinLegionnaire copy() {return new GoblinLegionnaire(this);
public class GoblinRingleader extends CardImpl {
public GoblinRingleader(UUID ownerId) {
public GoblinRingleader(final GoblinRingleader card) {
public GoblinRingleader copy() {return new GoblinRingleader(this);
public class GoblinTrenches extends CardImpl {
public GoblinTrenches(UUID ownerId) {
public GoblinTrenches(final GoblinTrenches card) {
public GoblinTrenches copy() {return new GoblinTrenches(this);
class GoblinTrenchesToken extends Token {
GoblinTrenchesToken() {
public class GraveDefiler extends CardImpl {
public GraveDefiler(UUID ownerId) {
public GraveDefiler(final GraveDefiler card) {
public GraveDefiler copy() {return new GraveDefiler(this);
public class HauntedAngel extends CardImpl {
public HauntedAngel(UUID ownerId) {
public HauntedAngel(final HauntedAngel card) {
public HauntedAngel copy() {return new HauntedAngel(this);
class HauntedAngelEffect extends OneShotEffect {
public HauntedAngelEffect() {
public HauntedAngelEffect(HauntedAngelEffect copy) {
public HauntedAngelEffect copy() {return new HauntedAngelEffect(this);
public boolean apply(Game game, Ability source) {return true;
class HauntedAngelToken extends Token {
public HauntedAngelToken() {
public class Helionaut extends CardImpl {
public Helionaut(UUID ownerId) {
public Helionaut(final Helionaut card) {
public Helionaut copy() {return new Helionaut(this);
public class Illuminate extends CardImpl {
public Illuminate(UUID ownerId) {
public Illuminate(final Illuminate card) {
public Illuminate copy() {return new Illuminate(this);
public class Index extends CardImpl {
public Index(UUID ownerId) {
public Index(final Index card) {
public Index copy() {return new Index(this);
public class Jilt extends CardImpl {
public Jilt(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public Jilt(final Jilt card) {
public Jilt copy() {return new Jilt(this);
class TargetOtherCreaturePermanent extends TargetCreaturePermanent {
public TargetOtherCreaturePermanent(FilterCreaturePermanent filter) {
public TargetOtherCreaturePermanent(final TargetOtherCreaturePermanent target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return false;return super.canTarget(controllerId, id, source, game);
public TargetOtherCreaturePermanent copy() {return new TargetOtherCreaturePermanent(this);
public class JungleBarrier extends CardImpl {
public JungleBarrier(UUID ownerId) {
public JungleBarrier(final JungleBarrier card) {
public JungleBarrier copy() {return new JungleBarrier(this);
public class KavuGlider extends CardImpl {
public KavuGlider(UUID ownerId) {
public KavuGlider(final KavuGlider card) {
public KavuGlider copy() {return new KavuGlider(this);
public class KavuHowler extends CardImpl {
public KavuHowler(UUID ownerId) {
public KavuHowler(final KavuHowler card) {
public KavuHowler copy() {return new KavuHowler(this);
public class KavuMauler extends CardImpl {
public KavuMauler(UUID ownerId) {
public KavuMauler(final KavuMauler card) {
public KavuMauler copy() {return new KavuMauler(this);
public class LastCaress extends CardImpl {
public LastCaress(UUID ownerId) {
public LastCaress(final LastCaress card) {
public LastCaress copy() {return new LastCaress(this);
public class LayOfTheLand extends CardImpl {
public LayOfTheLand(UUID ownerId) {
public LayOfTheLand(final LayOfTheLand card) {
public LayOfTheLand copy() {return new LayOfTheLand(this);
public class LivingAirship extends CardImpl {
public LivingAirship(UUID ownerId) {
public LivingAirship(final LivingAirship card) {
public LivingAirship copy() {return new LivingAirship(this);
public class LlanowarDead extends CardImpl {
public LlanowarDead(UUID ownerId) {
public LlanowarDead(final LlanowarDead card) {
public LlanowarDead copy() {return new LlanowarDead(this);
public class LlanowarWastes extends CardImpl {
public LlanowarWastes(UUID ownerId) {
public LlanowarWastes(final LlanowarWastes card) {
public LlanowarWastes copy() {return new LlanowarWastes(this);
public class ManaclesOfDecay extends CardImpl {
public ManaclesOfDecay(UUID ownerId) {
public ManaclesOfDecay(final ManaclesOfDecay card) {
public ManaclesOfDecay copy() {return new ManaclesOfDecay(this);
public class MartyrsTomb extends CardImpl {
public MartyrsTomb(UUID ownerId) {
public MartyrsTomb(final MartyrsTomb card) {
public MartyrsTomb copy() {return new MartyrsTomb(this);
public class MaskOfIntolerance extends CardImpl {
public MaskOfIntolerance(UUID ownerId) {
public MaskOfIntolerance(final MaskOfIntolerance card) {
public MaskOfIntolerance copy() {return new MaskOfIntolerance(this);
class MaskOfIntoleranceCondition extends IntCompareCondition {
public MaskOfIntoleranceCondition() {
protected int getInputValue(Game game, Ability source) {return new DomainValue(1, game.getActivePlayerId()).calculate(game, source, null);
public class MinotaurIllusionist extends CardImpl {
public MinotaurIllusionist(UUID ownerId) {
public MinotaurIllusionist(final MinotaurIllusionist card) {
public MinotaurIllusionist copy() {return new MinotaurIllusionist(this);
public class MinotaurTactician extends CardImpl {
public MinotaurTactician(UUID ownerId) {
public MinotaurTactician(final MinotaurTactician card) {
public MinotaurTactician copy() {return new MinotaurTactician(this);
public class MournfulZombie extends CardImpl {
public MournfulZombie(UUID ownerId) {
public MournfulZombie(final MournfulZombie card) {
public MournfulZombie copy() {return new MournfulZombie(this);
public class MysticSnake extends CardImpl {
public MysticSnake(UUID ownerId) {
public MysticSnake(final MysticSnake card) {
public MysticSnake copy() {return new MysticSnake(this);
public class NecraDisciple extends CardImpl {
public NecraDisciple(UUID ownerId) {
public NecraDisciple(final NecraDisciple card) {
public NecraDisciple copy() {return new NecraDisciple(this);
public class Necravolver extends CardImpl {
public Necravolver(UUID ownerId) {
public Necravolver(final Necravolver card) {
public Necravolver copy() {return new Necravolver(this);
public class OrimsThunder extends CardImpl {
public OrimsThunder(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public OrimsThunder(final OrimsThunder card) {
public OrimsThunder copy() {return new OrimsThunder(this);
class OrimsThunderEffect2 extends OneShotEffect {
OrimsThunderEffect2() {
OrimsThunderEffect2(final OrimsThunderEffect2 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public OrimsThunderEffect2 copy() {return new OrimsThunderEffect2(this);
class OrimsThunderEffect extends OneShotEffect {
OrimsThunderEffect() {
OrimsThunderEffect(final OrimsThunderEffect effect) {
public boolean apply(Game game, Ability source) {return target.destroy(source.getSourceId(), game, false);return false;
public OrimsThunderEffect copy() {return new OrimsThunderEffect(this);
public class OvergrownEstate extends CardImpl {
public OvergrownEstate(UUID ownerId) {
public OvergrownEstate(final OvergrownEstate card) {
public OvergrownEstate copy() {return new OvergrownEstate(this);
public class PenumbraBobcat extends CardImpl {
public PenumbraBobcat(UUID ownerId) {
public PenumbraBobcat(final PenumbraBobcat card) {
public PenumbraBobcat copy() {return new PenumbraBobcat(this);
class PenumbraBobcatToken extends Token {
PenumbraBobcatToken() {
public class PenumbraKavu extends CardImpl {
public PenumbraKavu(UUID ownerId) {
public PenumbraKavu(final PenumbraKavu card) {
public PenumbraKavu copy() {return new PenumbraKavu(this);
class PenumbraKavuToken extends Token {
PenumbraKavuToken() {
public class PenumbraWurm extends CardImpl {
public PenumbraWurm(UUID ownerId) {
public PenumbraWurm(final PenumbraWurm card) {
public PenumbraWurm copy() {return new PenumbraWurm(this);
class PenumbraWurmToken extends Token {
PenumbraWurmToken() {
public class PerniciousDeed extends CardImpl {
public PerniciousDeed(UUID ownerId) {
public PerniciousDeed(final PerniciousDeed card) {
public PerniciousDeed copy() {return new PerniciousDeed(this);
class PerniciousDeedEffect extends OneShotEffect {
public PerniciousDeedEffect() {
public PerniciousDeedEffect(final PerniciousDeedEffect effect) {
public PerniciousDeedEffect copy() {return new PerniciousDeedEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class PlanarDespair extends CardImpl {
public PlanarDespair(UUID ownerId) {
public PlanarDespair(final PlanarDespair card) {
public PlanarDespair copy() {return new PlanarDespair(this);
public class PutridWarrior extends CardImpl {
public PutridWarrior(UUID ownerId) {
public PutridWarrior(final PutridWarrior card) {
public PutridWarrior copy() {return new PutridWarrior(this);
class PutridWarriorDealsDamageTriggeredAbility extends TriggeredAbilityImpl {
public PutridWarriorDealsDamageTriggeredAbility(Effect effect) {
public PutridWarriorDealsDamageTriggeredAbility(final PutridWarriorDealsDamageTriggeredAbility ability) {
public PutridWarriorDealsDamageTriggeredAbility copy() {return new PutridWarriorDealsDamageTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER || event.getType() == EventType.DAMAGED_CREATURE
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId().equals(this.sourceId);
public String getRule() {return "Whenever {this} deals damage, " + super.getRule();return new PutridWarriorGainLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class QuagmireDruid extends CardImpl {
public QuagmireDruid(UUID ownerId) {
public QuagmireDruid(final QuagmireDruid card) {
public QuagmireDruid copy() {return new QuagmireDruid(this);
public class QuicksilverDagger extends CardImpl {
public QuicksilverDagger(UUID ownerId) {
public QuicksilverDagger(final QuicksilverDagger card) {
public QuicksilverDagger copy() {return new QuicksilverDagger(this);
public class RakaDisciple extends CardImpl {
public RakaDisciple(UUID ownerId) {
public RakaDisciple(final RakaDisciple card) {
public RakaDisciple copy() {return new RakaDisciple(this);
public class Rakavolver extends CardImpl {
public Rakavolver(UUID ownerId) {
public Rakavolver(final Rakavolver card) {
public Rakavolver copy() {return new Rakavolver(this);
public class RazorfinHunter extends CardImpl {
public RazorfinHunter(UUID ownerId) {
public RazorfinHunter(final RazorfinHunter card) {
public RazorfinHunter copy() {return new RazorfinHunter(this);
public class ReefShaman extends CardImpl {
public ReefShaman(UUID ownerId) {
public ReefShaman(final ReefShaman card) {
public ReefShaman copy() {return new ReefShaman(this);
public class SavageGorilla extends CardImpl {
public SavageGorilla(UUID ownerId) {
public SavageGorilla(final SavageGorilla card) {
public SavageGorilla copy() {return new SavageGorilla(this);
public class ShieldOfDutyAndReason extends CardImpl {
public ShieldOfDutyAndReason(UUID ownerId) {
public ShieldOfDutyAndReason(final ShieldOfDutyAndReason card) {
public ShieldOfDutyAndReason copy() {return new ShieldOfDutyAndReason(this);
public class ShimmeringMirage extends CardImpl {
public ShimmeringMirage(UUID ownerId) {
public ShimmeringMirage(final ShimmeringMirage card) {
public ShimmeringMirage copy() {return new ShimmeringMirage(this);
public class ShivanReef extends CardImpl {
public ShivanReef(UUID ownerId) {
public ShivanReef(final ShivanReef card) {
public ShivanReef copy() {return new ShivanReef(this);
public class Smash extends CardImpl {
public Smash(UUID ownerId) {
public Smash(final Smash card) {
public Smash copy() {return new Smash(this);
public class SoulLink extends CardImpl {
public SoulLink(UUID ownerId) {
public SoulLink(final SoulLink card) {
public SoulLink copy() {return new SoulLink(this);
public class SpectralLynx extends CardImpl {
public SpectralLynx(UUID ownerId) {
public SpectralLynx(final SpectralLynx card) {
public SpectralLynx copy() {return new SpectralLynx(this);
public class Spiritmonger extends CardImpl {
public Spiritmonger(UUID ownerId) {
public Spiritmonger(final Spiritmonger card) {
public Spiritmonger copy() {return new Spiritmonger(this);
public class SqueesEmbrace extends CardImpl {
public SqueesEmbrace(UUID ownerId) {
public SqueesEmbrace(final SqueesEmbrace card) {
public SqueesEmbrace copy() {return new SqueesEmbrace(this);
public class SqueesRevenge extends CardImpl {
public SqueesRevenge(UUID ownerId) {
public SqueesRevenge(final SqueesRevenge card) {
public SqueesRevenge copy() {return new SqueesRevenge(this);
class SqueesRevengeEffect extends OneShotEffect {
public SqueesRevengeEffect() {
public SqueesRevengeEffect(final SqueesRevengeEffect effect) {
public SqueesRevengeEffect copy() {return new SqueesRevengeEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class SylvanMessenger extends CardImpl {
public SylvanMessenger(UUID ownerId) {
public SylvanMessenger(final SylvanMessenger card) {
public SylvanMessenger copy() {return new SylvanMessenger(this);
public class SymbioticDeployment extends CardImpl {
public SymbioticDeployment(UUID ownerId) {
public SymbioticDeployment(final SymbioticDeployment card) {
public SymbioticDeployment copy() {return new SymbioticDeployment(this);
public class TemporalSpring extends CardImpl {
public TemporalSpring(UUID ownerId) {
public TemporalSpring(final TemporalSpring card) {
public TemporalSpring copy() {return new TemporalSpring(this);
public class TidalCourier extends CardImpl {
public TidalCourier(UUID ownerId) {
public TidalCourier(final TidalCourier card) {
public TidalCourier copy() {return new TidalCourier(this);
public class TranquilPath extends CardImpl {
public TranquilPath(UUID ownerId) {
public TranquilPath(final TranquilPath card) {
public TranquilPath copy() {return new TranquilPath(this);
class TranquilPathEffect extends OneShotEffect {
public TranquilPathEffect() {
public TranquilPathEffect(final TranquilPathEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TranquilPathEffect copy() {return new TranquilPathEffect(this);
public class TundraKavu extends CardImpl {
public TundraKavu(UUID ownerId) {
public TundraKavu(final TundraKavu card) {
public TundraKavu copy() {return new TundraKavu(this);
class TundraKavuEffect extends BecomesBasicLandTargetEffect {
public TundraKavuEffect() {
public TundraKavuEffect(final TundraKavuEffect effect) {
public TundraKavuEffect copy() {return new TundraKavuEffect(this);
public void init(Ability source, Game game) {
public class UnnaturalSelection extends CardImpl {
public UnnaturalSelection(UUID ownerId) {
public UnnaturalSelection(final UnnaturalSelection card) {
public UnnaturalSelection copy() {return new UnnaturalSelection(this);
public class UrborgElf extends CardImpl {
public UrborgElf(UUID ownerId) {
public UrborgElf(final UrborgElf card) {
public UrborgElf copy() {return new UrborgElf(this);
public class UrborgUprising extends CardImpl {
public UrborgUprising(UUID ownerId) {
public UrborgUprising(final UrborgUprising card) {
public UrborgUprising copy() {return new UrborgUprising(this);
public class Vindicate extends CardImpl {
public Vindicate (UUID ownerId) {
public Vindicate (final Vindicate card) {
public Vindicate copy() {return new Vindicate(this);
public class VodalianMystic extends CardImpl {
public VodalianMystic(UUID ownerId) {
public VodalianMystic(final VodalianMystic card) {
public VodalianMystic copy() {return new VodalianMystic(this);
public class WhirlpoolDrake extends CardImpl {
public WhirlpoolDrake(UUID ownerId) {
public WhirlpoolDrake(final WhirlpoolDrake card) {
public WhirlpoolDrake copy() {return new WhirlpoolDrake(this);
public class WhirlpoolRider extends CardImpl {
public WhirlpoolRider(UUID ownerId) {
public WhirlpoolRider(final WhirlpoolRider card) {
public WhirlpoolRider copy() {return new WhirlpoolRider(this);
public class WildResearch extends CardImpl {
public WildResearch(UUID ownerId) {
public WildResearch(final WildResearch card) {
public WildResearch copy() {return new WildResearch(this);
class WildResearchEffect extends OneShotEffect {
WildResearchEffect(FilterCard filter) {
WildResearchEffect(final WildResearchEffect effect) {
public WildResearchEffect copy() {return new WildResearchEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class YavimayaCoast extends CardImpl {
public YavimayaCoast(UUID ownerId) {
public YavimayaCoast(final YavimayaCoast card) {
public YavimayaCoast copy() {return new YavimayaCoast(this);
public class YavimayasEmbrace extends CardImpl {
public YavimayasEmbrace(UUID ownerId) {
public YavimayasEmbrace(final YavimayasEmbrace card) {
public YavimayasEmbrace copy() {return new YavimayasEmbrace(this);
public class AliBaba extends CardImpl {
public AliBaba(UUID ownerId) {
public AliBaba(final AliBaba card) {
public AliBaba copy() {return new AliBaba(this);
public class AliFromCairo extends CardImpl {
public AliFromCairo(UUID ownerId) {
public AliFromCairo(final AliFromCairo card) {
public AliFromCairo copy() {return new AliFromCairo(this);
class AliFromCairoReplacementEffect extends ReplacementEffectImpl {
public AliFromCairoReplacementEffect() {
public AliFromCairoReplacementEffect(final AliFromCairoReplacementEffect effect) {
public AliFromCairoReplacementEffect copy() {return new AliFromCairoReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS;
public boolean applies(GameEvent event, Ability source, Game game) {
) {return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class DiamondValley extends CardImpl {
public DiamondValley(UUID ownerId) {
public DiamondValley(final DiamondValley card) {
public DiamondValley copy() {return new DiamondValley(this);
public class ElHajjaj extends CardImpl {
public ElHajjaj(UUID ownerId) {
public ElHajjaj(final ElHajjaj card) {
public ElHajjaj copy() {return new ElHajjaj(this);
public class FishliverOil1 extends CardImpl {
public FishliverOil1(UUID ownerId) {
public FishliverOil1(final FishliverOil1 card) {
public FishliverOil1 copy() {return new FishliverOil1(this);
public class IslandOfWakWak extends CardImpl {
public IslandOfWakWak(UUID ownerId) {
public IslandOfWakWak(final IslandOfWakWak card) {
public IslandOfWakWak copy() {return new IslandOfWakWak(this);
class IslandOfWakWakEffect extends OneShotEffect {
public IslandOfWakWakEffect() {
public IslandOfWakWakEffect(final IslandOfWakWakEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public Effect copy() {return new IslandOfWakWakEffect(this);
public class JuzamDjinn extends CardImpl {
public JuzamDjinn(UUID ownerId) {
public JuzamDjinn(final JuzamDjinn card) {
public JuzamDjinn copy() {return new JuzamDjinn(this);
public class KingSuleiman extends CardImpl {
public KingSuleiman(UUID ownerId) {
public KingSuleiman(final KingSuleiman card) {
public KingSuleiman copy() {return new KingSuleiman(this);
public class MerchantShip extends CardImpl {
public MerchantShip(UUID ownerId) {
public MerchantShip(final MerchantShip card) {
public MerchantShip copy() {return new MerchantShip(this);
public class NafsAsp extends CardImpl {
public NafsAsp(UUID ownerId) {
public NafsAsp(final NafsAsp card) {
public NafsAsp copy() {return new NafsAsp(this);
public class OldManOfTheSea extends CardImpl {
public OldManOfTheSea(UUID ownerId) {
public OldManOfTheSea(final OldManOfTheSea card) {
public OldManOfTheSea copy() {return new OldManOfTheSea(this);
class OldManOfTheSeaGainControlTargetEffect extends GainControlTargetEffect {
public OldManOfTheSeaGainControlTargetEffect(Duration duration, boolean fixedControl) {
public OldManOfTheSeaGainControlTargetEffect(final OldManOfTheSeaGainControlTargetEffect effect) {
public void init(Ability source, Game game) {
public OldManOfTheSeaGainControlTargetEffect copy() {return new OldManOfTheSeaGainControlTargetEffect(this);
class OldManOfTheSeaStateBasedTriggeredAbility extends StateTriggeredAbility {
public OldManOfTheSeaStateBasedTriggeredAbility() {
public OldManOfTheSeaStateBasedTriggeredAbility(final OldManOfTheSeaStateBasedTriggeredAbility ability) {
public OldManOfTheSeaStateBasedTriggeredAbility copy() {return new OldManOfTheSeaStateBasedTriggeredAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return false;
class SourcePowerGreaterEqualTargetCondition implements Condition {
public boolean apply(Game game, Ability source) {return false;return true;
class PowerLowerEqualSourcePredicate implements ObjectPlayerPredicate<ObjectPlayer<Permanent>> {
public PowerLowerEqualSourcePredicate(UUID sourceId) {
public boolean apply(ObjectPlayer<Permanent> input, Game game) {return true;return false;
public String toString() {return "creature with power less than or equal to {source}'s power";
public class RukhEgg1 extends CardImpl {
public RukhEgg1(UUID ownerId) {
public RukhEgg1(final RukhEgg1 card) {
public RukhEgg1 copy() {return new RukhEgg1(this);
class BirdToken extends Token {
public BirdToken() {
public class StoneThrowingDevils1 extends CardImpl {
public StoneThrowingDevils1(UUID ownerId) {
public StoneThrowingDevils1(final StoneThrowingDevils1 card) {
public StoneThrowingDevils1 copy() {return new StoneThrowingDevils1(this);
public class UnstableMutation extends CardImpl {
public UnstableMutation(UUID ownerId) {
public UnstableMutation(final UnstableMutation card) {
public UnstableMutation copy() {return new UnstableMutation(this);
public class AvatarOfWoe extends CardImpl {
public AvatarOfWoe(UUID ownerId) {
public AvatarOfWoe(final AvatarOfWoe card) {
public AvatarOfWoe copy() {return new AvatarOfWoe(this);
AvatarOfWoeCostReductionEffect() {
AvatarOfWoeCostReductionEffect(final AvatarOfWoeCostReductionEffect effect) {return true;return false;return abilityToModify.getSourceId().equals(source.getSourceId())
public AvatarOfWoeCostReductionEffect copy() {return new AvatarOfWoeCostReductionEffect(this);
public class BatteringCraghorn extends CardImpl {
public BatteringCraghorn(UUID ownerId) {
public BatteringCraghorn(final BatteringCraghorn card) {
public BatteringCraghorn copy() {return new BatteringCraghorn(this);
public class DragonBreath extends CardImpl {
public DragonBreath(UUID ownerId) {
public DragonBreath(final DragonBreath card) {
public DragonBreath copy() {return new DragonBreath(this);
class DragonBreathEffect extends OneShotEffect {
DragonBreathEffect() {this.staticText = "return {this} from your graveyard to the battlefield attached to that creature";
DragonBreathEffect(final DragonBreathEffect effect) {
public DragonBreathEffect copy() {return new DragonBreathEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ImperialHellkite extends CardImpl {
public ImperialHellkite(UUID ownerId) {
public ImperialHellkite(final ImperialHellkite card) {
public ImperialHellkite copy() {return new ImperialHellkite(this);return new MakeshiftMannequin(this);return new MakeshiftMannequinEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public boolean apply(Game game, Ability source) {return true;return false;
public boolean isInactive(Ability source, Game game) {return permanent == null || permanent.getCounters().getCount(CounterType.MANNEQUIN) < 1;return new MakeshiftMannequinGainAbilityEffect(this);
public class NantukoMonastery extends CardImpl {
public NantukoMonastery(UUID ownerId) {
public NantukoMonastery(final NantukoMonastery card) {
public NantukoMonastery copy() {return new NantukoMonastery(this);
class NantukoMonasteryToken extends Token {
public NantukoMonasteryToken() {
public class SpinIntoMyth extends CardImpl {
public SpinIntoMyth(UUID ownerId) {
public SpinIntoMyth(final SpinIntoMyth card) {
public SpinIntoMyth copy() {return new SpinIntoMyth(this);
public class VampiricDragon extends CardImpl {
public VampiricDragon(UUID ownerId) {
public VampiricDragon(final VampiricDragon card) {
public VampiricDragon copy() {return new VampiricDragon(this);
public class YavimayaDryad extends CardImpl {
public YavimayaDryad(UUID ownerId) {
public YavimayaDryad(final YavimayaDryad card) {
public YavimayaDryad copy() {return new YavimayaDryad(this);
class YavimayaDryadEffect extends SearchEffect {
public YavimayaDryadEffect(TargetCardInLibrary target) {
public YavimayaDryadEffect(final YavimayaDryadEffect effect) {
public YavimayaDryadEffect copy() {return new YavimayaDryadEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class AbundantGrowth extends CardImpl {
public AbundantGrowth(UUID ownerId) {
public AbundantGrowth(final AbundantGrowth card) {
public AbundantGrowth copy() {return new AbundantGrowth(this);
public class Aggravate extends CardImpl {
public Aggravate(UUID ownerId) {
public Aggravate(final Aggravate card) {
public Aggravate copy() {return new Aggravate(this);
class AggravateEffect extends OneShotEffect {
public AggravateEffect() {
public AggravateEffect(final AggravateEffect effect) {
public AggravateEffect copy() {return new AggravateEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AggravateRequirementEffect extends RequirementEffect {
public AggravateRequirementEffect() {
public AggravateRequirementEffect(final AggravateRequirementEffect effect) {
public AggravateRequirementEffect copy() {return new AggravateRequirementEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return watcher.wasDamaged(permanent, game);return false;
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public class AlchemistsApprentice extends CardImpl {
public AlchemistsApprentice(UUID ownerId) {
public AlchemistsApprentice(final AlchemistsApprentice card) {
public AlchemistsApprentice copy() {return new AlchemistsApprentice(this);
public class AlchemistsRefuge extends CardImpl {
public AlchemistsRefuge(UUID ownerId) {
public AlchemistsRefuge(final AlchemistsRefuge card) {
public AlchemistsRefuge copy() {return new AlchemistsRefuge(this);
public class AmassTheComponents extends CardImpl {
public AmassTheComponents(UUID ownerId) {
public AmassTheComponents(final AmassTheComponents card) {
public AmassTheComponents copy() {return new AmassTheComponents(this);
class AmassTheComponentsEffect extends OneShotEffect {
public AmassTheComponentsEffect() {
public AmassTheComponentsEffect(final AmassTheComponentsEffect effect) {
public AmassTheComponentsEffect copy() {return new AmassTheComponentsEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class AngelicArmaments extends CardImpl {
public AngelicArmaments(UUID ownerId) {
public AngelicArmaments(final AngelicArmaments card) {
public AngelicArmaments copy() {return new AngelicArmaments(this);
public class AngelOfGlorysRise extends CardImpl {
public AngelOfGlorysRise(UUID ownerId) {
public AngelOfGlorysRise(final AngelOfGlorysRise card) {
public AngelOfGlorysRise copy() {return new AngelOfGlorysRise(this);
class AngelOfGlorysRiseEffect extends OneShotEffect {
public AngelOfGlorysRiseEffect() {staticText = "Exile all Zombies, then return all Human creature cards from your graveyard to the battlefield";
public AngelOfGlorysRiseEffect(final AngelOfGlorysRiseEffect effect) {
public AngelOfGlorysRiseEffect copy() {return new AngelOfGlorysRiseEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class AngelOfJubilation extends CardImpl {
public AngelOfJubilation(UUID ownerId) {
public AngelOfJubilation(final AngelOfJubilation card) {
public AngelOfJubilation copy() {return new AngelOfJubilation(this);
class AngelOfJubilationEffect extends ContinuousEffectImpl {
public AngelOfJubilationEffect(Duration duration) {
public AngelOfJubilationEffect(final AngelOfJubilationEffect effect) {
public AngelOfJubilationEffect copy() {return new AngelOfJubilationEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class AngelsTomb extends CardImpl {
public AngelsTomb(UUID ownerId) {
public AngelsTomb(final AngelsTomb card) {
public AngelsTomb copy() {return new AngelsTomb(this);
class AngelTombToken extends Token {
public AngelTombToken() {
public class AppetiteForBrains extends CardImpl {
public AppetiteForBrains(UUID ownerId) {
public AppetiteForBrains(final AppetiteForBrains card) {
public AppetiteForBrains copy() {return new AppetiteForBrains(this);
public class ArcaneMelee extends CardImpl {
public ArcaneMelee(UUID ownerId) {
public ArcaneMelee(final ArcaneMelee card) {
public ArcaneMelee copy() {return new ArcaneMelee(this);
ArcaneMeleeCostReductionEffect ( ) {
ArcaneMeleeCostReductionEffect(ArcaneMeleeCostReductionEffect effect) {return true;return true;return false;
public ArcaneMeleeCostReductionEffect copy() {return new ArcaneMeleeCostReductionEffect(this);
public class Archangel extends CardImpl {
public Archangel(UUID ownerId) {
public Archangel(final Archangel card) {
public Archangel copy() {return new Archangel(this);
public class ArchwingDragon extends CardImpl {
public ArchwingDragon(UUID ownerId) {
public ArchwingDragon(final ArchwingDragon card) {
public ArchwingDragon copy() {return new ArchwingDragon(this);
public class AvacynAngelOfHope extends CardImpl {
public AvacynAngelOfHope(UUID ownerId) {
public AvacynAngelOfHope(final AvacynAngelOfHope card) {
public AvacynAngelOfHope copy() {return new AvacynAngelOfHope(this);
public class BanishingStroke extends CardImpl {
public BanishingStroke(UUID ownerId) {
public BanishingStroke(final BanishingStroke card) {
public BanishingStroke copy() {return new BanishingStroke(this);
public class BattleHymn extends CardImpl {
public BattleHymn(UUID ownerId) {
public BattleHymn(final BattleHymn card) {
public BattleHymn copy() {return new BattleHymn(this);
public class BladedBracers extends CardImpl {
public BladedBracers(UUID ownerId) {
public BladedBracers(final BladedBracers card) {
public BladedBracers copy() {return new BladedBracers(this);
public class BlessingsOfNature extends CardImpl {
public BlessingsOfNature(UUID ownerId) {
public BlessingsOfNature(final BlessingsOfNature card) {
public BlessingsOfNature copy() {return new BlessingsOfNature(this);
public class BloodArtist extends CardImpl {
public BloodArtist(UUID ownerId) {
public BloodArtist(final BloodArtist card) {
public BloodArtist copy() {return new BloodArtist(this);
public class BloodflowConnoisseur extends CardImpl {
public BloodflowConnoisseur(UUID ownerId) {
public BloodflowConnoisseur(final BloodflowConnoisseur card) {
public BloodflowConnoisseur copy() {return new BloodflowConnoisseur(this);
public class BonfireOfTheDamned extends CardImpl {
public BonfireOfTheDamned(UUID ownerId) {
public BonfireOfTheDamned(final BonfireOfTheDamned card) {
public BonfireOfTheDamned copy() {return new BonfireOfTheDamned(this);
class BonfireOfTheDamnedEffect extends OneShotEffect {
public BonfireOfTheDamnedEffect() {
public BonfireOfTheDamnedEffect(final BonfireOfTheDamnedEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BonfireOfTheDamnedEffect copy() {return new BonfireOfTheDamnedEffect(this);
public class BowerPassage extends CardImpl {
public BowerPassage(UUID ownerId) {
public BowerPassage(final BowerPassage card) {
public BowerPassage copy() {return new BowerPassage(this);
class BowerPassageEffect extends RestrictionEffect {
BowerPassageEffect() {
BowerPassageEffect(final BowerPassageEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;
public BowerPassageEffect copy() {return new BowerPassageEffect(this);
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return true;
public class BrunaLightOfAlabaster extends CardImpl {
public BrunaLightOfAlabaster(UUID ownerId) {
public BrunaLightOfAlabaster(final BrunaLightOfAlabaster card) {
public BrunaLightOfAlabaster copy() {return new BrunaLightOfAlabaster(this);
class BrunaLightOfAlabasterEffect extends OneShotEffect {
public BrunaLightOfAlabasterEffect() {
public BrunaLightOfAlabasterEffect(final BrunaLightOfAlabasterEffect effect) {
public BrunaLightOfAlabasterEffect copy() {return new BrunaLightOfAlabasterEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class BuildersBlessing extends CardImpl {
public BuildersBlessing(UUID ownerId) {
public BuildersBlessing(final BuildersBlessing card) {
public BuildersBlessing copy() {return new BuildersBlessing(this);
public class BurnAtTheStake extends CardImpl {
public BurnAtTheStake(UUID ownerId) {
public BurnAtTheStake(final BurnAtTheStake card) {
public BurnAtTheStake copy() {return new BurnAtTheStake(this);
class BurnAtTheStakeEffect extends OneShotEffect {
public BurnAtTheStakeEffect() {
public BurnAtTheStakeEffect(final BurnAtTheStakeEffect effect) {
public BurnAtTheStakeEffect copy() {return new BurnAtTheStakeEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class ButcherGhoul extends CardImpl {
public ButcherGhoul(UUID ownerId) {
public ButcherGhoul(final ButcherGhoul card) {
public ButcherGhoul copy() {return new ButcherGhoul(this);
public class CallToServe extends CardImpl {
public CallToServe(UUID ownerId) {
public CallToServe(final CallToServe card) {
public CallToServe copy() {return new CallToServe(this);
public class CaptainOfTheMists extends CardImpl {
public CaptainOfTheMists(UUID ownerId) {
public CaptainOfTheMists(final CaptainOfTheMists card) {
public CaptainOfTheMists copy() {return new CaptainOfTheMists(this);
public class CatharsCrusade extends CardImpl {
public CatharsCrusade(UUID ownerId) {
public CatharsCrusade(final CatharsCrusade card) {
public CatharsCrusade copy() {return new CatharsCrusade(this);return new CathedralSanctifier(this);
public class CavernOfSouls extends CardImpl {
public CavernOfSouls(UUID ownerId) {
public CavernOfSouls(final CavernOfSouls card) {
public CavernOfSouls copy() {return new CavernOfSouls(this);
class CavernOfSoulsManaBuilder extends ConditionalManaBuilder {
public ConditionalManaBuilder setMana(Mana mana, Ability source, Game game) {return super.setMana(mana, source, game);return new CavernOfSoulsConditionalMana(this.mana, creatureType);
public String getRule() {return "Spend this mana only to cast a creature spell of the chosen type, and that spell can't be countered";
class CavernOfSoulsConditionalMana extends ConditionalMana {
public CavernOfSoulsConditionalMana(Mana mana, String creatureType) {
class CavernOfSoulsManaCondition extends CreatureCastManaCondition {
CavernOfSoulsManaCondition(String creatureType) {
public boolean apply(Game game, Ability source, UUID originalId, Cost costToPay) {return true;return false;
class CavernOfSoulsWatcher extends Watcher {
public CavernOfSoulsWatcher(UUID originalId) {
public CavernOfSoulsWatcher(final CavernOfSoulsWatcher watcher) {
public CavernOfSoulsWatcher copy() {return new CavernOfSoulsWatcher(this);
public void watch(GameEvent event, Game game) {
public boolean spellCantBeCountered(UUID spellId) {return spells.contains(spellId);
public void reset() {
public CavernOfSoulsCantCounterEffect() {
public CavernOfSoulsCantCounterEffect(final CavernOfSoulsCantCounterEffect effect) {
public CavernOfSoulsCantCounterEffect copy() {return new CavernOfSoulsCantCounterEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "This spell can't be countered because a colored mana from " + sourceObject.getName() + " was spent to cast it.";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.COUNTER;
public boolean applies(GameEvent event, Ability source, Game game) {return spell != null && watcher != null && watcher.spellCantBeCountered(spell.getId());
public class ChampionOfLambholt extends CardImpl {
public ChampionOfLambholt(UUID ownerId) {
public ChampionOfLambholt(final ChampionOfLambholt card) {
public ChampionOfLambholt copy() {return new ChampionOfLambholt(this);
class ChampionOfLambholtEffect extends RestrictionEffect {
ChampionOfLambholtEffect() {
ChampionOfLambholtEffect(final ChampionOfLambholtEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return blocker.getPower().getValue() >= sourcePermanent.getPower().getValue();return true;
public ChampionOfLambholtEffect copy() {return new ChampionOfLambholtEffect(this);return new Cloudshift(this);
public class CorpseTraders extends CardImpl {
public CorpseTraders(UUID ownerId) {
public CorpseTraders(final CorpseTraders card) {
public CorpseTraders copy() {return new CorpseTraders(this);
public class CraterhoofBehemoth extends CardImpl {
public CraterhoofBehemoth(UUID ownerId) {
public CraterhoofBehemoth(final CraterhoofBehemoth card) {
public CraterhoofBehemoth copy() {return new CraterhoofBehemoth(this);
public class CripplingChill extends CardImpl {
public CripplingChill(UUID ownerId) {
public CripplingChill(final CripplingChill card) {
public CripplingChill copy() {return new CripplingChill(this);
public class CryptCreeper extends CardImpl {
public CryptCreeper(UUID ownerId) {
public CryptCreeper(final CryptCreeper card) {
public CryptCreeper copy() {return new CryptCreeper(this);
public class Cursebreak extends CardImpl {
public Cursebreak(UUID ownerId) {
public Cursebreak(final Cursebreak card) {
public Cursebreak copy() {return new Cursebreak(this);
public class DangerousWager extends CardImpl {
public DangerousWager(UUID ownerId) {
public DangerousWager(final DangerousWager card) {
public DangerousWager copy() {return new DangerousWager(this);
class DangerousWagerEffect extends OneShotEffect {
public DangerousWagerEffect() {
public DangerousWagerEffect(final DangerousWagerEffect effect) {
public DangerousWagerEffect copy() {return new DangerousWagerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DarkImpostor extends CardImpl {
public DarkImpostor(UUID ownerId) {
public DarkImpostor(final DarkImpostor card) {
public DarkImpostor copy() {return new DarkImpostor(this);
class DarkImpostorContinuousEffect extends ContinuousEffectImpl {
public DarkImpostorContinuousEffect() {
public DarkImpostorContinuousEffect(final DarkImpostorContinuousEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public DarkImpostorContinuousEffect copy() {return new DarkImpostorContinuousEffect(this);
public class DeadeyeNavigator extends CardImpl {private static final String ruleText = "As long as {this} is paired with another creature, each of those creatures has \"{1}{U}: Exile this creature, then return it to the battlefield under your control.\"";
public DeadeyeNavigator(UUID ownerId) {
public DeadeyeNavigator(final DeadeyeNavigator card) {
public DeadeyeNavigator copy() {return new DeadeyeNavigator(this);
public class DeathWind extends CardImpl {
public DeathWind(UUID ownerId) {
public DeathWind(final DeathWind card) {
public DeathWind copy() {return new DeathWind(this);
public class Defang extends CardImpl {
public Defang(UUID ownerId) {
public Defang(final Defang card) {
public Defang copy() {return new Defang(this);
public class DefyDeath extends CardImpl {
public DefyDeath(UUID ownerId) {
public DefyDeath(final DefyDeath card) {
public DefyDeath copy() {return new DefyDeath(this);
class DefyDeathEffect extends OneShotEffect {
public DefyDeathEffect() {
public DefyDeathEffect(final DefyDeathEffect effect) {
public DefyDeathEffect copy() {return new DefyDeathEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DemonicRising extends CardImpl {
public DemonicRising(UUID ownerId) {
public DemonicRising(final DemonicRising card) {
public DemonicRising copy() {return new DemonicRising(this);
public class DemonicTaskmaster extends CardImpl {
public DemonicTaskmaster(UUID ownerId) {
public DemonicTaskmaster(final DemonicTaskmaster card) {
public DemonicTaskmaster copy() {return new DemonicTaskmaster(this);
public class DemonlordOfAshmouth extends CardImpl {
public DemonlordOfAshmouth(UUID ownerId) {
public DemonlordOfAshmouth(final DemonlordOfAshmouth card) {
public DemonlordOfAshmouth copy() {return new DemonlordOfAshmouth(this);
public class DescendantsPath extends CardImpl {
public DescendantsPath(UUID ownerId) {
public DescendantsPath(final DescendantsPath card) {
public DescendantsPath copy() {return new DescendantsPath(this);
class DescendantsPathEffect extends OneShotEffect {
public DescendantsPathEffect() {
public DescendantsPathEffect(final DescendantsPathEffect effect) {
public DescendantsPathEffect copy() {return new DescendantsPathEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class DescentIntoMadness extends CardImpl {
public DescentIntoMadness(UUID ownerId) {
public DescentIntoMadness(final DescentIntoMadness card) {
public DescentIntoMadness copy() {return new DescentIntoMadness(this);
class DescentIntoMadnessEffect extends OneShotEffect {
public DescentIntoMadnessEffect() {
public DescentIntoMadnessEffect(final DescentIntoMadnessEffect effect) {
public DescentIntoMadnessEffect copy() {return new DescentIntoMadnessEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private void selectCards(Player player, List<UUID> selectedObjects, int count, Ability source, Game game) {
public class DesolateLighthouse extends CardImpl {
public DesolateLighthouse(UUID ownerId) {
public DesolateLighthouse(final DesolateLighthouse card) {
public DesolateLighthouse copy() {return new DesolateLighthouse(this);
public class DevastationTide extends CardImpl {
public DevastationTide(UUID ownerId) {
public DevastationTide(final DevastationTide card) {
public DevastationTide copy() {return new DevastationTide(this);
class DevastationTideEffect extends OneShotEffect {
public DevastationTideEffect() {
public DevastationTideEffect(final DevastationTideEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DevastationTideEffect copy() {return new DevastationTideEffect(this);
public class DivineDeflection extends CardImpl {
public DivineDeflection(UUID ownerId) {
public DivineDeflection(final DivineDeflection card) {
public DivineDeflection copy() {return new DivineDeflection(this);
class DivineDeflectionPreventDamageTargetEffect extends PreventionEffectImpl {
public DivineDeflectionPreventDamageTargetEffect(Duration duration) {
public DivineDeflectionPreventDamageTargetEffect(final DivineDeflectionPreventDamageTargetEffect effect) {
public DivineDeflectionPreventDamageTargetEffect copy() {return new DivineDeflectionPreventDamageTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public class DreadSlaver extends CardImpl {
public DreadSlaver(UUID ownerId) {
public DreadSlaver(final DreadSlaver card) {
public DreadSlaver copy() {return new DreadSlaver(this);
class DreadSlaverEffect extends OneShotEffect {
public DreadSlaverEffect() {staticText = "return it to the battlefield under your control. That creature is a black Zombie in addition to its other colors and types";
public DreadSlaverEffect(final DreadSlaverEffect effect) {
public DreadSlaverEffect copy() {return new DreadSlaverEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DreadSlaverContiniousEffect extends ContinuousEffectImpl {
public DreadSlaverContiniousEffect() {
public DreadSlaverContiniousEffect(final DreadSlaverContiniousEffect effect) {
public DreadSlaverContiniousEffect copy() {return new DreadSlaverContiniousEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.ColorChangingEffects_5 || layer == Layer.TypeChangingEffects_4;
public class Dreadwaters extends CardImpl {
public Dreadwaters(UUID ownerId) {
public Dreadwaters(final Dreadwaters card) {
public Dreadwaters copy() {return new Dreadwaters(this);
public class DriverOfTheDead extends CardImpl {
public DriverOfTheDead(UUID ownerId) {
public DriverOfTheDead(final DriverOfTheDead card) {
public DriverOfTheDead copy() {return new DriverOfTheDead(this);
public class DruidsFamiliar extends CardImpl {
public DruidsFamiliar(UUID ownerId) {
public DruidsFamiliar(final DruidsFamiliar card) {
public DruidsFamiliar copy() {return new DruidsFamiliar(this);
public class DruidsRepository extends CardImpl {
public DruidsRepository(UUID ownerId) {
public DruidsRepository(final DruidsRepository card) {
public DruidsRepository copy() {return new DruidsRepository(this);
public class DualCasting extends CardImpl {
public DualCasting(UUID ownerId) {
public DualCasting(final DualCasting card) {
public DualCasting copy() {return new DualCasting(this);
public class EatenBySpiders extends CardImpl {
public EatenBySpiders(UUID ownerId) {
public EatenBySpiders(final EatenBySpiders card) {
public EatenBySpiders copy() {return new EatenBySpiders(this);
class EatenBySpidersEffect extends OneShotEffect {
public EatenBySpidersEffect() {
public EatenBySpidersEffect(final EatenBySpidersEffect effect) {
public EatenBySpidersEffect copy() {return new EatenBySpidersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ElgaudShieldmate extends CardImpl {
public ElgaudShieldmate(UUID ownerId) {
public ElgaudShieldmate(final ElgaudShieldmate card) {
public ElgaudShieldmate copy() {return new ElgaudShieldmate(this);
public class EmancipationAngel extends CardImpl {
public EmancipationAngel(UUID ownerId) {
public EmancipationAngel(final EmancipationAngel card) {
public EmancipationAngel copy() {return new EmancipationAngel(this);
public class EntreatTheAngels extends CardImpl {
public EntreatTheAngels(UUID ownerId) {
public EntreatTheAngels(final EntreatTheAngels card) {
public EntreatTheAngels copy() {return new EntreatTheAngels(this);
public class EssenceHarvest extends CardImpl {
public EssenceHarvest(UUID ownerId) {
public EssenceHarvest(final EssenceHarvest card) {
public EssenceHarvest copy() {return new EssenceHarvest(this);
class EssenceHarvestEffect extends OneShotEffect {
public EssenceHarvestEffect() {
public EssenceHarvestEffect(final EssenceHarvestEffect effect) {
public EssenceHarvestEffect copy() {return new EssenceHarvestEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EvernightShade extends CardImpl {
public EvernightShade(UUID ownerId) {
public EvernightShade(final EvernightShade card) {
public EvernightShade copy() {return new EvernightShade(this);
public class ExquisiteBlood extends CardImpl {
public ExquisiteBlood(UUID ownerId) {
public ExquisiteBlood(final ExquisiteBlood card) {
public ExquisiteBlood copy() {return new ExquisiteBlood(this);
class ExquisiteBloodTriggeredAbility extends TriggeredAbilityImpl {
public ExquisiteBloodTriggeredAbility() {
public ExquisiteBloodTriggeredAbility(final ExquisiteBloodTriggeredAbility ability) {
public ExquisiteBloodTriggeredAbility copy() {return new ExquisiteBloodTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LOST_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent loses life, you gain that much life.";
public class FalkenrathExterminator extends CardImpl {
public FalkenrathExterminator(UUID ownerId) {
public FalkenrathExterminator(final FalkenrathExterminator card) {
public FalkenrathExterminator copy() {return new FalkenrathExterminator(this);
public class FarbogExplorer extends CardImpl {
public FarbogExplorer(UUID ownerId) {
public FarbogExplorer(final FarbogExplorer card) {
public FarbogExplorer copy() {return new FarbogExplorer(this);
public class FavorableWinds extends CardImpl {
public FavorableWinds(UUID ownerId) {
public FavorableWinds(final FavorableWinds card) {
public FavorableWinds copy() {return new FavorableWinds(this);
public class FerventCathar extends CardImpl {
public FerventCathar(UUID ownerId) {
public FerventCathar(final FerventCathar card) {
public FerventCathar copy() {return new FerventCathar(this);
public class GallowsAtWillowHill extends CardImpl {
public GallowsAtWillowHill(UUID ownerId) {
public GallowsAtWillowHill(final GallowsAtWillowHill card) {
public GallowsAtWillowHill copy() {return new GallowsAtWillowHill(this);
class GallowsAtWillowHillEffect extends OneShotEffect {
public GallowsAtWillowHillEffect() {
public GallowsAtWillowHillEffect(final GallowsAtWillowHillEffect effect) {
public GallowsAtWillowHillEffect copy() {return new GallowsAtWillowHillEffect(this);
public boolean apply(Game game, Ability source) {return affectedTargets > 0;
public class GalvanicAlchemist extends CardImpl {
public GalvanicAlchemist(UUID ownerId) {
public GalvanicAlchemist(final GalvanicAlchemist card) {
public GalvanicAlchemist copy() {return new GalvanicAlchemist(this);
public class GangOfDevils extends CardImpl {
public GangOfDevils(UUID ownerId) {
public GangOfDevils(final GangOfDevils card) {
public GangOfDevils copy() {return new GangOfDevils(this);
public class GeistSnatch extends CardImpl {
public GeistSnatch(UUID ownerId) {
public GeistSnatch(final GeistSnatch card) {
public GeistSnatch copy() {return new GeistSnatch(this);
class GeistSnatchCounterTargetEffect extends OneShotEffect {
public GeistSnatchCounterTargetEffect() {
public GeistSnatchCounterTargetEffect(final GeistSnatchCounterTargetEffect effect) {
public GeistSnatchCounterTargetEffect copy() {return new GeistSnatchCounterTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;
class SpiritBlueToken extends Token {
public SpiritBlueToken() {
public class GeistTrappers extends CardImpl {
public GeistTrappers(UUID ownerId) {
public GeistTrappers(final GeistTrappers card) {
public GeistTrappers copy() {return new GeistTrappers(this);return new Ghostform(this);
public class GhostlyFlicker extends CardImpl {
public GhostlyFlicker(UUID ownerId) {
public GhostlyFlicker(final GhostlyFlicker card) {
public GhostlyFlicker copy() {return new GhostlyFlicker(this);
class GhostlyFlickerEffect extends OneShotEffect {
public GhostlyFlickerEffect() {staticText = "Exile two target artifacts, creatures, and/or lands you control, then return those cards to the battlefield under your control";
public GhostlyFlickerEffect(final GhostlyFlickerEffect effect) {
public GhostlyFlickerEffect copy() {return new GhostlyFlickerEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class GhostlyTouch extends CardImpl {
public GhostlyTouch(UUID ownerId) {
public GhostlyTouch(final GhostlyTouch card) {
public GhostlyTouch copy() {return new GhostlyTouch(this);
public class Ghoulflesh extends CardImpl {
public Ghoulflesh(UUID ownerId) {
public Ghoulflesh(final Ghoulflesh card) {
public Ghoulflesh copy() {return new Ghoulflesh(this);
public class GiselaBladeOfGoldnight extends CardImpl {
public GiselaBladeOfGoldnight(UUID ownerId) {
public GiselaBladeOfGoldnight(final GiselaBladeOfGoldnight card) {
public GiselaBladeOfGoldnight copy() {return new GiselaBladeOfGoldnight(this);
class GiselaBladeOfGoldnightDoubleDamageEffect extends ReplacementEffectImpl {
public GiselaBladeOfGoldnightDoubleDamageEffect() {
public GiselaBladeOfGoldnightDoubleDamageEffect(final GiselaBladeOfGoldnightDoubleDamageEffect effect) {
public GiselaBladeOfGoldnightDoubleDamageEffect copy() {return new GiselaBladeOfGoldnightDoubleDamageEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(EventType.DAMAGE_CREATURE) ||
public boolean applies(GameEvent event, Ability source, Game game) {return true;
private void preventDamage(GameEvent event, Ability source, UUID target, Game game) {
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class GloomSurgeon extends CardImpl {
public GloomSurgeon(UUID ownerId) {
public GloomSurgeon(final GloomSurgeon card) {
public GloomSurgeon copy() {return new GloomSurgeon(this);
class GloomSurgeonEffect extends ReplacementEffectImpl {
GloomSurgeonEffect() {
GloomSurgeonEffect(final GloomSurgeonEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_CREATURE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public GloomSurgeonEffect copy() {return new GloomSurgeonEffect(this);return new Gloomwidow(this);
public class GoldnightCommander extends CardImpl {
public GoldnightCommander(UUID ownerId) {
public GoldnightCommander(final GoldnightCommander card) {
public GoldnightCommander copy() {return new GoldnightCommander(this);
public class GoldnightRedeemer extends CardImpl {
public GoldnightRedeemer(UUID ownerId) {
public GoldnightRedeemer(final GoldnightRedeemer card) {
public GoldnightRedeemer copy() {return new GoldnightRedeemer(this);
public class GraveExchange extends CardImpl {
public GraveExchange(UUID ownerId) {
public GraveExchange(final GraveExchange card) {
public GraveExchange copy() {return new GraveExchange(this);
class GraveExchangeEffect extends OneShotEffect {
public GraveExchangeEffect() {
public GraveExchangeEffect(final GraveExchangeEffect effect) {
public GraveExchangeEffect copy() {return new GraveExchangeEffect(this);
public boolean apply(Game game, Ability source) {return false;return permanent.sacrifice(source.getSourceId(), game);return false;
public class Griselbrand extends CardImpl {
public Griselbrand(UUID ownerId) {
public Griselbrand(final Griselbrand card) {
public Griselbrand copy() {return new Griselbrand(this);
public class Grounded extends CardImpl {
public Grounded(UUID ownerId) {
public Grounded(final Grounded card) {
public Grounded copy() {return new Grounded(this);
public class GryffVanguard extends CardImpl {
public GryffVanguard(UUID ownerId) {
public GryffVanguard(final GryffVanguard card) {
public GryffVanguard copy() {return new GryffVanguard(this);
public class HarvesterOfSouls extends CardImpl {
public HarvesterOfSouls(UUID ownerId) {
public HarvesterOfSouls(final HarvesterOfSouls card) {
public HarvesterOfSouls copy() {return new HarvesterOfSouls(this);
public class HauntedGuardian extends CardImpl {
public HauntedGuardian(UUID ownerId) {
public HauntedGuardian(final HauntedGuardian card) {
public HauntedGuardian copy() {return new HauntedGuardian(this);
public class HavengulSkaab extends CardImpl {
public HavengulSkaab(UUID ownerId) {
public HavengulSkaab(final HavengulSkaab card) {
public HavengulSkaab copy() {return new HavengulSkaab(this);
class HavengulSkaabAbility extends TriggeredAbilityImpl {
public HavengulSkaabAbility() {
public HavengulSkaabAbility(final HavengulSkaabAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks, return another creature you control to its owner's hand.";
public HavengulSkaabAbility copy() {return new HavengulSkaabAbility(this);
public class HavengulVampire extends CardImpl {
public HavengulVampire(UUID ownerId) {
public HavengulVampire(final HavengulVampire card) {
public HavengulVampire copy() {return new HavengulVampire(this);
public class HeirsOfStromkirk extends CardImpl {
public HeirsOfStromkirk(UUID ownerId) {
public HeirsOfStromkirk(final HeirsOfStromkirk card) {
public HeirsOfStromkirk copy() {return new HeirsOfStromkirk(this);
public class HeraldOfWar extends CardImpl {
public HeraldOfWar(UUID ownerId) {
public HeraldOfWar(final HeraldOfWar card) {
public HeraldOfWar copy() {return new HeraldOfWar(this);
HeraldOfWarCostReductionEffect() {
HeraldOfWarCostReductionEffect(HeraldOfWarCostReductionEffect effect) {return true;return false;return true;return false;
public HeraldOfWarCostReductionEffect copy() {return new HeraldOfWarCostReductionEffect(this);
public class HolyJusticiar extends CardImpl {
public HolyJusticiar(UUID ownerId) {
public HolyJusticiar(final HolyJusticiar card) {
public HolyJusticiar copy() {return new HolyJusticiar(this);
class HolyJusticiarEffect extends OneShotEffect {
public HolyJusticiarEffect() {
public HolyJusticiarEffect(final HolyJusticiarEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public HolyJusticiarEffect copy() {return new HolyJusticiarEffect(this);
public class HomicidalSeclusion extends CardImpl {
public HomicidalSeclusion(UUID ownerId) {
public HomicidalSeclusion(final HomicidalSeclusion card) {
public HomicidalSeclusion copy() {return new HomicidalSeclusion(this);
public class HoundOfGriselbrand extends CardImpl {
public HoundOfGriselbrand(UUID ownerId) {
public HoundOfGriselbrand(final HoundOfGriselbrand card) {
public HoundOfGriselbrand copy() {return new HoundOfGriselbrand(this);
public class Howlgeist extends CardImpl {
public Howlgeist(UUID ownerId) {
public Howlgeist(final Howlgeist card) {
public Howlgeist copy() {return new Howlgeist(this);
public class HumanFrailty extends CardImpl {
public HumanFrailty(UUID ownerId) {
public HumanFrailty(final HumanFrailty card) {
public HumanFrailty copy() {return new HumanFrailty(this);
public class HuntedGhoul extends CardImpl {
public HuntedGhoul(UUID ownerId) {
public HuntedGhoul(final HuntedGhoul card) {
public HuntedGhoul copy() {return new HuntedGhoul(this);
public class InfiniteReflection extends CardImpl {
public InfiniteReflection(UUID ownerId) {
public InfiniteReflection(final InfiniteReflection card) {
public InfiniteReflection copy() {return new InfiniteReflection(this);
class InfiniteReflectionTriggeredEffect extends OneShotEffect {
public InfiniteReflectionTriggeredEffect() {
public InfiniteReflectionTriggeredEffect(final InfiniteReflectionTriggeredEffect effect) {
public InfiniteReflectionTriggeredEffect copy() {return new InfiniteReflectionTriggeredEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class InfiniteReflectionEntersBattlefieldEffect extends ReplacementEffectImpl {
public InfiniteReflectionEntersBattlefieldEffect() {
public InfiniteReflectionEntersBattlefieldEffect(InfiniteReflectionEntersBattlefieldEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return permanent != null && permanent.getControllerId().equals(source.getControllerId())
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public String getText(Mode mode) {return "Nontoken creatures you control enter the battlefield as a copy of enchanted creature";
public InfiniteReflectionEntersBattlefieldEffect copy() {return new InfiniteReflectionEntersBattlefieldEffect(this);
public class IntoTheVoid extends CardImpl {
public IntoTheVoid(UUID ownerId) {
public IntoTheVoid(final IntoTheVoid card) {
public IntoTheVoid copy() {return new IntoTheVoid(this);
public class JointAssault extends CardImpl {
public JointAssault(UUID ownerId) {
public JointAssault(final JointAssault card) {
public JointAssault copy() {return new JointAssault(this);
class JointAssaultBoostTargetEffect extends ContinuousEffectImpl {
public JointAssaultBoostTargetEffect(int power, int toughness, Duration duration) {
public JointAssaultBoostTargetEffect(final JointAssaultBoostTargetEffect effect) {
public JointAssaultBoostTargetEffect copy() {return new JointAssaultBoostTargetEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return affectedTargets > 0;
public class KessigMalcontents extends CardImpl {
public KessigMalcontents(UUID ownerId) {
public KessigMalcontents(final KessigMalcontents card) {
public KessigMalcontents copy() {return new KessigMalcontents(this);
public class KillingWave extends CardImpl {
public KillingWave(UUID ownerId) {
public KillingWave(final KillingWave card) {
public KillingWave copy() {return new KillingWave(this);
class KillingWaveEffect extends OneShotEffect {
public KillingWaveEffect() {
public KillingWaveEffect(final KillingWaveEffect effect) {
public KillingWaveEffect copy() {return new KillingWaveEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class KruinStriker extends CardImpl {
public KruinStriker(UUID ownerId) {
public KruinStriker(final KruinStriker card) {
public KruinStriker copy() {return new KruinStriker(this);
public class LeapOfFaith extends CardImpl {
public LeapOfFaith(UUID ownerId) {
public LeapOfFaith(final LeapOfFaith card) {
public LeapOfFaith copy() {return new LeapOfFaith(this);
public class LightningMauler extends CardImpl {
public LightningMauler(UUID ownerId) {
public LightningMauler(final LightningMauler card) {
public LightningMauler copy() {return new LightningMauler(this);
public class LightningProwess extends CardImpl {
public LightningProwess(UUID ownerId) {
public LightningProwess(final LightningProwess card) {
public LightningProwess copy() {return new LightningProwess(this);
public class LoneRevenant extends CardImpl {
public LoneRevenant(UUID ownerId) {
public LoneRevenant(final LoneRevenant card) {
public LoneRevenant copy() {return new LoneRevenant(this);
class LoneRevenantTriggeredAbility extends TriggeredAbilityImpl {
public LoneRevenantTriggeredAbility() {
public LoneRevenantTriggeredAbility(final LoneRevenantTriggeredAbility ability) {
public LoneRevenantTriggeredAbility copy() {return new LoneRevenantTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return false;return permanent != null || number == 0;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, if you control no other creatures, " + super.getRule();
public class LunarMystic extends CardImpl {
public LunarMystic(UUID ownerId) {
public LunarMystic(final LunarMystic card) {
public LunarMystic copy() {return new LunarMystic(this);
public class MaalfeldTwins extends CardImpl {
public MaalfeldTwins(UUID ownerId) {
public MaalfeldTwins(final MaalfeldTwins card) {
public MaalfeldTwins copy() {return new MaalfeldTwins(this);
public class MadProphet extends CardImpl {
public MadProphet(UUID ownerId) {
public MadProphet(final MadProphet card) {
public MadProphet copy() {return new MadProphet(this);
public class MaliciousIntent extends CardImpl {
public MaliciousIntent(UUID ownerId) {
public MaliciousIntent(final MaliciousIntent card) {
public MaliciousIntent copy() {return new MaliciousIntent(this);
public class Malignus extends CardImpl {
public Malignus(UUID ownerId) {
public Malignus(final Malignus card) {
public Malignus copy() {return new Malignus(this);
public int calculate(Game game, Ability sourceAbility, Effect effect) {return (int)Math.ceil(max / 2.0);return 0;
public DynamicValue copy() {return new CardsInControllerHandCount();
public String getMessage() {return "half the highest life total among your opponents, rounded up";
public String toString() {return "1";
public MalignusEffect() {
public MalignusEffect(final MalignusEffect effect) {
public MalignusEffect copy() {return new MalignusEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.PREVENT_DAMAGE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getSourceId().equals(source.getSourceId());
public class MarrowBats extends CardImpl {
public MarrowBats(UUID ownerId) {
public MarrowBats(final MarrowBats card) {
public MarrowBats copy() {return new MarrowBats(this);
public class MassAppeal extends CardImpl {
public MassAppeal(UUID ownerId) {
public MassAppeal(final MassAppeal card) {
public MassAppeal copy() {return new MassAppeal(this);
public class MentalAgony extends CardImpl {
public MentalAgony(UUID ownerId) {
public MentalAgony(final MentalAgony card) {
public MentalAgony copy() {return new MentalAgony(this);
public class MidnightDuelist extends CardImpl {
public MidnightDuelist(UUID ownerId) {
public MidnightDuelist(final MidnightDuelist card) {
public MidnightDuelist copy() {return new MidnightDuelist(this);
public class MidvastProtector extends CardImpl {
public MidvastProtector(UUID ownerId) {
public MidvastProtector(final MidvastProtector card) {
public MidvastProtector copy() {return new MidvastProtector(this);return new MisthollowGriffin(this);
public boolean apply(Game game, Ability source) {return true;return new MisthollowGriffinPlayEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class MistRaven extends CardImpl {
public MistRaven(UUID ownerId) {
public MistRaven(final MistRaven card) {
public MistRaven copy() {return new MistRaven(this);
public class MoonlightGeist extends CardImpl {
public MoonlightGeist(UUID ownerId) {
public MoonlightGeist(final MoonlightGeist card) {
public MoonlightGeist copy() {return new MoonlightGeist(this);
public class MoonsilverSpear extends CardImpl {
public MoonsilverSpear(UUID ownerId) {
public MoonsilverSpear(final MoonsilverSpear card) {
public MoonsilverSpear copy() {return new MoonsilverSpear(this);
public class NaturalEnd extends CardImpl {
public NaturalEnd(UUID ownerId) {
public NaturalEnd(final NaturalEnd card) {
public NaturalEnd copy() {return new NaturalEnd(this);
public class NearheathPilgrim extends CardImpl {
public NearheathPilgrim(UUID ownerId) {
public NearheathPilgrim(final NearheathPilgrim card) {
public NearheathPilgrim copy() {return new NearheathPilgrim(this);
public class Necrobite extends CardImpl {
public Necrobite(UUID ownerId) {
public Necrobite(final Necrobite card) {
public Necrobite copy() {return new Necrobite(this);
public class NephaliaSmuggler extends CardImpl {
public NephaliaSmuggler(UUID ownerId) {
public NephaliaSmuggler(final NephaliaSmuggler card) {
public NephaliaSmuggler copy() {return new NephaliaSmuggler(this);
public class NettleSwine extends CardImpl {
public NettleSwine(UUID ownerId) {
public NettleSwine(final NettleSwine card) {
public NettleSwine copy() {return new NettleSwine(this);
public class NightshadePeddler extends CardImpl {
public NightshadePeddler(UUID ownerId) {
public NightshadePeddler(final NightshadePeddler card) {
public NightshadePeddler copy() {return new NightshadePeddler(this);
public class OtherworldAtlas extends CardImpl {
public OtherworldAtlas(UUID ownerId) {
public OtherworldAtlas(final OtherworldAtlas card) {
public OtherworldAtlas copy() {return new OtherworldAtlas(this);
class OtherworldAtlasDrawEffect extends OneShotEffect {
public OtherworldAtlasDrawEffect() {
public OtherworldAtlasDrawEffect(final OtherworldAtlasDrawEffect effect) {
public OtherworldAtlasDrawEffect copy() {return new OtherworldAtlasDrawEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Outwit extends CardImpl {
public Outwit(UUID ownerId) {
public Outwit(final Outwit card) {
public Outwit copy() {return new Outwit(this);
private class CustomTargetSpell extends TargetObject {
public CustomTargetSpell() {
public CustomTargetSpell(FilterSpell filter) {
public CustomTargetSpell(int numTargets, FilterSpell filter) {
public CustomTargetSpell(int minNumTargets, int maxNumTargets, FilterSpell filter) {
public CustomTargetSpell(final CustomTargetSpell target) {
public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {return canChoose(sourceControllerId, game);
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets(sourceControllerId, game);
public boolean canTarget(UUID id, Ability source, Game game) {return true;return false;
public boolean canChoose(UUID sourceControllerId, Game game) {return true;return false;
public Set<UUID> possibleTargets(UUID sourceControllerId, Game game) {return possibleTargets;
public Filter getFilter() {return filter;
private boolean targetsPlayer(UUID id, Game game) {return true;return false;
public CustomTargetSpell copy() {return new CustomTargetSpell(this);
public class PathbreakerWurm extends CardImpl {
public PathbreakerWurm(UUID ownerId) {
public PathbreakerWurm(final PathbreakerWurm card) {
public PathbreakerWurm copy() {return new PathbreakerWurm(this);
public class PeelFromReality extends CardImpl {
public PeelFromReality(UUID ownerId) {
public PeelFromReality(final PeelFromReality card) {
public PeelFromReality copy() {return new PeelFromReality(this);
class PeelFromRealityEffect extends OneShotEffect {
public PeelFromRealityEffect() {
public PeelFromRealityEffect(final PeelFromRealityEffect effect) {
public PeelFromRealityEffect copy() {return new PeelFromRealityEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class PillarOfFlame extends CardImpl {
public PillarOfFlame(UUID ownerId) {
public PillarOfFlame(final PillarOfFlame card) {
public PillarOfFlame copy() {return new PillarOfFlame(this);
public class PollutedDead extends CardImpl {
public PollutedDead(UUID ownerId) {
public PollutedDead(final PollutedDead card) {
public PollutedDead copy() {return new PollutedDead(this);
public class PredatorsGambit extends CardImpl {
public PredatorsGambit(UUID ownerId) {
public PredatorsGambit(final PredatorsGambit card) {
public PredatorsGambit copy() {return new PredatorsGambit(this);
public class PrimalSurge extends CardImpl {
public PrimalSurge(UUID ownerId) {
public PrimalSurge(final PrimalSurge card) {
public PrimalSurge copy() {return new PrimalSurge(this);
class PrimalSurgeEffect extends OneShotEffect {
public PrimalSurgeEffect() {
public PrimalSurgeEffect(final PrimalSurgeEffect effect) {
public PrimalSurgeEffect copy() {return new PrimalSurgeEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class RagingPoltergeist extends CardImpl {
public RagingPoltergeist(UUID ownerId) {
public RagingPoltergeist(final RagingPoltergeist card) {
public RagingPoltergeist copy() {return new RagingPoltergeist(this);
public class RainOfThorns extends CardImpl {
public RainOfThorns(UUID ownerId) {
public RainOfThorns(final RainOfThorns card) {
public RainOfThorns copy() {return new RainOfThorns(this);return new ReforgeTheSoul(this);
public class RenegadeDemon extends CardImpl {
public RenegadeDemon(UUID ownerId) {
public RenegadeDemon(final RenegadeDemon card) {
public RenegadeDemon copy() {return new RenegadeDemon(this);
public class RidersOfGavony extends CardImpl {
public RidersOfGavony(UUID ownerId) {
public RidersOfGavony(final RidersOfGavony card) {
public RidersOfGavony copy() {return new RidersOfGavony(this);
class RidersOfGavonyGainAbilityControlledEffect extends ContinuousEffectImpl {
public RidersOfGavonyGainAbilityControlledEffect() {
public RidersOfGavonyGainAbilityControlledEffect(final RidersOfGavonyGainAbilityControlledEffect effect) {
public RidersOfGavonyGainAbilityControlledEffect copy() {return new RidersOfGavonyGainAbilityControlledEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RighteousBlow extends CardImpl {
public RighteousBlow(UUID ownerId) {
public RighteousBlow(final RighteousBlow card) {
public RighteousBlow copy() {return new RighteousBlow(this);
public class RiotRingleader extends CardImpl {
public RiotRingleader(UUID ownerId) {
public RiotRingleader(final RiotRingleader card) {
public RiotRingleader copy() {return new RiotRingleader(this);
public class RiteOfRuin extends CardImpl {
public RiteOfRuin(UUID ownerId) {
public RiteOfRuin(final RiteOfRuin card) {
public RiteOfRuin copy() {return new RiteOfRuin(this);
class RiteOfRuinEffect extends OneShotEffect {
public RiteOfRuinEffect() {
public RiteOfRuinEffect(final RiteOfRuinEffect effect) {
public RiteOfRuinEffect copy() {return new RiteOfRuinEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
private CardType getCardType(String type) {return CardType.ARTIFACT;return CardType.CREATURE;return CardType.LAND;return null;
public class RotcrownGhoul extends CardImpl {
public RotcrownGhoul(UUID ownerId) {
public RotcrownGhoul(final RotcrownGhoul card) {
public RotcrownGhoul copy() {return new RotcrownGhoul(this);
public class RushOfBlood extends CardImpl {
public RushOfBlood(UUID ownerId) {
public RushOfBlood(final RushOfBlood card) {
public RushOfBlood copy() {return new RushOfBlood(this);
public class ScaldingDevil extends CardImpl {
public ScaldingDevil(UUID ownerId) {
public ScaldingDevil(final ScaldingDevil card) {
public ScaldingDevil copy() {return new ScaldingDevil(this);
public class ScrapskinDrake extends CardImpl {
public ScrapskinDrake(UUID ownerId) {
public ScrapskinDrake(final ScrapskinDrake card) {
public ScrapskinDrake copy() {return new ScrapskinDrake(this);
public class ScrollOfAvacyn extends CardImpl {
public ScrollOfAvacyn(UUID ownerId) {
public ScrollOfAvacyn(final ScrollOfAvacyn card) {
public ScrollOfAvacyn copy() {return new ScrollOfAvacyn(this);
public class ScrollOfGriselbrand extends CardImpl {
public ScrollOfGriselbrand(UUID ownerId) {
public ScrollOfGriselbrand(final ScrollOfGriselbrand card) {
public ScrollOfGriselbrand copy() {return new ScrollOfGriselbrand(this);
public class SearchlightGeist extends CardImpl {
public SearchlightGeist(UUID ownerId) {
public SearchlightGeist(final SearchlightGeist card) {
public SearchlightGeist copy() {return new SearchlightGeist(this);
public class SecondGuess extends CardImpl {
public SecondGuess(UUID ownerId) {
public SecondGuess(final SecondGuess card) {
public SecondGuess copy() {return new SecondGuess(this);
class SecondSpellPredicate implements Predicate<Spell> {
public boolean apply(Spell input, Game game) {return true;return false;
public String toString() {return "SecondSpellThisTurn";
public class SeraphOfDawn extends CardImpl {
public SeraphOfDawn(UUID ownerId) {
public SeraphOfDawn(final SeraphOfDawn card) {
public SeraphOfDawn copy() {return new SeraphOfDawn(this);
public class SeraphSanctuary extends CardImpl {
public SeraphSanctuary(UUID ownerId) {
public SeraphSanctuary(final SeraphSanctuary card) {
public SeraphSanctuary copy() {return new SeraphSanctuary(this);
public class ShelteringWord extends CardImpl {
public ShelteringWord(UUID ownerId) {
public ShelteringWord(final ShelteringWord card) {
public ShelteringWord copy() {return new ShelteringWord(this);
class ShelteringWordEffect extends OneShotEffect {
public ShelteringWordEffect() {
public ShelteringWordEffect(final ShelteringWordEffect effect) {
public ShelteringWordEffect copy() {return new ShelteringWordEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SigardaHostOfHerons extends CardImpl {
public SigardaHostOfHerons(UUID ownerId) {
public SigardaHostOfHerons(final SigardaHostOfHerons card) {
public SigardaHostOfHerons copy() {return new SigardaHostOfHerons(this);
public SigardaHostOfHeronsEffect() {
public SigardaHostOfHeronsEffect(final SigardaHostOfHeronsEffect effect) {
public SigardaHostOfHeronsEffect copy() {return new SigardaHostOfHeronsEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SACRIFICE_PERMANENT;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public class SilverbladePaladin extends CardImpl {
public SilverbladePaladin(UUID ownerId) {
public SilverbladePaladin(final SilverbladePaladin card) {
public SilverbladePaladin copy() {return new SilverbladePaladin(this);
public class SlayersStronghold extends CardImpl {
public SlayersStronghold(UUID ownerId) {
public SlayersStronghold(final SlayersStronghold card) {
public SlayersStronghold copy() {return new SlayersStronghold(this);
public class SomberwaldVigilante extends CardImpl {
public SomberwaldVigilante(UUID ownerId) {
public SomberwaldVigilante(final SomberwaldVigilante card) {
public SomberwaldVigilante copy() {return new SomberwaldVigilante(this);
public class SoulcageFiend extends CardImpl {
public SoulcageFiend(UUID ownerId) {
public SoulcageFiend(final SoulcageFiend card) {
public SoulcageFiend copy() {return new SoulcageFiend(this);
public class SoulOfTheHarvest extends CardImpl {
public SoulOfTheHarvest(UUID ownerId) {
public SoulOfTheHarvest(final SoulOfTheHarvest card) {
public SoulOfTheHarvest copy() {return new SoulOfTheHarvest(this);
public class SpectralGateguards extends CardImpl {
public SpectralGateguards(UUID ownerId) {
public SpectralGateguards(final SpectralGateguards card) {
public SpectralGateguards copy() {return new SpectralGateguards(this);
public class SpectralPrison extends CardImpl {
public SpectralPrison(UUID ownerId) {
public SpectralPrison(final SpectralPrison card) {
public SpectralPrison copy() {return new SpectralPrison(this);
class SpectralPrisonAbility extends TriggeredAbilityImpl {
public SpectralPrisonAbility() {
public SpectralPrisonAbility(final SpectralPrisonAbility ability) {
public SpectralPrisonAbility copy() {return new SpectralPrisonAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When enchanted creature becomes the target of a spell or ability, destroy {this}.";
public class SpiritAway extends CardImpl {
public SpiritAway(UUID ownerId) {
public SpiritAway(final SpiritAway card) {
public SpiritAway copy() {return new SpiritAway(this);
public class SternMentor extends CardImpl {
public SternMentor(UUID ownerId) {
public SternMentor(final SternMentor card) {
public SternMentor copy() {return new SternMentor(this);
public class StolenGoods extends CardImpl {
public StolenGoods(UUID ownerId) {
public StolenGoods(final StolenGoods card) {
public StolenGoods copy() {return new StolenGoods(this);
class StolenGoodsEffect extends OneShotEffect {
public StolenGoodsEffect() {
public StolenGoodsEffect(final StolenGoodsEffect effect) {
public StolenGoodsEffect copy() {return new StolenGoodsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class StolenGoodsCastFromExileEffect extends AsThoughEffectImpl {
public StolenGoodsCastFromExileEffect() {
public StolenGoodsCastFromExileEffect(final StolenGoodsCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public StolenGoodsCastFromExileEffect copy() {return new StolenGoodsCastFromExileEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class Stonewright extends CardImpl {
public Stonewright(UUID ownerId) {
public Stonewright(final Stonewright card) {
public Stonewright copy() {return new Stonewright(this);
public class TamiyoTheMoonSage extends CardImpl {
public TamiyoTheMoonSage(UUID ownerId) {
public TamiyoTheMoonSage(final TamiyoTheMoonSage card) {
public TamiyoTheMoonSage copy() {return new TamiyoTheMoonSage(this);
class TappedCreaturesControlledByTargetCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return game.getBattlefield().countAll(filter, sourceAbility.getFirstTarget(), game);
public DynamicValue copy() {return new TappedCreaturesControlledByTargetCount();
public String toString() {return "a";
public String getMessage() {return "tapped creature target player controls";* your graveyard from anywhere, you may return it to your hand."
class TamiyoTheMoonSageEmblem extends Emblem {
public TamiyoTheMoonSageEmblem() {effect.setText("return it to your hand");
public class TandemLookout extends CardImpl {
public TandemLookout(UUID ownerId) {
public TandemLookout(final TandemLookout card) {
public TandemLookout copy() {return new TandemLookout(this);
public class TemporalMastery extends CardImpl {
public TemporalMastery(UUID ownerId) {
public TemporalMastery(final TemporalMastery card) {
public TemporalMastery copy() {return new TemporalMastery(this);
public class Terminus extends CardImpl {
public Terminus(UUID ownerId) {
public Terminus(final Terminus card) {
public Terminus copy() {return new Terminus(this);
class TerminusEffect extends OneShotEffect {
public TerminusEffect() {
public TerminusEffect(final TerminusEffect effect) {
public TerminusEffect copy() {return new TerminusEffect(this);
public boolean apply(Game game, Ability source) {return true;return new TerrifyingPresence(this);return new TerrifyingPresenceEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return super.applies(event, source, game) && !event.getSourceId().equals(getTargetPointer().getFirst(game, source));
public class ThatcherRevolt extends CardImpl {
public ThatcherRevolt(UUID ownerId) {
public ThatcherRevolt(final ThatcherRevolt card) {
public ThatcherRevolt copy() {return new ThatcherRevolt(this);
class ThatcherRevoltEffect extends OneShotEffect {
public ThatcherRevoltEffect() {
public ThatcherRevoltEffect(final ThatcherRevoltEffect effect) {
public ThatcherRevoltEffect copy() {return new ThatcherRevoltEffect(this);
public boolean apply(Game game, Ability source) {return true;
class RedHumanToken extends Token {
public RedHumanToken() {
public class ThrabenValiant extends CardImpl {
public ThrabenValiant(UUID ownerId) {
public ThrabenValiant(final ThrabenValiant card) {
public ThrabenValiant copy() {return new ThrabenValiant(this);
public class Thunderbolt extends CardImpl {
public Thunderbolt(UUID ownerId) {
public Thunderbolt(final Thunderbolt card) {
public Thunderbolt copy() {return new Thunderbolt(this);
public class ThunderousWrath extends CardImpl {
public ThunderousWrath(UUID ownerId) {
public ThunderousWrath(final ThunderousWrath card) {
public ThunderousWrath copy() {return new ThunderousWrath(this);
public class TormentorsTrident extends CardImpl {
public TormentorsTrident(UUID ownerId) {
public TormentorsTrident(final TormentorsTrident card) {
public TormentorsTrident copy() {return new TormentorsTrident(this);
public class TreacherousPitDweller extends CardImpl {
public TreacherousPitDweller(UUID ownerId) {
public TreacherousPitDweller(final TreacherousPitDweller card) {
public TreacherousPitDweller copy() {return new TreacherousPitDweller(this);
class TreacherousPitDwellerTriggeredAbility extends TriggeredAbilityImpl {
public TreacherousPitDwellerTriggeredAbility() {
public TreacherousPitDwellerTriggeredAbility(final TreacherousPitDwellerTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return event.getTargetId().equals(getSourceId()) && ((EntersTheBattlefieldEvent) event).getFromZone().equals(Zone.GRAVEYARD);
public TreacherousPitDwellerTriggeredAbility copy() {return new TreacherousPitDwellerTriggeredAbility(this);
public String getRule() {return ruleText + super.getRule();
class TreacherousPitDwellerEffect extends ContinuousEffectImpl {
public TreacherousPitDwellerEffect() {
public TreacherousPitDwellerEffect(final TreacherousPitDwellerEffect effect) {
public TreacherousPitDwellerEffect copy() {return new TreacherousPitDwellerEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(targetOpponent.getId(), game);return false;
public class TriumphOfCruelty extends CardImpl {
public TriumphOfCruelty(UUID ownerId) {
public TriumphOfCruelty(final TriumphOfCruelty card) {
public TriumphOfCruelty copy() {return new TriumphOfCruelty(this);
public class TriumphOfFerocity extends CardImpl {
public TriumphOfFerocity(UUID ownerId) {
public TriumphOfFerocity(final TriumphOfFerocity card) {
public TriumphOfFerocity copy() {return new TriumphOfFerocity(this);
public class TrustedForcemage extends CardImpl {
public TrustedForcemage(UUID ownerId) {
public TrustedForcemage(final TrustedForcemage card) {
public TrustedForcemage copy() {return new TrustedForcemage(this);
public class TyrantOfDiscord extends CardImpl {
public TyrantOfDiscord(UUID ownerId) {
public TyrantOfDiscord(final TyrantOfDiscord card) {
public TyrantOfDiscord copy() {return new TyrantOfDiscord(this);
class TyrantOfDiscordEffect extends OneShotEffect {
public TyrantOfDiscordEffect() {
public TyrantOfDiscordEffect(final TyrantOfDiscordEffect effect) {
public TyrantOfDiscordEffect copy() {return new TyrantOfDiscordEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class UlvenwaldTracker extends CardImpl {
public UlvenwaldTracker(UUID ownerId) {
public UlvenwaldTracker(final UlvenwaldTracker card) {
public UlvenwaldTracker copy() {return new UlvenwaldTracker(this);
class TargetOtherCreaturePermanent extends TargetCreaturePermanent {
public TargetOtherCreaturePermanent() {
public TargetOtherCreaturePermanent(final TargetOtherCreaturePermanent target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return false;return super.canTarget(controllerId, id, source, game);
public TargetOtherCreaturePermanent copy() {return new TargetOtherCreaturePermanent(this);
public class UncannySpeed extends CardImpl {
public UncannySpeed(UUID ownerId) {
public UncannySpeed(final UncannySpeed card) {
public UncannySpeed copy() {return new UncannySpeed(this);
public class UndeadExecutioner extends CardImpl {
public UndeadExecutioner(UUID ownerId) {
public UndeadExecutioner(final UndeadExecutioner card) {
public UndeadExecutioner copy() {return new UndeadExecutioner(this);
public class UnhallowedPact extends CardImpl {
public UnhallowedPact(UUID ownerId) {
public UnhallowedPact(final UnhallowedPact card) {
public UnhallowedPact copy() {return new UnhallowedPact(this);
public class VanguardsShield extends CardImpl {
public VanguardsShield(UUID ownerId) {
public VanguardsShield(final VanguardsShield card) {
public VanguardsShield copy() {return new VanguardsShield(this);
class VanguardsShieldEffect extends ContinuousEffectImpl {
public VanguardsShieldEffect() {
public VanguardsShieldEffect(final VanguardsShieldEffect effect) {
public VanguardsShieldEffect copy() {return new VanguardsShieldEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class Vanishment extends CardImpl {
public Vanishment(UUID ownerId) {
public Vanishment(final Vanishment card) {
public Vanishment copy() {return new Vanishment(this);
public class VesselOfEndlessRest extends CardImpl {
public VesselOfEndlessRest(UUID ownerId) {
public VesselOfEndlessRest(final VesselOfEndlessRest card) {
public VesselOfEndlessRest copy() {return new VesselOfEndlessRest(this);
public class VexingDevil extends CardImpl {
public VexingDevil(UUID ownerId) {
public VexingDevil(final VexingDevil card) {
public VexingDevil copy() {return new VexingDevil(this);
class VexingDevilEffect extends OneShotEffect {
public VexingDevilEffect() {
VexingDevilEffect(final VexingDevilEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public VexingDevilEffect copy() {return new VexingDevilEffect(this);
public class VigilanteJustice extends CardImpl {
public VigilanteJustice(UUID ownerId) {
public VigilanteJustice(final VigilanteJustice card) {
public VigilanteJustice copy() {return new VigilanteJustice(this);
public class VoiceOfTheProvinces extends CardImpl {
public VoiceOfTheProvinces(UUID ownerId) {
public VoiceOfTheProvinces(final VoiceOfTheProvinces card) {
public VoiceOfTheProvinces copy() {return new VoiceOfTheProvinces(this);
public class Vorstclaw extends CardImpl {
public Vorstclaw(UUID ownerId) {
public Vorstclaw(final Vorstclaw card) {
public Vorstclaw copy() {return new Vorstclaw(this);
public class WanderingWolf extends CardImpl {
public WanderingWolf(UUID ownerId) {
public WanderingWolf(final WanderingWolf card) {
public WanderingWolf copy() {return new WanderingWolf(this);
public class Wingcrafter extends CardImpl {
public Wingcrafter(UUID ownerId) {
public Wingcrafter(final Wingcrafter card) {
public Wingcrafter copy() {return new Wingcrafter(this);
public class WolfirAvenger extends CardImpl {
public WolfirAvenger(UUID ownerId) {
public WolfirAvenger(final WolfirAvenger card) {
public WolfirAvenger copy() {return new WolfirAvenger(this);
public class WolfirSilverheart extends CardImpl {
public WolfirSilverheart(UUID ownerId) {
public WolfirSilverheart(final WolfirSilverheart card) {
public WolfirSilverheart copy() {return new WolfirSilverheart(this);
public class YewSpirit extends CardImpl {
public YewSpirit(UUID ownerId) {
public YewSpirit(final YewSpirit card) {
public YewSpirit copy() {return new YewSpirit(this);
public class ZealousConscripts extends CardImpl {
public ZealousConscripts(UUID ownerId) {
public ZealousConscripts(final ZealousConscripts card) {
public ZealousConscripts copy() {return new ZealousConscripts(this);
public class ZealousStrike extends CardImpl {
public ZealousStrike(UUID ownerId) {
public ZealousStrike(final ZealousStrike card) {
public ZealousStrike copy() {return new ZealousStrike(this);
public class AdverseConditions extends CardImpl {
public AdverseConditions(UUID ownerId) {
public AdverseConditions(final AdverseConditions card) {
public AdverseConditions copy() {return new AdverseConditions(this);
public class AkoumFirebird extends CardImpl {
public AkoumFirebird(UUID ownerId) {
public AkoumFirebird(final AkoumFirebird card) {
public AkoumFirebird copy() {return new AkoumFirebird(this);
class AkoumFirebirdLandfallAbility extends TriggeredAbilityImpl {
public AkoumFirebirdLandfallAbility(Effect effect, boolean optional) {
public AkoumFirebirdLandfallAbility (Zone zone, Effect effect, Boolean optional ) {
public AkoumFirebirdLandfallAbility(final AkoumFirebirdLandfallAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return permanent != null && permanent.getCardType().contains(CardType.LAND) && permanent.getControllerId().equals(this.controllerId);
public String getRule() {return "<i>Landfall</i> &mdash; Whenever a land enters the battlefield under your control, " + super.getRule();
public AkoumFirebirdLandfallAbility copy() {return new AkoumFirebirdLandfallAbility(this);
public class AkoumHellkite extends CardImpl {
public AkoumHellkite(UUID ownerId) {
public AkoumHellkite(final AkoumHellkite card) {
public AkoumHellkite copy() {return new AkoumHellkite(this);
class AkoumHellkiteTriggeredAbility extends TriggeredAbilityImpl {
public AkoumHellkiteTriggeredAbility() {
public AkoumHellkiteTriggeredAbility(final AkoumHellkiteTriggeredAbility ability) {
public AkoumHellkiteTriggeredAbility copy() {return new AkoumHellkiteTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return text;
class AkoumHellkiteDamageEffect extends OneShotEffect {
public AkoumHellkiteDamageEffect() {
public AkoumHellkiteDamageEffect(final AkoumHellkiteDamageEffect effect) {
public AkoumHellkiteDamageEffect copy() {return new AkoumHellkiteDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class AkoumStonewaker extends CardImpl {
public AkoumStonewaker(UUID ownerId) {
public AkoumStonewaker(final AkoumStonewaker card) {
public AkoumStonewaker copy() {return new AkoumStonewaker(this);
class AkoumStonewakerEffect extends OneShotEffect {
public AkoumStonewakerEffect() {
public AkoumStonewakerEffect(final AkoumStonewakerEffect effect) {
public AkoumStonewakerEffect copy() {return new AkoumStonewakerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AkoumStonewakerElementalToken extends Token {
public AkoumStonewakerElementalToken() {
public class AlignedHedronNetwork extends CardImpl {
public AlignedHedronNetwork(UUID ownerId) {
public AlignedHedronNetwork(final AlignedHedronNetwork card) {
public AlignedHedronNetwork copy() {return new AlignedHedronNetwork(this);
class AlignedHedronNetworkExileEffect extends OneShotEffect {
public AlignedHedronNetworkExileEffect() {
public AlignedHedronNetworkExileEffect(final AlignedHedronNetworkExileEffect effect) {
public AlignedHedronNetworkExileEffect copy() {return new AlignedHedronNetworkExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AllyEncampment extends CardImpl {
public AllyEncampment(UUID ownerId) {
public AllyEncampment(final AllyEncampment card) {
public AllyEncampment copy() {return new AllyEncampment(this);
public class AngelicCaptain extends CardImpl {
public AngelicCaptain(UUID ownerId) {
public AngelicCaptain(final AngelicCaptain card) {
public AngelicCaptain copy() {return new AngelicCaptain(this);return new AngelicGift(this);
public class AngelOfRenewal extends CardImpl {
public AngelOfRenewal(UUID ownerId) {
public AngelOfRenewal(final AngelOfRenewal card) {
public AngelOfRenewal copy() {return new AngelOfRenewal(this);
public class BaneOfBalaGed extends CardImpl {
public BaneOfBalaGed(UUID ownerId) {
public BaneOfBalaGed(final BaneOfBalaGed card) {
public BaneOfBalaGed copy() {return new BaneOfBalaGed(this);
class BaneOfBalaGedEffect extends OneShotEffect {
public BaneOfBalaGedEffect() {
public BaneOfBalaGedEffect(final BaneOfBalaGedEffect effect) {
public BaneOfBalaGedEffect copy() {return new BaneOfBalaGedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BarrageTyrant extends CardImpl {
public BarrageTyrant(UUID ownerId) {
public BarrageTyrant(final BarrageTyrant card) {
public BarrageTyrant copy() {return new BarrageTyrant(this);
public class BeastcallerSavant extends CardImpl {
public BeastcallerSavant(UUID ownerId) {
public BeastcallerSavant(final BeastcallerSavant card) {
public BeastcallerSavant copy() {return new BeastcallerSavant(this);
public class BlightedCataract extends CardImpl {
public BlightedCataract(UUID ownerId) {
public BlightedCataract(final BlightedCataract card) {
public BlightedCataract copy() {return new BlightedCataract(this);
public class BlightedFen extends CardImpl {
public BlightedFen(UUID ownerId) {
public BlightedFen(final BlightedFen card) {
public BlightedFen copy() {return new BlightedFen(this);
public class BlightedGorge extends CardImpl {
public BlightedGorge(UUID ownerId) {
public BlightedGorge(final BlightedGorge card) {
public BlightedGorge copy() {return new BlightedGorge(this);
public class BlightedSteppe extends CardImpl {
public BlightedSteppe(UUID ownerId) {
public BlightedSteppe(final BlightedSteppe card) {
public BlightedSteppe copy() {return new BlightedSteppe(this);
public class BlightedWoodland extends CardImpl {
public BlightedWoodland(UUID ownerId) {
public BlightedWoodland(final BlightedWoodland card) {
public BlightedWoodland copy() {return new BlightedWoodland(this);
public class BlightHerder extends CardImpl {
public BlightHerder(UUID ownerId) {
public BlightHerder(final BlightHerder card) {
public BlightHerder copy() {return new BlightHerder(this);
class BlightHerderEffect extends OneShotEffect {
public BlightHerderEffect() {
public BlightHerderEffect(final BlightHerderEffect effect) {
public BlightHerderEffect copy() {return new BlightHerderEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new EldraziScionToken(), 3).apply(game, source);return true;return false;
public class Blisterpod extends CardImpl {
public Blisterpod(UUID ownerId) {
public Blisterpod(final Blisterpod card) {
public Blisterpod copy() {return new Blisterpod(this);
public class BloodbondVampire extends CardImpl {
public BloodbondVampire(UUID ownerId) {
public BloodbondVampire(final BloodbondVampire card) {
public BloodbondVampire copy() {return new BloodbondVampire(this);
public class BoilingEarth extends CardImpl {
public BoilingEarth(UUID ownerId) {
public BoilingEarth(final BoilingEarth card) {
public BoilingEarth copy() {return new BoilingEarth(this);
public class BreakerOfArmies extends CardImpl {
public BreakerOfArmies(UUID ownerId) {
public BreakerOfArmies(final BreakerOfArmies card) {
public BreakerOfArmies copy() {return new BreakerOfArmies(this);
public class BrilliantSpectrum extends CardImpl {
public BrilliantSpectrum(UUID ownerId) {
public BrilliantSpectrum(final BrilliantSpectrum card) {
public BrilliantSpectrum copy() {return new BrilliantSpectrum(this);
public class BringToLight extends CardImpl {
public BringToLight(UUID ownerId) {
public BringToLight(final BringToLight card) {
public BringToLight copy() {return new BringToLight(this);
class BringToLightEffect extends OneShotEffect {
public BringToLightEffect() {
public BringToLightEffect(final BringToLightEffect effect) {
public BringToLightEffect copy() {return new BringToLightEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BroodButcher extends CardImpl {
public BroodButcher(UUID ownerId) {
public BroodButcher(final BroodButcher card) {
public BroodButcher copy() {return new BroodButcher(this);
public class BroodhunterWurm extends CardImpl {
public BroodhunterWurm(UUID ownerId) {
public BroodhunterWurm(final BroodhunterWurm card) {
public BroodhunterWurm copy() {return new BroodhunterWurm(this);
public class BroodMonitor extends CardImpl {
public BroodMonitor(UUID ownerId) {
public BroodMonitor(final BroodMonitor card) {
public BroodMonitor copy() {return new BroodMonitor(this);
public class BrutalExpulsion extends CardImpl {
public BrutalExpulsion(UUID ownerId) {
public BrutalExpulsion(final BrutalExpulsion card) {
public BrutalExpulsion copy() {return new BrutalExpulsion(this);
public class CallTheScions extends CardImpl {
public CallTheScions(UUID ownerId) {
public CallTheScions(final CallTheScions card) {
public CallTheScions copy() {return new CallTheScions(this);
public class CanopyVista extends CardImpl {
public CanopyVista(UUID ownerId) {
public CanopyVista(final CanopyVista card) {
public CanopyVista copy() {return new CanopyVista(this);
public class ChasmGuide extends CardImpl {
public ChasmGuide(UUID ownerId) {
public ChasmGuide(final ChasmGuide card) {
public ChasmGuide copy() {return new ChasmGuide(this);
public class CinderGlade extends CardImpl {
public CinderGlade(UUID ownerId) {
public CinderGlade(final CinderGlade card) {
public CinderGlade copy() {return new CinderGlade(this);return new CliffsideLookout(this);
public class CloudManta extends CardImpl {
public CloudManta(UUID ownerId) {
public CloudManta(final CloudManta card) {
public CloudManta copy() {return new CloudManta(this);
public class ClutchOfCurrents extends CardImpl {
public ClutchOfCurrents(UUID ownerId) {
public ClutchOfCurrents(final ClutchOfCurrents card) {
public ClutchOfCurrents copy() {return new ClutchOfCurrents(this);
public class CoastalDiscovery extends CardImpl {
public CoastalDiscovery(UUID ownerId) {
public CoastalDiscovery(final CoastalDiscovery card) {
public CoastalDiscovery copy() {return new CoastalDiscovery(this);
public class CompleteDisregard extends CardImpl {
public CompleteDisregard(UUID ownerId) {
public CompleteDisregard(final CompleteDisregard card) {
public CompleteDisregard copy() {return new CompleteDisregard(this);
public class ConduitOfRuin extends CardImpl {
public ConduitOfRuin(UUID ownerId) {
public ConduitOfRuin(final ConduitOfRuin card) {
public ConduitOfRuin copy() {return new ConduitOfRuin(this);
class ConduitOfRuinWatcher extends Watcher {
public ConduitOfRuinWatcher() {
public ConduitOfRuinWatcher(final ConduitOfRuinWatcher watcher) {
public void watch(GameEvent event, Game game) {
public int creatureSpellsCastThisTurn(UUID playerId) {return playerCreatureSpells.get(playerId);return 0;
public ConduitOfRuinWatcher copy() {return new ConduitOfRuinWatcher(this);
public void reset() {
class FirstCastCreatureSpellPredicate implements ObjectPlayerPredicate<ObjectPlayer<Controllable>> {
public boolean apply(ObjectPlayer<Controllable> input, Game game) {return watcher != null && watcher.creatureSpellsCastThisTurn(input.getPlayerId()) == 0;return false;
public String toString() {return "The first creature spell you cast each turn";
public class CoralhelmGuide extends CardImpl {
public CoralhelmGuide(UUID ownerId) {
public CoralhelmGuide(final CoralhelmGuide card) {
public CoralhelmGuide copy() {return new CoralhelmGuide(this);return new CourierGriffin(this);
public class CrumbleToDust extends CardImpl {
public CrumbleToDust(UUID ownerId) {
public CrumbleToDust(final CrumbleToDust card) {
public CrumbleToDust copy() {return new CrumbleToDust(this);
public class CrypticCruiser extends CardImpl {
public CrypticCruiser(UUID ownerId) {
public CrypticCruiser(final CrypticCruiser card) {
public CrypticCruiser copy() {return new CrypticCruiser(this);
public class CullingDrone extends CardImpl {
public CullingDrone(UUID ownerId) {
public CullingDrone(final CullingDrone card) {
public CullingDrone copy() {return new CullingDrone(this);
public class DampeningPulse extends CardImpl {
public DampeningPulse(UUID ownerId) {
public DampeningPulse(final DampeningPulse card) {
public DampeningPulse copy() {return new DampeningPulse(this);
public class DeathlessBehemoth extends CardImpl {
public DeathlessBehemoth(UUID ownerId) {
public DeathlessBehemoth(final DeathlessBehemoth card) {
public DeathlessBehemoth copy() {return new DeathlessBehemoth(this);
public class DefiantBloodlord extends CardImpl {
public DefiantBloodlord(UUID ownerId) {
public DefiantBloodlord(final DefiantBloodlord card) {
public DefiantBloodlord copy() {return new DefiantBloodlord(this);
class DefiantBloodlordTriggeredAbility extends TriggeredAbilityImpl {
public DefiantBloodlordTriggeredAbility() {
public DefiantBloodlordTriggeredAbility(final DefiantBloodlordTriggeredAbility ability) {
public DefiantBloodlordTriggeredAbility copy() {return new DefiantBloodlordTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.GAINED_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you gain life, target opponent loses that much life.";
public class DemonsGrasp extends CardImpl {
public DemonsGrasp(UUID ownerId) {
public DemonsGrasp(final DemonsGrasp card) {
public DemonsGrasp copy() {return new DemonsGrasp(this);
public class DesolationTwin extends CardImpl {
public DesolationTwin(UUID ownerId) {
public DesolationTwin(final DesolationTwin card) {
public DesolationTwin copy() {return new DesolationTwin(this);
class DesolationTwinOnCastAbility extends TriggeredAbilityImpl {
DesolationTwinOnCastAbility() {
DesolationTwinOnCastAbility(DesolationTwinOnCastAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return this.getSourceId().equals(spell.getSourceId());
public DesolationTwinOnCastAbility copy() {return new DesolationTwinOnCastAbility(this);
public String getRule() {return "When you cast {this}, " + super.getRule();
class EldraziToken extends Token {
public EldraziToken() {
public class DranasEmissary extends CardImpl {
public DranasEmissary(UUID ownerId) {
public DranasEmissary(final DranasEmissary card) {
public DranasEmissary copy() {return new DranasEmissary(this);
public class DrownerOfHope extends CardImpl {
public DrownerOfHope(UUID ownerId) {
public DrownerOfHope(final DrownerOfHope card) {
public DrownerOfHope copy() {return new DrownerOfHope(this);
public class DustStalker extends CardImpl {
public DustStalker(UUID ownerId) {
public DustStalker(final DustStalker card) {
public DustStalker copy() {return new DustStalker(this);
public class EarthenArms extends CardImpl {
public EarthenArms(UUID ownerId) {
public EarthenArms(final EarthenArms card) {
public EarthenArms copy() {return new EarthenArms(this);
public class EldraziDevastator extends CardImpl {
public EldraziDevastator(UUID ownerId) {
public EldraziDevastator(final EldraziDevastator card) {
public EldraziDevastator copy() {return new EldraziDevastator(this);
public class EldraziSkyspawner extends CardImpl {
public EldraziSkyspawner(UUID ownerId) {
public EldraziSkyspawner(final EldraziSkyspawner card) {
public EldraziSkyspawner copy() {return new EldraziSkyspawner(this);
public class EmeriaShepherd extends CardImpl {
public EmeriaShepherd(UUID ownerId) {
public EmeriaShepherd(final EmeriaShepherd card) {
public EmeriaShepherd copy() {return new EmeriaShepherd(this);
class EmeriaShepherdReturnToHandTargetEffect extends OneShotEffect {
public EmeriaShepherdReturnToHandTargetEffect() {staticText = "you may return target nonland permanent card from your graveyard to your hand. If that land is a Plains, you may return that nonland permanent card to the battlefield instead";
public EmeriaShepherdReturnToHandTargetEffect(final EmeriaShepherdReturnToHandTargetEffect effect) {
public EmeriaShepherdReturnToHandTargetEffect copy() {return new EmeriaShepherdReturnToHandTargetEffect(this);
public boolean apply(Game game, Ability source) {return false;return controller.moveCards(new CardsImpl(targetPointer.getTargets(game, source)), toZone, source, game);
public class EncirclingFissure extends CardImpl {
public EncirclingFissure(UUID ownerId) {
public EncirclingFissure(final EncirclingFissure card) {
public EncirclingFissure copy() {return new EncirclingFissure(this);
class EncirclingFissurePreventEffect extends PreventionEffectImpl {
public EncirclingFissurePreventEffect() {
public EncirclingFissurePreventEffect(final EncirclingFissurePreventEffect effect) {
public EncirclingFissurePreventEffect copy() {return new EncirclingFissurePreventEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class EndlessOne extends CardImpl {
public EndlessOne(UUID ownerId) {
public EndlessOne(final EndlessOne card) {
public EndlessOne copy() {return new EndlessOne(this);
public class ExertInfluence extends CardImpl {
public ExertInfluence(UUID ownerId) {
public ExertInfluence(final ExertInfluence card) {
public ExertInfluence copy() {return new ExertInfluence(this);
class ExertInfluenceEffect extends OneShotEffect {
public ExertInfluenceEffect() {
public ExertInfluenceEffect(final ExertInfluenceEffect effect) {
public ExertInfluenceEffect copy() {return new ExertInfluenceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ExpeditionEnvoy extends CardImpl {
public ExpeditionEnvoy(UUID ownerId) {
public ExpeditionEnvoy(final ExpeditionEnvoy card) {
public ExpeditionEnvoy copy() {return new ExpeditionEnvoy(this);
public class EyelessWatcher extends CardImpl {
public EyelessWatcher(UUID ownerId) {
public EyelessWatcher(final EyelessWatcher card) {
public EyelessWatcher copy() {return new EyelessWatcher(this);
public class FathomFeeder extends CardImpl {
public FathomFeeder(UUID ownerId) {
public FathomFeeder(final FathomFeeder card) {
public FathomFeeder copy() {return new FathomFeeder(this);
class FathomFeederEffect extends OneShotEffect {
public FathomFeederEffect() {
public FathomFeederEffect(final FathomFeederEffect effect) {
public FathomFeederEffect copy() {return new FathomFeederEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class FelidarCub extends CardImpl {
public FelidarCub(UUID ownerId) {
public FelidarCub(final FelidarCub card) {
public FelidarCub copy() {return new FelidarCub(this);
public class FertileThicket extends CardImpl {
public FertileThicket(UUID ownerId) {
public FertileThicket(final FertileThicket card) {
public FertileThicket copy() {return new FertileThicket(this);
class FertileThicketEffect extends OneShotEffect {
public FertileThicketEffect() {
public FertileThicketEffect(final FertileThicketEffect effect) {
public FertileThicketEffect copy() {return new FertileThicketEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FiremantleMage extends CardImpl {
public FiremantleMage(UUID ownerId) {
public FiremantleMage(final FiremantleMage card) {
public FiremantleMage copy() {return new FiremantleMage(this);return new FortifiedRampart(this);
public class FromBeyond extends CardImpl {
public FromBeyond(UUID ownerId) {
public FromBeyond(final FromBeyond card) {
public FromBeyond copy() {return new FromBeyond(this);
public class GideonAllyOfZendikar extends CardImpl {
public GideonAllyOfZendikar(UUID ownerId) {
public GideonAllyOfZendikar(final GideonAllyOfZendikar card) {
public GideonAllyOfZendikar copy() {return new GideonAllyOfZendikar(this);
class GideonAllyOfZendikarEmblem extends Emblem {
public GideonAllyOfZendikarEmblem() {
class GideonAllyOfZendikarToken extends Token {
public GideonAllyOfZendikarToken() {
class KnightAllyToken extends Token {
public KnightAllyToken() {
public class GideonsReproach extends CardImpl {
public GideonsReproach(UUID ownerId) {
public GideonsReproach(final GideonsReproach card) {
public GideonsReproach copy() {return new GideonsReproach(this);
public class GraveBirthing extends CardImpl {
public GraveBirthing(UUID ownerId) {
public class GreenwardenOfMurasa extends CardImpl {
public GreenwardenOfMurasa(UUID ownerId) {
public GreenwardenOfMurasa(final GreenwardenOfMurasa card) {
public GreenwardenOfMurasa copy() {return new GreenwardenOfMurasa(this);
class GreenwardenOfMurasaEffect extends OneShotEffect {
public GreenwardenOfMurasaEffect() {this.staticText = "you may exile it. If you do, return target card from your graveyard to your hand";
public GreenwardenOfMurasaEffect(final GreenwardenOfMurasaEffect effect) {
public GreenwardenOfMurasaEffect copy() {return new GreenwardenOfMurasaEffect(this);
public boolean apply(Game game, Ability source) {if (controller.chooseUse(outcome, "Exile " + sourceObject.getLogName() + " to return card from your graveyard to your hand?", source, game)) {return effect.apply(game, source);return true;return false;
public class GripOfDesolation extends CardImpl {
public GripOfDesolation(UUID ownerId) {
public GripOfDesolation(final GripOfDesolation card) {
public GripOfDesolation copy() {return new GripOfDesolation(this);
public class GroveRumbler extends CardImpl {
public GroveRumbler(UUID ownerId) {
public GroveRumbler(final GroveRumbler card) {
public GroveRumbler copy() {return new GroveRumbler(this);
public class GrovetenderDruids extends CardImpl {
public GrovetenderDruids(UUID ownerId) {
public GrovetenderDruids(final GrovetenderDruids card) {
public GrovetenderDruids copy() {return new GrovetenderDruids(this);
class GrovetenderDruidsEffect extends OneShotEffect {
GrovetenderDruidsEffect() {
GrovetenderDruidsEffect(final GrovetenderDruidsEffect effect) {
public GrovetenderDruidsEffect copy() {return new GrovetenderDruidsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class GrovetenderDruidsPlantToken extends Token {
public GrovetenderDruidsPlantToken() {
public class GruesomeSlaughter extends CardImpl {
public GruesomeSlaughter(UUID ownerId) {
public GruesomeSlaughter(final GruesomeSlaughter card) {
public GruesomeSlaughter copy() {return new GruesomeSlaughter(this);
public class GuardianOfTazeem extends CardImpl {
public GuardianOfTazeem(UUID ownerId) {
public GuardianOfTazeem(final GuardianOfTazeem card) {
public GuardianOfTazeem copy() {return new GuardianOfTazeem(this);
class GuardianOfTazeemTriggeredAbility extends TriggeredAbilityImpl {
public GuardianOfTazeemTriggeredAbility() {
public GuardianOfTazeemTriggeredAbility(final GuardianOfTazeemTriggeredAbility ability) {
public GuardianOfTazeemTriggeredAbility copy() {return new GuardianOfTazeemTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "<i>Landfall</i> - Whenever a land enters the battlefield under your control, " + super.getRule();
class GuardianOfTazeemEffect extends OneShotEffect {
public GuardianOfTazeemEffect() {
public GuardianOfTazeemEffect(final GuardianOfTazeemEffect effect) {
public GuardianOfTazeemEffect copy() {return new GuardianOfTazeemEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class GuulDrazOverseer extends CardImpl {
public GuulDrazOverseer(UUID ownerId) {
public GuulDrazOverseer(final GuulDrazOverseer card) {
public GuulDrazOverseer copy() {return new GuulDrazOverseer(this);
class GuulDrazOverseerEffect extends OneShotEffect {
public GuulDrazOverseerEffect() {
public GuulDrazOverseerEffect(final GuulDrazOverseerEffect effect) {
public GuulDrazOverseerEffect copy() {return new GuulDrazOverseerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HagraSharpshooter extends CardImpl {
public HagraSharpshooter(UUID ownerId) {
public HagraSharpshooter(final HagraSharpshooter card) {
public HagraSharpshooter copy() {return new HagraSharpshooter(this);
public class HalimarTidecaller extends CardImpl {
public HalimarTidecaller(UUID ownerId) {
public HalimarTidecaller(final HalimarTidecaller card) {
public HalimarTidecaller copy() {return new HalimarTidecaller(this);
public class HedronArchive extends CardImpl {
public HedronArchive(UUID ownerId) {
public HedronArchive(final HedronArchive card) {
public HedronArchive copy() {return new HedronArchive(this);
public class HedronBlade extends CardImpl {
public HedronBlade(UUID ownerId) {
public HedronBlade(final HedronBlade card) {
public HedronBlade copy() {return new HedronBlade(this);
class HedronBladeTriggeredAbility extends TriggeredAbilityImpl {
HedronBladeTriggeredAbility(Effect effect) {
HedronBladeTriggeredAbility(final HedronBladeTriggeredAbility ability) {
public HedronBladeTriggeredAbility copy() {return new HedronBladeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_BLOCKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature becomes blocked by one or more colorless creatures, " + super.getRule();
public class HeraldOfKozilek extends CardImpl {
public HeraldOfKozilek(UUID ownerId) {
public HeraldOfKozilek(final HeraldOfKozilek card) {
public HeraldOfKozilek copy() {return new HeraldOfKozilek(this);
public class HeroOfGomaFada extends CardImpl {
public HeroOfGomaFada(UUID ownerId) {
public HeroOfGomaFada(final HeroOfGomaFada card) {
public HeroOfGomaFada copy() {return new HeroOfGomaFada(this);
public class HorriblyAwry extends CardImpl {
public HorriblyAwry(UUID ownerId) {
public HorriblyAwry(final HorriblyAwry card) {
public HorriblyAwry copy() {return new HorriblyAwry(this);
public class IncubatorDrone extends CardImpl {
public IncubatorDrone(UUID ownerId) {
public IncubatorDrone(final IncubatorDrone card) {
public IncubatorDrone copy() {return new IncubatorDrone(this);
public class KalastriaHealer extends CardImpl {
public KalastriaHealer(UUID ownerId) {
public KalastriaHealer(final KalastriaHealer card) {
public KalastriaHealer copy() {return new KalastriaHealer(this);
public class KalastriaNightwatch extends CardImpl {
public KalastriaNightwatch(UUID ownerId) {
public KalastriaNightwatch(final KalastriaNightwatch card) {
public KalastriaNightwatch copy() {return new KalastriaNightwatch(this);
public class KioraMasterOfTheDepths extends CardImpl {
public KioraMasterOfTheDepths(UUID ownerId) {
public KioraMasterOfTheDepths(final KioraMasterOfTheDepths card) {
public KioraMasterOfTheDepths copy() {return new KioraMasterOfTheDepths(this);
class KioraUntapEffect extends OneShotEffect {
public KioraUntapEffect() {
public KioraUntapEffect(final KioraUntapEffect effect) {
public KioraUntapEffect copy() {return new KioraUntapEffect(this);
public boolean apply(Game game, Ability source) {return secondTarget.untap(game);return true;
class KioraRevealEffect extends OneShotEffect {
public KioraRevealEffect() {
public KioraRevealEffect(final KioraRevealEffect effect) {
public KioraRevealEffect copy() {return new KioraRevealEffect(this);
public boolean apply(Game game, Ability source) {
"Put a creature card and/or a land card into your hand?", source, game)) {return true;return false;
class KioraMasterOfTheDepthsEmblem extends Emblem {
public KioraMasterOfTheDepthsEmblem() {
class KioraFightEffect extends OneShotEffect {
KioraFightEffect() {
KioraFightEffect(final KioraFightEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public KioraFightEffect copy() {return new KioraFightEffect(this);
class OctopusToken extends Token {
public OctopusToken() {
public class KitesailScout extends CardImpl {
public KitesailScout(UUID ownerId) {
public KitesailScout(final KitesailScout card) {
public KitesailScout copy() {return new KitesailScout(this);
public class KorBladewhirl extends CardImpl {
public KorBladewhirl(UUID ownerId) {
public KorBladewhirl(final KorBladewhirl card) {
public KorBladewhirl copy() {return new KorBladewhirl(this);
public class KorCastigator extends CardImpl {
public KorCastigator(UUID ownerId) {
public KorCastigator(final KorCastigator card) {
public KorCastigator copy() {return new KorCastigator(this);
public class KorEntanglers extends CardImpl {
public KorEntanglers(UUID ownerId) {
public KorEntanglers(final KorEntanglers card) {
public KorEntanglers copy() {return new KorEntanglers(this);
public class KozileksChanneler extends CardImpl {
public KozileksChanneler(UUID ownerId) {
public KozileksChanneler(final KozileksChanneler card) {
public KozileksChanneler copy() {return new KozileksChanneler(this);
public class KozileksSentinel extends CardImpl {
public KozileksSentinel(UUID ownerId) {
public KozileksSentinel(final KozileksSentinel card) {
public KozileksSentinel copy() {return new KozileksSentinel(this);
public class LanternScout extends CardImpl {
public LanternScout(UUID ownerId) {
public LanternScout(final LanternScout card) {
public LanternScout copy() {return new LanternScout(this);
public class LavastepRaider extends CardImpl {
public LavastepRaider(UUID ownerId) {
public LavastepRaider(final LavastepRaider card) {
public LavastepRaider copy() {return new LavastepRaider(this);return new LifespringDruid(this);
public class LithomancersFocus extends CardImpl {
public LithomancersFocus(UUID ownerId) {
public LithomancersFocus(final LithomancersFocus card) {
public LithomancersFocus copy() {return new LithomancersFocus(this);
class LithomancersFocusPreventDamageToTargetEffect extends PreventionEffectImpl {
public LithomancersFocusPreventDamageToTargetEffect() {
public LithomancersFocusPreventDamageToTargetEffect(final LithomancersFocusPreventDamageToTargetEffect effect) {
public LithomancersFocusPreventDamageToTargetEffect copy() {return new LithomancersFocusPreventDamageToTargetEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return object != null && object.getColor(game).isColorless();return false;
public class LoomingSpires extends CardImpl {
public LoomingSpires(UUID ownerId) {
public LoomingSpires(final LoomingSpires card) {
public LoomingSpires copy() {return new LoomingSpires(this);
public class LumberingFalls extends CardImpl {
public LumberingFalls(UUID ownerId) {
public LumberingFalls(final LumberingFalls card) {
public LumberingFalls copy() {return new LumberingFalls(this);
class LumberingFallsToken extends Token {
public LumberingFallsToken() {
public class MakindiPatrol extends CardImpl {
public MakindiPatrol(UUID ownerId) {
public MakindiPatrol(final MakindiPatrol card) {
public MakindiPatrol copy() {return new MakindiPatrol(this);
public class MakindiSliderunner extends CardImpl {
public MakindiSliderunner(UUID ownerId) {
public MakindiSliderunner(final MakindiSliderunner card) {
public MakindiSliderunner copy() {return new MakindiSliderunner(this);
public class MalakirFamiliar extends CardImpl {
public MalakirFamiliar(UUID ownerId) {
public MalakirFamiliar(final MalakirFamiliar card) {
public MalakirFamiliar copy() {return new MalakirFamiliar(this);
public class MiresMalice extends CardImpl {
public MiresMalice(UUID ownerId) {
public MiresMalice(final MiresMalice card) {
public MiresMalice copy() {return new MiresMalice(this);
public class MistIntruder extends CardImpl {
public MistIntruder(UUID ownerId) {
public MistIntruder(final MistIntruder card) {
public MistIntruder copy() {return new MistIntruder(this);
public class MoltenNursery extends CardImpl {
public MoltenNursery(UUID ownerId) {
public MoltenNursery(final MoltenNursery card) {
public MoltenNursery copy() {return new MoltenNursery(this);
public class MortuaryMire extends CardImpl {
public MortuaryMire(UUID ownerId) {
public MortuaryMire(final MortuaryMire card) {
public MortuaryMire copy() {return new MortuaryMire(this);
public class MundaAmbushLeader extends CardImpl {
public MundaAmbushLeader(UUID ownerId) {
public MundaAmbushLeader(final MundaAmbushLeader card) {
public MundaAmbushLeader copy() {return new MundaAmbushLeader(this);
class MundaAmbushLeaderEffect extends OneShotEffect {
public MundaAmbushLeaderEffect() {
public MundaAmbushLeaderEffect(final MundaAmbushLeaderEffect effect) {
public MundaAmbushLeaderEffect copy() {return new MundaAmbushLeaderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MurasaRanger extends CardImpl {
public MurasaRanger(UUID ownerId) {
public MurasaRanger(final MurasaRanger card) {
public MurasaRanger copy() {return new MurasaRanger(this);
public class MurkStrider extends CardImpl {
public MurkStrider(UUID ownerId) {
public MurkStrider(final MurkStrider card) {
public MurkStrider copy() {return new MurkStrider(this);
public class NaturalConnection extends CardImpl {
public NaturalConnection(UUID ownerId) {
public NaturalConnection(final NaturalConnection card) {
public NaturalConnection copy() {return new NaturalConnection(this);
public class NettleDrone extends CardImpl {
public NettleDrone(UUID ownerId) {
public NettleDrone(final NettleDrone card) {
public NettleDrone copy() {return new NettleDrone(this);
public class NirkanaAssassin extends CardImpl {
public NirkanaAssassin(UUID ownerId) {
public NirkanaAssassin(final NirkanaAssassin card) {
public NirkanaAssassin copy() {return new NirkanaAssassin(this);
public class NissasRenewal extends CardImpl {
public NissasRenewal(UUID ownerId) {
public NissasRenewal(final NissasRenewal card) {
public NissasRenewal copy() {return new NissasRenewal(this);
public class NoyanDarRoilShaper extends CardImpl {
public NoyanDarRoilShaper(UUID ownerId) {
public NoyanDarRoilShaper(final NoyanDarRoilShaper card) {
public NoyanDarRoilShaper copy() {return new NoyanDarRoilShaper(this);
class NoyanDarEffect extends OneShotEffect {
public NoyanDarEffect() {
public NoyanDarEffect(final NoyanDarEffect effect) {
public NoyanDarEffect copy() {return new NoyanDarEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return true;
class AwakenElementalToken extends Token {
public AwakenElementalToken() {
public class OblivionSower extends CardImpl {
public OblivionSower(UUID ownerId) {
public OblivionSower(final OblivionSower card) {
public OblivionSower copy() {return new OblivionSower(this);
class OblivionSowerEffect extends OneShotEffect {
public OblivionSowerEffect() {
public OblivionSowerEffect(final OblivionSowerEffect effect) {
public OblivionSowerEffect copy() {return new OblivionSowerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ObNixilisReignited extends CardImpl {
public ObNixilisReignited(UUID ownerId) {
public ObNixilisReignited(final ObNixilisReignited card) {
public ObNixilisReignited copy() {return new ObNixilisReignited(this);
class ObNixilisReignitedEmblem extends Emblem {
public ObNixilisReignitedEmblem() {
class ObNixilisEmblemTriggeredAbility extends TriggeredAbilityImpl {
public ObNixilisEmblemTriggeredAbility(Effect effect, boolean optional) {
public ObNixilisEmblemTriggeredAbility(final ObNixilisEmblemTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DREW_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId() != null;
public String getRule() {return "Whenever a player draws a card, you lose 2 life.";
public ObNixilisEmblemTriggeredAbility copy() {return new ObNixilisEmblemTriggeredAbility(this);
public class OmnathLocusOfRage extends CardImpl {
public OmnathLocusOfRage(UUID ownerId) {
public OmnathLocusOfRage(final OmnathLocusOfRage card) {
public OmnathLocusOfRage copy() {return new OmnathLocusOfRage(this);
class OmnathElementalToken extends Token {
OmnathElementalToken() {
public class OnduChampion extends CardImpl {
public OnduChampion(UUID ownerId) {
public OnduChampion(final OnduChampion card) {
public OnduChampion copy() {return new OnduChampion(this);
public class OnduGreathorn extends CardImpl {
public OnduGreathorn(UUID ownerId) {
public OnduGreathorn(final OnduGreathorn card) {
public OnduGreathorn copy() {return new OnduGreathorn(this);
public class OnduRising extends CardImpl {
public OnduRising(UUID ownerId) {
public OnduRising(final OnduRising card) {
public OnduRising copy() {return new OnduRising(this);
class OnduRisingTriggeredAbility extends DelayedTriggeredAbility {
public OnduRisingTriggeredAbility() {
public OnduRisingTriggeredAbility(OnduRisingTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public OnduRisingTriggeredAbility copy() {return new OnduRisingTriggeredAbility(this);
public String getRule() {return "Whenever a creature attacks this turn, it gains lifelink until end of turn.";
public class OranRiefInvoker extends CardImpl {
public OranRiefInvoker(UUID ownerId) {
public OranRiefInvoker(final OranRiefInvoker card) {
public OranRiefInvoker copy() {return new OranRiefInvoker(this);
public class Outnumber extends CardImpl {
public Outnumber(UUID ownerId) {
public Outnumber(final Outnumber card) {
public Outnumber copy() {return new Outnumber(this);
public class PainfulTruths extends CardImpl {
public PainfulTruths(UUID ownerId) {
public PainfulTruths(final PainfulTruths card) {
public PainfulTruths copy() {return new PainfulTruths(this);
public class PartTheWaterveil extends CardImpl {
public PartTheWaterveil(UUID ownerId) {
public PartTheWaterveil(final PartTheWaterveil card) {
public PartTheWaterveil copy() {return new PartTheWaterveil(this);
public class PathwayArrows extends CardImpl {
public PathwayArrows(UUID ownerId) {
public PathwayArrows(final PathwayArrows card) {
public PathwayArrows copy() {return new PathwayArrows(this);
class PathwayArrowsEffect extends OneShotEffect {
public PathwayArrowsEffect() {
public PathwayArrowsEffect(final PathwayArrowsEffect effect) {
public PathwayArrowsEffect copy() {return new PathwayArrowsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PlanarOutburst extends CardImpl {
public PlanarOutburst(UUID ownerId) {
public PlanarOutburst(final PlanarOutburst card) {
public PlanarOutburst copy() {return new PlanarOutburst(this);
public class PlatedCrusher extends CardImpl {
public PlatedCrusher(UUID ownerId) {
public PlatedCrusher(final PlatedCrusher card) {
public PlatedCrusher copy() {return new PlatedCrusher(this);
public class PrairieStream extends CardImpl {
public PrairieStream(UUID ownerId) {
public PrairieStream(final PrairieStream card) {
public PrairieStream copy() {return new PrairieStream(this);
public class PrismArray extends CardImpl {
public PrismArray(UUID ownerId) {
public PrismArray(final PrismArray card) {
public PrismArray copy() {return new PrismArray(this);
public class ProcessorAssault extends CardImpl {
public ProcessorAssault(UUID ownerId) {
public ProcessorAssault(final ProcessorAssault card) {
public ProcessorAssault copy() {return new ProcessorAssault(this);
public class QuarantineField extends CardImpl {
public QuarantineField(UUID ownerId) {
public QuarantineField(final QuarantineField card) {
public void adjustTargets(Ability ability, Game game) {
public QuarantineField copy() {return new QuarantineField(this);
class QuarantineFieldEffect extends OneShotEffect {
public QuarantineFieldEffect() {
public QuarantineFieldEffect(final QuarantineFieldEffect effect) {
public QuarantineFieldEffect copy() {return new QuarantineFieldEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), permanent.getIdName()).apply(game, source);return false;
public class RadiantFlames extends CardImpl {
public RadiantFlames(UUID ownerId) {
public RadiantFlames(final RadiantFlames card) {
public RadiantFlames copy() {return new RadiantFlames(this);
public class RecklessCohort extends CardImpl {
public RecklessCohort(UUID ownerId) {
public RecklessCohort(final RecklessCohort card) {
public RecklessCohort copy() {return new RecklessCohort(this);
public class ReclaimingVines extends CardImpl {
public ReclaimingVines(UUID ownerId) {
public ReclaimingVines(final ReclaimingVines card) {
public ReclaimingVines copy() {return new ReclaimingVines(this);
public class ResoluteBlademaster extends CardImpl {
public ResoluteBlademaster(UUID ownerId) {
public ResoluteBlademaster(final ResoluteBlademaster card) {
public ResoluteBlademaster copy() {return new ResoluteBlademaster(this);
public class RetreatToCoralhelm extends CardImpl {
public RetreatToCoralhelm(UUID ownerId) {
public RetreatToCoralhelm(final RetreatToCoralhelm card) {
public RetreatToCoralhelm copy() {return new RetreatToCoralhelm(this);
public class RetreatToEmeria extends CardImpl {
public RetreatToEmeria(UUID ownerId) {
public RetreatToEmeria(final RetreatToEmeria card) {
public RetreatToEmeria copy() {return new RetreatToEmeria(this);
class KorAllyToken extends Token {
public KorAllyToken() {
public class RetreatToHagra extends CardImpl {
public RetreatToHagra(UUID ownerId) {
public RetreatToHagra(final RetreatToHagra card) {
public RetreatToHagra copy() {return new RetreatToHagra(this);
public class RoilmagesTrick extends CardImpl {
public RoilmagesTrick(UUID ownerId) {
public RoilmagesTrick(final RoilmagesTrick card) {
public RoilmagesTrick copy() {return new RoilmagesTrick(this);
public class RoilSpout extends CardImpl {
public RoilSpout(UUID ownerId) {
public RoilSpout(final RoilSpout card) {
public RoilSpout copy() {return new RoilSpout(this);
public class RoilsRetribution extends CardImpl {
public RoilsRetribution(UUID ownerId) {
public RoilsRetribution(final RoilsRetribution card) {
public RoilsRetribution copy() {return new RoilsRetribution(this);
public class RotShambler extends CardImpl {
public RotShambler(UUID ownerId) {
public RotShambler(final RotShambler card) {
public RotShambler copy() {return new RotShambler(this);
public class RuinationGuide extends CardImpl {
public RuinationGuide(UUID ownerId) {
public RuinationGuide(final RuinationGuide card) {
public RuinationGuide copy() {return new RuinationGuide(this);
public class RuinousPath extends CardImpl {
public RuinousPath(UUID ownerId) {
public RuinousPath(final RuinousPath card) {
public RuinousPath copy() {return new RuinousPath(this);
public class RuinProcessor extends CardImpl {
public RuinProcessor(UUID ownerId) {
public RuinProcessor(final RuinProcessor card) {
public RuinProcessor copy() {return new RuinProcessor(this);
public class RushOfIce extends CardImpl {
public RushOfIce(UUID ownerId) {
public RushOfIce(final RushOfIce card) {
public RushOfIce copy() {return new RushOfIce(this);
public class SalvageDrone extends CardImpl {
public SalvageDrone(UUID ownerId) {
public SalvageDrone(final SalvageDrone card) {
public SalvageDrone copy() {return new SalvageDrone(this);
public class SanctumOfUgin extends CardImpl {
public SanctumOfUgin(UUID ownerId) {
public SanctumOfUgin(final SanctumOfUgin card) {
public SanctumOfUgin copy() {return new SanctumOfUgin(this);
public class SandstoneBridge extends CardImpl {
public SandstoneBridge(UUID ownerId) {
public SandstoneBridge(final SandstoneBridge card) {
public SandstoneBridge copy() {return new SandstoneBridge(this);
public class ScatterToTheWinds extends CardImpl {
public ScatterToTheWinds(UUID ownerId) {
public ScatterToTheWinds(final ScatterToTheWinds card) {
public ScatterToTheWinds copy() {return new ScatterToTheWinds(this);
public class ScourFromExistence extends CardImpl {
public ScourFromExistence(UUID ownerId) {
public ScourFromExistence(final ScourFromExistence card) {
public ScourFromExistence copy() {return new ScourFromExistence(this);
public class ScytheLeopard extends CardImpl {
public ScytheLeopard(UUID ownerId) {
public ScytheLeopard(final ScytheLeopard card) {
public ScytheLeopard copy() {return new ScytheLeopard(this);
public class SeekTheWilds extends CardImpl {
public SeekTheWilds(UUID ownerId) {
public SeekTheWilds(final SeekTheWilds card) {
public SeekTheWilds copy() {return new SeekTheWilds(this);
public class SereneSteward extends CardImpl {
public SereneSteward(UUID ownerId) {
public SereneSteward(final SereneSteward card) {
public SereneSteward copy() {return new SereneSteward(this);
public class SerpentineSpike extends CardImpl {
public SerpentineSpike(UUID ownerId) {
public SerpentineSpike(final SerpentineSpike card) {
public SerpentineSpike copy() {return new SerpentineSpike(this);
class SerpentineSpikeEffect extends OneShotEffect {
public SerpentineSpikeEffect() {
public SerpentineSpikeEffect(final SerpentineSpikeEffect effect) {
public SerpentineSpikeEffect copy() {return new SerpentineSpikeEffect(this);
public boolean apply(Game game, Ability source) {return true;return new ShadowGlider(this);
public class ShrineOfTheForsakenGods extends CardImpl {
public ShrineOfTheForsakenGods(UUID ownerId) {
public ShrineOfTheForsakenGods(final ShrineOfTheForsakenGods card) {
public ShrineOfTheForsakenGods copy() {return new ShrineOfTheForsakenGods(this);
public class SilentSkimmer extends CardImpl {
public SilentSkimmer(UUID ownerId) {
public SilentSkimmer(final SilentSkimmer card) {
public SilentSkimmer copy() {return new SilentSkimmer(this);
public class SireOfStagnation extends CardImpl {
public SireOfStagnation(UUID ownerId) {
public SireOfStagnation(final SireOfStagnation card) {
public SireOfStagnation copy() {return new SireOfStagnation(this);
public class Skitterskin extends CardImpl {
public Skitterskin(UUID ownerId) {
public Skitterskin(final Skitterskin card) {
public Skitterskin copy() {return new Skitterskin(this);
public class SkylineCascade extends CardImpl {
public SkylineCascade(UUID ownerId) {
public SkylineCascade(final SkylineCascade card) {
public SkylineCascade copy() {return new SkylineCascade(this);
public class SkyriderElf extends CardImpl {
public SkyriderElf(UUID ownerId) {
public SkyriderElf(final SkyriderElf card) {
public SkyriderElf copy() {return new SkyriderElf(this);
public class SlabHammer extends CardImpl {
public SlabHammer(UUID ownerId) {
public SlabHammer(final SlabHammer card) {
public SlabHammer copy() {return new SlabHammer(this);
public class SludgeCrawler extends CardImpl {
public SludgeCrawler(UUID ownerId) {
public SludgeCrawler(final SludgeCrawler card) {
public SludgeCrawler copy() {return new SludgeCrawler(this);
public class SmolderingMarsh extends CardImpl {
public SmolderingMarsh(UUID ownerId) {
public SmolderingMarsh(final SmolderingMarsh card) {
public SmolderingMarsh copy() {return new SmolderingMarsh(this);
public class SmotheringAbomination extends CardImpl {
public SmotheringAbomination(UUID ownerId) {
public SmotheringAbomination(final SmotheringAbomination card) {
public SmotheringAbomination copy() {return new SmotheringAbomination(this);
class SmotheringAbominationTriggeredAbility extends TriggeredAbilityImpl {
public SmotheringAbominationTriggeredAbility() {
public SmotheringAbominationTriggeredAbility(final SmotheringAbominationTriggeredAbility ability) {
public SmotheringAbominationTriggeredAbility copy() {return new SmotheringAbominationTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SACRIFICED_PERMANENT;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.getControllerId())
public String getRule() {return "Whenever you sacrifice a creature, " + super.getRule();
public class SnappingGnarlid extends CardImpl {
public SnappingGnarlid(UUID ownerId) {
public SnappingGnarlid(final SnappingGnarlid card) {
public SnappingGnarlid copy() {return new SnappingGnarlid(this);
public class SpawningBed extends CardImpl {
public SpawningBed(UUID ownerId) {
public SpawningBed(final SpawningBed card) {
public SpawningBed copy() {return new SpawningBed(this);
public class SpellShrivel extends CardImpl {
public SpellShrivel(UUID ownerId) {
public SpellShrivel(final SpellShrivel card) {
public SpellShrivel copy() {return new SpellShrivel(this);
class SpellShrivelCounterUnlessPaysEffect extends OneShotEffect {
public SpellShrivelCounterUnlessPaysEffect() {
public SpellShrivelCounterUnlessPaysEffect(final SpellShrivelCounterUnlessPaysEffect effect) {
public SpellShrivelCounterUnlessPaysEffect copy() {return new SpellShrivelCounterUnlessPaysEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return false;
public String getText(Mode mode) {return "Counter target spell unless its controller pays {4}. If that spell is countered this way, exile it instead of putting it into its owner's graveyard";
public class StasisSnare extends CardImpl {
public StasisSnare(UUID ownerId) {
public StasisSnare(final StasisSnare card) {
public StasisSnare copy() {return new StasisSnare(this);
class StasisSnareExileEffect extends OneShotEffect {
public StasisSnareExileEffect() {
public StasisSnareExileEffect(final StasisSnareExileEffect effect) {
public StasisSnareExileEffect copy() {return new StasisSnareExileEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), permanent.getIdName()).apply(game, source);return false;
public class Stonefury extends CardImpl {
public Stonefury(UUID ownerId) {
public Stonefury(final Stonefury card) {
public Stonefury copy() {return new Stonefury(this);
public class StoneHavenMedic extends CardImpl {
public StoneHavenMedic(UUID ownerId) {
public StoneHavenMedic(final StoneHavenMedic card) {
public StoneHavenMedic copy() {return new StoneHavenMedic(this);
public class SunkenHollow extends CardImpl {
public SunkenHollow(UUID ownerId) {
public SunkenHollow(final SunkenHollow card) {
public SunkenHollow copy() {return new SunkenHollow(this);
public class SureStrike extends CardImpl {
public SureStrike(UUID ownerId) {
public SureStrike(final SureStrike card) {
public SureStrike copy() {return new SureStrike(this);
public class TajuruBeastmaster extends CardImpl {
public TajuruBeastmaster(UUID ownerId) {
public TajuruBeastmaster(final TajuruBeastmaster card) {
public TajuruBeastmaster copy() {return new TajuruBeastmaster(this);
public class TajuruStalwart extends CardImpl {
public TajuruStalwart(UUID ownerId) {
public TajuruStalwart(final TajuruStalwart card) {
public TajuruStalwart copy() {return new TajuruStalwart(this);
public class TajuruWarcaller extends CardImpl {
public TajuruWarcaller(UUID ownerId) {
public TajuruWarcaller(final TajuruWarcaller card) {
public TajuruWarcaller copy() {return new TajuruWarcaller(this);
public class TandemTactics extends CardImpl {
public TandemTactics(UUID ownerId) {
public TandemTactics(final TandemTactics card) {
public TandemTactics copy() {return new TandemTactics(this);return new TideDrifter(this);
public class TighteningCoils extends CardImpl {
public TighteningCoils(UUID ownerId) {
public TighteningCoils(final TighteningCoils card) {
public TighteningCoils copy() {return new TighteningCoils(this);
public class TitansPresence extends CardImpl {
public TitansPresence(UUID ownerId) {
public TitansPresence(final TitansPresence card) {
public TitansPresence copy() {return new TitansPresence(this);
class TitansPresenceEffect extends OneShotEffect {
public TitansPresenceEffect() {
public TitansPresenceEffect(TitansPresenceEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public TitansPresenceEffect copy() {return new TitansPresenceEffect(this);
public class TouchOfTheVoid extends CardImpl {
public TouchOfTheVoid(UUID ownerId) {
public TouchOfTheVoid(final TouchOfTheVoid card) {
public TouchOfTheVoid copy() {return new TouchOfTheVoid(this);
public class TransgressTheMind extends CardImpl {
public TransgressTheMind(UUID ownerId) {
public TransgressTheMind(final TransgressTheMind card) {
public TransgressTheMind copy() {return new TransgressTheMind(this);
public class TunnelingGeopede extends CardImpl {
public TunnelingGeopede(UUID ownerId) {
public TunnelingGeopede(final TunnelingGeopede card) {
public TunnelingGeopede copy() {return new TunnelingGeopede(this);
public class TurnAgainst extends CardImpl {
public TurnAgainst(UUID ownerId) {
public TurnAgainst(final TurnAgainst card) {
public TurnAgainst copy() {return new TurnAgainst(this);
public class UginsInsight extends CardImpl {
public UginsInsight(UUID ownerId) {
public UginsInsight(final UginsInsight card) {
public UginsInsight copy() {return new UginsInsight(this);
class UginsInsightEffect extends OneShotEffect {
public UginsInsightEffect() {
public UginsInsightEffect(final UginsInsightEffect effect) {
public UginsInsightEffect copy() {return new UginsInsightEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class UlamogsDespoiler extends CardImpl {
public UlamogsDespoiler(UUID ownerId) {
public UlamogsDespoiler(final UlamogsDespoiler card) {
public UlamogsDespoiler copy() {return new UlamogsDespoiler(this);
class UlamogsDespoilerEffect extends OneShotEffect {
public UlamogsDespoilerEffect() {
public UlamogsDespoilerEffect(final UlamogsDespoilerEffect effect) {
public UlamogsDespoilerEffect copy() {return new UlamogsDespoilerEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.P1P1.createInstance(4)).apply(game, source);return true;return false;return new UlamogsNullifier(this);return new UlamogsNullifierEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class UlamogsReclaimer extends CardImpl {
public UlamogsReclaimer(UUID ownerId) {
public UlamogsReclaimer(final UlamogsReclaimer card) {
public UlamogsReclaimer copy() {return new UlamogsReclaimer(this);
public class UlamogTheCeaselessHunger extends CardImpl {
public UlamogTheCeaselessHunger(UUID ownerId) {
public UlamogTheCeaselessHunger(final UlamogTheCeaselessHunger card) {
public UlamogTheCeaselessHunger copy() {return new UlamogTheCeaselessHunger(this);
class UlamogExilePermanentsOnCastAbility extends TriggeredAbilityImpl {
UlamogExilePermanentsOnCastAbility() {
UlamogExilePermanentsOnCastAbility(UlamogExilePermanentsOnCastAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return this.getSourceId().equals(spell.getSourceId());
public UlamogExilePermanentsOnCastAbility copy() {return new UlamogExilePermanentsOnCastAbility(this);
public String getRule() {return "When you cast {this}, " + super.getRule();
class UlamogAttackTriggeredAbility extends TriggeredAbilityImpl {
public UlamogAttackTriggeredAbility(Effect effect) {
public UlamogAttackTriggeredAbility(final UlamogAttackTriggeredAbility ability) {
public UlamogAttackTriggeredAbility copy() {return new UlamogAttackTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return new StringBuilder("Whenever {this} attacks, ").append(super.getRule()).toString();
class UlamogExileLibraryEffect extends OneShotEffect {
public UlamogExileLibraryEffect() {
public UlamogExileLibraryEffect(final UlamogExileLibraryEffect effect) {
public UlamogExileLibraryEffect copy() {return new UlamogExileLibraryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class UndergrowthChampion extends CardImpl {
public UndergrowthChampion(UUID ownerId) {
public UndergrowthChampion(final UndergrowthChampion card) {
public UndergrowthChampion copy() {return new UndergrowthChampion(this);
class UndergrowthChampionPreventionEffect extends PreventionEffectImpl {
public UndergrowthChampionPreventionEffect() {
public UndergrowthChampionPreventionEffect(final UndergrowthChampionPreventionEffect effect) {
public UndergrowthChampionPreventionEffect copy() {return new UndergrowthChampionPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;return new UnifiedFront(this);
public class ValakutPredator extends CardImpl {
public ValakutPredator(UUID ownerId) {
public ValakutPredator(final ValakutPredator card) {
public ValakutPredator copy() {return new ValakutPredator(this);
public class VampiricRites extends CardImpl {
public VampiricRites(UUID ownerId) {
public VampiricRites(final VampiricRites card) {
public VampiricRites copy() {return new VampiricRites(this);
public class VestigeOfEmrakul extends CardImpl {
public VestigeOfEmrakul(UUID ownerId) {
public VestigeOfEmrakul(final VestigeOfEmrakul card) {
public VestigeOfEmrakul copy() {return new VestigeOfEmrakul(this);
public class VileAggregate extends CardImpl {
public VileAggregate(UUID ownerId) {
public VileAggregate(final VileAggregate card) {
public VileAggregate copy() {return new VileAggregate(this);
public class VoidAttendant extends CardImpl {
public VoidAttendant(UUID ownerId) {
public VoidAttendant(final VoidAttendant card) {
public VoidAttendant copy() {return new VoidAttendant(this);
public class VoidWinnower extends CardImpl {
public VoidWinnower(UUID ownerId) {
public VoidWinnower(final VoidWinnower card) {
public VoidWinnower copy() {return new VoidWinnower(this);
public VoidWinnowerCantCastEffect() {
public VoidWinnowerCantCastEffect(final VoidWinnowerCantCastEffect effect) {
public VoidWinnowerCantCastEffect copy() {return new VoidWinnowerCantCastEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast spells with even converted mana costs (" + mageObject.getIdName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.CAST_SPELL_LATE;
public boolean applies(GameEvent event, Ability source, Game game) {return (spell.getConvertedManaCost() & 1) == 0;return false;
class VoidWinnowerCantBlockEffect extends RestrictionEffect {
public VoidWinnowerCantBlockEffect() {
public VoidWinnowerCantBlockEffect(final VoidWinnowerCantBlockEffect effect) {
public VoidWinnowerCantBlockEffect copy() {return new VoidWinnowerCantBlockEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return (permanent.getManaCost().convertedManaCost() & 1) == 0;return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public class VolcanicUpheaval extends CardImpl {
public VolcanicUpheaval(UUID ownerId) {
public VolcanicUpheaval(final VolcanicUpheaval card) {
public VolcanicUpheaval copy() {return new VolcanicUpheaval(this);
public class VoraciousNull extends CardImpl {
public VoraciousNull(UUID ownerId) {
public VoraciousNull(final VoraciousNull card) {
public VoraciousNull copy() {return new VoraciousNull(this);
public class WastelandStrangler extends CardImpl {
public WastelandStrangler(UUID ownerId) {
public WastelandStrangler(final WastelandStrangler card) {
public WastelandStrangler copy() {return new WastelandStrangler(this);
public class WaveWingElemental extends CardImpl {
public WaveWingElemental(UUID ownerId) {
public WaveWingElemental(final WaveWingElemental card) {
public WaveWingElemental copy() {return new WaveWingElemental(this);
public class WindriderPatrol extends CardImpl {
public WindriderPatrol(UUID ownerId) {
public WindriderPatrol(final WindriderPatrol card) {
public WindriderPatrol copy() {return new WindriderPatrol(this);
public class WoodlandWanderer extends CardImpl {
public WoodlandWanderer(UUID ownerId) {
public WoodlandWanderer(final WoodlandWanderer card) {
public WoodlandWanderer copy() {return new WoodlandWanderer(this);
public class ZadaHedronGrinder extends CardImpl {
public ZadaHedronGrinder(UUID ownerId) {
public ZadaHedronGrinder(final ZadaHedronGrinder card) {
public ZadaHedronGrinder copy() {return new ZadaHedronGrinder(this);
class ZadaHedronGrinderTriggeredAbility extends TriggeredAbilityImpl {
ZadaHedronGrinderTriggeredAbility() {
ZadaHedronGrinderTriggeredAbility(final ZadaHedronGrinderTriggeredAbility ability) {
public ZadaHedronGrinderTriggeredAbility copy() {return new ZadaHedronGrinderTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;return false;
private boolean isControlledInstantOrSorcery(Spell spell) {return spell != null
public String getRule() {return "Whenever you cast an instant or sorcery spell that targets only {this}, copy that spell for each other creature you control that the spell could target. Each copy targets a different one of those creatures.";
class ZadaHedronGrinderEffect extends OneShotEffect {
public ZadaHedronGrinderEffect() {
public ZadaHedronGrinderEffect(final ZadaHedronGrinderEffect effect) {
public ZadaHedronGrinderEffect copy() {return new ZadaHedronGrinderEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class ZulaportCutthroat extends CardImpl {
public ZulaportCutthroat(UUID ownerId) {
public ZulaportCutthroat(final ZulaportCutthroat card) {
public ZulaportCutthroat copy() {return new ZulaportCutthroat(this);
public class AkkiBlizzardHerder extends CardImpl {
public AkkiBlizzardHerder(UUID ownerId) {
public AkkiBlizzardHerder(final AkkiBlizzardHerder card) {
public AkkiBlizzardHerder copy() {return new AkkiBlizzardHerder(this);
public class AkkiRaider extends CardImpl {
public AkkiRaider(UUID ownerId) {
public AkkiRaider(final AkkiRaider card) {
public AkkiRaider copy() {return new AkkiRaider(this);
public class AshenMonstrosity extends CardImpl {
public AshenMonstrosity(UUID ownerId) {
public AshenMonstrosity(final AshenMonstrosity card) {
public AshenMonstrosity copy() {return new AshenMonstrosity(this);
public class AuraBarbs extends CardImpl {
public AuraBarbs(UUID ownerId) {
public AuraBarbs(final AuraBarbs card) {
public AuraBarbs copy() {return new AuraBarbs(this);
private class AuraBarbsEffect extends OneShotEffect {
public AuraBarbsEffect() {
public AuraBarbsEffect(final AuraBarbsEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public AuraBarbsEffect copy() {return new AuraBarbsEffect(this);
public class BlademaneBaku extends CardImpl {
public BlademaneBaku(UUID ownerId) {
public BlademaneBaku(final BlademaneBaku card) {
public BlademaneBaku copy() {return new BlademaneBaku(this);
class BlademaneBakuBoostEffect extends OneShotEffect {
public BlademaneBakuBoostEffect() {
public BlademaneBakuBoostEffect(BlademaneBakuBoostEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BlademaneBakuBoostEffect copy() {return new BlademaneBakuBoostEffect(this);
public class BlazingShoal extends CardImpl {
public BlazingShoal(UUID ownerId) {
public class BlessingOfLeeches extends CardImpl {
public BlessingOfLeeches(UUID ownerId) {
public BlessingOfLeeches(final BlessingOfLeeches card) {
public BlessingOfLeeches copy() {return new BlessingOfLeeches(this);
public class BlindingPowder extends CardImpl {
public BlindingPowder(UUID ownerId) {
public BlindingPowder(final BlindingPowder card) {
public BlindingPowder copy() {return new BlindingPowder(this);
class BlindingPowderUnattachCost extends CostImpl {
public BlindingPowderUnattachCost(String name, UUID sourceId) {
public BlindingPowderUnattachCost(final BlindingPowderUnattachCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;return false;
public BlindingPowderUnattachCost copy() {return new BlindingPowderUnattachCost(this);
public class BodyOfJukai extends CardImpl {
public BodyOfJukai(UUID ownerId) {
public BodyOfJukai(final BodyOfJukai card) {
public BodyOfJukai copy() {return new BodyOfJukai(this);return new BudokaPupil(this);
class IchigaWhoTopplesOaks extends Token {
IchigaWhoTopplesOaks() {
public class CallForBlood extends CardImpl {
public CallForBlood(UUID ownerId) {
public CallForBlood(final CallForBlood card) {
public CallForBlood copy() {return new CallForBlood(this);
class CallForBloodDynamicValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return -1 * p.getPower().getValue();return 0;
public CallForBloodDynamicValue copy() {return this;
public String getMessage() {return ", where X is the sacrificed creature's power";
public String toString() {return "-X";
public class CallowJushi extends CardImpl {
public CallowJushi(UUID ownerId) {
public CallowJushi(final CallowJushi card) {
public CallowJushi copy() {return new CallowJushi(this);
class JarakuTheInterloper extends Token {
JarakuTheInterloper() {
public class ChildOfThorns extends CardImpl {
public ChildOfThorns(UUID ownerId) {
public ChildOfThorns(final ChildOfThorns card) {
public ChildOfThorns copy() {return new ChildOfThorns(this);
public class ChiseiHeartOfOceans extends CardImpl {
public ChiseiHeartOfOceans(UUID ownerId) {
public ChiseiHeartOfOceans(final ChiseiHeartOfOceans card) {
public ChiseiHeartOfOceans copy() {return new ChiseiHeartOfOceans(this);
public class ClashOfRealities extends CardImpl {
public ClashOfRealities(UUID ownerId) {
public ClashOfRealities(final ClashOfRealities card) {
public ClashOfRealities copy() {return new ClashOfRealities(this);
private class ClashOfRealitiesTriggeredAbility extends ZoneChangeTriggeredAbility {
public ClashOfRealitiesTriggeredAbility(Effect effect, String rule) {
public ClashOfRealitiesTriggeredAbility(ClashOfRealitiesTriggeredAbility ability) {
public ClashOfRealitiesTriggeredAbility copy() {return new ClashOfRealitiesTriggeredAbility(this);
public class CrackTheEarth extends CardImpl {
public CrackTheEarth(UUID ownerId) {
public CrackTheEarth(final CrackTheEarth card) {
public CrackTheEarth copy() {return new CrackTheEarth(this);
public class CrawlingFilth extends CardImpl {
public CrawlingFilth(UUID ownerId) {
public CrawlingFilth(final CrawlingFilth card) {
public CrawlingFilth copy() {return new CrawlingFilth(this);
public class CunningBandit extends CardImpl {
public CunningBandit(UUID ownerId) {
public CunningBandit(final CunningBandit card) {
public CunningBandit copy() {return new CunningBandit(this);
class AzamukiTreacheryIncarnate extends Token {
AzamukiTreacheryIncarnate() {
public class DayOfDestiny extends CardImpl {
public DayOfDestiny(UUID ownerId) {
public DayOfDestiny(final DayOfDestiny card) {
public DayOfDestiny copy() {return new DayOfDestiny(this);
public class DisruptingShoal extends CardImpl {
public DisruptingShoal(UUID ownerId) {
public class EmptyShrineKannushi extends CardImpl {
public EmptyShrineKannushi(UUID ownerId) {
public EmptyShrineKannushi(final EmptyShrineKannushi card) {
public EmptyShrineKannushi copy() {return new EmptyShrineKannushi(this);
class EmptyShrineKannushiProtectionAbility extends ProtectionAbility {
public EmptyShrineKannushiProtectionAbility() {
public EmptyShrineKannushiProtectionAbility(final EmptyShrineKannushiProtectionAbility ability) {
public EmptyShrineKannushiProtectionAbility copy() {return new EmptyShrineKannushiProtectionAbility(this);
public boolean canTarget(MageObject source, Game game) {return super.canTarget(source, game);
public String getRule() {return "Empty-Shrine Kannushi has protection from the colors of permanents you control.";
public class EnshrinedMemories extends CardImpl {
public EnshrinedMemories(UUID ownerId) {
public EnshrinedMemories(final EnshrinedMemories card) {
public EnshrinedMemories copy() {return new EnshrinedMemories(this);
public class FinalJudgment extends CardImpl {
public FinalJudgment(UUID ownerId) {
public FinalJudgment(final FinalJudgment card) {
public FinalJudgment copy() {return new FinalJudgment(this);
class FinalJudgmentEffect extends OneShotEffect {
public FinalJudgmentEffect() {
public FinalJudgmentEffect(final FinalJudgmentEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public FinalJudgmentEffect copy() {return new FinalJudgmentEffect(this);
public class FirstVolley extends CardImpl {
public FirstVolley(UUID ownerId) {
public FirstVolley(final FirstVolley card) {
public FirstVolley copy() {return new FirstVolley(this);
public class FlamesOfTheBloodHand extends CardImpl {
public FlamesOfTheBloodHand(UUID ownerId) {
public FlamesOfTheBloodHand(final FlamesOfTheBloodHand card) {
public FlamesOfTheBloodHand copy() {return new FlamesOfTheBloodHand(this);
class FlamesOfTheBloodHandReplacementEffect extends ReplacementEffectImpl {
public FlamesOfTheBloodHandReplacementEffect() {
public FlamesOfTheBloodHandReplacementEffect(final FlamesOfTheBloodHandReplacementEffect effect) {
public FlamesOfTheBloodHandReplacementEffect copy() {return new FlamesOfTheBloodHandReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.GAIN_LIFE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(getTargetPointer().getFirst(game, source));
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public class Floodbringer extends CardImpl {private static final FilterControlledPermanent filter = new FilterControlledLandPermanent("a land you control (return to hand)");
public Floodbringer(UUID ownerId) {
public Floodbringer(final Floodbringer card) {
public Floodbringer copy() {return new Floodbringer(this);
public class ForkedBranchGarami extends CardImpl {
public ForkedBranchGarami(UUID ownerId) {
public ForkedBranchGarami(final ForkedBranchGarami card) {
public ForkedBranchGarami copy() {return new ForkedBranchGarami(this);
public class Frostling extends CardImpl {
public Frostling(UUID ownerId) {
public Frostling(final Frostling card) {
public Frostling copy() {return new Frostling(this);
public class FrostOgre extends CardImpl {
public FrostOgre(UUID ownerId) {
public FrostOgre(final FrostOgre card) {
public FrostOgre copy() {return new FrostOgre(this);
public class FumikoTheLowblood extends CardImpl {
public FumikoTheLowblood(UUID ownerId) {
public FumikoTheLowblood(final FumikoTheLowblood card) {
public FumikoTheLowblood copy() {return new FumikoTheLowblood(this);
public class GenjuOfTheCedars extends CardImpl {
public GenjuOfTheCedars(UUID ownerId) {effect.setText("you may return {this} from your graveyard to your hand");
public GenjuOfTheCedars(final GenjuOfTheCedars card) {
public GenjuOfTheCedars copy() {return new GenjuOfTheCedars(this);
private class SpiritToken extends Token {
SpiritToken() {
public class GenjuOfTheFalls extends CardImpl {
public GenjuOfTheFalls(UUID ownerId) {
public GenjuOfTheFalls(final GenjuOfTheFalls card) {
public GenjuOfTheFalls copy() {return new GenjuOfTheFalls(this);
private class SpiritToken extends Token {
SpiritToken() {
public class GenjuOfTheFens extends CardImpl {
public GenjuOfTheFens(UUID ownerId) {
public GenjuOfTheFens(final GenjuOfTheFens card) {
public GenjuOfTheFens copy() {return new GenjuOfTheFens(this);
private class SpiritToken extends Token {
SpiritToken() {
public class GenjuOfTheFields extends CardImpl {
public GenjuOfTheFields(UUID ownerId) {
public GenjuOfTheFields(final GenjuOfTheFields card) {
public GenjuOfTheFields copy() {return new GenjuOfTheFields(this);
private class SpiritToken extends Token {
SpiritToken() {
public class GenjuOfTheRealm extends CardImpl {
public GenjuOfTheRealm(UUID ownerId) {
public GenjuOfTheRealm(final GenjuOfTheRealm card) {
public GenjuOfTheRealm copy() {return new GenjuOfTheRealm(this);
private class SpiritToken extends Token {
SpiritToken() {
public class GenjuOfTheSpires extends CardImpl {
public GenjuOfTheSpires(UUID ownerId) {
public GenjuOfTheSpires(final GenjuOfTheSpires card) {
public GenjuOfTheSpires copy() {return new GenjuOfTheSpires(this);
private class SpiritToken extends Token {
SpiritToken() {
public class GnarledMass extends CardImpl {
public GnarledMass(UUID ownerId) {
public GnarledMass(final GnarledMass card) {
public GnarledMass copy() {return new GnarledMass(this);
public class GoblinCohort extends CardImpl {
public GoblinCohort(UUID ownerId) {
public GoblinCohort(final GoblinCohort card) {
public GoblinCohort copy() {return new GoblinCohort(this);
class GoblinCohortEffect extends RestrictionEffect {
public GoblinCohortEffect() {
public GoblinCohortEffect(final GoblinCohortEffect effect) {
public GoblinCohortEffect copy() {return new GoblinCohortEffect(this);
public boolean canAttack(Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public class GodsEyeGateToTheReikai extends CardImpl {
public GodsEyeGateToTheReikai(UUID ownerId) {
public GodsEyeGateToTheReikai(final GodsEyeGateToTheReikai card) {
public GodsEyeGateToTheReikai copy() {return new GodsEyeGateToTheReikai(this);
public class GoryosVengeance extends CardImpl {
public GoryosVengeance(UUID ownerId) {
public GoryosVengeance(final GoryosVengeance card) {
public GoryosVengeance copy() {return new GoryosVengeance(this);
class GoryosVengeanceEffect extends OneShotEffect {
public GoryosVengeanceEffect() {
public GoryosVengeanceEffect(final GoryosVengeanceEffect effect) {
public GoryosVengeanceEffect copy() {return new GoryosVengeanceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HeartOfLight extends CardImpl {
public HeartOfLight(UUID ownerId) {
public HeartOfLight(final HeartOfLight card) {
public HeartOfLight copy() {return new HeartOfLight(this);
class HeartOfLightEffect extends PreventionEffectImpl {
public HeartOfLightEffect() {
public HeartOfLightEffect(final HeartOfLightEffect effect) {
public HeartOfLightEffect copy() {return new HeartOfLightEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class HeedTheMists extends CardImpl {
public HeedTheMists(UUID ownerId) {
public HeedTheMists(final HeedTheMists card) {
public HeedTheMists copy() {return new HeedTheMists(this);
private class HeedTheMistsEffect extends OneShotEffect {
public HeedTheMistsEffect() {
public HeedTheMistsEffect(HeedTheMistsEffect effect) {
public boolean apply(Game game, Ability source) {return result;
public HeedTheMistsEffect copy() {return new HeedTheMistsEffect(this);
public class HerosDemise extends CardImpl {
public HerosDemise(UUID ownerId) {
public HerosDemise(final HerosDemise card) {
public HerosDemise copy() {return new HerosDemise(this);
public class HigureTheStillWind extends CardImpl {
public HigureTheStillWind(UUID ownerId) {
public HigureTheStillWind(final HigureTheStillWind card) {
public HigureTheStillWind copy() {return new HigureTheStillWind(this);
public class HiredMuscle extends CardImpl {
public HiredMuscle(UUID ownerId) {
public HiredMuscle(final HiredMuscle card) {
public HiredMuscle copy() {return new HiredMuscle(this);
class Scarmaker extends Token {
Scarmaker() {
public class HokoriDustDrinker extends CardImpl {
public HokoriDustDrinker(UUID ownerId) {
public HokoriDustDrinker(final HokoriDustDrinker card) {
public HokoriDustDrinker copy() {return new HokoriDustDrinker(this);
class HokoriDustDrinkerUntapEffect extends OneShotEffect {
public HokoriDustDrinkerUntapEffect() {
public HokoriDustDrinkerUntapEffect(final HokoriDustDrinkerUntapEffect effect) {
public HokoriDustDrinkerUntapEffect copy() {return new HokoriDustDrinkerUntapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HorobisWhisper extends CardImpl {
public HorobisWhisper(UUID ownerId) {
public HorobisWhisper(final HorobisWhisper card) {
public HorobisWhisper copy() {return new HorobisWhisper(this);
public class HundredTalonStrike extends CardImpl {
public HundredTalonStrike(UUID ownerId) {
public HundredTalonStrike(final HundredTalonStrike card) {
public HundredTalonStrike copy() {return new HundredTalonStrike(this);
public class IndebtedSamurai extends CardImpl {
public IndebtedSamurai(UUID ownerId) {
public IndebtedSamurai(final IndebtedSamurai card) {
public IndebtedSamurai copy() {return new IndebtedSamurai(this);
public class InkEyesServantOfOni extends CardImpl {
public InkEyesServantOfOni(UUID ownerId) {
public InkEyesServantOfOni(final InkEyesServantOfOni card) {
public InkEyesServantOfOni copy() {return new InkEyesServantOfOni(this);
class InkEyesServantOfOniEffect extends OneShotEffect {
public InkEyesServantOfOniEffect() {
public InkEyesServantOfOniEffect(final InkEyesServantOfOniEffect effect) {
public InkEyesServantOfOniEffect copy() {return new InkEyesServantOfOniEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class InTheWebOfWar extends CardImpl {
public InTheWebOfWar(UUID ownerId) {
public InTheWebOfWar(final InTheWebOfWar card) {
public InTheWebOfWar copy() {return new InTheWebOfWar(this);
public class IreOfKaminari extends CardImpl {
public IreOfKaminari(UUID ownerId) {
public IreOfKaminari(final IreOfKaminari card) {
public IreOfKaminari copy() {return new IreOfKaminari(this);
public class IsaoEnlightenedBushi extends CardImpl {
public IsaoEnlightenedBushi(UUID ownerId) {
public IsaoEnlightenedBushi(final IsaoEnlightenedBushi card) {
public IsaoEnlightenedBushi copy() {return new IsaoEnlightenedBushi(this);
public class IshiIshiAkkiCrackshot extends CardImpl {
public IshiIshiAkkiCrackshot(UUID ownerId) {
public IshiIshiAkkiCrackshot(final IshiIshiAkkiCrackshot card) {
public IshiIshiAkkiCrackshot copy() {return new IshiIshiAkkiCrackshot(this);
public class IwamoriOfTheOpenFist extends CardImpl {
public IwamoriOfTheOpenFist(UUID ownerId) {
public IwamoriOfTheOpenFist(final IwamoriOfTheOpenFist card) {
public IwamoriOfTheOpenFist copy() {return new IwamoriOfTheOpenFist(this);
class IwamoriOfTheOpenFistEffect extends OneShotEffect {
public IwamoriOfTheOpenFistEffect() {
public IwamoriOfTheOpenFistEffect(final IwamoriOfTheOpenFistEffect effect) {
public IwamoriOfTheOpenFistEffect copy() {return new IwamoriOfTheOpenFistEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JettingGlasskite extends CardImpl {
public JettingGlasskite(UUID ownerId) {
public JettingGlasskite(final JettingGlasskite card) {
public JettingGlasskite copy() {return new JettingGlasskite(this);
class JettingGlasskiteAbility extends TriggeredAbilityImpl {
public JettingGlasskiteAbility() {
public JettingGlasskiteAbility(final JettingGlasskiteAbility ability) {
public JettingGlasskiteAbility copy() {return new JettingGlasskiteAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} becomes the target of a spell or ability for the first time in a turn, counter that spell or ability.";
public class KaijinOfTheVanishingTouch extends CardImpl {
public KaijinOfTheVanishingTouch(UUID ownerId) {effect.setText("return that creature to its owner's hand at end of combat");
public KaijinOfTheVanishingTouch(final KaijinOfTheVanishingTouch card) {
public KaijinOfTheVanishingTouch copy() {return new KaijinOfTheVanishingTouch(this);
public class KamiOfFalseHope extends CardImpl {
public KamiOfFalseHope(UUID ownerId) {
public KamiOfFalseHope(final KamiOfFalseHope card) {
public KamiOfFalseHope copy() {return new KamiOfFalseHope(this);
public class KentaroTheSmilingCat extends CardImpl {
public KentaroTheSmilingCat(UUID ownerId) {
public KentaroTheSmilingCat(final KentaroTheSmilingCat card) {
public KentaroTheSmilingCat copy() {return new KentaroTheSmilingCat(this);
class KentaroTheSmilingCatCastingEffect extends ContinuousEffectImpl {
public KentaroTheSmilingCatCastingEffect() {
public KentaroTheSmilingCatCastingEffect(final KentaroTheSmilingCatCastingEffect effect) {
public KentaroTheSmilingCatCastingEffect copy() {return new KentaroTheSmilingCatCastingEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
class ColorlessConvertedManaCost implements DynamicCost {
public Cost getCost(Ability ability, Game game) {return new GenericManaCost(ability.getManaCosts().convertedManaCost());
public String getText(Ability ability, Game game) {return "Pay " + getCost(ability, game).getText() + " rather than " + ability.getManaCosts().getText() + " for Samurai card?";
public class KiraGreatGlassSpinner extends CardImpl {
public KiraGreatGlassSpinner(UUID ownerId) {
public KiraGreatGlassSpinner(final KiraGreatGlassSpinner card) {
public KiraGreatGlassSpinner copy() {return new KiraGreatGlassSpinner(this);
class KiraGreatGlassSpinnerAbility extends TriggeredAbilityImpl {
public KiraGreatGlassSpinnerAbility(Effect effect) {
public KiraGreatGlassSpinnerAbility(final KiraGreatGlassSpinnerAbility ability) {
public KiraGreatGlassSpinnerAbility copy() {return new KiraGreatGlassSpinnerAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever this creature becomes the target of a spell or ability for the first time in a turn, counter that spell or ability.";
class CreatureWasTargetedThisTurnWatcher extends Watcher {
public CreatureWasTargetedThisTurnWatcher() {
public CreatureWasTargetedThisTurnWatcher(final CreatureWasTargetedThisTurnWatcher watcher) {
public void watch(GameEvent event, Game game) {
public boolean notMoreThanOnceTargetedThisTurn(Permanent creature, Game game) {return creaturesTargeted.get(new MageObjectReference(creature, game)) < 2;return true;
public void reset() {
public CreatureWasTargetedThisTurnWatcher copy() {return new CreatureWasTargetedThisTurnWatcher(this);
public class KitsunePalliator extends CardImpl {
public KitsunePalliator(UUID ownerId) {
public KitsunePalliator(final KitsunePalliator card) {
public KitsunePalliator copy() {return new KitsunePalliator(this);
class KitsunePalliatorEffect extends OneShotEffect {
public KitsunePalliatorEffect() {
public KitsunePalliatorEffect(final KitsunePalliatorEffect effect) {
public KitsunePalliatorEffect copy() {return new KitsunePalliatorEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class KodamaOfTheCenterTree extends CardImpl {
public KodamaOfTheCenterTree(UUID ownerId) {
public KodamaOfTheCenterTree(final KodamaOfTheCenterTree card) {
public KodamaOfTheCenterTree copy() {return new KodamaOfTheCenterTree(this);
public class KumanosBlessing extends CardImpl {
public KumanosBlessing(UUID ownerId) {
public KumanosBlessing(final KumanosBlessing card) {
public KumanosBlessing copy() {return new KumanosBlessing(this);
class KumanosBlessingEffect extends ReplacementEffectImpl {
public KumanosBlessingEffect() {
public KumanosBlessingEffect(final KumanosBlessingEffect effect) {
public KumanosBlessingEffect copy() {return new KumanosBlessingEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCardToExileWithInfo(permanent, null, null, source.getSourceId(), game, Zone.BATTLEFIELD, true);return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return watcher.wasDamaged(zce.getTarget(), game);return false;
class DamagedByEnchantedWatcher extends Watcher {
public DamagedByEnchantedWatcher() {
public DamagedByEnchantedWatcher(final DamagedByEnchantedWatcher watcher) {
public DamagedByEnchantedWatcher copy() {return new DamagedByEnchantedWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
public boolean wasDamaged(Permanent permanent, Game game) {return damagedCreatures.contains(new MageObjectReference(permanent, game));
public class KyokiSanitysEclipse extends CardImpl {
public KyokiSanitysEclipse(UUID ownerId) {
public KyokiSanitysEclipse(final KyokiSanitysEclipse card) {
public KyokiSanitysEclipse copy() {return new KyokiSanitysEclipse(this);return new Lifegift(this);return new Lifespinner(this);
public class LoamDweller extends CardImpl {
public LoamDweller(UUID ownerId) {
public LoamDweller(final LoamDweller card) {
public LoamDweller copy() {return new LoamDweller(this);
public class MannichiTheFeveredDream extends CardImpl {
public MannichiTheFeveredDream(UUID ownerId) {
public MannichiTheFeveredDream(final MannichiTheFeveredDream card) {
public MannichiTheFeveredDream copy() {return new MannichiTheFeveredDream(this);
public class MarkOfSakiko extends CardImpl {
public MarkOfSakiko(UUID ownerId) {
public MarkOfSakiko(final MarkOfSakiko card) {
public MarkOfSakiko copy() {return new MarkOfSakiko(this);
class MarkOfSakikoTriggeredAbility extends TriggeredAbilityImpl {
public MarkOfSakikoTriggeredAbility() {
public MarkOfSakikoTriggeredAbility(final MarkOfSakikoTriggeredAbility ability) {
public MarkOfSakikoTriggeredAbility copy() {return new MarkOfSakikoTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever this creature deals combat damage to a player, add that much {G} to your mana pool. Until end of turn, this mana doesn't empty from your mana pool as steps and phases end.";
public class MarkOfTheOni extends CardImpl {
public MarkOfTheOni(UUID ownerId) {
public MarkOfTheOni(final MarkOfTheOni card) {
public MarkOfTheOni copy() {return new MarkOfTheOni(this);
public class MatsuTribeSniper extends CardImpl {
public MatsuTribeSniper(UUID ownerId) {
public MatsuTribeSniper(final MatsuTribeSniper card) {
public MatsuTribeSniper copy() {return new MatsuTribeSniper(this);
public class MendingHands extends CardImpl {
public MendingHands(UUID ownerId) {
public MendingHands(final MendingHands card) {
public MendingHands copy() {return new MendingHands(this);
public class MinamoSightbender extends CardImpl {
public MinamoSightbender(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public MinamoSightbender(final MinamoSightbender card) {
public MinamoSightbender copy() {return new MinamoSightbender(this);
public class MinamosMeddling extends CardImpl {
public MinamosMeddling(UUID ownerId) {
public MinamosMeddling(final MinamosMeddling card) {
public MinamosMeddling copy() {return new MinamosMeddling(this);
class MinamosMeddlingCounterTargetEffect extends OneShotEffect {
public MinamosMeddlingCounterTargetEffect() {
public MinamosMeddlingCounterTargetEffect(final MinamosMeddlingCounterTargetEffect effect) {
public MinamosMeddlingCounterTargetEffect copy() {return new MinamosMeddlingCounterTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MirrorGallery extends CardImpl {
public MirrorGallery(UUID ownerId) {
public MirrorGallery(final MirrorGallery card) {
public MirrorGallery copy() {return new MirrorGallery(this);
class MirrorGalleryRuleEffect extends ContinuousEffectImpl {
public MirrorGalleryRuleEffect() {
public MirrorGalleryRuleEffect(final MirrorGalleryRuleEffect effect) {
public MirrorGalleryRuleEffect copy() {return new MirrorGalleryRuleEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class MistbladeShinobi extends CardImpl {
public MistbladeShinobi(UUID ownerId) {
public MistbladeShinobi(final MistbladeShinobi card) {
public MistbladeShinobi copy() {return new MistbladeShinobi(this);
class MistbladeShinobiTriggeredAbility extends TriggeredAbilityImpl {
MistbladeShinobiTriggeredAbility() {
MistbladeShinobiTriggeredAbility(final MistbladeShinobiTriggeredAbility ability) {
public MistbladeShinobiTriggeredAbility copy() {return new MistbladeShinobiTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, you may return target creature that player controls to its owner's hand.";return new NezumiShadowWatcher(this);
public class NinjaOfTheDeepHours extends CardImpl {
public NinjaOfTheDeepHours(UUID ownerId) {
public NinjaOfTheDeepHours(final NinjaOfTheDeepHours card) {
public NinjaOfTheDeepHours copy() {return new NinjaOfTheDeepHours(this);
public class NourishingShoal extends CardImpl {
public NourishingShoal(UUID ownerId) {
public class OgreMarauder extends CardImpl {
public OgreMarauder(UUID ownerId) {
public OgreMarauder(final OgreMarauder card) {
public OgreMarauder copy() {return new OgreMarauder(this);
class OgreMarauderEffect extends OneShotEffect {
public OgreMarauderEffect() {
public OgreMarauderEffect(final OgreMarauderEffect effect) {
public OgreMarauderEffect copy() {return new OgreMarauderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OgreRecluse extends CardImpl {
public OgreRecluse(UUID ownerId) {
public OgreRecluse(final OgreRecluse card) {
public OgreRecluse copy() {return new OgreRecluse(this);
public class OkibaGangShinobi extends CardImpl {
public OkibaGangShinobi(UUID ownerId) {
public OkibaGangShinobi(final OkibaGangShinobi card) {
public OkibaGangShinobi copy() {return new OkibaGangShinobi(this);
public class OpalEyeKondasYojimbo extends CardImpl {
public OpalEyeKondasYojimbo(UUID ownerId) {
public OpalEyeKondasYojimbo(final OpalEyeKondasYojimbo card) {
public OpalEyeKondasYojimbo copy() {return new OpalEyeKondasYojimbo(this);
class OpalEyeKondasYojimboRedirectionEffect extends ReplacementEffectImpl {
OpalEyeKondasYojimboRedirectionEffect() {
OpalEyeKondasYojimboRedirectionEffect(final OpalEyeKondasYojimboRedirectionEffect effect) {
public void init(Ability source, Game game) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_CREATURE ) ||
public boolean applies(GameEvent event, Ability source, Game game) {return false;return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public OpalEyeKondasYojimboRedirectionEffect copy() {return new OpalEyeKondasYojimboRedirectionEffect(this);
public class OrbOfDreams extends CardImpl {
public OrbOfDreams(UUID ownerId) {
public OrbOfDreams(final OrbOfDreams card) {
public OrbOfDreams copy() {return new OrbOfDreams(this);
private class OrbOfDreamsEffect extends ReplacementEffectImpl {
OrbOfDreamsEffect() {
OrbOfDreamsEffect(final OrbOfDreamsEffect effect) {
public OrbOfDreamsEffect copy() {return new OrbOfDreamsEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class OrnateKanzashi extends CardImpl {
public OrnateKanzashi(UUID ownerId) {
public OrnateKanzashi(final OrnateKanzashi card) {
public OrnateKanzashi copy() {return new OrnateKanzashi(this);
class OrnateKanzashiEffect extends OneShotEffect {
public OrnateKanzashiEffect() {
public OrnateKanzashiEffect(final OrnateKanzashiEffect effect) {
public OrnateKanzashiEffect copy() {return new OrnateKanzashiEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class OrnateKanzashiCastFromExileEffect extends AsThoughEffectImpl {
public OrnateKanzashiCastFromExileEffect() {
public OrnateKanzashiCastFromExileEffect(final OrnateKanzashiCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public OrnateKanzashiCastFromExileEffect copy() {return new OrnateKanzashiCastFromExileEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return source.getControllerId().equals(affectedControllerId)
public class Overblaze extends CardImpl {
public Overblaze(UUID ownerId) {
public Overblaze(final Overblaze card) {
public Overblaze copy() {return new Overblaze(this);
class FireServantEffect extends ReplacementEffectImpl {
public FireServantEffect() {
public FireServantEffect(final FireServantEffect effect) {
public FireServantEffect copy() {return new FireServantEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_CREATURE) ||
public boolean applies(GameEvent event, Ability source, Game game) {return event.getSourceId().equals(this.getTargetPointer().getFirst(game, source));
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class OyobiWhoSplitTheHeavens extends CardImpl {
public OyobiWhoSplitTheHeavens(UUID ownerId) {
public OyobiWhoSplitTheHeavens(final OyobiWhoSplitTheHeavens card) {
public OyobiWhoSplitTheHeavens copy() {return new OyobiWhoSplitTheHeavens(this);
class AnotherSpiritToken extends Token {
AnotherSpiritToken() {
public class PatronOfTheAkki extends CardImpl {
public PatronOfTheAkki(UUID ownerId) {
public PatronOfTheAkki(final PatronOfTheAkki card) {
public PatronOfTheAkki copy() {return new PatronOfTheAkki(this);
public class PatronOfTheKitsune extends CardImpl {
public PatronOfTheKitsune(UUID ownerId) {
public PatronOfTheKitsune(final PatronOfTheKitsune card) {
public PatronOfTheKitsune copy() {return new PatronOfTheKitsune(this);
public class PatronOfTheMoon extends CardImpl {
public PatronOfTheMoon(UUID ownerId) {
public PatronOfTheMoon(final PatronOfTheMoon card) {
public PatronOfTheMoon copy() {return new PatronOfTheMoon(this);
class PatronOfTheMoonEffect extends OneShotEffect {
PatronOfTheMoonEffect() {
PatronOfTheMoonEffect(final PatronOfTheMoonEffect effect) {
public boolean apply(Game game, Ability source) {return controller.moveCards(new CardsImpl(target.getTargets()).getCards(game),return false;
public PatronOfTheMoonEffect copy() {return new PatronOfTheMoonEffect(this);
public class PatronOfTheNezumi extends CardImpl {
public PatronOfTheNezumi(UUID ownerId) {
public PatronOfTheNezumi(final PatronOfTheNezumi card) {
public PatronOfTheNezumi copy() {return new PatronOfTheNezumi(this);
class PatronOfTheNezumiTriggeredAbility extends TriggeredAbilityImpl {
public PatronOfTheNezumiTriggeredAbility(Effect effect) {
public PatronOfTheNezumiTriggeredAbility(final PatronOfTheNezumiTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a permanent is put into an opponent's graveyard, that player loses 1 life.";
public PatronOfTheNezumiTriggeredAbility copy() {return new PatronOfTheNezumiTriggeredAbility(this);
public class PatronOfTheOrochi extends CardImpl {
public PatronOfTheOrochi(UUID ownerId) {
public PatronOfTheOrochi(final PatronOfTheOrochi card) {
public PatronOfTheOrochi copy() {return new PatronOfTheOrochi(this);
class PatronOfTheOrochiEffect extends OneShotEffect {
public PatronOfTheOrochiEffect() {
public PatronOfTheOrochiEffect(final PatronOfTheOrochiEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PatronOfTheOrochiEffect copy() {return new PatronOfTheOrochiEffect(this);
public class PetalmaneBaku extends CardImpl {
public PetalmaneBaku(UUID ownerId) {
public PetalmaneBaku(final PetalmaneBaku card) {
public PetalmaneBaku copy() {return new PetalmaneBaku(this);
private class PetalmaneBakuManaAbility extends BasicManaAbility {
PetalmaneBakuManaAbility() {
PetalmaneBakuManaAbility(final PetalmaneBakuManaAbility ability) {
public PetalmaneBakuManaAbility copy() {return new PetalmaneBakuManaAbility(this);
private class PetalmaneBakuManaEffect extends ManaEffect {
PetalmaneBakuManaEffect() {
PetalmaneBakuManaEffect(final PetalmaneBakuManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return true;return true;return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public PetalmaneBakuManaEffect copy() {return new PetalmaneBakuManaEffect(this);
public class PhantomWings extends CardImpl {
public PhantomWings(UUID ownerId) {
public PhantomWings(final PhantomWings card) {
public PhantomWings copy() {return new PhantomWings(this);
private class PhantomWingsReturnEffect extends OneShotEffect {
public PhantomWingsReturnEffect() {
public PhantomWingsReturnEffect(final PhantomWingsReturnEffect effect) {
public PhantomWingsReturnEffect copy() {return new PhantomWingsReturnEffect(this);
public boolean apply(Game game, Ability source) {
{return enchantedCreature.moveToZone(Zone.HAND, source.getSourceId(), game, false);return false;
public class Quash extends CardImpl {
public Quash(UUID ownerId) {
public Quash(final Quash card) {
public Quash copy() {return new Quash(this);
public class QuillmaneBaku extends CardImpl {
public QuillmaneBaku(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public QuillmaneBaku(final QuillmaneBaku card) {
public QuillmaneBaku copy() {return new QuillmaneBaku(this);
class QuillmaneBakuReturnEffect extends OneShotEffect {
public QuillmaneBakuReturnEffect() {
public QuillmaneBakuReturnEffect(final QuillmaneBakuReturnEffect effect) {
public QuillmaneBakuReturnEffect copy() {return new QuillmaneBakuReturnEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class ReduceToDreams extends CardImpl {
public ReduceToDreams(UUID ownerId) {
public ReduceToDreams(final ReduceToDreams card) {
public ReduceToDreams copy() {return new ReduceToDreams(this);
class ReduceToDreamsEffect extends OneShotEffect {
public ReduceToDreamsEffect() {
public ReduceToDreamsEffect(final ReduceToDreamsEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ReduceToDreamsEffect copy() {return new ReduceToDreamsEffect(this);
public class RibbonsOfTheReikai extends CardImpl {
public RibbonsOfTheReikai(UUID ownerId) {
public RibbonsOfTheReikai(final RibbonsOfTheReikai card) {
public RibbonsOfTheReikai copy() {return new RibbonsOfTheReikai(this);
public class RoarOfJukai extends CardImpl {
public RoarOfJukai(UUID ownerId) {
public RoarOfJukai(final RoarOfJukai card) {
public RoarOfJukai copy() {return new RoarOfJukai(this);
class RoarOfJukaiEffect extends OneShotEffect {
public RoarOfJukaiEffect() {
public RoarOfJukaiEffect(final RoarOfJukaiEffect effect) {
public RoarOfJukaiEffect copy() {return new RoarOfJukaiEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new RoninCliffrider(this);return new RoninCliffriderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RoninWarclub extends CardImpl {
public RoninWarclub(UUID ownerId) {
public RoninWarclub(final RoninWarclub card) {
public RoninWarclub copy() {return new RoninWarclub(this);
private class RoninWarclubTriggeredAbility extends TriggeredAbilityImpl {
public RoninWarclubTriggeredAbility() {
public RoninWarclubTriggeredAbility(RoninWarclubTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public RoninWarclubTriggeredAbility copy() {return new RoninWarclubTriggeredAbility(this);
private class RoninWarclubAttachEffect extends OneShotEffect {
public RoninWarclubAttachEffect() {
public RoninWarclubAttachEffect(final RoninWarclubAttachEffect effect) {
public RoninWarclubAttachEffect copy() {return new RoninWarclubAttachEffect(this);
public boolean apply(Game game, Ability source) {return result;return false;
public class SakikoMotherOfSummer extends CardImpl {
public SakikoMotherOfSummer(UUID ownerId) {
public SakikoMotherOfSummer(final SakikoMotherOfSummer card) {
public SakikoMotherOfSummer copy() {return new SakikoMotherOfSummer(this);
class SakikoMotherOfSummerTriggeredAbility extends TriggeredAbilityImpl {
public SakikoMotherOfSummerTriggeredAbility() {
public SakikoMotherOfSummerTriggeredAbility(final SakikoMotherOfSummerTriggeredAbility ability) {
public SakikoMotherOfSummerTriggeredAbility copy() {return new SakikoMotherOfSummerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control deals combat damage to a player, add that much {G} to your mana pool. Until end of turn, this mana doesn't empty from your mana pool as steps and phases end.";
public class SakuraTribeSpringcaller extends CardImpl {
public SakuraTribeSpringcaller(UUID ownerId) {
public SakuraTribeSpringcaller(final SakuraTribeSpringcaller card) {
public SakuraTribeSpringcaller copy() {return new SakuraTribeSpringcaller(this);
public class ScaledHulk extends CardImpl {
public ScaledHulk(UUID ownerId) {
public ScaledHulk(final ScaledHulk card) {
public ScaledHulk copy() {return new ScaledHulk(this);
public class Scour extends CardImpl {
public Scour(UUID ownerId) {
public Scour(final Scour card) {
public Scour copy() {return new Scour(this);
public class ScourgeOfNumai extends CardImpl {
public ScourgeOfNumai(UUID ownerId) {
public ScourgeOfNumai(final ScourgeOfNumai card) {
public ScourgeOfNumai copy() {return new ScourgeOfNumai(this);
class ScourgeOfNumaiEffect extends OneShotEffect {
public ScourgeOfNumaiEffect() {
public ScourgeOfNumaiEffect(final ScourgeOfNumaiEffect effect) {
public ScourgeOfNumaiEffect copy() {return new ScourgeOfNumaiEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShimmeringGlasskite extends CardImpl {
public ShimmeringGlasskite(UUID ownerId) {
public ShimmeringGlasskite(final ShimmeringGlasskite card) {
public ShimmeringGlasskite copy() {return new ShimmeringGlasskite(this);
class ShimmeringGlasskiteAbility extends TriggeredAbilityImpl {
public ShimmeringGlasskiteAbility() {
public ShimmeringGlasskiteAbility(final ShimmeringGlasskiteAbility ability) {
public ShimmeringGlasskiteAbility copy() {return new ShimmeringGlasskiteAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} becomes the target of a spell or ability for the first time in a turn, counter that spell or ability.";
public class ShiningShoal extends CardImpl {
public ShiningShoal(UUID ownerId) {
public class ShinkaGatekeeper extends CardImpl {
public ShinkaGatekeeper(UUID ownerId) {
public ShinkaGatekeeper(final ShinkaGatekeeper card) {
public ShinkaGatekeeper copy() {return new ShinkaGatekeeper(this);
class ShinkaGatekeeperDealDamageEffect extends OneShotEffect {
public ShinkaGatekeeperDealDamageEffect() {
public ShinkaGatekeeperDealDamageEffect(final ShinkaGatekeeperDealDamageEffect effect) {
public ShinkaGatekeeperDealDamageEffect copy() {return new ShinkaGatekeeperDealDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShireiShizosCaretaker extends CardImpl {
public ShireiShizosCaretaker(UUID ownerId) {
public ShireiShizosCaretaker(final ShireiShizosCaretaker card) {
public ShireiShizosCaretaker copy() {return new ShireiShizosCaretaker(this);
class ShireiShizosCaretakerTriggeredAbility extends TriggeredAbilityImpl {
ShireiShizosCaretakerTriggeredAbility(UUID shireiId) {
ShireiShizosCaretakerTriggeredAbility(final ShireiShizosCaretakerTriggeredAbility ability) {
public ShireiShizosCaretakerTriggeredAbility copy() {return new ShireiShizosCaretakerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature with power 1 or less is put into your graveyard from the battlefield, you may return that card to the battlefield at the beginning of the next end step if Shirei, Shizo's Caretaker is still on the battlefield.";
class ShireiShizosCaretakerEffect extends OneShotEffect {
ShireiShizosCaretakerEffect(UUID shireiId) {this.staticText = "you may return that card to the battlefield at the beginning of the next end step if {this} is still on the battlefield.";
ShireiShizosCaretakerEffect(final ShireiShizosCaretakerEffect effect) {
public ShireiShizosCaretakerEffect copy() {return new ShireiShizosCaretakerEffect(this);
public boolean apply(Game game, Ability source) {effect.setText("return that card to the battlefield if {this} is still on the battlefield");return true;return false;
class ShireiShizosCaretakerReturnEffect extends ReturnToBattlefieldUnderYourControlTargetEffect {
ShireiShizosCaretakerReturnEffect(UUID shireiId) {
ShireiShizosCaretakerReturnEffect(final ShireiShizosCaretakerReturnEffect effect) {
public ShireiShizosCaretakerReturnEffect copy() {return new ShireiShizosCaretakerReturnEffect(this);
public boolean apply(Game game, Ability source) {return super.apply(game, source);return false;
public class ShizukoCallerOfAutumn extends CardImpl {
public ShizukoCallerOfAutumn(UUID ownerId) {
public ShizukoCallerOfAutumn(final ShizukoCallerOfAutumn card) {
public ShizukoCallerOfAutumn copy() {return new ShizukoCallerOfAutumn(this);
public class Shuko extends CardImpl {
public Shuko(UUID ownerId) {
public Shuko(final Shuko card) {
public Shuko copy() {return new Shuko(this);
public class SilverstormSamurai extends CardImpl {
public SilverstormSamurai(UUID ownerId) {
public SilverstormSamurai(final SilverstormSamurai card) {
public SilverstormSamurai copy() {return new SilverstormSamurai(this);
public class SkullmaneBaku extends CardImpl {
public SkullmaneBaku(UUID ownerId) {
public SkullmaneBaku(final SkullmaneBaku card) {
public SkullmaneBaku copy() {return new SkullmaneBaku(this);
class SkullmaneBakuUnboostEffect extends OneShotEffect {
public SkullmaneBakuUnboostEffect() {
public SkullmaneBakuUnboostEffect(SkullmaneBakuUnboostEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SkullmaneBakuUnboostEffect copy() {return new SkullmaneBakuUnboostEffect(this);
public class Skullsnatcher extends CardImpl {
public Skullsnatcher(UUID ownerId) {
public Skullsnatcher(final Skullsnatcher card) {
public Skullsnatcher copy() {return new Skullsnatcher(this);
class SkullsnatcherTriggeredAbility extends TriggeredAbilityImpl {
SkullsnatcherTriggeredAbility(Effect effect) {
SkullsnatcherTriggeredAbility(final SkullsnatcherTriggeredAbility ability) {
public SkullsnatcherTriggeredAbility copy() {return new SkullsnatcherTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, " + super.getRule();
public class SlumberingTora extends CardImpl {
public SlumberingTora(UUID ownerId) {
public SlumberingTora(final SlumberingTora card) {
public SlumberingTora copy() {return new SlumberingTora(this);
private class SlumberingToraEffect extends ContinuousEffectImpl {
public SlumberingToraEffect() {
public SlumberingToraEffect(final SlumberingToraEffect effect) {
public SlumberingToraEffect copy() {return new SlumberingToraEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
private void setText() {
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.TypeChangingEffects_4;
public class SoratamiMindsweeper extends CardImpl {
public SoratamiMindsweeper(UUID ownerId) {
public SoratamiMindsweeper(final SoratamiMindsweeper card) {
public SoratamiMindsweeper copy() {return new SoratamiMindsweeper(this);
public class SosukesSummons extends CardImpl {
public SosukesSummons(UUID ownerId) {
public SosukesSummons(final SosukesSummons card) {
public SosukesSummons copy() {return new SosukesSummons(this);
public class SowingSalt extends CardImpl {
public SowingSalt(UUID ownerId) {
public SowingSalt(final SowingSalt card) {
public SowingSalt copy() {return new SowingSalt(this);
public class Splinter extends CardImpl {
public Splinter(UUID ownerId) {
public Splinter(final Splinter card) {
public Splinter copy() {return new Splinter(this);
public class SplitTailMiko extends CardImpl {
public SplitTailMiko(UUID ownerId) {
public SplitTailMiko(final SplitTailMiko card) {
public SplitTailMiko copy() {return new SplitTailMiko(this);
public class StirTheGrave extends CardImpl {
public StirTheGrave(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public StirTheGrave(final StirTheGrave card) {
public StirTheGrave copy() {return new StirTheGrave(this);
public class StreamOfConsciousness extends CardImpl {
public StreamOfConsciousness(UUID ownerId) {
public StreamOfConsciousness(final StreamOfConsciousness card) {
public StreamOfConsciousness copy() {return new StreamOfConsciousness(this);
class StreamOfConsciousnessEffect extends OneShotEffect {
public StreamOfConsciousnessEffect() {
public StreamOfConsciousnessEffect(final StreamOfConsciousnessEffect effect) {
public StreamOfConsciousnessEffect copy() {return new StreamOfConsciousnessEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class StreamOfConsciousnessTarget extends TargetCard {
public StreamOfConsciousnessTarget() {
public StreamOfConsciousnessTarget(final StreamOfConsciousnessTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return filter.match(card, game);return false;
public StreamOfConsciousnessTarget copy() {return new StreamOfConsciousnessTarget(this);
public class SwayOfTheStars extends CardImpl {
public SwayOfTheStars(UUID ownerId) {
public SwayOfTheStars(final SwayOfTheStars card) {
public SwayOfTheStars copy() {return new SwayOfTheStars(this);
class SwayOfTheStarsEffect extends OneShotEffect {
public SwayOfTheStarsEffect() {
public SwayOfTheStarsEffect(final SwayOfTheStarsEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SwayOfTheStarsEffect copy() {return new SwayOfTheStarsEffect(this);
public class TakenosCavalry extends CardImpl {
public TakenosCavalry(UUID ownerId) {
public TakenosCavalry(final TakenosCavalry card) {
public TakenosCavalry copy() {return new TakenosCavalry(this);
public class TakenumaBleeder extends CardImpl {
public TakenumaBleeder(UUID ownerId) {
public TakenumaBleeder(final TakenumaBleeder card) {
public TakenumaBleeder copy() {return new TakenumaBleeder(this);
class TakenumaBleederEffect extends OneShotEffect {
public TakenumaBleederEffect() {
public TakenumaBleederEffect(final TakenumaBleederEffect effect) {
public TakenumaBleederEffect copy() {return new TakenumaBleederEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Tallowisp extends CardImpl {
public Tallowisp(UUID ownerId) {
public Tallowisp(final Tallowisp card) {
public Tallowisp copy() {return new Tallowisp(this);
class TallowispAbilityPredicate implements Predicate<MageObject> {
public TallowispAbilityPredicate() {
public boolean apply(MageObject input, Game game) {return true;return false;
public String toString() {return "Aura card with enchant creature";
public class TeardropKami extends CardImpl {
public TeardropKami(UUID ownerId) {
public TeardropKami(final TeardropKami card) {
public TeardropKami copy() {return new TeardropKami(this);return new TendoIceBridge(this);
public class TerashisGrasp extends CardImpl {
public TerashisGrasp(UUID ownerId) {
public TerashisGrasp(final TerashisGrasp card) {
public TerashisGrasp copy() {return new TerashisGrasp(this);
private class TerashisGraspEffect extends OneShotEffect {
public TerashisGraspEffect() {
public TerashisGraspEffect(TerashisGraspEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TerashisGraspEffect copy() {return new TerashisGraspEffect(this);
public class ThreadsOfDisloyalty extends CardImpl {
public ThreadsOfDisloyalty(UUID ownerId) {
public ThreadsOfDisloyalty(final ThreadsOfDisloyalty card) {
public ThreadsOfDisloyalty copy() {return new ThreadsOfDisloyalty(this);
public class ThreeTragedies extends CardImpl {
public ThreeTragedies(UUID ownerId) {
public ThreeTragedies(final ThreeTragedies card) {
public ThreeTragedies copy() {return new ThreeTragedies(this);
public class ThroatSlitter extends CardImpl {
public ThroatSlitter(UUID ownerId) {
public ThroatSlitter(final ThroatSlitter card) {
public ThroatSlitter copy() {return new ThroatSlitter(this);
class ThroatSlitterTriggeredAbility extends TriggeredAbilityImpl {
ThroatSlitterTriggeredAbility() {
ThroatSlitterTriggeredAbility(final ThroatSlitterTriggeredAbility ability) {
public ThroatSlitterTriggeredAbility copy() {return new ThroatSlitterTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, destroy target nonblack creature that player controls.";
public class ToilsOfNightAndDay extends CardImpl {
public ToilsOfNightAndDay(UUID ownerId) {
public ToilsOfNightAndDay(final ToilsOfNightAndDay card) {
public ToilsOfNightAndDay copy() {return new ToilsOfNightAndDay(this);
private class ToilsOfNightAndDayEffect extends OneShotEffect {
public ToilsOfNightAndDayEffect() {
public ToilsOfNightAndDayEffect(final ToilsOfNightAndDayEffect effect) {
public ToilsOfNightAndDayEffect copy() {return new ToilsOfNightAndDayEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TomorrowAzamisFamiliar extends CardImpl {
public TomorrowAzamisFamiliar(UUID ownerId) {
public TomorrowAzamisFamiliar(final TomorrowAzamisFamiliar card) {
public TomorrowAzamisFamiliar copy() {return new TomorrowAzamisFamiliar(this);
class TomorrowAzamisFamiliarReplacementEffect extends ReplacementEffectImpl {
TomorrowAzamisFamiliarReplacementEffect() {
TomorrowAzamisFamiliarReplacementEffect(final TomorrowAzamisFamiliarReplacementEffect effect) {
public TomorrowAzamisFamiliarReplacementEffect copy() {return new TomorrowAzamisFamiliarReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public class TorrentOfStone extends CardImpl {
public TorrentOfStone(UUID ownerId) {
public TorrentOfStone(final TorrentOfStone card) {
public TorrentOfStone copy() {return new TorrentOfStone(this);
public class ToshiroUmezawa extends CardImpl {
public ToshiroUmezawa(UUID ownerId) {
public ToshiroUmezawa(final ToshiroUmezawa card) {
public ToshiroUmezawa copy() {return new ToshiroUmezawa(this);
class ToshiroUmezawaEffect extends OneShotEffect {
public ToshiroUmezawaEffect() {
public ToshiroUmezawaEffect(final ToshiroUmezawaEffect effect) {
public ToshiroUmezawaEffect copy() {return new ToshiroUmezawaEffect(this);
public boolean apply(Game game, Ability source) {return false;
class ToshiroUmezawaReplacementEffect extends ReplacementEffectImpl {
public ToshiroUmezawaReplacementEffect(UUID cardId) {
public ToshiroUmezawaReplacementEffect(final ToshiroUmezawaReplacementEffect effect) {
public ToshiroUmezawaReplacementEffect copy() {return new ToshiroUmezawaReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return zEvent.getToZone() == Zone.GRAVEYARD
public class TraprootKami extends CardImpl {
public TraprootKami(UUID ownerId) {
public TraprootKami(final TraprootKami card) {
public TraprootKami copy() {return new TraprootKami(this);
public class TwistAllegiance extends CardImpl {
public TwistAllegiance(UUID ownerId) {
public TwistAllegiance(final TwistAllegiance card) {
public TwistAllegiance copy() {return new TwistAllegiance(this);
class TwistAllegianceEffect extends OneShotEffect {
public TwistAllegianceEffect() {
public TwistAllegianceEffect(final TwistAllegianceEffect effect) {
public TwistAllegianceEffect copy() {return new TwistAllegianceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class UmezawasJitte extends CardImpl {
public UmezawasJitte(UUID ownerId) {
public UmezawasJitte(final UmezawasJitte card) {
public UmezawasJitte copy() {return new UmezawasJitte(this);
class UmezawasJitteAbility extends TriggeredAbilityImpl {
public UmezawasJitteAbility() {
public UmezawasJitteAbility(final UmezawasJitteAbility ability) {
public UmezawasJitteAbility copy() {return new UmezawasJitteAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return true;return false;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature deals combat damage, " + super.getRule();
public class UncheckedGrowth extends CardImpl {
public UncheckedGrowth(UUID ownerId) {
public UncheckedGrowth(final UncheckedGrowth card) {
public UncheckedGrowth copy() {return new UncheckedGrowth(this);
private class UncheckedGrowthTrampleEffect extends ContinuousEffectImpl {
public UncheckedGrowthTrampleEffect() {
public UncheckedGrowthTrampleEffect(final UncheckedGrowthTrampleEffect effect) {
public UncheckedGrowthTrampleEffect copy() {return new UncheckedGrowthTrampleEffect(this);
public boolean apply(Game game, Ability source) {return affectedTargets > 0;
public class Uproot extends CardImpl {
public Uproot(UUID ownerId) {
public Uproot(final Uproot card) {
public Uproot copy() {return new Uproot(this);
public class VeilOfSecrecy extends CardImpl {
public VeilOfSecrecy(UUID ownerId) {
public VeilOfSecrecy(final VeilOfSecrecy card) {
public VeilOfSecrecy copy() {return new VeilOfSecrecy(this);
public class VitalSurge extends CardImpl {
public VitalSurge(UUID ownerId) {
public VitalSurge(final VitalSurge card) {
public VitalSurge copy() {return new VitalSurge(this);
public class WalkerOfSecretWays extends CardImpl {
public WalkerOfSecretWays(UUID ownerId) {
public WalkerOfSecretWays(final WalkerOfSecretWays card) {
public WalkerOfSecretWays copy() {return new WalkerOfSecretWays(this);
class WalkerOfSecretWaysEffect extends OneShotEffect {
WalkerOfSecretWaysEffect() {
WalkerOfSecretWaysEffect(final WalkerOfSecretWaysEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public WalkerOfSecretWaysEffect copy() {return new WalkerOfSecretWaysEffect(this);
public class WardOfPiety extends CardImpl {
public WardOfPiety(UUID ownerId) {
public WardOfPiety(final WardOfPiety card) {
public WardOfPiety copy() {return new WardOfPiety(this);
class WardOfPietyPreventDamageTargetEffect extends RedirectionEffect {
public WardOfPietyPreventDamageTargetEffect() {
public WardOfPietyPreventDamageTargetEffect(final WardOfPietyPreventDamageTargetEffect effect) {
public WardOfPietyPreventDamageTargetEffect copy() {return new WardOfPietyPreventDamageTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class WaxmaneBaku extends CardImpl {
public WaxmaneBaku(UUID ownerId) {
public WaxmaneBaku(final WaxmaneBaku card) {
public WaxmaneBaku copy() {return new WaxmaneBaku(this);
class WaxmaneBakuTapEffect extends OneShotEffect {
public WaxmaneBakuTapEffect() {
public WaxmaneBakuTapEffect(final WaxmaneBakuTapEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public WaxmaneBakuTapEffect copy() {return new WaxmaneBakuTapEffect(this);
public class YomijiWhoBarsTheWay extends CardImpl {
public YomijiWhoBarsTheWay(UUID ownerId) {effect.setText("return that card to its owner's hand");
public YomijiWhoBarsTheWay(final YomijiWhoBarsTheWay card) {
public YomijiWhoBarsTheWay copy() {return new YomijiWhoBarsTheWay(this);
public class AcolytesReward extends CardImpl {
public AcolytesReward(UUID ownerId) {
public AcolytesReward(final AcolytesReward card) {
public AcolytesReward copy() {return new AcolytesReward(this);
class AcolytesRewardEffect extends PreventionEffectImpl {
public AcolytesRewardEffect() {
public AcolytesRewardEffect(final AcolytesRewardEffect effect) {
public AcolytesRewardEffect copy() {return new AcolytesRewardEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return result;
public boolean applies(GameEvent event, Ability source, Game game) {return !this.used && super.applies(event, source, game) && event.getTargetId().equals(source.getFirstTarget());
public class AerieWorshippers extends CardImpl {
public AerieWorshippers(UUID ownerId) {
public AerieWorshippers(final AerieWorshippers card) {
public AerieWorshippers copy() {return new AerieWorshippers(this);
class AerieWorshippersBirdToken extends Token {
public AerieWorshippersBirdToken() {
public class AkroanConscriptor extends CardImpl {
public AkroanConscriptor(UUID ownerId) {
public AkroanConscriptor(final AkroanConscriptor card) {
public AkroanConscriptor copy() {return new AkroanConscriptor(this);
public class AkroanPhalanx extends CardImpl {
public AkroanPhalanx(UUID ownerId) {
public AkroanPhalanx(final AkroanPhalanx card) {
public AkroanPhalanx copy() {return new AkroanPhalanx(this);
public class AkroanSkyguard extends CardImpl {
public AkroanSkyguard(UUID ownerId) {
public AkroanSkyguard(final AkroanSkyguard card) {
public AkroanSkyguard copy() {return new AkroanSkyguard(this);
public class ArbiterOfTheIdeal extends CardImpl {
public ArbiterOfTheIdeal(UUID ownerId) {
public ArbiterOfTheIdeal(final ArbiterOfTheIdeal card) {
public ArbiterOfTheIdeal copy() {return new ArbiterOfTheIdeal(this);
class ArbiterOfTheIdealEffect extends OneShotEffect {
public ArbiterOfTheIdealEffect() {
public ArbiterOfTheIdealEffect(final ArbiterOfTheIdealEffect effect) {
public ArbiterOfTheIdealEffect copy() {return new ArbiterOfTheIdealEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class ArchetypeOfAggression extends CardImpl {
public ArchetypeOfAggression(UUID ownerId) {
public ArchetypeOfAggression(final ArchetypeOfAggression card) {
public ArchetypeOfAggression copy() {return new ArchetypeOfAggression(this);
public class ArchetypeOfCourage extends CardImpl {
public ArchetypeOfCourage(UUID ownerId) {
public ArchetypeOfCourage(final ArchetypeOfCourage card) {
public ArchetypeOfCourage copy() {return new ArchetypeOfCourage(this);
public class ArchetypeOfEndurance extends CardImpl {
public ArchetypeOfEndurance(UUID ownerId) {
public ArchetypeOfEndurance(final ArchetypeOfEndurance card) {
public ArchetypeOfEndurance copy() {return new ArchetypeOfEndurance(this);
public class ArchetypeOfFinality extends CardImpl {
public ArchetypeOfFinality(UUID ownerId) {
public ArchetypeOfFinality(final ArchetypeOfFinality card) {
public ArchetypeOfFinality copy() {return new ArchetypeOfFinality(this);
public class ArchetypeOfImagination extends CardImpl {
public ArchetypeOfImagination(UUID ownerId) {
public ArchetypeOfImagination(final ArchetypeOfImagination card) {
public ArchetypeOfImagination copy() {return new ArchetypeOfImagination(this);
public class AshioksAdept extends CardImpl {
public AshioksAdept(UUID ownerId) {
public AshioksAdept(final AshioksAdept card) {
public AshioksAdept copy() {return new AshioksAdept(this);
public class AspectOfHydra extends CardImpl {
public AspectOfHydra(UUID ownerId) {
public AspectOfHydra(final AspectOfHydra card) {
public AspectOfHydra copy() {return new AspectOfHydra(this);
public class Asphyxiate extends CardImpl {
public Asphyxiate(UUID ownerId) {
public Asphyxiate(final Asphyxiate card) {
public Asphyxiate copy() {return new Asphyxiate(this);
public class AstralCornucopia extends CardImpl {
public AstralCornucopia(UUID ownerId) {
public AstralCornucopia(final AstralCornucopia card) {
public AstralCornucopia copy() {return new AstralCornucopia(this);
class AstralCornucopiaManaAbility extends ManaAbility {
public AstralCornucopiaManaAbility() {
public AstralCornucopiaManaAbility(final AstralCornucopiaManaAbility ability) {
public AstralCornucopiaManaAbility copy() {return new AstralCornucopiaManaAbility(this);
public List<Mana> getNetMana(Game game) {return netMana;
class AstralCornucopiaManaEffect extends ManaEffect {
public AstralCornucopiaManaEffect() {
public AstralCornucopiaManaEffect(final AstralCornucopiaManaEffect effect) {
public AstralCornucopiaManaEffect copy() {return new AstralCornucopiaManaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public class BileBlight extends CardImpl {
public BileBlight(UUID ownerId) {
public BileBlight(final BileBlight card) {
public BileBlight copy() {return new BileBlight(this);
class BileBlightEffect extends BoostAllEffect {
public BileBlightEffect() {
public BileBlightEffect(final BileBlightEffect effect) {
public void init(Ability source, Game game) {
public class BlackOakOfOdunos extends CardImpl {
public BlackOakOfOdunos(UUID ownerId) {
public BlackOakOfOdunos(final BlackOakOfOdunos card) {
public BlackOakOfOdunos copy() {return new BlackOakOfOdunos(this);
public class BoltOfKeranos extends CardImpl {
public BoltOfKeranos(UUID ownerId) {
public BoltOfKeranos(final BoltOfKeranos card) {
public BoltOfKeranos copy() {return new BoltOfKeranos(this);
public class ChargingBadger extends CardImpl {
public ChargingBadger(UUID ownerId) {
public ChargingBadger(final ChargingBadger card) {
public ChargingBadger copy() {return new ChargingBadger(this);
public class ChorusOfTheTides extends CardImpl {
public ChorusOfTheTides(UUID ownerId) {
public ChorusOfTheTides(final ChorusOfTheTides card) {
public ChorusOfTheTides copy() {return new ChorusOfTheTides(this);
public class Chromanticore extends CardImpl {
public Chromanticore(UUID ownerId) {
public Chromanticore(final Chromanticore card) {
public Chromanticore copy() {return new Chromanticore(this);
public class ClaimOfErebos extends CardImpl {
public ClaimOfErebos(UUID ownerId) {
public ClaimOfErebos(final ClaimOfErebos card) {
public ClaimOfErebos copy() {return new ClaimOfErebos(this);
public class CourserOfKruphix extends CardImpl {
public CourserOfKruphix(UUID ownerId) {
public CourserOfKruphix(final CourserOfKruphix card) {
public CourserOfKruphix copy() {return new CourserOfKruphix(this);
public class Crypsis extends CardImpl {
public Crypsis(UUID ownerId) {
public Crypsis(final Crypsis card) {
public Crypsis copy() {return new Crypsis(this);
public class CullingMark extends CardImpl {
public CullingMark(UUID ownerId) {
public CullingMark(final CullingMark card) {
public CullingMark copy() {return new CullingMark(this);
public class CyclopsOfOneEyedPass extends CardImpl {
public CyclopsOfOneEyedPass(UUID ownerId) {
public CyclopsOfOneEyedPass(final CyclopsOfOneEyedPass card) {
public CyclopsOfOneEyedPass copy() {return new CyclopsOfOneEyedPass(this);
public class DawnToDusk extends CardImpl {
public DawnToDusk(UUID ownerId) {
public DawnToDusk(final DawnToDusk card) {
public DawnToDusk copy() {return new DawnToDusk(this);
public class DeepwaterHypnotist extends CardImpl {
public DeepwaterHypnotist(UUID ownerId) {
public DeepwaterHypnotist(final DeepwaterHypnotist card) {
public DeepwaterHypnotist copy() {return new DeepwaterHypnotist(this);
public class DrownInSorrow extends CardImpl {
public DrownInSorrow(UUID ownerId) {
public DrownInSorrow(final DrownInSorrow card) {
public DrownInSorrow copy() {return new DrownInSorrow(this);
public class EaterOfHope extends CardImpl {
public EaterOfHope(UUID ownerId) {
public EaterOfHope(final EaterOfHope card) {
public EaterOfHope copy() {return new EaterOfHope(this);return new EidolonOfCountlessBattles(this);
public class EliteSkirmisher extends CardImpl {
public EliteSkirmisher(UUID ownerId) {
public EliteSkirmisher(final EliteSkirmisher card) {
public EliteSkirmisher copy() {return new EliteSkirmisher(this);
public class EpharaGodOfThePolis extends CardImpl {
public EpharaGodOfThePolis(UUID ownerId) {
public EpharaGodOfThePolis(final EpharaGodOfThePolis card) {
public EpharaGodOfThePolis copy() {return new EpharaGodOfThePolis(this);
class HadAnotherCreatureEnterTheBattlefieldCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return watcher != null && watcher.conditionMet();
class CreatureEnteredBattlefieldLastTurnWatcher extends Watcher {
public CreatureEnteredBattlefieldLastTurnWatcher() {
public CreatureEnteredBattlefieldLastTurnWatcher(final CreatureEnteredBattlefieldLastTurnWatcher watcher) {
public void watch(GameEvent event, Game game) {
public void reset() {
public CreatureEnteredBattlefieldLastTurnWatcher copy() {return new CreatureEnteredBattlefieldLastTurnWatcher(this);
public class EpharasEnlightenment extends CardImpl {
public EpharasEnlightenment(UUID ownerId) {
public EpharasEnlightenment(final EpharasEnlightenment card) {
public EpharasEnlightenment copy() {return new EpharasEnlightenment(this);
public class EpharasRadiance extends CardImpl {
public EpharasRadiance(UUID ownerId) {
public EpharasRadiance(final EpharasRadiance card) {
public EpharasRadiance copy() {return new EpharasRadiance(this);
public class EpiphanyStorm extends CardImpl {
public EpiphanyStorm(UUID ownerId) {
public EpiphanyStorm(final EpiphanyStorm card) {
public EpiphanyStorm copy() {return new EpiphanyStorm(this);
public class Excoriate extends CardImpl {
public Excoriate(UUID ownerId) {
public Excoriate(final Excoriate card) {
public Excoriate copy() {return new Excoriate(this);
public class EyeGouge extends CardImpl {
public EyeGouge(UUID ownerId) {
public EyeGouge(final EyeGouge card) {
public EyeGouge copy() {return new EyeGouge(this);
public class FallOfTheHammer extends CardImpl {
public FallOfTheHammer(UUID ownerId) {
public FallOfTheHammer(final FallOfTheHammer card) {
public FallOfTheHammer copy() {return new FallOfTheHammer(this);
class FallOfTheHammerDamageEffect extends OneShotEffect {
public FallOfTheHammerDamageEffect() {
public FallOfTheHammerDamageEffect(final FallOfTheHammerDamageEffect effect) {
public FallOfTheHammerDamageEffect copy() {return new FallOfTheHammerDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class FallOfTheHammerTargetCreaturePermanent extends TargetCreaturePermanent {
public FallOfTheHammerTargetCreaturePermanent(FilterCreaturePermanent filter) {
public boolean canTarget(UUID id, Ability source, Game game) {return false;return super.canTarget(id, source, game);
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return false;return super.canTarget(controllerId, id, source, game);
public class FanaticOfXenagos extends CardImpl {
public FanaticOfXenagos(UUID ownerId) {
public FanaticOfXenagos(final FanaticOfXenagos card) {
public FanaticOfXenagos copy() {return new FanaticOfXenagos(this);
public class FatedConflagration extends CardImpl {
public FatedConflagration(UUID ownerId) {
public FatedConflagration(final FatedConflagration card) {
public FatedConflagration copy() {return new FatedConflagration(this);
public class FatedInfatuation extends CardImpl {
public FatedInfatuation(UUID ownerId) {
public FatedInfatuation(final FatedInfatuation card) {
public FatedInfatuation copy() {return new FatedInfatuation(this);
public class FatedIntervention extends CardImpl {
public FatedIntervention(UUID ownerId) {
public FatedIntervention(final FatedIntervention card) {
public FatedIntervention copy() {return new FatedIntervention(this);
public class FatedRetribution extends CardImpl {
public FatedRetribution(UUID ownerId) {
public FatedRetribution(final FatedRetribution card) {
public FatedRetribution copy() {return new FatedRetribution(this);
public class FatedReturn extends CardImpl {
public FatedReturn(UUID ownerId) {
public FatedReturn(final FatedReturn card) {
public FatedReturn copy() {return new FatedReturn(this);
public class FateUnraveler extends CardImpl {
public FateUnraveler(UUID ownerId) {
public FateUnraveler(final FateUnraveler card) {
public FateUnraveler copy() {return new FateUnraveler(this);
public class FearsomeTemper extends CardImpl {
public FearsomeTemper(UUID ownerId) {
public FearsomeTemper(final FearsomeTemper card) {
public FearsomeTemper copy() {return new FearsomeTemper(this);
public class FelhideBrawler extends CardImpl {
public FelhideBrawler(UUID ownerId) {
public FelhideBrawler(final FelhideBrawler card) {
public FelhideBrawler copy() {return new FelhideBrawler(this);
class FelhideBrawlerRestrictionEffect extends RestrictionEffect {
public FelhideBrawlerRestrictionEffect() {
public FelhideBrawlerRestrictionEffect(final FelhideBrawlerRestrictionEffect effect) {
public FelhideBrawlerRestrictionEffect copy() {return new FelhideBrawlerRestrictionEffect(this);
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public class FelhideSpiritbinder extends CardImpl {
public FelhideSpiritbinder(UUID ownerId) {
public FelhideSpiritbinder(final FelhideSpiritbinder card) {
public FelhideSpiritbinder copy() {return new FelhideSpiritbinder(this);
class FelhideSpiritbinderEffect extends OneShotEffect {
public FelhideSpiritbinderEffect() {
public FelhideSpiritbinderEffect(final FelhideSpiritbinderEffect effect) {
public FelhideSpiritbinderEffect copy() {return new FelhideSpiritbinderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FlameWreathedPhoenix extends CardImpl {
public FlameWreathedPhoenix(UUID ownerId) {"When {this} enters the battlefield, if its tribute wasn't paid, it gains haste and \"When this creature dies, return it to its owner's hand.\""));
public FlameWreathedPhoenix(final FlameWreathedPhoenix card) {
public FlameWreathedPhoenix copy() {return new FlameWreathedPhoenix(this);return new FlitterstepEidolon(this);
public class FloodtideSerpent extends CardImpl {
public FloodtideSerpent(UUID ownerId) {
public FloodtideSerpent(final FloodtideSerpent card) {
public FloodtideSerpent copy() {return new FloodtideSerpent(this);
class FloodtideSerpentReplacementEffect extends ReplacementEffectImpl {
FloodtideSerpentReplacementEffect() {staticText = "{this} can't attack unless you return an enchantment you control to its owner's hand <i>(This cost is paid as attackers are declared.)</i>";
FloodtideSerpentReplacementEffect(FloodtideSerpentReplacementEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARE_ATTACKER;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getSourceId().equals(source.getSourceId());
public FloodtideSerpentReplacementEffect copy() {return new FloodtideSerpentReplacementEffect(this);
public class ForgestokerDragon extends CardImpl {
public ForgestokerDragon(UUID ownerId) {
public ForgestokerDragon(final ForgestokerDragon card) {
public ForgestokerDragon copy() {return new ForgestokerDragon(this);
public class ForlornPseudamma extends CardImpl {
public ForlornPseudamma(UUID ownerId) {
public ForlornPseudamma(final ForlornPseudamma card) {
public ForlornPseudamma copy() {return new ForlornPseudamma(this);
class ForlornPseudammaZombieToken extends Token {
public ForlornPseudammaZombieToken() {
public class Gild extends CardImpl {
public Gild(UUID ownerId) {
public Gild(final Gild card) {
public Gild copy() {return new Gild(this);
public class GlimpseTheSunGod extends CardImpl {
public GlimpseTheSunGod(UUID ownerId) {
public GlimpseTheSunGod(final GlimpseTheSunGod card) {
public void adjustTargets(Ability ability, Game game) {
public GlimpseTheSunGod copy() {return new GlimpseTheSunGod(this);
public class GodFavoredGeneral extends CardImpl {
public GodFavoredGeneral(UUID ownerId) {
public GodFavoredGeneral(final GodFavoredGeneral card) {
public GodFavoredGeneral copy() {return new GodFavoredGeneral(this);
class SoldierToken extends Token {
public SoldierToken() {
public class GorgonsHead extends CardImpl {
public GorgonsHead(UUID ownerId) {
public GorgonsHead(final GorgonsHead card) {
public GorgonsHead copy() {return new GorgonsHead(this);
public class GraverobberSpider extends CardImpl {
public GraverobberSpider(UUID ownerId) {
public GraverobberSpider(final GraverobberSpider card) {
public GraverobberSpider copy() {return new GraverobberSpider(this);
public class GreatHart extends CardImpl {
public GreatHart(UUID ownerId) {
public GreatHart(final GreatHart card) {
public GreatHart copy() {return new GreatHart(this);return new GriffinDreamfinder(this);return new GrislyTransformation(this);
public class HeraldOfTorment extends CardImpl {
public HeraldOfTorment(UUID ownerId) {
public HeraldOfTorment(final HeraldOfTorment card) {
public HeraldOfTorment copy() {return new HeraldOfTorment(this);
public class HeroesPodium extends CardImpl {
public HeroesPodium(UUID ownerId) {
public HeroesPodium(final HeroesPodium card) {
public HeroesPodium copy() {return new HeroesPodium(this);
class HeroesPodiumLegendaryCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return value;
public String toString() {return "X";
public String getMessage() {return filter.getMessage();
public HeroesPodiumLegendaryCount copy() {return new HeroesPodiumLegendaryCount();
class HeroesPodiumEffect extends OneShotEffect {
public HeroesPodiumEffect() {
public HeroesPodiumEffect(final HeroesPodiumEffect effect) {
public HeroesPodiumEffect copy() {return new HeroesPodiumEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;
public class HeroOfIroas extends CardImpl {
public HeroOfIroas(UUID ownerId) {
public HeroOfIroas(final HeroOfIroas card) {
public HeroOfIroas copy() {return new HeroOfIroas(this);
public class HeroOfLeinaTower extends CardImpl {
public HeroOfLeinaTower(UUID ownerId) {
public HeroOfLeinaTower(final HeroOfLeinaTower card) {
public HeroOfLeinaTower copy() {return new HeroOfLeinaTower(this);
class HeroOfLeinaTowerEffect extends OneShotEffect {
public HeroOfLeinaTowerEffect() {
public HeroOfLeinaTowerEffect(final HeroOfLeinaTowerEffect effect) {
public HeroOfLeinaTowerEffect copy() {return new HeroOfLeinaTowerEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.P1P1.createInstance(costX), true).apply(game, source);return false;
public class HoldAtBay extends CardImpl {
public HoldAtBay(UUID ownerId) {
public HoldAtBay(final HoldAtBay card) {
public HoldAtBay copy() {return new HoldAtBay(this);
public class HuntersProwess extends CardImpl {
public HuntersProwess(UUID ownerId) {
public HuntersProwess(final HuntersProwess card) {
public HuntersProwess copy() {return new HuntersProwess(this);
class HuntersProwessDrawEffect extends OneShotEffect {
public HuntersProwessDrawEffect() {
public HuntersProwessDrawEffect(final HuntersProwessDrawEffect effect) {
public HuntersProwessDrawEffect copy() {return new HuntersProwessDrawEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ImpetuousSunchaser extends CardImpl {
public ImpetuousSunchaser(UUID ownerId) {
public ImpetuousSunchaser(final ImpetuousSunchaser card) {
public ImpetuousSunchaser copy() {return new ImpetuousSunchaser(this);
public class KarametraGodOfHarvests extends CardImpl {
public KarametraGodOfHarvests(UUID ownerId) {
public KarametraGodOfHarvests(final KarametraGodOfHarvests card) {
public KarametraGodOfHarvests copy() {return new KarametraGodOfHarvests(this);
public class KarametrasFavor extends CardImpl {
public KarametrasFavor(UUID ownerId) {
public KarametrasFavor(final KarametrasFavor card) {
public KarametrasFavor copy() {return new KarametrasFavor(this);
public class KiorasFollower extends CardImpl {
public KiorasFollower(UUID ownerId) {
public KiorasFollower(final KiorasFollower card) {
public KiorasFollower copy() {return new KiorasFollower(this);
public class KrakenOfTheStraits extends CardImpl {
public KrakenOfTheStraits(UUID ownerId) {
public KrakenOfTheStraits(final KrakenOfTheStraits card) {
public KrakenOfTheStraits copy() {return new KrakenOfTheStraits(this);
class CantBeBlockedByCreaturesWithLessPowerEffect extends RestrictionEffect {
public CantBeBlockedByCreaturesWithLessPowerEffect() {
public CantBeBlockedByCreaturesWithLessPowerEffect(final CantBeBlockedByCreaturesWithLessPowerEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getId().equals(source.getSourceId());
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return blocker.getPower().getValue() >= dynamicValue.calculate(game, source, this);
public CantBeBlockedByCreaturesWithLessPowerEffect copy() {return new CantBeBlockedByCreaturesWithLessPowerEffect(this);
public class LightningVolley extends CardImpl {
public LightningVolley(UUID ownerId) {
public LightningVolley(final LightningVolley card) {
public LightningVolley copy() {return new LightningVolley(this);
public class LoyalPegasus extends CardImpl {
public LoyalPegasus(UUID ownerId) {
public LoyalPegasus(final LoyalPegasus card) {
public LoyalPegasus copy() {return new LoyalPegasus(this);
public class MarshmistTitan extends CardImpl {
public MarshmistTitan(UUID ownerId) {
public MarshmistTitan(final MarshmistTitan card) {
public MarshmistTitan copy() {return new MarshmistTitan(this);
public MarshmistTitanCostReductionEffect() {
public MarshmistTitanCostReductionEffect(final MarshmistTitanCostReductionEffect effect) {return true;return false;return true;return false;
public MarshmistTitanCostReductionEffect copy() {return new MarshmistTitanCostReductionEffect(this);
public class MeletisAstronomer extends CardImpl {
public MeletisAstronomer(UUID ownerId) {
public MeletisAstronomer(final MeletisAstronomer card) {
public MeletisAstronomer copy() {return new MeletisAstronomer(this);
public class Mindreaver extends CardImpl {
public Mindreaver(UUID ownerId) {
public Mindreaver(final Mindreaver card) {
public Mindreaver copy() {return new Mindreaver(this);
class MindreaverExileEffect extends OneShotEffect {
public MindreaverExileEffect() {
public MindreaverExileEffect(final MindreaverExileEffect effect) {
public MindreaverExileEffect copy() {return new MindreaverExileEffect(this);
public boolean apply(Game game, Ability source) {return false;
class MindreaverNamePredicate implements Predicate<MageObject> {
public MindreaverNamePredicate(UUID sourceId) {
public boolean apply(MageObject input, Game game) {return cardNames.contains(((SplitCard) input).getLeftHalfCard().getName()) || cardNames.contains(((SplitCard) input).getRightHalfCard().getName());return cardNames.contains(card.getLeftHalfCard().getName()) || cardNames.contains(card.getRightHalfCard().getName());return cardNames.contains(input.getName());
public String toString() {return "spell with the same name as a card exiled with {source}";
public class MischiefAndMayhem extends CardImpl {
public MischiefAndMayhem(UUID ownerId) {
public MischiefAndMayhem(final MischiefAndMayhem card) {
public MischiefAndMayhem copy() {return new MischiefAndMayhem(this);
public class MogisGodOfSlaughter extends CardImpl {
public MogisGodOfSlaughter(UUID ownerId) {
public MogisGodOfSlaughter(final MogisGodOfSlaughter card) {
public MogisGodOfSlaughter copy() {return new MogisGodOfSlaughter(this);
class DoUnlessTargetPaysCost extends OneShotEffect {
public DoUnlessTargetPaysCost(OneShotEffect effect, Cost cost) {
public DoUnlessTargetPaysCost(OneShotEffect effect, Cost cost, String userMessage) {
public DoUnlessTargetPaysCost(final DoUnlessTargetPaysCost effect) {
public boolean apply(Game game, Ability source) {return executingEffect.apply(game, source);return true;return false;
public String getText(Mode mode) {return staticText;return sb.toString();
private String getCostText() {return sb.append(costText).toString();
public DoUnlessTargetPaysCost copy() {return new DoUnlessTargetPaysCost(this);return new MortalsArdor(this);
public class MortalsResolve extends CardImpl {
public MortalsResolve(UUID ownerId) {
public MortalsResolve(final MortalsResolve card) {
public MortalsResolve copy() {return new MortalsResolve(this);
public class NessianDemolok extends CardImpl {
public NessianDemolok(UUID ownerId) {
public NessianDemolok(final NessianDemolok card) {
public NessianDemolok copy() {return new NessianDemolok(this);
public class NessianWildsRavager extends CardImpl {
public NessianWildsRavager(UUID ownerId) {
public NessianWildsRavager(final NessianWildsRavager card) {
public NessianWildsRavager copy() {return new NessianWildsRavager(this);
public class NobleQuarry extends CardImpl {
public NobleQuarry(UUID ownerId) {
public NobleQuarry(final NobleQuarry card) {
public NobleQuarry copy() {return new NobleQuarry(this);return new Nullify(this);return new NyxbornEidolon(this);
public class NyxbornRollicker extends CardImpl {
public NyxbornRollicker(UUID ownerId) {
public NyxbornRollicker(final NyxbornRollicker card) {
public NyxbornRollicker copy() {return new NyxbornRollicker(this);
public class NyxbornShieldmate extends CardImpl {
public NyxbornShieldmate(UUID ownerId) {
public NyxbornShieldmate(final NyxbornShieldmate card) {
public NyxbornShieldmate copy() {return new NyxbornShieldmate(this);
public class NyxbornTriton extends CardImpl {
public NyxbornTriton(UUID ownerId) {
public NyxbornTriton(final NyxbornTriton card) {
public NyxbornTriton copy() {return new NyxbornTriton(this);
public class OracleOfBones extends CardImpl {
public OracleOfBones(UUID ownerId) {
public OracleOfBones(final OracleOfBones card) {
public OracleOfBones copy() {return new OracleOfBones(this);
class OracleOfBonesCastEffect extends OneShotEffect {
public OracleOfBonesCastEffect() {
public OracleOfBonesCastEffect(final OracleOfBonesCastEffect effect) {
public OracleOfBonesCastEffect copy() {return new OracleOfBonesCastEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OraclesInsight extends CardImpl {
public OraclesInsight(UUID ownerId) {
public OraclesInsight(final OraclesInsight card) {
public OraclesInsight copy() {return new OraclesInsight(this);
public class OreskosSunGuide extends CardImpl {
public OreskosSunGuide(UUID ownerId) {
public OreskosSunGuide(final OreskosSunGuide card) {
public OreskosSunGuide copy() {return new OreskosSunGuide(this);
public class Ornitharch extends CardImpl {
public Ornitharch(UUID ownerId) {
public Ornitharch(final Ornitharch card) {
public Ornitharch copy() {return new Ornitharch(this);
public class PainSeer extends CardImpl {
public PainSeer(UUID ownerId) {
public PainSeer(final PainSeer card) {
public PainSeer copy() {return new PainSeer(this);
class PainSeerEffect extends OneShotEffect {
public PainSeerEffect() {
public PainSeerEffect(final PainSeerEffect effect) {
public PainSeerEffect copy() {return new PainSeerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class Peregrination extends CardImpl {
public Peregrination(UUID ownerId) {
public Peregrination(final Peregrination card) {
public Peregrination copy() {return new Peregrination(this);
class PeregrinationEffect extends OneShotEffect {
public PeregrinationEffect() {
public PeregrinationEffect(final PeregrinationEffect effect) {
public PeregrinationEffect copy() {return new PeregrinationEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class PerplexingChimera extends CardImpl {
public PerplexingChimera(UUID ownerId) {
public PerplexingChimera(final PerplexingChimera card) {
public PerplexingChimera copy() {return new PerplexingChimera(this);
class PerplexingChimeraTriggeredAbility extends TriggeredAbilityImpl {
public PerplexingChimeraTriggeredAbility() {
public PerplexingChimeraTriggeredAbility(final PerplexingChimeraTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent casts a spell, " + super.getRule();
public PerplexingChimeraTriggeredAbility copy() {return new PerplexingChimeraTriggeredAbility(this);
class PerplexingChimeraControlExchangeEffect extends OneShotEffect {
public PerplexingChimeraControlExchangeEffect() {
public PerplexingChimeraControlExchangeEffect(final PerplexingChimeraControlExchangeEffect effect) {
public PerplexingChimeraControlExchangeEffect copy() {return new PerplexingChimeraControlExchangeEffect(this);
public boolean apply(Game game, Ability source) {return false;
class PerplexingChimeraControlEffect extends ContinuousEffectImpl {
public PerplexingChimeraControlEffect() {
public PerplexingChimeraControlEffect(final PerplexingChimeraControlEffect effect) {
public PerplexingChimeraControlEffect copy() {return new PerplexingChimeraControlEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(this.getTargetPointer().getFirst(game, source), game);
public class PharagaxGiant extends CardImpl {
public PharagaxGiant(UUID ownerId) {
public PharagaxGiant(final PharagaxGiant card) {
public PharagaxGiant copy() {return new PharagaxGiant(this);
public class PhenaxGodOfDeception extends CardImpl {
public PhenaxGodOfDeception(UUID ownerId) {
public PhenaxGodOfDeception(final PhenaxGodOfDeception card) {
public PhenaxGodOfDeception copy() {return new PhenaxGodOfDeception(this);
public class PheresBandRaiders extends CardImpl {
public PheresBandRaiders(UUID ownerId) {
public PheresBandRaiders(final PheresBandRaiders card) {
public PheresBandRaiders copy() {return new PheresBandRaiders(this);
public class PheresBandTromper extends CardImpl {
public PheresBandTromper(UUID ownerId) {
public PheresBandTromper(final PheresBandTromper card) {
public PheresBandTromper copy() {return new PheresBandTromper(this);
public class PillarOfWar extends CardImpl {
public PillarOfWar(UUID ownerId) {
public PillarOfWar(final PillarOfWar card) {
public PillarOfWar copy() {return new PillarOfWar(this);
public class PinnacleOfRage extends CardImpl {
public PinnacleOfRage(UUID ownerId) {
public PinnacleOfRage(final PinnacleOfRage card) {
public PinnacleOfRage copy() {return new PinnacleOfRage(this);
public class PleaForGuidance extends CardImpl {
public PleaForGuidance(UUID ownerId) {
public PleaForGuidance(final PleaForGuidance card) {
public PleaForGuidance copy() {return new PleaForGuidance(this);
public class Ragemonger extends CardImpl {
public Ragemonger(UUID ownerId) {
public Ragemonger(final Ragemonger card) {
public Ragemonger copy() {return new Ragemonger(this);
public class RaisedByWolves extends CardImpl {
public RaisedByWolves(UUID ownerId) {
public RaisedByWolves(final RaisedByWolves card) {
public RaisedByWolves copy() {return new RaisedByWolves(this);
public class ReapWhatIsSown extends CardImpl {
public ReapWhatIsSown(UUID ownerId) {
public ReapWhatIsSown(final ReapWhatIsSown card) {
public ReapWhatIsSown copy() {return new ReapWhatIsSown(this);
public class RecklessReveler extends CardImpl {
public RecklessReveler(UUID ownerId) {
public RecklessReveler(final RecklessReveler card) {
public RecklessReveler copy() {return new RecklessReveler(this);
public class Sanguimancy extends CardImpl {
public Sanguimancy(UUID ownerId) {
public Sanguimancy(final Sanguimancy card) {
public Sanguimancy copy() {return new Sanguimancy(this);
public class SatyrFiredancer extends CardImpl {
public SatyrFiredancer(UUID ownerId) {
public SatyrFiredancer(final SatyrFiredancer card) {
public void adjustTargets(Ability ability, Game game) {
public SatyrFiredancer copy() {return new SatyrFiredancer(this);
class SatyrFiredancerTriggeredAbility extends TriggeredAbilityImpl {
public SatyrFiredancerTriggeredAbility() {
public SatyrFiredancerTriggeredAbility(final SatyrFiredancerTriggeredAbility ability) {
public SatyrFiredancerTriggeredAbility copy() {return new SatyrFiredancerTriggeredAbility(this);
public void reset(Game game) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {
public class SatyrNyxSmith extends CardImpl {
public SatyrNyxSmith(UUID ownerId) {
public SatyrNyxSmith(final SatyrNyxSmith card) {
public SatyrNyxSmith copy() {return new SatyrNyxSmith(this);
class SatyrNyxSmithElementalToken extends Token {
public SatyrNyxSmithElementalToken() {
public class SatyrWayfinder extends CardImpl {
public SatyrWayfinder(UUID ownerId) {
public SatyrWayfinder(final SatyrWayfinder card) {
public SatyrWayfinder copy() {return new SatyrWayfinder(this);
class SatyrWayfinderEffect extends OneShotEffect {
public SatyrWayfinderEffect() {
public SatyrWayfinderEffect(final SatyrWayfinderEffect effect) {
public SatyrWayfinderEffect copy() {return new SatyrWayfinderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ScourgeOfSkolaVale extends CardImpl {
public ScourgeOfSkolaVale(UUID ownerId) {
public ScourgeOfSkolaVale(final ScourgeOfSkolaVale card) {
public ScourgeOfSkolaVale copy() {return new ScourgeOfSkolaVale(this);
class ScourgeOfSkolaValeEffect extends OneShotEffect {
public ScourgeOfSkolaValeEffect() {
public ScourgeOfSkolaValeEffect(final ScourgeOfSkolaValeEffect effect) {
public ScourgeOfSkolaValeEffect copy() {return new ScourgeOfSkolaValeEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.P1P1.createInstance(amount), true).apply(game, source);return false;
public class ScouringSands extends CardImpl {
public ScouringSands(UUID ownerId) {
public ScouringSands(final ScouringSands card) {
public ScouringSands copy() {return new ScouringSands(this);
class ScouringSandsDamageEffect extends OneShotEffect {
public ScouringSandsDamageEffect() {
public ScouringSandsDamageEffect(ScouringSandsDamageEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ScouringSandsDamageEffect copy() {return new ScouringSandsDamageEffect(this);
public class SearingBlood extends CardImpl {
public SearingBlood(UUID ownerId) {
public SearingBlood(final SearingBlood card) {
public SearingBlood copy() {return new SearingBlood(this);
class SearingBloodEffect extends OneShotEffect {
public SearingBloodEffect() {
public SearingBloodEffect(final SearingBloodEffect effect) {
public SearingBloodEffect copy() {return new SearingBloodEffect(this);
public boolean apply(Game game, Ability source) {return new DamageTargetEffect(2).apply(game, source);
class SearingBloodDelayedTriggeredAbility extends DelayedTriggeredAbility {
public SearingBloodDelayedTriggeredAbility(UUID target) {
public SearingBloodDelayedTriggeredAbility(SearingBloodDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public SearingBloodDelayedTriggeredAbility copy() {return new SearingBloodDelayedTriggeredAbility(this);
public String getRule() {return "When that creature dies this turn, {this} deals 3 damage to that creature's controller.";
class SearingBloodDelayedEffect extends OneShotEffect {
public SearingBloodDelayedEffect(UUID target) {
public SearingBloodDelayedEffect(final SearingBloodDelayedEffect effect) {
public SearingBloodDelayedEffect copy() {return new SearingBloodDelayedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ServantOfTymaret extends CardImpl {
public ServantOfTymaret(UUID ownerId) {
public ServantOfTymaret(final ServantOfTymaret card) {
public ServantOfTymaret copy() {return new ServantOfTymaret(this);
class ServantOfTymaretEffect extends OneShotEffect {
public ServantOfTymaretEffect() {
public ServantOfTymaretEffect(final ServantOfTymaretEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ServantOfTymaretEffect copy() {return new ServantOfTymaretEffect(this);
public class SetessanOathsworn extends CardImpl {
public SetessanOathsworn(UUID ownerId) {
public SetessanOathsworn(final SetessanOathsworn card) {
public SetessanOathsworn copy() {return new SetessanOathsworn(this);
public class SetessanStarbreaker extends CardImpl {
public SetessanStarbreaker(UUID ownerId) {
public SetessanStarbreaker(final SetessanStarbreaker card) {
public SetessanStarbreaker copy() {return new SetessanStarbreaker(this);
public class ShrikeHarpy extends CardImpl {
public ShrikeHarpy(UUID ownerId) {
public ShrikeHarpy(final ShrikeHarpy card) {
public ShrikeHarpy copy() {return new ShrikeHarpy(this);
public class SilentSentinel extends CardImpl {
public SilentSentinel(UUID ownerId) {
public SilentSentinel(final SilentSentinel card) {
public SilentSentinel copy() {return new SilentSentinel(this);
public class SirenOfTheFangedCoast extends CardImpl {
public SirenOfTheFangedCoast(UUID ownerId) {
public SirenOfTheFangedCoast(final SirenOfTheFangedCoast card) {
public SirenOfTheFangedCoast copy() {return new SirenOfTheFangedCoast(this);
public class SirenOfTheSilentSong extends CardImpl {
public SirenOfTheSilentSong(UUID ownerId) {
public SirenOfTheSilentSong(final SirenOfTheSilentSong card) {
public SirenOfTheSilentSong copy() {return new SirenOfTheSilentSong(this);
public class SirenSongLyre extends CardImpl {
public SirenSongLyre(UUID ownerId) {
public SirenSongLyre(final SirenSongLyre card) {
public SirenSongLyre copy() {return new SirenSongLyre(this);
public class Skyreaping extends CardImpl {
public Skyreaping(UUID ownerId) {
public Skyreaping(final Skyreaping card) {
public Skyreaping copy() {return new Skyreaping(this);
public class SnakeOfTheGoldenGrove extends CardImpl {
public SnakeOfTheGoldenGrove(UUID ownerId) {
public SnakeOfTheGoldenGrove(final SnakeOfTheGoldenGrove card) {
public SnakeOfTheGoldenGrove copy() {return new SnakeOfTheGoldenGrove(this);
public class SphinxsDisciple extends CardImpl {
public SphinxsDisciple(UUID ownerId) {
public SphinxsDisciple(final SphinxsDisciple card) {
public SphinxsDisciple copy() {return new SphinxsDisciple(this);
public class StormcallerOfKeranos extends CardImpl {
public StormcallerOfKeranos(UUID ownerId) {
public StormcallerOfKeranos(final StormcallerOfKeranos card) {
public StormcallerOfKeranos copy() {return new StormcallerOfKeranos(this);
public class StratusWalk extends CardImpl {
public StratusWalk(UUID ownerId) {
public StratusWalk(final StratusWalk card) {
public StratusWalk copy() {return new StratusWalk(this);
public class SuddenStorm extends CardImpl {
public SuddenStorm(UUID ownerId) {
public SuddenStorm(final SuddenStorm card) {
public SuddenStorm copy() {return new SuddenStorm(this);
public class Sunbond extends CardImpl {
public Sunbond(UUID ownerId) {
public Sunbond(final Sunbond card) {
public Sunbond copy() {return new Sunbond(this);
class SunbondEffect extends OneShotEffect {
public SunbondEffect() {
public SunbondEffect(final SunbondEffect effect) {
public SunbondEffect copy() {return new SunbondEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.P1P1.createInstance(lifeGained)).apply(game, source);return false;
public class SwordwiseCentaur extends CardImpl {
public SwordwiseCentaur(UUID ownerId) {
public SwordwiseCentaur(final SwordwiseCentaur card) {
public SwordwiseCentaur copy() {return new SwordwiseCentaur(this);
public class TempleOfEnlightenment extends CardImpl {
public TempleOfEnlightenment(UUID ownerId) {
public TempleOfEnlightenment(final TempleOfEnlightenment card) {
public TempleOfEnlightenment copy() {return new TempleOfEnlightenment(this);
public class TempleOfMalice extends CardImpl {
public TempleOfMalice(UUID ownerId) {
public TempleOfMalice(final TempleOfMalice card) {
public TempleOfMalice copy() {return new TempleOfMalice(this);
public class TempleOfPlenty extends CardImpl {
public TempleOfPlenty(UUID ownerId) {
public TempleOfPlenty(final TempleOfPlenty card) {
public TempleOfPlenty copy() {return new TempleOfPlenty(this);
public class ThassasRebuff extends CardImpl {
public ThassasRebuff(UUID ownerId) {
public ThassasRebuff(final ThassasRebuff card) {
public ThassasRebuff copy() {return new ThassasRebuff(this);
public class ThunderBrute extends CardImpl {
public ThunderBrute(UUID ownerId) {
public ThunderBrute(final ThunderBrute card) {
public ThunderBrute copy() {return new ThunderBrute(this);
public class ThunderousMight extends CardImpl {
public ThunderousMight(UUID ownerId) {
public ThunderousMight(final ThunderousMight card) {
public ThunderousMight copy() {return new ThunderousMight(this);
public class ThunderousMight extends CardImpl {
public ThunderousMight(UUID ownerId) {
public ThunderousMight(final ThunderousMight card) {
public ThunderousMight copy() {return new ThunderousMight(this);
public class Tromokratis extends CardImpl {
public Tromokratis(UUID ownerId) {
public Tromokratis(final Tromokratis card) {
public Tromokratis copy() {return new Tromokratis(this);
class CantBeBlockedUnlessAllEffect extends RestrictionEffect {
public CantBeBlockedUnlessAllEffect() {
public CantBeBlockedUnlessAllEffect(final CantBeBlockedUnlessAllEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getId().equals(source.getSourceId());
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return false;return false;return false;return true;
public boolean canBeBlockedCheckAfter(Permanent attacker, Ability source, Game game) {return false;return true;
public CantBeBlockedUnlessAllEffect copy() {return new CantBeBlockedUnlessAllEffect(this);
public class UnravelTheAEther extends CardImpl {
public UnravelTheAEther(UUID ownerId) {
public UnravelTheAEther(final UnravelTheAEther card) {
public UnravelTheAEther copy() {return new UnravelTheAEther(this);
class UnravelTheAEtherShuffleIntoLibraryEffect extends OneShotEffect {
public UnravelTheAEtherShuffleIntoLibraryEffect() {
public UnravelTheAEtherShuffleIntoLibraryEffect(final UnravelTheAEtherShuffleIntoLibraryEffect effect) {
public UnravelTheAEtherShuffleIntoLibraryEffect copy() {return new UnravelTheAEtherShuffleIntoLibraryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VanguardOfBrimaz extends CardImpl {
public VanguardOfBrimaz(UUID ownerId) {
public VanguardOfBrimaz(final VanguardOfBrimaz card) {
public VanguardOfBrimaz copy() {return new VanguardOfBrimaz(this);
public class VortexElemental extends CardImpl {
public VortexElemental(UUID ownerId) {
public VortexElemental(final VortexElemental card) {
public VortexElemental copy() {return new VortexElemental(this);
class VortexElementalEffect extends OneShotEffect {
public VortexElementalEffect() {
public VortexElementalEffect(final VortexElementalEffect effect) {
public VortexElementalEffect copy() {return new VortexElementalEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WarchanterOfMogis extends CardImpl {
public WarchanterOfMogis(UUID ownerId) {
public WarchanterOfMogis(final WarchanterOfMogis card) {
public WarchanterOfMogis copy() {return new WarchanterOfMogis(this);
public class WeightOfTheUnderworld extends CardImpl {
public WeightOfTheUnderworld(UUID ownerId) {
public WeightOfTheUnderworld(final WeightOfTheUnderworld card) {
public WeightOfTheUnderworld copy() {return new WeightOfTheUnderworld(this);
public class XenagosGodOfRevels extends CardImpl {
public XenagosGodOfRevels(UUID ownerId) {
public XenagosGodOfRevels(final XenagosGodOfRevels card) {
public XenagosGodOfRevels copy() {return new XenagosGodOfRevels(this);
class XenagosGodOfRevelsEffect extends OneShotEffect {
public XenagosGodOfRevelsEffect() {
public XenagosGodOfRevelsEffect(final XenagosGodOfRevelsEffect effect) {
public XenagosGodOfRevelsEffect copy() {return new XenagosGodOfRevelsEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class AkkiAvalanchers extends CardImpl {
public AkkiAvalanchers(UUID ownerId) {
public AkkiAvalanchers(final AkkiAvalanchers card) {
public AkkiAvalanchers copy() {return new AkkiAvalanchers(this);
public class AkkiCoalflinger extends CardImpl {
public AkkiCoalflinger (UUID ownerId) {
public AkkiCoalflinger (final AkkiCoalflinger card) {
public AkkiCoalflinger copy() {return new AkkiCoalflinger(this);
public class AkkiLavarunner extends CardImpl {
public AkkiLavarunner(UUID ownerId) {
public AkkiLavarunner(final AkkiLavarunner card) {
public AkkiLavarunner copy() {return new AkkiLavarunner(this);
class AkkiLavarunnerAbility extends TriggeredAbilityImpl {
public AkkiLavarunnerAbility() {
public AkkiLavarunnerAbility(final AkkiLavarunnerAbility ability) {
public AkkiLavarunnerAbility copy() {return new AkkiLavarunnerAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return damageEvent.isCombatDamage() && this.sourceId.equals(event.getSourceId());
public String getRule() {return "Whenever {this} deals damage to an opponent, flip it.";
class TokTokVolcanoBorn extends Token {
TokTokVolcanoBorn() {
class TokTokVolcanoBornEffect extends ReplacementEffectImpl {
TokTokVolcanoBornEffect() {
TokTokVolcanoBornEffect(final TokTokVolcanoBornEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public TokTokVolcanoBornEffect copy() {return new TokTokVolcanoBornEffect(this);
public class AkkiRockspeaker extends CardImpl {
public AkkiRockspeaker(UUID ownerId) {
public AkkiRockspeaker(final AkkiRockspeaker card) {
public AkkiRockspeaker copy() {return new AkkiRockspeaker(this);
public class AkkiUnderminer extends CardImpl {
public AkkiUnderminer (UUID ownerId) {
public AkkiUnderminer (final AkkiUnderminer card) {
public AkkiUnderminer copy() {return new AkkiUnderminer(this);
class AkkiUnderminerAbility extends TriggeredAbilityImpl {
public AkkiUnderminerAbility() {
public AkkiUnderminerAbility(final AkkiUnderminerAbility ability) {
public AkkiUnderminerAbility copy() {return new AkkiUnderminerAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, that player sacrifices a permanent.";
public class AshenSkinZubera extends CardImpl {
public AshenSkinZubera(UUID ownerId) {
public AshenSkinZubera(final AshenSkinZubera card) {
public AshenSkinZubera copy() {return new AshenSkinZubera(this);
public class AuraOfDominion extends CardImpl {
public AuraOfDominion(UUID ownerId) {
public AuraOfDominion(final AuraOfDominion card) {
public AuraOfDominion copy() {return new AuraOfDominion(this);
public class AzamiLadyOfScrolls extends CardImpl {
public AzamiLadyOfScrolls(UUID ownerId) {
public AzamiLadyOfScrolls(final AzamiLadyOfScrolls card) {
public AzamiLadyOfScrolls copy() {return new AzamiLadyOfScrolls(this);
public class AzusaLostButSeeking extends CardImpl {
public AzusaLostButSeeking (UUID ownerId) {
public AzusaLostButSeeking (final AzusaLostButSeeking card) {
public AzusaLostButSeeking copy() {return new AzusaLostButSeeking(this);
public class BattleMadRonin extends CardImpl {
public BattleMadRonin(UUID ownerId) {
public BattleMadRonin(final BattleMadRonin card) {
public BattleMadRonin copy() {return new BattleMadRonin(this);
public class Befoul extends CardImpl {
public Befoul (UUID ownerId) {
public Befoul (final Befoul card) {
public Befoul copy() {return new Befoul(this);
public class BenBenAkkiHermit extends CardImpl {
public BenBenAkkiHermit (UUID ownerId) {
public BenBenAkkiHermit (final BenBenAkkiHermit card) {
public BenBenAkkiHermit copy() {return new BenBenAkkiHermit(this);
public class BlessedBreath extends CardImpl {
public BlessedBreath(UUID ownerId) {
public BlessedBreath(final BlessedBreath card) {
public BlessedBreath copy() {return new BlessedBreath(this);
public class BlindWithAnger extends CardImpl {
public BlindWithAnger(UUID ownerId) {
public BlindWithAnger(final BlindWithAnger card) {
public BlindWithAnger copy() {return new BlindWithAnger(this);
public class BloodRites extends CardImpl {
public BloodRites(UUID ownerId) {
public BloodRites(final BloodRites card) {
public BloodRites copy() {return new BloodRites(this);
public class BloodSpeaker extends CardImpl {
public BloodSpeaker (UUID ownerId) {
public BloodSpeaker (final BloodSpeaker card) {
public BloodSpeaker copy() {return new BloodSpeaker(this);
public class BloodthirstyOgre extends CardImpl {
public BloodthirstyOgre(UUID ownerId) {
public BloodthirstyOgre(final BloodthirstyOgre card) {
public BloodthirstyOgre copy() {return new BloodthirstyOgre(this);return new BudokaGardener(this);
public boolean apply(Game game, Ability source) {return true;return false;return new BudokaGardenerEffect(this);
public class BurrGrafter extends CardImpl {
public BurrGrafter(UUID ownerId) {
public BurrGrafter(final BurrGrafter card) {
public BurrGrafter copy() {return new BurrGrafter(this);
public class BushiTenderfoot extends CardImpl {
public BushiTenderfoot(UUID ownerId) {
public BushiTenderfoot(final BushiTenderfoot card) {
public BushiTenderfoot copy() {return new BushiTenderfoot(this);
class KenzoTheHardhearted extends Token {
KenzoTheHardhearted() {
public class CageOfHands extends CardImpl {
public CageOfHands (UUID ownerId) {
public CageOfHands (final CageOfHands card) {
public CageOfHands copy() {return new CageOfHands(this);
class CageOfHandsEffect extends RestrictionEffect {
public CageOfHandsEffect() {
public CageOfHandsEffect(final CageOfHandsEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canAttack(Game game) {return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public CageOfHandsEffect copy() {return new CageOfHandsEffect(this);
public class CallousDeceiver extends CardImpl {
public CallousDeceiver(UUID ownerId) {
public CallousDeceiver(final CallousDeceiver card) {
public CallousDeceiver copy() {return new CallousDeceiver(this);
class CallousDeceiverEffect extends OneShotEffect {
public CallousDeceiverEffect() {
public CallousDeceiverEffect(final CallousDeceiverEffect effect) {
public CallousDeceiverEffect copy() {return new CallousDeceiverEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CallToGlory extends CardImpl {
public CallToGlory(UUID ownerId) {
public CallToGlory(final CallToGlory card) {
public CallToGlory copy() {return new CallToGlory(this);
class CalltoGloryFirstEffect extends OneShotEffect {
public CalltoGloryFirstEffect() {
public CalltoGloryFirstEffect(final CalltoGloryFirstEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CalltoGloryFirstEffect copy() {return new CalltoGloryFirstEffect(this);
public class CandlesGlow extends CardImpl {
public CandlesGlow(UUID ownerId) {
public CandlesGlow(final CandlesGlow card) {
public CandlesGlow copy() {return new CandlesGlow(this);
class CandlesGlowPreventDamageTargetEffect extends PreventionEffectImpl {
public CandlesGlowPreventDamageTargetEffect(Duration duration) {
public CandlesGlowPreventDamageTargetEffect(final CandlesGlowPreventDamageTargetEffect effect) {
public CandlesGlowPreventDamageTargetEffect copy() {return new CandlesGlowPreventDamageTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class Cleanfall extends CardImpl {
public Cleanfall(UUID ownerId) {
public Cleanfall(final Cleanfall card) {
public Cleanfall copy() {return new Cleanfall(this);
public class CloudcrestLake extends CardImpl {
public CloudcrestLake(UUID ownerId) {
public CloudcrestLake(final CloudcrestLake card) {
public CloudcrestLake copy() {return new CloudcrestLake(this);
public class CommuneWithNature extends CardImpl {
public CommuneWithNature (UUID ownerId) {
public CommuneWithNature (final CommuneWithNature card) {
public CommuneWithNature copy() {return new CommuneWithNature(this);
public class ConsumingVortex extends CardImpl {
public ConsumingVortex(UUID ownerId) {
public ConsumingVortex(final ConsumingVortex card) {
public ConsumingVortex copy() {return new ConsumingVortex(this);
public class CounselOfTheSoratami extends CardImpl {
public CounselOfTheSoratami (UUID ownerId) {
public CounselOfTheSoratami (final CounselOfTheSoratami card) {
public CounselOfTheSoratami copy() {return new CounselOfTheSoratami(this);
public class CranialExtraction extends CardImpl {
public CranialExtraction(UUID ownerId) {
public CranialExtraction(final CranialExtraction card) {
public CranialExtraction copy() {return new CranialExtraction(this);
class CranialExtractionEffect extends SearchTargetGraveyardHandLibraryForCardNameAndExileEffect {
CranialExtractionEffect() {
CranialExtractionEffect(final CranialExtractionEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public CranialExtractionEffect copy() {return new CranialExtractionEffect(this);
public String getText(Mode mode) {return "Name a nonland card. " + super.getText(mode);
public class CruelDeceiver extends CardImpl {
public CruelDeceiver(UUID ownerId) {
public CruelDeceiver(final CruelDeceiver card) {
public CruelDeceiver copy() {return new CruelDeceiver(this);
class CruelDeceiverEffect extends OneShotEffect {
public CruelDeceiverEffect() {
public CruelDeceiverEffect(final CruelDeceiverEffect effect) {
public CruelDeceiverEffect copy() {return new CruelDeceiverEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CrushingPain extends CardImpl {
public CrushingPain (UUID ownerId) {
public CrushingPain (final CrushingPain card) {
public CrushingPain copy() {return new CrushingPain(this);
public class CursedRonin extends CardImpl {
public CursedRonin (UUID ownerId) {
public CursedRonin (final CursedRonin card) {
public CursedRonin copy() {return new CursedRonin(this);
public class CutTheTethers extends CardImpl {
public CutTheTethers(UUID ownerId) {
public CutTheTethers(final CutTheTethers card) {
public CutTheTethers copy() {return new CutTheTethers(this);
class CutTheTethersEffect extends OneShotEffect {
public CutTheTethersEffect() {this.staticText = "For each Spirit, return it to its owner's hand unless that player pays {3}";
public CutTheTethersEffect(final CutTheTethersEffect effect) {
public CutTheTethersEffect copy() {return new CutTheTethersEffect(this);
public boolean apply(Game game, Ability source) {return true;return new DanceOfShadows(this);
public class DevouringGreed extends CardImpl {
public DevouringGreed(UUID ownerId) {
public DevouringGreed(final DevouringGreed card) {
public DevouringGreed copy() {return new DevouringGreed(this);
class DevouringGreedEffect extends OneShotEffect {
public DevouringGreedEffect() {
public DevouringGreedEffect(final DevouringGreedEffect effect) {
public DevouringGreedEffect copy() {return new DevouringGreedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DevouringRage extends CardImpl {
public DevouringRage(UUID ownerId) {
public DevouringRage(final DevouringRage card) {
public DevouringRage copy() {return new DevouringRage(this);
class DevouringRageEffect extends OneShotEffect {
public DevouringRageEffect() {
public DevouringRageEffect(final DevouringRageEffect effect) {
public DevouringRageEffect copy() {return new DevouringRageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DosanTheFallingLeaf extends CardImpl {
public DosanTheFallingLeaf(UUID ownerId) {
public DosanTheFallingLeaf(final DosanTheFallingLeaf card) {
public DosanTheFallingLeaf copy() {return new DosanTheFallingLeaf(this);
DosanTheFallingLeafEffect() {
DosanTheFallingLeafEffect(final DosanTheFallingLeafEffect effect) {
public boolean applies(GameEvent event, Ability source, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL && !game.getActivePlayerId().equals(event.getPlayerId());
public boolean apply(Game game, Ability source) {return true;
public DosanTheFallingLeafEffect copy() {return new DosanTheFallingLeafEffect(this);
public class DrippingTongueZubera extends CardImpl {
public DrippingTongueZubera (UUID ownerId) {
public DrippingTongueZubera (final DrippingTongueZubera card) {
public DrippingTongueZubera copy() {return new DrippingTongueZubera(this);
public class Earthshaker extends CardImpl {
public Earthshaker(UUID ownerId) {
public Earthshaker(final Earthshaker card) {
public Earthshaker copy() {return new Earthshaker(this);
public class EerieProcession extends CardImpl {
public EerieProcession(UUID ownerId) {
public EerieProcession(final EerieProcession card) {
public EerieProcession copy() {return new EerieProcession(this);
public class EiganjoCastle extends CardImpl {
public EiganjoCastle(UUID ownerId) {
public EiganjoCastle(final EiganjoCastle card) {
public EiganjoCastle copy() {return new EiganjoCastle(this);
public class EightAndAHalfTails extends CardImpl {
public EightAndAHalfTails(UUID ownerId) {
public EightAndAHalfTails(final EightAndAHalfTails card) {
public EightAndAHalfTails copy() {return new EightAndAHalfTails(this);
public class EmberFistZubera extends CardImpl {
public EmberFistZubera (UUID ownerId) {
public EmberFistZubera (final EmberFistZubera card) {
public EmberFistZubera copy() {return new EmberFistZubera(this);
public class EtherealHaze extends CardImpl {
public EtherealHaze (UUID ownerId) {
public EtherealHaze (final EtherealHaze card) {
public EtherealHaze copy() {return new EtherealHaze(this);
public class EyeOfNowhere extends CardImpl {
public EyeOfNowhere (UUID ownerId) {
public EyeOfNowhere (final EyeOfNowhere card) {
public EyeOfNowhere copy() {return new EyeOfNowhere(this);
public class FeastOfWorms extends CardImpl {
public FeastOfWorms (UUID ownerId) {
public FeastOfWorms (final FeastOfWorms card) {
public FeastOfWorms copy() {return new FeastOfWorms(this);
class FeastOfWormsEffect extends OneShotEffect {
FeastOfWormsEffect() {
FeastOfWormsEffect(FeastOfWormsEffect effect) {
public FeastOfWormsEffect copy() {return new FeastOfWormsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FeralDeceiver extends CardImpl {
public FeralDeceiver(UUID ownerId) {
public FeralDeceiver(final FeralDeceiver card) {
public FeralDeceiver copy() {return new FeralDeceiver(this);
class FeralDeceiverAbility extends LimitedTimesPerTurnActivatedAbility {
public FeralDeceiverAbility(Zone zone, Effect effect, Cost cost) {
public FeralDeceiverAbility(FeralDeceiverAbility ability) {
public FeralDeceiverAbility copy() {return new FeralDeceiverAbility(this);
public boolean checkIfClause(Game game) {return true;return false;
public String getRule() {return "{2}: Reveal the top card of your library. If it's a land card, {this} gets +2/+2 and gains trample until end of turn. Activate this ability only once each turn.";
public class FieldOfReality extends CardImpl {
public FieldOfReality(UUID ownerId) {
public FieldOfReality(final FieldOfReality card) {
public FieldOfReality copy() {return new FieldOfReality(this);
public class FloatingDreamZubera extends CardImpl {
public FloatingDreamZubera(UUID ownerId) {
public FloatingDreamZubera(final FloatingDreamZubera card) {
public FloatingDreamZubera copy() {return new FloatingDreamZubera(this);
class ZuberasDiedWatcher extends Watcher {
public ZuberasDiedWatcher() {
public ZuberasDiedWatcher(final ZuberasDiedWatcher watcher) {
public ZuberasDiedWatcher copy() {return new ZuberasDiedWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
class ZuberasDiedDynamicValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return watcher.zuberasDiedThisTurn;
public ZuberasDiedDynamicValue copy() {return new ZuberasDiedDynamicValue();
public String toString() {return "1";
public String getMessage() {return "Zubera that died this turn";
public class ForbiddenOrchard extends CardImpl {
public ForbiddenOrchard (UUID ownerId) {
public ForbiddenOrchard (final ForbiddenOrchard card) {
public ForbiddenOrchard copy() {return new ForbiddenOrchard(this);
class ForbiddenOrchardTriggeredAbility extends TriggeredAbilityImpl {
public ForbiddenOrchardTriggeredAbility() {
public ForbiddenOrchardTriggeredAbility(final ForbiddenOrchardTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId().equals(getSourceId());
public String getRule() {return new StringBuilder("Whenever you tap {this} for mana, ").append(super.getRule()).toString() ;
public ForbiddenOrchardTriggeredAbility copy() {return new ForbiddenOrchardTriggeredAbility(this);
public class Frostwielder extends CardImpl {
public Frostwielder(UUID ownerId) {
public Frostwielder(final Frostwielder card) {
public Frostwielder copy() {return new Frostwielder(this);
public class GaleForce extends CardImpl {
public GaleForce(UUID ownerId) {
public GaleForce(final GaleForce card) {
public GaleForce copy() {return new GaleForce(this);
public class GibberingKami extends CardImpl {
public GibberingKami(UUID ownerId) {
public GibberingKami(final GibberingKami card) {
public GibberingKami copy() {return new GibberingKami(this);return new GiftsUngiven(this);return new GiftsUngivenEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;return new GiftsUngivenTarget(this);
public boolean canTarget(UUID id, Cards cards, Game game) {return false;return filter.match(card, game);return false;
public class GlimpseOfNature extends CardImpl {
public GlimpseOfNature (UUID ownerId) {
public GlimpseOfNature (final GlimpseOfNature card) {
public GlimpseOfNature copy() {return new GlimpseOfNature(this);
class GlimpseOfNatureTriggeredAbility extends DelayedTriggeredAbility {
public GlimpseOfNatureTriggeredAbility() {
public GlimpseOfNatureTriggeredAbility(GlimpseOfNatureTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public GlimpseOfNatureTriggeredAbility copy() {return new GlimpseOfNatureTriggeredAbility(this);
public String getRule() {return "Whenever you cast a creature spell this turn, " + modes.getText();return new GodoBanditWarlord(this);
public void reset(Game game) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks for the first time each turn, " + super.getRule();return new GodoBanditWarlordAttacksTriggeredAbility(this);
class AdditionalCombatPhaseEffect extends OneShotEffect {
public AdditionalCombatPhaseEffect() {
public AdditionalCombatPhaseEffect(final AdditionalCombatPhaseEffect effect) {
public AdditionalCombatPhaseEffect copy() {return new AdditionalCombatPhaseEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class GracefulAdept extends CardImpl {
public GracefulAdept(UUID ownerId) {
public GracefulAdept(final GracefulAdept card) {
public GracefulAdept copy() {return new GracefulAdept(this);
public class GuardianOfSolitude extends CardImpl {
public GuardianOfSolitude(UUID ownerId) {
public GuardianOfSolitude(final GuardianOfSolitude card) {
public GuardianOfSolitude copy() {return new GuardianOfSolitude(this);
public class GutwrencherOni extends CardImpl {
public GutwrencherOni(UUID ownerId) {
public GutwrencherOni(final GutwrencherOni card) {
public GutwrencherOni copy() {return new GutwrencherOni(this);
public class HairStrungKoto extends CardImpl {
public HairStrungKoto (UUID ownerId) {
public HairStrungKoto (final HairStrungKoto card) {
public HairStrungKoto copy() {return new HairStrungKoto(this);
public class HallOfTheBanditLord extends CardImpl {
public HallOfTheBanditLord(UUID ownerId) {
public HallOfTheBanditLord(final HallOfTheBanditLord card) {
public HallOfTheBanditLord copy() {return new HallOfTheBanditLord(this);
class HallOfTheBanditLordWatcher extends Watcher {
HallOfTheBanditLordWatcher(Ability source) {
HallOfTheBanditLordWatcher(final HallOfTheBanditLordWatcher watcher) {
public HallOfTheBanditLordWatcher copy() {return new HallOfTheBanditLordWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
public class HanabiBlast extends CardImpl {
public HanabiBlast (UUID ownerId) {
public HanabiBlast (final HanabiBlast card) {
public HanabiBlast copy() {return new HanabiBlast(this);
public class HanaKami extends CardImpl {
public HanaKami(UUID ownerId) {
public HanaKami(final HanaKami card) {
public HanaKami copy() {return new HanaKami(this);
public class Hankyu extends CardImpl {
public Hankyu(UUID ownerId) {
public class HarshDeceiver extends CardImpl {
public HarshDeceiver(UUID ownerId) {
public HarshDeceiver(final HarshDeceiver card) {
public HarshDeceiver copy() {return new HarshDeceiver(this);
class HarshDeceiverAbility extends LimitedTimesPerTurnActivatedAbility {
public HarshDeceiverAbility(Zone zone, Effect effect, Cost cost) {
public HarshDeceiverAbility(HarshDeceiverAbility ability) {
public HarshDeceiverAbility copy() {return new HarshDeceiverAbility(this);
public boolean checkIfClause(Game game) {return true;return false;
public String getRule() {return "{2}: Reveal the top card of your library. If it's a land card, untap {this} and it gets +1/+1 until end of turn. Activate this ability only once each turn.";
public class HeartbeatOfSpring extends CardImpl {
public HeartbeatOfSpring(UUID ownerId) {
public HeartbeatOfSpring(final HeartbeatOfSpring card) {
public HeartbeatOfSpring copy() {return new HeartbeatOfSpring(this);
public class HearthKami extends CardImpl {
public HearthKami(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public HearthKami(final HearthKami card) {
public HearthKami copy() {return new HearthKami(this);
public class HeWhoHungers extends CardImpl {
public HeWhoHungers(UUID ownerId) {
public HeWhoHungers(final HeWhoHungers card) {
public HeWhoHungers copy() {return new HeWhoHungers(this);
public class HideousLaughter extends CardImpl {
public HideousLaughter(UUID ownerId) {
public HideousLaughter(final HideousLaughter card) {
public HideousLaughter copy() {return new HideousLaughter(this);
public class HikariTwilightGuardian extends CardImpl {
public HikariTwilightGuardian(UUID ownerId) {effect.setText("you may exile {this}. If you do, return it to the battlefield under its owner's control at the beginning of the next end step");
public HikariTwilightGuardian(final HikariTwilightGuardian card) {
public HikariTwilightGuardian copy() {return new HikariTwilightGuardian(this);
public class HisokasDefiance extends CardImpl {
public HisokasDefiance(UUID ownerId) {
public HisokasDefiance(final HisokasDefiance card) {
public HisokasDefiance copy() {return new HisokasDefiance(this);
public class HisokasGuard extends CardImpl {
public HisokasGuard(UUID ownerId) {
public HisokasGuard(final HisokasGuard card) {
public HisokasGuard copy() {return new HisokasGuard(this);
class HisokasGuardGainAbilityTargetEffect extends ContinuousEffectImpl {
public HisokasGuardGainAbilityTargetEffect() {
public HisokasGuardGainAbilityTargetEffect(final HisokasGuardGainAbilityTargetEffect effect) {
public HisokasGuardGainAbilityTargetEffect copy() {return new HisokasGuardGainAbilityTargetEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;return false;
public class HoldTheLine extends CardImpl {
public HoldTheLine(UUID ownerId) {
public HoldTheLine(final HoldTheLine card) {
public HoldTheLine copy() {return new HoldTheLine(this);
public class HondenOfCleansingFire extends CardImpl {
public HondenOfCleansingFire(UUID ownerId) {
public HondenOfCleansingFire(final HondenOfCleansingFire card) {
public HondenOfCleansingFire copy() {return new HondenOfCleansingFire(this);
public class HondenOfInfiniteRage extends CardImpl {
public HondenOfInfiniteRage (UUID ownerId) {
public HondenOfInfiniteRage (final HondenOfInfiniteRage card) {
public HondenOfInfiniteRage copy() {return new HondenOfInfiniteRage(this);return new HondenOfLifesWeb(this);
public class HondenOfNightsReach extends CardImpl {
public HondenOfNightsReach(UUID ownerId) {
public HondenOfNightsReach(final HondenOfNightsReach card) {
public HondenOfNightsReach copy() {return new HondenOfNightsReach(this);
public class HondenOfSeeingWinds extends CardImpl {
public HondenOfSeeingWinds(UUID ownerId) {
public HondenOfSeeingWinds(final HondenOfSeeingWinds card) {
public HondenOfSeeingWinds copy() {return new HondenOfSeeingWinds(this);
public class HonorWornShaku extends CardImpl {
public HonorWornShaku(UUID ownerId) {
public HonorWornShaku(final HonorWornShaku card) {
public HonorWornShaku copy() {return new HonorWornShaku(this);
public class HorizonSeed extends CardImpl {
public HorizonSeed(UUID ownerId) {
public HorizonSeed(final HorizonSeed card) {
public HorizonSeed copy() {return new HorizonSeed(this);
public class HorobiDeathsWail extends CardImpl {
public HorobiDeathsWail(UUID ownerId) {
public HorobiDeathsWail(final HorobiDeathsWail card) {
public HorobiDeathsWail copy() {return new HorobiDeathsWail(this);
class HorobiDeathsWailAbility extends TriggeredAbilityImpl {
public HorobiDeathsWailAbility(Effect effect) {
public HorobiDeathsWailAbility(final HorobiDeathsWailAbility ability) {
public HorobiDeathsWailAbility copy() {return new HorobiDeathsWailAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature becomes the target of a spell or ability, destroy that creature.";return new HumbleBudoka(this);
public class HundredTalonKami extends CardImpl {
public HundredTalonKami (UUID ownerId) {
public HundredTalonKami (final HundredTalonKami card) {
public HundredTalonKami copy() {return new HundredTalonKami(this);
public class ImiStatue extends CardImpl {
public ImiStatue(UUID ownerId) {
public ImiStatue(final ImiStatue card) {
public ImiStatue copy() {return new ImiStatue(this);
class ImiStatueEffect extends RestrictionUntapNotMoreThanEffect {
public ImiStatueEffect() {
public ImiStatueEffect(final ImiStatueEffect effect) {
public boolean applies(Player player, Ability source, Game game) {return true;
public ImiStatueEffect copy() {return new ImiStatueEffect(this);
public class InameDeathAspect extends CardImpl {
public InameDeathAspect(UUID ownerId) {
public InameDeathAspect(final InameDeathAspect card) {
public InameDeathAspect copy() {return new InameDeathAspect(this);
class InameDeathAspectEffect extends SearchEffect {
public InameDeathAspectEffect() {
public InameDeathAspectEffect(final InameDeathAspectEffect effect) {
public InameDeathAspectEffect copy() {return new InameDeathAspectEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new InameLifeAspect(this);this.staticText = "you may exile it. If you do, return any number of target Spirit cards from your graveyard to your hand";return new InameLifeAspectEffect(this);
public boolean apply(Game game, Ability source) {if (controller.chooseUse(outcome, "Exile " + sourceObject.getLogName() + " to return Spirit cards?", source, game)) {return effect.apply(game, source);return true;return false;return new IndomitableWill(this);
public class InitiateOfBlood extends CardImpl {
public InitiateOfBlood(UUID ownerId) {
public InitiateOfBlood(final InitiateOfBlood card) {
public InitiateOfBlood copy() {return new InitiateOfBlood(this);
class GokaTheUnjust extends Token {
GokaTheUnjust() {return new JadeIdol(this);
public class JourneyersKite extends CardImpl {
public JourneyersKite (UUID ownerId) {
public JourneyersKite (final JourneyersKite card) {
public JourneyersKite copy() {return new JourneyersKite(this);
public class JoyousRespite extends CardImpl {
public JoyousRespite (UUID ownerId) {
public JoyousRespite (final JoyousRespite card) {
public JoyousRespite copy() {return new JoyousRespite(this);
public class JuganTheRisingStar extends CardImpl {
public JuganTheRisingStar(UUID ownerId) {
public JuganTheRisingStar(final JuganTheRisingStar card) {
public JuganTheRisingStar copy() {return new JuganTheRisingStar(this);
public class JukaiMessenger extends CardImpl {
public JukaiMessenger (UUID ownerId) {
public JukaiMessenger (final JukaiMessenger card) {
public JukaiMessenger copy() {return new JukaiMessenger(this);
public class JunkyoBell extends CardImpl {
public JunkyoBell(UUID ownerId) {
public JunkyoBell(final JunkyoBell card) {
public JunkyoBell copy() {return new JunkyoBell(this);return new JunkyoBellSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JushiApprentice extends CardImpl {
public JushiApprentice(UUID ownerId) {
public JushiApprentice(final JushiApprentice card) {
public JushiApprentice copy() {return new JushiApprentice(this);
class TomoyaTheRevealer extends Token {
TomoyaTheRevealer() {
public class KabutoMoth extends CardImpl {
public KabutoMoth(UUID ownerId) {
public KabutoMoth(final KabutoMoth card) {
public KabutoMoth copy() {return new KabutoMoth(this);
public class KamiOfAncientLaw extends CardImpl {
public KamiOfAncientLaw (UUID ownerId) {
public KamiOfAncientLaw (final KamiOfAncientLaw card) {
public KamiOfAncientLaw copy() {return new KamiOfAncientLaw(this);
public class KamiOfFiresRoar extends CardImpl {
public KamiOfFiresRoar(UUID ownerId) {
public KamiOfFiresRoar(final KamiOfFiresRoar card) {
public KamiOfFiresRoar copy() {return new KamiOfFiresRoar(this);
public class KamiOfLunacy extends CardImpl {
public KamiOfLunacy(UUID ownerId) {
public KamiOfLunacy(final KamiOfLunacy card) {
public KamiOfLunacy copy() {return new KamiOfLunacy(this);
public class KamiOfOldStone extends CardImpl {
public KamiOfOldStone (UUID ownerId) {
public KamiOfOldStone (final KamiOfOldStone card) {
public KamiOfOldStone copy() {return new KamiOfOldStone(this);
public class KamiOfTheHunt extends CardImpl {
public KamiOfTheHunt(UUID ownerId) {
public KamiOfTheHunt(final KamiOfTheHunt card) {
public KamiOfTheHunt copy() {return new KamiOfTheHunt(this);
public class KamiOfThePaintedRoad extends CardImpl {
public KamiOfThePaintedRoad(UUID ownerId) {
public KamiOfThePaintedRoad(final KamiOfThePaintedRoad card) {
public KamiOfThePaintedRoad copy() {return new KamiOfThePaintedRoad(this);
public class KamiOfThePalaceFields extends CardImpl {
public KamiOfThePalaceFields(UUID ownerId) {
public KamiOfThePalaceFields(final KamiOfThePalaceFields card) {
public KamiOfThePalaceFields copy() {return new KamiOfThePalaceFields(this);
public class KamiOfTheWaningMoon extends CardImpl {
public KamiOfTheWaningMoon(UUID ownerId) {
public KamiOfTheWaningMoon(final KamiOfTheWaningMoon card) {
public KamiOfTheWaningMoon copy() {return new KamiOfTheWaningMoon(this);
public class KamiOfTwistedReflection extends CardImpl {
public KamiOfTwistedReflection(UUID ownerId) {
public KamiOfTwistedReflection(final KamiOfTwistedReflection card) {
public KamiOfTwistedReflection copy() {return new KamiOfTwistedReflection(this);
public class KashiTribeReaver extends CardImpl {
public KashiTribeReaver(UUID ownerId) {
public KashiTribeReaver(final KashiTribeReaver card) {
public KashiTribeReaver copy() {return new KashiTribeReaver(this);
public class KikiJikiMirrorBreaker extends CardImpl {
public KikiJikiMirrorBreaker(UUID ownerId) {
public KikiJikiMirrorBreaker(final KikiJikiMirrorBreaker card) {
public KikiJikiMirrorBreaker copy() {return new KikiJikiMirrorBreaker(this);
class KikiJikiMirrorBreakerEffect extends OneShotEffect {
public KikiJikiMirrorBreakerEffect() {
public KikiJikiMirrorBreakerEffect(final KikiJikiMirrorBreakerEffect effect) {
public KikiJikiMirrorBreakerEffect copy() {return new KikiJikiMirrorBreakerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class KikuNightsFlower extends CardImpl {
public KikuNightsFlower (UUID ownerId) {
public KikuNightsFlower (final KikuNightsFlower card) {
public KikuNightsFlower copy() {return new KikuNightsFlower(this);
class KikuNightsFlowerEffect extends OneShotEffect {
public KikuNightsFlowerEffect() {
public KikuNightsFlowerEffect(final KikuNightsFlowerEffect effect) {
public KikuNightsFlowerEffect copy() {return new KikuNightsFlowerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class KitsuneBlademaster extends CardImpl {
public KitsuneBlademaster (UUID ownerId) {
public KitsuneBlademaster (final KitsuneBlademaster card) {
public KitsuneBlademaster copy() {return new KitsuneBlademaster(this);
public class KitsuneDiviner extends CardImpl {
public KitsuneDiviner (UUID ownerId) {
public KitsuneDiviner (final KitsuneDiviner card) {
public KitsuneDiviner copy() {return new KitsuneDiviner(this);
public class KitsuneHealer extends CardImpl {
public KitsuneHealer(UUID ownerId) {
public KitsuneHealer(final KitsuneHealer card) {
public KitsuneHealer copy() {return new KitsuneHealer(this);
public class KitsuneMystic extends CardImpl {
public KitsuneMystic(UUID ownerId) {
public KitsuneMystic(final KitsuneMystic card) {
public KitsuneMystic copy() {return new KitsuneMystic(this);
class AutumnTailKitsuneSage extends Token {
AutumnTailKitsuneSage() {
class AttachmentAttachedToCardTypePredicate implements Predicate<Permanent> {
public AttachmentAttachedToCardTypePredicate(CardType cardType) {
public boolean apply(Permanent input, Game game) {return true;return false;
public String toString() {return "AttachmentAttachedToCardType(" + cardType + ')';
class AutumnTailEffect extends OneShotEffect {
public AutumnTailEffect() {
public AutumnTailEffect(final AutumnTailEffect effect) {
public AutumnTailEffect copy() {return new AutumnTailEffect(this);
public boolean apply(Game game, Ability source) {return false;return creature.addAttachment(aura.getId(), game);return false;return new KitsuneRiftwalker(this);
public class KodamaOfTheNorthTree extends CardImpl {
public KodamaOfTheNorthTree (UUID ownerId) {
public KodamaOfTheNorthTree (final KodamaOfTheNorthTree card) {
public KodamaOfTheNorthTree copy() {return new KodamaOfTheNorthTree(this);
public class KodamaOfTheSouthTree extends CardImpl {
public KodamaOfTheSouthTree(UUID ownerId) {
public KodamaOfTheSouthTree(final KodamaOfTheSouthTree card) {
public KodamaOfTheSouthTree copy() {return new KodamaOfTheSouthTree(this);
public class KodamasMight extends CardImpl {
public KodamasMight(UUID ownerId) {
public KodamasMight(final KodamasMight card) {
public KodamasMight copy() {return new KodamasMight(this);
public class KokushoTheEveningStar extends CardImpl {
public KokushoTheEveningStar(UUID ownerId) {
public KokushoTheEveningStar(final KokushoTheEveningStar card) {
public KokushoTheEveningStar copy() {return new KokushoTheEveningStar(this);
class KokushoTheEveningStarEffect extends OneShotEffect {
public KokushoTheEveningStarEffect() {
public KokushoTheEveningStarEffect(final KokushoTheEveningStarEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public KokushoTheEveningStarEffect copy() {return new KokushoTheEveningStarEffect(this);
public class KondaLordOfEiganjo extends CardImpl {
public KondaLordOfEiganjo(UUID ownerId) {
public KondaLordOfEiganjo(final KondaLordOfEiganjo card) {
public KondaLordOfEiganjo copy() {return new KondaLordOfEiganjo(this);
public class KondasBanner extends CardImpl {
public KondasBanner(UUID ownerId) {
public KondasBanner(final KondasBanner card) {
public KondasBanner copy() {return new KondasBanner(this);
class KondasBannerTypeBoostEffect extends BoostAllEffect {
KondasBannerTypeBoostEffect() {
KondasBannerTypeBoostEffect(KondasBannerTypeBoostEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public KondasBannerTypeBoostEffect copy() {return new KondasBannerTypeBoostEffect(this);
class KondasBannerColorBoostEffect extends BoostAllEffect {
KondasBannerColorBoostEffect() {
KondasBannerColorBoostEffect(KondasBannerColorBoostEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public KondasBannerColorBoostEffect copy() {return new KondasBannerColorBoostEffect(this);
public class KondasHatamoto extends CardImpl{
public KondasHatamoto (UUID ownerId) {
public KondasHatamoto (final KondasHatamoto card) {
public KondasHatamoto copy() {return new KondasHatamoto(this);
public class KumanoMasterYamabushi extends CardImpl {
public KumanoMasterYamabushi(UUID ownerId) {
public KumanoMasterYamabushi(final KumanoMasterYamabushi card) {
public KumanoMasterYamabushi copy() {return new KumanoMasterYamabushi(this);
public class KumanosPupils extends CardImpl {
public KumanosPupils(UUID ownerId) {
public KumanosPupils(final KumanosPupils card) {
public KumanosPupils copy() {return new KumanosPupils(this);
public class KuroPitlord extends CardImpl {
public KuroPitlord(UUID ownerId) {
public KuroPitlord(final KuroPitlord card) {
public KuroPitlord copy() {return new KuroPitlord(this);
public class KusariGama extends CardImpl {
public KusariGama(UUID ownerId) {
public KusariGama(final KusariGama card) {
public KusariGama copy() {return new KusariGama(this);
class KusariGamaAbility extends TriggeredAbilityImpl {
public KusariGamaAbility() {
public KusariGamaAbility(final KusariGamaAbility ability) {
public KusariGamaAbility copy() {return new KusariGamaAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature deals damage to a blocking creature, {this} deals that much damage to each other creature defending player controls.";
class KusariGamaDamageEffect extends OneShotEffect {
public KusariGamaDamageEffect() {
public KusariGamaDamageEffect(final KusariGamaDamageEffect effect) {
public KusariGamaDamageEffect copy() {return new KusariGamaDamageEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class LavaSpike extends CardImpl {
public LavaSpike (UUID ownerId) {
public LavaSpike (final LavaSpike card) {
public LavaSpike copy() {return new LavaSpike(this);return new LiftedByClouds(this);
public class LongForgottenGohei extends CardImpl {
public LongForgottenGohei(UUID ownerId) {
public LongForgottenGohei(final LongForgottenGohei card) {
public LongForgottenGohei copy() {return new LongForgottenGohei(this);
public class Lure extends CardImpl {
public Lure (UUID ownerId) {
public Lure (final Lure card) {
public Lure copy() {return new Lure(this);
public class ManaSeism extends CardImpl {
public ManaSeism(UUID ownerId) {
public ManaSeism(final ManaSeism card) {
public ManaSeism copy() {return new ManaSeism(this);
class ManaSeismEffect extends OneShotEffect {
public ManaSeismEffect() {
public ManaSeismEffect(final ManaSeismEffect effect) {
public ManaSeismEffect copy() {return new ManaSeismEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class MarrowGnawer extends CardImpl {
public MarrowGnawer (UUID ownerId) {
public MarrowGnawer (final MarrowGnawer card) {
public MarrowGnawer copy() {return new MarrowGnawer(this);
public class MasakoTheHumorless extends CardImpl {
public MasakoTheHumorless(UUID ownerId) {
public MasakoTheHumorless(final MasakoTheHumorless card) {
public MasakoTheHumorless copy() {return new MasakoTheHumorless(this);
class BlockTappedEffect extends AsThoughEffectImpl {
public BlockTappedEffect() {
public BlockTappedEffect(final BlockTappedEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public BlockTappedEffect copy() {return new BlockTappedEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class MatsuTribeDecoy extends CardImpl {
public MatsuTribeDecoy(UUID ownerId) {
public MatsuTribeDecoy(final MatsuTribeDecoy card) {
public MatsuTribeDecoy copy() {return new MatsuTribeDecoy(this);
public class MelokuTheCloudedMirror extends CardImpl {
public MelokuTheCloudedMirror(UUID ownerId) {
public MelokuTheCloudedMirror(final MelokuTheCloudedMirror card) {
public MelokuTheCloudedMirror copy() {return new MelokuTheCloudedMirror(this);
class MelokuTheCloudedMirrorToken extends Token {
MelokuTheCloudedMirrorToken() {
public class MidnightCovenant extends CardImpl {
public MidnightCovenant(UUID ownerId) {
public MidnightCovenant(final MidnightCovenant card) {
public MidnightCovenant copy() {return new MidnightCovenant(this);
public class MinamoSchoolAtWatersEdge extends CardImpl {
public MinamoSchoolAtWatersEdge (UUID ownerId) {
public MinamoSchoolAtWatersEdge (final MinamoSchoolAtWatersEdge card) {
public MinamoSchoolAtWatersEdge copy() {return new MinamoSchoolAtWatersEdge(this);
public class Mindblaze extends CardImpl {
public Mindblaze (UUID ownerId) {
public Mindblaze (final Mindblaze card) {
public Mindblaze copy() {return new Mindblaze(this);
class MindblazeEffect extends OneShotEffect {
MindblazeEffect() {
MindblazeEffect(final MindblazeEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;return false;
public MindblazeEffect copy() {return new MindblazeEffect(this);
public class MoonringMirror extends CardImpl {
public MoonringMirror(UUID ownerId) {
public MoonringMirror(final MoonringMirror card) {
public MoonringMirror copy() {return new MoonringMirror(this);
class MoonringMirrorExileEffect extends OneShotEffect {
public MoonringMirrorExileEffect() {
public MoonringMirrorExileEffect(final MoonringMirrorExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MoonringMirrorExileEffect copy() {return new MoonringMirrorExileEffect(this);
class MoonringMirrorEffect extends OneShotEffect {
public MoonringMirrorEffect() {
public MoonringMirrorEffect(final MoonringMirrorEffect effect) {
public MoonringMirrorEffect copy() {return new MoonringMirrorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MossKami extends CardImpl {
public MossKami (UUID ownerId) {
public MossKami (final MossKami card) {
public MossKami copy() {return new MossKami(this);
public class MothriderSamurai extends CardImpl {
public MothriderSamurai (UUID ownerId) {
public MothriderSamurai (final MothriderSamurai card) {
public MothriderSamurai copy() {return new MothriderSamurai(this);
public class MyojinOfCleansingFire extends CardImpl {
public MyojinOfCleansingFire(UUID ownerId) {
public MyojinOfCleansingFire(final MyojinOfCleansingFire card) {
public MyojinOfCleansingFire copy() {return new MyojinOfCleansingFire(this);
public class MyojinOfInfiniteRage extends CardImpl {
public MyojinOfInfiniteRage(UUID ownerId) {
public MyojinOfInfiniteRage(final MyojinOfInfiniteRage card) {
public MyojinOfInfiniteRage copy() {return new MyojinOfInfiniteRage(this);return new MyojinOfLifesWeb(this);
public class MysticRestraints extends CardImpl {
public MysticRestraints(UUID ownerId) {
public MysticRestraints(final MysticRestraints card) {
public MysticRestraints copy() {return new MysticRestraints(this);
public class NagaoBoundByHonor extends CardImpl {
public NagaoBoundByHonor(UUID ownerId) {
public NagaoBoundByHonor(final NagaoBoundByHonor card) {
public NagaoBoundByHonor copy() {return new NagaoBoundByHonor(this);
public class NaturesWill extends CardImpl {
public NaturesWill(UUID ownerId) {
public NaturesWill(final NaturesWill card) {
public NaturesWill copy() {return new NaturesWill(this);
class NaturesWillTriggeredAbility extends TriggeredAbilityImpl {
public NaturesWillTriggeredAbility() {
public NaturesWillTriggeredAbility(final NaturesWillTriggeredAbility ability) {
public NaturesWillTriggeredAbility copy() {return new NaturesWillTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER || event.getType() == EventType.COMBAT_DAMAGE_STEP_POST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever one or more creatures you control deal combat damage to a player, " + super.getRule();
class NaturesWillEffect extends OneShotEffect {
public NaturesWillEffect() {
public NaturesWillEffect(final NaturesWillEffect effect) {
public NaturesWillEffect copy() {return new NaturesWillEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;
public class NezumiBoneReader extends CardImpl {
public NezumiBoneReader (UUID ownerId) {
public NezumiBoneReader (final NezumiBoneReader card) {
public NezumiBoneReader copy() {return new NezumiBoneReader(this);
public class NezumiCutthroat extends CardImpl {
public NezumiCutthroat(UUID ownerId) {
public NezumiCutthroat(final NezumiCutthroat card) {
public NezumiCutthroat copy() {return new NezumiCutthroat(this);
public class NezumiGraverobber extends CardImpl {
public NezumiGraverobber(UUID ownerId) {
public NezumiGraverobber(final NezumiGraverobber card) {
public NezumiGraverobber copy() {return new NezumiGraverobber(this);
class NezumiGraverobberFlipEffect extends OneShotEffect {
NezumiGraverobberFlipEffect() {
NezumiGraverobberFlipEffect(final NezumiGraverobberFlipEffect effect) {
public boolean apply(Game game, Ability source) {return new FlipSourceEffect(new NighteyesTheDesecratorToken()).apply(game, source);return false;
public NezumiGraverobberFlipEffect copy() {return new NezumiGraverobberFlipEffect(this);
class NighteyesTheDesecratorToken extends Token {
NighteyesTheDesecratorToken() {
public class NezumiRonin extends CardImpl {
public NezumiRonin (UUID ownerId) {
public NezumiRonin (final NezumiRonin card) {
public NezumiRonin copy() {return new NezumiRonin(this);
public class NezumiShortfang extends CardImpl {
public NezumiShortfang(UUID ownerId) {
public NezumiShortfang(final NezumiShortfang card) {
public NezumiShortfang copy() {return new NezumiShortfang(this);
class StabwhiskerTheOdious extends Token {
StabwhiskerTheOdious() {return new StabwhiskerLoseLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class CardsInTargetOpponentHandCondition implements Condition {
public CardsInTargetOpponentHandCondition() {
public CardsInTargetOpponentHandCondition (CountType type, int count ) {
public CardsInTargetOpponentHandCondition (CountType type, int count, Condition conditionToDecorate ) {
public boolean apply(Game game, Ability source) {return false;return conditionApplies;
public class NightDealings extends CardImpl {
public NightDealings(UUID ownerId) {
public NightDealings(final NightDealings card) {
public NightDealings copy() {return new NightDealings(this);
private class NightDealingsTriggeredAbility extends TriggeredAbilityImpl {
public NightDealingsTriggeredAbility() {
public NightDealingsTriggeredAbility(final NightDealingsTriggeredAbility ability) {
public NightDealingsTriggeredAbility copy() {return new NightDealingsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a source you control deals damage to another player, " + super.getRule();
private class NightDealingsEffect extends OneShotEffect {
public NightDealingsEffect() {
public NightDealingsEffect(final NightDealingsEffect effect) {
public NightDealingsEffect copy() {return new NightDealingsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private class NightDealingsSearchEffect extends OneShotEffect {
public NightDealingsSearchEffect() {
public NightDealingsSearchEffect(final NightDealingsSearchEffect effect) {
public NightDealingsSearchEffect copy() {return new NightDealingsSearchEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class NightOfSoulsBetrayal extends CardImpl {
public NightOfSoulsBetrayal (UUID ownerId) {
public NightOfSoulsBetrayal (final NightOfSoulsBetrayal card) {
public NightOfSoulsBetrayal copy() {return new NightOfSoulsBetrayal(this);
public class NineRingedBo extends CardImpl {
public NineRingedBo(UUID ownerId) {
public NineRingedBo(final NineRingedBo card) {
public NineRingedBo copy() {return new NineRingedBo(this);
public class NoDachi extends CardImpl {
public NoDachi (UUID ownerId) {
public NoDachi (final NoDachi card) {
public NoDachi copy() {return new NoDachi(this);
public class NumaiOutcast extends CardImpl {
public NumaiOutcast (UUID ownerId) {
public NumaiOutcast (final NumaiOutcast card) {
public NumaiOutcast copy() {return new NumaiOutcast(this);
public class OathkeeperTakenosDaisho extends CardImpl {
public OathkeeperTakenosDaisho(UUID ownerId) {
public OathkeeperTakenosDaisho(final OathkeeperTakenosDaisho card) {
public OathkeeperTakenosDaisho copy() {return new OathkeeperTakenosDaisho(this);
class ExileEquippedEffect extends OneShotEffect {
public ExileEquippedEffect() {
public ExileEquippedEffect(final ExileEquippedEffect effect) {
public ExileEquippedEffect copy() {return new ExileEquippedEffect(this);
public boolean apply(Game game, Ability source) {return creature.moveToExile(null, "", source.getSourceId(), game);return false;
class OathkeeperEquippedMatchesFilterCondition implements Condition {
public OathkeeperEquippedMatchesFilterCondition(FilterCreaturePermanent filter) {
public boolean apply(Game game, Ability source) {return true;return false;
public class OkinaTempleToTheGrandfathers extends CardImpl {
public OkinaTempleToTheGrandfathers(UUID ownerId) {
public OkinaTempleToTheGrandfathers(final OkinaTempleToTheGrandfathers card) {
public OkinaTempleToTheGrandfathers copy() {return new OkinaTempleToTheGrandfathers(this);
public class OniPossession extends CardImpl {
public OniPossession(UUID ownerId) {
public OniPossession(final OniPossession card) {
public OniPossession copy() {return new OniPossession(this);
public class OrbweaverKumo extends CardImpl {
public OrbweaverKumo(UUID ownerId) {
public OrbweaverKumo(final OrbweaverKumo card) {
public OrbweaverKumo copy() {return new OrbweaverKumo(this);
public class OrderOfTheSacredBell extends CardImpl {
public OrderOfTheSacredBell (UUID ownerId) {
public OrderOfTheSacredBell (final OrderOfTheSacredBell card) {
public OrderOfTheSacredBell copy() {return new OrderOfTheSacredBell(this);
public class OrochiHatchery extends CardImpl {
public OrochiHatchery(UUID ownerId) {
public OrochiHatchery(final OrochiHatchery card) {
public OrochiHatchery copy() {return new OrochiHatchery(this);
public class OrochiLeafcaller extends CardImpl {
public OrochiLeafcaller (UUID ownerId) {
public OrochiLeafcaller (final OrochiLeafcaller card) {
public OrochiLeafcaller copy() {return new OrochiLeafcaller(this);
public class OrochiRanger extends CardImpl {
public OrochiRanger(UUID ownerId) {
public OrochiRanger(final OrochiRanger card) {
public OrochiRanger copy() {return new OrochiRanger(this);
public class OrochiSustainer extends CardImpl {
public OrochiSustainer(UUID ownerId) {
public OrochiSustainer(final OrochiSustainer card) {
public OrochiSustainer copy() {return new OrochiSustainer(this);
public class OtherworldlyJourney extends CardImpl {
public OtherworldlyJourney(UUID ownerId) {
public OtherworldlyJourney(final OtherworldlyJourney card) {
public OtherworldlyJourney copy() {return new OtherworldlyJourney(this);
class OtherworldlyJourneyEffect extends OneShotEffect {private static final String effectText = "Exile target creature. At the beginning of the next end step, return that card to the battlefield under its owner's control with a +1/+1 counter on it";
OtherworldlyJourneyEffect() {
OtherworldlyJourneyEffect(OtherworldlyJourneyEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public OtherworldlyJourneyEffect copy() {return new OtherworldlyJourneyEffect(this);
class OtherworldlyJourneyReturnFromExileEffect extends OneShotEffect {
public OtherworldlyJourneyReturnFromExileEffect(MageObjectReference objectToReturn) {staticText = "return that card to the battlefield under its owner's control with a +1/+1 counter on it";
public OtherworldlyJourneyReturnFromExileEffect(final OtherworldlyJourneyReturnFromExileEffect effect) {
public OtherworldlyJourneyReturnFromExileEffect copy() {return new OtherworldlyJourneyReturnFromExileEffect(this);
public boolean apply(Game game, Ability source) {return true;
class OtherworldlyJourneyEntersBattlefieldEffect extends ReplacementEffectImpl {
public OtherworldlyJourneyEntersBattlefieldEffect(MageObjectReference objectToReturn) {staticText = "that card returns to the battlefield with a +1/+1 counter on it";
public OtherworldlyJourneyEntersBattlefieldEffect(OtherworldlyJourneyEntersBattlefieldEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return EventType.ENTERS_THE_BATTLEFIELD.equals(event.getType());
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(objectToReturn.getSourceId());return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {
public class PainKami extends CardImpl {
public PainKami(UUID ownerId) {
public PainKami(final PainKami card) {
public PainKami copy() {return new PainKami(this);
public class PainwrackerOni extends CardImpl {
public PainwrackerOni (UUID ownerId) {
public PainwrackerOni (final PainwrackerOni card) {
public PainwrackerOni copy() {return new PainwrackerOni(this);
public PainwrackerOniEffect(FilterPermanent filter, int count, String preText) {
public PainwrackerOniEffect(final PainwrackerOniEffect effect) {
public PainwrackerOniEffect copy() {return new PainwrackerOniEffect(this);
public boolean apply(Game game, Ability source) {return super.apply(game, source);return true;
public class PartTheVeil extends CardImpl {
public PartTheVeil(UUID ownerId) {
public PartTheVeil(final PartTheVeil card) {
public PartTheVeil copy() {return new PartTheVeil(this);
public class PeerThroughDepths extends CardImpl {
public PeerThroughDepths (UUID ownerId) {
public PeerThroughDepths (final PeerThroughDepths card) {
public PeerThroughDepths copy() {return new PeerThroughDepths(this);
public class PinecrestRidge extends CardImpl {
public PinecrestRidge(UUID ownerId) {
public PinecrestRidge(final PinecrestRidge card) {
public PinecrestRidge copy() {return new PinecrestRidge(this);
public class PiousKitsune extends CardImpl {
public PiousKitsune(UUID ownerId) {
public PiousKitsune(final PiousKitsune card) {
public PiousKitsune copy() {return new PiousKitsune(this);
class PiousKitsuneEffect extends OneShotEffect {
public PiousKitsuneEffect() {
public PiousKitsuneEffect(final PiousKitsuneEffect effect) {
public PiousKitsuneEffect copy() {return new PiousKitsuneEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class PsychicPuppetry extends CardImpl {
public PsychicPuppetry(UUID ownerId) {
public PsychicPuppetry(final PsychicPuppetry card) {
public PsychicPuppetry copy() {return new PsychicPuppetry(this);
public class PullUnder extends CardImpl {
public PullUnder (UUID ownerId) {
public PullUnder (final PullUnder card) {
public PullUnder copy() {return new PullUnder(this);
public class QuietPurity extends CardImpl {
public QuietPurity(UUID ownerId) {
public QuietPurity(final QuietPurity card) {
public QuietPurity copy() {return new QuietPurity(this);
public class RagDealer extends CardImpl {
public RagDealer (UUID ownerId) {
public RagDealer (final RagDealer card) {
public RagDealer copy() {return new RagDealer(this);
class RagDealerExileEffect extends OneShotEffect {
public RagDealerExileEffect() {
public RagDealerExileEffect(final RagDealerExileEffect effect) {
public RagDealerExileEffect copy() {return new RagDealerExileEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class RaggedVeins extends CardImpl {
public RaggedVeins(UUID ownerId) {
public RaggedVeins(final RaggedVeins card) {
public RaggedVeins copy() {return new RaggedVeins(this);
public class ReachThroughMists extends CardImpl {
public ReachThroughMists (UUID ownerId) {
public ReachThroughMists (final ReachThroughMists card) {
public ReachThroughMists copy() {return new ReachThroughMists(this);
public class Reciprocate extends CardImpl {
public Reciprocate(UUID ownerId) {
public Reciprocate(final Reciprocate card) {
public Reciprocate copy() {return new Reciprocate(this);
class ReciprocateTarget extends TargetPermanent {
public ReciprocateTarget() {
public ReciprocateTarget(final ReciprocateTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return super.canTarget(id, source, game);return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {return true;return true;return false;
public ReciprocateTarget copy() {return new ReciprocateTarget(this);
public class RendSpirit extends CardImpl {
public RendSpirit(UUID ownerId) {
public RendSpirit(final RendSpirit card) {
public RendSpirit copy() {return new RendSpirit(this);
public class ReverseTheSands extends CardImpl {
public ReverseTheSands(UUID ownerId) {
public ReverseTheSands(final ReverseTheSands card) {
public ReverseTheSands copy() {return new ReverseTheSands(this);
class ReverseTheSandsEffect extends OneShotEffect {
public ReverseTheSandsEffect() {
public ReverseTheSandsEffect(final ReverseTheSandsEffect effect) {
public ReverseTheSandsEffect copy() {return new ReverseTheSandsEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class Reweave extends CardImpl {
public Reweave(UUID ownerId) {
public Reweave(final Reweave card) {
public Reweave copy() {return new Reweave(this);
class ReweaveEffect extends OneShotEffect {
public ReweaveEffect() {
public ReweaveEffect(final ReweaveEffect effect) {
public ReweaveEffect copy() {return new ReweaveEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return true;
public class RiverKaijin extends CardImpl {
public RiverKaijin (UUID ownerId) {
public RiverKaijin (final RiverKaijin card) {
public RiverKaijin copy() {return new RiverKaijin(this);
public class RoninHoundmaster extends CardImpl {
public RoninHoundmaster (UUID ownerId) {
public RoninHoundmaster (final RoninHoundmaster card) {
public RoninHoundmaster copy() {return new RoninHoundmaster(this);
public class Rootrunner extends CardImpl {
public Rootrunner(UUID ownerId) {
public Rootrunner(final Rootrunner card) {
public Rootrunner copy() {return new Rootrunner(this);
public class RyuseiTheFallingStar extends CardImpl {
public RyuseiTheFallingStar(UUID ownerID) {
public RyuseiTheFallingStar(final RyuseiTheFallingStar card) {
public RyuseiTheFallingStar copy() {return new RyuseiTheFallingStar(this);
public class SachiDaughterOfSeshiro extends CardImpl {
public SachiDaughterOfSeshiro(UUID ownerId) {
public SachiDaughterOfSeshiro(final SachiDaughterOfSeshiro card) {
public SachiDaughterOfSeshiro copy() {return new SachiDaughterOfSeshiro(this);
public class SakuraTribeElder extends CardImpl {
public SakuraTribeElder(UUID ownerId) {
public SakuraTribeElder(final SakuraTribeElder card) {
public SakuraTribeElder copy() {return new SakuraTribeElder(this);return new SamuraiEnforcers(this);
public class SamuraiOfThePaleCurtain extends CardImpl {
public SamuraiOfThePaleCurtain (UUID ownerId) {
public SamuraiOfThePaleCurtain (final SamuraiOfThePaleCurtain card) {
public SamuraiOfThePaleCurtain copy() {return new SamuraiOfThePaleCurtain(this);
class SamuraiOfThePaleCurtainEffect extends ReplacementEffectImpl {
public SamuraiOfThePaleCurtainEffect() {
public SamuraiOfThePaleCurtainEffect(final SamuraiOfThePaleCurtainEffect effect) {
public SamuraiOfThePaleCurtainEffect copy() {return new SamuraiOfThePaleCurtainEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return permanent.moveToExile(null, "", source.getSourceId(), game);return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return zEvent.getToZone() == Zone.GRAVEYARD;
public class ScuttlingDeath extends CardImpl {
public ScuttlingDeath(UUID ownerId) {
public ScuttlingDeath(final ScuttlingDeath card) {
public ScuttlingDeath copy() {return new ScuttlingDeath(this);
public class SeizanPerverterOfTruth extends CardImpl {
public SeizanPerverterOfTruth (UUID ownerId) {
public SeizanPerverterOfTruth (final SeizanPerverterOfTruth card) {
public SeizanPerverterOfTruth copy() {return new SeizanPerverterOfTruth(this);
public class SenseiGoldenTail extends CardImpl {
public SenseiGoldenTail (UUID ownerId) {
public SenseiGoldenTail (final SenseiGoldenTail card) {
public SenseiGoldenTail copy() {return new SenseiGoldenTail(this);
public class SenseisDiviningTop extends CardImpl {
public SenseisDiviningTop(UUID ownerId) {
public SenseisDiviningTop(final SenseisDiviningTop card) {
public SenseisDiviningTop copy() {return new SenseisDiviningTop(this);
class SenseisDiviningTopEffect extends OneShotEffect {
public SenseisDiviningTopEffect() {
public SenseisDiviningTopEffect(final SenseisDiviningTopEffect effect) {
public SenseisDiviningTopEffect copy() {return new SenseisDiviningTopEffect(this);
public boolean apply(Game game, Ability source) {return permanent.moveToZone(Zone.LIBRARY, source.getSourceId(), game, true);return false;
public class SerpentSkin extends CardImpl {
public SerpentSkin (UUID ownerId) {
public SerpentSkin (final SerpentSkin card) {
public SerpentSkin copy() {return new SerpentSkin(this);
public class SeshiroTheAnointed extends CardImpl {
public SeshiroTheAnointed(UUID ownerId) {
public SeshiroTheAnointed(final SeshiroTheAnointed card) {
public SeshiroTheAnointed copy() {return new SeshiroTheAnointed(this);
class SeshiroTheAnointedAbility extends TriggeredAbilityImpl {
public SeshiroTheAnointedAbility() {
public SeshiroTheAnointedAbility(final SeshiroTheAnointedAbility ability) {
public SeshiroTheAnointedAbility copy() {return new SeshiroTheAnointedAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Snake you control deals combat damage to a player, you may draw a card.";
public class ShellOfTheLastKappa extends CardImpl {
public ShellOfTheLastKappa(UUID ownerId) {
public ShellOfTheLastKappa(final ShellOfTheLastKappa card) {
public ShellOfTheLastKappa copy() {return new ShellOfTheLastKappa(this);
class ShellOfTheLastKappaEffect extends OneShotEffect {
public ShellOfTheLastKappaEffect() {
public ShellOfTheLastKappaEffect(final ShellOfTheLastKappaEffect effect) {
public ShellOfTheLastKappaEffect copy() {return new ShellOfTheLastKappaEffect(this);
public boolean apply(Game game, Ability source) {return false;
class ShellOfTheLastKappaCastEffect extends OneShotEffect {
public ShellOfTheLastKappaCastEffect() {
public ShellOfTheLastKappaCastEffect(final ShellOfTheLastKappaCastEffect effect) {
public ShellOfTheLastKappaCastEffect copy() {return new ShellOfTheLastKappaCastEffect(this);
public boolean apply(Game game, Ability source) {return controller.cast(card.getSpellAbility(), game, true);return false;
class TargetYouPredicate implements ObjectPlayerPredicate<ObjectPlayer<StackObject>> {
public boolean apply(ObjectPlayer<StackObject> input, Game game) {return false;return true;return false;
public String toString() {return "spell that targets you";
public class ShisatoWhisperingHunter extends CardImpl {
public ShisatoWhisperingHunter(UUID ownerId) {
public ShisatoWhisperingHunter(final ShisatoWhisperingHunter card) {
public ShisatoWhisperingHunter copy() {return new ShisatoWhisperingHunter(this);
public class ShizoDeathsStorehouse extends CardImpl {
public ShizoDeathsStorehouse(UUID ownerId) {
public ShizoDeathsStorehouse(final ShizoDeathsStorehouse card) {
public ShizoDeathsStorehouse copy() {return new ShizoDeathsStorehouse(this);
public class Sideswipe extends CardImpl {
public Sideswipe(UUID ownerId) {
public Sideswipe(final Sideswipe card) {
public Sideswipe copy() {return new Sideswipe(this);return new SiftThroughSands(this);
public boolean apply(Game game, Ability source) {return watcher.conditionMet();return false;return new SiftThroughSandsWatcher(this);
public void watch(GameEvent event, Game game) {
public class SilentChantZubera extends CardImpl {
public SilentChantZubera (UUID ownerId) {
public SilentChantZubera (final SilentChantZubera card) {
public SilentChantZubera copy() {return new SilentChantZubera(this);
class SilentChantZuberaDynamicValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return watcher.zuberasDiedThisTurn * 2;
public SilentChantZuberaDynamicValue copy() {return new SilentChantZuberaDynamicValue();
public String toString() {return "2";
public String getMessage() {return "Zubera that died this turn";
public class SireOfTheStorm extends CardImpl {
public SireOfTheStorm(UUID ownerId) {
public SireOfTheStorm(final SireOfTheStorm card) {
public SireOfTheStorm copy() {return new SireOfTheStorm(this);
public class Soilshaper extends CardImpl {
public Soilshaper(UUID ownerId) {
public Soilshaper(final Soilshaper card) {
public Soilshaper copy() {return new Soilshaper(this);
class SoilshaperToken extends Token {
public SoilshaperToken() {
public class SokenzanBruiser extends CardImpl {
public SokenzanBruiser (UUID ownerId) {
public SokenzanBruiser (final SokenzanBruiser card) {
public SokenzanBruiser copy() {return new SokenzanBruiser(this);
public class SoratamiCloudskater extends CardImpl {
public SoratamiCloudskater(UUID ownerId) {
public SoratamiCloudskater(final SoratamiCloudskater card) {
public SoratamiCloudskater copy() {return new SoratamiCloudskater(this);
public class SoratamiMirrorGuard extends CardImpl {
public SoratamiMirrorGuard(UUID ownerId) {
public SoratamiMirrorGuard(final SoratamiMirrorGuard card) {
public SoratamiMirrorGuard copy() {return new SoratamiMirrorGuard(this);
public class SoratamiMirrorMage extends CardImpl {
public SoratamiMirrorMage(UUID ownerId) {
public SoratamiMirrorMage(final SoratamiMirrorMage card) {
public SoratamiMirrorMage copy() {return new SoratamiMirrorMage(this);
public class SoratamiRainshaper extends CardImpl {
public SoratamiRainshaper(UUID ownerId) {
public SoratamiRainshaper(final SoratamiRainshaper card) {
public SoratamiRainshaper copy() {return new SoratamiRainshaper(this);
public class SoratamiSavant extends CardImpl {
public SoratamiSavant(UUID ownerId) {
public SoratamiSavant(final SoratamiSavant card) {
public SoratamiSavant copy() {return new SoratamiSavant(this);
public class SoratamiSeer extends CardImpl {
public SoratamiSeer(UUID ownerId) {
public SoratamiSeer(final SoratamiSeer card) {
public SoratamiSeer copy() {return new SoratamiSeer(this);
class SoratamiSeerEffect extends OneShotEffect {
public SoratamiSeerEffect() {
public SoratamiSeerEffect(final SoratamiSeerEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SoratamiSeerEffect copy() {return new SoratamiSeerEffect(this);
public class SosukeSonOfSeshiro extends CardImpl {
public SosukeSonOfSeshiro(UUID ownerId) {
public SosukeSonOfSeshiro(final SosukeSonOfSeshiro card) {
public SosukeSonOfSeshiro copy() {return new SosukeSonOfSeshiro(this);
class SosukeSonOfSeshiroTriggeredAbility extends TriggeredAbilityImpl {
SosukeSonOfSeshiroTriggeredAbility(Effect effect) {
SosukeSonOfSeshiroTriggeredAbility(final SosukeSonOfSeshiroTriggeredAbility ability) {
public SosukeSonOfSeshiroTriggeredAbility copy() {return new SosukeSonOfSeshiroTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Warrior you control deals combat damage to a creature, destroy that creature at end of combat.";
public class SoullessRevival extends CardImpl {
public SoullessRevival(UUID ownerId) {
public SoullessRevival(final SoullessRevival card) {
public SoullessRevival copy() {return new SoullessRevival(this);
public class SoulOfMagma extends CardImpl {
public SoulOfMagma(UUID ownerId) {
public SoulOfMagma(final SoulOfMagma card) {
public SoulOfMagma copy() {return new SoulOfMagma(this);
public class Squelch extends CardImpl {
public Squelch(UUID ownerId) {
public Squelch(final Squelch card) {
public Squelch copy() {return new Squelch(this);
public class StudentOfElements extends CardImpl {
public StudentOfElements(UUID ownerId) {
public StudentOfElements(final StudentOfElements card) {
public StudentOfElements copy() {return new StudentOfElements(this);
class StudentOfElementsHasFlyingAbility extends StateTriggeredAbility {
public StudentOfElementsHasFlyingAbility() {
public StudentOfElementsHasFlyingAbility(final StudentOfElementsHasFlyingAbility ability) {
public StudentOfElementsHasFlyingAbility copy() {return new StudentOfElementsHasFlyingAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When {this} has flying, flip it.";
class TobitaMasterOfWinds extends Token {
TobitaMasterOfWinds() {
public class SwallowingPlague extends CardImpl {
public SwallowingPlague (UUID ownerId) {
public SwallowingPlague (final SwallowingPlague card) {
public SwallowingPlague copy() {return new SwallowingPlague(this);
public class TakenoSamuraiGeneral extends CardImpl {
public TakenoSamuraiGeneral(UUID ownerId) {
public TakenoSamuraiGeneral(final TakenoSamuraiGeneral card) {
public TakenoSamuraiGeneral copy() {return new TakenoSamuraiGeneral(this);
class TakenoSamuraiGeneralEffect extends ContinuousEffectImpl {
public TakenoSamuraiGeneralEffect() {
public TakenoSamuraiGeneralEffect(final TakenoSamuraiGeneralEffect effect) {
public TakenoSamuraiGeneralEffect copy() {return new TakenoSamuraiGeneralEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {
public class TatsumasaTheDragonsFang extends CardImpl {
public TatsumasaTheDragonsFang(UUID ownerId) {
public TatsumasaTheDragonsFang(final TatsumasaTheDragonsFang card) {
public TatsumasaTheDragonsFang copy() {return new TatsumasaTheDragonsFang(this);
class TatsumaTheDragonsFangEffect extends OneShotEffect {
public TatsumaTheDragonsFangEffect() {
public TatsumaTheDragonsFangEffect(final TatsumaTheDragonsFangEffect effect) {
public TatsumaTheDragonsFangEffect copy() {return new TatsumaTheDragonsFangEffect(this);
public boolean apply(Game game, Ability source) {
public class TellerOfTales extends CardImpl {
public TellerOfTales(UUID ownerId) {
public TellerOfTales(final TellerOfTales card) {
public TellerOfTales copy() {return new TellerOfTales(this);return new TenzaGodosMaul(this);
public class TerashisCry extends CardImpl {
public TerashisCry(UUID ownerId) {
public TerashisCry(final TerashisCry card) {
public TerashisCry copy() {return new TerashisCry(this);
public class TheUnspeakable extends CardImpl {
public TheUnspeakable(UUID ownerId) {
public TheUnspeakable(final TheUnspeakable card) {
public TheUnspeakable copy() {return new TheUnspeakable(this);
public class ThiefOfHope extends CardImpl {
public ThiefOfHope(UUID ownerId) {
public ThiefOfHope(final ThiefOfHope card) {
public ThiefOfHope copy() {return new ThiefOfHope(this);
public class Thoughtbind extends CardImpl {
public Thoughtbind(UUID ownerId) {
public Thoughtbind(final Thoughtbind card) {
public Thoughtbind copy() {return new Thoughtbind(this);
public class ThousandleggedKami extends CardImpl {
public ThousandleggedKami(UUID ownerId) {
public ThousandleggedKami(final ThousandleggedKami card) {
public ThousandleggedKami copy() {return new ThousandleggedKami(this);
public class ThroughTheBreach extends CardImpl {
public ThroughTheBreach(UUID ownerId) {
public ThroughTheBreach(final ThroughTheBreach card) {
public ThroughTheBreach copy() {return new ThroughTheBreach(this);
class ThroughTheBreachEffect extends OneShotEffect {
public ThroughTheBreachEffect() {
public ThroughTheBreachEffect(final ThroughTheBreachEffect effect) {
public ThroughTheBreachEffect copy() {return new ThroughTheBreachEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return true;return false;
public class TideOfWar extends CardImpl {
public TideOfWar(UUID ownerId) {
public TideOfWar(final TideOfWar card) {
public TideOfWar copy() {return new TideOfWar(this);
class BlocksTriggeredAbility extends TriggeredAbilityImpl {
public BlocksTriggeredAbility(Effect effect, boolean optional) {
public BlocksTriggeredAbility(final BlocksTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_BLOCKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever one or more creatures block, " + super.getRule();
public BlocksTriggeredAbility copy() {return new BlocksTriggeredAbility(this);
class TideOfWarEffect extends OneShotEffect {
public TideOfWarEffect() {
public TideOfWarEffect(final TideOfWarEffect effect) {
public TideOfWarEffect copy() {return new TideOfWarEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TimeOfNeed extends CardImpl {
public TimeOfNeed(UUID ownerId) {
public TimeOfNeed(final TimeOfNeed card) {
public TimeOfNeed copy() {return new TimeOfNeed(this);
public class TranquilGarden extends CardImpl {
public TranquilGarden(UUID ownerId) {
public TranquilGarden(final TranquilGarden card) {
public TranquilGarden copy() {return new TranquilGarden(this);
public class UbaMask extends CardImpl {
public UbaMask(UUID ownerId) {
public UbaMask(final UbaMask card) {
public UbaMask copy() {return new UbaMask(this);
class UbaMaskReplacementEffect extends ReplacementEffectImpl {
UbaMaskReplacementEffect() {
UbaMaskReplacementEffect(final UbaMaskReplacementEffect effect) {
public UbaMaskReplacementEffect copy() {return new UbaMaskReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD || event.getType() == GameEvent.EventType.PLAY_TURN;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
class UbaMaskPlayEffect extends AsThoughEffectImpl {
public UbaMaskPlayEffect() {
public UbaMaskPlayEffect(final UbaMaskPlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public UbaMaskPlayEffect copy() {return new UbaMaskPlayEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return exiledCardsByPlayer.contains(new MageObjectReference(card, game));return false;
public class UncontrollableAnger extends CardImpl {
public UncontrollableAnger(UUID ownerId) {
public UncontrollableAnger(final UncontrollableAnger card) {
public UncontrollableAnger copy() {return new UncontrollableAnger(this);
public class UnearthlyBlizzard extends CardImpl {
public UnearthlyBlizzard(UUID ownerId) {
public UnearthlyBlizzard(final UnearthlyBlizzard card) {
public UnearthlyBlizzard copy() {return new UnearthlyBlizzard(this);
public class UyoSilentProphet extends CardImpl {
public UyoSilentProphet(UUID ownerId) {
public UyoSilentProphet(final UyoSilentProphet card) {
public UyoSilentProphet copy() {return new UyoSilentProphet(this);
public class VassalsDuty extends CardImpl {
public VassalsDuty(UUID ownerId) {
public VassalsDuty(final VassalsDuty card) {
public VassalsDuty copy() {return new VassalsDuty(this);
class VassalsDutyPreventDamageTargetEffect extends RedirectionEffect {
public VassalsDutyPreventDamageTargetEffect(Duration duration, int amount) {
public VassalsDutyPreventDamageTargetEffect(final VassalsDutyPreventDamageTargetEffect effect) {
public VassalsDutyPreventDamageTargetEffect copy() {return new VassalsDutyPreventDamageTargetEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class VenerableKumo extends CardImpl {
public VenerableKumo(UUID ownerId) {
public VenerableKumo(final VenerableKumo card) {
public VenerableKumo copy() {return new VenerableKumo(this);
public class Vigilance extends CardImpl {
public Vigilance (UUID ownerId) {
public Vigilance (final Vigilance card) {
public Vigilance copy() {return new Vigilance(this);
public class VillainousOgre extends CardImpl {
public VillainousOgre(UUID ownerId) {
public VillainousOgre(final VillainousOgre card) {
public VillainousOgre copy() {return new VillainousOgre(this);
public class VineKami extends CardImpl {
public VineKami(UUID ownerId) {
public VineKami(final VineKami card) {
public VineKami copy() {return new VineKami(this);
public class WakingNightmare extends CardImpl {
public WakingNightmare (UUID ownerId) {
public WakingNightmare (final WakingNightmare card) {
public WakingNightmare copy() {return new WakingNightmare(this);
public class WanderingOnes extends CardImpl {
public WanderingOnes (UUID ownerId) {
public WanderingOnes (final WanderingOnes card) {
public WanderingOnes copy() {return new WanderingOnes(this);
public class WaterveilCavern extends CardImpl {
public WaterveilCavern(UUID ownerId) {
public WaterveilCavern(final WaterveilCavern card) {
public WaterveilCavern copy() {return new WaterveilCavern(this);
public class WearAway extends CardImpl {
public WearAway(UUID ownerId) {
public WearAway(final WearAway card) {
public WearAway copy() {return new WearAway(this);
public class WickedAkuba extends CardImpl {
public WickedAkuba(UUID ownerId) {
public WickedAkuba(final WickedAkuba card) {
public WickedAkuba copy() {return new WickedAkuba(this);
class WickedAkubaPredicate implements ObjectSourcePlayerPredicate<ObjectSourcePlayer<Player>> {
public boolean apply(ObjectSourcePlayer<Player> input, Game game) {return watcher.hasSourceDoneDamage(input.getSourceId(), game);return false;
public String toString() {return "(Player dealt damage by {source} this turn)";
public class YamabushisFlame extends CardImpl {
public YamabushisFlame(UUID ownerId) {
public YamabushisFlame(final YamabushisFlame card) {
public YamabushisFlame copy() {return new YamabushisFlame(this);
public class YamabushisStorm extends CardImpl {
public YamabushisStorm(UUID ownerId) {
public YamabushisStorm(final YamabushisStorm card) {
public YamabushisStorm copy() {return new YamabushisStorm(this);
public class YoseiTheMorningStar extends CardImpl {
public YoseiTheMorningStar(UUID ownerId) {
public YoseiTheMorningStar(final YoseiTheMorningStar card) {
public YoseiTheMorningStar copy() {return new YoseiTheMorningStar(this);
class YoseiTheMorningStarTarget extends TargetPermanent {
public YoseiTheMorningStarTarget() {
public YoseiTheMorningStarTarget(final YoseiTheMorningStarTarget target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return super.canTarget(controllerId, id, source, game);return false;
public YoseiTheMorningStarTarget copy() {return new YoseiTheMorningStarTarget(this);
class YoseiTheMorningStarTapEffect extends OneShotEffect {
public YoseiTheMorningStarTapEffect() {
public YoseiTheMorningStarTapEffect(final YoseiTheMorningStarTapEffect effect) {
public YoseiTheMorningStarTapEffect copy() {return new YoseiTheMorningStarTapEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public String getText(Mode mode) {return staticText;
public class ZoZuThePunisher extends CardImpl {
public ZoZuThePunisher(UUID ownerId) {
public ZoZuThePunisher(final ZoZuThePunisher card) {
public ZoZuThePunisher copy() {return new ZoZuThePunisher(this);
class ZoZuThePunisherAbility extends TriggeredAbilityImpl {
public ZoZuThePunisherAbility() {
ZoZuThePunisherAbility(final ZoZuThePunisherAbility ability) {
public ZoZuThePunisherAbility copy() {return new ZoZuThePunisherAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a land enters the battlefield, Zo-Zu the Punisher deals 2 damage to that land's controller.";
public class ObsianusGolem extends CardImpl {
public ObsianusGolem(UUID ownerId) {
public ObsianusGolem(final ObsianusGolem card) {
public ObsianusGolem copy() {return new ObsianusGolem(this);
public class RegalUnicorn extends CardImpl {
public RegalUnicorn(UUID ownerId) {
public RegalUnicorn(final RegalUnicorn card) {
public RegalUnicorn copy() {return new RegalUnicorn(this);
public class AdarkarValkyrie extends CardImpl {
public AdarkarValkyrie(UUID ownerId) {
public AdarkarValkyrie(final AdarkarValkyrie card) {
public AdarkarValkyrie copy() {return new AdarkarValkyrie(this);
class AdarkarValkyrieEffect extends OneShotEffect {
public AdarkarValkyrieEffect() {this.staticText = "When target creature other than {this} dies this turn, return that card to the battlefield under your control";
public AdarkarValkyrieEffect(final AdarkarValkyrieEffect effect) {
public AdarkarValkyrieEffect copy() {return new AdarkarValkyrieEffect(this);
public boolean apply(Game game, Ability source) {return false;
class AdarkarValkyrieDelayedTriggeredAbility extends DelayedTriggeredAbility {
public AdarkarValkyrieDelayedTriggeredAbility(FixedTarget fixedTarget) {
public AdarkarValkyrieDelayedTriggeredAbility(final AdarkarValkyrieDelayedTriggeredAbility ability) {
public AdarkarValkyrieDelayedTriggeredAbility copy() {return new AdarkarValkyrieDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When target creature other than Adarkar Valkyrie dies this turn, " + super.getRule();
public class ArcumDagsson extends CardImpl {
public ArcumDagsson(UUID ownerId) {
public ArcumDagsson(final ArcumDagsson card) {
public ArcumDagsson copy() {return new ArcumDagsson(this);
class ArcumDagssonEffect extends OneShotEffect {
ArcumDagssonEffect() {
ArcumDagssonEffect(final ArcumDagssonEffect effect) {
public ArcumDagssonEffect copy() {return new ArcumDagssonEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AurochsHerd extends CardImpl {
public AurochsHerd(UUID ownerId) {
public AurochsHerd(final AurochsHerd card) {
public AurochsHerd copy() {return new AurochsHerd(this);
public class BalduvianRage extends CardImpl {
public BalduvianRage(UUID ownerId) {
public BalduvianRage(final BalduvianRage card) {
public BalduvianRage copy() {return new BalduvianRage(this);
public class BlizzardSpecter extends CardImpl {
public BlizzardSpecter(UUID ownerId) {
public BlizzardSpecter(final BlizzardSpecter card) {
public BlizzardSpecter copy() {return new BlizzardSpecter(this);
class ReturnToHandEffect extends OneShotEffect {
public ReturnToHandEffect() {staticText = "That player returns a permanent he or she controls to its owner's hand";
public ReturnToHandEffect(final ReturnToHandEffect effect) {
public ReturnToHandEffect copy() {return new ReturnToHandEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class BorealCentaur extends CardImpl {
public BorealCentaur(UUID ownerId) {
public BorealCentaur(final BorealCentaur card) {
public BorealCentaur copy() {return new BorealCentaur(this);
public class BorealDruid extends CardImpl {
public BorealDruid(UUID ownerId) {
public BorealDruid(final BorealDruid card) {
public BorealDruid copy() {return new BorealDruid(this);return new BorealGriffin(this);
public class BorealShelf extends CardImpl {
public BorealShelf(UUID ownerId) {
public BorealShelf(final BorealShelf card) {
public BorealShelf copy() {return new BorealShelf(this);
public class BraidOfFire extends CardImpl {
public BraidOfFire(UUID ownerId) {
public BraidOfFire(final BraidOfFire card) {
public BraidOfFire copy() {return new BraidOfFire(this);
class BraidOfFireCost extends CostImpl {
public BraidOfFireCost() {
public BraidOfFireCost(BraidOfFireCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return true;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return game.getPlayer(controllerId) != null;
public BraidOfFireCost copy() {return new BraidOfFireCost(this);
public class BullAurochs extends CardImpl {
public BullAurochs(UUID ownerId) {
public BullAurochs(final BullAurochs card) {
public BullAurochs copy() {return new BullAurochs(this);
public class ChillingShade extends CardImpl {
public ChillingShade(UUID ownerId) {
public ChillingShade(final ChillingShade card) {
public ChillingShade copy() {return new ChillingShade(this);
public class ChillToTheBone extends CardImpl {
public ChillToTheBone(UUID ownerId) {
public ChillToTheBone(final ChillToTheBone card) {
public ChillToTheBone copy() {return new ChillToTheBone(this);
public class ColdsteelHeart extends CardImpl {
public ColdsteelHeart(UUID ownerId) {
public ColdsteelHeart(final ColdsteelHeart card) {
public ColdsteelHeart copy() {return new ColdsteelHeart(this);
class ColdsteelHeartManaEffect extends ManaEffect {
public ColdsteelHeartManaEffect() {
public ColdsteelHeartManaEffect(final ColdsteelHeartManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public Mana getMana(Game game, Ability source) {return new Mana(ColoredManaSymbol.lookup(color.toString().charAt(0)));return null;
public ColdsteelHeartManaEffect copy() {return new ColdsteelHeartManaEffect(this);
public class Commandeer extends CardImpl {
public Commandeer(UUID ownerId) {
public Commandeer(final Commandeer card) {
public Commandeer copy() {return new Commandeer(this);
class CommandeerEffect extends OneShotEffect {
public CommandeerEffect() {
public CommandeerEffect(final CommandeerEffect effect) {
public CommandeerEffect copy() {return new CommandeerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Controvert extends CardImpl {
public Controvert(UUID ownerId) {
public Controvert(final Controvert card) {
public Controvert copy() {return new Controvert(this);
public class Counterbalance extends CardImpl {
public Counterbalance(UUID ownerId) {
public Counterbalance(final Counterbalance card) {
public Counterbalance copy() {return new Counterbalance(this);
class CounterbalanceEffect extends OneShotEffect {
public CounterbalanceEffect() {
public CounterbalanceEffect(final CounterbalanceEffect effect) {
public CounterbalanceEffect copy() {return new CounterbalanceEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(spell.getId(), source.getSourceId(), game);return true;return false;return new DarienKingOfKjeldor(this);return new DarienKingOfKjeldorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you are dealt damage, you may put that many 1/1 white Soldier creature tokens onto the battlefield.";return new DarienKingOfKjeldorEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new SoldierToken(), damage).apply(game, source);return false;
public class DarkDepths extends CardImpl {
public DarkDepths(UUID ownerId) {
public DarkDepths(final DarkDepths card) {
public DarkDepths copy() {return new DarkDepths(this);return new DarkDepthsSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return sacrificed;return sacrificed;
class DarkDepthsAbility extends StateTriggeredAbility {
public DarkDepthsAbility() {
public DarkDepthsAbility(final DarkDepthsAbility ability) {
public DarkDepthsAbility copy() {return new DarkDepthsAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return permanent != null && permanent.getCounters().getCount(CounterType.ICE) == 0;
public String getRule() {return "When {this} has no ice counters on it, sacrifice it. If you do, put a legendary 20/20 black Avatar creature token with flying and indestructible named Marit Lage onto the battlefield.";
class MaritLageToken extends Token {
public MaritLageToken() {
public class Drelnoch extends CardImpl {
public Drelnoch(UUID ownerId) {
public Drelnoch(final Drelnoch card) {
public Drelnoch copy() {return new Drelnoch(this);
public class FrostMarsh extends CardImpl {
public FrostMarsh(UUID ownerId) {
public FrostMarsh(final FrostMarsh card) {
public FrostMarsh copy() {return new FrostMarsh(this);
public class FrostRaptor extends CardImpl {
public FrostRaptor(UUID ownerId) {
public FrostRaptor(final FrostRaptor card) {
public FrostRaptor copy() {return new FrostRaptor(this);
public class FrozenSolid extends CardImpl {
public FrozenSolid(UUID ownerId) {
public FrozenSolid(final FrozenSolid card) {
public FrozenSolid copy() {return new FrozenSolid(this);
public class FuryOfTheHorde extends CardImpl {
public FuryOfTheHorde(UUID ownerId) {
public FuryOfTheHorde(final FuryOfTheHorde card) {
public FuryOfTheHorde copy() {return new FuryOfTheHorde(this);
class FuryOfTheHordeUntapEffect extends OneShotEffect {
public FuryOfTheHordeUntapEffect() {
public FuryOfTheHordeUntapEffect(final FuryOfTheHordeUntapEffect effect) {
public FuryOfTheHordeUntapEffect copy() {return new FuryOfTheHordeUntapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class FuryOfTheHordeAddPhasesEffect extends OneShotEffect {
public FuryOfTheHordeAddPhasesEffect() {
public FuryOfTheHordeAddPhasesEffect(final FuryOfTheHordeAddPhasesEffect effect) {
public FuryOfTheHordeAddPhasesEffect copy() {return new FuryOfTheHordeAddPhasesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DelayedAddMainPhaseAbility extends DelayedTriggeredAbility {
public DelayedAddMainPhaseAbility() {
public class GarzaZolPlagueQueen extends CardImpl {
public GarzaZolPlagueQueen(UUID ownerId) {
public GarzaZolPlagueQueen(final GarzaZolPlagueQueen card) {
public GarzaZolPlagueQueen copy() {return new GarzaZolPlagueQueen(this);
public class GrimHarvest extends CardImpl {
public GrimHarvest(UUID ownerId) {
public GrimHarvest(final GrimHarvest card) {
public GrimHarvest copy() {return new GrimHarvest(this);
public class GristleGrinner extends CardImpl {
public GristleGrinner(UUID ownerId) {
public GristleGrinner(final GristleGrinner card) {
public GristleGrinner copy() {return new GristleGrinner(this);
public class GutlessGhoul extends CardImpl {
public GutlessGhoul(UUID ownerId) {
public GutlessGhoul(final GutlessGhoul card) {
public GutlessGhoul copy() {return new GutlessGhoul(this);
public class HaakonStromgaldScourge extends CardImpl {
public HaakonStromgaldScourge(UUID ownerId) {
public HaakonStromgaldScourge(final HaakonStromgaldScourge card) {
public HaakonStromgaldScourge copy() {return new HaakonStromgaldScourge(this);
class HaakonStromgaldScourgePlayEffect extends AsThoughEffectImpl {
public HaakonStromgaldScourgePlayEffect() {
public HaakonStromgaldScourgePlayEffect(final HaakonStromgaldScourgePlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public HaakonStromgaldScourgePlayEffect copy() {return new HaakonStromgaldScourgePlayEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public HaakonStromgaldScourgePlayEffect2() {
public HaakonStromgaldScourgePlayEffect2 (final HaakonStromgaldScourgePlayEffect2 effect) {
public HaakonStromgaldScourgePlayEffect2 copy() {return new HaakonStromgaldScourgePlayEffect2(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
class HaakonPlayKnightsFromGraveyardEffect extends AsThoughEffectImpl {
public HaakonPlayKnightsFromGraveyardEffect () {
public HaakonPlayKnightsFromGraveyardEffect(final HaakonPlayKnightsFromGraveyardEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public HaakonPlayKnightsFromGraveyardEffect copy() {return new HaakonPlayKnightsFromGraveyardEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class HeidarRimewindMaster extends CardImpl {
public HeidarRimewindMaster(UUID ownerId) {
public HeidarRimewindMaster(final HeidarRimewindMaster card) {
public HeidarRimewindMaster copy() {return new HeidarRimewindMaster(this);
public class HibernationsEnd extends CardImpl {
public HibernationsEnd(UUID ownerId) {
public HibernationsEnd(final HibernationsEnd card) {
public HibernationsEnd copy() {return new HibernationsEnd(this);
class HibernationsEndAbility extends TriggeredAbilityImpl {
public HibernationsEndAbility() {
public HibernationsEndAbility(final HibernationsEndAbility ability) {
public HibernationsEndAbility copy() {return new HibernationsEndAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.PAID_CUMULATIVE_UPKEEP;
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId() != null && event.getSourceId().equals(this.getSourceId());
public String getRule() {return "Whenever you pay {this}'s cumulative upkeep, " + super.getRule();
class HibernationsEndEffect extends OneShotEffect {
public HibernationsEndEffect() {
public HibernationsEndEffect(final HibernationsEndEffect effect) {
public HibernationsEndEffect copy() {return new HibernationsEndEffect(this);
public boolean apply(Game game, Ability source) {return new SearchLibraryPutInPlayEffect(target).apply(game, source);return false;
public class HighlandWeald extends CardImpl {
public HighlandWeald(UUID ownerId) {
public HighlandWeald(final HighlandWeald card) {
public HighlandWeald copy() {return new HighlandWeald(this);
public class Icefall extends CardImpl {
public Icefall(UUID ownerId) {
public Icefall(final Icefall card) {
public Icefall copy() {return new Icefall(this);
public class IntoTheNorth extends CardImpl {
public IntoTheNorth(UUID ownerId) {
public IntoTheNorth(final IntoTheNorth card) {
public IntoTheNorth copy() {return new IntoTheNorth(this);
public class Jokulmorder extends CardImpl {
public Jokulmorder(UUID ownerId) {
public Jokulmorder(final Jokulmorder card) {
public Jokulmorder copy() {return new Jokulmorder(this);
class JokulmorderTriggeredAbility extends TriggeredAbilityImpl {
JokulmorderTriggeredAbility() {
JokulmorderTriggeredAbility(JokulmorderTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LAND_PLAYED;
public boolean checkTrigger(GameEvent event, Game game) {return land.getSubtype().contains("Island")
public JokulmorderTriggeredAbility copy() {return new JokulmorderTriggeredAbility(this);
public String getRule() {return "When you play an Island, you may untap {this}";
public class JotunGrunt extends CardImpl {
public JotunGrunt(UUID ownerId) {
public JotunGrunt(final JotunGrunt card) {
public JotunGrunt copy() {return new JotunGrunt(this);
class JotunGruntCost extends CostImpl {
JotunGruntCost() {
JotunGruntCost(final JotunGruntCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return false;return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return targets.canChoose(controllerId, game);
public JotunGruntCost copy() {return new JotunGruntCost(this);
public class JuniperOrderRanger extends CardImpl {
public JuniperOrderRanger(UUID ownerId) {
public JuniperOrderRanger(final JuniperOrderRanger card) {
public JuniperOrderRanger copy() {return new JuniperOrderRanger(this);return new KjeldoranOutrider(this);
public class KrovikanRot extends CardImpl {
public KrovikanRot(UUID ownerId) {
public KrovikanRot(final KrovikanRot card) {
public KrovikanRot copy() {return new KrovikanRot(this);
public class KrovikanScoundrel extends CardImpl {
public KrovikanScoundrel(UUID ownerId) {
public KrovikanScoundrel(final KrovikanScoundrel card) {
public KrovikanScoundrel copy() {return new KrovikanScoundrel(this);
public class LightningSerpent extends CardImpl {
public LightningSerpent(UUID ownerId) {
public LightningSerpent(final LightningSerpent card) {
public LightningSerpent copy() {return new LightningSerpent(this);
public class LightningStorm extends CardImpl {
public LightningStorm(UUID ownerId) {
public LightningStorm(final LightningStorm card) {
public LightningStorm copy() {return new LightningStorm(this);
class LightningStormCountCondition implements DynamicValue {
public LightningStormCountCondition(CounterType counter) {
public LightningStormCountCondition(final LightningStormCountCondition countersCount) {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return spell.getCounters(game).getCount(counter) + 3;return 0;
public DynamicValue copy() {return new LightningStormCountCondition(this);
public String toString() {return "X";
public String getMessage() {return "3 plus the number of charge counters on it";
class LightningStormAddCounterEffect extends OneShotEffect {
public LightningStormAddCounterEffect() {
public LightningStormAddCounterEffect(final LightningStormAddCounterEffect effect) {
public LightningStormAddCounterEffect copy() {return new LightningStormAddCounterEffect(this);
public boolean apply(Game game, Ability source) {return spell.chooseNewTargets(game, ((ActivatedAbilityImpl) source).getActivatorId(), false, false, null);return false;
public class LovisaColdeyes extends CardImpl {
public LovisaColdeyes(UUID ownerId) {
public LovisaColdeyes(final LovisaColdeyes card) {
public LovisaColdeyes copy() {return new LovisaColdeyes(this);
public class MartyrOfAshes extends CardImpl {
public MartyrOfAshes(UUID ownerId) {
public MartyrOfAshes(final MartyrOfAshes card) {
public MartyrOfAshes copy() {return new MartyrOfAshes(this);
public class MartyrOfBones extends CardImpl {
public MartyrOfBones(UUID ownerId) {
public MartyrOfBones(final MartyrOfBones card) {
public void adjustTargets(Ability ability, Game game) {
public MartyrOfBones copy() {return new MartyrOfBones(this);
class RevealVariableBlackCardsFromHandCost extends VariableCostImpl {
RevealVariableBlackCardsFromHandCost() {
RevealVariableBlackCardsFromHandCost(final RevealVariableBlackCardsFromHandCost cost) {
public RevealVariableBlackCardsFromHandCost copy() {return new RevealVariableBlackCardsFromHandCost(this);
public Cost getFixedCostsFromAnnouncedValue(int xValue) {return new RevealTargetFromHandCost(new TargetCardInHand(0, xValue, filter));
public int getMinValue(Ability source, Game game) {return 0;
public int getMaxValue(Ability source, Game game) {return player.getHand().getCards(filter, game).size();return 0;
public class MartyrOfFrost extends CardImpl {
public MartyrOfFrost(UUID ownerId) {
public MartyrOfFrost(final MartyrOfFrost card) {
public MartyrOfFrost copy() {return new MartyrOfFrost(this);
public class MartyrOfSands extends CardImpl {
public MartyrOfSands(UUID ownerId) {
public MartyrOfSands(final MartyrOfSands card) {
public MartyrOfSands copy() {return new MartyrOfSands(this);
public class MartyrOfSpores extends CardImpl {
public MartyrOfSpores(UUID ownerId) {
public MartyrOfSpores(final MartyrOfSpores card) {
public MartyrOfSpores copy() {return new MartyrOfSpores(this);
public class MishrasBauble extends CardImpl {
public MishrasBauble(UUID ownerId) {
public MishrasBauble(final MishrasBauble card) {
public MishrasBauble copy() {return new MishrasBauble(this);
public class MouthOfRonom extends CardImpl {
public MouthOfRonom(UUID ownerId) {
public MouthOfRonom(final MouthOfRonom card) {
public MouthOfRonom copy() {return new MouthOfRonom(this);
public class MysticMelting extends CardImpl {
public MysticMelting(UUID ownerId) {
public MysticMelting(final MysticMelting card) {
public MysticMelting copy() {return new MysticMelting(this);
public class OhranYeti extends CardImpl {
public OhranYeti(UUID ownerId) {
public OhranYeti(final OhranYeti card) {
public OhranYeti copy() {return new OhranYeti(this);
public class OrcishBloodpainter extends CardImpl {
public OrcishBloodpainter(UUID ownerId) {
public OrcishBloodpainter(final OrcishBloodpainter card) {
public OrcishBloodpainter copy() {return new OrcishBloodpainter(this);
public class PhobianPhantasm extends CardImpl {
public PhobianPhantasm(UUID ownerId) {
public PhobianPhantasm(final PhobianPhantasm card) {
public PhobianPhantasm copy() {return new PhobianPhantasm(this);
public class PhyrexianIronfoot extends CardImpl {
public PhyrexianIronfoot(UUID ownerId) {
public PhyrexianIronfoot(final PhyrexianIronfoot card) {
public PhyrexianIronfoot copy() {return new PhyrexianIronfoot(this);
public class Resize extends CardImpl {
public Resize(UUID ownerId) {
public Resize(final Resize card) {
public Resize copy() {return new Resize(this);
public class RimeboundDead extends CardImpl {
public RimeboundDead(UUID ownerId) {
public RimeboundDead(final RimeboundDead card) {
public RimeboundDead copy() {return new RimeboundDead(this);
public class RimeTransfusion extends CardImpl {
public RimeTransfusion(UUID ownerId) {
public RimeTransfusion(final RimeTransfusion card) {
public RimeTransfusion copy() {return new RimeTransfusion(this);
public class RimewindCryomancer extends CardImpl {
public RimewindCryomancer(UUID ownerId) {
public RimewindCryomancer(final RimewindCryomancer card) {
public RimewindCryomancer copy() {return new RimewindCryomancer(this);
public class RimewindTaskmage extends CardImpl {
public RimewindTaskmage(UUID ownerId) {
public RimewindTaskmage(final RimewindTaskmage card) {
public RimewindTaskmage copy() {return new RimewindTaskmage(this);
public class RiteOfFlame extends CardImpl {
public RiteOfFlame(UUID ownerId) {
public RiteOfFlame(final RiteOfFlame card) {
public RiteOfFlame copy() {return new RiteOfFlame(this);
class RiteOfFlameManaEffect extends ManaEffect {
RiteOfFlameManaEffect() {
RiteOfFlameManaEffect(final RiteOfFlameManaEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public RiteOfFlameManaEffect copy() {return new RiteOfFlameManaEffect(this);
public Mana getMana(Game game, Ability source) {return null;
public class RonomHulk extends CardImpl {
public RonomHulk(UUID ownerId) {
public RonomHulk(final RonomHulk card) {
public RonomHulk copy() {return new RonomHulk(this);
public class RonomUnicorn extends CardImpl {
public RonomUnicorn(UUID ownerId) {
public RonomUnicorn(final RonomUnicorn card) {
public RonomUnicorn copy() {return new RonomUnicorn(this);
public class RuneSnag extends CardImpl {
public RuneSnag(UUID ownerId) {
public RuneSnag(final RuneSnag card) {
public RuneSnag copy() {return new RuneSnag(this);
public class ScryingSheets extends CardImpl {
public ScryingSheets(UUID ownerId) {
public ScryingSheets(final ScryingSheets card) {
public ScryingSheets copy() {return new ScryingSheets(this);
class ScryingSheetsEffect extends OneShotEffect {
ScryingSheetsEffect() {
ScryingSheetsEffect(final ScryingSheetsEffect effect) {
public ScryingSheetsEffect copy() {return new ScryingSheetsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShelteringAncient extends CardImpl {
public ShelteringAncient(UUID ownerId) {
public ShelteringAncient(final ShelteringAncient card) {
public ShelteringAncient copy() {return new ShelteringAncient(this);
class ShelteringAncientCost extends CostImpl {
ShelteringAncientCost() {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return true;return false;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return game.getBattlefield().contains(filter, sourceId, game, 1);
public ShelteringAncientCost copy() {return new ShelteringAncientCost();
public class SimianBrawler extends CardImpl {
public SimianBrawler(UUID ownerId) {
public SimianBrawler(final SimianBrawler card) {
public SimianBrawler copy() {return new SimianBrawler(this);
public class Skred extends CardImpl {
public Skred(UUID ownerId) {
public Skred(final Skred card) {
public Skred copy() {return new Skred(this);
class SkredDamageEffect extends OneShotEffect {
public SkredDamageEffect() {
public SkredDamageEffect(final SkredDamageEffect effect) {
public SkredDamageEffect copy() {return new SkredDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SoulSpike extends CardImpl {
public SoulSpike(UUID ownerId) {
public SoulSpike(final SoulSpike card) {
public SoulSpike copy() {return new SoulSpike(this);return new SquallDrifter(this);
public class SteamSpitter extends CardImpl {
public SteamSpitter(UUID ownerId) {
public SteamSpitter(final SteamSpitter card) {
public SteamSpitter copy() {return new SteamSpitter(this);
public class StromgaldCrusader extends CardImpl {
public StromgaldCrusader(UUID ownerId) {
public StromgaldCrusader(final StromgaldCrusader card) {
public StromgaldCrusader copy() {return new StromgaldCrusader(this);
public class SunsBounty extends CardImpl {
public SunsBounty(UUID ownerId) {
public SunsBounty(final SunsBounty card) {
public SunsBounty copy() {return new SunsBounty(this);
public class SurgingDementia extends CardImpl {
public SurgingDementia(UUID ownerId) {
public SurgingDementia(final SurgingDementia card) {
public SurgingDementia copy() {return new SurgingDementia(this);
public class SurgingFlame extends CardImpl {
public SurgingFlame(UUID ownerId) {
public SurgingFlame(final SurgingFlame card) {
public SurgingFlame copy() {return new SurgingFlame(this);
public class SurgingMight extends CardImpl {
public SurgingMight(UUID ownerId) {
public SurgingMight(final SurgingMight card) {
public SurgingMight copy() {return new SurgingMight(this);
public class SurgingSentinels extends CardImpl {
public SurgingSentinels(UUID ownerId) {
public SurgingSentinels(final SurgingSentinels card) {
public SurgingSentinels copy() {return new SurgingSentinels(this);return new SwiftManeuver(this);
public class Thermopod extends CardImpl {
public Thermopod(UUID ownerId) {
public Thermopod(final Thermopod card) {
public Thermopod copy() {return new Thermopod(this);
public class ThrummingStone extends CardImpl {
public ThrummingStone(UUID ownerId) {
public ThrummingStone(final ThrummingStone card) {
public ThrummingStone copy() {return new ThrummingStone(this);
class ThrummingStoneGainAbilitySpellsEffect extends ContinuousEffectImpl {
public ThrummingStoneGainAbilitySpellsEffect(Ability ability, FilterSpell filter) {
public ThrummingStoneGainAbilitySpellsEffect(final ThrummingStoneGainAbilitySpellsEffect effect) {
public ThrummingStoneGainAbilitySpellsEffect copy() {return new ThrummingStoneGainAbilitySpellsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TresserhornSinks extends CardImpl {
public TresserhornSinks(UUID ownerId) {
public TresserhornSinks(final TresserhornSinks card) {
public TresserhornSinks copy() {return new TresserhornSinks(this);
public class UrsineFylgja extends CardImpl {
public UrsineFylgja(UUID ownerId) {
public UrsineFylgja(final UrsineFylgja card) {
public UrsineFylgja copy() {return new UrsineFylgja(this);
public class WallOfShards extends CardImpl {
public WallOfShards(UUID ownerId) {
public WallOfShards(final WallOfShards card) {
public WallOfShards copy() {return new WallOfShards(this);
public class WhiteShieldCrusader extends CardImpl {
public WhiteShieldCrusader(UUID ownerId) {
public WhiteShieldCrusader(final WhiteShieldCrusader card) {
public WhiteShieldCrusader copy() {return new WhiteShieldCrusader(this);
public class WildernessElemental extends CardImpl {
public WildernessElemental(UUID ownerId) {
public WildernessElemental(final WildernessElemental card) {
public WildernessElemental copy() {return new WildernessElemental(this);
public class WoollyRazorback extends CardImpl {
public WoollyRazorback(UUID ownerId) {
public WoollyRazorback(final WoollyRazorback card) {
public WoollyRazorback copy() {return new WoollyRazorback(this);
public class ZurTheEnchanter extends CardImpl {
public ZurTheEnchanter(UUID ownerId) {
public ZurTheEnchanter(final ZurTheEnchanter card) {
public ZurTheEnchanter copy() {return new ZurTheEnchanter(this);
public class AcornCatapult extends CardImpl {
public AcornCatapult(UUID ownerId) {
public AcornCatapult(final AcornCatapult card) {
public AcornCatapult copy() {return new AcornCatapult(this);
class AcornCatapultEffect extends OneShotEffect {
public AcornCatapultEffect() {
public AcornCatapultEffect(final AcornCatapultEffect effect) {
public AcornCatapultEffect copy() {return new AcornCatapultEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AEthersnipe extends CardImpl {
public AEthersnipe(UUID ownerId) {
public AEthersnipe(final AEthersnipe card) {
public AEthersnipe copy() {return new AEthersnipe(this);
public class AkromaAngelOfFury extends CardImpl {
public AkromaAngelOfFury(UUID ownerId) {
public AkromaAngelOfFury(final AkromaAngelOfFury card) {
public AkromaAngelOfFury copy() {return new AkromaAngelOfFury(this);
public class AllianceOfArms extends CardImpl {
public AllianceOfArms(UUID ownerId) {
public AllianceOfArms(final AllianceOfArms card) {
public AllianceOfArms copy() {return new AllianceOfArms(this);
class AllianceOfArmsEffect extends OneShotEffect {
public AllianceOfArmsEffect() {
public AllianceOfArmsEffect(final AllianceOfArmsEffect effect) {
public AllianceOfArmsEffect copy() {return new AllianceOfArmsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return xValue;
public class AustereCommand extends CardImpl {
public AustereCommand(UUID ownerId) {
public AustereCommand(final AustereCommand card) {
public AustereCommand copy() {return new AustereCommand(this);
public class AvatarOfSlaughter extends CardImpl {
public AvatarOfSlaughter(UUID ownerId) {
public AvatarOfSlaughter(final AvatarOfSlaughter card) {
public AvatarOfSlaughter copy() {return new AvatarOfSlaughter(this);
public class BasandraBattleSeraph extends CardImpl {
public BasandraBattleSeraph(UUID ownerId) {
public BasandraBattleSeraph(final BasandraBattleSeraph card) {
public BasandraBattleSeraph copy() {return new BasandraBattleSeraph(this);
public BasandraBattleSeraphEffect() {
public BasandraBattleSeraphEffect(final BasandraBattleSeraphEffect effect) {
public BasandraBattleSeraphEffect copy() {return new BasandraBattleSeraphEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class BladewingTheRisen extends CardImpl {
public BladewingTheRisen(UUID ownerId) {
public BladewingTheRisen(final BladewingTheRisen card) {
public BladewingTheRisen copy() {return new BladewingTheRisen(this);
public class BreathOfDarigaaz extends CardImpl {
public BreathOfDarigaaz(UUID ownerId) {
public BreathOfDarigaaz(final BreathOfDarigaaz card) {
public BreathOfDarigaaz copy() {return new BreathOfDarigaaz(this);
public class BrionStoutarm extends CardImpl {
public BrionStoutarm(UUID ownerId) {
public BrionStoutarm(final BrionStoutarm card) {
public BrionStoutarm copy() {return new BrionStoutarm(this);
class BrionStoutarmEffect extends OneShotEffect {
public BrionStoutarmEffect() {
public BrionStoutarmEffect(final BrionStoutarmEffect effect) {
public BrionStoutarmEffect copy() {return new BrionStoutarmEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class BuriedAlive extends CardImpl {
public BuriedAlive(UUID ownerId) {
public BuriedAlive(final BuriedAlive card) {
public BuriedAlive copy() {return new BuriedAlive(this);
class BuriedAliveEffect extends SearchEffect {
public BuriedAliveEffect() {
public BuriedAliveEffect(final BuriedAliveEffect effect) {
public BuriedAliveEffect copy() {return new BuriedAliveEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CallTheSkybreaker extends CardImpl {
public CallTheSkybreaker(UUID ownerId) {
public CallTheSkybreaker(final CallTheSkybreaker card) {
public CallTheSkybreaker copy() {return new CallTheSkybreaker(this);
class ElementalToken extends Token {
public ElementalToken() {
public class CelestialForce extends CardImpl {
public CelestialForce(UUID ownerId) {
public CelestialForce(final CelestialForce card) {
public CelestialForce copy() {return new CelestialForce(this);
public class ChampionsHelm extends CardImpl {
public ChampionsHelm(UUID ownerId) {
public ChampionsHelm(final ChampionsHelm card) {
public ChampionsHelm copy() {return new ChampionsHelm(this);
public class ChorusOfTheConclave extends CardImpl {
public ChorusOfTheConclave(UUID ownerId) {
public ChorusOfTheConclave(final ChorusOfTheConclave card) {
public ChorusOfTheConclave copy() {return new ChorusOfTheConclave(this);
class ChorusOfTheConclaveReplacementEffect extends ReplacementEffectImpl {
public ChorusOfTheConclaveReplacementEffect() {
public ChorusOfTheConclaveReplacementEffect(final ChorusOfTheConclaveReplacementEffect effect) {
public ChorusOfTheConclaveReplacementEffect copy() {return new ChorusOfTheConclaveReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return spellObject.getCardType().contains(CardType.CREATURE);return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return xValue;
class ChorusOfTheConclaveReplacementEffect2 extends ReplacementEffectImpl {
public ChorusOfTheConclaveReplacementEffect2() {
public ChorusOfTheConclaveReplacementEffect2(final ChorusOfTheConclaveReplacementEffect2 effect) {
public ChorusOfTheConclaveReplacementEffect2 copy() {return new ChorusOfTheConclaveReplacementEffect2(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return spellX != null
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class ChromeshellCrab extends CardImpl {
public ChromeshellCrab(UUID ownerId) {
public ChromeshellCrab(final ChromeshellCrab card) {
public ChromeshellCrab copy() {return new ChromeshellCrab(this);
public class CollectiveVoyage extends CardImpl {
public CollectiveVoyage(UUID ownerId) {
public CollectiveVoyage(final CollectiveVoyage card) {
public CollectiveVoyage copy() {return new CollectiveVoyage(this);
class CollectiveVoyageEffect extends OneShotEffect {
public CollectiveVoyageEffect() {
public CollectiveVoyageEffect(final CollectiveVoyageEffect effect) {
public CollectiveVoyageEffect copy() {return new CollectiveVoyageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return xValue;
public class CourtHussar extends CardImpl {
public CourtHussar(UUID ownerId) {
public CourtHussar(final CourtHussar card) {
public CourtHussar copy() {return new CourtHussar(this);
public class DamiaSageOfStone extends CardImpl {
public DamiaSageOfStone(UUID ownerId) {
public DamiaSageOfStone(final DamiaSageOfStone card) {
public DamiaSageOfStone copy() {return new DamiaSageOfStone(this);
class DamiaSageOfStoneTriggeredAbility extends BeginningOfUpkeepTriggeredAbility {
DamiaSageOfStoneTriggeredAbility() {
DamiaSageOfStoneTriggeredAbility(final DamiaSageOfStoneTriggeredAbility ability) {
public DamiaSageOfStoneTriggeredAbility copy() {return new DamiaSageOfStoneTriggeredAbility(this);
public boolean checkInterveningIfClause(Game game) {return player.getHand().size() < 7;return false;
public String getRule() {return "At the beginning of your upkeep, if you have fewer than seven cards in hand, draw cards equal to the difference";
public class DeathByDragons extends CardImpl {
public DeathByDragons(UUID ownerId) {
public DeathByDragons(final DeathByDragons card) {
public DeathByDragons copy() {return new DeathByDragons(this);
class DeathByDragonsEffect extends OneShotEffect {
public DeathByDragonsEffect() {
public DeathByDragonsEffect(final DeathByDragonsEffect effect) {
public DeathByDragonsEffect copy() {return new DeathByDragonsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DesecratorHag extends CardImpl {
public DesecratorHag(UUID ownerId) {
public DesecratorHag(final DesecratorHag card) {
public DesecratorHag copy() {return new DesecratorHag(this);
class DesecratorHagEffect extends OneShotEffect {
public DesecratorHagEffect() {this.staticText = "return to your hand the creature card in your graveyard with the greatest power. If two or more cards are tied for greatest power, you choose one of them";
public DesecratorHagEffect(final DesecratorHagEffect effect) {
public DesecratorHagEffect copy() {return new DesecratorHagEffect(this);
public boolean apply(Game game, Ability source) {return true;return you.moveCards(card, null, Zone.HAND, source, game);return you.moveCards(cards, null, Zone.HAND, source, game);return false;
public class DreadshipReef extends CardImpl {
public DreadshipReef(UUID ownerId) {
public DreadshipReef(final DreadshipReef card) {
public DreadshipReef copy() {return new DreadshipReef(this);
public class Faultgrinder extends CardImpl {
public Faultgrinder(UUID ownerId) {
public Faultgrinder(final Faultgrinder card) {
public Faultgrinder copy() {return new Faultgrinder(this);
public class Fertilid extends CardImpl {
public Fertilid(UUID ownerId) {
public Fertilid(final Fertilid card) {
public Fertilid copy() {return new Fertilid(this);
public class FierceEmpath extends CardImpl {
public FierceEmpath(UUID ownerId) {
public FierceEmpath(final FierceEmpath card) {
public FierceEmpath copy() {return new FierceEmpath(this);
public class Flusterstorm extends CardImpl {
public Flusterstorm(UUID ownerId) {
public Flusterstorm(final Flusterstorm card) {
public Flusterstorm copy() {return new Flusterstorm(this);
public class FootbottomFeast extends CardImpl {
public FootbottomFeast(UUID ownerId) {
public FootbottomFeast(final FootbottomFeast card) {
public FootbottomFeast copy() {return new FootbottomFeast(this);
public class FungalReaches extends CardImpl {
public FungalReaches(UUID ownerId) {
public FungalReaches(final FungalReaches card) {
public FungalReaches copy() {return new FungalReaches(this);
public class GhaveGuruOfSpores extends CardImpl {
public GhaveGuruOfSpores(UUID ownerId) {
public GhaveGuruOfSpores(final GhaveGuruOfSpores card) {
public GhaveGuruOfSpores copy() {return new GhaveGuruOfSpores(this);
public class GwyllionHedgeMage extends CardImpl {
public GwyllionHedgeMage(UUID ownerId) {
public GwyllionHedgeMage(final GwyllionHedgeMage card) {
public GwyllionHedgeMage copy() {return new GwyllionHedgeMage(this);
public class HornetQueen extends CardImpl {
public HornetQueen(UUID ownerId) {
public HornetQueen(final HornetQueen card) {
public HornetQueen copy() {return new HornetQueen(this);
class HornetQueenInsectToken extends Token {
public HornetQueenInsectToken() {
public class HydraOmnivore extends CardImpl {
public HydraOmnivore(UUID ownerId) {
public HydraOmnivore(final HydraOmnivore card) {
public HydraOmnivore copy() {return new HydraOmnivore(this);
class HydraOmnivoreEffect extends OneShotEffect {
public HydraOmnivoreEffect() {
public HydraOmnivoreEffect(final HydraOmnivoreEffect effect) {
public HydraOmnivoreEffect copy() {return new HydraOmnivoreEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Invigorate extends CardImpl {
public Invigorate(UUID ownerId) {
public Invigorate(final Invigorate card) {
public Invigorate copy() {return new Invigorate(this);
public class KaaliaOfTheVast extends CardImpl {
public KaaliaOfTheVast(UUID ownerId) {
public KaaliaOfTheVast(final KaaliaOfTheVast card) {
public KaaliaOfTheVast copy() {return new KaaliaOfTheVast(this);
class KaaliaOfTheVastAttacksAbility extends TriggeredAbilityImpl {
public KaaliaOfTheVastAttacksAbility() {
public KaaliaOfTheVastAttacksAbility(final KaaliaOfTheVastAttacksAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks an opponent, you may put an Angel, Demon, or Dragon creature card from your hand onto the battlefield tapped and attacking that opponent.";
public KaaliaOfTheVastAttacksAbility copy() {return new KaaliaOfTheVastAttacksAbility(this);
class KaaliaOfTheVastEffect extends OneShotEffect {
public KaaliaOfTheVastEffect() {
public KaaliaOfTheVastEffect(final KaaliaOfTheVastEffect effect) {
public KaaliaOfTheVastEffect copy() {return new KaaliaOfTheVastEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;return new KaradorGhostChieftain(this);return true;return false;return game.getCard(abilityToModify.getSourceId()) != null;return false;return new KaradorGhostChieftainCostReductionEffect(this);return new KaradorGhostChieftainContinuousEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public boolean apply(Game game, Ability source) {return true;return new KaradorGhostChieftainCastFromGraveyardEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return !watcher.isAbilityUsed();return false;
public void watch(GameEvent event, Game game) {return new KaradorGhostChieftainWatcher(this);
public void reset() {
public boolean isAbilityUsed() {return abilityUsed;
public class KodamasReach extends CardImpl {
public KodamasReach(UUID ownerId) {
public KodamasReach(final KodamasReach card) {
public KodamasReach copy() {return new KodamasReach(this);
class KodamasReachEffect extends OneShotEffect {
public KodamasReachEffect() {
public KodamasReachEffect(final KodamasReachEffect effect) {
public KodamasReachEffect copy() {return new KodamasReachEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class LashOut extends CardImpl {
public LashOut(UUID ownerId) {
public LashOut(final LashOut card) {
public LashOut copy() {return new LashOut(this);
class LashOutEffect extends OneShotEffect {
public LashOutEffect() {
public LashOutEffect(final LashOutEffect effect) {
public LashOutEffect copy() {return new LashOutEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MagmaticForce extends CardImpl {
public MagmaticForce(UUID ownerId) {
public MagmaticForce(final MagmaticForce card) {
public MagmaticForce copy() {return new MagmaticForce(this);
public class MagusOfTheVineyard extends CardImpl {
public MagusOfTheVineyard(UUID ownerId) {
public MagusOfTheVineyard(final MagusOfTheVineyard card) {
public MagusOfTheVineyard copy() {return new MagusOfTheVineyard(this);
public class ManaChargedDragon extends CardImpl {
public ManaChargedDragon(UUID ownerId) {
public ManaChargedDragon(final ManaChargedDragon card) {
public ManaChargedDragon copy() {return new ManaChargedDragon(this);
class ManaChargedDragonTriggeredAbility extends AttacksOrBlocksTriggeredAbility {
ManaChargedDragonTriggeredAbility() {
public String getRule() {return "Join forces &mdash; Whenever {this} attacks or blocks, each player starting with you may pay any amount of mana. {this} gets +X/+0 until end of turn, where X is the total amount of mana paid this way";
class ManaChargedDragonEffect extends OneShotEffect {return xValue;
ManaChargedDragonEffect() {
ManaChargedDragonEffect(final ManaChargedDragonEffect effect) {
public ManaChargedDragonEffect copy() {return new ManaChargedDragonEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NinThePainArtist extends CardImpl {
public NinThePainArtist(UUID ownerId) {
public NinThePainArtist(final NinThePainArtist card) {
public NinThePainArtist copy() {return new NinThePainArtist(this);
class NinThePainArtistEffect extends OneShotEffect {
NinThePainArtistEffect() {
NinThePainArtistEffect(final NinThePainArtistEffect effect) {
public NinThePainArtistEffect copy() {return new NinThePainArtistEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NumotTheDevastator extends CardImpl {
public NumotTheDevastator(UUID ownerId) {
public NumotTheDevastator(final NumotTheDevastator card) {
public NumotTheDevastator copy() {return new NumotTheDevastator(this);
public class OrosTheAvenger extends CardImpl {
public OrosTheAvenger(UUID ownerId) {
public OrosTheAvenger(final OrosTheAvenger card) {
public OrosTheAvenger copy() {return new OrosTheAvenger(this);
public class PerilousResearch extends CardImpl {
public PerilousResearch(UUID ownerId) {
public PerilousResearch(final PerilousResearch card) {
public PerilousResearch copy() {return new PerilousResearch(this);
class PerilousResearchEffect extends OneShotEffect {
public PerilousResearchEffect() {
public PerilousResearchEffect(final PerilousResearchEffect effect) {
public PerilousResearchEffect copy() {return new PerilousResearchEffect(this);
public boolean apply(Game game, Ability source) {return permanent.sacrifice(source.getSourceId(), game);return false;
public class PollenLullaby extends CardImpl {
public PollenLullaby(UUID ownerId) {
public PollenLullaby(final PollenLullaby card) {
public PollenLullaby copy() {return new PollenLullaby(this);
class PollenLullabyEffect extends OneShotEffect {
public PollenLullabyEffect() {
public PollenLullabyEffect(final PollenLullabyEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PollenLullabyEffect copy() {return new PollenLullabyEffect(this);
public class PropheticBolt extends CardImpl {
public PropheticBolt(UUID ownerId) {
public PropheticBolt(final PropheticBolt card) {
public PropheticBolt copy() {return new PropheticBolt(this);
public class ReturnToDust extends CardImpl {
public ReturnToDust(UUID ownerId) {
public ReturnToDust(final ReturnToDust card) {
public void adjustTargets(Ability ability, Game game) {
public ReturnToDust copy() {return new ReturnToDust(this);
public class RighteousCause extends CardImpl {
public RighteousCause(UUID ownerId) {
public RighteousCause(final RighteousCause card) {
public RighteousCause copy() {return new RighteousCause(this);
public class RikuOfTwoReflections extends CardImpl {
public RikuOfTwoReflections(UUID ownerId) {
public RikuOfTwoReflections(final RikuOfTwoReflections card) {
public RikuOfTwoReflections copy() {return new RikuOfTwoReflections(this);
class RikuOfTwoReflectionsCopyEffect extends OneShotEffect {
public RikuOfTwoReflectionsCopyEffect() {
public RikuOfTwoReflectionsCopyEffect(final RikuOfTwoReflectionsCopyEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public RikuOfTwoReflectionsCopyEffect copy() {return new RikuOfTwoReflectionsCopyEffect(this);
public class RuhanOfTheFomori extends CardImpl {
public RuhanOfTheFomori(UUID ownerId) {
public RuhanOfTheFomori(final RuhanOfTheFomori card) {
public RuhanOfTheFomori copy() {return new RuhanOfTheFomori(this);
class RuhanOfTheFomoriEffect extends OneShotEffect {
public RuhanOfTheFomoriEffect() {
public RuhanOfTheFomoriEffect(final RuhanOfTheFomoriEffect effect) {
public RuhanOfTheFomoriEffect copy() {return new RuhanOfTheFomoriEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AttacksIfAbleTargetPlayerSourceEffect extends RequirementEffect {
public AttacksIfAbleTargetPlayerSourceEffect() {
public AttacksIfAbleTargetPlayerSourceEffect(final AttacksIfAbleTargetPlayerSourceEffect effect) {
public AttacksIfAbleTargetPlayerSourceEffect copy() {return new AttacksIfAbleTargetPlayerSourceEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public UUID mustAttackDefender(Ability source, Game game) {return getTargetPointer().getFirst(game, source);
public class ScatteringStroke extends CardImpl {
public ScatteringStroke(UUID ownerId) {
public ScatteringStroke(final ScatteringStroke card) {
public ScatteringStroke copy() {return new ScatteringStroke(this);
class ScatteringStrokeEffect extends OneShotEffect {
public ScatteringStrokeEffect() {
public ScatteringStrokeEffect(final ScatteringStrokeEffect effect) {
public ScatteringStrokeEffect copy() {return new ScatteringStrokeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ScavengingOoze extends CardImpl {
public ScavengingOoze(UUID ownerId) {
public ScavengingOoze(final ScavengingOoze card) {
public ScavengingOoze copy() {return new ScavengingOoze(this);
class ScavengingOozeEffect extends OneShotEffect {
public ScavengingOozeEffect() {
public ScavengingOozeEffect(final ScavengingOozeEffect effect) {
public ScavengingOozeEffect copy() {return new ScavengingOozeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SewerNemesis extends CardImpl {
public SewerNemesis(UUID ownerId) {
public SewerNemesis(final SewerNemesis card) {
public SewerNemesis copy() {return new SewerNemesis(this);
class CardsInTargetOpponentsGraveyardCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return chosenPlayer.getGraveyard().size();return 0;
public DynamicValue copy() {return new CardsInTargetOpponentsGraveyardCount();
public String getMessage() {return "cards in the chosen player's graveyard";
public String toString() {return "1";
class SewerNemesisTriggeredAbility extends TriggeredAbilityImpl {
public SewerNemesisTriggeredAbility() {
public SewerNemesisTriggeredAbility(final SewerNemesisTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever the chosen player casts a spell, that player puts the top card of his or her library into his or her graveyard.";
public SewerNemesisTriggeredAbility copy() {return new SewerNemesisTriggeredAbility(this);
public class SharedTrauma extends CardImpl {
public SharedTrauma(UUID ownerId) {
public SharedTrauma(final SharedTrauma card) {
public SharedTrauma copy() {return new SharedTrauma(this);
class SharedTraumaEffect extends OneShotEffect {
public SharedTraumaEffect() {
public SharedTraumaEffect(final SharedTraumaEffect effect) {
public SharedTraumaEffect copy() {return new SharedTraumaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return xValue;
public class Shriekmaw extends CardImpl {
public Shriekmaw(UUID ownerId) {
public Shriekmaw(final Shriekmaw card) {
public Shriekmaw copy() {return new Shriekmaw(this);
public class SoulSnare extends CardImpl {
public SoulSnare(UUID ownerId) {
public SoulSnare(final SoulSnare card) {
public SoulSnare copy() {return new SoulSnare(this);
class SoulSnareFilter extends FilterAttackingCreature {
public SoulSnareFilter() {
public SoulSnareFilter(final SoulSnareFilter filter) {
public SoulSnareFilter copy() {return new SoulSnareFilter(this);
public boolean match(Permanent permanent, UUID sourceId, UUID playerId, Game game) {return false;return true;return true;return false;
public class Spawnwrithe extends CardImpl {
public Spawnwrithe(UUID ownerId) {
public Spawnwrithe(final Spawnwrithe card) {
public Spawnwrithe copy() {return new Spawnwrithe(this);
public class SpellCrumple extends CardImpl {
public SpellCrumple(UUID ownerId) {
public SpellCrumple(final SpellCrumple card) {
public SpellCrumple copy() {return new SpellCrumple(this);
class SpellCrumpleCounterEffect extends OneShotEffect {
public SpellCrumpleCounterEffect() {
public SpellCrumpleCounterEffect(final SpellCrumpleCounterEffect effect) {
public SpellCrumpleCounterEffect copy() {return new SpellCrumpleCounterEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(targetPointer.getFirst(game, source), source.getSourceId(), game, Zone.LIBRARY, false, ZoneDetail.BOTTOM);return false;
public class Squallmonger extends CardImpl {
public Squallmonger(UUID ownerId) {
public Squallmonger(final Squallmonger card) {
public Squallmonger copy() {return new Squallmonger(this);
public class StitchTogether extends CardImpl {
public StitchTogether(UUID ownerId) {
public StitchTogether(final StitchTogether card) {
public StitchTogether copy() {return new StitchTogether(this);
public class Stranglehold extends CardImpl {
public Stranglehold(UUID ownerId) {
public Stranglehold(final Stranglehold card) {
public Stranglehold copy() {return new Stranglehold(this);
public OpponentsCantSearchLibarariesEffect() {
public OpponentsCantSearchLibarariesEffect(final OpponentsCantSearchLibarariesEffect effect) {
public OpponentsCantSearchLibarariesEffect copy() {return new OpponentsCantSearchLibarariesEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't search libraries (" + mageObject.getLogName() + " in play).";return null;
public boolean checksEventType(GameEvent event, Game game) {return EventType.SEARCH_LIBRARY.equals(event.getType());
public boolean applies(GameEvent event, Ability source, Game game) {return controller != null && controller.hasOpponent(event.getPlayerId(), game);
class StrangleholdSkipExtraTurnsEffect extends ReplacementEffectImpl {
public StrangleholdSkipExtraTurnsEffect() {
public StrangleholdSkipExtraTurnsEffect(final StrangleholdSkipExtraTurnsEffect effect) {
public StrangleholdSkipExtraTurnsEffect copy() {return new StrangleholdSkipExtraTurnsEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.EXTRA_TURN);
public boolean applies(GameEvent event, Ability source, Game game) {return controller != null && controller.hasOpponent(event.getPlayerId(), game);
public class SvogthosTheRestlessTomb extends CardImpl {
public SvogthosTheRestlessTomb(UUID ownerId) {
public SvogthosTheRestlessTomb(final SvogthosTheRestlessTomb card) {
public SvogthosTheRestlessTomb copy() {return new SvogthosTheRestlessTomb(this);
class SvogthosToken extends Token {
public SvogthosToken() {
public class SzadekLordOfSecrets extends CardImpl {
public SzadekLordOfSecrets(UUID ownerId) {
public SzadekLordOfSecrets(final SzadekLordOfSecrets card) {
public SzadekLordOfSecrets copy() {return new SzadekLordOfSecrets(this);
class SzadekLordOfSecretsEffect extends ReplacementEffectImpl {
SzadekLordOfSecretsEffect() {
SzadekLordOfSecretsEffect(final SzadekLordOfSecretsEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public SzadekLordOfSecretsEffect copy() {return new SzadekLordOfSecretsEffect(this);
public class TarielReckonerOfSouls extends CardImpl {
public TarielReckonerOfSouls(UUID ownerId) {
public TarielReckonerOfSouls(final TarielReckonerOfSouls card) {
public TarielReckonerOfSouls copy() {return new TarielReckonerOfSouls(this);
class TarielReckonerOfSoulsEffect extends OneShotEffect {
public TarielReckonerOfSoulsEffect() {
public TarielReckonerOfSoulsEffect(final TarielReckonerOfSoulsEffect effect) {
public TarielReckonerOfSoulsEffect copy() {return new TarielReckonerOfSoulsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TenebTheHarvester extends CardImpl {
public TenebTheHarvester(UUID ownerId) {
public TenebTheHarvester(final TenebTheHarvester card) {
public TenebTheHarvester copy() {return new TenebTheHarvester(this);
public class TheMimeoplasm extends CardImpl {
public TheMimeoplasm(UUID ownerId) {
public TheMimeoplasm(final TheMimeoplasm card) {
public TheMimeoplasm copy() {return new TheMimeoplasm(this);
class TheMimeoplasmEffect extends OneShotEffect {
TheMimeoplasmEffect() {
TheMimeoplasmEffect(final TheMimeoplasmEffect effect) {
public TheMimeoplasmEffect copy() {return new TheMimeoplasmEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TrenchGorger extends CardImpl {
public TrenchGorger(UUID ownerId) {
public TrenchGorger(final TrenchGorger card) {
public TrenchGorger copy() {return new TrenchGorger(this);
class TrenchGorgerEffect extends OneShotEffect {
public TrenchGorgerEffect() {
public TrenchGorgerEffect(final TrenchGorgerEffect effect) {
public TrenchGorgerEffect copy() {return new TrenchGorgerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TributeToTheWild extends CardImpl {
public TributeToTheWild(UUID ownerId) {
public TributeToTheWild(final TributeToTheWild card) {
public TributeToTheWild copy() {return new TributeToTheWild(this);
public class VeteranExplorer extends CardImpl {
public VeteranExplorer(UUID ownerId) {
public VeteranExplorer(final VeteranExplorer card) {
public VeteranExplorer copy() {return new VeteranExplorer(this);
class VeteranExplorerEffect extends OneShotEffect {
public VeteranExplorerEffect() {
public VeteranExplorerEffect(final VeteranExplorerEffect effect) {
public VeteranExplorerEffect copy() {return new VeteranExplorerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private void chooseAndSearchLibrary(List<Player> usingPlayers, Player player, Ability source, Game game) {
public class VishKalBloodArbiter extends CardImpl {
public VishKalBloodArbiter(UUID ownerId) {
public VishKalBloodArbiter(final VishKalBloodArbiter card) {
public VishKalBloodArbiter copy() {return new VishKalBloodArbiter(this);
class VishKalBloodArbiterCost extends CostImpl {
public VishKalBloodArbiterCost(Counter counter) {
public VishKalBloodArbiterCost(VishKalBloodArbiterCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {
{return paid;
public VishKalBloodArbiterCost copy() {return new VishKalBloodArbiterCost(this);
public int getAmount() {return amount;
class VishKalBloodArbiterDynamicValue implements DynamicValue {
public VishKalBloodArbiterDynamicValue() {
public VishKalBloodArbiterDynamicValue(final VishKalBloodArbiterDynamicValue dynamicValue) {
public int calculate(Game game, Ability source, Effect effect) {return count;
public VishKalBloodArbiterDynamicValue copy() {return new VishKalBloodArbiterDynamicValue(this);
public String toString() {return "1";
public String getMessage() {return "the number of +1/+1 counters removed this way";
public class VoroshTheHunter extends CardImpl {
public VoroshTheHunter(UUID ownerId) {
public VoroshTheHunter(final VoroshTheHunter card) {
public VoroshTheHunter copy() {return new VoroshTheHunter(this);
public class VowOfDuty extends CardImpl {
public VowOfDuty(UUID ownerId) {
public VowOfDuty(final VowOfDuty card) {
public VowOfDuty copy() {return new VowOfDuty(this);
public class VowOfFlight extends CardImpl {
public VowOfFlight(UUID ownerId) {
public VowOfFlight(final VowOfFlight card) {
public VowOfFlight copy() {return new VowOfFlight(this);
public class VowOfLightning extends CardImpl {
public VowOfLightning(UUID ownerId) {
public VowOfLightning(final VowOfLightning card) {
public VowOfLightning copy() {return new VowOfLightning(this);
public class VowOfMalice extends CardImpl {
public VowOfMalice(UUID ownerId) {
public VowOfMalice(final VowOfMalice card) {
public VowOfMalice copy() {return new VowOfMalice(this);
public class VowOfWildness extends CardImpl {
public VowOfWildness(UUID ownerId) {
public VowOfWildness(final VowOfWildness card) {
public VowOfWildness copy() {return new VowOfWildness(this);
public class WildRicochet extends CardImpl {
public WildRicochet(UUID ownerId) {
public WildRicochet(final WildRicochet card) {
public WildRicochet copy() {return new WildRicochet(this);
class WildRicochetEffect extends OneShotEffect {
public WildRicochetEffect() {
public WildRicochetEffect(final WildRicochetEffect effect) {
public boolean apply(Game game, Ability source) {return copy.chooseNewTargets(game, you.getId());return false;
public WildRicochetEffect copy() {return new WildRicochetEffect(this);
public class WreckingBall extends CardImpl {
public WreckingBall(UUID ownerId) {
public WreckingBall(final WreckingBall card) {
public WreckingBall copy() {return new WreckingBall(this);
public class YavimayaElder extends CardImpl {
public YavimayaElder(UUID ownerId) {
public YavimayaElder(final YavimayaElder card) {
public YavimayaElder copy() {return new YavimayaElder(this);
public class ZedruuTheGreathearted extends CardImpl {
public ZedruuTheGreathearted(UUID ownerId) {
public ZedruuTheGreathearted(final ZedruuTheGreathearted card) {
public ZedruuTheGreathearted copy() {return new ZedruuTheGreathearted(this);
class ZedruuTheGreatheartedEffect extends ContinuousEffectImpl {
public ZedruuTheGreatheartedEffect() {
public ZedruuTheGreatheartedEffect(final ZedruuTheGreatheartedEffect effect) {
public ZedruuTheGreatheartedEffect copy() {return new ZedruuTheGreatheartedEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(source.getFirstTarget(), game);return false;
public class ActOfAuthority extends CardImpl {
public ActOfAuthority(UUID ownerId) {
public ActOfAuthority(final ActOfAuthority card) {
public ActOfAuthority copy() {return new ActOfAuthority(this);
class ActOfAuthorityEffect extends OneShotEffect {
public ActOfAuthorityEffect() {
public ActOfAuthorityEffect(final ActOfAuthorityEffect effect) {
public ActOfAuthorityEffect copy() {return new ActOfAuthorityEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ActOfAuthorityGainControlEffect extends ContinuousEffectImpl {
public ActOfAuthorityGainControlEffect(Duration duration, UUID controller) {
public ActOfAuthorityGainControlEffect(final ActOfAuthorityGainControlEffect effect) {
public ActOfAuthorityGainControlEffect copy() {return new ActOfAuthorityGainControlEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(controller, game);return false;
public String getText(Mode mode) {return "Gain control of {this}";
public class AEthermagesTouch extends CardImpl {
public AEthermagesTouch(UUID ownerId) {
public AEthermagesTouch(final AEthermagesTouch card) {
public AEthermagesTouch copy() {return new AEthermagesTouch(this);
class AEthermagesTouchEffect extends OneShotEffect {
public AEthermagesTouchEffect() {this.staticText = "Reveal the top four cards of your library. You may put a creature card from among them onto the battlefield. It gains \"At the beginning of your end step, return this creature to its owner's hand.\" Then put the rest of the cards revealed this way on the bottom of your library in any order";
public AEthermagesTouchEffect(final AEthermagesTouchEffect effect) {
public AEthermagesTouchEffect copy() {return new AEthermagesTouchEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AngelOfFinality extends CardImpl {
public AngelOfFinality(UUID ownerId) {
public AngelOfFinality(final AngelOfFinality card) {
public AngelOfFinality copy() {return new AngelOfFinality(this);
public class ArcaneDenial extends CardImpl {
public ArcaneDenial(UUID ownerId) {
public ArcaneDenial(final ArcaneDenial card) {
public ArcaneDenial copy() {return new ArcaneDenial(this);
class ArcaneDenialEffect extends OneShotEffect {
public ArcaneDenialEffect() {
public ArcaneDenialEffect(final ArcaneDenialEffect effect) {
public ArcaneDenialEffect copy() {return new ArcaneDenialEffect(this);
public boolean apply(Game game, Ability source) {return countered;
public class AzoriusHerald extends CardImpl {
public AzoriusHerald(UUID ownerId) {
public AzoriusHerald(final AzoriusHerald card) {
public AzoriusHerald copy() {return new AzoriusHerald(this);
public class BalefulForce extends CardImpl {
public BalefulForce(UUID ownerId) {
public BalefulForce(final BalefulForce card) {
public BalefulForce copy() {return new BalefulForce(this);
public class BaneOfProgress extends CardImpl {
public BaneOfProgress(UUID ownerId) {
public BaneOfProgress(final BaneOfProgress card) {
public BaneOfProgress copy() {return new BaneOfProgress(this);
class BaneOfProgressEffect extends OneShotEffect {
public BaneOfProgressEffect() {
public BaneOfProgressEffect(final BaneOfProgressEffect effect) {
public BaneOfProgressEffect copy() {return new BaneOfProgressEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.P1P1.createInstance(destroyedPermanents),true).apply(game, source);return true;
public class Borrowing100000Arrows extends CardImpl {
public Borrowing100000Arrows(UUID ownerId) {
public Borrowing100000Arrows(final Borrowing100000Arrows card) {
public Borrowing100000Arrows copy() {return new Borrowing100000Arrows(this);
class Borrowing100000ArrowsEffect extends OneShotEffect {
public Borrowing100000ArrowsEffect() {
public Borrowing100000ArrowsEffect(final Borrowing100000ArrowsEffect effect) {
public Borrowing100000ArrowsEffect copy() {return new Borrowing100000ArrowsEffect(this);
public boolean apply(Game game, Ability source) {return new DrawCardSourceControllerEffect(game.getBattlefield().count(filter, source.getSourceId(), source.getControllerId(), game)).apply(game, source);return false;
public class BrilliantPlan extends CardImpl {
public BrilliantPlan(UUID ownerId) {
public BrilliantPlan(final BrilliantPlan card) {
public BrilliantPlan copy() {return new BrilliantPlan(this);
public class BroodingSaurian extends CardImpl {
public BroodingSaurian(UUID ownerId) {
public BroodingSaurian(final BroodingSaurian card) {
public BroodingSaurian copy() {return new BroodingSaurian(this);
class BroodingSaurianControlEffect extends ContinuousEffectImpl {
public BroodingSaurianControlEffect() {
public BroodingSaurianControlEffect(final BroodingSaurianControlEffect effect) {
public BroodingSaurianControlEffect copy() {return new BroodingSaurianControlEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public class CommandTower extends CardImpl {
public CommandTower(UUID ownerId) {
public CommandTower(final CommandTower card) {
public CommandTower copy() {return new CommandTower(this);
public class Crawlspace extends CardImpl {
public Crawlspace(UUID ownerId) {
public Crawlspace(final Crawlspace card) {
public Crawlspace copy() {return new Crawlspace(this);
class ChangeMaxAttackedBySourceEffect extends ContinuousEffectImpl {
public ChangeMaxAttackedBySourceEffect(int maxAttackedBy) {
public ChangeMaxAttackedBySourceEffect(final ChangeMaxAttackedBySourceEffect effect) {
public ChangeMaxAttackedBySourceEffect copy() {return new ChangeMaxAttackedBySourceEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class CrosissCharm extends CardImpl {
public CrosissCharm(UUID ownerId) {
public CrosissCharm(final CrosissCharm card) {
public CrosissCharm copy() {return new CrosissCharm(this);
public class CurseOfChaos extends CardImpl {
public CurseOfChaos(UUID ownerId) {
public CurseOfChaos(final CurseOfChaos card) {
public CurseOfChaos copy() {return new CurseOfChaos(this);
class CurseOfChaosTriggeredAbility extends TriggeredAbilityImpl {
public CurseOfChaosTriggeredAbility() {
public class CurseOfShallowGraves extends CardImpl {
public CurseOfShallowGraves(UUID ownerId) {
public CurseOfShallowGraves(final CurseOfShallowGraves card) {
public CurseOfShallowGraves copy() {return new CurseOfShallowGraves(this);
class CurseOfShallowTriggeredAbility extends TriggeredAbilityImpl {
public CurseOfShallowTriggeredAbility() {
public CurseOfShallowTriggeredAbility(Effect effect, boolean optional, String text) {
public CurseOfShallowTriggeredAbility(final CurseOfShallowTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player attacks enchanted player with one or more creatures, that attacking player may put a 2/2 black Zombie creature token onto the battlefield tapped.";
public CurseOfShallowTriggeredAbility copy() {return new CurseOfShallowTriggeredAbility(this);
class CurseOfShallowEffect extends OneShotEffect {
public CurseOfShallowEffect() {
public CurseOfShallowEffect(final CurseOfShallowEffect effect) {
public CurseOfShallowEffect copy() {return new CurseOfShallowEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return false;
public class CurseOfTheForsaken extends CardImpl {
public CurseOfTheForsaken(UUID ownerId) {
public CurseOfTheForsaken(final CurseOfTheForsaken card) {
public CurseOfTheForsaken copy() {return new CurseOfTheForsaken(this);
class CurseOfTheForsakenTriggeredAbility extends TriggeredAbilityImpl {
public CurseOfTheForsakenTriggeredAbility() {
public CurseOfTheForsakenTriggeredAbility(Effect effect, boolean optional, String text) {
public CurseOfTheForsakenTriggeredAbility(final CurseOfTheForsakenTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature attacks enchanted player, its controller gains 1 life.";
public CurseOfTheForsakenTriggeredAbility copy() {return new CurseOfTheForsakenTriggeredAbility(this);
public class DarksteelMutation extends CardImpl {
public DarksteelMutation(UUID ownerId) {
public DarksteelMutation(final DarksteelMutation card) {
public DarksteelMutation copy() {return new DarksteelMutation(this);
class DarksteelMutationInsectToken extends Token {
public DarksteelMutationInsectToken() {
public class DeadwoodTreefolk extends CardImpl {
public DeadwoodTreefolk(UUID ownerId) {
public DeadwoodTreefolk(final DeadwoodTreefolk card) {
public DeadwoodTreefolk copy() {return new DeadwoodTreefolk(this);
public class DecreeOfPain extends CardImpl {
public DecreeOfPain(UUID ownerId) {
public DecreeOfPain(final DecreeOfPain card) {
public DecreeOfPain copy() {return new DecreeOfPain(this);
class DecreeOfPainEffect extends OneShotEffect {
public DecreeOfPainEffect() {
public DecreeOfPainEffect(final DecreeOfPainEffect effect) {
public DecreeOfPainEffect copy() {return new DecreeOfPainEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DeepfireElemental extends CardImpl {
public DeepfireElemental(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public DeepfireElemental(final DeepfireElemental card) {
public DeepfireElemental copy() {return new DeepfireElemental(this);
public class DereviEmpyrialTactician extends CardImpl {
public DereviEmpyrialTactician(UUID ownerId) {
public DereviEmpyrialTactician(final DereviEmpyrialTactician card) {
public DereviEmpyrialTactician copy() {return new DereviEmpyrialTactician(this);
class DereviEmpyrialTacticianTriggeredAbility extends TriggeredAbilityImpl {
public DereviEmpyrialTacticianTriggeredAbility(Effect effect) {
public DereviEmpyrialTacticianTriggeredAbility(DereviEmpyrialTacticianTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD || event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "Whenever {this} enters the battlefield or a creature you control deals combat damage to a player, you may tap or untap target permanent";
public DereviEmpyrialTacticianTriggeredAbility copy() {return new DereviEmpyrialTacticianTriggeredAbility(this);
class DereviEmpyrialTacticianAbility extends ActivatedAbilityImpl {
public DereviEmpyrialTacticianAbility() {
public boolean canActivate(UUID playerId, Game game) {return false;return super.canActivate(playerId, game);
public DereviEmpyrialTacticianAbility(DereviEmpyrialTacticianAbility ability) {
public DereviEmpyrialTacticianAbility copy() {return new DereviEmpyrialTacticianAbility(this);
class PutCommanderOnBattlefieldEffect extends OneShotEffect {
public PutCommanderOnBattlefieldEffect() {
public PutCommanderOnBattlefieldEffect(final PutCommanderOnBattlefieldEffect effect) {
public PutCommanderOnBattlefieldEffect copy() {return new PutCommanderOnBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class DivinerSpirit extends CardImpl {
public DivinerSpirit(UUID ownerId) {
public DivinerSpirit(final DivinerSpirit card) {
public DivinerSpirit copy() {return new DivinerSpirit(this);
class DivinerSpiritEffect extends OneShotEffect {
public DivinerSpiritEffect() {
public DivinerSpiritEffect(final DivinerSpiritEffect effect) {
public DivinerSpiritEffect copy() {return new DivinerSpiritEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DjinnOfInfiniteDeceits extends CardImpl {
public DjinnOfInfiniteDeceits(UUID ownerId) {
public DjinnOfInfiniteDeceits(final DjinnOfInfiniteDeceits card) {
public DjinnOfInfiniteDeceits copy() {return new DjinnOfInfiniteDeceits(this);
public class DromarsCharm extends CardImpl {
public DromarsCharm(UUID ownerId) {
public DromarsCharm(final DromarsCharm card) {
public DromarsCharm copy() {return new DromarsCharm(this);
public class EndlessCockroaches extends CardImpl {
public EndlessCockroaches(UUID ownerId) {
public EndlessCockroaches(final EndlessCockroaches card) {
public EndlessCockroaches copy() {return new EndlessCockroaches(this);
public class EndrekSahrMasterBreeder extends CardImpl {
public EndrekSahrMasterBreeder(UUID ownerId) {
public EndrekSahrMasterBreeder(final EndrekSahrMasterBreeder card) {
public EndrekSahrMasterBreeder copy() {return new EndrekSahrMasterBreeder(this);
class EndrekSahrMasterBreederEffect extends OneShotEffect {
public EndrekSahrMasterBreederEffect() {
public EndrekSahrMasterBreederEffect(final EndrekSahrMasterBreederEffect effect) {
public EndrekSahrMasterBreederEffect copy() {return new EndrekSahrMasterBreederEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new ThrullToken(), cmc).apply(game, source);return true;return false;
public class EyeOfDoom extends CardImpl {
public EyeOfDoom(UUID ownerId) {
public EyeOfDoom(final EyeOfDoom card) {
public EyeOfDoom copy() {return new EyeOfDoom(this);
class EyeOfDoomEffect extends OneShotEffect {
public EyeOfDoomEffect() {
public EyeOfDoomEffect(final EyeOfDoomEffect effect) {
public EyeOfDoomEffect copy() {return new EyeOfDoomEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Famine extends CardImpl {
public Famine(UUID ownerId) {
public Famine(final Famine card) {
public Famine copy() {return new Famine(this);
public class FellShepherd extends CardImpl {
public FellShepherd(UUID ownerId) {
public FellShepherd(final FellShepherd card) {
public FellShepherd copy() {return new FellShepherd(this);
class FellShepherdWatcher extends Watcher {
public FellShepherdWatcher() {
public FellShepherdWatcher(final FellShepherdWatcher watcher) {
public FellShepherdWatcher copy() {return new FellShepherdWatcher(this);
public Set<UUID> getCreaturesIds() {return creatureIds;
public void watch(GameEvent event, Game game) {
public void reset() {
class FellShepherdEffect extends OneShotEffect {
public FellShepherdEffect() {this.staticText = "return to your hand all creature cards that were put into your graveyard from the battlefield this turn";
public FellShepherdEffect(final FellShepherdEffect effect) {
public FellShepherdEffect copy() {return new FellShepherdEffect(this);
public boolean apply(Game game, Ability source) {sb.insert(0, "Fell Shepherd - returning to hand:");return true;return false;return new Flickerform(this);this.staticText = "Exile enchanted creature and all Auras attached to it. At the beginning of the next end step, return that card to the battlefield under its owner's control. If you do, return the other cards exiled this way to the battlefield under their owners' control attached to that creature";return new FlickerformEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;this.staticText = "return that card to the battlefield under its owner's control. If you do, return the other cards exiled this way to the battlefield under their owners' control attached to that creature";return new FlickerformReturnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Foster extends CardImpl {
public Foster(UUID ownerId) {
public Foster(final Foster card) {
public Foster copy() {return new Foster(this);
class FosterEffect extends OneShotEffect {
public FosterEffect() {
public FosterEffect(final FosterEffect effect) {
public FosterEffect copy() {return new FosterEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class FromTheAshes extends CardImpl {
public FromTheAshes(UUID ownerId) {
public FromTheAshes(final FromTheAshes card) {
public FromTheAshes copy() {return new FromTheAshes(this);
class FromTheAshesEffect extends OneShotEffect {
public FromTheAshesEffect() {
public FromTheAshesEffect(final FromTheAshesEffect effect) {
public FromTheAshesEffect copy() {return new FromTheAshesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HomewardPath extends CardImpl {
public HomewardPath(UUID ownerId) {
public HomewardPath(final HomewardPath card) {
public HomewardPath copy() {return new HomewardPath(this);
class HomewardPathControlEffect extends ContinuousEffectImpl {
public HomewardPathControlEffect() {
public HomewardPathControlEffect(final HomewardPathControlEffect effect) {
public HomewardPathControlEffect copy() {return new HomewardPathControlEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public class HoodedHorror extends CardImpl {
public HoodedHorror(UUID ownerId) {
public HoodedHorror(final HoodedHorror card) {
public HoodedHorror copy() {return new HoodedHorror(this);
class HoodedHorrorCantBeBlockedEffect extends RestrictionEffect {
public HoodedHorrorCantBeBlockedEffect() {
public HoodedHorrorCantBeBlockedEffect(final HoodedHorrorCantBeBlockedEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return true;
public HoodedHorrorCantBeBlockedEffect copy() {return new HoodedHorrorCantBeBlockedEffect(this);
public class HuaTuoHonoredPhysician extends CardImpl {
public HuaTuoHonoredPhysician(UUID ownerId) {
public HuaTuoHonoredPhysician(final HuaTuoHonoredPhysician card) {
public HuaTuoHonoredPhysician copy() {return new HuaTuoHonoredPhysician(this);
public class HullBreach extends CardImpl {
public HullBreach(UUID ownerId) {
public HullBreach(final HullBreach card) {
public HullBreach copy() {return new HullBreach(this);
public class IllusionistsGambit extends CardImpl {
public IllusionistsGambit(UUID ownerId) {
public IllusionistsGambit(final IllusionistsGambit card) {
public IllusionistsGambit copy() {return new IllusionistsGambit(this);
class IllusionistsGambitRemoveFromCombatEffect extends OneShotEffect {
public IllusionistsGambitRemoveFromCombatEffect() {
public IllusionistsGambitRemoveFromCombatEffect(final IllusionistsGambitRemoveFromCombatEffect effect) {
public IllusionistsGambitRemoveFromCombatEffect copy() {return new IllusionistsGambitRemoveFromCombatEffect(this);
public boolean apply(Game game, Ability source) {return true;
class IllusionistsGambitRequirementEffect extends RequirementEffect {
public IllusionistsGambitRequirementEffect(List attackers, Phase phase) {
public IllusionistsGambitRequirementEffect(final IllusionistsGambitRequirementEffect effect) {
public IllusionistsGambitRequirementEffect copy() {return new IllusionistsGambitRequirementEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return game.getOpponents(permanent.getControllerId()).size() > 1;return false;
public boolean isInactive(Ability source, Game game) {return true;return false;
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
class IllusionistsGambitRestrictionEffect extends RestrictionEffect {
public IllusionistsGambitRestrictionEffect(List attackers, Phase phase) {
public IllusionistsGambitRestrictionEffect(final IllusionistsGambitRestrictionEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return attackers.contains(permanent.getId());
public boolean isInactive(Ability source, Game game) {return true;return false;
public boolean canAttack(UUID defenderId, Ability source, Game game) {return false;return false;return true;
public IllusionistsGambitRestrictionEffect copy() {return new IllusionistsGambitRestrictionEffect(this);
public class IncendiaryCommand extends CardImpl {
public IncendiaryCommand(UUID ownerId) {
public IncendiaryCommand(final IncendiaryCommand card) {
public IncendiaryCommand copy() {return new IncendiaryCommand(this);
class IncendiaryCommandDrawEffect extends OneShotEffect {
public IncendiaryCommandDrawEffect() {
public IncendiaryCommandDrawEffect(final IncendiaryCommandDrawEffect effect) {
public IncendiaryCommandDrawEffect copy() {return new IncendiaryCommandDrawEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JelevaNephaliasScourge extends CardImpl {
public JelevaNephaliasScourge(UUID ownerId) {
public JelevaNephaliasScourge(final JelevaNephaliasScourge card) {
public JelevaNephaliasScourge copy() {return new JelevaNephaliasScourge(this);
class JelevaNephaliasScourgeEffect extends OneShotEffect {
public JelevaNephaliasScourgeEffect() {
public JelevaNephaliasScourgeEffect(final JelevaNephaliasScourgeEffect effect) {
public JelevaNephaliasScourgeEffect copy() {return new JelevaNephaliasScourgeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class JelevaNephaliasCastEffect extends OneShotEffect {
public JelevaNephaliasCastEffect() {
public JelevaNephaliasCastEffect(final JelevaNephaliasCastEffect effect) {
public JelevaNephaliasCastEffect copy() {return new JelevaNephaliasCastEffect(this);
public boolean apply(Game game, Ability source) {return controller.cast(card.getSpellAbility(), game, true);return true;return false;
class JelevaNephaliasWatcher extends Watcher {
public class KherKeep extends CardImpl {
public KherKeep(UUID ownerId) {
public KherKeep(final KherKeep card) {
public KherKeep copy() {return new KherKeep(this);
class KherKeepKoboldToken extends Token {
public KherKeepKoboldToken() {
public class KirtarsWrath extends CardImpl {
public KirtarsWrath(UUID ownerId) {
public KirtarsWrath(final KirtarsWrath card) {
public KirtarsWrath copy() {return new KirtarsWrath(this);
class KirtarsWrathEffect extends OneShotEffect {
public KirtarsWrathEffect() {
public KirtarsWrathEffect(final KirtarsWrathEffect effect) {
public KirtarsWrathEffect copy() {return new KirtarsWrathEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new SpiritWhiteToken(), 2).apply(game, source);
public class KongmingSleepingDragon extends CardImpl {
public KongmingSleepingDragon(UUID ownerId) {
public KongmingSleepingDragon(final KongmingSleepingDragon card) {
public KongmingSleepingDragon copy() {return new KongmingSleepingDragon(this);
public class LeafdrakeRoost extends CardImpl {
public LeafdrakeRoost(UUID ownerId) {
public LeafdrakeRoost(final LeafdrakeRoost card) {
public LeafdrakeRoost copy() {return new LeafdrakeRoost(this);
class LeafdrakeRoostDrakeToken extends Token {
public LeafdrakeRoostDrakeToken() {
public class LeoninBladetrap extends CardImpl {
public LeoninBladetrap(UUID ownerId) {
public LeoninBladetrap(final LeoninBladetrap card) {
public LeoninBladetrap copy() {return new LeoninBladetrap(this);
public class LimDulsVault extends CardImpl {
public LimDulsVault(UUID ownerId) {
public LimDulsVault(final LimDulsVault card) {
public LimDulsVault copy() {return new LimDulsVault(this);
class LimDulsVaultEffect extends OneShotEffect {
public LimDulsVaultEffect() {
public LimDulsVaultEffect(final LimDulsVaultEffect effect) {
public LimDulsVaultEffect copy() {return new LimDulsVaultEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class LuXunScholarGeneral extends CardImpl {
public LuXunScholarGeneral(UUID ownerId) {
public LuXunScholarGeneral(final LuXunScholarGeneral card) {
public LuXunScholarGeneral copy() {return new LuXunScholarGeneral(this);
public class MagusOfTheArena extends CardImpl {
public MagusOfTheArena(UUID ownerId) {
public MagusOfTheArena(final MagusOfTheArena card) {
public MagusOfTheArena copy() {return new MagusOfTheArena(this);
class MagusOfTheArenaEffect extends OneShotEffect {
MagusOfTheArenaEffect() {
MagusOfTheArenaEffect(final MagusOfTheArenaEffect effect) {
public MagusOfTheArenaEffect copy() {return new MagusOfTheArenaEffect(this);
public boolean apply(Game game, Ability source) {return new FightTargetsEffect().apply(game, source);
public class MarathWillOfTheWild extends CardImpl {
public MarathWillOfTheWild(UUID ownerId) {
public void adjustChoices(Ability ability, Game game) {
public MarathWillOfTheWild(final MarathWillOfTheWild card) {
public MarathWillOfTheWild copy() {return new MarathWillOfTheWild(this);
class MarathWillOfTheWildCreateTokenEffect extends OneShotEffect {
public MarathWillOfTheWildCreateTokenEffect() {
public MarathWillOfTheWildCreateTokenEffect(final MarathWillOfTheWildCreateTokenEffect effect) {
public MarathWillOfTheWildCreateTokenEffect copy() {return new MarathWillOfTheWildCreateTokenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MarathWillOfTheWildElementalToken extends Token {
public MarathWillOfTheWildElementalToken() {
class MarathWillOfTheWildRemoveCountersCost extends CostImpl {
public MarathWillOfTheWildRemoveCountersCost() {
public MarathWillOfTheWildRemoveCountersCost(MarathWillOfTheWildRemoveCountersCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;return false;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public MarathWillOfTheWildRemoveCountersCost copy() {return new MarathWillOfTheWildRemoveCountersCost(this);
public class Mirari extends CardImpl {
public Mirari(UUID ownerId) {
public Mirari(final Mirari card) {
public Mirari copy() {return new Mirari(this);
class MirariTriggeredAbility extends TriggeredAbilityImpl {
MirariTriggeredAbility() {
MirariTriggeredAbility(final MirariTriggeredAbility ability) {
public MirariTriggeredAbility copy() {return new MirariTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
private boolean isControlledInstantOrSorcery(Spell spell) {return spell != null
public String getRule() {return "Whenever you cast an instant or sorcery spell, you may pay {3}. If you do, copy that spell. You may choose new targets for the copy.";
public class MoltenSlagheap extends CardImpl {
public MoltenSlagheap(UUID ownerId) {
public MoltenSlagheap(final MoltenSlagheap card) {
public MoltenSlagheap copy() {return new MoltenSlagheap(this);
public class MysticBarrier extends CardImpl {
public MysticBarrier(UUID ownerId) {
public MysticBarrier(final MysticBarrier card) {
public MysticBarrier copy() {return new MysticBarrier(this);
class MysticBarrierTriggeredAbility extends TriggeredAbilityImpl {
public MysticBarrierTriggeredAbility() {
public MysticBarrierTriggeredAbility(final MysticBarrierTriggeredAbility ability) {
public MysticBarrierTriggeredAbility copy() {return new MysticBarrierTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(EventType.ENTERS_THE_BATTLEFIELD) || event.getType().equals(EventType.UPKEEP_STEP_PRE);
public boolean checkTrigger(GameEvent event, Game game) {return event.getTargetId().equals(this.getSourceId());return event.getPlayerId().equals(this.getControllerId());
public String getRule() {return "When {this} enters the battlefield or at the beginning of your upkeep, " + super.getRule();
class MysticBarrierChooseEffect extends OneShotEffect {
public MysticBarrierChooseEffect() {
public MysticBarrierChooseEffect(final MysticBarrierChooseEffect effect) {
public MysticBarrierChooseEffect copy() {return new MysticBarrierChooseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MysticBarrierReplacementEffect extends ReplacementEffectImpl {
MysticBarrierReplacementEffect ( ) {
MysticBarrierReplacementEffect ( MysticBarrierReplacementEffect effect ) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DECLARE_ATTACKER;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public MysticBarrierReplacementEffect copy() {return new MysticBarrierReplacementEffect(this);
public class NayaSoulbeast extends CardImpl {
public NayaSoulbeast(UUID ownerId) {
public NayaSoulbeast(final NayaSoulbeast card) {
public NayaSoulbeast copy() {return new NayaSoulbeast(this);
class NayaSoulbeastCastEffect extends OneShotEffect {
public NayaSoulbeastCastEffect() {
public NayaSoulbeastCastEffect(final NayaSoulbeastCastEffect effect) {
public NayaSoulbeastCastEffect copy() {return new NayaSoulbeastCastEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class NayaSoulbeastReplacementEffect extends ReplacementEffectImpl {
public NayaSoulbeastReplacementEffect() {
public NayaSoulbeastReplacementEffect(final NayaSoulbeastReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getSourceId());
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public NayaSoulbeastReplacementEffect copy() {return new NayaSoulbeastReplacementEffect(this);
public class NekusarTheMindrazer extends CardImpl {
public NekusarTheMindrazer(UUID ownerId) {
public NekusarTheMindrazer(final NekusarTheMindrazer card) {
public NekusarTheMindrazer copy() {return new NekusarTheMindrazer(this);
public class OloroAgelessAscetic extends CardImpl {
public OloroAgelessAscetic(UUID ownerId) {
public OloroAgelessAscetic(final OloroAgelessAscetic card) {
public OloroAgelessAscetic copy() {return new OloroAgelessAscetic(this);
public class OneDozenEyes extends CardImpl {
public OneDozenEyes(UUID ownerId) {
public OneDozenEyes(final OneDozenEyes card) {
public OneDozenEyes copy() {return new OneDozenEyes(this);
class OneDozenEyesBeastToken extends Token {
public OneDozenEyesBeastToken() {
public class OpalPalace extends CardImpl {
public OpalPalace(UUID ownerId) {
public OpalPalace(final OpalPalace card) {
public OpalPalace copy() {return new OpalPalace(this);
class OpalPalaceWatcher extends Watcher {
public OpalPalaceWatcher(String originalId) {
public OpalPalaceWatcher(final OpalPalaceWatcher watcher) {
public OpalPalaceWatcher copy() {return new OpalPalaceWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
class OpalPalaceEntersBattlefieldEffect extends ReplacementEffectImpl {
public OpalPalaceEntersBattlefieldEffect() {
public OpalPalaceEntersBattlefieldEffect(OpalPalaceEntersBattlefieldEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return watcher != null
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public OpalPalaceEntersBattlefieldEffect copy() {return new OpalPalaceEntersBattlefieldEffect(this);
public class Ophiomancer extends CardImpl {
public Ophiomancer(UUID ownerId) {
public Ophiomancer(final Ophiomancer card) {
public Ophiomancer copy() {return new Ophiomancer(this);
class OphiomancerSnakeToken extends Token {
public OphiomancerSnakeToken() {
public class OrderOfSuccession extends CardImpl {
public OrderOfSuccession(UUID ownerId) {
public OrderOfSuccession(final OrderOfSuccession card) {
public OrderOfSuccession copy() {return new OrderOfSuccession(this);
class OrderOfSuccessionEffect extends OneShotEffect {
public OrderOfSuccessionEffect() {
public OrderOfSuccessionEffect(final OrderOfSuccessionEffect effect) {
public OrderOfSuccessionEffect copy() {return new OrderOfSuccessionEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
private UUID getNextPlayerInDirection(boolean left, PlayerList playerList, Game game) {return nextPlayerId;
public class PhantomNantuko extends CardImpl {
public PhantomNantuko(UUID ownerId) {
public PhantomNantuko(final PhantomNantuko card) {
public PhantomNantuko copy() {return new PhantomNantuko(this);
class PhantomNantukoPreventionEffect extends PreventionEffectImpl {
public PhantomNantukoPreventionEffect() {
public PhantomNantukoPreventionEffect(final PhantomNantukoPreventionEffect effect) {
public PhantomNantukoPreventionEffect copy() {return new PhantomNantukoPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PlagueBoiler extends CardImpl {
public PlagueBoiler(UUID ownerId) {
public PlagueBoiler(final PlagueBoiler card) {
public PlagueBoiler copy() {return new PlagueBoiler(this);
class PlagueBoilerEffect extends OneShotEffect {
public PlagueBoilerEffect() {
public PlagueBoilerEffect(final PlagueBoilerEffect effect) {
public PlagueBoilerEffect copy() {return new PlagueBoilerEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.PLAGUE.createInstance(), true).apply(game, source);return new RemoveCounterSourceEffect(CounterType.PLAGUE.createInstance()).apply(game, source);return false;
class PlagueBoilerTriggeredAbility extends TriggeredAbilityImpl {
public PlagueBoilerTriggeredAbility() {
public PlagueBoilerTriggeredAbility(final PlagueBoilerTriggeredAbility ability) {
public PlagueBoilerTriggeredAbility copy() {return new PlagueBoilerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER_ADDED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When {this} has three or more plague counters on it, " + super.getRule();return new PlagueBoilerSacrificeDestroyEffect(this);
public boolean apply(Game game, Ability source) {return new DestroyAllEffect(new FilterNonlandPermanent()).apply(game, source);return false;
public class PresenceOfGond extends CardImpl {
public PresenceOfGond(UUID ownerId) {
public PresenceOfGond(final PresenceOfGond card) {
public PresenceOfGond copy() {return new PresenceOfGond(this);
public class PriceOfKnowledge extends CardImpl {
public PriceOfKnowledge(UUID ownerId) {
public PriceOfKnowledge(final PriceOfKnowledge card) {
public PriceOfKnowledge copy() {return new PriceOfKnowledge(this);
class PriceOfKnowledgeEffect extends OneShotEffect {
public PriceOfKnowledgeEffect(final PriceOfKnowledgeEffect effect) {
public PriceOfKnowledgeEffect() {
public boolean apply(Game game, Ability source) {return true;return false;
public PriceOfKnowledgeEffect copy() {return new PriceOfKnowledgeEffect(this);
public class PrimalVigor extends CardImpl {
public PrimalVigor(UUID ownerId) {
public PrimalVigor(final PrimalVigor card) {
public PrimalVigor copy() {return new PrimalVigor(this);
class PrimalVigorTokenEffect extends ReplacementEffectImpl {
public PrimalVigorTokenEffect() {
public PrimalVigorTokenEffect(final PrimalVigorTokenEffect effect) {
public PrimalVigorTokenEffect copy() {return new PrimalVigorTokenEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CREATE_TOKEN;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
class PrimalVigorCounterEffect extends ReplacementEffectImpl {
PrimalVigorCounterEffect() {
PrimalVigorCounterEffect(final PrimalVigorCounterEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ADD_COUNTERS;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public PrimalVigorCounterEffect copy() {return new PrimalVigorCounterEffect(this);
public class Prosperity extends CardImpl {
public Prosperity(UUID ownerId) {
public Prosperity(final Prosperity card) {
public Prosperity copy() {return new Prosperity(this);
public class ProsshSkyraiderOfKher extends CardImpl {
public ProsshSkyraiderOfKher(UUID ownerId) {
public ProsshSkyraiderOfKher(final ProsshSkyraiderOfKher card) {
public ProsshSkyraiderOfKher copy() {return new ProsshSkyraiderOfKher(this);
class ProsshKoboldToken extends Token {
public ProsshKoboldToken() {
public class Reincarnation extends CardImpl {
public Reincarnation(UUID ownerId) {
public Reincarnation(final Reincarnation card) {
public Reincarnation copy() {return new Reincarnation(this);
class ReincarnationEffect extends OneShotEffect {
public ReincarnationEffect() {this.staticText = "Choose target creature. When that creature dies this turn, return a creature card from its owner's graveyard to the battlefield under the control of that creature's owner";
public ReincarnationEffect(final ReincarnationEffect effect) {
public ReincarnationEffect copy() {return new ReincarnationEffect(this);
public boolean apply(Game game, Ability source) {return true;
class ReincarnationDelayedTriggeredAbility extends DelayedTriggeredAbility {
public ReincarnationDelayedTriggeredAbility(UUID target) {
public ReincarnationDelayedTriggeredAbility(ReincarnationDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public ReincarnationDelayedTriggeredAbility copy() {return new ReincarnationDelayedTriggeredAbility(this);
public String getRule() {return "When that creature dies this turn, return a creature card from its owner's graveyard to the battlefield under the control of that creature's owner.";
class ReincarnationDelayedEffect extends OneShotEffect {
public ReincarnationDelayedEffect(UUID target) {this.staticText = "return a creature card from its owner's graveyard to the battlefield under the control of that creature's owner";
public ReincarnationDelayedEffect(final ReincarnationDelayedEffect effect) {
public ReincarnationDelayedEffect copy() {return new ReincarnationDelayedEffect(this);
public boolean apply(Game game, Ability source) {return card.putOntoBattlefield(game, Zone.GRAVEYARD, source.getSourceId(), player.getId());return true;return false;
public class Restore extends CardImpl {
public Restore(UUID ownerId) {
public Restore(final Restore card) {
public Restore copy() {return new Restore(this);
class RestoreEffect extends OneShotEffect {
public RestoreEffect() {
public RestoreEffect(final RestoreEffect effect) {
public RestoreEffect copy() {return new RestoreEffect(this);
public boolean apply(Game game, Ability source) {return land.putOntoBattlefield(game, Zone.GRAVEYARD, source.getSourceId(), controller.getId());return false;
public class RoonOfTheHiddenRealm extends CardImpl {
public RoonOfTheHiddenRealm(UUID ownerId) {
public RoonOfTheHiddenRealm(final RoonOfTheHiddenRealm card) {
public RoonOfTheHiddenRealm copy() {return new RoonOfTheHiddenRealm(this);
class RoonOfTheHiddenRealmEffect extends OneShotEffect {
public RoonOfTheHiddenRealmEffect() {
public RoonOfTheHiddenRealmEffect(final RoonOfTheHiddenRealmEffect effect) {
public RoonOfTheHiddenRealmEffect copy() {return new RoonOfTheHiddenRealmEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SavageTwister extends CardImpl {
public SavageTwister(UUID ownerId) {
public SavageTwister(final SavageTwister card) {
public SavageTwister copy() {return new SavageTwister(this);
public class SekKuarDeathkeeper extends CardImpl {
public SekKuarDeathkeeper(UUID ownerId) {
public SekKuarDeathkeeper(final SekKuarDeathkeeper card) {
public SekKuarDeathkeeper copy() {return new SekKuarDeathkeeper(this);
class SekKuarDeathkeeperGravebornToken extends Token {
public SekKuarDeathkeeperGravebornToken() {
public class SereneMaster extends CardImpl {
public SereneMaster(UUID ownerId) {
public SereneMaster(final SereneMaster card) {
public SereneMaster copy() {return new SereneMaster(this);
class SereneMasterEffect extends OneShotEffect {
public SereneMasterEffect() {
public SereneMasterEffect(final SereneMasterEffect effect) {
public SereneMasterEffect copy() {return new SereneMasterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShattergangBrothers extends CardImpl {
public ShattergangBrothers(UUID ownerId) {
public ShattergangBrothers(final ShattergangBrothers card) {
public ShattergangBrothers copy() {return new ShattergangBrothers(this);
class ShattergangBrothersEffect extends OneShotEffect {
public ShattergangBrothersEffect(FilterControlledPermanent filter) {
public ShattergangBrothersEffect(final ShattergangBrothersEffect effect) {
public ShattergangBrothersEffect copy() {return new ShattergangBrothersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Skyscribing extends CardImpl {
public Skyscribing(UUID ownerId) {
public Skyscribing(final Skyscribing card) {
public Skyscribing copy() {return new Skyscribing(this);
public class SpawningGrounds extends CardImpl {
public SpawningGrounds(UUID ownerId) {
public SpawningGrounds(final SpawningGrounds card) {
public SpawningGrounds copy() {return new SpawningGrounds(this);
class SpawningGroundsBeastToken extends Token {
public SpawningGroundsBeastToken() {
public class SpoilsOfVictory extends CardImpl {
public SpoilsOfVictory(UUID ownerId) {
public SpoilsOfVictory(final SpoilsOfVictory card) {
public SpoilsOfVictory copy() {return new SpoilsOfVictory(this);
public class SpringjackPasture extends CardImpl {
public SpringjackPasture(UUID ownerId) {
public SpringjackPasture(final SpringjackPasture card) {
public SpringjackPasture copy() {return new SpringjackPasture(this);
class SpringjackPastureEffect extends OneShotEffect {
public SpringjackPastureEffect() {
public SpringjackPastureEffect(final SpringjackPastureEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SpringjackPastureEffect copy() {return new SpringjackPastureEffect(this);
public class StalkingVengeance extends CardImpl {
public StalkingVengeance(UUID ownerId) {
public StalkingVengeance(final StalkingVengeance card) {
public StalkingVengeance copy() {return new StalkingVengeance(this);
class StalkingVengeanceDamageEffect extends OneShotEffect {
public StalkingVengeanceDamageEffect() {
public StalkingVengeanceDamageEffect(final StalkingVengeanceDamageEffect effect) {
public StalkingVengeanceDamageEffect copy() {return new StalkingVengeanceDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Stonecloaker extends CardImpl {
public Stonecloaker(UUID ownerId) {
public Stonecloaker(final Stonecloaker card) {
public Stonecloaker copy() {return new Stonecloaker(this);
public class StormscapeBattlemage extends CardImpl {
public StormscapeBattlemage(UUID ownerId) {
public StormscapeBattlemage(final StormscapeBattlemage card) {
public StormscapeBattlemage copy() {return new StormscapeBattlemage(this);
public class StrategicPlanning extends CardImpl {
public StrategicPlanning(UUID ownerId) {
public StrategicPlanning(final StrategicPlanning card) {
public StrategicPlanning copy() {return new StrategicPlanning(this);
class StrategicPlanningEffect extends OneShotEffect {
public StrategicPlanningEffect() {
public StrategicPlanningEffect(final StrategicPlanningEffect effect) {
public StrategicPlanningEffect copy() {return new StrategicPlanningEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SuddenDemise extends CardImpl {
public SuddenDemise(UUID ownerId) {
public SuddenDemise(final SuddenDemise card) {
public SuddenDemise copy() {return new SuddenDemise(this);
class SuddenDemiseDamageEffect extends OneShotEffect {
public SuddenDemiseDamageEffect() {
public SuddenDemiseDamageEffect(final SuddenDemiseDamageEffect effect) {
public SuddenDemiseDamageEffect copy() {return new SuddenDemiseDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SunDroplet extends CardImpl {
public SunDroplet(UUID ownerId) {
public SunDroplet(final SunDroplet card) {
public SunDroplet copy() {return new SunDroplet(this);
class SunDropletTriggeredAbility extends TriggeredAbilityImpl {
public SunDropletTriggeredAbility() {
public SunDropletTriggeredAbility(final SunDropletTriggeredAbility ability) {
public SunDropletTriggeredAbility copy() {return new SunDropletTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you're dealt damage, put that many charge counters on {this}.";
class SunDropletEffect extends OneShotEffect {
public SunDropletEffect() {
public SunDropletEffect(final SunDropletEffect effect) {
public SunDropletEffect copy() {return new SunDropletEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.CHARGE.createInstance((Integer) this.getValue("damageAmount"))).apply(game, source);
public class SurveyorsScope extends CardImpl {
public SurveyorsScope(UUID ownerId) {
public SurveyorsScope(final SurveyorsScope card) {
public SurveyorsScope copy() {return new SurveyorsScope(this);
class SurveyorsScopeEffect extends OneShotEffect {
public SurveyorsScopeEffect() {
public SurveyorsScopeEffect(final SurveyorsScopeEffect effect) {
public SurveyorsScopeEffect copy() {return new SurveyorsScopeEffect(this);
public boolean apply(Game game, Ability source) {return new SearchLibraryPutInPlayEffect(new TargetCardInLibrary(0, numberOfLands, new FilterBasicLandCard())).apply(game, source);return true;return false;
public class SwordOfTheParuns extends CardImpl {
public SwordOfTheParuns(UUID ownerId) {
public SwordOfTheParuns(final SwordOfTheParuns card) {
public SwordOfTheParuns copy() {return new SwordOfTheParuns(this);
class MayTapOrUntapAttachedEffect extends OneShotEffect {
public MayTapOrUntapAttachedEffect() {
public MayTapOrUntapAttachedEffect(final MayTapOrUntapAttachedEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MayTapOrUntapAttachedEffect copy() {return new MayTapOrUntapAttachedEffect(this);
public class SydriGalvanicGenius extends CardImpl {
public SydriGalvanicGenius(UUID ownerId) {
public SydriGalvanicGenius(final SydriGalvanicGenius card) {
public SydriGalvanicGenius copy() {return new SydriGalvanicGenius(this);
class SydriGalvanicGeniusEffect extends ContinuousEffectImpl {
public SydriGalvanicGeniusEffect() {
public SydriGalvanicGeniusEffect(final SydriGalvanicGeniusEffect effect) {
public SydriGalvanicGeniusEffect copy() {return new SydriGalvanicGeniusEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return false;return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.TypeChangingEffects_4;
public class TempleOfTheFalseGod extends CardImpl {
public TempleOfTheFalseGod(UUID ownerId) {
public TempleOfTheFalseGod(final TempleOfTheFalseGod card) {
public TempleOfTheFalseGod copy() {return new TempleOfTheFalseGod(this);
public class TemptWithImmortality extends CardImpl {
public TemptWithImmortality(UUID ownerId) {
public TemptWithImmortality(final TemptWithImmortality card) {
public TemptWithImmortality copy() {return new TemptWithImmortality(this);
class TemptWithImmortalityEffect extends OneShotEffect {
public TemptWithImmortalityEffect() {this.staticText = "<i>Tempting offer</i> - Return a creature card from your graveyard to the battlefield. Each opponent may return a creature card from his or her graveyard to the battlefield. For each player who does, return a creature card from your graveyard to the battlefield";
public TemptWithImmortalityEffect(final TemptWithImmortalityEffect effect) {
public TemptWithImmortalityEffect copy() {return new TemptWithImmortalityEffect(this);
public boolean apply(Game game, Ability source) {returnCreatureFromGraveToBattlefield(controller, source, game);returnCreatureFromGraveToBattlefield(controller, source, game);return true;return false;
private boolean returnCreatureFromGraveToBattlefield(Player player, Ability source, Game game) {return card.moveToZone(Zone.BATTLEFIELD, source.getSourceId(), game, false);return false;
public class TemptWithReflections extends CardImpl {
public TemptWithReflections(UUID ownerId) {
public TemptWithReflections(final TemptWithReflections card) {
public TemptWithReflections copy() {return new TemptWithReflections(this);
class TemptWithReflectionsEffect extends OneShotEffect {
public TemptWithReflectionsEffect() {
public TemptWithReflectionsEffect(final TemptWithReflectionsEffect effect) {
public TemptWithReflectionsEffect copy() {return new TemptWithReflectionsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TemptWithVengeance extends CardImpl {
public TemptWithVengeance(UUID ownerId) {
public TemptWithVengeance(final TemptWithVengeance card) {
public TemptWithVengeance copy() {return new TemptWithVengeance(this);
class TemptWithVengeanceEffect extends OneShotEffect {
public TemptWithVengeanceEffect() {
public TemptWithVengeanceEffect(final TemptWithVengeanceEffect effect) {
public TemptWithVengeanceEffect copy() {return new TemptWithVengeanceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class TemptWithVengeanceElementalToken extends Token {
public TemptWithVengeanceElementalToken() {
public class TerraRavager extends CardImpl {
public TerraRavager(UUID ownerId) {
public TerraRavager(final TerraRavager card) {
public TerraRavager copy() {return new TerraRavager(this);
class TerraRavagerLandCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return game.getBattlefield().countAll(new FilterLandPermanent(), defenderId, game);return 0;
public DynamicValue copy() {return new TerraRavagerLandCount();
public String toString() {return "X";
public String getMessage() {return "the number of lands defending player controls";
public class ThousandYearElixir extends CardImpl {
public ThousandYearElixir(UUID ownerId) {
public ThousandYearElixir(final ThousandYearElixir card) {
public ThousandYearElixir copy() {return new ThousandYearElixir(this);
class ThousandYearElixirEffect extends AsThoughEffectImpl {
public ThousandYearElixirEffect() {
public ThousandYearElixirEffect(final ThousandYearElixirEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ThousandYearElixirEffect copy() {return new ThousandYearElixirEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return permanent != null
public class Thunderstaff extends CardImpl {
public Thunderstaff(UUID ownerId) {
public Thunderstaff(final Thunderstaff card) {
public Thunderstaff copy() {return new Thunderstaff(this);
class ThunderstaffPreventionEffect extends PreventionEffectImpl {
public ThunderstaffPreventionEffect() {
public ThunderstaffPreventionEffect(final ThunderstaffPreventionEffect effect) {
public ThunderstaffPreventionEffect copy() {return new ThunderstaffPreventionEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class TidalForce extends CardImpl {
public TidalForce(UUID ownerId) {
public TidalForce(final TidalForce card) {
public TidalForce copy() {return new TidalForce(this);
public class ToxicDeluge extends CardImpl {
public ToxicDeluge(UUID ownerId) {
public ToxicDeluge(final ToxicDeluge card) {
public ToxicDeluge copy() {return new ToxicDeluge(this);
public class TrueNameNemesis extends CardImpl {
public TrueNameNemesis(UUID ownerId) {
public TrueNameNemesis(final TrueNameNemesis card) {
public TrueNameNemesis copy() {return new TrueNameNemesis(this);
class ProtectionFromPlayerAbility extends ProtectionAbility {
public ProtectionFromPlayerAbility() {
public ProtectionFromPlayerAbility(final ProtectionFromPlayerAbility ability) {
public ProtectionFromPlayerAbility copy() {return new ProtectionFromPlayerAbility(this);
public String getRule() {return "{this} has protection from the chosen player.";
public boolean canTarget(MageObject source, Game game) {return !((Permanent) source).getControllerId().equals(playerId);return !((Spell) source).getControllerId().equals(playerId);return !((StackObject) source).getControllerId().equals(playerId);
public class UnexpectedlyAbsent extends CardImpl {
public UnexpectedlyAbsent(UUID ownerId) {
public UnexpectedlyAbsent(final UnexpectedlyAbsent card) {
public UnexpectedlyAbsent copy() {return new UnexpectedlyAbsent(this);
class UnexpectedlyAbsentEffect extends OneShotEffect {
public UnexpectedlyAbsentEffect() {
public UnexpectedlyAbsentEffect(final UnexpectedlyAbsentEffect effect) {
public UnexpectedlyAbsentEffect copy() {return new UnexpectedlyAbsentEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VisionSkeins extends CardImpl {
public VisionSkeins(UUID ownerId) {
public VisionSkeins(final VisionSkeins card) {
public VisionSkeins copy() {return new VisionSkeins(this);
public class WarCadence extends CardImpl {
public WarCadence(UUID ownerId) {
public WarCadence(final WarCadence card) {
public WarCadence copy() {return new WarCadence(this);
class WarCadenceReplacementEffect extends ReplacementEffectImpl {
WarCadenceReplacementEffect ( ) {
WarCadenceReplacementEffect ( WarCadenceReplacementEffect effect ) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DECLARE_BLOCKER;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public WarCadenceReplacementEffect copy() {return new WarCadenceReplacementEffect(this);
public class WayfarersBauble extends CardImpl {
public WayfarersBauble(UUID ownerId) {
public WayfarersBauble(final WayfarersBauble card) {
public WayfarersBauble copy() {return new WayfarersBauble(this);
public class WellOfLostDreams extends CardImpl {
public WellOfLostDreams(UUID ownerId) {
public WellOfLostDreams(final WellOfLostDreams card) {
public WellOfLostDreams copy() {return new WellOfLostDreams(this);
class WellOfLostDreamsEffect extends OneShotEffect {
public WellOfLostDreamsEffect() {
public WellOfLostDreamsEffect(final WellOfLostDreamsEffect effect) {
public WellOfLostDreamsEffect copy() {return new WellOfLostDreamsEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class WidespreadPanic extends CardImpl {
public WidespreadPanic(UUID ownerId) {
public WidespreadPanic(final WidespreadPanic card) {
public WidespreadPanic copy() {return new WidespreadPanic(this);
class WidespreadPanicTriggeredAbility extends TriggeredAbilityImpl {
public WidespreadPanicTriggeredAbility() {
public WidespreadPanicTriggeredAbility(final WidespreadPanicTriggeredAbility ability) {
public WidespreadPanicTriggeredAbility copy() {return new WidespreadPanicTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LIBRARY_SHUFFLED;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return new StringBuilder("Whenever a spell or ability causes its controller to shuffle his or her library, ").append(super.getRule()).toString();
class WidespreadPanicEffect extends OneShotEffect {
public WidespreadPanicEffect() {
public WidespreadPanicEffect(final WidespreadPanicEffect effect) {
public WidespreadPanicEffect copy() {return new WidespreadPanicEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WitchHunt extends CardImpl {
public WitchHunt(UUID ownerId) {
public WitchHunt(final WitchHunt card) {
public WitchHunt copy() {return new WitchHunt(this);
class WitchHuntEffect extends ContinuousEffectImpl {
public WitchHuntEffect() {
public WitchHuntEffect(final WitchHuntEffect effect) {
public WitchHuntEffect copy() {return new WitchHuntEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(this.getTargetPointer().getFirst(game, source), game);return false;
public class AEtherGale extends CardImpl {
public AEtherGale(UUID ownerId) {
public AEtherGale(final AEtherGale card) {
public AEtherGale copy() {return new AEtherGale(this);
public class AEtherSnap extends CardImpl {
public AEtherSnap(UUID ownerId) {
public AEtherSnap(final AEtherSnap card) {
public AEtherSnap copy() {return new AEtherSnap(this);
class AEtherSnapEffect extends OneShotEffect {
public AEtherSnapEffect() {
public AEtherSnapEffect(final AEtherSnapEffect effect) {
public AEtherSnapEffect copy() {return new AEtherSnapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ArcaneLighthouse extends CardImpl {
public ArcaneLighthouse(UUID ownerId) {
public ArcaneLighthouse(final ArcaneLighthouse card) {
public ArcaneLighthouse copy() {return new ArcaneLighthouse(this);
public class Armistice extends CardImpl {
public Armistice(UUID ownerId) {
public Armistice(final Armistice card) {
public Armistice copy() {return new Armistice(this);
public class AssaultSuit extends CardImpl {
public AssaultSuit(UUID ownerId) {
public AssaultSuit(final AssaultSuit card) {
public AssaultSuit copy() {return new AssaultSuit(this);return new AssaultSuitCantBeSacrificed(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "This creature can't be sacrificed.";
public boolean applies(GameEvent event, Ability source, Game game) {return equipment.getAttachedTo().equals(event.getTargetId());return false;
class AssaultSuitGainControlEffect extends OneShotEffect {
public AssaultSuitGainControlEffect() {
public AssaultSuitGainControlEffect(final AssaultSuitGainControlEffect effect) {
public AssaultSuitGainControlEffect copy() {return new AssaultSuitGainControlEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BenevolentOffering extends CardImpl {
public BenevolentOffering(UUID ownerId) {
public BenevolentOffering(final BenevolentOffering card) {
public BenevolentOffering copy() {return new BenevolentOffering(this);
class BenevolentOfferingEffect1 extends OneShotEffect {
BenevolentOfferingEffect1() {
BenevolentOfferingEffect1(final BenevolentOfferingEffect1 effect) {
public BenevolentOfferingEffect1 copy() {return new BenevolentOfferingEffect1(this);
public boolean apply(Game game, Ability source) {return true;return false;
class BenevolentOfferingEffect2 extends OneShotEffect {
BenevolentOfferingEffect2() {
BenevolentOfferingEffect2(final BenevolentOfferingEffect2 effect) {
public BenevolentOfferingEffect2 copy() {return new BenevolentOfferingEffect2(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BitterFeud extends CardImpl {
public BitterFeud(UUID ownerId) {
public BitterFeud(final BitterFeud card) {
public BitterFeud copy() {return new BitterFeud(this);
class BitterFeudEntersBattlefieldEffect extends OneShotEffect {
public BitterFeudEntersBattlefieldEffect() {
public BitterFeudEntersBattlefieldEffect(final BitterFeudEntersBattlefieldEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BitterFeudEntersBattlefieldEffect copy() {return new BitterFeudEntersBattlefieldEffect(this);
class BitterFeudEffect extends ReplacementEffectImpl {
public BitterFeudEffect() {
public BitterFeudEffect(final BitterFeudEffect effect) {
public BitterFeudEffect copy() {return new BitterFeudEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return false;return true;return false;
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class BreachingLeviathan extends CardImpl {
public BreachingLeviathan(UUID ownerId) {
public BreachingLeviathan(final BreachingLeviathan card) {
public BreachingLeviathan copy() {return new BreachingLeviathan(this);
class BreachingLeviathanEffect extends OneShotEffect {
public BreachingLeviathanEffect() {
public BreachingLeviathanEffect(final BreachingLeviathanEffect effect) {
public BreachingLeviathanEffect copy() {return new BreachingLeviathanEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class BrineElemental extends CardImpl {
public BrineElemental(UUID ownerId) {
public BrineElemental(final BrineElemental card) {
public BrineElemental copy() {return new BrineElemental(this);
class BrineElementalEffect extends OneShotEffect {
public BrineElementalEffect() {
public BrineElementalEffect(final BrineElementalEffect effect) {
public BrineElementalEffect copy() {return new BrineElementalEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Comeuppance extends CardImpl {
public Comeuppance(UUID ownerId) {
public Comeuppance(final Comeuppance card) {
public Comeuppance copy() {return new Comeuppance(this);
class ComeuppanceEffect extends PreventionEffectImpl {
public ComeuppanceEffect() {
public ComeuppanceEffect(final ComeuppanceEffect effect) {
public ComeuppanceEffect copy() {return new ComeuppanceEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return false;return !((StackObject) damageSource).getControllerId().equals(source.getControllerId());return !((Permanent) damageSource).getControllerId().equals(source.getControllerId());return !((Card) damageSource).getOwnerId().equals(source.getControllerId());return false;
public class CommandersSphere extends CardImpl {
public CommandersSphere(UUID ownerId) {
public CommandersSphere(final CommandersSphere card) {
public CommandersSphere copy() {return new CommandersSphere(this);
public class ContainmentPriest extends CardImpl {
public ContainmentPriest(UUID ownerId) {
public ContainmentPriest(final ContainmentPriest card) {
public ContainmentPriest copy() {return new ContainmentPriest(this);
class ContainmentPriestReplacementEffect extends ReplacementEffectImpl {
public ContainmentPriestReplacementEffect() {
public ContainmentPriestReplacementEffect(final ContainmentPriestReplacementEffect effect) {
public ContainmentPriestReplacementEffect copy() {return new ContainmentPriestReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE; 
public class CoralAtoll extends CardImpl {
public CoralAtoll(UUID ownerId) {
public CoralAtoll(final CoralAtoll card) {
public CoralAtoll copy() {return new CoralAtoll(this);
public class Creeperhulk extends CardImpl {
public Creeperhulk(UUID ownerId) {
public Creeperhulk(final Creeperhulk card) {
public Creeperhulk copy() {return new Creeperhulk(this);
public class CrownOfDoom extends CardImpl {
public CrownOfDoom(UUID ownerId) {
public CrownOfDoom(final CrownOfDoom card) {
public CrownOfDoom copy() {return new CrownOfDoom(this);
class CrownOfDoomEffect extends OneShotEffect {
public CrownOfDoomEffect() {
public CrownOfDoomEffect(final CrownOfDoomEffect effect) {
public CrownOfDoomEffect copy() {return new CrownOfDoomEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DarettiScrapSavant extends CardImpl {
public DarettiScrapSavant(UUID ownerId) {
public DarettiScrapSavant(final DarettiScrapSavant card) {
public DarettiScrapSavant copy() {return new DarettiScrapSavant(this);
class DarettiDiscardDrawEffect extends OneShotEffect {
public DarettiDiscardDrawEffect() {
public DarettiDiscardDrawEffect(final DarettiDiscardDrawEffect effect) {
public DarettiDiscardDrawEffect copy() {return new DarettiDiscardDrawEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;this.staticText = "Sacrifice an artifact. If you do, return target artifact card from your graveyard to the battlefield";return new DarettiSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(card, Zone.BATTLEFIELD, source, game);return true;return false;
class DarettiScrapSavantEmblem extends Emblem {
public DarettiScrapSavantEmblem() {
class DarettiScrapSavantTriggeredAbility extends TriggeredAbilityImpl {
DarettiScrapSavantTriggeredAbility() {
DarettiScrapSavantTriggeredAbility(final DarettiScrapSavantTriggeredAbility ability) {
public DarettiScrapSavantTriggeredAbility copy() {return new DarettiScrapSavantTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an artifact is put into your graveyard from the battlefield, " + super.getRule();
class DarettiScrapSavantEffect extends OneShotEffect {
DarettiScrapSavantEffect() {this.staticText = "return that card to the battlefield at the beginning of the next end step";
DarettiScrapSavantEffect(final DarettiScrapSavantEffect effect) {
public DarettiScrapSavantEffect copy() {return new DarettiScrapSavantEffect(this);
public boolean apply(Game game, Ability source) {effect.setText("return that card to the battlefield at the beginning of the next end step");return true;return false;
public class DemonOfWailingAgonies extends CardImpl {
public DemonOfWailingAgonies(UUID ownerId) {
public DemonOfWailingAgonies(final DemonOfWailingAgonies card) {
public DemonOfWailingAgonies copy() {return new DemonOfWailingAgonies(this);
public class DeployToTheFront extends CardImpl {
public DeployToTheFront(UUID ownerId) {
public DeployToTheFront(final DeployToTheFront card) {
public DeployToTheFront copy() {return new DeployToTheFront(this);
public class DistortingWake extends CardImpl {
public DistortingWake(UUID ownerId) {
public DistortingWake(final DistortingWake card) {
public DistortingWake copy() {return new DistortingWake(this);
public void adjustTargets(Ability ability, Game game) {
public class DomineeringWill extends CardImpl {
public DomineeringWill(UUID ownerId) {
public DomineeringWill(final DomineeringWill card) {
public DomineeringWill copy() {return new DomineeringWill(this);
class DomineeringWillEffect extends OneShotEffect {
public DomineeringWillEffect() {
public DomineeringWillEffect(final DomineeringWillEffect effect) {
public DomineeringWillEffect copy() {return new DomineeringWillEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DualcasterMage extends CardImpl {
public DualcasterMage(UUID ownerId) {
public DualcasterMage(final DualcasterMage card) {
public DualcasterMage copy() {return new DualcasterMage(this);
public class DulcetSirens extends CardImpl {
public DulcetSirens(UUID ownerId) {
public DulcetSirens(final DulcetSirens card) {
public DulcetSirens copy() {return new DulcetSirens(this);
class DulcetSirensForceAttackEffect extends RequirementEffect {
public DulcetSirensForceAttackEffect(Duration duration) {
public DulcetSirensForceAttackEffect(final DulcetSirensForceAttackEffect effect) {
public DulcetSirensForceAttackEffect copy() {return new DulcetSirensForceAttackEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public UUID mustAttackDefender(Ability source, Game game) {return target.getFirstTarget();return null;
public class Everglades extends CardImpl {
public Everglades(UUID ownerId) {
public Everglades(final Everglades card) {
public Everglades copy() {return new Everglades(this);
public class Exclude extends CardImpl {
public Exclude(UUID ownerId) {
public Exclude(final Exclude card) {
public Exclude copy() {return new Exclude(this);return new FeldonOfTheThirdPath(this);return new FeldonOfTheThirdPathEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FellTheMighty extends CardImpl {
public FellTheMighty(UUID ownerId) {
public FellTheMighty(final FellTheMighty card) {
public FellTheMighty copy() {return new FellTheMighty(this);
class FellTheMightyEffect extends OneShotEffect {
public FellTheMightyEffect() {
public FellTheMightyEffect(final FellTheMightyEffect effect) {
public FellTheMightyEffect copy() {return new FellTheMightyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FlamekinVillage extends CardImpl {
public FlamekinVillage(UUID ownerId) {
public FlamekinVillage(final FlamekinVillage card) {
public FlamekinVillage copy() {return new FlamekinVillage(this);
public class FleshCarver extends CardImpl {
public FleshCarver(UUID ownerId) {
public FleshCarver(final FleshCarver card) {
public FleshCarver copy() {return new FleshCarver(this);
class FleshCarverAbility extends DiesTriggeredAbility {
public FleshCarverAbility() {
public FleshCarverAbility(final FleshCarverAbility ability) {
public FleshCarverAbility copy() {return new FleshCarverAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When Flesh Carver dies, " + super.getRule();
class FleshCarverEffect extends OneShotEffect {
public FleshCarverEffect() {
public FleshCarverEffect(FleshCarverEffect ability) {
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new FleshCarverHorrorToken(xValue)).apply(game, source);return false;
public FleshCarverEffect copy() {return new FleshCarverEffect(this);
class FleshCarverHorrorToken extends Token {
public FleshCarverHorrorToken(int xValue) {
public class FoolsDemise extends CardImpl {
public FoolsDemise(UUID ownerId) {
public FoolsDemise(final FoolsDemise card) {
public FoolsDemise copy() {return new FoolsDemise(this);
public class FreyaliseLlanowarsFury extends CardImpl {
public FreyaliseLlanowarsFury(UUID ownerId) {
public FreyaliseLlanowarsFury(final FreyaliseLlanowarsFury card) {
public FreyaliseLlanowarsFury copy() {return new FreyaliseLlanowarsFury(this);
class FreyaliseLlanowarsFuryToken extends Token {
FreyaliseLlanowarsFuryToken() {
public class GhoulcallerGisa extends CardImpl {
public GhoulcallerGisa(UUID ownerId) {
public GhoulcallerGisa(final GhoulcallerGisa card) {
public GhoulcallerGisa copy() {return new GhoulcallerGisa(this);return new GiftOfEstates(this);return new GraveSifter(this);this.staticText = "each player chooses a creature type and returns any number of cards of that type from his or her graveyard to his or her hand";return new GraveSifterEffect(this);
public boolean apply(Game game, Ability source) {typeChoice.setMessage("Choose creature type to return cards from your graveyard");return true;return false;
public class HallowedSpiritkeeper extends CardImpl {
public HallowedSpiritkeeper(UUID ownerId) {
public HallowedSpiritkeeper(final HallowedSpiritkeeper card) {
public HallowedSpiritkeeper copy() {return new HallowedSpiritkeeper(this);
public class ImpactResonance extends CardImpl {
public ImpactResonance(UUID ownerId) {
public ImpactResonance(final ImpactResonance card) {
public ImpactResonance copy() {return new ImpactResonance(this);
class GreatestAmountOfDamageDealtValue implements DynamicValue, MageSingleton {
private Object readResolve() throws ObjectStreamException {return fINSTANCE;return fINSTANCE;
public int calculate(Game game, Ability sourceAbility, Effect effect) {return this.calculate(game, sourceAbility.getControllerId());
public int calculate(Game game, UUID controllerId) {return watcher.getGreatestAmountOfDamage();return 0;
public DynamicValue copy() {return new GreatestAmountOfDamageDealtValue();
public String toString() {return "X";
public String getMessage() {return "the greatest amount of damage dealt by a source to a permanent or player this turn";
class GreatestAmountOfDamageWatcher extends Watcher {
public GreatestAmountOfDamageWatcher() {
public GreatestAmountOfDamageWatcher(final GreatestAmountOfDamageWatcher watcher) {
public GreatestAmountOfDamageWatcher copy() {return new GreatestAmountOfDamageWatcher(this);
public void watch(GameEvent event, Game game) {* return Returns the greatest amount of damage dealt to a player or permanent during the current turn.
public int getGreatestAmountOfDamage() {return damageAmount;
public void reset() {
public class InciteRebellion extends CardImpl {
public InciteRebellion(UUID ownerId) {
public InciteRebellion(final InciteRebellion card) {
public InciteRebellion copy() {return new InciteRebellion(this);
class InciteRebellionEffect extends OneShotEffect {
public InciteRebellionEffect() {
public InciteRebellionEffect(final InciteRebellionEffect effect) {
public InciteRebellionEffect copy() {return new InciteRebellionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class InfernalOffering extends CardImpl {
public InfernalOffering(UUID ownerId) {
public InfernalOffering(final InfernalOffering card) {
public InfernalOffering copy() {return new InfernalOffering(this);return new InfernalOfferingSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class InfernalOfferingReturnEffect extends OneShotEffect {
InfernalOfferingReturnEffect() {this.staticText = "Choose an opponent. Return a creature card from your graveyard to the battlefield, then that player returns a creature card from his or her graveyard to the battlefield";
InfernalOfferingReturnEffect(final InfernalOfferingReturnEffect effect) {
public InfernalOfferingReturnEffect copy() {return new InfernalOfferingReturnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class IntellectualOffering extends CardImpl {
public IntellectualOffering(UUID ownerId) {
public IntellectualOffering(final IntellectualOffering card) {
public IntellectualOffering copy() {return new IntellectualOffering(this);
class IntellectualOfferingDrawEffect extends OneShotEffect {
IntellectualOfferingDrawEffect() {
IntellectualOfferingDrawEffect(final IntellectualOfferingDrawEffect effect) {
public IntellectualOfferingDrawEffect copy() {return new IntellectualOfferingDrawEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class IntellectualOfferingUntapEffect extends OneShotEffect {
IntellectualOfferingUntapEffect() {
IntellectualOfferingUntapEffect(final IntellectualOfferingUntapEffect effect) {
public IntellectualOfferingUntapEffect copy() {return new IntellectualOfferingUntapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JungleBasin extends CardImpl {
public JungleBasin(UUID ownerId) {
public JungleBasin(final JungleBasin card) {
public JungleBasin copy() {return new JungleBasin(this);
public class JunkDiver extends CardImpl {
public JunkDiver(UUID ownerId) {effect.setText("return another target artifact card from your graveyard to your hand");
public JunkDiver(final JunkDiver card) {
public JunkDiver copy() {return new JunkDiver(this);
public class Karoo extends CardImpl {
public Karoo(UUID ownerId) {
public Karoo(final Karoo card) {
public Karoo copy() {return new Karoo(this);return new LifebloodHydra(this);return new LifebloodHydraEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LoreseekersStone extends CardImpl {
public LoreseekersStone(UUID ownerId) {
public LoreseekersStone(final LoreseekersStone card) {
public LoreseekersStone copy() {return new LoreseekersStone(this);
LoreseekersStoneCostIncreasingEffect (UUID originalId ) {
LoreseekersStoneCostIncreasingEffect(final LoreseekersStoneCostIncreasingEffect effect) {return true;return abilityToModify.getOriginalId().equals(originalId);
public LoreseekersStoneCostIncreasingEffect copy() {return new LoreseekersStoneCostIncreasingEffect(this);
public class MagusOfTheCoffers extends CardImpl {
public MagusOfTheCoffers(UUID ownerId) {
public MagusOfTheCoffers(final MagusOfTheCoffers card) {
public MagusOfTheCoffers copy() {return new MagusOfTheCoffers(this);
public class MaliciousAffliction extends CardImpl {
public MaliciousAffliction(UUID ownerId) {
public MaliciousAffliction(final MaliciousAffliction card) {
public MaliciousAffliction copy() {return new MaliciousAffliction(this);
class CopySourceSpellEffect extends OneShotEffect {
public CopySourceSpellEffect() {
public CopySourceSpellEffect(final CopySourceSpellEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CopySourceSpellEffect copy() {return new CopySourceSpellEffect(this);
public class MasterworkOfIngenuity extends CardImpl {
public MasterworkOfIngenuity(UUID ownerId) {
public MasterworkOfIngenuity(final MasterworkOfIngenuity card) {
public MasterworkOfIngenuity copy() {return new MasterworkOfIngenuity(this);
public class MyriadLandscape extends CardImpl {
public MyriadLandscape(UUID ownerId) {
public MyriadLandscape(final MyriadLandscape card) {
public MyriadLandscape copy() {return new MyriadLandscape(this);
class TargetCardInLibrarySharingLandType extends TargetCardInLibrary {
public TargetCardInLibrarySharingLandType(int minNumTargets, int maxNumTargets, FilterCard filter) {
public TargetCardInLibrarySharingLandType(final TargetCardInLibrarySharingLandType target) {
public boolean canTarget(UUID id, Cards cards, Game game) {return true;return true;return false;
public TargetCardInLibrarySharingLandType copy() {return new TargetCardInLibrarySharingLandType(this);
public class NahiriTheLithomancer extends CardImpl {
public NahiriTheLithomancer(UUID ownerId) {
public NahiriTheLithomancer(final NahiriTheLithomancer card) {
public NahiriTheLithomancer copy() {return new NahiriTheLithomancer(this);
class NahiriTheLithomancerFirstAbilityEffect extends OneShotEffect {
NahiriTheLithomancerFirstAbilityEffect() {
NahiriTheLithomancerFirstAbilityEffect(final NahiriTheLithomancerFirstAbilityEffect effect) {
public NahiriTheLithomancerFirstAbilityEffect copy() {return new NahiriTheLithomancerFirstAbilityEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class NahiriTheLithomancerSecondAbilityEffect extends OneShotEffect {
NahiriTheLithomancerSecondAbilityEffect() {
NahiriTheLithomancerSecondAbilityEffect(final NahiriTheLithomancerSecondAbilityEffect effect) {
public NahiriTheLithomancerSecondAbilityEffect copy() {return new NahiriTheLithomancerSecondAbilityEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class NahiriTheLithomancerEquipmentToken extends Token {
NahiriTheLithomancerEquipmentToken() {
public class NecromanticSelection extends CardImpl {
public NecromanticSelection(UUID ownerId) {
public NecromanticSelection(final NecromanticSelection card) {
public NecromanticSelection copy() {return new NecromanticSelection(this);
class NecromanticSelectionEffect extends OneShotEffect {
public NecromanticSelectionEffect() {this.staticText = "Destroy all creatures, then return a creature card put into a graveyard this way to the battlefield under your control. It's a black Zombie in addition to its other colors and types";
public NecromanticSelectionEffect(final NecromanticSelectionEffect effect) {
public NecromanticSelectionEffect copy() {return new NecromanticSelectionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class NecromanticSelectionContinuousEffect extends ContinuousEffectImpl {
public NecromanticSelectionContinuousEffect() {
public NecromanticSelectionContinuousEffect(final NecromanticSelectionContinuousEffect effect) {
public NecromanticSelectionContinuousEffect copy() {return new NecromanticSelectionContinuousEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.ColorChangingEffects_5 || layer == Layer.TypeChangingEffects_4;
public class ObNixilisOfTheBlackOath extends CardImpl {
public ObNixilisOfTheBlackOath(UUID ownerId) {
public ObNixilisOfTheBlackOath(final ObNixilisOfTheBlackOath card) {
public ObNixilisOfTheBlackOath copy() {return new ObNixilisOfTheBlackOath(this);
class ObNixilisOfTheBlackOathEffect1 extends OneShotEffect {
public ObNixilisOfTheBlackOathEffect1() {
public ObNixilisOfTheBlackOathEffect1(final ObNixilisOfTheBlackOathEffect1 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ObNixilisOfTheBlackOathEffect1 copy() {return new ObNixilisOfTheBlackOathEffect1(this);
class ObNixilisOfTheBlackOathEmblem extends Emblem {
public ObNixilisOfTheBlackOathEmblem() {
public class OverseerOfTheDamned extends CardImpl {
public OverseerOfTheDamned(UUID ownerId) {
public OverseerOfTheDamned(final OverseerOfTheDamned card) {
public OverseerOfTheDamned copy() {return new OverseerOfTheDamned(this);
public class PredatorFlagship extends CardImpl {
public PredatorFlagship(UUID ownerId) {
public PredatorFlagship(final PredatorFlagship card) {
public PredatorFlagship copy() {return new PredatorFlagship(this);
public class ProfaneCommand extends CardImpl {
public ProfaneCommand(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public ProfaneCommand(final ProfaneCommand card) {
public ProfaneCommand copy() {return new ProfaneCommand(this);
public class PromiseOfPower extends CardImpl {
public PromiseOfPower(UUID ownerId) {
public PromiseOfPower(final PromiseOfPower card) {
public PromiseOfPower copy() {return new PromiseOfPower(this);
class PromiseOfPowerEffect extends OneShotEffect {
public PromiseOfPowerEffect() {
public PromiseOfPowerEffect(PromiseOfPowerEffect ability) {
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new PromiseOfPowerDemonToken(controller.getHand().size())).apply(game, source);return false;
public PromiseOfPowerEffect copy() {return new PromiseOfPowerEffect(this);
class PromiseOfPowerDemonToken extends Token {
public PromiseOfPowerDemonToken(int xValue) {
public class RavingDead extends CardImpl {
public RavingDead(UUID ownerId) {
public RavingDead(final RavingDead card) {
public RavingDead copy() {return new RavingDead(this);
class RavingDeadEffect extends OneShotEffect {
public RavingDeadEffect() {
public RavingDeadEffect(final RavingDeadEffect effect) {
public RavingDeadEffect copy() {return new RavingDeadEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class RavingDeadDamageEffect extends OneShotEffect {
public RavingDeadDamageEffect() {
public RavingDeadDamageEffect(final RavingDeadDamageEffect effect) {
public RavingDeadDamageEffect copy() {return new RavingDeadDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AttacksIfAbleTargetPlayerSourceEffect extends RequirementEffect {
public AttacksIfAbleTargetPlayerSourceEffect() {
public AttacksIfAbleTargetPlayerSourceEffect(final AttacksIfAbleTargetPlayerSourceEffect effect) {
public AttacksIfAbleTargetPlayerSourceEffect copy() {return new AttacksIfAbleTargetPlayerSourceEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public UUID mustAttackDefender(Ability source, Game game) {return getTargetPointer().getFirst(game, source);
public class ReefWorm extends CardImpl {
public ReefWorm(UUID ownerId) {
public ReefWorm(final ReefWorm card) {
public ReefWorm copy() {return new ReefWorm(this);
class ReefWormFishToken extends Token {
ReefWormFishToken() {
class ReefWormWhaleToken extends Token {
ReefWormWhaleToken() {
class ReefWormKrakenToken extends Token {
ReefWormKrakenToken() {
public class ScrapMastery extends CardImpl {
public ScrapMastery(UUID ownerId) {
public ScrapMastery(final ScrapMastery card) {
public ScrapMastery copy() {return new ScrapMastery(this);
class ScrapMasteryEffect extends OneShotEffect {
public ScrapMasteryEffect() {
public ScrapMasteryEffect(final ScrapMasteryEffect effect) {
public ScrapMasteryEffect copy() {return new ScrapMasteryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShaperParasite extends CardImpl {
public ShaperParasite(UUID ownerId) {
public ShaperParasite(final ShaperParasite card) {
public ShaperParasite copy() {return new ShaperParasite(this);
class ShaperParasiteEffect extends ContinuousEffectImpl {
public ShaperParasiteEffect() {
public ShaperParasiteEffect(final ShaperParasiteEffect effect) {
public ShaperParasiteEffect copy() {return new ShaperParasiteEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;return false;
public class SiegeBehemoth extends CardImpl {
public SiegeBehemoth(UUID ownerId) {
public SiegeBehemoth(final SiegeBehemoth card) {
public SiegeBehemoth copy() {return new SiegeBehemoth(this);
public class SongOfTheDryads extends CardImpl {
public SongOfTheDryads(UUID ownerId) {
public SongOfTheDryads(final SongOfTheDryads card) {
public SongOfTheDryads copy() {return new SongOfTheDryads(this);
class BecomesColorlessForestLandEffect extends ContinuousEffectImpl {
public BecomesColorlessForestLandEffect() {
public BecomesColorlessForestLandEffect(final BecomesColorlessForestLandEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public BecomesColorlessForestLandEffect copy() {return new BecomesColorlessForestLandEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.ColorChangingEffects_5 || layer == Layer.TypeChangingEffects_4;
public class SpoilsOfBlood extends CardImpl {
public SpoilsOfBlood(UUID ownerId) {
public SpoilsOfBlood(final SpoilsOfBlood card) {
public SpoilsOfBlood copy() {return new SpoilsOfBlood(this);
class SpoilsOfBloodEffect extends OneShotEffect {
public SpoilsOfBloodEffect() {
public SpoilsOfBloodEffect(SpoilsOfBloodEffect ability) {
public boolean apply(Game game, Ability source) {return true;return false;
public SpoilsOfBloodEffect copy() {return new SpoilsOfBloodEffect(this);
class CreaturesDiedThisTurnWatcher extends Watcher {
public CreaturesDiedThisTurnWatcher() {
public CreaturesDiedThisTurnWatcher(final CreaturesDiedThisTurnWatcher watcher) {
public CreaturesDiedThisTurnWatcher copy() {return new CreaturesDiedThisTurnWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
class SpoilsOfBloodHorrorToken extends Token {
public SpoilsOfBloodHorrorToken(int xValue) {
public class StitcherGeralf extends CardImpl {
public StitcherGeralf(UUID ownerId) {
public StitcherGeralf(final StitcherGeralf card) {
public StitcherGeralf copy() {return new StitcherGeralf(this);
class StitcherGeralfEffect extends OneShotEffect {
public StitcherGeralfEffect() {
public StitcherGeralfEffect(final StitcherGeralfEffect effect) {
public StitcherGeralfEffect copy() {return new StitcherGeralfEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new StitcherGeralfZombieToken(power)).apply(game, source);return false;
class StitcherGeralfZombieToken extends Token {
StitcherGeralfZombieToken(int xValue) {
public class StormsurgeKraken extends CardImpl {
public StormsurgeKraken(UUID ownerId) {
public StormsurgeKraken(final StormsurgeKraken card) {
public StormsurgeKraken copy() {return new StormsurgeKraken(this);
public class SylvanOffering extends CardImpl {
public SylvanOffering(UUID ownerId) {
public SylvanOffering(final SylvanOffering card) {
public SylvanOffering copy() {return new SylvanOffering(this);
class SylvanOfferingEffect1 extends OneShotEffect {
SylvanOfferingEffect1() {
SylvanOfferingEffect1(final SylvanOfferingEffect1 effect) {
public SylvanOfferingEffect1 copy() {return new SylvanOfferingEffect1(this);
public boolean apply(Game game, Ability source) {return true;return false;
class SylvanOfferingTreefolkToken extends Token {
public SylvanOfferingTreefolkToken(int xValue) {
class SylvanOfferingEffect2 extends OneShotEffect {
SylvanOfferingEffect2() {
SylvanOfferingEffect2(final SylvanOfferingEffect2 effect) {
public SylvanOfferingEffect2 copy() {return new SylvanOfferingEffect2(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TeferiTemporalArchmage extends CardImpl {
public TeferiTemporalArchmage(UUID ownerId) {
public TeferiTemporalArchmage(final TeferiTemporalArchmage card) {
public TeferiTemporalArchmage copy() {return new TeferiTemporalArchmage(this);
class TeferiTemporalArchmageEmblem extends Emblem {
public TeferiTemporalArchmageEmblem() {
class TeferiTemporalArchmageAsThoughEffect extends AsThoughEffectImpl {
public TeferiTemporalArchmageAsThoughEffect() {
public TeferiTemporalArchmageAsThoughEffect(final TeferiTemporalArchmageAsThoughEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TeferiTemporalArchmageAsThoughEffect copy() {return new TeferiTemporalArchmageAsThoughEffect(this);
public boolean applies(UUID objectId, Ability affectedAbility, Ability source, Game game) {return true;return false;
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return false; 
public class ThunderfootBaloth extends CardImpl {
public ThunderfootBaloth(UUID ownerId) {
public ThunderfootBaloth(final ThunderfootBaloth card) {
public ThunderfootBaloth copy() {return new ThunderfootBaloth(this);
public class TitaniaProtectorOfArgoth extends CardImpl {
public TitaniaProtectorOfArgoth(UUID ownerId) {
public TitaniaProtectorOfArgoth(final TitaniaProtectorOfArgoth card) {
public TitaniaProtectorOfArgoth copy() {return new TitaniaProtectorOfArgoth(this);
class TitaniaProtectorOfArgothElementalToken extends Token {
TitaniaProtectorOfArgothElementalToken() {
public class TyrantsFamiliar extends CardImpl {
public TyrantsFamiliar(UUID ownerId) {
public TyrantsFamiliar(final TyrantsFamiliar card) {
public TyrantsFamiliar copy() {return new TyrantsFamiliar(this);
public void adjustTargets(Ability ability, Game game) {
public class UnstableObelisk extends CardImpl {
public UnstableObelisk(UUID ownerId) {
public UnstableObelisk(final UnstableObelisk card) {
public UnstableObelisk copy() {return new UnstableObelisk(this);
public class VolcanicOffering extends CardImpl {
public VolcanicOffering(UUID ownerId) {
public VolcanicOffering(final VolcanicOffering card) {
public void adjustTargets(Ability ability, Game game) {
public VolcanicOffering copy() {return new VolcanicOffering(this);
class VolcanicOfferingEffect extends OneShotEffect {
public VolcanicOfferingEffect() {
public VolcanicOfferingEffect(final VolcanicOfferingEffect effect) {
public VolcanicOfferingEffect copy() {return new VolcanicOfferingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WakeTheDead extends CardImpl {
public WakeTheDead(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public WakeTheDead(final WakeTheDead card) {
public WakeTheDead copy() {return new WakeTheDead(this);
class WakeTheDeadReturnFromGraveyardToBattlefieldTargetEffect extends OneShotEffect {
public WakeTheDeadReturnFromGraveyardToBattlefieldTargetEffect() {
public WakeTheDeadReturnFromGraveyardToBattlefieldTargetEffect(final WakeTheDeadReturnFromGraveyardToBattlefieldTargetEffect effect) {
public WakeTheDeadReturnFromGraveyardToBattlefieldTargetEffect copy() {return new WakeTheDeadReturnFromGraveyardToBattlefieldTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WarmongerHellkite extends CardImpl {
public WarmongerHellkite(UUID ownerId) {
public WarmongerHellkite(final WarmongerHellkite card) {
public WarmongerHellkite copy() {return new WarmongerHellkite(this);
public class WaveOfVitriol extends CardImpl {
public WaveOfVitriol(UUID ownerId) {
public WaveOfVitriol(final WaveOfVitriol card) {
public WaveOfVitriol copy() {return new WaveOfVitriol(this);
class WaveOfVitriolEffect extends OneShotEffect {
public WaveOfVitriolEffect() {
public WaveOfVitriolEffect(final WaveOfVitriolEffect effect) {
public WaveOfVitriolEffect copy() {return new WaveOfVitriolEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WellOfIdeas extends CardImpl {
public WellOfIdeas(UUID ownerId) {
public WellOfIdeas(final WellOfIdeas card) {
public WellOfIdeas copy() {return new WellOfIdeas(this);
public class Willbender extends CardImpl {
public Willbender(UUID ownerId) {
public Willbender(final Willbender card) {
public Willbender copy() {return new Willbender(this);
public class WolfcallersHowl extends CardImpl {
public WolfcallersHowl(UUID ownerId) {
public WolfcallersHowl(final WolfcallersHowl card) {
public WolfcallersHowl copy() {return new WolfcallersHowl(this);
class WolfcallersHowlEffect extends OneShotEffect {
public WolfcallersHowlEffect() {
public WolfcallersHowlEffect(final WolfcallersHowlEffect effect) {
public WolfcallersHowlEffect copy() {return new WolfcallersHowlEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new WolfToken("C14"), count).apply(game, source);return true;return false;
public class WordOfSeizing extends CardImpl {
public WordOfSeizing(UUID ownerId) {
public WordOfSeizing(final WordOfSeizing card) {
public WordOfSeizing copy() {return new WordOfSeizing(this);
public class ZoeticCavern extends CardImpl {
public ZoeticCavern(UUID ownerId) {
public ZoeticCavern(final ZoeticCavern card) {
public ZoeticCavern copy() {return new ZoeticCavern(this);
public class AEthersnatch extends CardImpl {
public AEthersnatch(UUID ownerId) {
public AEthersnatch(final AEthersnatch card) {
public AEthersnatch copy() {return new AEthersnatch(this);
class AEthersnatchEffect extends OneShotEffect {
AEthersnatchEffect() {
AEthersnatchEffect(final AEthersnatchEffect effect) {
public AEthersnatchEffect copy() {return new AEthersnatchEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AnyaMercilessAngel extends CardImpl {
public AnyaMercilessAngel(UUID ownerId) {
public AnyaMercilessAngel(final AnyaMercilessAngel card) {
public AnyaMercilessAngel copy() {return new AnyaMercilessAngel(this);
class AnyaMercilessAngelDynamicValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return opponentCount;
public AnyaMercilessAngelDynamicValue copy() {return new AnyaMercilessAngelDynamicValue();
public String getMessage() {return "number of opponents whose life total is less than half his or her starting life total";
public String toString() {return "X";
class AnyaMercilessAngelCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return new AnyaMercilessAngelDynamicValue().calculate(game, source, null) > 0;
public String toString() {return "an opponent's life total is less than half his or her starting life total";
public class Arachnogenesis extends CardImpl {
public Arachnogenesis(UUID ownerId) {
public Arachnogenesis(final Arachnogenesis card) {
public Arachnogenesis copy() {return new Arachnogenesis(this);
class ArachnogenesisCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count;
public DynamicValue copy() {return this;
public String getMessage() {return "creatures attacking you";return new ArjunTheShiftingFlame(this);
public boolean apply(Game game, Ability source) {return true;return new ArjunTheShiftingFlameEffect(this);
public class AwakenTheSkyTyrant extends CardImpl {
public AwakenTheSkyTyrant(UUID ownerId) {
public AwakenTheSkyTyrant(final AwakenTheSkyTyrant card) {
public AwakenTheSkyTyrant copy() {return new AwakenTheSkyTyrant(this);
class AwakenTheSkyTyrantTriggeredAbility extends TriggeredAbilityImpl {
public AwakenTheSkyTyrantTriggeredAbility() {
public AwakenTheSkyTyrantTriggeredAbility(final AwakenTheSkyTyrantTriggeredAbility ability) {
public AwakenTheSkyTyrantTriggeredAbility copy() {return new AwakenTheSkyTyrantTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGED_PLAYER);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When a source an opponent controls deals damage to you, " + super.getRule();
public class BansheeOfTheDreadChoir extends CardImpl {
public BansheeOfTheDreadChoir(UUID ownerId) {
public BansheeOfTheDreadChoir(final BansheeOfTheDreadChoir card) {
public BansheeOfTheDreadChoir copy() {return new BansheeOfTheDreadChoir(this);
public class BastionProtector extends CardImpl {
public BastionProtector(UUID ownerId) {
public BastionProtector(final BastionProtector card) {
public BastionProtector copy() {return new BastionProtector(this);
public class BladeOfSelves extends CardImpl {
public BladeOfSelves(UUID ownerId) {
public BladeOfSelves(final BladeOfSelves card) {
public BladeOfSelves copy() {return new BladeOfSelves(this);
public class BloodsporeThrinax extends CardImpl {
public BloodsporeThrinax(UUID ownerId) {
public BloodsporeThrinax(final BloodsporeThrinax card) {
public BloodsporeThrinax copy() {return new BloodsporeThrinax(this);
class BloodsporeThrinaxEntersBattlefieldEffect extends ReplacementEffectImpl {
public BloodsporeThrinaxEntersBattlefieldEffect() {
public BloodsporeThrinaxEntersBattlefieldEffect(BloodsporeThrinaxEntersBattlefieldEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return creature != null && creature.getControllerId().equals(source.getControllerId())
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public BloodsporeThrinaxEntersBattlefieldEffect copy() {return new BloodsporeThrinaxEntersBattlefieldEffect(this);
public class BorderlandBehemoth extends CardImpl {
public BorderlandBehemoth(UUID ownerId) {
public BorderlandBehemoth(final BorderlandBehemoth card) {
public BorderlandBehemoth copy() {return new BorderlandBehemoth(this);
public class BroodbirthViper extends CardImpl {
public BroodbirthViper(UUID ownerId) {
public BroodbirthViper(final BroodbirthViper card) {
public BroodbirthViper copy() {return new BroodbirthViper(this);
public class CallerOfThePack extends CardImpl {
public CallerOfThePack(UUID ownerId) {
public CallerOfThePack(final CallerOfThePack card) {
public CallerOfThePack copy() {return new CallerOfThePack(this);
public class CentaurVinecrasher extends CardImpl {
public CentaurVinecrasher(UUID ownerId) {
public CentaurVinecrasher(final CentaurVinecrasher card) {
public CentaurVinecrasher copy() {return new CentaurVinecrasher(this);
public class CommandBeacon extends CardImpl {
public CommandBeacon(UUID ownerId) {
public CommandBeacon(final CommandBeacon card) {
public CommandBeacon copy() {return new CommandBeacon(this);
class CommandBeaconEffect extends OneShotEffect {
CommandBeaconEffect() {
CommandBeaconEffect(final CommandBeaconEffect effect) {
public CommandBeaconEffect copy() {return new CommandBeaconEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DawnbreakReclaimer extends CardImpl {
public DawnbreakReclaimer(UUID ownerId) {
public DawnbreakReclaimer(final DawnbreakReclaimer card) {
public DawnbreakReclaimer copy() {return new DawnbreakReclaimer(this);
class DawnbreakReclaimerEffect extends OneShotEffect {
public DawnbreakReclaimerEffect() {this.staticText = "choose a creature card in an opponent's graveyard, then that player chooses a creature card in your graveyard. You may return those cards to the battlefield under their owners' control";
public DawnbreakReclaimerEffect(final DawnbreakReclaimerEffect effect) {
public DawnbreakReclaimerEffect copy() {return new DawnbreakReclaimerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DaxossTorment extends CardImpl {
public DaxossTorment(UUID ownerId) {
public DaxossTorment(final DaxossTorment card) {
public DaxossTorment copy() {return new DaxossTorment(this);
class DaxossTormentToken extends Token {
public DaxossTormentToken() {
public class DaxosTheReturned extends CardImpl {
public DaxosTheReturned(UUID ownerId) {
public DaxosTheReturned(final DaxosTheReturned card) {
public DaxosTheReturned copy() {return new DaxosTheReturned(this);
class DaxosSpiritToken extends Token {
DaxosSpiritToken() {
class DaxosSpiritSetPTEffect extends ContinuousEffectImpl {
public DaxosSpiritSetPTEffect() {
public DaxosSpiritSetPTEffect(final DaxosSpiritSetPTEffect effect) {
public DaxosSpiritSetPTEffect copy() {return new DaxosSpiritSetPTEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DeadlyTempest extends CardImpl {
public DeadlyTempest(UUID ownerId) {
public DeadlyTempest(final DeadlyTempest card) {
public DeadlyTempest copy() {return new DeadlyTempest(this);
class DeadlyTempestEffect extends OneShotEffect {
public DeadlyTempestEffect() {
public DeadlyTempestEffect(final DeadlyTempestEffect effect) {
public DeadlyTempestEffect copy() {return new DeadlyTempestEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DreadSummons extends CardImpl {
public DreadSummons(UUID ownerId) {
public DreadSummons(final DreadSummons card) {
public DreadSummons copy() {return new DreadSummons(this);
class DreadSummonsEffect extends OneShotEffect {
public DreadSummonsEffect() {
public DreadSummonsEffect(final DreadSummonsEffect effect) {
public DreadSummonsEffect copy() {return new DreadSummonsEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new ZombieToken(), numberOfCreatureCards, true, false).apply(game, source);return true;return false;
public class DreamPillager extends CardImpl {
public DreamPillager(UUID ownerId) {
public DreamPillager(final DreamPillager card) {
public DreamPillager copy() {return new DreamPillager(this);
class DreamPillagerTriggeredAbility extends TriggeredAbilityImpl {
public DreamPillagerTriggeredAbility() {
public DreamPillagerTriggeredAbility(final DreamPillagerTriggeredAbility ability) {
public DreamPillagerTriggeredAbility copy() {return new DreamPillagerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, exile that many cards from the top of your library. Until end of turn, you may cast nonland cards exiled this way.";
class DreamPillagerEffect extends OneShotEffect {
public DreamPillagerEffect() {
public DreamPillagerEffect(final DreamPillagerEffect effect) {
public DreamPillagerEffect copy() {return new DreamPillagerEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
class DreamPillagerCastFromExileEffect extends AsThoughEffectImpl {
public DreamPillagerCastFromExileEffect() {
public DreamPillagerCastFromExileEffect(final DreamPillagerCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public DreamPillagerCastFromExileEffect copy() {return new DreamPillagerCastFromExileEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return source.getControllerId().equals(affectedControllerId)
public class EzuriClawOfProgress extends CardImpl {
public EzuriClawOfProgress(UUID ownerId) {
public EzuriClawOfProgress(final EzuriClawOfProgress card) {
public EzuriClawOfProgress copy() {return new EzuriClawOfProgress(this);
class EzuriClawOfProgressEffect extends OneShotEffect {
public EzuriClawOfProgressEffect() {
public EzuriClawOfProgressEffect(final EzuriClawOfProgressEffect effect) {
public EzuriClawOfProgressEffect copy() {return new EzuriClawOfProgressEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;
public class EzurisPredation extends CardImpl {
public EzurisPredation(UUID ownerId) {
public EzurisPredation(final EzurisPredation card) {
public EzurisPredation copy() {return new EzurisPredation(this);
class EzurisPredationEffect extends OneShotEffect {
public EzurisPredationEffect() {
public EzurisPredationEffect(final EzurisPredationEffect effect) {
public EzurisPredationEffect copy() {return new EzurisPredationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FieryConfluence extends CardImpl {
public FieryConfluence(UUID ownerId) {
public FieryConfluence(final FieryConfluence card) {
public FieryConfluence copy() {return new FieryConfluence(this);
public class Gigantoplasm extends CardImpl {
public Gigantoplasm(UUID ownerId) {
public Gigantoplasm(final Gigantoplasm card) {
public Gigantoplasm copy() {return new Gigantoplasm(this);
class GigantoplasmApplyToPermanent extends ApplyToPermanent {
public Boolean apply(Game game, Permanent permanent) {return true;
public Boolean apply(Game game, MageObject mageObject) {return true;
public class GraspOfFate extends CardImpl {
public GraspOfFate(UUID ownerId) {
public GraspOfFate(final GraspOfFate card) {
public void adjustTargets(Ability ability, Game game) {
public GraspOfFate copy() {return new GraspOfFate(this);
class GraspOfFateExileEffect extends OneShotEffect {
public GraspOfFateExileEffect() {
public GraspOfFateExileEffect(final GraspOfFateExileEffect effect) {
public GraspOfFateExileEffect copy() {return new GraspOfFateExileEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), permanent.getIdName(), Zone.BATTLEFIELD, true).apply(game, source);return false;
public class GreatOakGuardian extends CardImpl {
public GreatOakGuardian(UUID ownerId) {
public GreatOakGuardian(final GreatOakGuardian card) {
public GreatOakGuardian copy() {return new GreatOakGuardian(this);
class GreatOakGuardianEffect extends ContinuousEffectImpl {
public GreatOakGuardianEffect() {
public GreatOakGuardianEffect(final GreatOakGuardianEffect effect) {
public GreatOakGuardianEffect copy() {return new GreatOakGuardianEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
class GreatOakGuardianUntapEffect extends OneShotEffect {
public GreatOakGuardianUntapEffect() {
public GreatOakGuardianUntapEffect(final GreatOakGuardianUntapEffect effect) {
public GreatOakGuardianUntapEffect copy() {return new GreatOakGuardianUntapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HeraldOfTheHost extends CardImpl {
public HeraldOfTheHost(UUID ownerId) {
public HeraldOfTheHost(final HeraldOfTheHost card) {
public HeraldOfTheHost copy() {return new HeraldOfTheHost(this);
public class IllusoryAmbusher extends CardImpl {
public IllusoryAmbusher(UUID ownerId) {
public IllusoryAmbusher(final IllusoryAmbusher card) {
public IllusoryAmbusher copy() {return new IllusoryAmbusher(this);
class IllusoryAmbusherDealtDamageEffect extends OneShotEffect {
public IllusoryAmbusherDealtDamageEffect() {
public IllusoryAmbusherDealtDamageEffect(final IllusoryAmbusherDealtDamageEffect effect) {
public IllusoryAmbusherDealtDamageEffect copy() {return new IllusoryAmbusherDealtDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class KalemneDiscipleOfIroas extends CardImpl {
public KalemneDiscipleOfIroas(UUID ownerId) {
public KalemneDiscipleOfIroas(final KalemneDiscipleOfIroas card) {
public KalemneDiscipleOfIroas copy() {return new KalemneDiscipleOfIroas(this);
class SourceControllerExperienceCountersCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amount;
public SourceControllerExperienceCountersCount copy() {return new SourceControllerExperienceCountersCount();
public String toString() {return "1";
public String getMessage() {return "experience counter you have";
public class KalemnesCaptain extends CardImpl {
public KalemnesCaptain(UUID ownerId) {
public KalemnesCaptain(final KalemnesCaptain card) {
public KalemnesCaptain copy() {return new KalemnesCaptain(this);
public class KarlovOfTheGhostCouncil extends CardImpl {
public KarlovOfTheGhostCouncil(UUID ownerId) {
public KarlovOfTheGhostCouncil(final KarlovOfTheGhostCouncil card) {
public KarlovOfTheGhostCouncil copy() {return new KarlovOfTheGhostCouncil(this);
public class KasetoOrochiArchmage extends CardImpl {
public KasetoOrochiArchmage(UUID ownerId) {
public KasetoOrochiArchmage(final KasetoOrochiArchmage card) {
public KasetoOrochiArchmage copy() {return new KasetoOrochiArchmage(this);
class KasetoEffect extends OneShotEffect {
public KasetoEffect() {
public KasetoEffect(final KasetoEffect effect) {
public KasetoEffect copy() {return new KasetoEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MerenOfClanNelToth extends CardImpl {
public MerenOfClanNelToth(UUID ownerId) {
public MerenOfClanNelToth(final MerenOfClanNelToth card) {
public MerenOfClanNelToth copy() {return new MerenOfClanNelToth(this);
class MerenOfClanNelTothEffect extends OneShotEffect {
public MerenOfClanNelTothEffect() {this.staticText = "choose target creature card in your graveyard. If that card's converted mana cost is less than or equal to the number of experience counters you have, return it to the battlefield. Otherwise, put it into your hand";
public MerenOfClanNelTothEffect(final MerenOfClanNelTothEffect effect) {
public MerenOfClanNelTothEffect copy() {return new MerenOfClanNelTothEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MeteorBlast extends CardImpl {
public MeteorBlast(UUID ownerId) {
public MeteorBlast(final MeteorBlast card) {
public void adjustTargets(Ability ability, Game game) {
public MeteorBlast copy() {return new MeteorBlast(this);
class MeteorBlastEffect extends OneShotEffect {
public MeteorBlastEffect() {
public MeteorBlastEffect(final MeteorBlastEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MeteorBlastEffect copy() {return new MeteorBlastEffect(this);
public class MirrorMatch extends CardImpl {
public MirrorMatch(UUID ownerId) {
public MirrorMatch(final MirrorMatch card) {
public MirrorMatch copy() {return new MirrorMatch(this);
class MirrorMatchEffect extends OneShotEffect {
public MirrorMatchEffect() {
public MirrorMatchEffect(final MirrorMatchEffect effect) {
public MirrorMatchEffect copy() {return new MirrorMatchEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MizzixOfTheIzmagnus extends CardImpl {
public MizzixOfTheIzmagnus(UUID ownerId) {
public MizzixOfTheIzmagnus(final MizzixOfTheIzmagnus card) {
public MizzixOfTheIzmagnus copy() {return new MizzixOfTheIzmagnus(this);
class MizzixOfTheIzmagnusPredicate implements Predicate<MageObject> {
public boolean apply(MageObject input, Game game) {return true;return false;
public String toString() {return "VariableManaCost";
MizzixOfTheIzmagnusCostReductionEffect() {
MizzixOfTheIzmagnusCostReductionEffect(MizzixOfTheIzmagnusCostReductionEffect effect) {return true;return false;return new FilterInstantOrSorceryCard().match(spell, source.getSourceId(), source.getControllerId(), game);return sourceCard != null && new FilterInstantOrSorceryCard().match(sourceCard, source.getSourceId(), source.getControllerId(), game);return false;
public MizzixOfTheIzmagnusCostReductionEffect copy() {return new MizzixOfTheIzmagnusCostReductionEffect(this);
public class MizzixsMastery extends CardImpl {
public MizzixsMastery(UUID ownerId) {
public MizzixsMastery(final MizzixsMastery card) {
public MizzixsMastery copy() {return new MizzixsMastery(this);
class MizzixsMasteryEffect extends OneShotEffect {
public MizzixsMasteryEffect() {
public MizzixsMasteryEffect(final MizzixsMasteryEffect effect) {
public MizzixsMasteryEffect copy() {return new MizzixsMasteryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MizzixsMasteryOverloadEffect extends OneShotEffect {
public MizzixsMasteryOverloadEffect() {
public MizzixsMasteryOverloadEffect(final MizzixsMasteryOverloadEffect effect) {
public MizzixsMasteryOverloadEffect copy() {return new MizzixsMasteryOverloadEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MysticConfluence extends CardImpl {
public MysticConfluence(UUID ownerId) {
public MysticConfluence(final MysticConfluence card) {
public MysticConfluence copy() {return new MysticConfluence(this);
public class OreskosExplorer extends CardImpl {
public OreskosExplorer(UUID ownerId) {
public OreskosExplorer(final OreskosExplorer card) {
public OreskosExplorer copy() {return new OreskosExplorer(this);
class OreskosExplorerEffect extends OneShotEffect {
public OreskosExplorerEffect() {
public OreskosExplorerEffect(final OreskosExplorerEffect effect) {
public OreskosExplorerEffect copy() {return new OreskosExplorerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class PathbreakerIbex extends CardImpl {
public PathbreakerIbex(UUID ownerId) {
public PathbreakerIbex(final PathbreakerIbex card) {
public PathbreakerIbex copy() {return new PathbreakerIbex(this);
class PathbreakerIbexEffect extends OneShotEffect {
public PathbreakerIbexEffect() {
public PathbreakerIbexEffect(final PathbreakerIbexEffect effect) {
public PathbreakerIbexEffect copy() {return new PathbreakerIbexEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class RighteousConfluence extends CardImpl {
public RighteousConfluence(UUID ownerId) {
public RighteousConfluence(final RighteousConfluence card) {
public RighteousConfluence copy() {return new RighteousConfluence(this);
public class RiteOfTheRagingStorm extends CardImpl {
public RiteOfTheRagingStorm(UUID ownerId) {
public RiteOfTheRagingStorm(final RiteOfTheRagingStorm card) {
public RiteOfTheRagingStorm copy() {return new RiteOfTheRagingStorm(this);
class RiteOfTheRagingStormEffect extends OneShotEffect {
RiteOfTheRagingStormEffect() {
RiteOfTheRagingStormEffect(RiteOfTheRagingStormEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public RiteOfTheRagingStormEffect copy() {return new RiteOfTheRagingStormEffect(this);
class LightningRagerToken extends Token {
LightningRagerToken() {
public class SandstoneOracle extends CardImpl {
public SandstoneOracle(UUID ownerId) {
public SandstoneOracle(final SandstoneOracle card) {
public SandstoneOracle copy() {return new SandstoneOracle(this);
class SandstoneOracleEffect extends OneShotEffect {
SandstoneOracleEffect() {
SandstoneOracleEffect(final SandstoneOracleEffect effect) {
public SandstoneOracleEffect copy() {return new SandstoneOracleEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ScourgeOfNelToth extends CardImpl {
public ScourgeOfNelToth(UUID ownerId) {
public ScourgeOfNelToth(final ScourgeOfNelToth card) {
public ScourgeOfNelToth copy() {return new ScourgeOfNelToth(this);
class ScourgeOfNelTothPlayEffect extends AsThoughEffectImpl {
public ScourgeOfNelTothPlayEffect() {
public ScourgeOfNelTothPlayEffect(final ScourgeOfNelTothPlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ScourgeOfNelTothPlayEffect copy() {return new ScourgeOfNelTothPlayEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class Scytheclaw extends CardImpl {
public Scytheclaw(UUID ownerId) {
public Scytheclaw(final Scytheclaw card) {
public Scytheclaw copy() {return new Scytheclaw(this);
class ScytheclawTriggeredAbility extends TriggeredAbilityImpl {
public ScytheclawTriggeredAbility() {
public ScytheclawTriggeredAbility(final ScytheclawTriggeredAbility ability) {
public ScytheclawTriggeredAbility copy() {return new ScytheclawTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature deals combat damage to a player, " + super.getRule();
class ScytheclawEffect extends OneShotEffect {
public ScytheclawEffect() {
public ScytheclawEffect(final ScytheclawEffect effect) {
public ScytheclawEffect copy() {return new ScytheclawEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SealOfTheGuildpact extends CardImpl {
public SealOfTheGuildpact(UUID ownerId) {
public SealOfTheGuildpact(final SealOfTheGuildpact card) {
public SealOfTheGuildpact copy() {return new SealOfTheGuildpact(this);
class SealOfTheGuildpactChooseColorEffect extends OneShotEffect {
SealOfTheGuildpactChooseColorEffect() {
SealOfTheGuildpactChooseColorEffect(final SealOfTheGuildpactChooseColorEffect effect) {
public SealOfTheGuildpactChooseColorEffect copy() {return new SealOfTheGuildpactChooseColorEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;
SealOfTheGuildpactCostReductionEffect() {
SealOfTheGuildpactCostReductionEffect(SealOfTheGuildpactCostReductionEffect effect) {return true;return false;return abilityToModify.getControllerId().equals(source.getControllerId()) &&
public SealOfTheGuildpactCostReductionEffect copy() {return new SealOfTheGuildpactCostReductionEffect(this);
public class ShieldedByFaith extends CardImpl {
public ShieldedByFaith(UUID ownerId) {
public ShieldedByFaith(final ShieldedByFaith card) {
public ShieldedByFaith copy() {return new ShieldedByFaith(this);
public class Skullwinder extends CardImpl {
public Skullwinder(UUID ownerId) {
public Skullwinder(final Skullwinder card) {
public Skullwinder copy() {return new Skullwinder(this);
class SkullwinderEffect extends OneShotEffect {
public SkullwinderEffect() {this.staticText = ", then choose an opponent. That player returns a card from his or her graveyard to his or her hand";
public SkullwinderEffect(final SkullwinderEffect effect) {
public SkullwinderEffect copy() {return new SkullwinderEffect(this);
public boolean apply(Game game, Ability source) {TargetCardInYourGraveyard targetCard = new TargetCardInYourGraveyard(new FilterCard("a card from your graveyard to return to your hand"));return true;return false;
public class SyntheticDestiny extends CardImpl {
public SyntheticDestiny(UUID ownerId) {
public SyntheticDestiny(final SyntheticDestiny card) {
public SyntheticDestiny copy() {return new SyntheticDestiny(this);
class SyntheticDestinyEffect extends OneShotEffect {
public SyntheticDestinyEffect() {
public SyntheticDestinyEffect(final SyntheticDestinyEffect effect) {
public SyntheticDestinyEffect copy() {return new SyntheticDestinyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class SyntheticDestinyDelayedEffect extends OneShotEffect {
public SyntheticDestinyDelayedEffect(int numberOfCards) {
public SyntheticDestinyDelayedEffect(final SyntheticDestinyDelayedEffect effect) {
public SyntheticDestinyDelayedEffect copy() {return new SyntheticDestinyDelayedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ThiefOfBlood extends CardImpl {
public ThiefOfBlood(UUID ownerId) {
public ThiefOfBlood(final ThiefOfBlood card) {
public ThiefOfBlood copy() {return new ThiefOfBlood(this);
class ThiefOfBloodEffect extends OneShotEffect {
ThiefOfBloodEffect() {
ThiefOfBloodEffect(final ThiefOfBloodEffect effect) {
public ThiefOfBloodEffect copy() {return new ThiefOfBloodEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class WarchiefGiant extends CardImpl {
public WarchiefGiant(UUID ownerId) {
public WarchiefGiant(final WarchiefGiant card) {
public WarchiefGiant copy() {return new WarchiefGiant(this);
public class WretchedConfluence extends CardImpl {
public WretchedConfluence(UUID ownerId) {
public WretchedConfluence(final WretchedConfluence card) {
public WretchedConfluence copy() {return new WretchedConfluence(this);
public class AbsorbVis extends CardImpl {
public AbsorbVis (UUID ownerId) {
public AbsorbVis (final AbsorbVis card) {
public AbsorbVis copy() {return new AbsorbVis(this);
public class AerieMystics extends CardImpl {
public AerieMystics(UUID ownerId) {
public AerieMystics(final AerieMystics card) {
public AerieMystics copy() {return new AerieMystics(this);
public class AncientZiggurat extends CardImpl {
public AncientZiggurat(UUID ownerId) {
public AncientZiggurat(final AncientZiggurat card) {
public AncientZiggurat copy() {return new AncientZiggurat(this);
class AncientZigguratManaBuilder extends ConditionalManaBuilder {return new CreatureCastConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast a creature spell";
public class ApocalypseHydra extends CardImpl {
public ApocalypseHydra(UUID ownerId) {
public ApocalypseHydra(final ApocalypseHydra card) {
public ApocalypseHydra copy() {return new ApocalypseHydra(this);
class ApocalypseHydraEffect extends OneShotEffect {
ApocalypseHydraEffect() {
ApocalypseHydraEffect(final ApocalypseHydraEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;
public ApocalypseHydraEffect copy() {return new ApocalypseHydraEffect(this);
public class ArmillarySphere extends CardImpl {
public ArmillarySphere(UUID ownerId) {
public ArmillarySphere(final ArmillarySphere card) {
public ArmillarySphere copy() {return new ArmillarySphere(this);
public class AshasFavor extends CardImpl {
public AshasFavor (UUID ownerId) {
public AshasFavor (final AshasFavor card) {
public AshasFavor copy() {return new AshasFavor(this);
public class AvenSquire extends CardImpl {
public AvenSquire(UUID ownerId) {
public AvenSquire(final AvenSquire card) {
public AvenSquire copy() {return new AvenSquire(this);
public class AvenTrailblazer extends CardImpl {
public AvenTrailblazer(UUID ownerId) {
public AvenTrailblazer(final AvenTrailblazer card) {
public AvenTrailblazer copy() {return new AvenTrailblazer(this);
public class Banefire extends CardImpl {
public Banefire(UUID ownerId) {
public Banefire(final Banefire card) {
public Banefire copy() {return new Banefire(this);
class testCondition implements Condition {
public testCondition(DynamicValue xValue, int limit) {
public boolean apply(Game game, Ability source) {return (xValue.calculate(game, spell.getSpellAbility(), null) >= limit);return false;
class BaneFireEffect extends OneShotEffect {
public BaneFireEffect() {
public BaneFireEffect(final BaneFireEffect effect) {
public BaneFireEffect copy() {return new BaneFireEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public BanefireCantCounterEffect() {
public BanefireCantCounterEffect(final BanefireCantCounterEffect effect) {
public BanefireCantCounterEffect copy() {return new BanefireCantCounterEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class BeaconBehemoth extends CardImpl {
public BeaconBehemoth (UUID ownerId) {
public BeaconBehemoth (final BeaconBehemoth card) {
public BeaconBehemoth copy() {return new BeaconBehemoth(this);
public class BloodhallOoze extends CardImpl {
public BloodhallOoze(UUID ownerId) {
public BloodhallOoze(final BloodhallOoze card) {
public BloodhallOoze copy() {return new BloodhallOoze(this);
class BloodhallOozeTriggeredAbility1 extends TriggeredAbilityImpl {
public BloodhallOozeTriggeredAbility1() {
public BloodhallOozeTriggeredAbility1(final BloodhallOozeTriggeredAbility1 ability) {
public BloodhallOozeTriggeredAbility1 copy() {return new BloodhallOozeTriggeredAbility1(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public boolean checkInterveningIfClause(Game game) {return game.getBattlefield().countAll(filter, this.controllerId, game) >= 1;
public String getRule() {return "At the beginning of your upkeep, if you control a black permanent, you may put a +1/+1 counter on {this}.";
class BloodhallOozeTriggeredAbility2 extends TriggeredAbilityImpl {
public BloodhallOozeTriggeredAbility2() {
public BloodhallOozeTriggeredAbility2(final BloodhallOozeTriggeredAbility2 ability) {
public BloodhallOozeTriggeredAbility2 copy() {return new BloodhallOozeTriggeredAbility2(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public boolean checkInterveningIfClause(Game game) {return game.getBattlefield().countAll(filter, this.controllerId, game) >= 1;
public String getRule() {return "At the beginning of your upkeep, if you control a green permanent, you may put a +1/+1 counter on {this}.";
public class BloodTyrant extends CardImpl {
public BloodTyrant(UUID ownerId) {
public BloodTyrant(final BloodTyrant card) {
public BloodTyrant copy() {return new BloodTyrant(this);
class PlayerLosesTheGameTriggeredAbility extends TriggeredAbilityImpl {
public PlayerLosesTheGameTriggeredAbility() {
public PlayerLosesTheGameTriggeredAbility(final PlayerLosesTheGameTriggeredAbility ability) {
public PlayerLosesTheGameTriggeredAbility copy() {return new PlayerLosesTheGameTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LOSES;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "Whenever a player loses the game, put five +1/+1 counters on {this}.";
class BloodTyrantEffect extends OneShotEffect {
public BloodTyrantEffect() {
public BloodTyrantEffect(final BloodTyrantEffect effect) {
public BloodTyrantEffect copy() {return new BloodTyrantEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BoneSaw extends CardImpl {
public BoneSaw(UUID ownerId) {
public BoneSaw(final BoneSaw card) {
public BoneSaw copy() {return new BoneSaw(this);
public class BrackwaterElemental extends CardImpl {
public BrackwaterElemental(UUID ownerId) {
public BrackwaterElemental(final BrackwaterElemental card) {
public BrackwaterElemental copy() {return new BrackwaterElemental(this);return new BrackwaterElementalSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class CanyonMinotaur extends CardImpl {
public CanyonMinotaur(UUID ownerId) {
public CanyonMinotaur(final CanyonMinotaur card) {
public CanyonMinotaur copy() {return new CanyonMinotaur(this);
public class CelestialPurge extends CardImpl {
public CelestialPurge(UUID ownerId) {
public CelestialPurge(final CelestialPurge card) {
public CelestialPurge copy() {return new CelestialPurge(this);return new CliffrunnerBehemoth(this);
public class Conflux extends CardImpl {
public Conflux(UUID ownerId) {
public Conflux(final Conflux card) {
public Conflux copy() {return new Conflux(this);
class ConfluxEffect extends OneShotEffect {
public ConfluxEffect() {
public ConfluxEffect(final ConfluxEffect effect) {
public ConfluxEffect copy() {return new ConfluxEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ConstrictingTendrils extends CardImpl {
public ConstrictingTendrils(UUID ownerId) {
public ConstrictingTendrils(final ConstrictingTendrils card) {
public ConstrictingTendrils copy() {return new ConstrictingTendrils(this);
public class ControlledInstincts extends CardImpl {
public ControlledInstincts(UUID ownerId) {
public ControlledInstincts(final ControlledInstincts card) {
public ControlledInstincts copy() {return new ControlledInstincts(this);
public class CorruptedRoots extends CardImpl {
public CorruptedRoots(UUID ownerId) {
public CorruptedRoots(final CorruptedRoots card) {
public CorruptedRoots copy() {return new CorruptedRoots(this);
public class Countersquall extends CardImpl {
public Countersquall(UUID ownerId) {
public Countersquall(final Countersquall card) {
public Countersquall copy() {return new Countersquall(this);
public class CourtHomunculus extends CardImpl {
public CourtHomunculus(UUID ownerId) {
public CourtHomunculus(final CourtHomunculus card) {
public CourtHomunculus copy() {return new CourtHomunculus(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CumberStone extends CardImpl {
public CumberStone(UUID ownerId) {
public CumberStone(final CumberStone card) {
public CumberStone copy() {return new CumberStone(this);
public class CylianSunsinger extends CardImpl {
public CylianSunsinger(UUID ownerId) {
public CylianSunsinger(final CylianSunsinger card) {
public CylianSunsinger copy() {return new CylianSunsinger(this);
public class DarklitGargoyle extends CardImpl {
public DarklitGargoyle(UUID ownerId) {
public DarklitGargoyle(final DarklitGargoyle card) {
public DarklitGargoyle copy() {return new DarklitGargoyle(this);
public class DarkTemper extends CardImpl {
public DarkTemper(UUID ownerId) {
public DarkTemper(final DarkTemper card) {
public DarkTemper copy() {return new DarkTemper(this);
class DarkTemperEffect extends OneShotEffect {
public DarkTemperEffect() {
public DarkTemperEffect(final DarkTemperEffect effect) {
public DarkTemperEffect copy() {return new DarkTemperEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class DragDown extends CardImpl {
public DragDown(UUID ownerId) {
public DragDown(final DragDown card) {
public DragDown copy() {return new DragDown(this);
public class DragonsoulKnight extends CardImpl {
public DragonsoulKnight(UUID ownerId) {
public DragonsoulKnight(final DragonsoulKnight card) {
public DragonsoulKnight copy() {return new DragonsoulKnight(this);
private class DragonsoulKnightEffect extends ContinuousEffectImpl {
public DragonsoulKnightEffect() {
public DragonsoulKnightEffect(final DragonsoulKnightEffect effect) {
public DragonsoulKnightEffect copy() {return new DragonsoulKnightEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return false;return true;
public boolean apply(Game game, Ability source) {return false;
private void setText() {
public boolean hasLayer(Layer layer) {return layer == Layer.TypeChangingEffects_4;
public class Dreadwing extends CardImpl {
public Dreadwing(UUID ownerId) {
public Dreadwing(final Dreadwing card) {
public Dreadwing copy() {return new Dreadwing(this);
public class ElderMastery extends CardImpl {
public ElderMastery(UUID ownerId) {
public ElderMastery(final ElderMastery card) {
public ElderMastery copy() {return new ElderMastery(this);
public class EmberWeaver extends CardImpl {
public EmberWeaver(UUID ownerId) {
public EmberWeaver(final EmberWeaver card) {
public EmberWeaver copy() {return new EmberWeaver(this);
public class EsperCormorants extends CardImpl {
public EsperCormorants(UUID ownerId) {
public EsperCormorants(final EsperCormorants card) {
public EsperCormorants copy() {return new EsperCormorants(this);
public class Esperzoa extends CardImpl {
public Esperzoa (UUID ownerId) {
public Esperzoa (final Esperzoa card) {
public Esperzoa copy() {return new Esperzoa(this);
public class ExplodingBorders extends CardImpl {
public ExplodingBorders(UUID ownerId) {
public ExplodingBorders(final ExplodingBorders card) {
public ExplodingBorders copy() {return new ExplodingBorders(this);
public class ExtractorDemon extends CardImpl {
public ExtractorDemon(UUID ownerId) {
public ExtractorDemon(final ExtractorDemon card) {
public ExtractorDemon copy() {return new ExtractorDemon(this);
public class FaerieMechanist extends CardImpl {
public FaerieMechanist(UUID ownerId) {
public FaerieMechanist(final FaerieMechanist card) {
public FaerieMechanist copy() {return new FaerieMechanist(this);
public class FieryFall extends CardImpl {
public FieryFall (UUID ownerId) {
public FieryFall (final FieryFall card) {
public FieryFall copy() {return new FieryFall(this);
public class FiligreeFracture extends CardImpl {
public FiligreeFracture(UUID ownerId) {
public FiligreeFracture(final FiligreeFracture card) {
public FiligreeFracture copy() {return new FiligreeFracture(this);
class FiligreeFractureEffect extends OneShotEffect {
public FiligreeFractureEffect() {
public FiligreeFractureEffect(final FiligreeFractureEffect effect) {
public FiligreeFractureEffect copy() {return new FiligreeFractureEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new Fleshformer(this);
public class FontOfMythos extends CardImpl {
public FontOfMythos(UUID ownerId) {
public FontOfMythos(final FontOfMythos card) {
public FontOfMythos copy() {return new FontOfMythos(this);
class FontOfMythosAbility extends TriggeredAbilityImpl {
public FontOfMythosAbility() {
public FontOfMythosAbility(final FontOfMythosAbility ability) {
public FontOfMythosAbility copy() {return new FontOfMythosAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DRAW_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "At the beginning of each player's draw step, that player draws two additional cards.";
public class FrontlineSage extends CardImpl {
public FrontlineSage (UUID ownerId) {
public FrontlineSage (final FrontlineSage card) {
public FrontlineSage copy() {return new FrontlineSage(this);
public class FusionElemental extends CardImpl {
public FusionElemental(UUID ownerId) {
public FusionElemental(final FusionElemental card) {
public FusionElemental copy() {return new FusionElemental(this);
public class GiltspireAvenger extends CardImpl {
public GiltspireAvenger(UUID ownerId) {
public GiltspireAvenger(final GiltspireAvenger card) {
public GiltspireAvenger copy() {return new GiltspireAvenger(this);
class GiltspireAvengerTarget extends TargetPermanent {
public GiltspireAvengerTarget() {
public GiltspireAvengerTarget(final GiltspireAvengerTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return super.canTarget(id, source, game);return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {return true;return true;return false;
public GiltspireAvengerTarget copy() {return new GiltspireAvengerTarget(this);
public class GleamOfResistance extends CardImpl {
public GleamOfResistance(UUID ownerId) {
public GleamOfResistance(final GleamOfResistance card) {
public GleamOfResistance copy() {return new GleamOfResistance(this);
public class GluttonousSlime extends CardImpl {
public GluttonousSlime(UUID ownerId) {
public GluttonousSlime(final GluttonousSlime card) {
public GluttonousSlime copy() {return new GluttonousSlime(this);
public class GoblinOutlander extends CardImpl {
public GoblinOutlander(UUID ownerId) {
public GoblinOutlander(final GoblinOutlander card) {
public GoblinOutlander copy() {return new GoblinOutlander(this);
public class GoblinRazerunners extends CardImpl {
public GoblinRazerunners (UUID ownerId) {
public GoblinRazerunners (final GoblinRazerunners card) {
public GoblinRazerunners copy() {return new GoblinRazerunners(this);
public class GrixisIllusionist extends CardImpl {
public GrixisIllusionist(UUID ownerId) {
public GrixisIllusionist(final GrixisIllusionist card) {
public GrixisIllusionist copy() {return new GrixisIllusionist(this);
public class GrixisSlavedriver extends CardImpl {
public GrixisSlavedriver(UUID ownerId) {
public GrixisSlavedriver(final GrixisSlavedriver card) {
public GrixisSlavedriver copy() {return new GrixisSlavedriver(this);
public class GwafaHazidProfiteer extends CardImpl {
public GwafaHazidProfiteer(UUID ownerId) {
public GwafaHazidProfiteer(final GwafaHazidProfiteer card) {
public GwafaHazidProfiteer copy() {return new GwafaHazidProfiteer(this);
class GwafaHazidProfiteerEffect1 extends OneShotEffect {
GwafaHazidProfiteerEffect1() {
public GwafaHazidProfiteerEffect1(final GwafaHazidProfiteerEffect1 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GwafaHazidProfiteerEffect1 copy() {return new GwafaHazidProfiteerEffect1(this);
class GwafaHazidProfiteerEffect2 extends RestrictionEffect {
public GwafaHazidProfiteerEffect2() {
public GwafaHazidProfiteerEffect2(final GwafaHazidProfiteerEffect2 effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getCounters().containsKey(CounterType.BRIBERY);
public boolean canAttack(Game game) {return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public GwafaHazidProfiteerEffect2 copy() {return new GwafaHazidProfiteerEffect2(this);
public class HellkiteHatchling extends CardImpl {
public HellkiteHatchling(UUID ownerId) {
public HellkiteHatchling(final HellkiteHatchling card) {
public HellkiteHatchling copy() {return new HellkiteHatchling(this);
public class InkwellLeviathan extends CardImpl {
public InkwellLeviathan(UUID ownerId) {
public InkwellLeviathan(final InkwellLeviathan card) {
public InkwellLeviathan copy() {return new InkwellLeviathan(this);
public class JhessianBalmgiver extends CardImpl {
public JhessianBalmgiver(UUID ownerId) {
public JhessianBalmgiver(final JhessianBalmgiver card) {
public JhessianBalmgiver copy() {return new JhessianBalmgiver(this);return new Kaleidostone(this);
public class KederektParasite extends CardImpl {
public KederektParasite(UUID ownerId) {
public KederektParasite(final KederektParasite card) {
public KederektParasite copy() {return new KederektParasite(this);
class KederektParasiteTriggeredAbility extends TriggeredAbilityImpl {
KederektParasiteTriggeredAbility() {
KederektParasiteTriggeredAbility(final KederektParasiteTriggeredAbility ability) {
public KederektParasiteTriggeredAbility copy() {return new KederektParasiteTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DREW_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent draws a card, if you control a red permanent, you may have {this} deal 1 damage to that player.";
public class KnightOfTheReliquary extends CardImpl {
public KnightOfTheReliquary(UUID ownerId) {
public KnightOfTheReliquary(final KnightOfTheReliquary card) {
public KnightOfTheReliquary copy() {return new KnightOfTheReliquary(this);
public class KnotvineMystic extends CardImpl{
public KnotvineMystic(UUID ownerId) {
public KnotvineMystic(final KnotvineMystic card) {
public KnotvineMystic copy() {return new KnotvineMystic(this);
class KnotvineMysticManaAbility extends BasicManaAbility {
public KnotvineMysticManaAbility() {
public KnotvineMysticManaAbility(final KnotvineMysticManaAbility ability) {
public KnotvineMysticManaAbility copy() {return new KnotvineMysticManaAbility(this);
public class Kranioceros extends CardImpl {
public Kranioceros(UUID ownerId) {
public Kranioceros (final Kranioceros card) {
public Kranioceros copy() {return new Kranioceros(this);
public class LapseOfCertainty extends CardImpl {
public LapseOfCertainty(UUID ownerId) {
public LapseOfCertainty(final LapseOfCertainty card) {
public LapseOfCertainty copy() {return new LapseOfCertainty(this);
public class MaelstromArchangel extends CardImpl {
public MaelstromArchangel(UUID ownerId) {
public MaelstromArchangel(final MaelstromArchangel card) {
public MaelstromArchangel copy() {return new MaelstromArchangel(this);
class MaelstromArchangelCastEffect extends OneShotEffect {
public MaelstromArchangelCastEffect() {
public MaelstromArchangelCastEffect(final MaelstromArchangelCastEffect effect) {
public MaelstromArchangelCastEffect copy() {return new MaelstromArchangelCastEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MagisterSphinx extends CardImpl {
public MagisterSphinx(UUID ownerId) {
public MagisterSphinx(final MagisterSphinx card) {
public MagisterSphinx copy() {return new MagisterSphinx(this);
class MagisterSphinxEffect extends OneShotEffect {
MagisterSphinxEffect() {
MagisterSphinxEffect(final MagisterSphinxEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MagisterSphinxEffect copy() {return new MagisterSphinxEffect(this);
public class Malfegor extends CardImpl {
public Malfegor(UUID ownerId) {
public Malfegor(final Malfegor card) {
public Malfegor copy() {return new Malfegor(this);
class MalfegorEffect extends OneShotEffect {
public MalfegorEffect() {
public MalfegorEffect(final MalfegorEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MalfegorEffect copy() {return new MalfegorEffect(this);
public class ManaCylix extends CardImpl {
public ManaCylix(UUID ownerId) {
public ManaCylix(final ManaCylix card) {
public ManaCylix copy() {return new ManaCylix(this);return new ManaforceMace(this);
public class ManiacalRage extends CardImpl {
public ManiacalRage(UUID ownerId) {
public ManiacalRage(final ManiacalRage card) {
public ManiacalRage copy() {return new ManiacalRage(this);
public class MarkOfAsylum extends CardImpl {
public MarkOfAsylum(UUID ownerId) {
public MarkOfAsylum(final MarkOfAsylum card) {
public MarkOfAsylum copy() {return new MarkOfAsylum(this);
public class MartialCoup extends CardImpl {
public MartialCoup(UUID ownerId) {
public MartialCoup(final MartialCoup card) {
public MartialCoup copy() {return new MartialCoup(this);
class MartialCoupEffect extends OneShotEffect {
public MartialCoupEffect() {
public MartialCoupEffect(final MartialCoupEffect effect) {
public MartialCoupEffect copy() {return new MartialCoupEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class MasterTransmuter extends CardImpl {
public MasterTransmuter(UUID ownerId) {
public MasterTransmuter(final MasterTransmuter card) {
public MasterTransmuter copy() {return new MasterTransmuter(this);
public class MatcaRioters extends CardImpl {
public MatcaRioters(UUID ownerId) {
public MatcaRioters(final MatcaRioters card) {
public MatcaRioters copy() {return new MatcaRioters(this);
public class MirrorSigilSergeant extends CardImpl {
public MirrorSigilSergeant(UUID ownerId) {
public MirrorSigilSergeant(final MirrorSigilSergeant card) {
public MirrorSigilSergeant copy() {return new MirrorSigilSergeant(this);
public class MoltenFrame extends CardImpl {
public MoltenFrame(UUID ownerId) {
public MoltenFrame (final MoltenFrame card) {
public MoltenFrame copy() {return new MoltenFrame(this);
public class NacatlHuntPride extends CardImpl {
public NacatlHuntPride(UUID ownerId) {
public NacatlHuntPride(final NacatlHuntPride card) {
public NacatlHuntPride copy() {return new NacatlHuntPride(this);
public class NacatlOutlander extends CardImpl {
public NacatlOutlander(UUID ownerId) {
public NacatlOutlander(final NacatlOutlander card) {
public NacatlOutlander copy() {return new NacatlOutlander(this);
public class NacatlSavage extends CardImpl {
public NacatlSavage(UUID ownerId) {
public NacatlSavage(final NacatlSavage card) {
public NacatlSavage copy() {return new NacatlSavage(this);
public class NicolBolasPlaneswalker extends CardImpl {
public NicolBolasPlaneswalker(UUID ownerId) {
public NicolBolasPlaneswalker(final NicolBolasPlaneswalker card) {
public NicolBolasPlaneswalker copy() {return new NicolBolasPlaneswalker(this);
public class NobleHierarch extends CardImpl {
public NobleHierarch(UUID ownerId) {
public NobleHierarch(final NobleHierarch card) {
public NobleHierarch copy() {return new NobleHierarch(this);
public class Nyxathid extends CardImpl {
public Nyxathid(UUID ownerId) {
public Nyxathid(final Nyxathid card) {
public Nyxathid copy() {return new Nyxathid(this);
class CardsInChosenPlayerHandCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return chosenPlayer.getHand().size();return 0;
public DynamicValue copy() {return new CardsInChosenPlayerHandCount();
public String getMessage() {return "cards in chosen opponents hand";
public String toString() {return "1";
public class ObeliskOfAlara extends CardImpl {
public ObeliskOfAlara(UUID ownerId) {
public ObeliskOfAlara(final ObeliskOfAlara card) {
public ObeliskOfAlara copy() {return new ObeliskOfAlara(this);
public class Paleoloth extends CardImpl {private static final String rule = "Whenever another creature with power 5 or greater enters the battlefield under your control, you may return target creature card from your graveyard to your hand.";
public Paleoloth(UUID ownerId) {
public Paleoloth(final Paleoloth card) {
public Paleoloth copy() {return new Paleoloth(this);
public class ParagonOfTheAmesha extends CardImpl {
public ParagonOfTheAmesha(UUID ownerId) {
public ParagonOfTheAmesha(final ParagonOfTheAmesha card) {
public ParagonOfTheAmesha copy() {return new ParagonOfTheAmesha(this);
private class ParagonOfTheAmeshaEffect extends ContinuousEffectImpl {
public ParagonOfTheAmeshaEffect() {
public ParagonOfTheAmeshaEffect(final ParagonOfTheAmeshaEffect effect) {
public ParagonOfTheAmeshaEffect copy() {return new ParagonOfTheAmeshaEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return false;return true;
public boolean apply(Game game, Ability source) {return false;
private void setText() {
public boolean hasLayer(Layer layer) {return layer == Layer.TypeChangingEffects_4;
public class ParasiticStrix extends CardImpl {
public ParasiticStrix(UUID ownerId) {
public ParasiticStrix(final ParasiticStrix card) {
public ParasiticStrix copy() {return new ParasiticStrix(this);
class ParasiticStrixTriggeredAbility extends TriggeredAbilityImpl {
public ParasiticStrixTriggeredAbility() {
public ParasiticStrixTriggeredAbility(final ParasiticStrixTriggeredAbility ability) {
public ParasiticStrixTriggeredAbility copy() {return new ParasiticStrixTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return event.getTargetId().equals(this.getSourceId());
public boolean checkInterveningIfClause(Game game) {return true;return false;
public String getRule() {return "When Parasitic Strix enters the battlefield, if you control a black permanent, target player loses 2 life and you gain 2 life.";
public class PathToExile extends CardImpl {
public PathToExile(UUID ownerId) {
public PathToExile(final PathToExile card) {
public PathToExile copy() {return new PathToExile(this);
class PathToExileEffect extends OneShotEffect {
public PathToExileEffect() {
public PathToExileEffect(final PathToExileEffect effect) {
public PathToExileEffect copy() {return new PathToExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PestilentKathari extends CardImpl {
public PestilentKathari(UUID ownerId) {
public PestilentKathari(final PestilentKathari card) {
public PestilentKathari copy() {return new PestilentKathari(this);
public class Progenitus extends CardImpl {
public Progenitus(UUID ownerId) {
public Progenitus(final Progenitus card) {
public Progenitus copy() {return new Progenitus(this);
class ProgenitusProtectionAbility extends ProtectionAbility {
public ProgenitusProtectionAbility() {
public ProgenitusProtectionAbility(final ProgenitusProtectionAbility ability) {
public ProgenitusProtectionAbility copy() {return new ProgenitusProtectionAbility(this);
public String getRule() {return "Protection from everything";
public boolean canTarget(MageObject source, Game game) {return false;
public class QuenchableFire extends CardImpl {
public QuenchableFire(UUID ownerId) {
public QuenchableFire(final QuenchableFire card) {
public QuenchableFire copy() {return new QuenchableFire(this);
public class RakkaMar extends CardImpl {
public RakkaMar(UUID ownerId) {
public RakkaMar(final RakkaMar card) {
public RakkaMar copy() {return new RakkaMar(this);
class ElementalToken extends Token {
public ElementalToken() {
public class ReliquaryTower extends CardImpl {
public ReliquaryTower(UUID ownerId) {
public ReliquaryTower(final ReliquaryTower card) {
public ReliquaryTower copy() {return new ReliquaryTower(this);
public class RottingRats extends CardImpl {
public RottingRats (UUID ownerId) {
public RottingRats (final RottingRats card) {
public RottingRats copy() {return new RottingRats(this);
public class RuptureSpire extends CardImpl {
public RuptureSpire (UUID ownerId) {
public RuptureSpire (final RuptureSpire card) {
public RuptureSpire copy() {return new RuptureSpire(this);
public class SacellumArchers extends CardImpl {
public SacellumArchers(UUID ownerId) {
public SacellumArchers(final SacellumArchers card) {
public SacellumArchers copy() {return new SacellumArchers(this);
public class SalvageSlasher extends CardImpl {
public SalvageSlasher(UUID ownerId) {
public SalvageSlasher(final SalvageSlasher card) {
public SalvageSlasher copy() {return new SalvageSlasher(this);
public class ScarlandThrinax extends CardImpl {
public ScarlandThrinax(UUID ownerId) {
public ScarlandThrinax(final ScarlandThrinax card) {
public ScarlandThrinax copy() {return new ScarlandThrinax(this);
public class ScattershotArcher extends CardImpl {
public ScattershotArcher(UUID ownerId) {
public ScattershotArcher(final ScattershotArcher card) {
public ScattershotArcher copy() {return new ScattershotArcher(this);
public class ScepterOfDominance extends CardImpl {
public ScepterOfDominance(UUID ownerId) {
public ScepterOfDominance(ScepterOfDominance card) {
public ScepterOfDominance copy() {return new ScepterOfDominance(this);
public class ScepterOfFugue extends CardImpl {
public ScepterOfFugue(UUID ownerId) {
public ScepterOfFugue(final ScepterOfFugue card) {
public ScepterOfFugue copy() {return new ScepterOfFugue(this);
public class ScepterOfInsight extends CardImpl {
public ScepterOfInsight(UUID ownerId) {
public ScepterOfInsight(final ScepterOfInsight card) {
public ScepterOfInsight copy() {return new ScepterOfInsight(this);
public class ScornfulAEtherLich extends CardImpl {
public ScornfulAEtherLich(UUID ownerId) {
public ScornfulAEtherLich(final ScornfulAEtherLich card) {
public ScornfulAEtherLich copy() {return new ScornfulAEtherLich(this);
public class SedraxisAlchemist extends CardImpl {private static final String rule = "When {this} enters the battlefield, if you control a blue permanent, return target nonland permanent to its owner's hand.";
public SedraxisAlchemist(UUID ownerId) {
public SedraxisAlchemist(final SedraxisAlchemist card) {
public SedraxisAlchemist copy() {return new SedraxisAlchemist(this);
public class ShamblingRemains extends CardImpl {
public ShamblingRemains(UUID ownerId) {
public ShamblingRemains(final ShamblingRemains card) {
public ShamblingRemains copy() {return new ShamblingRemains(this);
public class ShardConvergence extends CardImpl {
public ShardConvergence(UUID ownerId) {
public ShardConvergence(final ShardConvergence card) {
public ShardConvergence copy() {return new ShardConvergence(this);
class ShardConvergenceEffect extends OneShotEffect {
ShardConvergenceEffect() {
ShardConvergenceEffect(final ShardConvergenceEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
private void searchLand(Player player, Ability source, Game game, Cards cards, String subtype) {
public ShardConvergenceEffect copy() {return new ShardConvergenceEffect(this);
public class SigilOfTheEmptyThrone extends CardImpl {
public SigilOfTheEmptyThrone(UUID ownerId) {
public SigilOfTheEmptyThrone(final SigilOfTheEmptyThrone card) {
public SigilOfTheEmptyThrone copy() {return new SigilOfTheEmptyThrone(this);
public class SkywardEyeProphets extends CardImpl {
public SkywardEyeProphets(UUID ownerId) {
public SkywardEyeProphets(final SkywardEyeProphets card) {
public SkywardEyeProphets copy() {return new SkywardEyeProphets(this);
public SkywardEyeProphetsEffect() {
public SkywardEyeProphetsEffect(final SkywardEyeProphetsEffect effect) {
public SkywardEyeProphetsEffect copy() {return new SkywardEyeProphetsEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return controller.moveCards(card, Zone.BATTLEFIELD, source, game);return true;
public class SludgeStrider extends CardImpl {
public SludgeStrider(UUID ownerId) {
public SludgeStrider(final SludgeStrider card) {
public SludgeStrider copy() {return new SludgeStrider(this);
class SludgeStriderTriggeredAbility extends TriggeredAbilityImpl {
public SludgeStriderTriggeredAbility() {
public SludgeStriderTriggeredAbility(final SludgeStriderTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD || event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public SludgeStriderTriggeredAbility copy() {return new SludgeStriderTriggeredAbility(this);
public String getRule() {return "Whenever another artifact enters the battlefield under your control or another artifact you control leaves the battlefield, you may pay {1}. If you do, target player loses 1 life and you gain 1 life.";
class SludgeStriderEffect extends OneShotEffect {
SludgeStriderEffect() {
SludgeStriderEffect(final SludgeStriderEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SludgeStriderEffect copy() {return new SludgeStriderEffect(this);
public class SoulsMajesty extends CardImpl {
public SoulsMajesty(UUID ownerId) {
public SoulsMajesty(final SoulsMajesty card) {
public SoulsMajesty copy() {return new SoulsMajesty(this);
private class SoulsMajestyEffect extends OneShotEffect {
public SoulsMajestyEffect() {
public SoulsMajestyEffect(final SoulsMajestyEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SoulsMajestyEffect copy() {return new SoulsMajestyEffect(this);
public class SphinxSummoner extends CardImpl {
public SphinxSummoner(UUID ownerId) {
public SphinxSummoner(final SphinxSummoner card) {
public SphinxSummoner copy() {return new SphinxSummoner(this);
public class SylvanBounty extends CardImpl {
public SylvanBounty(UUID ownerId) {
public SylvanBounty(final SylvanBounty card) {
public SylvanBounty copy() {return new SylvanBounty(this);return new TeleminPerformance(this);return new TeleminPerformanceEffect(this);
public boolean apply(Game game, Ability source) {return creature.putOntoBattlefield(game, Zone.LIBRARY, source.getSourceId(), source.getControllerId());return false;
public class Thornling extends CardImpl {
public Thornling(UUID ownerId) {
public Thornling(final Thornling card) {
public Thornling copy() {return new Thornling(this);
public class ToxicIguanar extends CardImpl {
public ToxicIguanar(UUID ownerId) {
public ToxicIguanar(final ToxicIguanar card) {
public ToxicIguanar copy() {return new ToxicIguanar(this);
public class TraumaticVisions extends CardImpl {
public TraumaticVisions(UUID ownerId) {
public TraumaticVisions(final TraumaticVisions card) {
public TraumaticVisions copy() {return new TraumaticVisions(this);
public class TukatongueThallid extends CardImpl {
public TukatongueThallid(UUID ownerId) {
public TukatongueThallid(final TukatongueThallid card) {
public TukatongueThallid copy() {return new TukatongueThallid(this);
public class UnstableFrontier extends CardImpl {
public UnstableFrontier(UUID ownerId) {
public UnstableFrontier(final UnstableFrontier card) {
public UnstableFrontier copy() {return new UnstableFrontier(this);
public class VagrantPlowbeasts extends CardImpl {
public VagrantPlowbeasts(UUID ownerId) {
public VagrantPlowbeasts(final VagrantPlowbeasts card) {
public VagrantPlowbeasts copy() {return new VagrantPlowbeasts(this);
public class ValeronOutlander extends CardImpl {
public ValeronOutlander(UUID ownerId) {
public ValeronOutlander(final ValeronOutlander card) {
public ValeronOutlander copy() {return new ValeronOutlander(this);
public class ValiantGuard extends CardImpl {
public ValiantGuard(UUID ownerId) {
public ValiantGuard(final ValiantGuard card) {
public ValiantGuard copy() {return new ValiantGuard(this);
public class VectisAgents extends CardImpl {
public VectisAgents(UUID ownerId) {
public VectisAgents(final VectisAgents card) {
public VectisAgents copy() {return new VectisAgents(this);
public class VedalkenOutlander extends CardImpl {
public VedalkenOutlander(UUID ownerId) {
public VedalkenOutlander(final VedalkenOutlander card) {
public VedalkenOutlander copy() {return new VedalkenOutlander(this);
public class ViashinoSlaughtermaster extends CardImpl {
public ViashinoSlaughtermaster(UUID ownerId) {
public ViashinoSlaughtermaster(final ViashinoSlaughtermaster card) {
public ViashinoSlaughtermaster copy() {return new ViashinoSlaughtermaster(this);
public class ViewFromAbove extends CardImpl {
public ViewFromAbove(UUID ownerId) {"If you control a white permanent, return {this} to its owner's hand"));
public ViewFromAbove(final ViewFromAbove card) {
public ViewFromAbove copy() {return new ViewFromAbove(this);
public class VoicesFromTheVoid extends CardImpl {
public VoicesFromTheVoid(UUID ownerId) {
public VoicesFromTheVoid(final VoicesFromTheVoid card) {
public VoicesFromTheVoid copy() {return new VoicesFromTheVoid(this);
public class VolcanicFallout extends CardImpl {
public VolcanicFallout(UUID ownerId) {
public VolcanicFallout(final VolcanicFallout card) {
public VolcanicFallout copy() {return new VolcanicFallout(this);
public class VoraciousDragon extends CardImpl {
public VoraciousDragon(UUID ownerId) {
public VoraciousDragon(final VoraciousDragon card) {
public VoraciousDragon copy() {return new VoraciousDragon(this);
class TwiceDevouredGoblins implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amountGoblins *2;return 0;
public TwiceDevouredGoblins copy() {return new TwiceDevouredGoblins();
public String toString() {return "";
public String getMessage() {return "twice the number of Goblins it devoured";
public class WallOfReverence extends CardImpl {
public WallOfReverence (UUID ownerId) {
public WallOfReverence (final WallOfReverence card) {
public WallOfReverence copy() {return new WallOfReverence(this);
class WallOfReverenceTriggeredEffect extends OneShotEffect {
WallOfReverenceTriggeredEffect() {
WallOfReverenceTriggeredEffect(WallOfReverenceTriggeredEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public WallOfReverenceTriggeredEffect copy() {return new WallOfReverenceTriggeredEffect(this);
public class WorldlyCounsel extends CardImpl {
public WorldlyCounsel(UUID ownerId) {
public WorldlyCounsel(final WorldlyCounsel card) {
public WorldlyCounsel copy() {return new WorldlyCounsel(this);
class WorldlyCounselEffect extends OneShotEffect {
public WorldlyCounselEffect() {
public WorldlyCounselEffect(final WorldlyCounselEffect effect) {
public WorldlyCounselEffect copy() {return new WorldlyCounselEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;
public class WretchedBanquet extends CardImpl {
public WretchedBanquet(UUID ownerId) {
public WretchedBanquet(final WretchedBanquet card) {
public WretchedBanquet copy() {return new WretchedBanquet(this);
class WretchedBanquetEffect extends OneShotEffect {
public WretchedBanquetEffect() {
public WretchedBanquetEffect(final WretchedBanquetEffect effect) {
public WretchedBanquetEffect copy() {return new WretchedBanquetEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class YokeOfTheDamned extends CardImpl {
public YokeOfTheDamned(UUID ownerId) {
public YokeOfTheDamned(final YokeOfTheDamned card) {
public YokeOfTheDamned copy() {return new YokeOfTheDamned(this);
public class ZombieOutlander extends CardImpl {
public ZombieOutlander(UUID ownerId) {
public ZombieOutlander(final ZombieOutlander card) {
public ZombieOutlander copy() {return new ZombieOutlander(this);
public class AcademyElite extends CardImpl {
public AcademyElite(UUID ownerId) {
public AcademyElite(final AcademyElite card) {
public AcademyElite copy() {return new AcademyElite(this);
class AcademyEliteEffect1 extends OneShotEffect {
public AcademyEliteEffect1() {
public AcademyEliteEffect1(final AcademyEliteEffect1 effect) {
public boolean apply(Game game, Ability source) {return true;
public AcademyEliteEffect1 copy() {return new AcademyEliteEffect1(this);
public class BarbedShocker extends CardImpl {
public BarbedShocker(UUID ownerId) {
public BarbedShocker(final BarbedShocker card) {
public BarbedShocker copy() {return new BarbedShocker(this);
class BarbedShockerEffect extends OneShotEffect {
public BarbedShockerEffect() {
public BarbedShockerEffect(final BarbedShockerEffect effect) {
public BarbedShockerEffect copy() {return new BarbedShockerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class BiteOfTheBlackRose extends CardImpl {
public BiteOfTheBlackRose(UUID ownerId) {
public BiteOfTheBlackRose(final BiteOfTheBlackRose card) {
public BiteOfTheBlackRose copy() {return new BiteOfTheBlackRose(this);
class BiteOfTheBlackRoseEffect extends OneShotEffect {
BiteOfTheBlackRoseEffect() {
BiteOfTheBlackRoseEffect(final BiteOfTheBlackRoseEffect effect) {
public BiteOfTheBlackRoseEffect copy() {return new BiteOfTheBlackRoseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Breakthrough extends CardImpl {
public Breakthrough(UUID ownerId) {
public Breakthrough(final Breakthrough card) {
public Breakthrough copy() {return new Breakthrough(this);
class BreakthroughEffect extends OneShotEffect {
BreakthroughEffect() {
BreakthroughEffect(final BreakthroughEffect effect) {
public BreakthroughEffect copy() {return new BreakthroughEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CoercivePortal extends CardImpl {
public CoercivePortal(UUID ownerId) {
public CoercivePortal(final CoercivePortal card) {
public CoercivePortal copy() {return new CoercivePortal(this);
class CoercivePortalEffect extends OneShotEffect {
CoercivePortalEffect() {
CoercivePortalEffect(final CoercivePortalEffect effect) {
public CoercivePortalEffect copy() {return new CoercivePortalEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class CoercivePortalDestroyEffect extends OneShotEffect {
public CoercivePortalDestroyEffect() {
public CoercivePortalDestroyEffect(final CoercivePortalDestroyEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CoercivePortalDestroyEffect copy() {return new CoercivePortalDestroyEffect(this);
public class CustodiSoulbinders extends CardImpl {
public CustodiSoulbinders(UUID ownerId) {
public CustodiSoulbinders(final CustodiSoulbinders card) {
public CustodiSoulbinders copy() {return new CustodiSoulbinders(this);
public class DackFayden extends CardImpl {
public DackFayden(UUID ownerId) {
public DackFayden(final DackFayden card) {
public DackFayden copy() {return new DackFayden(this);
class DackFaydenEmblem extends Emblem {
DackFaydenEmblem() {
class DackFaydenEmblemTriggeredAbility extends TriggeredAbilityImpl {
DackFaydenEmblemTriggeredAbility() {
DackFaydenEmblemTriggeredAbility(final DackFaydenEmblemTriggeredAbility ability) {
public DackFaydenEmblemTriggeredAbility copy() {return new DackFaydenEmblemTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {boolean returnValue = false;returnValue = true;returnValue = true;return returnValue;
public String getRule() {return "Whenever you cast a spell that targets one or more permanents, gain control of those permanents.";
class DackFaydenEmblemEffect extends ContinuousEffectImpl {
DackFaydenEmblemEffect() {
DackFaydenEmblemEffect(final DackFaydenEmblemEffect effect) {
public DackFaydenEmblemEffect copy() {return new DackFaydenEmblemEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void setPermanents(List<UUID> targettedPermanents) {
public class DeathreapRitual extends CardImpl {
public DeathreapRitual(UUID ownerId) {
public DeathreapRitual(final DeathreapRitual card) {
public DeathreapRitual copy() {return new DeathreapRitual(this);
public class DrakestownForgotten extends CardImpl {
public DrakestownForgotten(UUID ownerId) {
public DrakestownForgotten(final DrakestownForgotten card) {
public DrakestownForgotten copy() {return new DrakestownForgotten(this);
public class EnragedRevolutionary extends CardImpl {
public EnragedRevolutionary(UUID ownerId) {
public EnragedRevolutionary(final EnragedRevolutionary card) {
public EnragedRevolutionary copy() {return new EnragedRevolutionary(this);
public class ExtractFromDarkness extends CardImpl {
public ExtractFromDarkness(UUID ownerId) {
public ExtractFromDarkness(final ExtractFromDarkness card) {
public ExtractFromDarkness copy() {return new ExtractFromDarkness(this);
class ExtractFromDarknessMillEffect extends OneShotEffect {
ExtractFromDarknessMillEffect() {
ExtractFromDarknessMillEffect(final ExtractFromDarknessMillEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ExtractFromDarknessMillEffect copy() {return new ExtractFromDarknessMillEffect(this);
class ExtractFromDarknessReturnFromGraveyardToBattlefieldEffect extends OneShotEffect {
public ExtractFromDarknessReturnFromGraveyardToBattlefieldEffect() {
public ExtractFromDarknessReturnFromGraveyardToBattlefieldEffect(final ExtractFromDarknessReturnFromGraveyardToBattlefieldEffect effect) {
public ExtractFromDarknessReturnFromGraveyardToBattlefieldEffect copy() {return new ExtractFromDarknessReturnFromGraveyardToBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(game.getCard(target.getFirstTarget()), Zone.BATTLEFIELD, source, game);return true;return false;
public class Flamewright extends CardImpl {
public Flamewright(UUID ownerId) {
public Flamewright(final Flamewright card) {
public Flamewright copy() {return new Flamewright(this);
class ConstructToken extends Token {
public ConstructToken() {
public ConstructToken(String setCode) {
public class FlowstoneBlade extends CardImpl {
public FlowstoneBlade(UUID ownerId) {
public FlowstoneBlade(final FlowstoneBlade card) {
public FlowstoneBlade copy() {return new FlowstoneBlade(this);
public class GrenzoDungeonWarden extends CardImpl {
public GrenzoDungeonWarden(UUID ownerId) {
public GrenzoDungeonWarden(final GrenzoDungeonWarden card) {
public GrenzoDungeonWarden copy() {return new GrenzoDungeonWarden(this);
class GrenzoDungeonWardenEffect extends OneShotEffect {
GrenzoDungeonWardenEffect() {
GrenzoDungeonWardenEffect(final GrenzoDungeonWardenEffect effect) {
public GrenzoDungeonWardenEffect copy() {return new GrenzoDungeonWardenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ManaGeyser extends CardImpl {
public ManaGeyser(UUID ownerId) {
public ManaGeyser(final ManaGeyser card) {
public ManaGeyser copy() {return new ManaGeyser(this);
public class MarchesasEmissary extends CardImpl {
public MarchesasEmissary(UUID ownerId) {
public MarchesasEmissary(final MarchesasEmissary card) {
public MarchesasEmissary copy() {return new MarchesasEmissary(this);
public class MarchesasInfiltrator extends CardImpl {
public MarchesasInfiltrator(UUID ownerId) {
public MarchesasInfiltrator(final MarchesasInfiltrator card) {
public MarchesasInfiltrator copy() {return new MarchesasInfiltrator(this);
public class MarchesasSmuggler extends CardImpl {
public MarchesasSmuggler(UUID ownerId) {
public MarchesasSmuggler(final MarchesasSmuggler card) {
public MarchesasSmuggler copy() {return new MarchesasSmuggler(this);
public class MuzzioVisionaryArchitect extends CardImpl {
public MuzzioVisionaryArchitect(UUID ownerId) {
public MuzzioVisionaryArchitect(final MuzzioVisionaryArchitect card) {
public MuzzioVisionaryArchitect copy() {return new MuzzioVisionaryArchitect(this);
class MuzzioVisionaryArchitectEffect extends OneShotEffect {
public MuzzioVisionaryArchitectEffect() {
public MuzzioVisionaryArchitectEffect(final MuzzioVisionaryArchitectEffect effect) {
public MuzzioVisionaryArchitectEffect copy() {return new MuzzioVisionaryArchitectEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class PowerOfFire extends CardImpl {
public PowerOfFire(UUID ownerId) {
public PowerOfFire(final PowerOfFire card) {
public PowerOfFire copy() {return new PowerOfFire(this);
public class PredatorsHowl extends CardImpl {
public PredatorsHowl(UUID ownerId) {
public PredatorsHowl(final PredatorsHowl card) {
public PredatorsHowl copy() {return new PredatorsHowl(this);
public class RealmSeekers extends CardImpl {
public RealmSeekers(UUID ownerId) {
public RealmSeekers(final RealmSeekers card) {
public RealmSeekers copy() {return new RealmSeekers(this);
public class RousingOfSouls extends CardImpl {
public RousingOfSouls(UUID ownerId) {
public RousingOfSouls(final RousingOfSouls card) {
public RousingOfSouls copy() {return new RousingOfSouls(this);
class RousingOfSoulsEffect extends OneShotEffect {
public RousingOfSoulsEffect() {
public RousingOfSoulsEffect(final RousingOfSoulsEffect effect) {
public RousingOfSoulsEffect copy() {return new RousingOfSoulsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Rout extends CardImpl {
public Rout(UUID ownerId) {
public Rout(final Rout card) {
public Rout copy() {return new Rout(this);
public class ScreamingSeahawk extends CardImpl {
public ScreamingSeahawk(UUID ownerId) {
public ScreamingSeahawk(final ScreamingSeahawk card) {
public ScreamingSeahawk copy() {return new ScreamingSeahawk(this);
public class SelvalasCharge extends CardImpl {
public SelvalasCharge(UUID ownerId) {
public SelvalasCharge(final SelvalasCharge card) {
public SelvalasCharge copy() {return new SelvalasCharge(this);
class SelvalasChargeEffect extends OneShotEffect {
public SelvalasChargeEffect() {
public SelvalasChargeEffect(final SelvalasChargeEffect effect) {
public SelvalasChargeEffect copy() {return new SelvalasChargeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new SelvalasEnforcer(this);return new SelvalasEnforcerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SplitDecision extends CardImpl {
public SplitDecision(UUID ownerId) {
public SplitDecision(final SplitDecision card) {
public SplitDecision copy() {return new SplitDecision(this);
class SplitDecisionEffect extends OneShotEffect {
SplitDecisionEffect() {
SplitDecisionEffect(final SplitDecisionEffect effect) {
public SplitDecisionEffect copy() {return new SplitDecisionEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(getTargetPointer().getFirst(game, source), source.getSourceId(), game);return new CopyTargetSpellEffect().apply(game, source);return false;
public class SquirrelNest extends CardImpl {
public SquirrelNest(UUID ownerId) {
public SquirrelNest(final SquirrelNest card) {
public SquirrelNest copy() {return new SquirrelNest(this);
public class StrongholdDiscipline extends CardImpl {
public StrongholdDiscipline(UUID ownerId) {
public StrongholdDiscipline(final StrongholdDiscipline card) {
public StrongholdDiscipline copy() {return new StrongholdDiscipline(this);
class StrongholdDisciplineEffect extends OneShotEffect {
StrongholdDisciplineEffect() {
StrongholdDisciplineEffect(final StrongholdDisciplineEffect effect) {
public StrongholdDisciplineEffect copy() {return new StrongholdDisciplineEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TravelersCloak extends CardImpl {
public TravelersCloak(UUID ownerId) {
public TravelersCloak(final TravelersCloak card) {
public TravelersCloak copy() {return new TravelersCloak(this);
public class TreasonousOgre extends CardImpl {
public TreasonousOgre(UUID ownerId) {
public TreasonousOgre(final TreasonousOgre card) {
public TreasonousOgre copy() {return new TreasonousOgre(this);
public class Victimize extends CardImpl {
public Victimize(UUID ownerId) {
public Victimize(final Victimize card) {
public Victimize copy() {return new Victimize(this);
class VictimizeEffect extends OneShotEffect {
VictimizeEffect() {this.staticText = "Choose two target creature cards in your graveyard. Sacrifice a creature. If you do, return the chosen cards to the battlefield tapped";
VictimizeEffect(final VictimizeEffect effect) {
public VictimizeEffect copy() {return new VictimizeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WakestoneGargoyle extends CardImpl {
public WakestoneGargoyle(UUID ownerId) {
public WakestoneGargoyle(final WakestoneGargoyle card) {
public WakestoneGargoyle copy() {return new WakestoneGargoyle(this);
public class WoodvineElemental extends CardImpl {
public WoodvineElemental(UUID ownerId) {
public WoodvineElemental(final WoodvineElemental card) {
public WoodvineElemental copy() {return new WoodvineElemental(this);
class WoodvineElementalEffect extends OneShotEffect {
public WoodvineElementalEffect() {
public WoodvineElementalEffect(final WoodvineElementalEffect effect) {
public WoodvineElementalEffect copy() {return new WoodvineElementalEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WrapInVigor extends CardImpl {
public WrapInVigor(UUID ownerId) {
public WrapInVigor(final WrapInVigor card) {
public WrapInVigor copy() {return new WrapInVigor(this);
public class AfflictedDeserter extends CardImpl {
public AfflictedDeserter(UUID ownerId) {
public class AlphaBrawl extends CardImpl {
public AlphaBrawl(UUID ownerId) {
public AlphaBrawl(final AlphaBrawl card) {
public AlphaBrawl copy() {return new AlphaBrawl(this);
class AlphaBrawlEffect extends OneShotEffect {
public AlphaBrawlEffect() {
public AlphaBrawlEffect(final AlphaBrawlEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AlphaBrawlEffect copy() {return new AlphaBrawlEffect(this);
public class AltarOfTheLost extends CardImpl {
public AltarOfTheLost(UUID ownerId) {
public AltarOfTheLost(final AltarOfTheLost card) {
public AltarOfTheLost copy() {return new AltarOfTheLost(this);
class AltarOfTheLostManaBuilder extends ConditionalManaBuilder {return new AltarOfTheLostConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast spells with flashback from a graveyard";
class AltarOfTheLostConditionalMana extends ConditionalMana {
public AltarOfTheLostConditionalMana(Mana mana) {
class AltarOfTheLostManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class ArchangelsLight extends CardImpl {
public ArchangelsLight(UUID ownerId) {
public ArchangelsLight(final ArchangelsLight card) {
public ArchangelsLight copy() {return new ArchangelsLight(this);
class ArchangelsLightEffect extends OneShotEffect {
public ArchangelsLightEffect() {
public ArchangelsLightEffect(final ArchangelsLightEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ArchangelsLightEffect copy() {return new ArchangelsLightEffect(this);
public class ArchdemonOfGreed extends CardImpl {
public ArchdemonOfGreed(UUID ownerId) {
public ArchdemonOfGreed(final ArchdemonOfGreed card) {
public ArchdemonOfGreed copy() {return new ArchdemonOfGreed(this);
class ArchdemonOfGreedEffect extends OneShotEffect {
public ArchdemonOfGreedEffect() {
public ArchdemonOfGreedEffect(final ArchdemonOfGreedEffect effect) {
public ArchdemonOfGreedEffect copy() {return new ArchdemonOfGreedEffect(this);
public boolean apply(Game game, Ability source) {return humanSacrifice.sacrifice(source.getSourceId(), game);return true;return false;
public class ArtfulDodge extends CardImpl {
public ArtfulDodge(UUID ownerId) {
public ArtfulDodge(final ArtfulDodge card) {
public ArtfulDodge copy() {return new ArtfulDodge(this);
public class AvacynsCollar extends CardImpl {
public AvacynsCollar(UUID ownerId) {
public AvacynsCollar(final AvacynsCollar card) {
public AvacynsCollar copy() {return new AvacynsCollar(this);
class AvacynsCollarTriggeredAbility extends TriggeredAbilityImpl {
public AvacynsCollarTriggeredAbility() {
public AvacynsCollarTriggeredAbility(final AvacynsCollarTriggeredAbility ability) {
public AvacynsCollarTriggeredAbility copy() {return new AvacynsCollarTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature dies, if it was a Human, put a 1/1 white Spirit creature token with flying onto the battlefield.";
public class BarTheDoor extends CardImpl {
public BarTheDoor(UUID ownerId) {
public BarTheDoor(final BarTheDoor card) {
public BarTheDoor copy() {return new BarTheDoor(this);
public class BeguilerOfWills extends CardImpl {
public BeguilerOfWills(UUID ownerId) {
public BeguilerOfWills(final BeguilerOfWills card) {
public BeguilerOfWills copy() {return new BeguilerOfWills(this);
class BeguilerOfWillsTarget extends TargetPermanent {
public BeguilerOfWillsTarget() {
public BeguilerOfWillsTarget(final BeguilerOfWillsTarget target) {
public BeguilerOfWillsTarget copy() {return new BeguilerOfWillsTarget(this);
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return super.canTarget(controllerId, id, source, game);return false;
public class BlackCat extends CardImpl {
public BlackCat(UUID ownerId) {
public BlackCat(final BlackCat card) {
public BlackCat copy() {return new BlackCat(this);
public class BloodFeud extends CardImpl {
public BloodFeud(UUID ownerId) {
public BloodFeud(final BloodFeud card) {
public BloodFeud copy() {return new BloodFeud(this);
class TargetOtherCreaturePermanent extends TargetCreaturePermanent {
public TargetOtherCreaturePermanent() {
public TargetOtherCreaturePermanent(final TargetOtherCreaturePermanent target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return false;return super.canTarget(controllerId, id, source, game);
public TargetOtherCreaturePermanent copy() {return new TargetOtherCreaturePermanent(this);
public class BoneToAsh extends CardImpl {
public BoneToAsh(UUID ownerId) {
public BoneToAsh(final BoneToAsh card) {
public BoneToAsh copy() {return new BoneToAsh(this);
public class BreakOfDay extends CardImpl {
public BreakOfDay(UUID ownerId) {
public BreakOfDay(final BreakOfDay card) {
public BreakOfDay copy() {return new BreakOfDay(this);
public class BriarpackAlpha extends CardImpl {
public BriarpackAlpha(UUID ownerId) {
public BriarpackAlpha(final BriarpackAlpha card) {
public BriarpackAlpha copy() {return new BriarpackAlpha(this);
public class CallToTheKindred extends CardImpl {
public CallToTheKindred(UUID ownerId) {
public CallToTheKindred(final CallToTheKindred card) {
public CallToTheKindred copy() {return new CallToTheKindred(this);
class CallToTheKindredEffect extends OneShotEffect {
public CallToTheKindredEffect() {
public CallToTheKindredEffect(final CallToTheKindredEffect effect) {
public CallToTheKindredEffect copy() {return new CallToTheKindredEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class ChaliceOfDeath extends CardImpl {
public ChaliceOfDeath(UUID ownerId) {
public ChaliceOfDeath(final ChaliceOfDeath card) {
public ChaliceOfDeath copy() {return new ChaliceOfDeath(this);return new ChaliceOfLife(this);
public boolean apply(Game game, Ability source) {return false;return new ChaliceOfLifeEffect(this);return new ChantOfTheSkifsang(this);
public class ChillOfForeboding extends CardImpl {
public ChillOfForeboding(UUID ownerId) {
public ChillOfForeboding(final ChillOfForeboding card) {
public ChillOfForeboding copy() {return new ChillOfForeboding(this);
class ChillOfForebodingEffect extends OneShotEffect {
public ChillOfForebodingEffect() {
public ChillOfForebodingEffect(final ChillOfForebodingEffect effect) {
public ChillOfForebodingEffect copy() {return new ChillOfForebodingEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ChosenOfMarkov extends CardImpl {
public ChosenOfMarkov(UUID ownerId) {
public ChosenOfMarkov(final ChosenOfMarkov card) {
public ChosenOfMarkov copy() {return new ChosenOfMarkov(this);
public class ClingingMists extends CardImpl {
public ClingingMists(UUID ownerId) {
public ClingingMists(final ClingingMists card) {
public ClingingMists copy() {return new ClingingMists(this);
class ClingingMistsEffect extends OneShotEffect {
public ClingingMistsEffect() {
public ClingingMistsEffect(final ClingingMistsEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ClingingMistsEffect copy() {return new ClingingMistsEffect(this);
public class Counterlash extends CardImpl {
public Counterlash(UUID ownerId) {
public Counterlash(final Counterlash card) {
public Counterlash copy() {return new Counterlash(this);
class CounterlashEffect extends OneShotEffect {
public CounterlashEffect() {
public CounterlashEffect(final CounterlashEffect effect) {
public CounterlashEffect copy() {return new CounterlashEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CrushingVines extends CardImpl {
public CrushingVines(UUID ownerId) {
public CrushingVines(final CrushingVines card) {
public CrushingVines copy() {return new CrushingVines(this);
public class CurseOfBloodletting extends CardImpl {
public CurseOfBloodletting(UUID ownerId) {
public CurseOfBloodletting(final CurseOfBloodletting card) {
public CurseOfBloodletting copy() {return new CurseOfBloodletting(this);
class CurseOfBloodlettingEffect extends ReplacementEffectImpl {
public CurseOfBloodlettingEffect() {
public CurseOfBloodlettingEffect(final CurseOfBloodlettingEffect effect) {
public CurseOfBloodlettingEffect copy() {return new CurseOfBloodlettingEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_PLAYER);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class CurseOfEchoes extends CardImpl {
public CurseOfEchoes(UUID ownerId) {
public CurseOfEchoes(final CurseOfEchoes card) {
public CurseOfEchoes copy() {return new CurseOfEchoes(this);
class CurseOfEchoesCopyTriggeredAbility extends TriggeredAbilityImpl {
public CurseOfEchoesCopyTriggeredAbility() {
public CurseOfEchoesCopyTriggeredAbility(final CurseOfEchoesCopyTriggeredAbility ability) {
public CurseOfEchoesCopyTriggeredAbility copy() {return new CurseOfEchoesCopyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever enchanted player casts an instant or sorcery spell, each other player may copy that spell and may choose new targets for the copy he or she controls.";
class CurseOfEchoesEffect extends OneShotEffect {
public CurseOfEchoesEffect() {
public CurseOfEchoesEffect(final CurseOfEchoesEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CurseOfEchoesEffect copy() {return new CurseOfEchoesEffect(this);
public String getText(Mode mode) {return sb.toString();
public class CurseOfExhaustion extends CardImpl {
public CurseOfExhaustion(UUID ownerId) {
public CurseOfExhaustion(final CurseOfExhaustion card) {
public CurseOfExhaustion copy() {return new CurseOfExhaustion(this);
public CurseOfExhaustionEffect() {
public CurseOfExhaustionEffect(final CurseOfExhaustionEffect effect) {
public CurseOfExhaustionEffect copy() {return new CurseOfExhaustionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;return new CurseOfMisfortunes(this);
public boolean apply(Game game, Ability source) {return card.putOntoBattlefield(game, Zone.LIBRARY, source.getSourceId(), source.getControllerId());return false;return new CurseOfMisfortunesEffect(this);
public class CurseOfThirst extends CardImpl {
public CurseOfThirst(UUID ownerId) {
public CurseOfThirst(final CurseOfThirst card) {
public CurseOfThirst copy() {return new CurseOfThirst(this);
class CurseOfThirstAbility extends TriggeredAbilityImpl {
public CurseOfThirstAbility() {
public CurseOfThirstAbility(final CurseOfThirstAbility ability) {
public CurseOfThirstAbility copy() {return new CurseOfThirstAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of enchanted player's upkeep, Curse of Thirst deals damage to that player equal to the number of Curses attached to him or her.";
class CursesAttachedCount implements DynamicValue {
public CursesAttachedCount() {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count;
public DynamicValue copy() {return new CursesAttachedCount();
public String toString() {return "";
public String getMessage() {return "number of Curses attached to him or her";
public class DawntreaderElk extends CardImpl {
public DawntreaderElk(UUID ownerId) {
public DawntreaderElk(final DawntreaderElk card) {
public DawntreaderElk copy() {return new DawntreaderElk(this);
public class DeadlyAllure extends CardImpl {
public DeadlyAllure(UUID ownerId) {
public DeadlyAllure(final DeadlyAllure card) {
public DeadlyAllure copy() {return new DeadlyAllure(this);
public class DeathsCaress extends CardImpl {
public DeathsCaress(UUID ownerId) {
public DeathsCaress(final DeathsCaress card) {
public DeathsCaress copy() {return new DeathsCaress(this);
class DeathsCaressEffect extends OneShotEffect {
public DeathsCaressEffect() {
public DeathsCaressEffect(final DeathsCaressEffect effect) {
public DeathsCaressEffect copy() {return new DeathsCaressEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DerangedOutcast extends CardImpl {
public DerangedOutcast(UUID ownerId) {
public DerangedOutcast(final DerangedOutcast card) {
public DerangedOutcast copy() {return new DerangedOutcast(this);
public class DrogskolReaver extends CardImpl {
public DrogskolReaver(UUID ownerId) {
public DrogskolReaver(final DrogskolReaver card) {
public DrogskolReaver copy() {return new DrogskolReaver(this);
class DrogskolReaverAbility extends TriggeredAbilityImpl {
public DrogskolReaverAbility() {
public DrogskolReaverAbility(final DrogskolReaverAbility ability) {
public DrogskolReaverAbility copy() {return new DrogskolReaverAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.GAINED_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(controllerId);
public String getRule() {return "Whenever you gain life, draw a card.";
public class DungeonGeists extends CardImpl {
public DungeonGeists(UUID ownerId) {
public DungeonGeists(final DungeonGeists card) {
public DungeonGeists copy() {return new DungeonGeists(this);
public DungeonGeistsEffect() {
public DungeonGeistsEffect(final DungeonGeistsEffect effect) {
public DungeonGeistsEffect copy() {return new DungeonGeistsEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.UNTAP || event.getType() == GameEvent.EventType.ZONE_CHANGE || event.getType() == GameEvent.EventType.LOST_CONTROL;
public boolean applies(GameEvent event, Ability source, Game game) {return false;return false;return targetCreature.getControllerId().equals(game.getActivePlayerId());return false;return false;return false;
class DungeonGeistsWatcher extends Watcher {
DungeonGeistsWatcher () {
DungeonGeistsWatcher(DungeonGeistsWatcher watcher) {
public void watch(GameEvent event, Game game) {return;
public void reset() {
public DungeonGeistsWatcher copy() {return new DungeonGeistsWatcher(this);
public class ElbrusTheBindingBlade extends CardImpl {
public ElbrusTheBindingBlade(UUID ownerId) {
public ElbrusTheBindingBlade(final ElbrusTheBindingBlade card) {
public ElbrusTheBindingBlade copy() {return new ElbrusTheBindingBlade(this);
class ElbrusTheBindingBladeEffect extends OneShotEffect {
public ElbrusTheBindingBladeEffect() {
public ElbrusTheBindingBladeEffect(final ElbrusTheBindingBladeEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public ElbrusTheBindingBladeEffect copy() {return new ElbrusTheBindingBladeEffect(this);
public class ElgaudInquisitor extends CardImpl {
public ElgaudInquisitor(UUID ownerId) {
public ElgaudInquisitor(final ElgaudInquisitor card) {
public ElgaudInquisitor copy() {return new ElgaudInquisitor(this);
public class ErdwalRipper extends CardImpl {
public ErdwalRipper(UUID ownerId) {
public ErdwalRipper(final ErdwalRipper card) {
public ErdwalRipper copy() {return new ErdwalRipper(this);
public class ExecutionersHood extends CardImpl {
public ExecutionersHood(UUID ownerId) {
public ExecutionersHood(final ExecutionersHood card) {
public ExecutionersHood copy() {return new ExecutionersHood(this);
public class FaithlessLooting extends CardImpl {
public FaithlessLooting(UUID ownerId) {
public FaithlessLooting(final FaithlessLooting card) {
public FaithlessLooting copy() {return new FaithlessLooting(this);
public class FaithsShield extends CardImpl {
public FaithsShield(UUID ownerId) {
public FaithsShield(final FaithsShield card) {
public FaithsShield copy() {return new FaithsShield(this);
class FaithsShieldEffect extends OneShotEffect {
public FaithsShieldEffect() {
public FaithsShieldEffect(final FaithsShieldEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public FaithsShieldEffect copy() {return new FaithsShieldEffect(this);
public class FalkenrathAristocrat extends CardImpl {
public FalkenrathAristocrat(UUID ownerId) {
public FalkenrathAristocrat(final FalkenrathAristocrat card) {
public FalkenrathAristocrat copy() {return new FalkenrathAristocrat(this);
class FalkenrathAristocratEffect extends OneShotEffect {
public FalkenrathAristocratEffect() {
public FalkenrathAristocratEffect(final FalkenrathAristocratEffect effect) {
public FalkenrathAristocratEffect copy() {return new FalkenrathAristocratEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;
public class FalkenrathTorturer extends CardImpl {
public FalkenrathTorturer(UUID ownerId) {
public FalkenrathTorturer(final FalkenrathTorturer card) {
public FalkenrathTorturer copy() {return new FalkenrathTorturer(this);
class FalkenrathTorturerEffect extends OneShotEffect {
public FalkenrathTorturerEffect() {
public FalkenrathTorturerEffect(final FalkenrathTorturerEffect effect) {
public FalkenrathTorturerEffect copy() {return new FalkenrathTorturerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FarbogBoneflinger extends CardImpl {
public FarbogBoneflinger(UUID ownerId) {
public FarbogBoneflinger(final FarbogBoneflinger card) {
public FarbogBoneflinger copy() {return new FarbogBoneflinger(this);
public class FavorOfTheWoods extends CardImpl {
public FavorOfTheWoods(UUID ownerId) {
public FavorOfTheWoods(final FavorOfTheWoods card) {
public FavorOfTheWoods copy() {return new FavorOfTheWoods(this);
public class FeedThePack extends CardImpl {
public FeedThePack(UUID ownerId) {
public FeedThePack(final FeedThePack card) {
public FeedThePack copy() {return new FeedThePack(this);
class FeedThePackEffect extends OneShotEffect {
public FeedThePackEffect() {
public FeedThePackEffect(final FeedThePackEffect effect) {
public FeedThePackEffect copy() {return new FeedThePackEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new FiendOfTheShadows(this);
public boolean apply(Game game, Ability source) {return true;return new FiendOfTheShadowsEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class FiresOfUndeath extends CardImpl {
public FiresOfUndeath(UUID ownerId) {
public FiresOfUndeath(final FiresOfUndeath card) {
public FiresOfUndeath copy() {return new FiresOfUndeath(this);
public class FlayerOfTheHatebound extends CardImpl {
public FlayerOfTheHatebound(UUID ownerId) {
public FlayerOfTheHatebound(final FlayerOfTheHatebound card) {
public FlayerOfTheHatebound copy() {return new FlayerOfTheHatebound(this);
class FlayerTriggeredAbility extends TriggeredAbilityImpl {
public FlayerTriggeredAbility() {
public FlayerTriggeredAbility(FlayerTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever Flayer of the Hatebound or another creature enters the battlefield from your graveyard, that creature deals damage equal to its power to target creature or player.";
public FlayerTriggeredAbility copy() {return new FlayerTriggeredAbility(this);
class FlayerEffect extends OneShotEffect {
public FlayerEffect() {
public FlayerEffect(final FlayerEffect effect) {
public FlayerEffect copy() {return new FlayerEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class ForgeDevil extends CardImpl {
public ForgeDevil(UUID ownerId) {
public ForgeDevil(final ForgeDevil card) {
public ForgeDevil copy() {return new ForgeDevil(this);
public class GatherTheTownsfolk extends CardImpl {
public GatherTheTownsfolk(UUID ownerId) {
public GatherTheTownsfolk(final GatherTheTownsfolk card) {
public GatherTheTownsfolk copy() {return new GatherTheTownsfolk(this);
public class GeralfsMindcrusher extends CardImpl {
public GeralfsMindcrusher(UUID ownerId) {
public GeralfsMindcrusher(final GeralfsMindcrusher card) {
public GeralfsMindcrusher copy() {return new GeralfsMindcrusher(this);
public class GhastlyHaunting extends CardImpl {
public GhastlyHaunting(UUID ownerId) {
public GhastlyHaunting(final GhastlyHaunting card) {
public GhastlyHaunting copy() {return new GhastlyHaunting(this);
public class Ghoultree extends CardImpl {
public Ghoultree(UUID ownerId) {
public Ghoultree(final Ghoultree card) {
public Ghoultree copy() {return new Ghoultree(this);
GhoultreeCostReductionEffect() {
GhoultreeCostReductionEffect(GhoultreeCostReductionEffect effect) {return true;return false;return game.getCard(abilityToModify.getSourceId()) != null;return false;
public GhoultreeCostReductionEffect copy() {return new GhoultreeCostReductionEffect(this);
public class GrafdiggersCage extends CardImpl {
public GrafdiggersCage(UUID ownerId) {
public GrafdiggersCage(final GrafdiggersCage card) {
public GrafdiggersCage copy() {return new GrafdiggersCage(this);
public GrafdiggersCageEffect() {
public GrafdiggersCageEffect(final GrafdiggersCageEffect effect) {
public GrafdiggersCageEffect copy() {return new GrafdiggersCageEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return EventType.ZONE_CHANGE.equals(event.getType());
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public GrafdiggersCageEffect2() {
public GrafdiggersCageEffect2(final GrafdiggersCageEffect2 effect) {
public GrafdiggersCageEffect2 copy() {return new GrafdiggersCageEffect2(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class Gravecrawler extends CardImpl {
public Gravecrawler(UUID ownerId) {
public Gravecrawler(final Gravecrawler card) {
public Gravecrawler copy() {return new Gravecrawler(this);
class GravecrawlerPlayEffect extends AsThoughEffectImpl {
public GravecrawlerPlayEffect() {
public GravecrawlerPlayEffect(final GravecrawlerPlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public GravecrawlerPlayEffect copy() {return new GravecrawlerPlayEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class Gravepurge extends CardImpl {
public Gravepurge(UUID ownerId) {
public Gravepurge(final Gravepurge card) {
public Gravepurge copy() {return new Gravepurge(this);
public class GravetillerWurm extends CardImpl {
public GravetillerWurm(UUID ownerId) {
public GravetillerWurm(final GravetillerWurm card) {
public GravetillerWurm copy() {return new GravetillerWurm(this);
public class GrimBackwoods extends CardImpl {
public GrimBackwoods(UUID ownerId) {
public GrimBackwoods(final GrimBackwoods card) {
public GrimBackwoods copy() {return new GrimBackwoods(this);
public class GrimFlowering extends CardImpl {
public GrimFlowering(UUID ownerId) {
public GrimFlowering(final GrimFlowering card) {
public GrimFlowering copy() {return new GrimFlowering(this);
public class Griptide extends CardImpl {
public Griptide(UUID ownerId) {
public Griptide(final Griptide card) {
public Griptide copy() {return new Griptide(this);
public class GruesomeDiscovery extends CardImpl {
public GruesomeDiscovery(UUID ownerId) {
public GruesomeDiscovery(final GruesomeDiscovery card) {
public GruesomeDiscovery copy() {return new GruesomeDiscovery(this);
class GruesomeDiscoveryEffect extends OneShotEffect {
public GruesomeDiscoveryEffect() {
public GruesomeDiscoveryEffect(final GruesomeDiscoveryEffect effect) {
public GruesomeDiscoveryEffect copy() {return new GruesomeDiscoveryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HarrowingJourney extends CardImpl {
public HarrowingJourney(UUID ownerId) {
public HarrowingJourney(final HarrowingJourney card) {
public HarrowingJourney copy() {return new HarrowingJourney(this);
public class HauntedFengraf extends CardImpl {
public HauntedFengraf(UUID ownerId) {
public HauntedFengraf(final HauntedFengraf card) {
public HauntedFengraf copy() {return new HauntedFengraf(this);
class HauntedFengrafEffect extends OneShotEffect {
public HauntedFengrafEffect() {
public HauntedFengrafEffect(final HauntedFengrafEffect effect) {
public HauntedFengrafEffect copy() {return new HauntedFengrafEffect(this);
public boolean apply(Game game, Ability source) {game.informPlayers(card.getName() + " returned to the hand of " + player.getLogName());return true;return false;
public class HavengulLich extends CardImpl {
public HavengulLich(UUID ownerId) {
public HavengulLich(final HavengulLich card) {
public HavengulLich copy() {return new HavengulLich(this);
class HavengulLichPlayEffect extends AsThoughEffectImpl {
public HavengulLichPlayEffect() {
public HavengulLichPlayEffect(final HavengulLichPlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public HavengulLichPlayEffect copy() {return new HavengulLichPlayEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return targetId.equals(objectId)return false;
class HavengulLichPlayedEffect extends OneShotEffect {
public HavengulLichPlayedEffect() {
public HavengulLichPlayedEffect(final HavengulLichPlayedEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public HavengulLichPlayedEffect copy() {return new HavengulLichPlayedEffect(this);
class HavengulLichDelayedTriggeredAbility extends DelayedTriggeredAbility {
public HavengulLichDelayedTriggeredAbility(UUID cardId) {
public HavengulLichDelayedTriggeredAbility(HavengulLichDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId().equals(cardId);
public HavengulLichDelayedTriggeredAbility copy() {return new HavengulLichDelayedTriggeredAbility(this);
public String getRule() {return "When you cast that card this turn, {this} gains all activated abilities of that card until end of turn.";
class HavengulLichEffect extends ContinuousEffectImpl {
public HavengulLichEffect(UUID cardId) {
public HavengulLichEffect(final HavengulLichEffect effect) {
public HavengulLichEffect copy() {return new HavengulLichEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class HavengulRunebinder extends CardImpl {
public HavengulRunebinder(UUID ownerId) {
public HavengulRunebinder(final HavengulRunebinder card) {
public HavengulRunebinder copy() {return new HavengulRunebinder(this);
public class HeadlessSkaab extends CardImpl {
public HeadlessSkaab(UUID ownerId) {
public HeadlessSkaab(final HeadlessSkaab card) {
public HeadlessSkaab copy() {return new HeadlessSkaab(this);
public class HeavyMattock extends CardImpl {
public HeavyMattock(UUID ownerId) {
public HeavyMattock(final HeavyMattock card) {
public HeavyMattock copy() {return new HeavyMattock(this);
public class HecklingFiends extends CardImpl {
public HecklingFiends(UUID ownerId) {
public HecklingFiends(final HecklingFiends card) {
public HecklingFiends copy() {return new HecklingFiends(this);
public class HighbornGhoul extends CardImpl {
public HighbornGhoul(UUID ownerId) {
public HighbornGhoul(final HighbornGhoul card) {
public HighbornGhoul copy() {return new HighbornGhoul(this);
public class HinterlandHermit extends CardImpl {
public HinterlandHermit(UUID ownerId) {
public HinterlandHermit(final HinterlandHermit card) {
public HinterlandHermit copy() {return new HinterlandHermit(this);
public class HinterlandScourge extends CardImpl {
public HinterlandScourge(UUID ownerId) {
public HinterlandScourge(final HinterlandScourge card) {
public HinterlandScourge copy() {return new HinterlandScourge(this);
public class HollowhengeBeast extends CardImpl {
public HollowhengeBeast(UUID ownerId) {
public HollowhengeBeast(final HollowhengeBeast card) {
public HollowhengeBeast copy() {return new HollowhengeBeast(this);
public class HollowhengeSpirit extends CardImpl {
public HollowhengeSpirit(UUID ownerId) {
public HollowhengeSpirit(final HollowhengeSpirit card) {
public HollowhengeSpirit copy() {return new HollowhengeSpirit(this);
public class HungerOfTheHowlpack extends CardImpl {
public HungerOfTheHowlpack(UUID ownerId) {
public HungerOfTheHowlpack(final HungerOfTheHowlpack card) {
public HungerOfTheHowlpack copy() {return new HungerOfTheHowlpack(this);
public class HuntmasterOfTheFells extends CardImpl {
public HuntmasterOfTheFells(UUID ownerId) {
public HuntmasterOfTheFells(final HuntmasterOfTheFells card) {
public HuntmasterOfTheFells copy() {return new HuntmasterOfTheFells(this);
class HuntmasterOfTheFellsAbility extends TriggeredAbilityImpl {
public HuntmasterOfTheFellsAbility() {
public HuntmasterOfTheFellsAbility(final HuntmasterOfTheFellsAbility ability) {
public HuntmasterOfTheFellsAbility copy() {return new HuntmasterOfTheFellsAbility(this);
public boolean isInUseableZone(Game game, MageObject source, GameEvent event) {return true;return super.isInUseableZone(game, source, event);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TRANSFORMED || event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "Whenever this creature enters the battlefield or transforms into {this}, put a 2/2 green Wolf creature token onto the battlefield and you gain 2 life.";
class RavagerOfTheFellsAbility extends TriggeredAbilityImpl {
public RavagerOfTheFellsAbility() {
public RavagerOfTheFellsAbility(final RavagerOfTheFellsAbility ability) {
public RavagerOfTheFellsAbility copy() {return new RavagerOfTheFellsAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TRANSFORMED;
public boolean isInUseableZone(Game game, MageObject source, GameEvent event) {return true;return super.isInUseableZone(game, source, event);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever this creature transforms into Ravager of the Fells, it deals 2 damage to target opponent and 2 damage to up to one target creature that player controls.";
class RavagerOfTheFellsEffect extends OneShotEffect {
public RavagerOfTheFellsEffect() {
public RavagerOfTheFellsEffect(final RavagerOfTheFellsEffect effect) {
public RavagerOfTheFellsEffect copy() {return new RavagerOfTheFellsEffect(this);
public boolean apply(Game game, Ability source) {return true;
class RavagerOfTheFellsTarget extends TargetPermanent {
public RavagerOfTheFellsTarget() {
public RavagerOfTheFellsTarget(final RavagerOfTheFellsTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return super.canTarget(id, source, game);return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public RavagerOfTheFellsTarget copy() {return new RavagerOfTheFellsTarget(this);
public class Immerwolf extends CardImpl {
public Immerwolf(UUID ownerId) {
public Immerwolf(final Immerwolf card) {
public Immerwolf copy() {return new Immerwolf(this);
public ImmerwolfEffect() {
public ImmerwolfEffect(final ImmerwolfEffect effect) {
public ImmerwolfEffect copy() {return new ImmerwolfEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.TRANSFORM;
public boolean applies(GameEvent event, Ability source, Game game) {return permanent != null &&
public class IncreasingAmbition extends CardImpl {
public IncreasingAmbition(UUID ownerId) {
public IncreasingAmbition(final IncreasingAmbition card) {
public IncreasingAmbition copy() {return new IncreasingAmbition(this);
class IncreasingAmbitionEffect extends SearchEffect {
public IncreasingAmbitionEffect() {
public IncreasingAmbitionEffect(final IncreasingAmbitionEffect effect) {
public IncreasingAmbitionEffect copy() {return new IncreasingAmbitionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class IncreasingConfusion extends CardImpl {
public IncreasingConfusion(UUID ownerId) {
public IncreasingConfusion(final IncreasingConfusion card) {
public IncreasingConfusion copy() {return new IncreasingConfusion(this);
class IncreasingConfusionEffect extends OneShotEffect {
public IncreasingConfusionEffect() {
public IncreasingConfusionEffect(final IncreasingConfusionEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public IncreasingConfusionEffect copy() {return new IncreasingConfusionEffect(this);
public class IncreasingDevotion extends CardImpl {
public IncreasingDevotion(UUID ownerId) {
public IncreasingDevotion(final IncreasingDevotion card) {
public IncreasingDevotion copy() {return new IncreasingDevotion(this);
class IncreasingDevotionEffect extends OneShotEffect {
public IncreasingDevotionEffect() {
public IncreasingDevotionEffect(final IncreasingDevotionEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public IncreasingDevotionEffect copy() {return new IncreasingDevotionEffect(this);
public class IncreasingSavagery extends CardImpl {
public IncreasingSavagery(UUID ownerId) {
public IncreasingSavagery(final IncreasingSavagery card) {
public IncreasingSavagery copy() {return new IncreasingSavagery(this);
class IncreasingSavageryEffect extends OneShotEffect {
public IncreasingSavageryEffect() {
public IncreasingSavageryEffect(final IncreasingSavageryEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public IncreasingSavageryEffect copy() {return new IncreasingSavageryEffect(this);
public class IncreasingVengeance extends CardImpl {
public IncreasingVengeance(UUID ownerId) {
public IncreasingVengeance(final IncreasingVengeance card) {
public IncreasingVengeance copy() {return new IncreasingVengeance(this);
class IncreasingVengeanceEffect extends OneShotEffect {
public IncreasingVengeanceEffect() {
public IncreasingVengeanceEffect(final IncreasingVengeanceEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public IncreasingVengeanceEffect copy() {return new IncreasingVengeanceEffect(this);
public class JarOfEyeballs extends CardImpl {
public JarOfEyeballs(UUID ownerId) {
public JarOfEyeballs(final JarOfEyeballs card) {
public JarOfEyeballs copy() {return new JarOfEyeballs(this);
class JarOfEyeballsTriggeredAbility extends TriggeredAbilityImpl {
public JarOfEyeballsTriggeredAbility() {
public JarOfEyeballsTriggeredAbility(final JarOfEyeballsTriggeredAbility ability) {
public JarOfEyeballsTriggeredAbility copy() {return new JarOfEyeballsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control dies, " + super.getRule();
class JarOfEyeballsCost extends CostImpl {
public JarOfEyeballsCost() {
public JarOfEyeballsCost(JarOfEyeballsCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return true;
public JarOfEyeballsCost copy() {return new JarOfEyeballsCost(this);
public int getRemovedCounters() {return this.removedCounters;
class JarOfEyeballsEffect extends OneShotEffect {
public JarOfEyeballsEffect() {
public JarOfEyeballsEffect(final JarOfEyeballsEffect effect) {
public JarOfEyeballsEffect copy() {return new JarOfEyeballsEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class KessigRecluse extends CardImpl {
public KessigRecluse(UUID ownerId) {
public KessigRecluse(final KessigRecluse card) {
public KessigRecluse copy() {return new KessigRecluse(this);
public class KrallenhordeKiller extends CardImpl {
public KrallenhordeKiller(UUID ownerId) {
public KrallenhordeKiller(final KrallenhordeKiller card) {
public KrallenhordeKiller copy() {return new KrallenhordeKiller(this);
public class LambholtElder extends CardImpl {
public LambholtElder(UUID ownerId) {
public LambholtElder(final LambholtElder card) {
public LambholtElder copy() {return new LambholtElder(this);
public class LingeringSouls extends CardImpl {
public LingeringSouls(UUID ownerId) {
public LingeringSouls(final LingeringSouls card) {
public LingeringSouls copy() {return new LingeringSouls(this);
public class MarkovBlademaster extends CardImpl {
public MarkovBlademaster(UUID ownerId) {
public MarkovBlademaster(final MarkovBlademaster card) {
public MarkovBlademaster copy() {return new MarkovBlademaster(this);
public class MarkovsServant extends CardImpl {
public MarkovsServant(UUID ownerId) {
public MarkovsServant(final MarkovsServant card) {
public MarkovsServant copy() {return new MarkovsServant(this);
public class MarkovWarlord extends CardImpl {
public MarkovWarlord(UUID ownerId) {
public MarkovWarlord(final MarkovWarlord card) {
public MarkovWarlord copy() {return new MarkovWarlord(this);
public class MidnightGuard extends CardImpl {
public MidnightGuard(UUID ownerId) {
public MidnightGuard(final MidnightGuard card) {
public MidnightGuard copy() {return new MidnightGuard(this);
public class MikaeusTheUnhallowed extends CardImpl {
public MikaeusTheUnhallowed(UUID ownerId) {
public MikaeusTheUnhallowed(final MikaeusTheUnhallowed card) {
public MikaeusTheUnhallowed copy() {return new MikaeusTheUnhallowed(this);
class MikaeusTheUnhallowedAbility extends TriggeredAbilityImpl {
public MikaeusTheUnhallowedAbility() {
public MikaeusTheUnhallowedAbility(final MikaeusTheUnhallowedAbility ability) {
public MikaeusTheUnhallowedAbility copy() {return new MikaeusTheUnhallowedAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Human deals damage to you, destroy it.";
public class MondronenShaman extends CardImpl {
public MondronenShaman(UUID ownerId) {
public MondronenShaman(final MondronenShaman card) {
public MondronenShaman copy() {return new MondronenShaman(this);
public class MoonscarredWerewolf extends CardImpl {
public MoonscarredWerewolf(UUID ownerId) {
public MoonscarredWerewolf(final MoonscarredWerewolf card) {
public MoonscarredWerewolf copy() {return new MoonscarredWerewolf(this);
public class MoonveilDragon extends CardImpl {
public MoonveilDragon(UUID ownerId) {
public MoonveilDragon(final MoonveilDragon card) {
public MoonveilDragon copy() {return new MoonveilDragon(this);
public class MysticRetrieval extends CardImpl {
public MysticRetrieval(UUID ownerId) {
public MysticRetrieval(final MysticRetrieval card) {
public MysticRetrieval copy() {return new MysticRetrieval(this);
public class NearheathStalker extends CardImpl {
public NearheathStalker(UUID ownerId) {
public NearheathStalker(final NearheathStalker card) {
public NearheathStalker copy() {return new NearheathStalker(this);
public class NephaliaSeakite extends CardImpl {
public NephaliaSeakite(UUID ownerId) {
public NephaliaSeakite(final NephaliaSeakite card) {
public NephaliaSeakite copy() {return new NephaliaSeakite(this);
public class NiblisOfTheBreath extends CardImpl {
public NiblisOfTheBreath(UUID ownerId) {
public NiblisOfTheBreath(final NiblisOfTheBreath card) {
public NiblisOfTheBreath copy() {return new NiblisOfTheBreath(this);
public class NiblisOfTheMist extends CardImpl {
public NiblisOfTheMist(UUID ownerId) {
public NiblisOfTheMist(final NiblisOfTheMist card) {
public NiblisOfTheMist copy() {return new NiblisOfTheMist(this);
public class NiblisOfTheUrn extends CardImpl {
public NiblisOfTheUrn(UUID ownerId) {
public NiblisOfTheUrn(final NiblisOfTheUrn card) {
public NiblisOfTheUrn copy() {return new NiblisOfTheUrn(this);
public class PredatorOoze extends CardImpl {
public PredatorOoze(UUID ownerId) {
public PredatorOoze(final PredatorOoze card) {
public PredatorOoze copy() {return new PredatorOoze(this);
public class PyreheartWolf extends CardImpl {
public PyreheartWolf(UUID ownerId) {
public PyreheartWolf(final PyreheartWolf card) {
public PyreheartWolf copy() {return new PyreheartWolf(this);
public class RavagerOfTheFells extends CardImpl {
public RavagerOfTheFells(UUID ownerId) {
public RavagerOfTheFells(final RavagerOfTheFells card) {
public RavagerOfTheFells copy() {return new RavagerOfTheFells(this);
public class RavenousDemon extends CardImpl {
public RavenousDemon(UUID ownerId) {
public RavenousDemon(final RavenousDemon card) {
public RavenousDemon copy() {return new RavenousDemon(this);
public class RelentlessSkaabs extends CardImpl {
public RelentlessSkaabs(UUID ownerId) {
public RelentlessSkaabs(final RelentlessSkaabs card) {
public RelentlessSkaabs copy() {return new RelentlessSkaabs(this);
public class RequiemAngel extends CardImpl {
public RequiemAngel(UUID ownerId) {
public RequiemAngel(final RequiemAngel card) {
public RequiemAngel copy() {return new RequiemAngel(this);
public class RussetWolves extends CardImpl {
public RussetWolves(UUID ownerId) {
public RussetWolves(final RussetWolves card) {
public RussetWolves copy() {return new RussetWolves(this);
public class SanctuaryCat extends CardImpl {
public SanctuaryCat(UUID ownerId) {
public SanctuaryCat(final SanctuaryCat card) {
public SanctuaryCat copy() {return new SanctuaryCat(this);
public class SavingGrasp extends CardImpl {
public SavingGrasp(UUID ownerId) {
public SavingGrasp(final SavingGrasp card) {
public SavingGrasp copy() {return new SavingGrasp(this);
public class ScorchTheFields extends CardImpl {
public ScorchTheFields(UUID ownerId) {
public ScorchTheFields(final ScorchTheFields card) {
public ScorchTheFields copy() {return new ScorchTheFields(this);
public class ScornedVillager extends CardImpl {
public ScornedVillager(UUID ownerId) {
public ScornedVillager(final ScornedVillager card) {
public ScornedVillager copy() {return new ScornedVillager(this);
public class ScreechingSkaab extends CardImpl {
public ScreechingSkaab(UUID ownerId) {
public ScreechingSkaab(final ScreechingSkaab card) {
public ScreechingSkaab copy() {return new ScreechingSkaab(this);
public class Seance extends CardImpl {
public Seance(UUID ownerId) {
public Seance(final Seance card) {
public Seance copy() {return new Seance(this);
class SeanceEffect extends OneShotEffect {
public SeanceEffect() {
public SeanceEffect(final SeanceEffect effect) {
public SeanceEffect copy() {return new SeanceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SecretsOfTheDead extends CardImpl {
public SecretsOfTheDead(UUID ownerId) {
public SecretsOfTheDead(final SecretsOfTheDead card) {
public SecretsOfTheDead copy() {return new SecretsOfTheDead(this);
class SpellZonePredicate implements Predicate<Spell> {
public SpellZonePredicate(Zone zone) {
public boolean apply(Spell input, Game game) {return input.getFromZone().match(zone);
public String toString() {return "SpellZone(" + zone + ')';
public class ShatteredPerception extends CardImpl {
public ShatteredPerception(UUID ownerId) {
public ShatteredPerception(final ShatteredPerception card) {
public ShatteredPerception copy() {return new ShatteredPerception(this);
class ShatteredPerceptionEffect extends OneShotEffect {
public ShatteredPerceptionEffect() {
public ShatteredPerceptionEffect(final ShatteredPerceptionEffect effect) {
public ShatteredPerceptionEffect copy() {return new ShatteredPerceptionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Shriekgeist extends CardImpl {
public Shriekgeist(UUID ownerId) {
public Shriekgeist(final Shriekgeist card) {
public Shriekgeist copy() {return new Shriekgeist(this);
class ShriekgeistTriggeredAbility extends TriggeredAbilityImpl {
public ShriekgeistTriggeredAbility() {
public ShriekgeistTriggeredAbility(final ShriekgeistTriggeredAbility ability) {
public ShriekgeistTriggeredAbility copy() {return new ShriekgeistTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, that player puts the top two cards of his or her library into his or her graveyard.";
public class SightlessGhoul extends CardImpl {
public SightlessGhoul(UUID ownerId) {
public SightlessGhoul(final SightlessGhoul card) {
public SightlessGhoul copy() {return new SightlessGhoul(this);return new SilverclawGriffin(this);
public class SilverpeltWerewolf extends CardImpl {
public SilverpeltWerewolf(UUID ownerId) {
public SilverpeltWerewolf(final SilverpeltWerewolf card) {
public SilverpeltWerewolf copy() {return new SilverpeltWerewolf(this);
public class SkillfulLunge extends CardImpl {
public SkillfulLunge(UUID ownerId) {
public SkillfulLunge(final SkillfulLunge card) {
public SkillfulLunge copy() {return new SkillfulLunge(this);
public class SkirsdagFlayer extends CardImpl {
public SkirsdagFlayer(UUID ownerId) {
public SkirsdagFlayer(final SkirsdagFlayer card) {
public SkirsdagFlayer copy() {return new SkirsdagFlayer(this);
public class SomberwaldDryad extends CardImpl {
public SomberwaldDryad(UUID ownerId) {
public SomberwaldDryad(final SomberwaldDryad card) {
public SomberwaldDryad copy() {return new SomberwaldDryad(this);return new SpitefulShadows(this);return new SpitefulShadowsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class StormboundGeist extends CardImpl {
public StormboundGeist(UUID ownerId) {
public StormboundGeist(final StormboundGeist card) {
public StormboundGeist copy() {return new StormboundGeist(this);
public class StranglerootGeist extends CardImpl {
public StranglerootGeist(UUID ownerId) {
public StranglerootGeist(final StranglerootGeist card) {
public StranglerootGeist copy() {return new StranglerootGeist(this);
public class StromkirkCaptain extends CardImpl {
public StromkirkCaptain(UUID ownerId) {
public StromkirkCaptain(final StromkirkCaptain card) {
public StromkirkCaptain copy() {return new StromkirkCaptain(this);
public class SuddenDisappearance extends CardImpl {
public SuddenDisappearance(UUID ownerId) {
public SuddenDisappearance(final SuddenDisappearance card) {
public SuddenDisappearance copy() {return new SuddenDisappearance(this);
class SuddenDisappearanceEffect extends OneShotEffect {
public SuddenDisappearanceEffect() {
public SuddenDisappearanceEffect(final SuddenDisappearanceEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SuddenDisappearanceEffect copy() {return new SuddenDisappearanceEffect(this);
public class TalonsOfFalkenrath extends CardImpl {
public TalonsOfFalkenrath(UUID ownerId) {
public TalonsOfFalkenrath(final TalonsOfFalkenrath card) {
public TalonsOfFalkenrath copy() {return new TalonsOfFalkenrath(this);
public class ThaliaGuardianOfThraben extends CardImpl {
public ThaliaGuardianOfThraben(UUID ownerId) {
public ThaliaGuardianOfThraben(final ThaliaGuardianOfThraben card) {
public ThaliaGuardianOfThraben copy() {return new ThaliaGuardianOfThraben(this);
ThaliaGuardianOfThrabenCostReductionEffect ( ) {
ThaliaGuardianOfThrabenCostReductionEffect(ThaliaGuardianOfThrabenCostReductionEffect effect) {return true;return true;return false;
public ThaliaGuardianOfThrabenCostReductionEffect copy() {return new ThaliaGuardianOfThrabenCostReductionEffect(this);
public class ThoughtScour extends CardImpl {
public ThoughtScour(UUID ownerId) {
public ThoughtScour(final ThoughtScour card) {
public ThoughtScour copy() {return new ThoughtScour(this);
public class ThrabenDoomsayer extends CardImpl {
public ThrabenDoomsayer(UUID ownerId) {
public ThrabenDoomsayer(final ThrabenDoomsayer card) {
public ThrabenDoomsayer copy() {return new ThrabenDoomsayer(this);
public class ThrabenHeretic extends CardImpl {
public ThrabenHeretic(UUID ownerId) {
public ThrabenHeretic(final ThrabenHeretic card) {
public ThrabenHeretic copy() {return new ThrabenHeretic(this);
public class TorchFiend extends CardImpl {
public TorchFiend(UUID ownerId) {
public TorchFiend(final TorchFiend card) {
public TorchFiend copy() {return new TorchFiend(this);
public class TovolarsMagehunter extends CardImpl {
public TovolarsMagehunter(UUID ownerId) {
public TovolarsMagehunter(final TovolarsMagehunter card) {
public TovolarsMagehunter copy() {return new TovolarsMagehunter(this);
class TovolarsMagehunterTriggeredAbility extends TriggeredAbilityImpl {
public TovolarsMagehunterTriggeredAbility() {
public TovolarsMagehunterTriggeredAbility(final TovolarsMagehunterTriggeredAbility ability) {
public TovolarsMagehunterTriggeredAbility copy() {return new TovolarsMagehunterTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent casts a spell, {this} deals 2 damage to that player.";
public class TowerGeist extends CardImpl {
public TowerGeist(UUID ownerId) {
public TowerGeist(final TowerGeist card) {
public TowerGeist copy() {return new TowerGeist(this);
public class TrackersInstincts extends CardImpl {
public TrackersInstincts(UUID ownerId) {
public TrackersInstincts(final TrackersInstincts card) {
public TrackersInstincts copy() {return new TrackersInstincts(this);
class TrackersInstinctsEffect extends OneShotEffect {
public TrackersInstinctsEffect() {
public TrackersInstinctsEffect(final TrackersInstinctsEffect effect) {
public TrackersInstinctsEffect copy() {return new TrackersInstinctsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TragicSlip extends CardImpl {
public TragicSlip(UUID ownerId) {
public TragicSlip(final TragicSlip card) {
public TragicSlip copy() {return new TragicSlip(this);
public class UlvenwaldBear extends CardImpl {
public UlvenwaldBear(UUID ownerId) {
public UlvenwaldBear(final UlvenwaldBear card) {
public UlvenwaldBear copy() {return new UlvenwaldBear(this);
public class UndyingEvil extends CardImpl {
public UndyingEvil(UUID ownerId) {
public UndyingEvil(final UndyingEvil card) {
public UndyingEvil copy() {return new UndyingEvil(this);
public class UnhallowedCathar extends CardImpl {
public UnhallowedCathar(UUID ownerId) {
public UnhallowedCathar(final UnhallowedCathar card) {
public UnhallowedCathar copy() {return new UnhallowedCathar(this);
public class VillageSurvivors extends CardImpl {
public VillageSurvivors(UUID ownerId) {
public VillageSurvivors(final VillageSurvivors card) {
public VillageSurvivors copy() {return new VillageSurvivors(this);
public class Vorapede extends CardImpl {
public Vorapede(UUID ownerId) {
public Vorapede(final Vorapede card) {
public Vorapede copy() {return new Vorapede(this);
public class Wakedancer extends CardImpl {
public Wakedancer(UUID ownerId) {
public Wakedancer(final Wakedancer card) {
public Wakedancer copy() {return new Wakedancer(this);
public class WardenOfTheWall extends CardImpl {
public WardenOfTheWall(UUID ownerId) {
public WardenOfTheWall(final WardenOfTheWall card) {
public WardenOfTheWall copy() {return new WardenOfTheWall(this);
class GargoyleToken extends Token {
public GargoyleToken() {
public class WerewolfRansacker extends CardImpl {
public WerewolfRansacker(UUID ownerId) {
public WerewolfRansacker(final WerewolfRansacker card) {
public WerewolfRansacker copy() {return new WerewolfRansacker(this);
class WerewolfRansackerAbility extends TriggeredAbilityImpl {
public WerewolfRansackerAbility() {
public WerewolfRansackerAbility(final WerewolfRansackerAbility ability) {
public WerewolfRansackerAbility copy() {return new WerewolfRansackerAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TRANSFORMED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return RULE_TEXT + '.';
class WerewolfRansackerEffect extends OneShotEffect {
public WerewolfRansackerEffect() {
public WerewolfRansackerEffect(final WerewolfRansackerEffect effect) {
public WerewolfRansackerEffect copy() {return new WerewolfRansackerEffect(this);
public boolean apply(Game game, Ability source) {return affectedTargets > 0;
public class WildHunger extends CardImpl {
public WildHunger(UUID ownerId) {
public WildHunger(final WildHunger card) {
public WildHunger copy() {return new WildHunger(this);
public class WithengarUnbound extends CardImpl {
public WithengarUnbound(UUID ownerId) {
public WithengarUnbound(final WithengarUnbound card) {
public WithengarUnbound copy() {return new WithengarUnbound(this);
class WithengarUnboundTriggeredAbility extends TriggeredAbilityImpl {
public WithengarUnboundTriggeredAbility() {
public WithengarUnboundTriggeredAbility(final WithengarUnboundTriggeredAbility ability) {
public WithengarUnboundTriggeredAbility copy() {return new WithengarUnboundTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LOST;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "Whenever a player loses the game, put thirteen +1/+1 counters on Withengar Unbound.";
public class WolfbittenCaptive extends CardImpl {
public WolfbittenCaptive(UUID ownerId) {
public WolfbittenCaptive(final WolfbittenCaptive card) {
public WolfbittenCaptive copy() {return new WolfbittenCaptive(this);
public class WolfhuntersQuiver extends CardImpl {
public WolfhuntersQuiver(UUID ownerId) {
public WolfhuntersQuiver(final WolfhuntersQuiver card) {
public WolfhuntersQuiver copy() {return new WolfhuntersQuiver(this);
public class WrackWithMadness extends CardImpl {
public WrackWithMadness(UUID ownerId) {
public WrackWithMadness(final WrackWithMadness card) {
public WrackWithMadness copy() {return new WrackWithMadness(this);
class WrackWithMadnessEffect extends OneShotEffect {
public WrackWithMadnessEffect() {
public WrackWithMadnessEffect(final WrackWithMadnessEffect effect) {
public WrackWithMadnessEffect copy() {return new WrackWithMadnessEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class YoungWolf extends CardImpl {
public YoungWolf(UUID ownerId) {
public YoungWolf(final YoungWolf card) {
public YoungWolf copy() {return new YoungWolf(this);
public class ZombieApocalypse extends CardImpl {
public ZombieApocalypse(UUID ownerId) {
public ZombieApocalypse(final ZombieApocalypse card) {
public ZombieApocalypse copy() {return new ZombieApocalypse(this);
class ZombieApocalypseEffect extends OneShotEffect {
public ZombieApocalypseEffect() {
public ZombieApocalypseEffect(final ZombieApocalypseEffect effect) {
public ZombieApocalypseEffect copy() {return new ZombieApocalypseEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class AEtherVial extends CardImpl {
public AEtherVial(UUID ownerId) {
public AEtherVial(final AEtherVial card) {
public AEtherVial copy() {return new AEtherVial(this);
class AEtherVialEffect extends OneShotEffect {
public AEtherVialEffect() {
public AEtherVialEffect(final AEtherVialEffect effect) {
public AEtherVialEffect copy() {return new AEtherVialEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return controller.moveCards(card, Zone.BATTLEFIELD, source, game);return false;
public class ArcaneSpyglass extends CardImpl {
public ArcaneSpyglass (UUID ownerId) {
public ArcaneSpyglass (final ArcaneSpyglass card) {
public ArcaneSpyglass copy() {return new ArcaneSpyglass(this);
public class ArcboundBruiser extends CardImpl {
public ArcboundBruiser(UUID ownerId) {
public ArcboundBruiser(final ArcboundBruiser card) {
public ArcboundBruiser copy() {return new ArcboundBruiser(this);
public class ArcboundHybrid extends CardImpl {
public ArcboundHybrid(UUID ownerId) {
public ArcboundHybrid(final ArcboundHybrid card) {
public ArcboundHybrid copy() {return new ArcboundHybrid(this);
public class ArcboundLancer extends CardImpl {
public ArcboundLancer(UUID ownerId) {
public ArcboundLancer(final ArcboundLancer card) {
public ArcboundLancer copy() {return new ArcboundLancer(this);
public class ArcboundOverseer extends CardImpl {
public ArcboundOverseer(UUID ownerId) {
public ArcboundOverseer(final ArcboundOverseer card) {
public ArcboundOverseer copy() {return new ArcboundOverseer(this);
public class ArcboundStinger extends CardImpl {
public ArcboundStinger(UUID ownerId) {
public ArcboundStinger(final ArcboundStinger card) {
public ArcboundStinger copy() {return new ArcboundStinger(this);
public class ArcboundWorker extends CardImpl {
public ArcboundWorker(UUID ownerId) {
public ArcboundWorker(final ArcboundWorker card) {
public ArcboundWorker copy() {return new ArcboundWorker(this);
public class AuriokGlaivemaster extends CardImpl {
public AuriokGlaivemaster(UUID ownerId) {
public AuriokGlaivemaster(final AuriokGlaivemaster card) {
public AuriokGlaivemaster copy() {return new AuriokGlaivemaster(this);
public class BarbedLightning extends CardImpl {
public BarbedLightning(UUID ownerId) {
public BarbedLightning(final BarbedLightning card) {
public BarbedLightning copy() {return new BarbedLightning(this);
public class BlinkmothNexus extends CardImpl {
public BlinkmothNexus(UUID ownerId) {
public BlinkmothNexus(final BlinkmothNexus card) {
public BlinkmothNexus copy() {return new BlinkmothNexus(this);
class BlinkmothNexusToken extends Token {
public BlinkmothNexusToken() {
public class ChitteringRats extends CardImpl {
public ChitteringRats(UUID ownerId) {
public ChitteringRats(final ChitteringRats card) {
public ChitteringRats copy() {return new ChitteringRats(this);
class ChitteringRatsEffect extends OneShotEffect {
public ChitteringRatsEffect() {
public ChitteringRatsEffect(final ChitteringRatsEffect effect) {
public ChitteringRatsEffect copy() {return new ChitteringRatsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ChromescaleDrake extends CardImpl {
public ChromescaleDrake(UUID ownerId) {
public ChromescaleDrake(final ChromescaleDrake card) {
public ChromescaleDrake copy() {return new ChromescaleDrake(this);
class ChromescaleDrakeEffect extends OneShotEffect {
public ChromescaleDrakeEffect() {
public ChromescaleDrakeEffect(final ChromescaleDrakeEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public ChromescaleDrakeEffect copy() {return new ChromescaleDrakeEffect(this);
public class Coretapper extends CardImpl {
public Coretapper(UUID ownerId) {
public Coretapper(final Coretapper card) {
public Coretapper copy() {return new Coretapper(this);
public class CrazedGoblin extends CardImpl {
public CrazedGoblin(UUID ownerId) {
public CrazedGoblin(final CrazedGoblin card) {
public CrazedGoblin copy() {return new CrazedGoblin(this);
public class DarksteelBrute extends CardImpl {
public DarksteelBrute (UUID ownerId) {
public DarksteelBrute (final DarksteelBrute card) {
public DarksteelBrute copy() {return new DarksteelBrute(this);
class DarksteelBruteToken extends Token {
public DarksteelBruteToken() {
public class DarksteelCitadel extends CardImpl {
public DarksteelCitadel (UUID ownerId) {
public DarksteelCitadel (final DarksteelCitadel card) {
public DarksteelCitadel copy() {return new DarksteelCitadel(this);
public class DarksteelColossus extends CardImpl {
public DarksteelColossus(UUID ownerId) {
public DarksteelColossus(final DarksteelColossus card) {
public DarksteelColossus copy() {return new DarksteelColossus(this);
public class DarksteelForge extends CardImpl {
public DarksteelForge(UUID ownerId) {
public DarksteelForge(final DarksteelForge card) {
public DarksteelForge copy() {return new DarksteelForge(this);
public class DarksteelGargoyle extends CardImpl {
public DarksteelGargoyle(UUID ownerId) {
public DarksteelGargoyle(final DarksteelGargoyle card) {
public DarksteelGargoyle copy() {return new DarksteelGargoyle(this);
public class DarksteelIngot extends CardImpl {
public DarksteelIngot(UUID ownerId) {
public DarksteelIngot(final DarksteelIngot card) {
public DarksteelIngot copy() {return new DarksteelIngot(this);
public class DarksteelPendant extends CardImpl {
public DarksteelPendant(UUID ownerId) {
public DarksteelPendant(final DarksteelPendant card) {
public DarksteelPendant copy() {return new DarksteelPendant(this);
public class DarksteelReactor extends CardImpl {
public DarksteelReactor(UUID ownerId) {
public DarksteelReactor(final DarksteelReactor card) {
public DarksteelReactor copy() {return new DarksteelReactor(this);
class DarksteelReactorStateTriggeredAbility extends StateTriggeredAbility {
public DarksteelReactorStateTriggeredAbility() {
public DarksteelReactorStateTriggeredAbility(final DarksteelReactorStateTriggeredAbility ability) {
public DarksteelReactorStateTriggeredAbility copy() {return new DarksteelReactorStateTriggeredAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When {this} has twenty or more charge counters on it, you win the game.";
public class DrossGolem extends CardImpl {
public DrossGolem(UUID ownerId) {
public DrossGolem(final DrossGolem card) {
public DrossGolem copy() {return new DrossGolem(this);
public class EchoingDecay extends CardImpl {
public EchoingDecay(UUID ownerId) {
public EchoingDecay(final EchoingDecay card) {
public EchoingDecay copy() {return new EchoingDecay(this);
class EchoingDecayEffect extends OneShotEffect {
public EchoingDecayEffect() {
public EchoingDecayEffect(final EchoingDecayEffect effect) {
public EchoingDecayEffect copy() {return new EchoingDecayEffect(this);
public boolean apply(Game game, Ability source) {
public class EchoingRuin extends CardImpl {
public EchoingRuin(UUID ownerId) {
public EchoingRuin(final EchoingRuin card) {
public EchoingRuin copy() {return new EchoingRuin(this);
class EchoingRuinEffect extends OneShotEffect {
EchoingRuinEffect() {
EchoingRuinEffect(final EchoingRuinEffect effect) {
public EchoingRuinEffect copy() {return new EchoingRuinEffect(this);
public boolean apply(Game game, Ability source) {
public class EmissaryOfHope extends CardImpl {
public EmissaryOfHope(UUID ownerId) {
public EmissaryOfHope(final EmissaryOfHope card) {
public EmissaryOfHope copy() {return new EmissaryOfHope(this);
class EmissaryOfHopeEffect extends OneShotEffect {
EmissaryOfHopeEffect() {
EmissaryOfHopeEffect(final EmissaryOfHopeEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public EmissaryOfHopeEffect copy() {return new EmissaryOfHopeEffect(this);
public class EssenceDrain extends CardImpl {
public EssenceDrain (UUID ownerId) {
public EssenceDrain (final EssenceDrain card) {
public EssenceDrain copy() {return new EssenceDrain(this);
public class FangrenFirstborn extends CardImpl {
public FangrenFirstborn(UUID ownerId) {
public FangrenFirstborn(final FangrenFirstborn card) {
public FangrenFirstborn copy() {return new FangrenFirstborn(this);
public class Flamebreak extends CardImpl {
public Flamebreak(UUID ownerId) {
public Flamebreak(final Flamebreak card) {
public Flamebreak copy() {return new Flamebreak(this);
public FlamebreakCantRegenerateEffect() {
public FlamebreakCantRegenerateEffect(final FlamebreakCantRegenerateEffect effect) {
public FlamebreakCantRegenerateEffect copy() {return new FlamebreakCantRegenerateEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return watcher.wasDamaged(event.getTargetId(), game);return false;
public class FurnaceDragon extends CardImpl {
public FurnaceDragon(UUID ownerId) {
public FurnaceDragon(final FurnaceDragon card) {
public FurnaceDragon copy() {return new FurnaceDragon(this);
class FurnaceDragonCondition implements Condition {
public boolean apply(Game game, Ability source) {return applies;
public String toString() {return "you cast it from your hand";
public class GenesisChamber extends CardImpl {
public GenesisChamber(UUID ownerId) {
public GenesisChamber(final GenesisChamber card) {
public GenesisChamber copy() {return new GenesisChamber(this);
public GenesisChamberTriggeredAbility(final GenesisChamberTriggeredAbility ability) {
public GenesisChamberTriggeredAbility copy() {return new GenesisChamberTriggeredAbility(this);
public boolean checkInterveningIfClause(Game game) {return !permanent.isTapped();return false;
class GenesisChamberEffect extends OneShotEffect {
public GenesisChamberEffect() {
public GenesisChamberEffect(final GenesisChamberEffect effect) {
public GenesisChamberEffect copy() {return new GenesisChamberEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class GethsGrimoire extends CardImpl {
public GethsGrimoire(UUID ownerId) {
public GethsGrimoire(final GethsGrimoire card) {
public GethsGrimoire copy() {return new GethsGrimoire(this);
public class GoblinArchaeologist extends CardImpl {
public GoblinArchaeologist(UUID ownerId) {
public GoblinArchaeologist(final GoblinArchaeologist card) {
public GoblinArchaeologist copy() {return new GoblinArchaeologist(this);
class GoblinArchaeologistEffect extends OneShotEffect {
public GoblinArchaeologistEffect() {
public GoblinArchaeologistEffect(final GoblinArchaeologistEffect ability) {
public GoblinArchaeologistEffect copy() {return new GoblinArchaeologistEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public String getText(Mode mode) {return "Flip a coin. If you win the flip, destroy target artifact and untap {this}. If you lose the flip, sacrifice {this}";
public class GreaterHarvester extends CardImpl {
public GreaterHarvester(UUID ownerId) {
public GreaterHarvester(final GreaterHarvester card) {
public GreaterHarvester copy() {return new GreaterHarvester(this);
class GreaterHarvesterAbility extends TriggeredAbilityImpl {
public GreaterHarvesterAbility() {
public GreaterHarvesterAbility(final GreaterHarvesterAbility ability) {
public GreaterHarvesterAbility copy() {return new GreaterHarvesterAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return EventType.DAMAGED_PLAYER.equals(event.getType());
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, that player sacrifices two permanent.";
public class GrimclawBats extends CardImpl {
public GrimclawBats(UUID ownerId) {
public GrimclawBats(final GrimclawBats card) {
public GrimclawBats copy() {return new GrimclawBats(this);
public class Hallow extends CardImpl {
public Hallow(UUID ownerId) {
public Hallow(final Hallow card) {
public Hallow copy() {return new Hallow(this);
class HallowPreventDamageByTargetEffect extends PreventionEffectImpl {
public HallowPreventDamageByTargetEffect(Duration duration) {
public HallowPreventDamageByTargetEffect(final HallowPreventDamageByTargetEffect effect) {
public HallowPreventDamageByTargetEffect copy() {return new HallowPreventDamageByTargetEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return this.getTargetPointer().getTargets(game, source).contains(mageObject.getId());return false;
public class HoverguardObserver extends CardImpl {
public HoverguardObserver(UUID ownerId) {
public HoverguardObserver(final HoverguardObserver card) {
public HoverguardObserver copy() {return new HoverguardObserver(this);
public class Karstoderm extends CardImpl {
public Karstoderm(UUID ownerId) {
public Karstoderm(final Karstoderm card) {
public Karstoderm copy() {return new Karstoderm(this);
public class KrarkClanStoker extends CardImpl {
public KrarkClanStoker(UUID ownerId) {
public KrarkClanStoker(final KrarkClanStoker card) {
public KrarkClanStoker copy() {return new KrarkClanStoker(this);
public class LastWord extends CardImpl {
public LastWord (UUID ownerId) {
public LastWord (final LastWord card) {
public LastWord copy() {return new LastWord(this);
public class LeoninBattlemage extends CardImpl {
public LeoninBattlemage(UUID ownerId) {
public LeoninBattlemage(final LeoninBattlemage card) {
public LeoninBattlemage copy() {return new LeoninBattlemage(this);
public class LichsTomb extends CardImpl {
public LichsTomb(UUID ownerId) {
public LichsTomb(final LichsTomb card) {
public LichsTomb copy() {return new LichsTomb(this);
class LichsTombTriggeredAbility extends TriggeredAbilityImpl {
LichsTombTriggeredAbility() {
LichsTombTriggeredAbility(final LichsTombTriggeredAbility ability) {
public LichsTombTriggeredAbility copy() {return new LichsTombTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LOST_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you lose life, sacrifice a permanent for each 1 life you lost.";return new LoxodonMystic(this);
public class MagneticFlux extends CardImpl {
public MagneticFlux(UUID ownerId) {
public MagneticFlux(final MagneticFlux card) {
public MagneticFlux copy() {return new MagneticFlux(this);
public class Memnarch extends CardImpl{
public Memnarch(UUID ownerId) {public Memnarch copy() { return new Memnarch(this); }
public class MirrodinsCore extends CardImpl {
public MirrodinsCore (UUID ownerId) {
public MirrodinsCore (final MirrodinsCore card) {
public MirrodinsCore copy() {return new MirrodinsCore(this);
public class MycosynthLattice extends CardImpl {
public MycosynthLattice(UUID ownerId) {
public MycosynthLattice(final MycosynthLattice card) {
public MycosynthLattice copy() {return new MycosynthLattice(this);
public boolean apply(Game game, Ability source) {return true;return new PermanentsAreArtifactsEffect(this);
class EverythingIsColorlessEffect extends ContinuousEffectImpl {
public EverythingIsColorlessEffect() {
public boolean apply(Game game, Ability source) {return true;return false;
public EverythingIsColorlessEffect copy() {return new EverythingIsColorlessEffect(this);
private EverythingIsColorlessEffect(EverythingIsColorlessEffect effect) {
class ManaCanBeSpentAsAnyColorEffect extends AsThoughEffectImpl implements AsThoughManaEffect {
public ManaCanBeSpentAsAnyColorEffect() {
public boolean apply(Game game, Ability source) {return true;
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return controller != null && game.getState().getPlayersInRange(controller.getId(), game).contains(affectedControllerId);
public ManaType getAsThoughManaType(ManaType manaType, ManaPoolItem mana, UUID affectedControllerId, Ability source, Game game) {return mana.getFirstAvailable();
public ManaCanBeSpentAsAnyColorEffect copy() {return new ManaCanBeSpentAsAnyColorEffect(this);
private ManaCanBeSpentAsAnyColorEffect(ManaCanBeSpentAsAnyColorEffect effect) {
public class MyrLandshaper extends CardImpl {
public MyrLandshaper(UUID ownerId) {
public MyrLandshaper(final MyrLandshaper card) {
public MyrLandshaper copy() {return new MyrLandshaper(this);
public class MyrMatrix extends CardImpl {
public MyrMatrix (UUID ownerId) {
public MyrMatrix (final MyrMatrix card) {
public MyrMatrix copy() {return new MyrMatrix(this);
public class MyrMoonvessel extends CardImpl {
public MyrMoonvessel(UUID ownerId) {
public MyrMoonvessel(final MyrMoonvessel card) {
public MyrMoonvessel copy() {return new MyrMoonvessel(this);
public class NeurokProdigy extends CardImpl {
public NeurokProdigy(UUID ownerId) {
public NeurokProdigy(final NeurokProdigy card) {
public NeurokProdigy copy() {return new NeurokProdigy(this);
public class NimAbomination extends CardImpl {
public NimAbomination(UUID ownerId) {
public NimAbomination(final NimAbomination card) {
public NimAbomination copy() {return new NimAbomination(this);
class SourceUntappedCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return !permanent.isTapped();return false;
public String toString() {return "if {this} is untapped";
public class Nourish extends CardImpl {
public Nourish (UUID ownerId) {
public Nourish (final Nourish card) {
public Nourish copy() {return new Nourish(this);
public class Oxidize extends CardImpl {
public Oxidize(UUID ownerId) {
public Oxidize(final Oxidize card) {
public Oxidize copy() {return new Oxidize(this);
public class PanopticMirror extends CardImpl {
public PanopticMirror(UUID ownerId) {
public PanopticMirror(final PanopticMirror card) {
public PanopticMirror copy() {return new PanopticMirror(this);
class PanopticMirrorExileEffect extends OneShotEffect {
public PanopticMirrorExileEffect() {
public PanopticMirrorExileEffect(final PanopticMirrorExileEffect effect) {
public PanopticMirrorExileEffect copy() {return new PanopticMirrorExileEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
class PanopticMirrorCastEffect extends OneShotEffect {
public PanopticMirrorCastEffect() {
public PanopticMirrorCastEffect(final PanopticMirrorCastEffect effect) {
public PanopticMirrorCastEffect copy() {return new PanopticMirrorCastEffect(this);
public boolean apply(Game game, Ability source) {return controller.cast(copy.getSpellAbility(), game, true);return true;return false;
public class PristineAngel extends CardImpl {
public PristineAngel(UUID ownerId) {
public PristineAngel(final PristineAngel card) {
public PristineAngel copy() {return new PristineAngel(this);
public class PteronGhost extends CardImpl {
public PteronGhost(UUID ownerId) {
public PteronGhost(final PteronGhost card) {
public PteronGhost copy() {return new PteronGhost(this);
public class PulseOfTheFields extends CardImpl {
public PulseOfTheFields(UUID ownerId) {
public PulseOfTheFields(final PulseOfTheFields card) {
public PulseOfTheFields copy() {return new PulseOfTheFields(this);
class PulseOfTheFieldsReturnToHandEffect extends OneShotEffect {
PulseOfTheFieldsReturnToHandEffect() {this.staticText = "Then if an opponent has more life than you, return {this} to its owner's hand";
PulseOfTheFieldsReturnToHandEffect(final PulseOfTheFieldsReturnToHandEffect effect) {
public PulseOfTheFieldsReturnToHandEffect copy() {return new PulseOfTheFieldsReturnToHandEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PulseOfTheForge extends CardImpl {
public PulseOfTheForge(UUID ownerId) {
public PulseOfTheForge(final PulseOfTheForge card) {
public PulseOfTheForge copy() {return new PulseOfTheForge(this);
class PulseOfTheForgeReturnToHandEffect extends OneShotEffect {
PulseOfTheForgeReturnToHandEffect() {this.staticText = "Then if that player has more life than you, return {this} to its owner's hand";
PulseOfTheForgeReturnToHandEffect(final PulseOfTheForgeReturnToHandEffect effect) {
public PulseOfTheForgeReturnToHandEffect copy() {return new PulseOfTheForgeReturnToHandEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RazorGolem extends CardImpl {
public RazorGolem(UUID ownerId) {
public RazorGolem(final RazorGolem card) {
public RazorGolem copy() {return new RazorGolem(this);
public class ReapAndSow extends CardImpl {
public ReapAndSow(UUID ownerId) {
public ReapAndSow(final ReapAndSow card) {
public ReapAndSow copy() {return new ReapAndSow(this);
public class Reshape extends CardImpl {
public Reshape(UUID ownerId) {
public Reshape(final Reshape card) {
public Reshape copy() {return new Reshape(this);
class ReshapeSearchEffect extends OneShotEffect {
ReshapeSearchEffect() {
ReshapeSearchEffect(final ReshapeSearchEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public ReshapeSearchEffect copy() {return new ReshapeSearchEffect(this);
public class Retract extends CardImpl {
public Retract(UUID ownerId) {
public Retract(final Retract card) {
public Retract copy() {return new Retract(this);
public class RitualOfRestoration extends CardImpl {
public RitualOfRestoration(UUID ownerId) {
public RitualOfRestoration(final RitualOfRestoration card) {
public RitualOfRestoration copy() {return new RitualOfRestoration(this);
public class SavageBeating extends CardImpl {
public SavageBeating(UUID ownerId) {
public SavageBeating(final SavageBeating card) {
public SavageBeating copy() {return new SavageBeating(this);
class AdditionalCombatPhaseEffect extends OneShotEffect {
AdditionalCombatPhaseEffect() {
AdditionalCombatPhaseEffect(final AdditionalCombatPhaseEffect effect) {
public AdditionalCombatPhaseEffect copy() {return new AdditionalCombatPhaseEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ScavengingScarab extends CardImpl {
public ScavengingScarab(UUID ownerId) {
public ScavengingScarab(final ScavengingScarab card) {
public ScavengingScarab copy() {return new ScavengingScarab(this);
public class SerumPowder extends CardImpl {
public SerumPowder(UUID ownerId) {
public SerumPowder(final SerumPowder card) {
public SerumPowder copy() {return new SerumPowder(this);
class SerumPowderReplaceEffect extends ReplacementEffectImpl {
SerumPowderReplaceEffect() {
SerumPowderReplaceEffect(final SerumPowderReplaceEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAN_TAKE_MULLIGAN;
public boolean applies(GameEvent event, Ability source, Game game) {return source.getControllerId().equals(event.getPlayerId());
public SerumPowderReplaceEffect copy() {return new SerumPowderReplaceEffect(this);
public class ShieldOfKaldra extends CardImpl {
public ShieldOfKaldra(UUID ownerId) {
public ShieldOfKaldra(final ShieldOfKaldra card) {
public ShieldOfKaldra copy() {return new ShieldOfKaldra(this);
public class Skullclamp extends CardImpl {
public Skullclamp(UUID ownerId) {
public Skullclamp(final Skullclamp card) {
public Skullclamp copy() {return new Skullclamp(this);
public class SlobadGoblinTinkerer extends CardImpl {
public SlobadGoblinTinkerer(UUID ownerId) {
public SlobadGoblinTinkerer(final SlobadGoblinTinkerer card) {
public SlobadGoblinTinkerer copy() {return new SlobadGoblinTinkerer(this);
public class Soulscour extends CardImpl {
public Soulscour (UUID ownerId) {
public Soulscour (final Soulscour card) {
public Soulscour copy() {return new Soulscour(this);
public class SpawningPit extends CardImpl {
public SpawningPit (UUID ownerId) {
public SpawningPit (final SpawningPit card) {
public SpawningPit copy() {return new SpawningPit(this);
class SpawningPitToken extends Token {
public SpawningPitToken() {
public class Spincrusher extends CardImpl {
public Spincrusher(UUID ownerId) {
public Spincrusher(final Spincrusher card) {
public Spincrusher copy() {return new Spincrusher(this);
public class StandTogether extends CardImpl {
public StandTogether(UUID ownerId) {
public StandTogether(final StandTogether card) {
public StandTogether copy() {return new StandTogether(this);
public class SteelshaperApprentice extends CardImpl {
public SteelshaperApprentice(UUID ownerId) {
public SteelshaperApprentice(final SteelshaperApprentice card) {
public SteelshaperApprentice copy() {return new SteelshaperApprentice(this);
public class SunderingTitan extends CardImpl {
public SunderingTitan(UUID ownerId) {
public SunderingTitan(final SunderingTitan card) {
public SunderingTitan copy() {return new SunderingTitan(this);
class SunderingTitanDestroyLandEffect extends OneShotEffect {
public SunderingTitanDestroyLandEffect() {
public SunderingTitanDestroyLandEffect(final SunderingTitanDestroyLandEffect effect) {
public SunderingTitanDestroyLandEffect copy() {return new SunderingTitanDestroyLandEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SurestrikeTrident extends CardImpl {
public SurestrikeTrident(UUID ownerId) {
public SurestrikeTrident(final SurestrikeTrident card) {
public SurestrikeTrident copy() {return new SurestrikeTrident(this);
class SurestrikeTridentUnattachCost extends CostImpl {
public SurestrikeTridentUnattachCost(String name, UUID sourceId) {
public SurestrikeTridentUnattachCost(final SurestrikeTridentUnattachCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;return false;
public SurestrikeTridentUnattachCost copy() {return new SurestrikeTridentUnattachCost(this);
public class TangleGolem extends CardImpl {
public TangleGolem(UUID ownerId) {
public TangleGolem(final TangleGolem card) {
public TangleGolem copy() {return new TangleGolem(this);
public class TangleSpider extends CardImpl {
public TangleSpider(UUID ownerId) {
public TangleSpider(final TangleSpider card) {
public TangleSpider copy() {return new TangleSpider(this);
public class Tanglewalker extends CardImpl {
public Tanglewalker(UUID ownerId) {
public Tanglewalker(final Tanglewalker card) {
public Tanglewalker copy() {return new Tanglewalker(this);
public class TearsOfRage extends CardImpl {
public TearsOfRage(UUID ownerId) {
public TearsOfRage(final TearsOfRage card) {
public TearsOfRage copy() {return new TearsOfRage(this);
class TearsOfRageEffect extends OneShotEffect {
public TearsOfRageEffect() {
public TearsOfRageEffect(final TearsOfRageEffect effect) {
public TearsOfRageEffect copy() {return new TearsOfRageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TelJiladOutrider extends CardImpl {
public TelJiladOutrider(UUID ownerId) {
public TelJiladOutrider(final TelJiladOutrider card) {
public TelJiladOutrider copy() {return new TelJiladOutrider(this);
public class Trinisphere extends CardImpl {
public Trinisphere(UUID ownerId) {
public Trinisphere(final Trinisphere card) {
public Trinisphere copy() {return new Trinisphere(this);
public TrinisphereEffect() {
protected TrinisphereEffect(TrinisphereEffect effect) {return true;
{return true;return false;
public TrinisphereEffect copy() {return new TrinisphereEffect(this);
public class UrGolemsEye extends CardImpl {
public UrGolemsEye(UUID ownerId) {
public UrGolemsEye(final UrGolemsEye card) {
public UrGolemsEye copy() {return new UrGolemsEye(this);
public class ViridianAcolyte extends CardImpl {
public ViridianAcolyte(UUID ownerId) {
public ViridianAcolyte(final ViridianAcolyte card) {
public ViridianAcolyte copy() {return new ViridianAcolyte(this);
public class ViridianZealot extends CardImpl {
public ViridianZealot(UUID ownerId) {
public ViridianZealot(final ViridianZealot card) {
public ViridianZealot copy() {return new ViridianZealot(this);
public class VoltaicConstruct extends CardImpl {
public VoltaicConstruct(UUID ownerId) {
public VoltaicConstruct(final VoltaicConstruct card) {
public VoltaicConstruct copy() {return new VoltaicConstruct(this);
public class VulshokMorningstar extends CardImpl {
public VulshokMorningstar(UUID ownerId) {
public VulshokMorningstar(final VulshokMorningstar card) {
public VulshokMorningstar copy() {return new VulshokMorningstar(this);
public class VulshokWarBoar extends CardImpl {
public VulshokWarBoar(UUID ownerId) {
public VulshokWarBoar(final VulshokWarBoar card) {
public VulshokWarBoar copy() {return new VulshokWarBoar(this);
public class WandOfTheElements extends CardImpl {
public WandOfTheElements(UUID ownerId) {
public WandOfTheElements(final WandOfTheElements card) {
public WandOfTheElements copy() {return new WandOfTheElements(this);
class WandOfTheElementsFirstToken extends Token {
public WandOfTheElementsFirstToken() {
class WandOfTheElementsSecondToken extends Token {
public WandOfTheElementsSecondToken() {
public class WireflyHive extends CardImpl {
public WireflyHive(UUID ownerId) {
public WireflyHive(final WireflyHive card) {
public WireflyHive copy() {return new WireflyHive(this);
class WireflyHiveEffect extends OneShotEffect {
public WireflyHiveEffect() {
public WireflyHiveEffect(WireflyHiveEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public WireflyHiveEffect copy() {return new WireflyHiveEffect(this);
class WireflyToken extends Token {
WireflyToken() {return new AnthemOfRakdos(this);return new AnthemOfRakdosHellbentEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_CREATURE)
public boolean applies(GameEvent event, Ability source, Game game) {return game.getControllerId(event.getSourceId()).equals(source.getControllerId()) && HellbentCondition.getInstance().apply(game, source);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class AquastrandSpider extends CardImpl {
public AquastrandSpider(UUID ownerId) {
public AquastrandSpider(final AquastrandSpider card) {
public AquastrandSpider copy() {return new AquastrandSpider(this);
public class AssaultZeppelid extends CardImpl {
public AssaultZeppelid(UUID ownerId) {
public AssaultZeppelid(final AssaultZeppelid card) {
public AssaultZeppelid copy() {return new AssaultZeppelid(this);return new AuroraEidolon(this);
public class AzoriusFirstWing extends CardImpl {
public AzoriusFirstWing(UUID ownerId) {
public AzoriusFirstWing(final AzoriusFirstWing card) {
public AzoriusFirstWing copy() {return new AzoriusFirstWing(this);
public class AzoriusGuildmage extends CardImpl {
public AzoriusGuildmage(UUID ownerId) {
public AzoriusGuildmage(final AzoriusGuildmage card) {
public AzoriusGuildmage copy() {return new AzoriusGuildmage(this);
public class AzoriusSignet extends CardImpl {
public AzoriusSignet(UUID ownerId) {
public AzoriusSignet(final AzoriusSignet card) {
public AzoriusSignet copy() {return new AzoriusSignet(this);
public class BeaconHawk extends CardImpl {
public BeaconHawk(UUID ownerId) {
public BeaconHawk(final BeaconHawk card) {
public BeaconHawk copy() {return new BeaconHawk(this);
public class BiomanticMastery extends CardImpl {
public BiomanticMastery(UUID ownerId) {
public BiomanticMastery(final BiomanticMastery card) {
public BiomanticMastery copy() {return new BiomanticMastery(this);
class BiomanticMasteryEffect extends OneShotEffect {
public BiomanticMasteryEffect() {
public BiomanticMasteryEffect(final BiomanticMasteryEffect effect) {
public BiomanticMasteryEffect copy() {return new BiomanticMasteryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BlessingOfTheNephilim extends CardImpl {
public BlessingOfTheNephilim(UUID ownerId) {
public BlessingOfTheNephilim(final BlessingOfTheNephilim card) {
public BlessingOfTheNephilim copy() {return new BlessingOfTheNephilim(this);
class EnchantedCreatureColorsCount implements DynamicValue {
public EnchantedCreatureColorsCount() {
public EnchantedCreatureColorsCount(final EnchantedCreatureColorsCount dynamicValue) {
public int calculate(Game game, Ability source, Effect effect) {return count;
public EnchantedCreatureColorsCount copy() {return new EnchantedCreatureColorsCount(this);
public String toString() {return "1";
public String getMessage() {return "of its colors";
public class BloodCrypt extends CardImpl {
public BloodCrypt (UUID ownerId) {
public BloodCrypt (final BloodCrypt card) {
public BloodCrypt copy() {return new BloodCrypt(this);
public class BondOfAgony extends CardImpl {
public BondOfAgony(UUID ownerId) {
public BondOfAgony(final BondOfAgony card) {
public BondOfAgony copy() {return new BondOfAgony(this);
public class BreedingPool extends CardImpl {
public BreedingPool (UUID ownerId) {
public BreedingPool (final BreedingPool card) {
public BreedingPool copy() {return new BreedingPool(this);
public class CacklingFlames extends CardImpl {
public CacklingFlames(UUID ownerId) {
public CacklingFlames(final CacklingFlames card) {
public CacklingFlames copy() {return new CacklingFlames(this);
public class Carom extends CardImpl {
public Carom(UUID ownerId) {
public Carom(final Carom card) {
public Carom copy() {return new Carom(this);
class CaromEffect extends RedirectionEffect {
public CaromEffect(Duration duration, int amount) {
public CaromEffect(final CaromEffect effect) {
public CaromEffect copy() {return new CaromEffect(this);
public void init(Ability source, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class CelestialAncient extends CardImpl {
public CelestialAncient(UUID ownerId) {
public CelestialAncient(final CelestialAncient card) {
public CelestialAncient copy() {return new CelestialAncient(this);
public class CoilingOracle extends CardImpl {
public CoilingOracle(UUID ownerId) {
public CoilingOracle(final CoilingOracle card) {
public CoilingOracle copy() {return new CoilingOracle(this);
public class CryptChampion extends CardImpl {
public CryptChampion(UUID ownerId) {
public CryptChampion(final CryptChampion card) {
public CryptChampion copy() {return new CryptChampion(this);
class CryptChampionEffect extends OneShotEffect {
CryptChampionEffect() {
CryptChampionEffect(final CryptChampionEffect effect) {
public CryptChampionEffect copy() {return new CryptChampionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CytoplastManipulator extends CardImpl {
public CytoplastManipulator(UUID ownerId) {
public CytoplastManipulator(final CytoplastManipulator card) {
public CytoplastManipulator copy() {return new CytoplastManipulator(this);
public class CytoplastRootKin extends CardImpl {
public CytoplastRootKin(UUID ownerId) {
public CytoplastRootKin(final CytoplastRootKin card) {
public CytoplastRootKin copy() {return new CytoplastRootKin(this);
class CytoplastRootKinEffect extends OneShotEffect {
CytoplastRootKinEffect() {
CytoplastRootKinEffect(final CytoplastRootKinEffect effect) {
public CytoplastRootKinEffect copy() {return new CytoplastRootKinEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CytospawnShambler extends CardImpl {
public CytospawnShambler(UUID ownerId) {
public CytospawnShambler(final CytospawnShambler card) {
public CytospawnShambler copy() {return new CytospawnShambler(this);
public class DeliriumSkeins extends CardImpl {
public DeliriumSkeins(UUID ownerId) {
public DeliriumSkeins(final DeliriumSkeins card) {
public DeliriumSkeins copy() {return new DeliriumSkeins(this);
public class Dovescape extends CardImpl {
public Dovescape(UUID ownerId) {
public Dovescape(final Dovescape card) {
public Dovescape copy() {return new Dovescape(this);
class DovescapeEffect extends OneShotEffect {
DovescapeEffect() {
DovescapeEffect(final DovescapeEffect effect) {
public DovescapeEffect copy() {return new DovescapeEffect(this);
public boolean apply(Game game, Ability source) {return true;
class DovescapeToken extends Token {
DovescapeToken() {
public class DreadSlag extends CardImpl {
public DreadSlag(UUID ownerId) {
public DreadSlag(final DreadSlag card) {
public DreadSlag copy() {return new DreadSlag(this);
public class Drekavac extends CardImpl {
public Drekavac(UUID ownerId) {
public Drekavac(final Drekavac card) {
public Drekavac copy() {return new Drekavac(this);
public class EnemyOfTheGuildpact extends CardImpl {
public EnemyOfTheGuildpact(UUID ownerId) {
public EnemyOfTheGuildpact(final EnemyOfTheGuildpact card) {
public EnemyOfTheGuildpact copy() {return new EnemyOfTheGuildpact(this);return new EnigmaEidolon(this);return new EntropicEidolon(this);
public class EvolutionVat extends CardImpl {
public EvolutionVat(UUID ownerId) {
public EvolutionVat(final EvolutionVat card) {
public EvolutionVat copy() {return new EvolutionVat(this);
public class ExperimentKraj extends CardImpl {
public ExperimentKraj(UUID ownerId) {
public ExperimentKraj(final ExperimentKraj card) {
public ExperimentKraj copy() {return new ExperimentKraj(this);
class ExperimentKrajEffect extends ContinuousEffectImpl {
public ExperimentKrajEffect() {
public ExperimentKrajEffect(final ExperimentKrajEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ExperimentKrajEffect copy() {return new ExperimentKrajEffect(this);
public class FlaringFlameKin extends CardImpl {
public FlaringFlameKin(UUID ownerId) {
public FlaringFlameKin(final FlaringFlameKin card) {
public FlaringFlameKin copy() {return new FlaringFlameKin(this);
public class FreewindEquenaut extends CardImpl {
public FreewindEquenaut(UUID ownerId) {
public FreewindEquenaut(final FreewindEquenaut card) {
public FreewindEquenaut copy() {return new FreewindEquenaut(this);
public class GobhobblerRats extends CardImpl {
public GobhobblerRats(UUID ownerId) {
public GobhobblerRats(final GobhobblerRats card) {
public GobhobblerRats copy() {return new GobhobblerRats(this);
public class GovernTheGuildless extends CardImpl {
public GovernTheGuildless(UUID ownerId) {
public GovernTheGuildless(final GovernTheGuildless card) {
public GovernTheGuildless copy() {return new GovernTheGuildless(this);
public class GuardianOfTheGuildpact extends CardImpl {
public GuardianOfTheGuildpact(UUID ownerId) {
public GuardianOfTheGuildpact(final GuardianOfTheGuildpact card) {
public GuardianOfTheGuildpact copy() {return new GuardianOfTheGuildpact(this);
public class HaazdaExonerator extends CardImpl {
public HaazdaExonerator(UUID ownerId) {
public HaazdaExonerator(final HaazdaExonerator card) {
public HaazdaExonerator copy() {return new HaazdaExonerator(this);
public class HaazdaShieldMate extends CardImpl {
public HaazdaShieldMate(UUID ownerId) {
public HaazdaShieldMate(final HaazdaShieldMate card) {
public HaazdaShieldMate copy() {return new HaazdaShieldMate(this);
public class HallowedFountain extends CardImpl {
public HallowedFountain (UUID ownerId) {
public HallowedFountain (final HallowedFountain card) {
public HallowedFountain copy() {return new HallowedFountain(this);
public class HeliumSquirter extends CardImpl {
public HeliumSquirter(UUID ownerId) {
public HeliumSquirter(final HeliumSquirter card) {
public HeliumSquirter copy() {return new HeliumSquirter(this);
public class HellholeRats extends CardImpl {
public HellholeRats(UUID ownerId) {
public HellholeRats(final HellholeRats card) {
public HellholeRats copy() {return new HellholeRats(this);
class HellholeRatsEffect extends OneShotEffect {
public HellholeRatsEffect() {
public HellholeRatsEffect(final HellholeRatsEffect effect) {
public HellholeRatsEffect copy() {return new HellholeRatsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class IsperiaTheInscrutable extends CardImpl {
public IsperiaTheInscrutable(UUID ownerId) {
public IsperiaTheInscrutable(final IsperiaTheInscrutable card) {
public IsperiaTheInscrutable copy() {return new IsperiaTheInscrutable(this);
class IsperiaTheInscrutableEffect extends OneShotEffect {
public IsperiaTheInscrutableEffect() {
public IsperiaTheInscrutableEffect(final IsperiaTheInscrutableEffect effect) {
public boolean apply(Game game, Ability source) {return new SearchLibraryPutInHandEffect(new TargetCardInLibrary(filter), true, true).apply(game, source);return true;return false;
public Effect copy() {return new IsperiaTheInscrutableEffect(this);
public class KillSuitCultist extends CardImpl {
public KillSuitCultist(UUID ownerId) {
public KillSuitCultist(final KillSuitCultist card) {
public KillSuitCultist copy() {return new KillSuitCultist(this);
class KillSuitCultistEffect extends ReplacementEffectImpl {
public KillSuitCultistEffect() {
public KillSuitCultistEffect(final KillSuitCultistEffect effect) {
public KillSuitCultistEffect copy() {return new KillSuitCultistEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGE_CREATURE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(targetPointer.getFirst(game, source));
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public class LoamingShaman extends CardImpl {
public LoamingShaman(UUID ownerId) {
public LoamingShaman(final LoamingShaman card) {
public LoamingShaman copy() {return new LoamingShaman(this);
class LoamingShamanEffect extends OneShotEffect {
public LoamingShamanEffect() {
public LoamingShamanEffect(final LoamingShamanEffect effect) {
public LoamingShamanEffect copy() {return new LoamingShamanEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class LoamingShamanTargetCardsInGraveyard extends TargetCard {
public LoamingShamanTargetCardsInGraveyard(int minNumTargets, int maxNumTargets, FilterCard filter) {
public LoamingShamanTargetCardsInGraveyard(final LoamingShamanTargetCardsInGraveyard target) {
public boolean canTarget(UUID id, Ability source, Game game) {return false;return false;return super.canTarget(id, source, game);
public LoamingShamanTargetCardsInGraveyard copy() {return new LoamingShamanTargetCardsInGraveyard(this);
public class LyzoldaTheBloodWitch extends CardImpl {
public LyzoldaTheBloodWitch(UUID ownerId) {
public LyzoldaTheBloodWitch(final LyzoldaTheBloodWitch card) {
public LyzoldaTheBloodWitch copy() {return new LyzoldaTheBloodWitch(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MagewrightsStone extends CardImpl {
public MagewrightsStone(UUID ownerId) {
public MagewrightsStone(final MagewrightsStone card) {
public MagewrightsStone copy() {return new MagewrightsStone(this);
class HasAbilityWithTapSymbolPredicate implements Predicate<MageObject> {
public boolean apply(MageObject input, Game game) {return true;return false;
public String toString() {return "activated ability with {T} in its cost";
public class MightOfTheNephilim extends CardImpl {
public MightOfTheNephilim(UUID ownerId) {
public MightOfTheNephilim(final MightOfTheNephilim card) {
public MightOfTheNephilim copy() {return new MightOfTheNephilim(this);
class MightOfTheNephilimValue implements DynamicValue {return fINSTANCE;
public int calculate(Game game, Ability sourceAbility, Effect effect) {return 2 * target.getColor(game).getColorCount();return 0;
public MightOfTheNephilimValue copy() {return fINSTANCE;
public String toString() {return "2";
public String getMessage() {return "of its colors";
public class MinisterOfImpediments extends CardImpl {
public MinisterOfImpediments(UUID ownerId) {
public MinisterOfImpediments(final MinisterOfImpediments card) {
public MinisterOfImpediments copy() {return new MinisterOfImpediments(this);
public class MistralCharger extends CardImpl {
public MistralCharger(UUID ownerId) {
public MistralCharger(final MistralCharger card) {
public MistralCharger copy() {return new MistralCharger(this);
public class MomirVigSimicVisionary extends CardImpl {
public MomirVigSimicVisionary(UUID ownerId) {
public MomirVigSimicVisionary(final MomirVigSimicVisionary card) {
public MomirVigSimicVisionary copy() {return new MomirVigSimicVisionary(this);
class MomirVigSimicVisionaryEffect extends OneShotEffect {
public MomirVigSimicVisionaryEffect() {
public MomirVigSimicVisionaryEffect(final MomirVigSimicVisionaryEffect effect) {
public MomirVigSimicVisionaryEffect copy() {return new MomirVigSimicVisionaryEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class NovijenHeartOfProgress extends CardImpl {
public NovijenHeartOfProgress(UUID ownerId) {
public NovijenHeartOfProgress(final NovijenHeartOfProgress card) {
public NovijenHeartOfProgress copy() {return new NovijenHeartOfProgress(this);
class NovijenHeartOfProgressEffect extends OneShotEffect {
public NovijenHeartOfProgressEffect() {
public NovijenHeartOfProgressEffect(final NovijenHeartOfProgressEffect effect) {
public NovijenHeartOfProgressEffect copy() {return new NovijenHeartOfProgressEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NovijenSages extends CardImpl {
public NovijenSages(UUID ownerId) {
public NovijenSages(final NovijenSages card) {
public NovijenSages copy() {return new NovijenSages(this);
public class OcularHalo extends CardImpl {
public OcularHalo(UUID ownerId) {
public OcularHalo(final OcularHalo card) {
public OcularHalo copy() {return new OcularHalo(this);
public class OgreGatecrasher extends CardImpl {
public OgreGatecrasher(UUID ownerId) {
public OgreGatecrasher(final OgreGatecrasher card) {
public OgreGatecrasher copy() {return new OgreGatecrasher(this);
public class Omnibian extends CardImpl {
public Omnibian(UUID ownerId) {
public Omnibian(final Omnibian card) {
public Omnibian copy() {return new Omnibian(this);
class OmnibianFrogToken extends Token {
public OmnibianFrogToken() {return new PainMagnification(this);return new PainMagnificationTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent is dealt 3 or more damage by a single source, that player discards a card.";
public class PalliationAccord extends CardImpl {
public PalliationAccord(UUID ownerId) {
public PalliationAccord(final PalliationAccord card) {
public PalliationAccord copy() {return new PalliationAccord(this);
class PalliationAccordPreventionEffect extends PreventionEffectImpl {
public PalliationAccordPreventionEffect() {
public PalliationAccordPreventionEffect(final PalliationAccordPreventionEffect effect) {
public PalliationAccordPreventionEffect copy() {return new PalliationAccordPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PatagiaViper extends CardImpl {
public PatagiaViper(UUID ownerId) {
public PatagiaViper(final PatagiaViper card) {
public PatagiaViper copy() {return new PatagiaViper(this);
class PatagiaViperSnakeToken extends Token {
PatagiaViperSnakeToken() {
public class PillarOfTheParuns extends CardImpl {
public PillarOfTheParuns(UUID ownerId) {
public PillarOfTheParuns(final PillarOfTheParuns card) {
public PillarOfTheParuns copy() {return new PillarOfTheParuns(this);
public class PlumesOfPeace extends CardImpl {
public PlumesOfPeace(UUID ownerId) {
public PlumesOfPeace(final PlumesOfPeace card) {
public PlumesOfPeace copy() {return new PlumesOfPeace(this);
public class PrahvSpiresOfOrder extends CardImpl {
public PrahvSpiresOfOrder(UUID ownerId) {
public PrahvSpiresOfOrder(final PrahvSpiresOfOrder card) {
public PrahvSpiresOfOrder copy() {return new PrahvSpiresOfOrder(this);
public class PrideOfTheClouds extends CardImpl {
public PrideOfTheClouds(UUID ownerId) {
public PrideOfTheClouds(final PrideOfTheClouds card) {
public PrideOfTheClouds copy() {return new PrideOfTheClouds(this);
private class BirdToken extends Token {
public BirdToken() {
public class ProclamationOfRebirth extends CardImpl {
public ProclamationOfRebirth(UUID ownerId) {
public ProclamationOfRebirth(final ProclamationOfRebirth card) {
public ProclamationOfRebirth copy() {return new ProclamationOfRebirth(this);
public class ProperBurial extends CardImpl {
public ProperBurial(UUID ownerId) {
public ProperBurial(final ProperBurial card) {
public ProperBurial copy() {return new ProperBurial(this);
class ProperBurialTriggeredAbility extends TriggeredAbilityImpl {
public ProperBurialTriggeredAbility() {
public ProperBurialTriggeredAbility(final ProperBurialTriggeredAbility ability) {
public ProperBurialTriggeredAbility copy() {return new ProperBurialTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control dies, you gain life equal to that creature's toughness.";
public class ProteanHulk extends CardImpl {
public ProteanHulk(UUID ownerId) {
public ProteanHulk(final ProteanHulk card) {
public ProteanHulk copy() {return new ProteanHulk(this);
class ProteanHulkEffect extends OneShotEffect {
ProteanHulkEffect() {
ProteanHulkEffect(final ProteanHulkEffect effect) {
public ProteanHulkEffect copy() {return new ProteanHulkEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
Cards ProteanHulkSearch(Game game, Ability source) {return cardsPicked;
public class PsychoticFury extends CardImpl {
public PsychoticFury(UUID ownerId) {
public PsychoticFury(final PsychoticFury card) {
public PsychoticFury copy() {return new PsychoticFury(this);
public class RainOfGore extends CardImpl {
public RainOfGore(UUID ownerId) {
public RainOfGore(final RainOfGore card) {
public RainOfGore copy() {return new RainOfGore(this);
class RainOfGoreEffect extends ReplacementEffectImpl {
public RainOfGoreEffect() {
public RainOfGoreEffect(final RainOfGoreEffect effect) {
public RainOfGoreEffect copy() {return new RainOfGoreEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.GAIN_LIFE;
public boolean applies(GameEvent event, Ability source, Game game) {return stackObject.getControllerId().equals(event.getPlayerId());return false;return new RakdosCarnarium(this);return new RakdosGuildmage(this);return new RakdosGuildmageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new RakdosIckspitter(this);return new RakdosPitDragon(this);return new RakdosSignet(this);return new RakdosTheDefiler(this);
public class Ratcatcher extends CardImpl {
public Ratcatcher(UUID ownerId) {
public Ratcatcher(final Ratcatcher card) {
public Ratcatcher copy() {return new Ratcatcher(this);
public class RiotSpikes extends CardImpl {
public RiotSpikes(UUID ownerId) {
public RiotSpikes(final RiotSpikes card) {
public RiotSpikes copy() {return new RiotSpikes(this);
public class RixMaadiDungeonPalace extends CardImpl {
public RixMaadiDungeonPalace(UUID ownerId) {
public RixMaadiDungeonPalace(final RixMaadiDungeonPalace card) {
public RixMaadiDungeonPalace copy() {return new RixMaadiDungeonPalace(this);return new SandstormEidolon(this);
public class SilkwingScout extends CardImpl {
public SilkwingScout(UUID ownerId) {
public SilkwingScout(final SilkwingScout card) {
public SilkwingScout copy() {return new SilkwingScout(this);
public class SimicBasilisk extends CardImpl {
public SimicBasilisk(UUID ownerId) {
public SimicBasilisk(final SimicBasilisk card) {
public SimicBasilisk copy() {return new SimicBasilisk(this);
public class SimicGrowthChamber extends CardImpl {
public SimicGrowthChamber(UUID ownerId) {
public SimicGrowthChamber(final SimicGrowthChamber card) {
public SimicGrowthChamber copy() {return new SimicGrowthChamber(this);
public class SimicInitiate extends CardImpl {
public SimicInitiate(UUID ownerId) {
public SimicInitiate(final SimicInitiate card) {
public SimicInitiate copy() {return new SimicInitiate(this);
public class SimicRagworm extends CardImpl {
public SimicRagworm(UUID ownerId) {
public SimicRagworm(final SimicRagworm card) {
public SimicRagworm copy() {return new SimicRagworm(this);
public class SimicSignet extends CardImpl {
public SimicSignet(UUID ownerId) {
public SimicSignet(final SimicSignet card) {
public SimicSignet copy() {return new SimicSignet(this);
public class SimicSkySwallower extends CardImpl {
public SimicSkySwallower(UUID ownerId) {
public SimicSkySwallower(final SimicSkySwallower card) {
public SimicSkySwallower copy() {return new SimicSkySwallower(this);
public class SkullmeadCauldron extends CardImpl {
public SkullmeadCauldron(UUID ownerId) {
public SkullmeadCauldron(final SkullmeadCauldron card) {
public SkullmeadCauldron copy() {return new SkullmeadCauldron(this);
public class SkyHussar extends CardImpl {
public SkyHussar(UUID ownerId) {
public SkyHussar(final SkyHussar card) {
public SkyHussar copy() {return new SkyHussar(this);
public class SoulswornJury extends CardImpl {
public SoulswornJury(UUID ownerId) {
public SoulswornJury(final SoulswornJury card) {
public SoulswornJury copy() {return new SoulswornJury(this);
public class SpellSnare extends CardImpl {
public SpellSnare(UUID ownerId) {
public SpellSnare(final SpellSnare card) {
public SpellSnare copy() {return new SpellSnare(this);
public class SporebackTroll extends CardImpl {
public SporebackTroll(UUID ownerId) {
public SporebackTroll(final SporebackTroll card) {
public SporebackTroll copy() {return new SporebackTroll(this);
public class SproutingPhytohydra extends CardImpl {
public SproutingPhytohydra(UUID ownerId) {
public SproutingPhytohydra(final SproutingPhytohydra card) {
public SproutingPhytohydra copy() {return new SproutingPhytohydra(this);
public class SteelingStance extends CardImpl {
public SteelingStance(UUID ownerId) {
public SteelingStance(final SteelingStance card) {
public SteelingStance copy() {return new SteelingStance(this);
public class StoicEphemera extends CardImpl {
public StoicEphemera(UUID ownerId) {
public StoicEphemera(final StoicEphemera card) {
public StoicEphemera copy() {return new StoicEphemera(this);
public class TasteForMayhem extends CardImpl {
public TasteForMayhem(UUID ownerId) {
public TasteForMayhem(final TasteForMayhem card) {
public TasteForMayhem copy() {return new TasteForMayhem(this);
public class TidespoutTyrant extends CardImpl {
public TidespoutTyrant(UUID ownerId) {
public TidespoutTyrant(final TidespoutTyrant card) {
public TidespoutTyrant copy() {return new TidespoutTyrant(this);
public class TransguildCourier extends CardImpl {
public TransguildCourier(UUID ownerId) {
public TransguildCourier(final TransguildCourier card) {
public TransguildCourier copy() {return new TransguildCourier(this);
public class UtvaraScalper extends CardImpl {
public UtvaraScalper(UUID ownerId) {
public UtvaraScalper(final UtvaraScalper card) {
public UtvaraScalper copy() {return new UtvaraScalper(this);return new VerdantEidolon(this);
public class VesperGhoul extends CardImpl {
public VesperGhoul(UUID ownerId) {
public VesperGhoul(final VesperGhoul card) {
public VesperGhoul copy() {return new VesperGhoul(this);
public class VigeanGraftmage extends CardImpl {
public VigeanGraftmage(UUID ownerId) {
public VigeanGraftmage(final VigeanGraftmage card) {
public VigeanGraftmage copy() {return new VigeanGraftmage(this);
public class VigeanHydropon extends CardImpl {
public VigeanHydropon(UUID ownerId) {
public VigeanHydropon(final VigeanHydropon card) {
public VigeanHydropon copy() {return new VigeanHydropon(this);
class VigeanHydroponEffect extends RestrictionEffect {
public VigeanHydroponEffect() {
public VigeanHydroponEffect(final VigeanHydroponEffect effect) {
public VigeanHydroponEffect copy() {return new VigeanHydroponEffect(this);
public boolean canAttack(Game game) {return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public class Voidslime extends CardImpl {
public Voidslime(UUID ownerId) {
public Voidslime(final Voidslime card) {
public Voidslime copy() {return new Voidslime(this);
public class WalkingArchive extends CardImpl {
public WalkingArchive(UUID ownerId) {
public WalkingArchive(final WalkingArchive card) {
public WalkingArchive copy() {return new WalkingArchive(this);
public class WhiptailMoloch extends CardImpl {
public WhiptailMoloch(UUID ownerId) {
public WhiptailMoloch(final WhiptailMoloch card) {
public WhiptailMoloch copy() {return new WhiptailMoloch(this);
public class Windreaver extends CardImpl {
public Windreaver(UUID ownerId) {
public Windreaver(final Windreaver card) {
public Windreaver copy() {return new Windreaver(this);
public class AbyssalGatekeeper extends CardImpl {
public AbyssalGatekeeper(UUID ownerId) {
public AbyssalGatekeeper(final AbyssalGatekeeper card) {
public AbyssalGatekeeper copy() {return new AbyssalGatekeeper(this);
public class CacklingImp extends CardImpl {
public CacklingImp(UUID ownerId) {
public CacklingImp(final CacklingImp card) {
public CacklingImp copy() {return new CacklingImp(this);
public class ChargingPaladin extends CardImpl {
public ChargingPaladin(UUID ownerId) {
public ChargingPaladin(final ChargingPaladin card) {
public ChargingPaladin copy() {return new ChargingPaladin(this);
public class FaithsFetters extends CardImpl {
public FaithsFetters(UUID ownerId) {
public FaithsFetters(final FaithsFetters card) {
public FaithsFetters copy() {return new FaithsFetters(this);
public FaithsFettersEffect() {
public FaithsFettersEffect(final FaithsFettersEffect effect) {
public FaithsFettersEffect copy() {return new FaithsFettersEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ACTIVATE_ABILITY;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class LordOfThePit extends CardImpl {
public LordOfThePit(UUID ownerId) {
public LordOfThePit(final LordOfThePit card) {
public LordOfThePit copy() {return new LordOfThePit(this);
class LordOfThePitEffect extends OneShotEffect {
public LordOfThePitEffect() {
public LordOfThePitEffect(final LordOfThePitEffect effect) {
public LordOfThePitEffect copy() {return new LordOfThePitEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;return false;
public class ReiverDemon extends CardImpl {
public ReiverDemon(UUID ownerId) {
public ReiverDemon(final ReiverDemon card) {
public ReiverDemon copy() {return new ReiverDemon(this);
public class SerrasBoon extends CardImpl {
public SerrasBoon(UUID ownerId) {
public SerrasBoon(final SerrasBoon card) {
public SerrasBoon copy() {return new SerrasBoon(this);
public class AdventOfTheWurm extends CardImpl {
public AdventOfTheWurm(UUID ownerId) {
public AdventOfTheWurm(final AdventOfTheWurm card) {
public AdventOfTheWurm copy() {return new AdventOfTheWurm(this);
public class AEtherling extends CardImpl {
public AEtherling(UUID ownerId) {
public AEtherling(final AEtherling card) {
public AEtherling copy() {return new AEtherling(this);
public class AweForTheGuilds extends CardImpl {
public AweForTheGuilds(UUID ownerId) {
public AweForTheGuilds(final AweForTheGuilds card) {
public AweForTheGuilds copy() {return new AweForTheGuilds(this);
public class AzoriusCluestone extends CardImpl {
public AzoriusCluestone(UUID ownerId) {
public AzoriusCluestone(final AzoriusCluestone card) {
public AzoriusCluestone copy() {return new AzoriusCluestone(this);
public class BaneAlleyBlackguard extends CardImpl {
public BaneAlleyBlackguard (UUID ownerId) {
public BaneAlleyBlackguard (final BaneAlleyBlackguard card) {
public BaneAlleyBlackguard copy() {return new BaneAlleyBlackguard(this);
public class BatteringKrasis extends CardImpl {
public BatteringKrasis (UUID ownerId) {
public BatteringKrasis (final BatteringKrasis card) {
public BatteringKrasis copy() {return new BatteringKrasis(this);return new BeetleformMage(this);
public class BlastOfGenius extends CardImpl {
public BlastOfGenius(UUID ownerId) {
public BlastOfGenius(final BlastOfGenius card) {
public BlastOfGenius copy() {return new BlastOfGenius(this);
class BlastOfGeniusEffect extends OneShotEffect {
public BlastOfGeniusEffect() {
public BlastOfGeniusEffect(final BlastOfGeniusEffect effect) {
public BlastOfGeniusEffect copy() {return new BlastOfGeniusEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;return new BlazeCommando(this);return new BlazeCommandoTriggeredAbility(this);
public void reset(Game game) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE || event.getType() == EventType.DAMAGED_PLANESWALKER || event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return new StringBuilder("Whenever an instant or sorcery spell you control deals damage, ").append(super.getRule()).toString();
public class BloodBaronOfVizkopa extends CardImpl {
public BloodBaronOfVizkopa(UUID ownerId) {
public BloodBaronOfVizkopa(final BloodBaronOfVizkopa card) {
public BloodBaronOfVizkopa copy() {return new BloodBaronOfVizkopa(this);
class BloodBaronOfVizkopaEffect extends ContinuousEffectImpl {
public BloodBaronOfVizkopaEffect() {
public BloodBaronOfVizkopaEffect(final BloodBaronOfVizkopaEffect effect) {
public BloodBaronOfVizkopaEffect copy() {return new BloodBaronOfVizkopaEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
protected boolean conditionState(Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return (layer.equals(Layer.AbilityAddingRemovingEffects_6) || layer.equals(layer.PTChangingEffects_7));
public class BloodScrivener extends CardImpl {
public BloodScrivener (UUID ownerId) {
public BloodScrivener (final BloodScrivener card) {
public BloodScrivener copy() {return new BloodScrivener(this);
class BloodScrivenerReplacementEffect extends ReplacementEffectImpl {
public BloodScrivenerReplacementEffect() {
public BloodScrivenerReplacementEffect(final BloodScrivenerReplacementEffect effect) {
public BloodScrivenerReplacementEffect copy() {return new BloodScrivenerReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class BorosBattleshaper extends CardImpl {
public BorosBattleshaper (UUID ownerId) {
public BorosBattleshaper (final BorosBattleshaper card) {
public BorosBattleshaper copy() {return new BorosBattleshaper(this);
class BorosBattleshaperEffect extends OneShotEffect {
public BorosBattleshaperEffect() {
public BorosBattleshaperEffect(final BorosBattleshaperEffect effect) {
public BorosBattleshaperEffect copy() {return new BorosBattleshaperEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class BorosCluestone extends CardImpl {
public BorosCluestone(UUID ownerId) {
public BorosCluestone(final BorosCluestone card) {
public BorosCluestone copy() {return new BorosCluestone(this);return new BorosMastiff(this);
public class BredForTheHunt extends CardImpl {
public BredForTheHunt(UUID ownerId) {
public BredForTheHunt(final BredForTheHunt card) {
public BredForTheHunt copy() {return new BredForTheHunt(this);
class BredForTheHuntTriggeredAbility extends TriggeredAbilityImpl {
public BredForTheHuntTriggeredAbility() {
public BredForTheHuntTriggeredAbility(final BredForTheHuntTriggeredAbility ability) {
public BredForTheHuntTriggeredAbility copy() {return new BredForTheHuntTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control with a +1/+1 counter on it deals combat damage to a player, you may draw a card.";
public class BronzebeakMoa extends CardImpl {
public BronzebeakMoa (UUID ownerId) {
public BronzebeakMoa (final BronzebeakMoa card) {
public BronzebeakMoa copy() {return new BronzebeakMoa(this);
public class CarnageGladiator extends CardImpl {
public CarnageGladiator (UUID ownerId) {
public CarnageGladiator (final CarnageGladiator card) {
public CarnageGladiator copy() {return new CarnageGladiator(this);
class CarnageGladiatorTriggeredAbility extends TriggeredAbilityImpl {
public CarnageGladiatorTriggeredAbility() {
public CarnageGladiatorTriggeredAbility(final CarnageGladiatorTriggeredAbility ability) {
public CarnageGladiatorTriggeredAbility copy() {return new CarnageGladiatorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.BLOCKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature blocks, that creature's controller loses 1 life.";
public class ClearAPath extends CardImpl {
public ClearAPath(UUID ownerId) {
public ClearAPath(final ClearAPath card) {
public ClearAPath copy() {return new ClearAPath(this);
public class CouncilOfTheAbsolute extends CardImpl {
public CouncilOfTheAbsolute(UUID ownerId) {
public CouncilOfTheAbsolute(final CouncilOfTheAbsolute card) {
public CouncilOfTheAbsolute copy() {return new CouncilOfTheAbsolute(this);
public CouncilOfTheAbsoluteReplacementEffect() {
public CouncilOfTheAbsoluteReplacementEffect(final CouncilOfTheAbsoluteReplacementEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CouncilOfTheAbsoluteReplacementEffect copy() {return new CouncilOfTheAbsoluteReplacementEffect(this);
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast a card with that name (" + mageObject.getLogName() + " in play).";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public CouncilOfTheAbsoluteCostReductionEffect() {
protected CouncilOfTheAbsoluteCostReductionEffect(CouncilOfTheAbsoluteCostReductionEffect effect) {return true;return card.getName().equals(game.getState().getValue(source.getSourceId().toString() + NameACardEffect.INFO_KEY));return false;
public CouncilOfTheAbsoluteCostReductionEffect copy() {return new CouncilOfTheAbsoluteCostReductionEffect(this);
public class CryptIncursion extends CardImpl {
public CryptIncursion(UUID ownerId) {
public CryptIncursion(final CryptIncursion card) {
public CryptIncursion copy() {return new CryptIncursion(this);
class CryptIncursionEffect extends OneShotEffect {
public CryptIncursionEffect() {
public CryptIncursionEffect(final CryptIncursionEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CryptIncursionEffect copy() {return new CryptIncursionEffect(this);
public class DeputyOfAcquittals extends CardImpl {
public DeputyOfAcquittals(UUID ownerId) {
public DeputyOfAcquittals(final DeputyOfAcquittals card) {
public DeputyOfAcquittals copy() {return new DeputyOfAcquittals(this);
public class DimirCluestone extends CardImpl {
public DimirCluestone(UUID ownerId) {
public DimirCluestone(final DimirCluestone card) {
public DimirCluestone copy() {return new DimirCluestone(this);return new Dragonshift(this);
private class DragonToken extends Token {
public DragonToken() {
public class DrownInFilth extends CardImpl {
public DrownInFilth(UUID ownerId) {
public DrownInFilth(final DrownInFilth card) {
public DrownInFilth copy() {return new DrownInFilth(this);
public class EmmaraTandris extends CardImpl {
public EmmaraTandris(UUID ownerId) {
public EmmaraTandris(final EmmaraTandris card) {
public EmmaraTandris copy() {return new EmmaraTandris(this);return new ExavaRakdosBloodWitch(this);
public class FatalFumes extends CardImpl {
public FatalFumes(UUID ownerId) {
public FatalFumes(final FatalFumes card) {
public FatalFumes copy() {return new FatalFumes(this);
public class Fluxcharger extends CardImpl {
public Fluxcharger(UUID ownerId) {
public Fluxcharger(final Fluxcharger card) {
public Fluxcharger copy() {return new Fluxcharger(this);
public class GazeOfGranite extends CardImpl {
public GazeOfGranite(UUID ownerId) {
public GazeOfGranite(final GazeOfGranite card) {
public GazeOfGranite copy() {return new GazeOfGranite(this);
class GazeOfGraniteEffect extends OneShotEffect {
public GazeOfGraniteEffect() {
public GazeOfGraniteEffect(final GazeOfGraniteEffect effect) {
public GazeOfGraniteEffect copy() {return new GazeOfGraniteEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class GleamOfBattle extends CardImpl {
public GleamOfBattle(UUID ownerId) {
public GleamOfBattle(final GleamOfBattle card) {
public GleamOfBattle copy() {return new GleamOfBattle(this);
public class GoblinTestPilot extends CardImpl {
public GoblinTestPilot(UUID ownerId) {
public GoblinTestPilot(final GoblinTestPilot card) {
public GoblinTestPilot copy() {return new GoblinTestPilot(this);
public class GolgariCluestone extends CardImpl {
public GolgariCluestone(UUID ownerId) {
public GolgariCluestone(final GolgariCluestone card) {
public GolgariCluestone copy() {return new GolgariCluestone(this);
public class GruulCluestone extends CardImpl {
public GruulCluestone(UUID ownerId) {
public GruulCluestone(final GruulCluestone card) {
public GruulCluestone copy() {return new GruulCluestone(this);
public class GruulWarChant extends CardImpl {
public GruulWarChant(UUID ownerId) {
public GruulWarChant(final GruulWarChant card) {
public GruulWarChant copy() {return new GruulWarChant(this);
public class HaazdaSnareSquad extends CardImpl {
public HaazdaSnareSquad (UUID ownerId) {
public HaazdaSnareSquad (final HaazdaSnareSquad card) {
public HaazdaSnareSquad copy() {return new HaazdaSnareSquad(this);
public class HaunterOfNightveil extends CardImpl {
public HaunterOfNightveil(UUID ownerId) {
public HaunterOfNightveil(final HaunterOfNightveil card) {
public HaunterOfNightveil copy() {return new HaunterOfNightveil(this);
public class HiddenStrings extends CardImpl {
public HiddenStrings(UUID ownerId) {
public HiddenStrings(final HiddenStrings card) {
public HiddenStrings copy() {return new HiddenStrings(this);
class HiddenStringsEffect extends OneShotEffect {
public HiddenStringsEffect() {
public HiddenStringsEffect(final HiddenStringsEffect effect) {
public HiddenStringsEffect copy() {return new HiddenStringsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HiredTorturer extends CardImpl {
public HiredTorturer (UUID ownerId) {
public HiredTorturer (final HiredTorturer card) {
public HiredTorturer copy() {return new HiredTorturer(this);
class HiredTorturerEffect extends OneShotEffect {
public HiredTorturerEffect() {
public HiredTorturerEffect(final HiredTorturerEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public HiredTorturerEffect copy() {return new HiredTorturerEffect(this);
public class KorozdaGorgon extends CardImpl {
public KorozdaGorgon(UUID ownerId) {
public KorozdaGorgon(final KorozdaGorgon card) {
public KorozdaGorgon copy() {return new KorozdaGorgon(this);
public class KrasisIncubation extends CardImpl {
public KrasisIncubation(UUID ownerId) {
public KrasisIncubation(final KrasisIncubation card) {
public KrasisIncubation copy() {return new KrasisIncubation(this);
public class KraulWarrior extends CardImpl {
public KraulWarrior (UUID ownerId) {
public KraulWarrior (final KraulWarrior card) {
public KraulWarrior copy() {return new KraulWarrior(this);
public class LaviniaOfTheTenth extends CardImpl {
public LaviniaOfTheTenth (UUID ownerId) {
public LaviniaOfTheTenth (final LaviniaOfTheTenth card) {
public LaviniaOfTheTenth copy() {return new LaviniaOfTheTenth(this);
public class LegionsInitiative extends CardImpl {
public LegionsInitiative(UUID ownerId) {
public LegionsInitiative(final LegionsInitiative card) {
public LegionsInitiative copy() {return new LegionsInitiative(this);
class LegionsInitiativeExileEffect extends OneShotEffect {
public LegionsInitiativeExileEffect() {staticText = "Exile all creatures you control. At the beginning of the next combat, return those cards to the battlefield under their owner's control and those creatures gain haste until end of turn";
public LegionsInitiativeExileEffect(final LegionsInitiativeExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;
public LegionsInitiativeExileEffect copy() {return new LegionsInitiativeExileEffect(this);
class LegionsInitiativeReturnFromExileEffect extends OneShotEffect {
public LegionsInitiativeReturnFromExileEffect() {staticText = "At the beginning of the next combat, return those cards to the battlefield under their owner's control and those creatures gain haste until end of turn";
public LegionsInitiativeReturnFromExileEffect(final LegionsInitiativeReturnFromExileEffect effect) {
public LegionsInitiativeReturnFromExileEffect copy() {return new LegionsInitiativeReturnFromExileEffect(this);
public boolean apply(Game game, Ability source) {Permanent returnedCreature = game.getPermanent(cardId);if (returnedCreature != null) {effect.setTargetPointer(new FixedTarget(returnedCreature.getId()));return true;return false;
public class LyevDecree extends CardImpl {
public LyevDecree(UUID ownerId) {
public LyevDecree(final LyevDecree card) {
public LyevDecree copy() {return new LyevDecree(this);
public class MasterOfCruelties extends CardImpl {
public MasterOfCruelties(UUID ownerId) {
public MasterOfCruelties(final MasterOfCruelties card) {
public MasterOfCruelties copy() {return new MasterOfCruelties(this);
class MasterOfCrueltiesTriggeredAbility extends TriggeredAbilityImpl {
public MasterOfCrueltiesTriggeredAbility() {
public MasterOfCrueltiesTriggeredAbility(final MasterOfCrueltiesTriggeredAbility ability) {
public MasterOfCrueltiesTriggeredAbility copy() {return new MasterOfCrueltiesTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_BLOCKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks a player and isn't blocked, " + super.getRule();
class MasterOfCrueltiesEffect extends OneShotEffect {
public MasterOfCrueltiesEffect() {
public MasterOfCrueltiesEffect(final MasterOfCrueltiesEffect effect) {
public MasterOfCrueltiesEffect copy() {return new MasterOfCrueltiesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public MasterOfCrueltiesNoDamageEffect() {
public MasterOfCrueltiesNoDamageEffect(final MasterOfCrueltiesNoDamageEffect effect) {
public MasterOfCrueltiesNoDamageEffect copy() {return new MasterOfCrueltiesNoDamageEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getSourceId().equals(source.getSourceId()) && damageEvent.isCombatDamage();
public class MawOfTheObzedat extends CardImpl {
public MawOfTheObzedat(UUID ownerId) {
public MawOfTheObzedat(final MawOfTheObzedat card) {
public MawOfTheObzedat copy() {return new MawOfTheObzedat(this);
public class MazeAbomination extends CardImpl {
public MazeAbomination (UUID ownerId) {
public MazeAbomination (final MazeAbomination card) {
public MazeAbomination copy() {return new MazeAbomination(this);
public class MazeBehemoth extends CardImpl {
public MazeBehemoth (UUID ownerId) {
public MazeBehemoth (final MazeBehemoth card) {
public MazeBehemoth copy() {return new MazeBehemoth(this);
public class MazeGlider extends CardImpl {
public MazeGlider (UUID ownerId) {
public MazeGlider (final MazeGlider card) {
public MazeGlider copy() {return new MazeGlider(this);
public class MazeRusher extends CardImpl {
public MazeRusher (UUID ownerId) {
public MazeRusher (final MazeRusher card) {
public MazeRusher copy() {return new MazeRusher(this);
public class MazesEnd extends CardImpl {
public MazesEnd(UUID ownerId) {
public MazesEnd(final MazesEnd card) {
public MazesEnd copy() {return new MazesEnd(this);
class MazesEndEffect extends OneShotEffect {
public MazesEndEffect() {
public MazesEndEffect(final MazesEndEffect effect) {
public MazesEndEffect copy() {return new MazesEndEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class MazeSentinel extends CardImpl {
public MazeSentinel (UUID ownerId) {
public MazeSentinel (final MazeSentinel card) {
public MazeSentinel copy() {return new MazeSentinel(this);
public class MelekIzzetParagon extends CardImpl {
public MelekIzzetParagon(UUID ownerId) {
public MelekIzzetParagon(final MelekIzzetParagon card) {
public MelekIzzetParagon copy() {return new MelekIzzetParagon(this);
class MelekIzzetParagonTriggeredAbility extends TriggeredAbilityImpl {
public MelekIzzetParagonTriggeredAbility() {
public MelekIzzetParagonTriggeredAbility(final MelekIzzetParagonTriggeredAbility ability) {
public MelekIzzetParagonTriggeredAbility copy() {return new MelekIzzetParagonTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast an instant or sorcery from your library, copy it. You may choose new targets for the copy.";
public class MendingTouch extends CardImpl {
public MendingTouch(UUID ownerId) {
public MendingTouch(final MendingTouch card) {
public MendingTouch copy() {return new MendingTouch(this);return new Mindstatic(this);
public class MirkoVoskMindDrinker extends CardImpl {
public MirkoVoskMindDrinker (UUID ownerId) {
public MirkoVoskMindDrinker (final MirkoVoskMindDrinker card) {
public MirkoVoskMindDrinker copy() {return new MirkoVoskMindDrinker(this);
class MirkoVoskMindDrinkerEffect extends OneShotEffect {
public MirkoVoskMindDrinkerEffect() {
public MirkoVoskMindDrinkerEffect(final MirkoVoskMindDrinkerEffect effect) {
public MirkoVoskMindDrinkerEffect copy() {return new MirkoVoskMindDrinkerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class MutantsPrey extends CardImpl {
public MutantsPrey(UUID ownerId) {
public MutantsPrey(final MutantsPrey card) {
public MutantsPrey copy() {return new MutantsPrey(this);
public class NivixCyclops extends CardImpl {
public NivixCyclops(UUID ownerId) {
public NivixCyclops(final NivixCyclops card) {
public NivixCyclops copy() {return new NivixCyclops(this);
class AsThoughNoDefenderEffect extends AsThoughEffectImpl {
public AsThoughNoDefenderEffect() {
public AsThoughNoDefenderEffect(final AsThoughNoDefenderEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public AsThoughNoDefenderEffect copy() {return new AsThoughNoDefenderEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class NotionThief extends CardImpl {
public NotionThief(UUID ownerId) {
public NotionThief(final NotionThief card) {
public NotionThief copy() {return new NotionThief(this);
class NotionThiefReplacementEffect extends ReplacementEffectImpl {
public NotionThiefReplacementEffect() {
public NotionThiefReplacementEffect(final NotionThiefReplacementEffect effect) {
public NotionThiefReplacementEffect copy() {return new NotionThiefReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public class ObzedatsAid extends CardImpl {
public ObzedatsAid(UUID ownerId) {
public ObzedatsAid(final ObzedatsAid card) {
public ObzedatsAid copy() {return new ObzedatsAid(this);
public class OpalLakeGatekeepers extends CardImpl {
public OpalLakeGatekeepers (UUID ownerId) {
public OpalLakeGatekeepers (final OpalLakeGatekeepers card) {
public OpalLakeGatekeepers copy() {return new OpalLakeGatekeepers(this);
public class OrzhovCluestone extends CardImpl {
public OrzhovCluestone(UUID ownerId) {
public OrzhovCluestone(final OrzhovCluestone card) {
public OrzhovCluestone copy() {return new OrzhovCluestone(this);
public class Phytoburst extends CardImpl {
public Phytoburst(UUID ownerId) {
public Phytoburst(final Phytoburst card) {
public Phytoburst copy() {return new Phytoburst(this);
public class PilferedPlans extends CardImpl {
public PilferedPlans(UUID ownerId) {
public PilferedPlans(final PilferedPlans card) {
public PilferedPlans copy() {return new PilferedPlans(this);
public class PlasmCapture extends CardImpl {
public PlasmCapture(UUID ownerId) {
public PlasmCapture(final PlasmCapture card) {
public PlasmCapture copy() {return new PlasmCapture(this);
class PlasmCaptureCounterEffect extends OneShotEffect {
public PlasmCaptureCounterEffect() {
public PlasmCaptureCounterEffect(final PlasmCaptureCounterEffect effect) {
public PlasmCaptureCounterEffect copy() {return new PlasmCaptureCounterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class PlasmCaptureManaEffect extends ManaEffect {
public PlasmCaptureManaEffect(int amountOfMana) {
public PlasmCaptureManaEffect(final PlasmCaptureManaEffect effect) {
public PlasmCaptureManaEffect copy() {return new PlasmCaptureManaEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public Mana getMana(Game game, Ability source) {return null;return new PontiffOfBlight(this);
public class PossibilityStorm extends CardImpl {
public PossibilityStorm(UUID ownerId) {
public PossibilityStorm(final PossibilityStorm card) {
public PossibilityStorm copy() {return new PossibilityStorm(this);
class PossibilityStormTriggeredAbility extends TriggeredAbilityImpl {
public PossibilityStormTriggeredAbility() {
public PossibilityStormTriggeredAbility(final PossibilityStormTriggeredAbility ability) {
public PossibilityStormTriggeredAbility copy() {return new PossibilityStormTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a spell from his or her hand, " + super.getRule();
class PossibilityStormEffect extends OneShotEffect {
public PossibilityStormEffect() {
public PossibilityStormEffect(final PossibilityStormEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
private boolean sharesType(Card card, List<CardType> cardTypes) {return true;return false;
public PossibilityStormEffect copy() {return new PossibilityStormEffect(this);
public class ProgenitorMimic extends CardImpl {
public ProgenitorMimic(UUID ownerId) {
public ProgenitorMimic(final ProgenitorMimic card) {
public ProgenitorMimic copy() {return new ProgenitorMimic(this);
public class PunishTheEnemy extends CardImpl {
public PunishTheEnemy(UUID ownerId) {
public PunishTheEnemy(final PunishTheEnemy card) {
public PunishTheEnemy copy() {return new PunishTheEnemy(this);
public class PyrewildShaman extends CardImpl {
public PyrewildShaman (UUID ownerId) {
public PyrewildShaman (final PyrewildShaman card) {
public PyrewildShaman copy() {return new PyrewildShaman(this);
class PyrewildShamanTriggeredAbility extends TriggeredAbilityImpl {
public PyrewildShamanTriggeredAbility() {
public PyrewildShamanTriggeredAbility(final PyrewildShamanTriggeredAbility ability) {
public PyrewildShamanTriggeredAbility copy() {return new PyrewildShamanTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever one or more creatures you control deal combat damage to a player, if {this} is in your graveyard, you may pay {3}. If you do, return {this} to your hand.";return new RakdosCluestone(this);return new RakdosDrake(this);
public class RalZarek extends CardImpl {
public RalZarek(UUID ownerId) {
public RalZarek(final RalZarek card) {
public RalZarek copy() {return new RalZarek(this);
class RalZarekTapUntapEffect extends OneShotEffect {
public RalZarekTapUntapEffect() {
public RalZarekTapUntapEffect(final RalZarekTapUntapEffect effect) {
public RalZarekTapUntapEffect copy() {return new RalZarekTapUntapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class RalZarekExtraTurnsEffect extends OneShotEffect {
public RalZarekExtraTurnsEffect() {
public RalZarekExtraTurnsEffect(final RalZarekExtraTurnsEffect effect) {
public RalZarekExtraTurnsEffect copy() {return new RalZarekExtraTurnsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ReapIntellect extends CardImpl {
public ReapIntellect(UUID ownerId) {
public ReapIntellect(final ReapIntellect card) {
public ReapIntellect copy() {return new ReapIntellect(this);
class ReapIntellectEffect extends OneShotEffect {
public ReapIntellectEffect() {
public ReapIntellectEffect(final ReapIntellectEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ReapIntellectEffect copy() {return new ReapIntellectEffect(this);
public class RenounceTheGuilds extends CardImpl {
public RenounceTheGuilds(UUID ownerId) {
public RenounceTheGuilds(final RenounceTheGuilds card) {
public RenounceTheGuilds copy() {return new RenounceTheGuilds(this);
public class RestoreThePeace extends CardImpl {
public RestoreThePeace(UUID ownerId) {
public RestoreThePeace(final RestoreThePeace card) {
public RestoreThePeace copy() {return new RestoreThePeace(this);
class RestoreThePeaceEffect extends OneShotEffect {
public RestoreThePeaceEffect() {
public RestoreThePeaceEffect(final RestoreThePeaceEffect effect) {
public RestoreThePeaceEffect copy() {return new RestoreThePeaceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RiotControl extends CardImpl {
public RiotControl(UUID ownerId) {
public RiotControl(final RiotControl card) {
public RiotControl copy() {return new RiotControl(this);
public class RiotPiker extends CardImpl {
public RiotPiker (UUID ownerId) {
public RiotPiker (final RiotPiker card) {
public RiotPiker copy() {return new RiotPiker(this);
public class RotFarmSkeleton extends CardImpl {
public RotFarmSkeleton (UUID ownerId) {
public RotFarmSkeleton (final RotFarmSkeleton card) {
public RotFarmSkeleton copy() {return new RotFarmSkeleton(this);
public class RubblebeltMaaka extends CardImpl {
public RubblebeltMaaka (UUID ownerId) {
public RubblebeltMaaka (final RubblebeltMaaka card) {
public RubblebeltMaaka copy() {return new RubblebeltMaaka(this);
public class RunnersBane extends CardImpl {
public RunnersBane(UUID ownerId) {
public RunnersBane(final RunnersBane card) {
public RunnersBane copy() {return new RunnersBane(this);
class RunnersBaneEffect extends OneShotEffect {
RunnersBaneEffect() {
RunnersBaneEffect(final RunnersBaneEffect effect) {
public boolean apply(Game game, Ability source) {return permanent.tap(game);return false;
public RunnersBaneEffect copy() {return new RunnersBaneEffect();
public class RuricTharTheUnbowed extends CardImpl {
public RuricTharTheUnbowed(UUID ownerId) {
public RuricTharTheUnbowed(final RuricTharTheUnbowed card) {
public RuricTharTheUnbowed copy() {return new RuricTharTheUnbowed(this);
class RuricTharTheUnbowedAbility extends TriggeredAbilityImpl {
public RuricTharTheUnbowedAbility() {
public RuricTharTheUnbowedAbility(final RuricTharTheUnbowedAbility ability) {
public RuricTharTheUnbowedAbility copy() {return new RuricTharTheUnbowedAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a noncreature spell, Ruric Thar deals 6 damage to that player.";
public class SaruliGatekeepers extends CardImpl {
public SaruliGatekeepers (UUID ownerId) {
public SaruliGatekeepers (final SaruliGatekeepers card) {
public SaruliGatekeepers copy() {return new SaruliGatekeepers(this);
public class SavagebornHydra extends CardImpl {
public SavagebornHydra(UUID ownerId) {
public SavagebornHydra(final SavagebornHydra card) {
public SavagebornHydra copy() {return new SavagebornHydra(this);
public class ScabClanGiant extends CardImpl {
public ScabClanGiant(UUID ownerId) {
public ScabClanGiant(final ScabClanGiant card) {
public ScabClanGiant copy() {return new ScabClanGiant(this);
class ScabClanGiantEffect extends OneShotEffect {
public ScabClanGiantEffect() {
public ScabClanGiantEffect(final ScabClanGiantEffect effect) {
public ScabClanGiantEffect copy() {return new ScabClanGiantEffect(this);
public boolean apply(Game game, Ability source) {return creature1.fight(creature2, source, game);return false;
public class ScionOfVituGhazi extends CardImpl {
public ScionOfVituGhazi (UUID ownerId) {
public ScionOfVituGhazi (final ScionOfVituGhazi card) {
public ScionOfVituGhazi copy() {return new ScionOfVituGhazi(this);
public class SelesnyaCluestone extends CardImpl {
public SelesnyaCluestone(UUID ownerId) {
public SelesnyaCluestone(final SelesnyaCluestone card) {
public SelesnyaCluestone copy() {return new SelesnyaCluestone(this);
public class Showstopper extends CardImpl {
public Showstopper (UUID ownerId) {
public Showstopper (final Showstopper card) {
public Showstopper copy() {return new Showstopper(this);
public class SimicCluestone extends CardImpl {
public SimicCluestone(UUID ownerId) {
public SimicCluestone(final SimicCluestone card) {
public SimicCluestone copy() {return new SimicCluestone(this);
public class SinCollector extends CardImpl {
public SinCollector(UUID ownerId) {
public SinCollector(final SinCollector card) {
public SinCollector copy() {return new SinCollector(this);
public class SinisterPossession extends CardImpl {
public SinisterPossession(UUID ownerId) {
public SinisterPossession(final SinisterPossession card) {
public SinisterPossession copy() {return new SinisterPossession(this);
public class SireOfInsanity extends CardImpl {
public SireOfInsanity (UUID ownerId) {
public SireOfInsanity (final SireOfInsanity card) {
public SireOfInsanity copy() {return new SireOfInsanity(this);
class SireOfInsanityEffect extends OneShotEffect {
SireOfInsanityEffect() {
SireOfInsanityEffect(final SireOfInsanityEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public SireOfInsanityEffect copy() {return new SireOfInsanityEffect(this);
public class SpeciesGorger extends CardImpl {
public SpeciesGorger(UUID ownerId) {
public SpeciesGorger(final SpeciesGorger card) {
public SpeciesGorger copy() {return new SpeciesGorger(this);
public class SpikeJester extends CardImpl {
public SpikeJester(UUID ownerId) {
public SpikeJester(final SpikeJester card) {
public SpikeJester copy() {return new SpikeJester(this);
public class SteepleRoc extends CardImpl {
public SteepleRoc (UUID ownerId) {
public SteepleRoc (final SteepleRoc card) {
public SteepleRoc copy() {return new SteepleRoc(this);
public class SunspireGatekeepers extends CardImpl {
public SunspireGatekeepers (UUID ownerId) {
public SunspireGatekeepers (final SunspireGatekeepers card) {
public SunspireGatekeepers copy() {return new SunspireGatekeepers(this);
public class TajicBladeOfTheLegion extends CardImpl {
public TajicBladeOfTheLegion(UUID ownerId) {
public TajicBladeOfTheLegion(final TajicBladeOfTheLegion card) {
public TajicBladeOfTheLegion copy() {return new TajicBladeOfTheLegion(this);
public class TeysaEnvoyOfGhosts extends CardImpl {
public TeysaEnvoyOfGhosts(UUID ownerId) {
public TeysaEnvoyOfGhosts(final TeysaEnvoyOfGhosts card) {
public TeysaEnvoyOfGhosts copy() {return new TeysaEnvoyOfGhosts(this);
class TeysaEnvoyOfGhostsTriggeredAbility extends TriggeredAbilityImpl {
public TeysaEnvoyOfGhostsTriggeredAbility() {
public TeysaEnvoyOfGhostsTriggeredAbility(final TeysaEnvoyOfGhostsTriggeredAbility ability) {
public TeysaEnvoyOfGhostsTriggeredAbility copy() {return new TeysaEnvoyOfGhostsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature deals combat damage to you, destroy that creature. Put a 1/1 white and black Spirit creature token with flying onto the battlefield.";
class TeysaEnvoyOfGhostsToken extends Token {
TeysaEnvoyOfGhostsToken() {return new ThrashingMossdog(this);
public class TitheDrinker extends CardImpl {
public TitheDrinker(UUID ownerId) {
public TitheDrinker(final TitheDrinker card) {
public TitheDrinker copy() {return new TitheDrinker(this);
public class TrostanisSummoner extends CardImpl {
public TrostanisSummoner(UUID ownerId) {
public TrostanisSummoner(final TrostanisSummoner card) {
public TrostanisSummoner copy() {return new TrostanisSummoner(this);
class RhinoToken extends Token {
public RhinoToken() {
public class UbulSarGatekeepers extends CardImpl {
public UbulSarGatekeepers(UUID ownerId) {
public UbulSarGatekeepers(final UbulSarGatekeepers card) {
public UbulSarGatekeepers copy() {return new UbulSarGatekeepers(this);
public class UncoveredClues extends CardImpl {
public UncoveredClues(UUID ownerId) {
public UncoveredClues(final UncoveredClues card) {
public UncoveredClues copy() {return new UncoveredClues(this);
public class UnflinchingCourage extends CardImpl {
public UnflinchingCourage(UUID ownerId) {
public UnflinchingCourage(final UnflinchingCourage card) {
public UnflinchingCourage copy() {return new UnflinchingCourage(this);
public class VarolzTheScarStriped extends CardImpl {
public VarolzTheScarStriped(UUID ownerId) {
public VarolzTheScarStriped(final VarolzTheScarStriped card) {
public VarolzTheScarStriped copy() {return new VarolzTheScarStriped(this);
class VarolzTheScarStripedEffect extends ContinuousEffectImpl {
VarolzTheScarStripedEffect() {
VarolzTheScarStripedEffect(final VarolzTheScarStripedEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public VarolzTheScarStripedEffect copy() {return new VarolzTheScarStripedEffect(this);
public class ViashinoFirstblade extends CardImpl {
public ViashinoFirstblade(UUID ownerId) {
public ViashinoFirstblade(final ViashinoFirstblade card) {
public ViashinoFirstblade copy() {return new ViashinoFirstblade(this);
public class VoiceOfResurgence extends CardImpl {
public VoiceOfResurgence(UUID ownerId) {
public VoiceOfResurgence(final VoiceOfResurgence card) {
public VoiceOfResurgence copy() {return new VoiceOfResurgence(this);
class VoiceOfResurgenceTriggeredAbility extends TriggeredAbilityImpl {
public VoiceOfResurgenceTriggeredAbility() {
public VoiceOfResurgenceTriggeredAbility(final VoiceOfResurgenceTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST || event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return zce.getFromZone().equals(Zone.BATTLEFIELD) && zce.getToZone().equals(Zone.GRAVEYARD);return false;
public String getRule() {return "Whenever an opponent casts a spell during your turn or when {this} dies, put a green and white Elemental creature token onto the battlefield with \"This creature's power and toughness are each equal to the number of creatures you control.";
public VoiceOfResurgenceTriggeredAbility copy() {return new VoiceOfResurgenceTriggeredAbility(this);
class VoiceOfResurgenceToken extends Token {
public VoiceOfResurgenceToken() {
public class VorelOfTheHullClade extends CardImpl {
public VorelOfTheHullClade(UUID ownerId) {
public VorelOfTheHullClade(final VorelOfTheHullClade card) {
public VorelOfTheHullClade copy() {return new VorelOfTheHullClade(this);
class VorelOfTheHullCladeEffect extends OneShotEffect {
public VorelOfTheHullCladeEffect() {
public VorelOfTheHullCladeEffect(VorelOfTheHullCladeEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public VorelOfTheHullCladeEffect copy() {return new VorelOfTheHullCladeEffect(this);
public class WakeTheReflections extends CardImpl {
public WakeTheReflections(UUID ownerId) {
public WakeTheReflections(final WakeTheReflections card) {
public WakeTheReflections copy() {return new WakeTheReflections(this);
public class WarleadersHelix extends CardImpl {
public WarleadersHelix(UUID ownerId) {
public WarleadersHelix(final WarleadersHelix card) {
public WarleadersHelix copy() {return new WarleadersHelix(this);
public List<String> getRules() {return rules;
public class WoodlotCrawler extends CardImpl {
public WoodlotCrawler (UUID ownerId) {
public WoodlotCrawler (final WoodlotCrawler card) {
public WoodlotCrawler copy() {return new WoodlotCrawler(this);
public class ZhurTaaAncient extends CardImpl {
public ZhurTaaAncient(UUID ownerId) {
public ZhurTaaAncient(final ZhurTaaAncient card) {
public ZhurTaaAncient copy() {return new ZhurTaaAncient(this);
public class ZhurTaaDruid extends CardImpl {
public ZhurTaaDruid(UUID ownerId) {
public ZhurTaaDruid(final ZhurTaaDruid card) {
public ZhurTaaDruid copy() {return new ZhurTaaDruid(this);
class ZhurTaaDruidAbility extends TriggeredAbilityImpl {
public ZhurTaaDruidAbility() {
public ZhurTaaDruidAbility(final ZhurTaaDruidAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId().equals(getSourceId());
public String getRule() {return new StringBuilder("Whenever you tap {this} for mana, ").append(super.getRule()).toString() ;
public ZhurTaaDruidAbility copy() {return new ZhurTaaDruidAbility(this);
public class AcidSpewerDragon extends CardImpl {
public AcidSpewerDragon(UUID ownerId) {
public AcidSpewerDragon(final AcidSpewerDragon card) {
public AcidSpewerDragon copy() {return new AcidSpewerDragon(this);
public class AerieBowmasters extends CardImpl {
public AerieBowmasters(UUID ownerId) {
public AerieBowmasters(final AerieBowmasters card) {
public AerieBowmasters copy() {return new AerieBowmasters(this);
public class AinokArtillerist extends CardImpl {
public AinokArtillerist(UUID ownerId) {
public AinokArtillerist(final AinokArtillerist card) {
public AinokArtillerist copy() {return new AinokArtillerist(this);
public class AinokSurvivalist extends CardImpl {
public AinokSurvivalist(UUID ownerId) {
public AinokSurvivalist(final AinokSurvivalist card) {
public AinokSurvivalist copy() {return new AinokSurvivalist(this);
public class AmbuscadeShaman extends CardImpl {
public AmbuscadeShaman(UUID ownerId) {
public AmbuscadeShaman(final AmbuscadeShaman card) {
public AmbuscadeShaman copy() {return new AmbuscadeShaman(this);
class AmbuscadeShamanTriggeredAbility extends TriggeredAbilityImpl {
AmbuscadeShamanTriggeredAbility(Effect effect) {
AmbuscadeShamanTriggeredAbility(final AmbuscadeShamanTriggeredAbility ability) {
public AmbuscadeShamanTriggeredAbility copy() {return new AmbuscadeShamanTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} or another creature enters the battlefield under your control, that creature gets +2/+2 until end of turn.";
public class AnafenzaKinTreeSpirit extends CardImpl {
public AnafenzaKinTreeSpirit(UUID ownerId) {
public AnafenzaKinTreeSpirit(final AnafenzaKinTreeSpirit card) {
public AnafenzaKinTreeSpirit copy() {return new AnafenzaKinTreeSpirit(this);
public class AncestralStatue extends CardImpl {
public AncestralStatue(UUID ownerId) {
public AncestralStatue(final AncestralStatue card) {
public AncestralStatue copy() {return new AncestralStatue(this);
public class AncientCarp extends CardImpl {
public AncientCarp(UUID ownerId) {
public AncientCarp(final AncientCarp card) {
public AncientCarp copy() {return new AncientCarp(this);
public class Anticipate extends CardImpl {
public Anticipate(UUID ownerId) {
public Anticipate(final Anticipate card) {
public Anticipate copy() {return new Anticipate(this);
public class ArashinForemost extends CardImpl {
public ArashinForemost(UUID ownerId) {
public ArashinForemost(final ArashinForemost card) {
public ArashinForemost copy() {return new ArashinForemost(this);
class ArashinForemostAbility extends TriggeredAbilityImpl {
public ArashinForemostAbility() {
public ArashinForemostAbility(final ArashinForemostAbility ability) {
public ArashinForemostAbility copy() {return new ArashinForemostAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED || event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "Whenever {this} enters the battlefield or attacks, another target Warrior creature you control gains double strike until end of turn";
public class ArashinSovereign extends CardImpl {
public ArashinSovereign(UUID ownerId) {
public ArashinSovereign(final ArashinSovereign card) {
public ArashinSovereign copy() {return new ArashinSovereign(this);
class ArashinSovereignEffect extends OneShotEffect {
public ArashinSovereignEffect() {
public ArashinSovereignEffect(final ArashinSovereignEffect effect) {
public ArashinSovereignEffect copy() {return new ArashinSovereignEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ArtfulManeuver extends CardImpl {
public ArtfulManeuver(UUID ownerId) {
public ArtfulManeuver(final ArtfulManeuver card) {
public ArtfulManeuver copy() {return new ArtfulManeuver(this);
public class AssaultFormation extends CardImpl {
public AssaultFormation(UUID ownerId) {
public AssaultFormation(final AssaultFormation card) {
public AssaultFormation copy() {return new AssaultFormation(this);
class AssaultFormationCombatDamageRuleEffect extends ContinuousEffectImpl {
public AssaultFormationCombatDamageRuleEffect() {
public AssaultFormationCombatDamageRuleEffect(final AssaultFormationCombatDamageRuleEffect effect) {
public AssaultFormationCombatDamageRuleEffect copy() {return new AssaultFormationCombatDamageRuleEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class AtarkaBeastbreaker extends CardImpl {
public AtarkaBeastbreaker(UUID ownerId) {
public AtarkaBeastbreaker(final AtarkaBeastbreaker card) {
public AtarkaBeastbreaker copy() {return new AtarkaBeastbreaker(this);
public class AtarkaEfreet extends CardImpl {
public AtarkaEfreet(UUID ownerId) {
public AtarkaEfreet(final AtarkaEfreet card) {
public AtarkaEfreet copy() {return new AtarkaEfreet(this);
public class AtarkasCommand extends CardImpl {
public AtarkasCommand(UUID ownerId) {
public AtarkasCommand(final AtarkasCommand card) {
public AtarkasCommand copy() {return new AtarkasCommand(this);
public class AvatarOfTheResolute extends CardImpl {
public AvatarOfTheResolute(UUID ownerId) {
public AvatarOfTheResolute(final AvatarOfTheResolute card) {
public AvatarOfTheResolute copy() {return new AvatarOfTheResolute(this);
public class AvenSunstriker extends CardImpl {
public AvenSunstriker(UUID ownerId) {
public AvenSunstriker(final AvenSunstriker card) {
public AvenSunstriker copy() {return new AvenSunstriker(this);
public class AvenTactician extends CardImpl {
public AvenTactician(UUID ownerId) {
public AvenTactician(final AvenTactician card) {
public AvenTactician copy() {return new AvenTactician(this);
public class BelltollDragon extends CardImpl {
public BelltollDragon(UUID ownerId) {
public BelltollDragon(final BelltollDragon card) {
public BelltollDragon copy() {return new BelltollDragon(this);
public class BerserkersOnslaught extends CardImpl {
public BerserkersOnslaught(UUID ownerId) {
public BerserkersOnslaught(final BerserkersOnslaught card) {
public BerserkersOnslaught copy() {return new BerserkersOnslaught(this);
public class BlessedReincarnation extends CardImpl {
public BlessedReincarnation(UUID ownerId) {
public BlessedReincarnation(final BlessedReincarnation card) {
public BlessedReincarnation copy() {return new BlessedReincarnation(this);
class BlessedReincarnationEffect extends OneShotEffect {
public BlessedReincarnationEffect() {
public BlessedReincarnationEffect(final BlessedReincarnationEffect effect) {
public BlessedReincarnationEffect copy() {return new BlessedReincarnationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BloodChinFanatic extends CardImpl {
public BloodChinFanatic(UUID ownerId) {
public BloodChinFanatic(final BloodChinFanatic card) {
public BloodChinFanatic copy() {return new BloodChinFanatic(this);
public class BloodChinRager extends CardImpl {
public BloodChinRager(UUID ownerId) {
public BloodChinRager(final BloodChinRager card) {
public BloodChinRager copy() {return new BloodChinRager(this);
public class BoltwingMarauder extends CardImpl {
public BoltwingMarauder(UUID ownerId) {
public BoltwingMarauder(final BoltwingMarauder card) {
public BoltwingMarauder copy() {return new BoltwingMarauder(this);
public class ButchersGlee extends CardImpl {
public ButchersGlee(UUID ownerId) {
public ButchersGlee(final ButchersGlee card) {
public ButchersGlee copy() {return new ButchersGlee(this);
public class CenterSoul extends CardImpl {
public CenterSoul(UUID ownerId) {
public CenterSoul(final CenterSoul card) {
public CenterSoul copy() {return new CenterSoul(this);
public class ChampionOfArashin extends CardImpl {
public ChampionOfArashin(UUID ownerId) {
public ChampionOfArashin(final ChampionOfArashin card) {
public ChampionOfArashin copy() {return new ChampionOfArashin(this);
public class CircleOfElders extends CardImpl {
public CircleOfElders(UUID ownerId) {
public CircleOfElders(final CircleOfElders card) {
public CircleOfElders copy() {return new CircleOfElders(this);
public class CloneLegion extends CardImpl {
public CloneLegion(UUID ownerId) {
public CloneLegion(final CloneLegion card) {
public CloneLegion copy() {return new CloneLegion(this);
class CloneLegionEffect extends OneShotEffect {
public CloneLegionEffect() {
public CloneLegionEffect(final CloneLegionEffect effect) {
public CloneLegionEffect copy() {return new CloneLegionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CoatWithVenom extends CardImpl {
public CoatWithVenom(UUID ownerId) {
public CoatWithVenom(final CoatWithVenom card) {
public CoatWithVenom copy() {return new CoatWithVenom(this);
public class CollectedCompany extends CardImpl {
public CollectedCompany(UUID ownerId) {
public CollectedCompany(final CollectedCompany card) {
public CollectedCompany copy() {return new CollectedCompany(this);return new ColossodonYearling(this);
public class Contradict extends CardImpl {
public Contradict(UUID ownerId) {
public Contradict(final Contradict card) {
public Contradict copy() {return new Contradict(this);
public class Corpseweft extends CardImpl {
public Corpseweft(UUID ownerId) {
public Corpseweft(final Corpseweft card) {
public Corpseweft copy() {return new Corpseweft(this);
class CorpseweftEffect extends OneShotEffect {
public CorpseweftEffect() {
public CorpseweftEffect(final CorpseweftEffect effect) {
public CorpseweftEffect copy() {return new CorpseweftEffect(this);
public boolean apply(Game game, Ability source) {return false;
class CorpseweftZombieToken extends Token {
public CorpseweftZombieToken(int power, int toughness) {
public class CraterElemental extends CardImpl {
public CraterElemental(UUID ownerId) {
public CraterElemental(final CraterElemental card) {
public CraterElemental copy() {return new CraterElemental(this);
public class CunningBreezedancer extends CardImpl {
public CunningBreezedancer(UUID ownerId) {
public CunningBreezedancer(final CunningBreezedancer card) {
public CunningBreezedancer copy() {return new CunningBreezedancer(this);
public class CustodianOfTheTrove extends CardImpl {
public CustodianOfTheTrove(UUID ownerId) {
public CustodianOfTheTrove(final CustodianOfTheTrove card) {
public CustodianOfTheTrove copy() {return new CustodianOfTheTrove(this);
public class DamnablePact extends CardImpl {
public DamnablePact(UUID ownerId) {
public DamnablePact(final DamnablePact card) {
public DamnablePact copy() {return new DamnablePact(this);
class DamnablePactEffect extends OneShotEffect {
public DamnablePactEffect() {
public DamnablePactEffect(DamnablePactEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DamnablePactEffect copy() {return new DamnablePactEffect(this);
public class DanceOfTheSkywise extends CardImpl {
public DanceOfTheSkywise(UUID ownerId) {
public DanceOfTheSkywise(final DanceOfTheSkywise card) {
public DanceOfTheSkywise copy() {return new DanceOfTheSkywise(this);
private class DragonIllusionToken extends Token {
public DragonIllusionToken() {
public class DeadlyWanderings extends CardImpl {
public DeadlyWanderings(UUID ownerId) {
public DeadlyWanderings(final DeadlyWanderings card) {
public DeadlyWanderings copy() {return new DeadlyWanderings(this);
public class DeathbringerRegent extends CardImpl {
public DeathbringerRegent(UUID ownerId) {
public DeathbringerRegent(final DeathbringerRegent card) {
public DeathbringerRegent copy() {return new DeathbringerRegent(this);
class DeathbringerRegentCondition implements Condition {
public boolean apply(Game game, Ability source) {return applies;
public String toString() {return "you cast it from your hand and there are five or more other creatures on the battlefield";
public class DeathmistRaptor extends CardImpl {
public DeathmistRaptor(UUID ownerId) {
public DeathmistRaptor(final DeathmistRaptor card) {
public DeathmistRaptor copy() {return new DeathmistRaptor(this);
class DeathmistRaptorEffect extends OneShotEffect {
public DeathmistRaptorEffect() {this.staticText = "you may return {this} from your graveyard to the battlefield face up or face down";
public DeathmistRaptorEffect(final DeathmistRaptorEffect effect) {
public DeathmistRaptorEffect copy() {return new DeathmistRaptorEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards((Card) sourceObject, Zone.BATTLEFIELD, source, game, false,return false;
public class Defeat extends CardImpl {
public Defeat(UUID ownerId) {
public Defeat(final Defeat card) {
public Defeat copy() {return new Defeat(this);
public class DenProtector extends CardImpl {
public DenProtector(UUID ownerId) {
public DenProtector(final DenProtector card) {
public DenProtector copy() {return new DenProtector(this);
class DenProtectorRestrictionEffect extends RestrictionEffect {
public DenProtectorRestrictionEffect() {
public DenProtectorRestrictionEffect(final DenProtectorRestrictionEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getId().equals(source.getSourceId());
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return (blocker.getPower().getValue() >= attacker.getPower().getValue());
public DenProtectorRestrictionEffect copy() {return new DenProtectorRestrictionEffect(this);
public class DescentOfTheDragons extends CardImpl {
public DescentOfTheDragons(UUID ownerId) {
public DescentOfTheDragons(final DescentOfTheDragons card) {
public DescentOfTheDragons copy() {return new DescentOfTheDragons(this);
class DescentOfTheDragonsEffect extends OneShotEffect {
public DescentOfTheDragonsEffect() {
public DescentOfTheDragonsEffect(final DescentOfTheDragonsEffect effect) {
public DescentOfTheDragonsEffect copy() {return new DescentOfTheDragonsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DirgurNemesis extends CardImpl {
public DirgurNemesis(UUID ownerId) {
public DirgurNemesis(final DirgurNemesis card) {
public DirgurNemesis copy() {return new DirgurNemesis(this);
public class DisplayOfDominance extends CardImpl {
public DisplayOfDominance(UUID ownerId) {
public DisplayOfDominance(final DisplayOfDominance card) {
public DisplayOfDominance copy() {return new DisplayOfDominance(this);
public DisplayOfDominanceEffect() {
public DisplayOfDominanceEffect(final DisplayOfDominanceEffect effect) {
public DisplayOfDominanceEffect copy() {return new DisplayOfDominanceEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGET;
public boolean applies(GameEvent event, Ability ability, Game game) {return permanent != null && permanent.getControllerId().equals(ability.getControllerId());return false;
public class DraconicRoar extends CardImpl {
public DraconicRoar(UUID ownerId) {
public void adjustCosts(Ability ability, Game game) {
public DraconicRoar(final DraconicRoar card) {
public DraconicRoar copy() {return new DraconicRoar(this);
class DraconicRoarEffect extends OneShotEffect {
public DraconicRoarEffect() {
public DraconicRoarEffect(final DraconicRoarEffect effect) {
public DraconicRoarEffect copy() {return new DraconicRoarEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DragonHunter extends CardImpl {
public DragonHunter(UUID ownerId) {
public DragonHunter(final DragonHunter card) {
public DragonHunter copy() {return new DragonHunter(this);
class CanBlockDragonsAsThoughtIthadReachEffect extends AsThoughEffectImpl {
public CanBlockDragonsAsThoughtIthadReachEffect(Duration duration) {
public CanBlockDragonsAsThoughtIthadReachEffect(final CanBlockDragonsAsThoughtIthadReachEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CanBlockDragonsAsThoughtIthadReachEffect copy() {return new CanBlockDragonsAsThoughtIthadReachEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return sourceId.equals(source.getSourceId());return new DragonloftIdol(this);
public class DragonlordKolaghan extends CardImpl {
public DragonlordKolaghan(UUID ownerId) {
public DragonlordKolaghan(final DragonlordKolaghan card) {
public DragonlordKolaghan copy() {return new DragonlordKolaghan(this);
class DragonlordKolaghanTriggeredAbility extends TriggeredAbilityImpl {
public DragonlordKolaghanTriggeredAbility(Effect effect) {
public DragonlordKolaghanTriggeredAbility(final DragonlordKolaghanTriggeredAbility ability) {
public DragonlordKolaghanTriggeredAbility copy() {return new DragonlordKolaghanTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent casts a creature or planeswalker spell with the same name as a card in their graveyard, " + super.getRule();
public class DragonlordOjutai extends CardImpl {
public DragonlordOjutai(UUID ownerId) {
public DragonlordOjutai(final DragonlordOjutai card) {
public DragonlordOjutai copy() {return new DragonlordOjutai(this);
public class DragonlordSilumgar extends CardImpl {
public DragonlordSilumgar(UUID ownerId) {
public DragonlordSilumgar(final DragonlordSilumgar card) {
public DragonlordSilumgar copy() {return new DragonlordSilumgar(this);
class DragonlordSilumgarEffect extends OneShotEffect {
public DragonlordSilumgarEffect() {
public DragonlordSilumgarEffect(final DragonlordSilumgarEffect effect) {
public DragonlordSilumgarEffect copy() {return new DragonlordSilumgarEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class DragonlordsPrerogative extends CardImpl {
public DragonlordsPrerogative(UUID ownerId) {
public void adjustCosts(Ability ability, Game game) {
public DragonlordsPrerogative(final DragonlordsPrerogative card) {
public DragonlordsPrerogative copy() {return new DragonlordsPrerogative(this);
class DragonlordsPrerogativeCondition implements Condition {
public boolean apply(Game game, Ability source) {return applies;
public class DragonlordsServant extends CardImpl {
public DragonlordsServant(UUID ownerId) {
public DragonlordsServant(final DragonlordsServant card) {
public DragonlordsServant copy() {return new DragonlordsServant(this);
public class DragonScarredBear extends CardImpl {
public DragonScarredBear(UUID ownerId) {
public DragonScarredBear(final DragonScarredBear card) {
public DragonScarredBear copy() {return new DragonScarredBear(this);
public class DragonsEyeSentry extends CardImpl {
public DragonsEyeSentry(UUID ownerId) {
public DragonsEyeSentry(final DragonsEyeSentry card) {
public DragonsEyeSentry copy() {return new DragonsEyeSentry(this);
public class DragonTempest extends CardImpl {
public DragonTempest(UUID ownerId) {
public DragonTempest(final DragonTempest card) {
public DragonTempest copy() {return new DragonTempest(this);
class DragonTempestDamageEffect extends OneShotEffect {
public DragonTempestDamageEffect() {
public DragonTempestDamageEffect(final DragonTempestDamageEffect effect) {
public DragonTempestDamageEffect copy() {return new DragonTempestDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DragonWhisperer extends CardImpl {
public DragonWhisperer(UUID ownerId) {
public DragonWhisperer(final DragonWhisperer card) {
public DragonWhisperer copy() {return new DragonWhisperer(this);
public class DromokaCaptain extends CardImpl {
public DromokaCaptain(UUID ownerId) {
public DromokaCaptain(final DromokaCaptain card) {
public DromokaCaptain copy() {return new DromokaCaptain(this);
public class DromokaDunecaster extends CardImpl {
public DromokaDunecaster(UUID ownerId) {
public DromokaDunecaster(final DromokaDunecaster card) {
public DromokaDunecaster copy() {return new DromokaDunecaster(this);
public class DromokaMonument extends CardImpl {
public DromokaMonument(UUID ownerId) {
public DromokaMonument(final DromokaMonument card) {
public DromokaMonument copy() {return new DromokaMonument(this);
private class DromokaMonumentToken extends Token {
DromokaMonumentToken() {
public class DromokasCommand extends CardImpl {
public DromokasCommand(UUID ownerId) {return new DromokasGift(this);
public class DromokaWarrior extends CardImpl {
public DromokaWarrior(UUID ownerId) {
public DromokaWarrior(final DromokaWarrior card) {
public DromokaWarrior copy() {return new DromokaWarrior(this);return new DutifulAttendant(this);
public class EchoesOfTheKinTree extends CardImpl {
public EchoesOfTheKinTree(UUID ownerId) {
public EchoesOfTheKinTree(final EchoesOfTheKinTree card) {
public EchoesOfTheKinTree copy() {return new EchoesOfTheKinTree(this);
public class ElusiveSpellfist extends CardImpl {
public ElusiveSpellfist(UUID ownerId) {
public ElusiveSpellfist(final ElusiveSpellfist card) {
public ElusiveSpellfist copy() {return new ElusiveSpellfist(this);
public class EnduringVictory extends CardImpl {
public EnduringVictory(UUID ownerId) {
public EnduringVictory(final EnduringVictory card) {
public EnduringVictory copy() {return new EnduringVictory(this);
public class EpicConfrontation extends CardImpl {
public EpicConfrontation(UUID ownerId) {
public EpicConfrontation(final EpicConfrontation card) {
public EpicConfrontation copy() {return new EpicConfrontation(this);
public class FateForgotten extends CardImpl {
public FateForgotten(UUID ownerId) {
public FateForgotten(final FateForgotten card) {
public FateForgotten copy() {return new FateForgotten(this);
public class Flatten extends CardImpl {
public Flatten(UUID ownerId) {
public Flatten(final Flatten card) {
public Flatten copy() {return new Flatten(this);
public class FoeRazerRegent extends CardImpl {
public FoeRazerRegent(UUID ownerId) {
public FoeRazerRegent(final FoeRazerRegent card) {
public FoeRazerRegent copy() {return new FoeRazerRegent(this);
class FoeRazerRegentTriggeredAbility extends TriggeredAbilityImpl {
public FoeRazerRegentTriggeredAbility() {
public FoeRazerRegentTriggeredAbility(final FoeRazerRegentTriggeredAbility ability) {
public FoeRazerRegentTriggeredAbility copy() {return new FoeRazerRegentTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(EventType.FIGHTED_PERMANENT);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control fights, put two +1/+1 counters on it at the beginning of the next end step.";
class FoeRazerRegentDelayedTriggeredAbility extends DelayedTriggeredAbility {
public FoeRazerRegentDelayedTriggeredAbility() {
public FoeRazerRegentDelayedTriggeredAbility(final FoeRazerRegentDelayedTriggeredAbility ability) {
public FoeRazerRegentDelayedTriggeredAbility copy() {return new FoeRazerRegentDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "put two +1/+1 counters on it at the beginning of the next end step";
public class FoulRenewal extends CardImpl {
public FoulRenewal(UUID ownerId) {
public FoulRenewal(final FoulRenewal card) {
public FoulRenewal copy() {return new FoulRenewal(this);
class FoulRenewalEffect extends OneShotEffect {
public FoulRenewalEffect() {this.staticText = "Return target creature card from your graveyard to your hand. Target creature gets -X/-X until end of turn, where X is the toughness of the card returned this way";
public FoulRenewalEffect(final FoulRenewalEffect effect) {
public FoulRenewalEffect copy() {return new FoulRenewalEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FoulTongueInvocation extends CardImpl {
public FoulTongueInvocation(UUID ownerId) {
public void adjustCosts(Ability ability, Game game) {
public FoulTongueInvocation(final FoulTongueInvocation card) {
public FoulTongueInvocation copy() {return new FoulTongueInvocation(this);
class FoulTongueInvocationEffect extends OneShotEffect {
public FoulTongueInvocationEffect() {
public FoulTongueInvocationEffect(final FoulTongueInvocationEffect effect) {
public FoulTongueInvocationEffect copy() {return new FoulTongueInvocationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FoulTongueShriek extends CardImpl {
public FoulTongueShriek(UUID ownerId) {
public FoulTongueShriek(final FoulTongueShriek card) {
public FoulTongueShriek copy() {return new FoulTongueShriek(this);
class FoulTongueShriekEffect extends OneShotEffect {
public FoulTongueShriekEffect() {
public FoulTongueShriekEffect(final FoulTongueShriekEffect effect) {
public FoulTongueShriekEffect copy() {return new FoulTongueShriekEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GateSmasher extends CardImpl {
public GateSmasher(UUID ownerId) {
public GateSmasher(final GateSmasher card) {
public GateSmasher copy() {return new GateSmasher(this);
public class GladeWatcher extends CardImpl {
public GladeWatcher(UUID ownerId) {
public GladeWatcher(final GladeWatcher card) {
public GladeWatcher copy() {return new GladeWatcher(this);
public class GlaringAegis extends CardImpl {
public GlaringAegis(UUID ownerId) {
public GlaringAegis(final GlaringAegis card) {
public GlaringAegis copy() {return new GlaringAegis(this);
public class GleamOfAuthority extends CardImpl {
public GleamOfAuthority(UUID ownerId) {
public GleamOfAuthority(final GleamOfAuthority card) {
public GleamOfAuthority copy() {return new GleamOfAuthority(this);
class CountersOnControlledCount implements DynamicValue {
public CountersOnControlledCount() {
public CountersOnControlledCount(final CountersOnControlledCount dynamicValue) {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count;
public DynamicValue copy() {return new CountersOnControlledCount(this);
public String getMessage() {return "+1/+1 counter on other creatures you control";
public String toString() {return "X";
public class Glint extends CardImpl {
public Glint(UUID ownerId) {
public Glint(final Glint card) {
public Glint copy() {return new Glint(this);
public class GracebladeArtisan extends CardImpl {
public GracebladeArtisan(UUID ownerId) {
public GracebladeArtisan(final GracebladeArtisan card) {
public GracebladeArtisan copy() {return new GracebladeArtisan(this);
public class GreatTeachersDecree extends CardImpl {
public GreatTeachersDecree(UUID ownerId) {
public GreatTeachersDecree(final GreatTeachersDecree card) {
public GreatTeachersDecree copy() {return new GreatTeachersDecree(this);
public class GuardianShieldBearer extends CardImpl {
public GuardianShieldBearer(UUID ownerId) {
public GuardianShieldBearer(final GuardianShieldBearer card) {
public GuardianShieldBearer copy() {return new GuardianShieldBearer(this);
public class GudulLurker extends CardImpl {
public GudulLurker(UUID ownerId) {
public GudulLurker(final GudulLurker card) {
public GudulLurker copy() {return new GudulLurker(this);
public class GurmagDrowner extends CardImpl {
public GurmagDrowner(UUID ownerId) {
public GurmagDrowner(final GurmagDrowner card) {
public GurmagDrowner copy() {return new GurmagDrowner(this);
class GurmagDrownerEffect extends OneShotEffect {
public GurmagDrownerEffect() {
public GurmagDrownerEffect(final GurmagDrownerEffect effect) {
public GurmagDrownerEffect copy() {return new GurmagDrownerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HardenedBerserker extends CardImpl {
public HardenedBerserker(UUID ownerId) {
public HardenedBerserker(final HardenedBerserker card) {
public HardenedBerserker copy() {return new HardenedBerserker(this);
public HardenedBerserkerSpellsCostReductionEffect() {
protected HardenedBerserkerSpellsCostReductionEffect(final HardenedBerserkerSpellsCostReductionEffect effect) {
public void init(Ability source, Game game) {return true;
public class HavenOfTheSpiritDragon extends CardImpl {
public HavenOfTheSpiritDragon(UUID ownerId) {
public HavenOfTheSpiritDragon(final HavenOfTheSpiritDragon card) {
public HavenOfTheSpiritDragon copy() {return new HavenOfTheSpiritDragon(this);
class HavenOfTheSpiritManaBuilder extends ConditionalManaBuilder {return new HedonistsTrove(this);return new HedonistsTroveExileEffect();
public boolean apply(Game game, Ability source) {return true;return false;
public boolean apply(Game game, Ability source) {return true;return new HedonistsTrovePlayLandEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return exileZone != null && exileZone.contains(objectId);return false;
public boolean apply(Game game, Ability source) {return true;return new HedonistsTroveCastNonlandCardsEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return false;return true;return false;
public class HeraldOfDromoka extends CardImpl {
public HeraldOfDromoka(UUID ownerId) {
public HeraldOfDromoka(final HeraldOfDromoka card) {
public HeraldOfDromoka copy() {return new HeraldOfDromoka(this);
public class HerdchaserDragon extends CardImpl {
public HerdchaserDragon(UUID ownerId) {
public HerdchaserDragon(final HerdchaserDragon card) {
public HerdchaserDragon copy() {return new HerdchaserDragon(this);
public class HiddenDragonslayer extends CardImpl {
public HiddenDragonslayer(UUID ownerId) {
public HiddenDragonslayer(final HiddenDragonslayer card) {
public HiddenDragonslayer copy() {return new HiddenDragonslayer(this);
public class IcefallRegent extends CardImpl {
public IcefallRegent(UUID ownerId) {
public IcefallRegent(final IcefallRegent card) {
public IcefallRegent copy() {return new IcefallRegent(this);
public IcefallRegentEffect() {
public IcefallRegentEffect(final IcefallRegentEffect effect) {
public IcefallRegentEffect copy() {return new IcefallRegentEffect(this);
public boolean apply(Game game, Ability source) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.LOST_CONTROL ||
public boolean applies(GameEvent event, Ability source, Game game) {return false;return false;return false;return targetCreature != null && game.getActivePlayerId().equals(targetCreature.getControllerId());return false;
class IcefallRegentWatcher extends Watcher {
IcefallRegentWatcher () {
IcefallRegentWatcher(IcefallRegentWatcher watcher) {
public void watch(GameEvent event, Game game) {return;
public void reset() {
public IcefallRegentWatcher copy() {return new IcefallRegentWatcher(this);
IcefallRegentCostIncreaseEffect() {
IcefallRegentCostIncreaseEffect(IcefallRegentCostIncreaseEffect effect) {return true;return true;return false;
public IcefallRegentCostIncreaseEffect copy() {return new IcefallRegentCostIncreaseEffect(this);
public class IllusoryGains extends CardImpl {
public IllusoryGains(UUID ownerId) {
public IllusoryGains(final IllusoryGains card) {
public IllusoryGains copy() {return new IllusoryGains(this);
class IllusoryGainsEffect extends OneShotEffect {
public IllusoryGainsEffect() {
public IllusoryGainsEffect(final IllusoryGainsEffect effect) {
public boolean apply(Game game, Ability source) {return false;return opponentCreature.addAttachment(illusoryGains.getId(), game);return false;
public IllusoryGainsEffect copy() {return new IllusoryGainsEffect(this);
public class ImpactTremors extends CardImpl {
public ImpactTremors(UUID ownerId) {
public ImpactTremors(final ImpactTremors card) {
public ImpactTremors copy() {return new ImpactTremors(this);
public class InspiringCall extends CardImpl {
public InspiringCall(UUID ownerId) {
public InspiringCall(final InspiringCall card) {
public InspiringCall copy() {return new InspiringCall(this);
public class IreShaman extends CardImpl {
public IreShaman(UUID ownerId) {
public IreShaman(final IreShaman card) {
public IreShaman copy() {return new IreShaman(this);
class IreShamanExileEffect extends OneShotEffect {
public IreShamanExileEffect() {
public IreShamanExileEffect(final IreShamanExileEffect effect) {
public IreShamanExileEffect copy() {return new IreShamanExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class IreShamanCastFromExileEffect extends AsThoughEffectImpl {
public IreShamanCastFromExileEffect() {
public IreShamanCastFromExileEffect(final IreShamanCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public IreShamanCastFromExileEffect copy() {return new IreShamanCastFromExileEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return source.getControllerId().equals(affectedControllerId)
public class KeeperOfTheLens extends CardImpl {
public KeeperOfTheLens(UUID ownerId) {
public KeeperOfTheLens(final KeeperOfTheLens card) {
public KeeperOfTheLens copy() {return new KeeperOfTheLens(this);
class KeeperOfTheLensLookFaceDownAbility extends ActivatedAbilityImpl {
public KeeperOfTheLensLookFaceDownAbility() {
public KeeperOfTheLensLookFaceDownAbility(KeeperOfTheLensLookFaceDownAbility ability) {
public KeeperOfTheLensLookFaceDownAbility copy() {return new KeeperOfTheLensLookFaceDownAbility(this);
class KeeperOfTheLensLookFaceDownEffect extends OneShotEffect {
public KeeperOfTheLensLookFaceDownEffect() {
public KeeperOfTheLensLookFaceDownEffect(final KeeperOfTheLensLookFaceDownEffect effect) {
public KeeperOfTheLensLookFaceDownEffect copy() {return new KeeperOfTheLensLookFaceDownEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class KolaghanAspirant extends CardImpl {
public KolaghanAspirant(UUID ownerId) {
public KolaghanAspirant(final KolaghanAspirant card) {
public KolaghanAspirant copy() {return new KolaghanAspirant(this);
public class KolaghanForerunners extends CardImpl {
public KolaghanForerunners(UUID ownerId) {
public KolaghanForerunners(final KolaghanForerunners card) {
public KolaghanForerunners copy() {return new KolaghanForerunners(this);
public class KolaghanMonument extends CardImpl {
public KolaghanMonument(UUID ownerId) {
public KolaghanMonument(final KolaghanMonument card) {
public KolaghanMonument copy() {return new KolaghanMonument(this);
private class KolaghanMonumentToken extends Token {
KolaghanMonumentToken() {
public class KolaghansCommand extends CardImpl {
public KolaghansCommand(UUID ownerId) {
public KolaghansCommand(final KolaghansCommand card) {
public KolaghansCommand copy() {return new KolaghansCommand(this);
public class KolaghanSkirmisher extends CardImpl {
public KolaghanSkirmisher(UUID ownerId) {
public KolaghanSkirmisher(final KolaghanSkirmisher card) {
public KolaghanSkirmisher copy() {return new KolaghanSkirmisher(this);
public class KolaghanStormsinger extends CardImpl {
public KolaghanStormsinger(UUID ownerId) {
public KolaghanStormsinger(final KolaghanStormsinger card) {
public KolaghanStormsinger copy() {return new KolaghanStormsinger(this);
public class Lightwalker extends CardImpl {
public Lightwalker(UUID ownerId) {
public Lightwalker(final Lightwalker card) {
public Lightwalker copy() {return new Lightwalker(this);
public class LivingLore extends CardImpl {
public LivingLore(UUID ownerId) {
public LivingLore(final LivingLore card) {
public LivingLore copy() {return new LivingLore(this);
class LivingLoreExileEffect extends OneShotEffect {
public LivingLoreExileEffect() {
public LivingLoreExileEffect(final LivingLoreExileEffect effect) {
public LivingLoreExileEffect copy() {return new LivingLoreExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class LivingLoreSetPowerToughnessSourceEffect extends ContinuousEffectImpl {
public LivingLoreSetPowerToughnessSourceEffect() {
public LivingLoreSetPowerToughnessSourceEffect(final LivingLoreSetPowerToughnessSourceEffect effect) {
public LivingLoreSetPowerToughnessSourceEffect copy() {return new LivingLoreSetPowerToughnessSourceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return true;return new LivingLoreSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LoseCalm extends CardImpl {
public LoseCalm(UUID ownerId) {
public LoseCalm(final LoseCalm card) {
public LoseCalm copy() {return new LoseCalm(this);
public class LurkingArynx extends CardImpl {
public LurkingArynx(UUID ownerId) {
public LurkingArynx(final LurkingArynx card) {
public LurkingArynx copy() {return new LurkingArynx(this);
public class MagmaticChasm extends CardImpl {
public MagmaticChasm(UUID ownerId) {
public MagmaticChasm(final MagmaticChasm card) {
public MagmaticChasm copy() {return new MagmaticChasm(this);
public class MarangRiverSkeleton extends CardImpl {
public MarangRiverSkeleton(UUID ownerId) {
public MarangRiverSkeleton(final MarangRiverSkeleton card) {
public MarangRiverSkeleton copy() {return new MarangRiverSkeleton(this);
public class MarshHulk extends CardImpl {
public MarshHulk(UUID ownerId) {
public MarshHulk(final MarshHulk card) {
public MarshHulk copy() {return new MarshHulk(this);
public class MinisterOfPain extends CardImpl {
public MinisterOfPain(UUID ownerId) {
public MinisterOfPain(final MinisterOfPain card) {
public MinisterOfPain copy() {return new MinisterOfPain(this);
public class MirrorMockery extends CardImpl {
public MirrorMockery(UUID ownerId) {
public MirrorMockery(final MirrorMockery card) {
public MirrorMockery copy() {return new MirrorMockery(this);
class MirrorMockeryEffect extends OneShotEffect {
public MirrorMockeryEffect() {
public MirrorMockeryEffect(final MirrorMockeryEffect effect) {
public MirrorMockeryEffect copy() {return new MirrorMockeryEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class MisthoofKirin extends CardImpl {
public MisthoofKirin(UUID ownerId) {
public MisthoofKirin(final MisthoofKirin card) {
public MisthoofKirin copy() {return new MisthoofKirin(this);
public class MonasteryLoremaster extends CardImpl {
public MonasteryLoremaster(UUID ownerId) {
public MonasteryLoremaster(final MonasteryLoremaster card) {
public MonasteryLoremaster copy() {return new MonasteryLoremaster(this);
public class MysticMeditation extends CardImpl {
public MysticMeditation(UUID ownerId) {
public MysticMeditation(final MysticMeditation card) {
public MysticMeditation copy() {return new MysticMeditation(this);
class MysticMeditationEffect extends OneShotEffect {
public MysticMeditationEffect() {
public MysticMeditationEffect(final MysticMeditationEffect effect) {
public MysticMeditationEffect copy() {return new MysticMeditationEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class MythRealized extends CardImpl {
public MythRealized(UUID ownerId) {
public MythRealized(final MythRealized card) {
public MythRealized copy() {return new MythRealized(this);
class MythRealizedToken extends Token {
public MythRealizedToken() {
class MythRealizedSetPTEffect extends ContinuousEffectImpl {
public MythRealizedSetPTEffect(Duration duration) {
public MythRealizedSetPTEffect(final MythRealizedSetPTEffect effect) {
public MythRealizedSetPTEffect copy() {return new MythRealizedSetPTEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NarsetTranscendent extends CardImpl {
public NarsetTranscendent(UUID ownerId) {
public NarsetTranscendent(final NarsetTranscendent card) {
public NarsetTranscendent copy() {return new NarsetTranscendent(this);
class NarsetTranscendentEffect1 extends OneShotEffect {
public NarsetTranscendentEffect1() {
public NarsetTranscendentEffect1(final NarsetTranscendentEffect1 effect) {
public NarsetTranscendentEffect1 copy() {return new NarsetTranscendentEffect1(this);
public boolean apply(Game game, Ability source) {return true;return false;
class NarsetTranscendentTriggeredAbility extends DelayedTriggeredAbility {
public NarsetTranscendentTriggeredAbility() {
private NarsetTranscendentTriggeredAbility(final NarsetTranscendentTriggeredAbility ability) {
public NarsetTranscendentTriggeredAbility copy() {return new NarsetTranscendentTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When you cast your next instant or sorcery spell from your hand this turn, " + super.getRule();
class NarsetTranscendentGainReboundEffect extends ContinuousEffectImpl {
public NarsetTranscendentGainReboundEffect() {
public NarsetTranscendentGainReboundEffect(final NarsetTranscendentGainReboundEffect effect) {
public NarsetTranscendentGainReboundEffect copy() {return new NarsetTranscendentGainReboundEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private void addReboundAbility(Card card, Ability source, Game game) {
class NarsetTranscendentEmblem extends Emblem {
public NarsetTranscendentEmblem() {
public NarsetTranscendentCantCastEffect() {
public NarsetTranscendentCantCastEffect(final NarsetTranscendentCantCastEffect effect) {
public NarsetTranscendentCantCastEffect copy() {return new NarsetTranscendentCantCastEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast can't cast noncreature spells (it is prevented by emblem of " + mageObject.getLogName() + ")";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class NecromasterDragon extends CardImpl {
public NecromasterDragon(UUID ownerId) {
public NecromasterDragon(final NecromasterDragon card) {
public NecromasterDragon copy() {return new NecromasterDragon(this);
public class ObscuringAEther extends CardImpl {
public ObscuringAEther(UUID ownerId) {
public ObscuringAEther(final ObscuringAEther card) {
public ObscuringAEther copy() {return new ObscuringAEther(this);
public class OjutaiExemplars extends CardImpl {
public OjutaiExemplars(UUID ownerId) {
public OjutaiExemplars(final OjutaiExemplars card) {
public OjutaiExemplars copy() {return new OjutaiExemplars(this);
class OjutaiExemplarsEffect extends OneShotEffect {
public OjutaiExemplarsEffect() {this.staticText = "Exile {this}, then return it to the battlefield tapped under its owner's control";
public OjutaiExemplarsEffect(final OjutaiExemplarsEffect effect) {
public OjutaiExemplarsEffect copy() {return new OjutaiExemplarsEffect(this);
public boolean apply(Game game, Ability source) {return card.moveToZone(Zone.BATTLEFIELD, source.getSourceId(), game, true);return false;
public class OjutaiInterceptor extends CardImpl {
public OjutaiInterceptor(UUID ownerId) {
public OjutaiInterceptor(final OjutaiInterceptor card) {
public OjutaiInterceptor copy() {return new OjutaiInterceptor(this);
public class OjutaisCommand extends CardImpl {
public OjutaisCommand(UUID ownerId) {
public OjutaisCommand(final OjutaisCommand card) {
public OjutaisCommand copy() {return new OjutaisCommand(this);
public class OjutaisSummons extends CardImpl {
public OjutaisSummons(UUID ownerId) {
public OjutaisSummons(final OjutaisSummons card) {
public OjutaisSummons copy() {return new OjutaisSummons(this);
class DjinnMonkToken extends Token {
DjinnMonkToken() {
public class OratorOfOjutai extends CardImpl {
public OratorOfOjutai(UUID ownerId) {
public void adjustCosts(Ability ability, Game game) {
public OratorOfOjutai(final OratorOfOjutai card) {
public OratorOfOjutai copy() {return new OratorOfOjutai(this);
class OratorOfOjutaiEffect extends OneShotEffect {
public OratorOfOjutaiEffect() {
public OratorOfOjutaiEffect(final OratorOfOjutaiEffect effect) {
public OratorOfOjutaiEffect copy() {return new OratorOfOjutaiEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PalaceFamiliar extends CardImpl {
public PalaceFamiliar(UUID ownerId) {
public PalaceFamiliar(final PalaceFamiliar card) {
public PalaceFamiliar copy() {return new PalaceFamiliar(this);
public class PinionFeast extends CardImpl {
public PinionFeast(UUID ownerId) {
public PinionFeast(final PinionFeast card) {
public PinionFeast copy() {return new PinionFeast(this);
public class PitilessHorde extends CardImpl {
public PitilessHorde(UUID ownerId) {
public PitilessHorde(final PitilessHorde card) {
public PitilessHorde copy() {return new PitilessHorde(this);
public class PressTheAdvantage extends CardImpl {
public PressTheAdvantage(UUID ownerId) {
public PressTheAdvantage(final PressTheAdvantage card) {
public PressTheAdvantage copy() {return new PressTheAdvantage(this);
public class PristineSkywise extends CardImpl {
public PristineSkywise(UUID ownerId) {
public PristineSkywise(final PristineSkywise card) {
public PristineSkywise copy() {return new PristineSkywise(this);
public class ProfanerOfTheDead extends CardImpl {
public ProfanerOfTheDead(UUID ownerId) {
public ProfanerOfTheDead(final ProfanerOfTheDead card) {
public ProfanerOfTheDead copy() {return new ProfanerOfTheDead(this);
class ProfanerOfTheDeadReturnEffect extends OneShotEffect {
public ProfanerOfTheDeadReturnEffect() {staticText = "return to their owners' hands all creatures your opponents control with toughness less than the exploited creature's toughness";
public ProfanerOfTheDeadReturnEffect(final ProfanerOfTheDeadReturnEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ProfanerOfTheDeadReturnEffect copy() {return new ProfanerOfTheDeadReturnEffect(this);
public class ProfoundJourney extends CardImpl {
public ProfoundJourney(UUID ownerId) {
public ProfoundJourney(final ProfoundJourney card) {
public ProfoundJourney copy() {return new ProfoundJourney(this);
public class QalSismaBehemoth extends CardImpl {
public QalSismaBehemoth(UUID ownerId) {
public QalSismaBehemoth(final QalSismaBehemoth card) {
public QalSismaBehemoth copy() {return new QalSismaBehemoth(this);
public class QarsiDeceiver extends CardImpl {
public QarsiDeceiver(UUID ownerId) {
public QarsiDeceiver(final QarsiDeceiver card) {
public QarsiDeceiver copy() {return new QarsiDeceiver(this);
class QarsiDeceiverManaBuilder extends ConditionalManaBuilder {return new QarsiDeceiverConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast a face-down creature spell, pay a mana cost to turn a manifested creature face up, or pay a morph cost. <i>(A megamorph cost is a morph cost.)</i>";
class QarsiDeceiverConditionalMana extends ConditionalMana {
public QarsiDeceiverConditionalMana(Mana mana) {
class QarsiDeceiverManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class QarsiSadist extends CardImpl {
public QarsiSadist(UUID ownerId) {
public QarsiSadist(final QarsiSadist card) {
public QarsiSadist copy() {return new QarsiSadist(this);
public class RadiantPurge extends CardImpl {
public RadiantPurge(UUID ownerId) {
public RadiantPurge(final RadiantPurge card) {
public RadiantPurge copy() {return new RadiantPurge(this);
public class RakshasaGravecaller extends CardImpl {
public RakshasaGravecaller(UUID ownerId) {
public RakshasaGravecaller(final RakshasaGravecaller card) {
public RakshasaGravecaller copy() {return new RakshasaGravecaller(this);
public class RecklessImp extends CardImpl {
public RecklessImp(UUID ownerId) {
public RecklessImp(final RecklessImp card) {
public RecklessImp copy() {return new RecklessImp(this);
public class ReduceInStature extends CardImpl {
public ReduceInStature(UUID ownerId) {
public ReduceInStature(final ReduceInStature card) {
public ReduceInStature copy() {return new ReduceInStature(this);
class SetPowerToughnessEnchantedEffect extends ContinuousEffectImpl {
public SetPowerToughnessEnchantedEffect() {
public SetPowerToughnessEnchantedEffect(final SetPowerToughnessEnchantedEffect effect) {
public SetPowerToughnessEnchantedEffect copy() {return new SetPowerToughnessEnchantedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RendingVolley extends CardImpl {
public RendingVolley(UUID ownerId) {
public RendingVolley(final RendingVolley card) {
public RendingVolley copy() {return new RendingVolley(this);
public class RisenExecutioner extends CardImpl {
public RisenExecutioner(UUID ownerId) {
public RisenExecutioner(final RisenExecutioner card) {
public RisenExecutioner copy() {return new RisenExecutioner(this);
class RisenExecutionerCastEffect extends AsThoughEffectImpl {
RisenExecutionerCastEffect() {
RisenExecutionerCastEffect(final RisenExecutionerCastEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public RisenExecutionerCastEffect copy() {return new RisenExecutionerCastEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
RisenExecutionerCostIncreasingEffect () {
RisenExecutionerCostIncreasingEffect(final RisenExecutionerCostIncreasingEffect effect) {return true;return spell != null && spell.getFromZone() == Zone.GRAVEYARD;return false;
public RisenExecutionerCostIncreasingEffect copy() {return new RisenExecutionerCostIncreasingEffect(this);
public class Roast extends CardImpl {
public Roast(UUID ownerId) {
public Roast(final Roast card) {
public Roast copy() {return new Roast(this);
public class RuthlessDeathfang extends CardImpl {
public RuthlessDeathfang(UUID ownerId) {
public RuthlessDeathfang(final RuthlessDeathfang card) {
public RuthlessDeathfang copy() {return new RuthlessDeathfang(this);
class RuthlessDeathfangTriggeredAbility extends TriggeredAbilityImpl {
public RuthlessDeathfangTriggeredAbility() {
public RuthlessDeathfangTriggeredAbility(final RuthlessDeathfangTriggeredAbility ability) {
public RuthlessDeathfangTriggeredAbility copy() {return new RuthlessDeathfangTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SACRIFICED_PERMANENT;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.getControllerId())
public String getRule() {return "Whenever you sacrifice a creature, " + super.getRule();
public class SabertoothOutrider extends CardImpl {
public SabertoothOutrider(UUID ownerId) {
public SabertoothOutrider(final SabertoothOutrider card) {
public SabertoothOutrider copy() {return new SabertoothOutrider(this);
public class SaltRoadAmbushers extends CardImpl {
public SaltRoadAmbushers(UUID ownerId) {
public SaltRoadAmbushers(final SaltRoadAmbushers card) {
public SaltRoadAmbushers copy() {return new SaltRoadAmbushers(this);
class SaltRoadAmbushersTriggeredAbility extends TurnedFaceUpAllTriggeredAbility {
public SaltRoadAmbushersTriggeredAbility() {
public SaltRoadAmbushersTriggeredAbility(final SaltRoadAmbushersTriggeredAbility ability) {
public SaltRoadAmbushersTriggeredAbility copy() {return new SaltRoadAmbushersTriggeredAbility(this);
public String getRule() {return "Whenever another permanent you control is turned face up, if it's a creature, put two +1/+1 counters on it.";
public class SaltRoadQuartermasters extends CardImpl {
public SaltRoadQuartermasters(UUID ownerId) {
public SaltRoadQuartermasters(final SaltRoadQuartermasters card) {
public SaltRoadQuartermasters copy() {return new SaltRoadQuartermasters(this);
public class SandcrafterMage extends CardImpl {
public SandcrafterMage(UUID ownerId) {
public SandcrafterMage(final SandcrafterMage card) {
public SandcrafterMage copy() {return new SandcrafterMage(this);
public class SandsteppeScavenger extends CardImpl {
public SandsteppeScavenger(UUID ownerId) {
public SandsteppeScavenger(final SandsteppeScavenger card) {
public SandsteppeScavenger copy() {return new SandsteppeScavenger(this);
public class SandstormCharger extends CardImpl {
public SandstormCharger(UUID ownerId) {
public SandstormCharger(final SandstormCharger card) {
public SandstormCharger copy() {return new SandstormCharger(this);
public class SarkhansRage extends CardImpl {
public SarkhansRage(UUID ownerId) {
public SarkhansRage(final SarkhansRage card) {
public SarkhansRage copy() {return new SarkhansRage(this);
public class SarkhansTriumph extends CardImpl {
public SarkhansTriumph(UUID ownerId) {
public SarkhansTriumph(final SarkhansTriumph card) {
public SarkhansTriumph copy() {return new SarkhansTriumph(this);
public class SarkhanUnbroken extends CardImpl {
public SarkhanUnbroken(UUID ownerId) {
public SarkhanUnbroken(final SarkhanUnbroken card) {
public SarkhanUnbroken copy() {return new SarkhanUnbroken(this);
class SarkhanUnbrokenAbility1 extends OneShotEffect {
public SarkhanUnbrokenAbility1() {
public SarkhanUnbrokenAbility1(final SarkhanUnbrokenAbility1 effect) {
public SarkhanUnbrokenAbility1 copy() {return new SarkhanUnbrokenAbility1(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class SavageVentmaw extends CardImpl {
public SavageVentmaw(UUID ownerId) {
public SavageVentmaw(final SavageVentmaw card) {
public SavageVentmaw copy() {return new SavageVentmaw(this);
class SavageVentmawManaEffect extends ManaEffect {
public SavageVentmawManaEffect(Mana mana, String textManaPoolOwner, boolean emptyOnTurnsEnd) {
public SavageVentmawManaEffect(final SavageVentmawManaEffect effect) {
public SavageVentmawManaEffect copy() {return new SavageVentmawManaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public Mana getMana(Game game, Ability source) {return mana;
public class ScaleBlessing extends CardImpl {
public ScaleBlessing(UUID ownerId) {
public ScaleBlessing(final ScaleBlessing card) {
public ScaleBlessing copy() {return new ScaleBlessing(this);
class ScaleBlessingEffect extends OneShotEffect {
public ScaleBlessingEffect() {
public ScaleBlessingEffect(final ScaleBlessingEffect effect) {
public ScaleBlessingEffect copy() {return new ScaleBlessingEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ScionOfUgin extends CardImpl {
public ScionOfUgin(UUID ownerId) {
public ScionOfUgin(final ScionOfUgin card) {
public ScionOfUgin copy() {return new ScionOfUgin(this);
public class ScreamreachBrawler extends CardImpl {
public ScreamreachBrawler(UUID ownerId) {
public ScreamreachBrawler(final ScreamreachBrawler card) {
public ScreamreachBrawler copy() {return new ScreamreachBrawler(this);
public class SecureTheWastes extends CardImpl {
public SecureTheWastes(UUID ownerId) {
public SecureTheWastes(final SecureTheWastes card) {
public SecureTheWastes copy() {return new SecureTheWastes(this);
public class SegmentedKrotiq extends CardImpl {
public SegmentedKrotiq(UUID ownerId) {
public SegmentedKrotiq(final SegmentedKrotiq card) {
public SegmentedKrotiq copy() {return new SegmentedKrotiq(this);
public class ServantOfTheScale extends CardImpl {
public ServantOfTheScale(UUID ownerId) {
public ServantOfTheScale(final ServantOfTheScale card) {
public ServantOfTheScale copy() {return new ServantOfTheScale(this);
class ServantOfTheScaleEffect extends OneShotEffect {
public ServantOfTheScaleEffect() {
public ServantOfTheScaleEffect(final ServantOfTheScaleEffect effect) {
public ServantOfTheScaleEffect copy() {return new ServantOfTheScaleEffect(this);
public boolean apply(Game game, Ability source) {
public class ShamanOfForgottenWays extends CardImpl {
public ShamanOfForgottenWays(UUID ownerId) {
public ShamanOfForgottenWays(final ShamanOfForgottenWays card) {
public ShamanOfForgottenWays copy() {return new ShamanOfForgottenWays(this);
class ShamanOfForgottenWaysManaBuilder extends ConditionalManaBuilder {return new ShamanOfForgottenWaysConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast creature spells";
class ShamanOfForgottenWaysConditionalMana extends ConditionalMana {
public ShamanOfForgottenWaysConditionalMana(Mana mana) {
class ShamanOfForgottenWaysManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return object != null && (object instanceof Spell) && object.getCardType().contains(CardType.CREATURE);
class ShamanOfForgottenWaysEffect extends OneShotEffect {
public ShamanOfForgottenWaysEffect() {
public ShamanOfForgottenWaysEffect(final ShamanOfForgottenWaysEffect effect) {
public ShamanOfForgottenWaysEffect copy() {return new ShamanOfForgottenWaysEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShamblingGoblin extends CardImpl {
public ShamblingGoblin(UUID ownerId) {
public ShamblingGoblin(final ShamblingGoblin card) {
public ShamblingGoblin copy() {return new ShamblingGoblin(this);
public class ShapeTheSands extends CardImpl {
public ShapeTheSands(UUID ownerId) {
public ShapeTheSands(final ShapeTheSands card) {
public ShapeTheSands copy() {return new ShapeTheSands(this);
public class ShelteredAerie extends CardImpl {
public ShelteredAerie(UUID ownerId) {
public ShelteredAerie(final ShelteredAerie card) {
public ShelteredAerie copy() {return new ShelteredAerie(this);
public class ShieldhideDragon extends CardImpl {
public ShieldhideDragon(UUID ownerId) {
public ShieldhideDragon(final ShieldhideDragon card) {
public ShieldhideDragon copy() {return new ShieldhideDragon(this);
public class ShorecrasherElemental extends CardImpl {
public ShorecrasherElemental(UUID ownerId) {
public ShorecrasherElemental(final ShorecrasherElemental card) {
public ShorecrasherElemental copy() {return new ShorecrasherElemental(this);
class ShorecrasherElementalEffect extends OneShotEffect {
public ShorecrasherElementalEffect() {this.staticText = "Exile {this}, then return it to the battlefield face down under its owner's control";
public ShorecrasherElementalEffect(final ShorecrasherElementalEffect effect) {
public ShorecrasherElementalEffect copy() {return new ShorecrasherElementalEffect(this);
public boolean apply(Game game, Ability source) {return card.putOntoBattlefield(game, Zone.EXILED, source.getSourceId(), card.getOwnerId(), false, true);return false;
class ShorecrasherElementalBoostEffect extends OneShotEffect {
public ShorecrasherElementalBoostEffect() {
public ShorecrasherElementalBoostEffect(final ShorecrasherElementalBoostEffect effect) {
public ShorecrasherElementalBoostEffect copy() {return new ShorecrasherElementalBoostEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class SibsigIcebreakers extends CardImpl {
public SibsigIcebreakers(UUID ownerId) {
public SibsigIcebreakers(final SibsigIcebreakers card) {
public SibsigIcebreakers copy() {return new SibsigIcebreakers(this);
public class SidisisFaithful extends CardImpl {
public SidisisFaithful(UUID ownerId) {
public SidisisFaithful(final SidisisFaithful card) {
public SidisisFaithful copy() {return new SidisisFaithful(this);
public class SidisiUndeadVizier extends CardImpl {
public SidisiUndeadVizier(UUID ownerId) {
public SidisiUndeadVizier(final SidisiUndeadVizier card) {
public SidisiUndeadVizier copy() {return new SidisiUndeadVizier(this);
public class SightBeyondSight extends CardImpl {
public SightBeyondSight(UUID ownerId) {
public SightBeyondSight(final SightBeyondSight card) {
public SightBeyondSight copy() {return new SightBeyondSight(this);
public class SightOfTheScalelords extends CardImpl {
public SightOfTheScalelords(UUID ownerId) {
public SightOfTheScalelords(final SightOfTheScalelords card) {
public SightOfTheScalelords copy() {return new SightOfTheScalelords(this);
public class Silkwrap extends CardImpl {
public Silkwrap(UUID ownerId) {
public Silkwrap(final Silkwrap card) {
public Silkwrap copy() {return new Silkwrap(this);
class SilkwrapEffect extends OneShotEffect {
public SilkwrapEffect() {this.staticText = "exile target creature with converted mana cost 3 or less an opponent controls until {this} leaves the battlefield. <i>(That creature returns under its owner's control.)</i>";
public SilkwrapEffect(final SilkwrapEffect effect) {
public SilkwrapEffect copy() {return new SilkwrapEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), permanent.getIdName()).apply(game, source);return false;
public class SilumgarAssassin extends CardImpl {
public SilumgarAssassin(UUID ownerId) {
public SilumgarAssassin(final SilumgarAssassin card) {
public SilumgarAssassin copy() {return new SilumgarAssassin(this);
public class SilumgarButcher extends CardImpl {
public SilumgarButcher(UUID ownerId) {
public SilumgarButcher(final SilumgarButcher card) {
public SilumgarButcher copy() {return new SilumgarButcher(this);
public class SilumgarMonument extends CardImpl {
public SilumgarMonument(UUID ownerId) {
public SilumgarMonument(final SilumgarMonument card) {
public SilumgarMonument copy() {return new SilumgarMonument(this);
private class OjutaiMonumentToken extends Token {
OjutaiMonumentToken() {
public class SilumgarsCommand extends CardImpl {
public SilumgarsCommand(UUID ownerId) {
public SilumgarsCommand(final SilumgarsCommand card) {
public SilumgarsCommand copy() {return new SilumgarsCommand(this);
public class SilumgarSorcerer extends CardImpl {
public SilumgarSorcerer(UUID ownerId) {
public SilumgarSorcerer(final SilumgarSorcerer card) {
public SilumgarSorcerer copy() {return new SilumgarSorcerer(this);
public class SkywiseTeachings extends CardImpl {
public SkywiseTeachings(UUID ownerId) {
public SkywiseTeachings(final SkywiseTeachings card) {
public SkywiseTeachings copy() {return new SkywiseTeachings(this);
class SkywiseTeachingsToken extends Token {
SkywiseTeachingsToken() {
public class SprintingWarbrute extends CardImpl {
public SprintingWarbrute(UUID ownerId) {
public SprintingWarbrute(final SprintingWarbrute card) {
public SprintingWarbrute copy() {return new SprintingWarbrute(this);
public class StampedingElkHerd extends CardImpl {
public StampedingElkHerd(UUID ownerId) {
public StampedingElkHerd(final StampedingElkHerd card) {
public StampedingElkHerd copy() {return new StampedingElkHerd(this);
public class StormcragElemental extends CardImpl {
public StormcragElemental(UUID ownerId) {
public StormcragElemental(final StormcragElemental card) {
public StormcragElemental copy() {return new StormcragElemental(this);
public class StormriderRig extends CardImpl {
public StormriderRig(UUID ownerId) {
public StormriderRig(final StormriderRig card) {
public StormriderRig copy() {return new StormriderRig(this);
public class StormwingDragon extends CardImpl {
public StormwingDragon(UUID ownerId) {
public StormwingDragon(final StormwingDragon card) {
public StormwingDragon copy() {return new StormwingDragon(this);
public class StratusDancer extends CardImpl {
public StratusDancer(UUID ownerId) {
public StratusDancer(final StratusDancer card) {
public StratusDancer copy() {return new StratusDancer(this);
public class StrongarmMonk extends CardImpl {
public StrongarmMonk(UUID ownerId) {
public StrongarmMonk(final StrongarmMonk card) {
public StrongarmMonk copy() {return new StrongarmMonk(this);
public class StudentOfOjutai extends CardImpl {
public StudentOfOjutai(UUID ownerId) {
public StudentOfOjutai(final StudentOfOjutai card) {
public StudentOfOjutai copy() {return new StudentOfOjutai(this);
public class SunbringersTouch extends CardImpl {
public SunbringersTouch(UUID ownerId) {
public SunbringersTouch(final SunbringersTouch card) {
public SunbringersTouch copy() {return new SunbringersTouch(this);
public class SunscorchRegent extends CardImpl {
public SunscorchRegent(UUID ownerId) {
public SunscorchRegent(final SunscorchRegent card) {
public SunscorchRegent copy() {return new SunscorchRegent(this);
public class SurgeOfRighteousness extends CardImpl {
public SurgeOfRighteousness(UUID ownerId) {
public SurgeOfRighteousness(final SurgeOfRighteousness card) {
public SurgeOfRighteousness copy() {return new SurgeOfRighteousness(this);
public class SurrakTheHuntCaller extends CardImpl {
public SurrakTheHuntCaller(UUID ownerId) {
public SurrakTheHuntCaller(final SurrakTheHuntCaller card) {
public SurrakTheHuntCaller copy() {return new SurrakTheHuntCaller(this);return new SwiftWarkite(this);return new SwiftWarkiteEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TaigamsStrike extends CardImpl {
public TaigamsStrike(UUID ownerId) {
public TaigamsStrike(final TaigamsStrike card) {
public TaigamsStrike copy() {return new TaigamsStrike(this);
public class TailSlash extends CardImpl {
public TailSlash(UUID ownerId) {
public TailSlash(final TailSlash card) {
public TailSlash copy() {return new TailSlash(this);
class TailSlashEffect extends OneShotEffect {
public TailSlashEffect() {
public TailSlashEffect(final TailSlashEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TailSlashEffect copy() {return new TailSlashEffect(this);
public class TapestryOfTheAges extends CardImpl {
public TapestryOfTheAges(UUID ownerId) {
public TapestryOfTheAges(final TapestryOfTheAges card) {
public TapestryOfTheAges copy() {return new TapestryOfTheAges(this);
class PlayerCastNonCreatureSpellCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return watcher != null && watcher.playerDidCastNonCreatureSpellThisTurn(source.getControllerId());
public String toString() {return "you've cast a noncreature spell this turn";
class PlayerCastNonCreatureSpellWatcher extends Watcher {
public PlayerCastNonCreatureSpellWatcher() {
public PlayerCastNonCreatureSpellWatcher(final PlayerCastNonCreatureSpellWatcher watcher) {
public void watch(GameEvent event, Game game) {
public PlayerCastNonCreatureSpellWatcher copy() {return new PlayerCastNonCreatureSpellWatcher(this);
public void reset() {
public boolean playerDidCastNonCreatureSpellThisTurn(UUID playerId) {return playerIds.contains(playerId);
public class TerritorialRoc extends CardImpl {
public TerritorialRoc(UUID ownerId) {
public TerritorialRoc(final TerritorialRoc card) {
public TerritorialRoc copy() {return new TerritorialRoc(this);
public class UkudCobra extends CardImpl {
public UkudCobra(UUID ownerId) {
public UkudCobra(final UkudCobra card) {
public UkudCobra copy() {return new UkudCobra(this);
public class UpdraftElemental extends CardImpl {
public UpdraftElemental(UUID ownerId) {
public UpdraftElemental(final UpdraftElemental card) {
public UpdraftElemental copy() {return new UpdraftElemental(this);
public class Vandalize extends CardImpl {
public Vandalize(UUID ownerId) {
public Vandalize(final Vandalize card) {
public Vandalize copy() {return new Vandalize(this);
public class VialOfDragonfire extends CardImpl {
public VialOfDragonfire(UUID ownerId) {
public VialOfDragonfire(final VialOfDragonfire card) {
public VialOfDragonfire copy() {return new VialOfDragonfire(this);
public class VirulentPlague extends CardImpl {
public VirulentPlague(UUID ownerId) {
public VirulentPlague(final VirulentPlague card) {
public VirulentPlague copy() {return new VirulentPlague(this);
public class VoidSquall extends CardImpl {
public VoidSquall(UUID ownerId) {
public VoidSquall(final VoidSquall card) {
public VoidSquall copy() {return new VoidSquall(this);
public class VolcanicRush extends CardImpl {
public VolcanicRush(UUID ownerId) {
public VolcanicRush(final VolcanicRush card) {
public VolcanicRush copy() {return new VolcanicRush(this);
public class VolcanicVision extends CardImpl {
public VolcanicVision(UUID ownerId) {
public VolcanicVision(final VolcanicVision card) {
public VolcanicVision copy() {return new VolcanicVision(this);
class VolcanicVisionReturnToHandTargetEffect extends OneShotEffect {
public VolcanicVisionReturnToHandTargetEffect() {
public VolcanicVisionReturnToHandTargetEffect(final VolcanicVisionReturnToHandTargetEffect effect) {
public VolcanicVisionReturnToHandTargetEffect copy() {return new VolcanicVisionReturnToHandTargetEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class VulturousAven extends CardImpl {
public VulturousAven(UUID ownerId) {
public VulturousAven(final VulturousAven card) {
public VulturousAven copy() {return new VulturousAven(this);
public class WanderingTombshell extends CardImpl {
public WanderingTombshell(UUID ownerId) {
public WanderingTombshell(final WanderingTombshell card) {
public WanderingTombshell copy() {return new WanderingTombshell(this);
public class Warbringer extends CardImpl {
public Warbringer(UUID ownerId) {
public Warbringer(final Warbringer card) {
public Warbringer copy() {return new Warbringer(this);
public WarbringerSpellsCostReductionEffect() {
protected WarbringerSpellsCostReductionEffect(final WarbringerSpellsCostReductionEffect effect) {return true;return DashedCondition.getInstance().apply(game, abilityToModify);return false;
public WarbringerSpellsCostReductionEffect copy() {return new WarbringerSpellsCostReductionEffect(this);
public class YouthfulScholar extends CardImpl {
public YouthfulScholar(UUID ownerId) {
public YouthfulScholar(final YouthfulScholar card) {
public YouthfulScholar copy() {return new YouthfulScholar(this);
public class ZephyrScribe extends CardImpl {
public ZephyrScribe(UUID ownerId) {
public ZephyrScribe(final ZephyrScribe card) {
public ZephyrScribe copy() {return new ZephyrScribe(this);
public class ZurgoBellstriker extends CardImpl {
public ZurgoBellstriker(UUID ownerId) {
public ZurgoBellstriker(final ZurgoBellstriker card) {
public ZurgoBellstriker copy() {return new ZurgoBellstriker(this);
public class AmbitionsCost extends CardImpl {
public AmbitionsCost(UUID ownerId) {
public AmbitionsCost(final AmbitionsCost card) {
public AmbitionsCost copy() {return new AmbitionsCost(this);
public class ArdentMilitia extends CardImpl {
public ArdentMilitia(UUID ownerId) {
public ArdentMilitia(final ArdentMilitia card) {
public ArdentMilitia copy() {return new ArdentMilitia(this);
public class BalanceOfPower extends CardImpl {
public BalanceOfPower(UUID ownerId) {
public BalanceOfPower(final BalanceOfPower card) {
public BalanceOfPower copy() {return new BalanceOfPower(this);
class BalanceOfPowerEffect extends OneShotEffect {
public BalanceOfPowerEffect() {
public BalanceOfPowerEffect(final BalanceOfPowerEffect effect) {
public BalanceOfPowerEffect copy() {return new BalanceOfPowerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CoralEel extends CardImpl {
public CoralEel(UUID ownerId) {
public CoralEel(final CoralEel card) {
public CoralEel copy() {return new CoralEel(this);
public class DwarvenDemolitionTeam extends CardImpl {
public DwarvenDemolitionTeam(UUID ownerId) {
public DwarvenDemolitionTeam(final DwarvenDemolitionTeam card) {
public DwarvenDemolitionTeam copy() {return new DwarvenDemolitionTeam(this);
public class FlashCounter extends CardImpl {
public FlashCounter(UUID ownerId) {
public FlashCounter(final FlashCounter card) {
public FlashCounter copy() {return new FlashCounter(this);
public class GiantBadger extends CardImpl {
public GiantBadger(UUID ownerId) {
public GiantBadger(final GiantBadger card) {
public GiantBadger copy() {return new GiantBadger(this);
public class MerchantScroll extends CardImpl {
public MerchantScroll(UUID ownerId) {
public MerchantScroll(final MerchantScroll card) {
public MerchantScroll copy() {return new MerchantScroll(this);
public class MossMonster extends CardImpl {
public MossMonster(UUID ownerId) {
public MossMonster(final MossMonster card) {
public MossMonster copy() {return new MossMonster(this);
public class PeachGardenOath extends CardImpl {
public PeachGardenOath(UUID ownerId) {
public PeachGardenOath(final PeachGardenOath card) {
public PeachGardenOath copy() {return new PeachGardenOath(this);
public class PhyrexianColossus extends CardImpl {
public PhyrexianColossus(UUID ownerId) {
public PhyrexianColossus(final PhyrexianColossus card) {
public PhyrexianColossus copy() {return new PhyrexianColossus(this);
public class PrimevalForce extends CardImpl {
public PrimevalForce(UUID ownerId) {
public PrimevalForce(final PrimevalForce card) {
public PrimevalForce copy() {return new PrimevalForce(this);
public class SavannahLions extends CardImpl {
public SavannahLions(UUID ownerId) {
public SavannahLions(final SavannahLions card) {
public SavannahLions copy() {return new SavannahLions(this);
public class SeaEagle extends CardImpl {
public SeaEagle(UUID ownerId) {
public SeaEagle(final SeaEagle card) {
public SeaEagle copy() {return new SeaEagle(this);
public class SilverbackApe extends CardImpl {
public SilverbackApe(UUID ownerId) {
public SilverbackApe(final SilverbackApe card) {
public SilverbackApe copy() {return new SilverbackApe(this);
public class StandingTroops extends CardImpl {
public StandingTroops(UUID ownerId) {
public StandingTroops(final StandingTroops card) {
public StandingTroops copy() {return new StandingTroops(this);
public class StarCompass extends CardImpl {
public StarCompass(UUID ownerId) {
public StarCompass(final StarCompass card) {
public StarCompass copy() {return new StarCompass(this);
class StarCompassManaAbility extends ManaAbility {
public StarCompassManaAbility() {
public StarCompassManaAbility(final StarCompassManaAbility ability) {
public StarCompassManaAbility copy() {return new StarCompassManaAbility(this);
public List<Mana> getNetMana(Game game) {return ((StarCompassManaEffect) getEffects().get(0)).getNetMana(game, this);
class StarCompassManaEffect extends ManaEffect {
public StarCompassManaEffect() {
public StarCompassManaEffect(final StarCompassManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;return true;
public List<Mana> getNetMana(Game game, Ability source) {return netManas;
private Mana getManaTypes(Game game, Ability source) {return types;
public Mana getMana(Game game, Ability source) {return null;
public StarCompassManaEffect copy() {return new StarCompassManaEffect(this);
public class VampiricSpirit extends CardImpl {
public VampiricSpirit(UUID ownerId) {
public VampiricSpirit(final VampiricSpirit card) {
public VampiricSpirit copy() {return new VampiricSpirit(this);
public class WarpedDevotion extends CardImpl {
public WarpedDevotion(UUID ownerId) {
public WarpedDevotion(final WarpedDevotion card) {
public WarpedDevotion copy() {return new WarpedDevotion(this);
class WarpedDevotionTriggeredAbility extends TriggeredAbilityImpl {
public WarpedDevotionTriggeredAbility() {
public WarpedDevotionTriggeredAbility(final WarpedDevotionTriggeredAbility ability) {
public WarpedDevotionTriggeredAbility copy() {return new WarpedDevotionTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a permanent is returned to a player's hand, that player discards a card.";
public class AEtherSpellbomb extends CardImpl {
public AEtherSpellbomb(UUID ownerId) {
public AEtherSpellbomb(final AEtherSpellbomb card) {
public AEtherSpellbomb copy() {return new AEtherSpellbomb(this);
public class AngelOfSalvation extends CardImpl {
public AngelOfSalvation(UUID ownerId) {
public AngelOfSalvation(final AngelOfSalvation card) {
public AngelOfSalvation copy() {return new AngelOfSalvation(this);
public class ArgivianRestoration extends CardImpl {
public ArgivianRestoration(UUID ownerId) {
public ArgivianRestoration(final ArgivianRestoration card) {
public ArgivianRestoration copy() {return new ArgivianRestoration(this);
public class CelestialCrusader extends CardImpl {
public CelestialCrusader(UUID ownerId) {
public CelestialCrusader(final CelestialCrusader card) {
public CelestialCrusader copy() {return new CelestialCrusader(this);
public class ConclaveEquenaut extends CardImpl {
public ConclaveEquenaut(UUID ownerId) {
public ConclaveEquenaut(final ConclaveEquenaut card) {
public ConclaveEquenaut copy() {return new ConclaveEquenaut(this);
public class ConclavePhalanx extends CardImpl {
public ConclavePhalanx(UUID ownerId) {
public ConclavePhalanx(final ConclavePhalanx card) {
public ConclavePhalanx copy() {return new ConclavePhalanx(this);
public class Crusade extends CardImpl {
public Crusade(UUID ownerId) {
public Crusade(final Crusade card) {
public Crusade copy() {return new Crusade(this);
public class DaruEncampment extends CardImpl {
public DaruEncampment(UUID ownerId) {
public DaruEncampment(final DaruEncampment card) {
public DaruEncampment copy() {return new DaruEncampment(this);
public class EchoingTruth extends CardImpl {
public EchoingTruth(UUID ownerId) {
public EchoingTruth(final EchoingTruth card) {
public EchoingTruth copy() {return new EchoingTruth(this);
class ReturnToHandAllNamedPermanentsEffect extends OneShotEffect {
public ReturnToHandAllNamedPermanentsEffect() {
public ReturnToHandAllNamedPermanentsEffect(final ReturnToHandAllNamedPermanentsEffect effect) {
public ReturnToHandAllNamedPermanentsEffect copy() {return new ReturnToHandAllNamedPermanentsEffect(this);
public boolean apply(Game game, Ability source) {
public class EnergyChamber extends CardImpl {
public EnergyChamber(UUID ownerId) {
public EnergyChamber(final EnergyChamber card) {
public EnergyChamber copy() {return new EnergyChamber(this);
public class Frogmite extends CardImpl {
public Frogmite(UUID ownerId) {
public Frogmite(final Frogmite card) {
public Frogmite copy() {return new Frogmite(this);return new GoldmeadowHarrier(this);
public class MishrasFactory extends CardImpl {
public MishrasFactory(UUID ownerId) {
public MishrasFactory(final MishrasFactory card) {
public MishrasFactory copy() {return new MishrasFactory(this);
class AssemblyWorkerToken extends Token {
public AssemblyWorkerToken() {
public class MoongloveExtract extends CardImpl {
public MoongloveExtract(UUID ownerId) {
public MoongloveExtract(final MoongloveExtract card) {
public MoongloveExtract copy() {return new MoongloveExtract(this);
public class MosquitoGuard extends CardImpl {
public MosquitoGuard (UUID ownerId) {
public MosquitoGuard (final MosquitoGuard card) {
public MosquitoGuard copy() {return new MosquitoGuard(this);
public class Pentavus extends CardImpl {
public Pentavus(UUID ownerId) {
public Pentavus(final Pentavus card) {
public Pentavus copy() {return new Pentavus(this);
class PentaviteToken extends Token {
public PentaviteToken() {
public class Qumulox extends CardImpl {
public Qumulox(UUID ownerId) {
public Qumulox(final Qumulox card) {
public Qumulox copy() {return new Qumulox(this);
public class RazorBarrier extends CardImpl {
public RazorBarrier(UUID ownerId) {
public RazorBarrier(final RazorBarrier card) {
public RazorBarrier copy() {return new RazorBarrier(this);
class RazorBarrierEffect extends GainAbilityTargetEffect {
public RazorBarrierEffect(Duration duration) {
public RazorBarrierEffect(final RazorBarrierEffect effect) {
public RazorBarrierEffect copy() {return new RazorBarrierEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RusticClachan extends CardImpl {
public RusticClachan(UUID ownerId) {
public RusticClachan(final RusticClachan card) {
public RusticClachan copy() {return new RusticClachan(this);
public class SeasonedMarshal extends CardImpl {
public SeasonedMarshal(UUID ownerId) {
public SeasonedMarshal(final SeasonedMarshal card) {
public SeasonedMarshal copy() {return new SeasonedMarshal(this);
public class SerratedBiskelion extends CardImpl {
public SerratedBiskelion(UUID ownerId) {
public SerratedBiskelion(final SerratedBiskelion card) {
public SerratedBiskelion copy() {return new SerratedBiskelion(this);
public class TempleAcolyte extends CardImpl {
public TempleAcolyte (UUID ownerId) {
public TempleAcolyte (final TempleAcolyte card) {
public TempleAcolyte copy() {return new TempleAcolyte(this);
public class Thoughtcast extends CardImpl {
public Thoughtcast(UUID ownerId) {
public Thoughtcast(final Thoughtcast card) {
public Thoughtcast copy() {return new Thoughtcast(this);
public class TripNoose extends CardImpl {
public TripNoose(UUID ownerId) {
public TripNoose(final TripNoose card) {
public TripNoose copy() {return new TripNoose(this);
public class AllosaurusRider extends CardImpl {
public AllosaurusRider(UUID ownerId) {
public AllosaurusRider(final AllosaurusRider card) {
public AllosaurusRider copy() {return new AllosaurusRider(this);
public class AmbushCommander extends CardImpl {
public AmbushCommander(UUID ownerId) {
public AmbushCommander(final AmbushCommander card) {
public AmbushCommander copy() {return new AmbushCommander(this);
class AmbushCommanderToken extends Token {
public AmbushCommanderToken() {
public class BoggartShenanigans extends CardImpl {
public BoggartShenanigans(UUID ownerId) {
public BoggartShenanigans(final BoggartShenanigans card) {
public BoggartShenanigans copy() {return new BoggartShenanigans(this);
public class Clickslither extends CardImpl {
public Clickslither(UUID ownerId) {
public Clickslither(final Clickslither card) {
public Clickslither copy() {return new Clickslither(this);
public class EmberwildeAugur extends CardImpl {
public EmberwildeAugur(UUID ownerId) {
public EmberwildeAugur(final EmberwildeAugur card) {
public EmberwildeAugur copy() {return new EmberwildeAugur(this);
public class GempalmStrider extends CardImpl {
public GempalmStrider(UUID ownerId) {
public GempalmStrider(final GempalmStrider card) {
public GempalmStrider copy() {return new GempalmStrider(this);
public class IbHalfheartGoblinTactician extends CardImpl {
public IbHalfheartGoblinTactician(UUID ownerId) {
public IbHalfheartGoblinTactician(final IbHalfheartGoblinTactician card) {
public IbHalfheartGoblinTactician copy() {return new IbHalfheartGoblinTactician(this);
class IbHalfheartGoblinTacticianEffect extends OneShotEffect {
public IbHalfheartGoblinTacticianEffect() {
public IbHalfheartGoblinTacticianEffect(final IbHalfheartGoblinTacticianEffect effect) {
public IbHalfheartGoblinTacticianEffect copy() {return new IbHalfheartGoblinTacticianEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class SkirkDrillSergeant extends CardImpl {
public SkirkDrillSergeant(UUID ownerId) {
public SkirkDrillSergeant(final SkirkDrillSergeant card) {
public SkirkDrillSergeant copy() {return new SkirkDrillSergeant(this);
class SkirkDrillSergeantEffect extends OneShotEffect {
public SkirkDrillSergeantEffect() {
public SkirkDrillSergeantEffect(final SkirkDrillSergeantEffect effect) {
public SkirkDrillSergeantEffect copy() {return new SkirkDrillSergeantEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class SkirkShaman extends CardImpl {
public SkirkShaman(UUID ownerId) {
public SkirkShaman(final SkirkShaman card) {
public SkirkShaman copy() {return new SkirkShaman(this);
public class StonewoodInvoker extends CardImpl {
public StonewoodInvoker(UUID ownerId) {
public StonewoodInvoker(final StonewoodInvoker card) {
public StonewoodInvoker copy() {return new StonewoodInvoker(this);
public class TimberwatchElf extends CardImpl {
public TimberwatchElf(UUID ownerId) {
public TimberwatchElf(final TimberwatchElf card) {
public TimberwatchElf copy() {return new TimberwatchElf(this);
public class AerieOuphes extends CardImpl {
public AerieOuphes(UUID ownerId) {
public AerieOuphes(final AerieOuphes card) {
public AerieOuphes copy() {return new AerieOuphes(this);
public class AltarGolem extends CardImpl {
public AltarGolem(UUID ownerId) {
public AltarGolem(final AltarGolem card) {
public AltarGolem copy() {return new AltarGolem(this);
public class AntlerSkulkin extends CardImpl {
public AntlerSkulkin(UUID ownerId) {
public AntlerSkulkin(final AntlerSkulkin card) {
public AntlerSkulkin copy() {return new AntlerSkulkin(this);
public class ArchonOfJustice extends CardImpl {
public ArchonOfJustice(UUID ownerId) {
public ArchonOfJustice(final ArchonOfJustice card) {
public ArchonOfJustice copy() {return new ArchonOfJustice(this);
public class BallynockTrapper extends CardImpl {
public BallynockTrapper(UUID ownerId) {
public BallynockTrapper(final BallynockTrapper card) {
public BallynockTrapper copy() {return new BallynockTrapper(this);
public class BanishingKnack extends CardImpl {
public BanishingKnack(UUID ownerId) {
public BanishingKnack(final BanishingKnack card) {
public BanishingKnack copy() {return new BanishingKnack(this);
public class BattlegateMimic extends CardImpl {
public BattlegateMimic(UUID ownerId) {
public BattlegateMimic(final BattlegateMimic card) {
public BattlegateMimic copy() {return new BattlegateMimic(this);
public class BatwingBrume extends CardImpl {
public BatwingBrume(UUID ownerId) {
public BatwingBrume(final BatwingBrume card) {
public BatwingBrume copy() {return new BatwingBrume(this);
class BatwingBrumeEffect extends OneShotEffect {
public BatwingBrumeEffect() {
public BatwingBrumeEffect(final BatwingBrumeEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BatwingBrumeEffect copy() {return new BatwingBrumeEffect(this);
public class BeckonApparition extends CardImpl {
public BeckonApparition(UUID ownerId) {
public BeckonApparition(final BeckonApparition card) {
public BeckonApparition copy() {return new BeckonApparition(this);
class BeckonApparitionToken extends Token {
BeckonApparitionToken() {
public class BelligerentHatchling extends CardImpl {
public BelligerentHatchling(UUID ownerId) {
public BelligerentHatchling(final BelligerentHatchling card) {
public BelligerentHatchling copy() {return new BelligerentHatchling(this);
public class BloodiedGhost extends CardImpl {
public BloodiedGhost (UUID ownerId) {
public BloodiedGhost (final BloodiedGhost card) {
public BloodiedGhost copy() {return new BloodiedGhost(this);
public class BloomTender extends CardImpl {
public BloomTender(UUID ownerId) {
public BloomTender(final BloomTender card) {
public BloomTender copy() {return new BloomTender(this);
class BloomTenderEffect extends ManaEffect {
public BloomTenderEffect() {
public BloomTenderEffect(final BloomTenderEffect effect) {
public BloomTenderEffect copy() {return new BloomTenderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public Mana getMana(Game game, Ability source) {return mana;return null;
public class CacheRaiders extends CardImpl {
public CacheRaiders(UUID ownerId) {
public CacheRaiders(final CacheRaiders card) {
public CacheRaiders copy() {return new CacheRaiders(this);
public class CankerAbomination extends CardImpl {
public CankerAbomination(UUID ownerId) {
public CankerAbomination(final CankerAbomination card) {
public CankerAbomination copy() {return new CankerAbomination(this);
class CankerAbominationEffect extends OneShotEffect {
public CankerAbominationEffect() {
public CankerAbominationEffect(final CankerAbominationEffect effect) {
public CankerAbominationEffect copy() {return new CankerAbominationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CankerousThirst extends CardImpl {
public CankerousThirst(UUID ownerId) {
public CankerousThirst(final CankerousThirst card) {
public CankerousThirst copy() {return new CankerousThirst(this);
public class CascadeBluffs extends CardImpl {
public CascadeBluffs(UUID ownerId) {
public CascadeBluffs(final CascadeBluffs card) {
public CascadeBluffs copy() {return new CascadeBluffs(this);
public class CauldronHaze extends CardImpl {
public CauldronHaze(UUID ownerId) {
public CauldronHaze(final CauldronHaze card) {
public CauldronHaze copy() {return new CauldronHaze(this);
public class CennsEnlistment extends CardImpl {
public CennsEnlistment(UUID ownerId) {
public CennsEnlistment(final CennsEnlistment card) {
public CennsEnlistment copy() {return new CennsEnlistment(this);
public class ChaoticBacklash extends CardImpl {
public ChaoticBacklash(UUID ownerId) {
public ChaoticBacklash(final ChaoticBacklash card) {
public ChaoticBacklash copy() {return new ChaoticBacklash(this);
class ChaoticBacklashEffect extends OneShotEffect {
public ChaoticBacklashEffect() {
public ChaoticBacklashEffect(final ChaoticBacklashEffect effect) {
public ChaoticBacklashEffect copy() {return new ChaoticBacklashEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CinderPyromancer extends CardImpl {
public CinderPyromancer (UUID ownerId) {
public CinderPyromancer (final CinderPyromancer card) {
public CinderPyromancer copy() {return new CinderPyromancer(this);
public class CloutOfTheDominus extends CardImpl {
public CloutOfTheDominus(UUID ownerId) {
public CloutOfTheDominus(final CloutOfTheDominus card) {
public CloutOfTheDominus copy() {return new CloutOfTheDominus(this);
public class ColdEyedSelkie extends CardImpl {
public ColdEyedSelkie(UUID ownerId) {
public ColdEyedSelkie(final ColdEyedSelkie card) {
public ColdEyedSelkie copy() {return new ColdEyedSelkie(this);
class ColdEyeSelkieEffect extends OneShotEffect {
public ColdEyeSelkieEffect() {
public ColdEyeSelkieEffect(final ColdEyeSelkieEffect effect) {
public ColdEyeSelkieEffect copy() {return new ColdEyeSelkieEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CreakwoodGhoul extends CardImpl {
public CreakwoodGhoul(UUID ownerId) {
public CreakwoodGhoul(final CreakwoodGhoul card) {
public CreakwoodGhoul copy() {return new CreakwoodGhoul(this);
public class CreakwoodLiege extends CardImpl {
public CreakwoodLiege(UUID ownerId) {
public CreakwoodLiege(final CreakwoodLiege card) {
public CreakwoodLiege copy() {return new CreakwoodLiege(this);
class CreakwoodLiegeToken extends Token {
CreakwoodLiegeToken() {
public class CrumblingAshes extends CardImpl {
public CrumblingAshes(UUID ownerId) {
public CrumblingAshes(final CrumblingAshes card) {
public CrumblingAshes copy() {return new CrumblingAshes(this);
public class DeathbringerLiege extends CardImpl {
public DeathbringerLiege (UUID ownerId) {
public DeathbringerLiege (final DeathbringerLiege card) {
public DeathbringerLiege copy() {return new DeathbringerLiege(this);
class DeathbringerLiegeEffect extends OneShotEffect {
DeathbringerLiegeEffect() {
DeathbringerLiegeEffect(final DeathbringerLiegeEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public DeathbringerLiegeEffect copy() {return new DeathbringerLiegeEffect(this);
public class DeityOfScars extends CardImpl {
public DeityOfScars(UUID ownerId) {
public DeityOfScars(final DeityOfScars card) {
public DeityOfScars copy() {return new DeityOfScars(this);
public class DivinityOfPride extends CardImpl {
public DivinityOfPride(UUID ownerId) {
public DivinityOfPride(final DivinityOfPride card) {
public DivinityOfPride copy() {return new DivinityOfPride(this);
class DivinityOfPrideCondition implements Condition {
public boolean apply(Game game, Ability source) {return player != null && player.getLife() >= 25;
public class DominusOfFealty extends CardImpl {
public DominusOfFealty(UUID ownerId) {
public DominusOfFealty(final DominusOfFealty card) {
public DominusOfFealty copy() {return new DominusOfFealty(this);
public class Doomgape extends CardImpl {
public Doomgape(UUID ownerId) {
public Doomgape(final Doomgape card) {
public Doomgape copy() {return new Doomgape(this);
class DoomgapeEffect extends OneShotEffect {
public DoomgapeEffect() {
public DoomgapeEffect(final DoomgapeEffect effect) {
public DoomgapeEffect copy() {return new DoomgapeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DoubleCleave extends CardImpl {
public DoubleCleave(UUID ownerId) {
public DoubleCleave(final DoubleCleave card) {
public DoubleCleave copy() {return new DoubleCleave(this);
public class DrainTheWell extends CardImpl {
public DrainTheWell(UUID ownerId) {
public DrainTheWell(final DrainTheWell card) {
public DrainTheWell copy() {return new DrainTheWell(this);
public class DreamFracture extends CardImpl {
public DreamFracture(UUID ownerId) {
public DreamFracture(final DreamFracture card) {
public DreamFracture copy() {return new DreamFracture(this);
class DreamFractureEffect extends OneShotEffect {
public DreamFractureEffect() {
public DreamFractureEffect(final DreamFractureEffect effect) {
public DreamFractureEffect copy() {return new DreamFractureEffect(this);
public boolean apply(Game game, Ability source) {return countered;
public class DreamThief extends CardImpl {
public DreamThief(UUID ownerId) {
public DreamThief(final DreamThief card) {
public DreamThief copy() {return new DreamThief(this);
class CastBlueSpellThisTurnCondition implements Condition {
public boolean apply(Game game, Ability source) {return watcher.conditionMet();return false;
class DreamThiefWatcher extends Watcher {
public DreamThiefWatcher(UUID cardId) {
public DreamThiefWatcher(final DreamThiefWatcher watcher) {
public DreamThiefWatcher copy() {return new DreamThiefWatcher(this);
public void watch(GameEvent event, Game game) {
public class DuergarAssailant extends CardImpl {
public DuergarAssailant(UUID ownerId) {
public DuergarAssailant(final DuergarAssailant card) {
public DuergarAssailant copy() {return new DuergarAssailant(this);
public class DuergarCaveGuard extends CardImpl {
public DuergarCaveGuard(UUID ownerId) {
public DuergarCaveGuard(final DuergarCaveGuard card) {
public DuergarCaveGuard copy() {return new DuergarCaveGuard(this);
public class DuergarMineCaptain extends CardImpl {
public DuergarMineCaptain(UUID ownerId) {
public DuergarMineCaptain(final DuergarMineCaptain card) {
public DuergarMineCaptain copy() {return new DuergarMineCaptain(this);
public class EdgeOfTheDivinity extends CardImpl {
public EdgeOfTheDivinity(UUID ownerId) {
public EdgeOfTheDivinity(final EdgeOfTheDivinity card) {
public EdgeOfTheDivinity copy() {return new EdgeOfTheDivinity(this);
public class EndlessHorizons extends CardImpl {
public EndlessHorizons(UUID ownerId) {
public EndlessHorizons(final EndlessHorizons card) {
public EndlessHorizons copy() {return new EndlessHorizons(this);
class EndlessHorizonsEffect extends SearchEffect {
public EndlessHorizonsEffect() {
public EndlessHorizonsEffect(final EndlessHorizonsEffect effect) {
public EndlessHorizonsEffect copy() {return new EndlessHorizonsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class EndlessHorizonsEffect2 extends OneShotEffect {
public EndlessHorizonsEffect2() {
public EndlessHorizonsEffect2(final EndlessHorizonsEffect2 effect) {
public EndlessHorizonsEffect2 copy() {return new EndlessHorizonsEffect2(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Endure extends CardImpl {
public Endure(UUID ownerId) {
public Endure(final Endure card) {
public Endure copy() {return new Endure(this);
public class FangSkulkin extends CardImpl {
public FangSkulkin(UUID ownerId) {
public FangSkulkin(final FangSkulkin card) {
public FangSkulkin copy() {return new FangSkulkin(this);
public class FavorOfTheOverbeing extends CardImpl {
public FavorOfTheOverbeing(UUID ownerId) {
public FavorOfTheOverbeing(final FavorOfTheOverbeing card) {
public FavorOfTheOverbeing copy() {return new FavorOfTheOverbeing(this);
public class FetidHeath extends CardImpl {
public FetidHeath (UUID ownerId) {
public FetidHeath (final FetidHeath card) {
public FetidHeath copy() {return new FetidHeath(this);
public class FieryBombardment extends CardImpl {
public FieryBombardment(UUID ownerId) {
public FieryBombardment(final FieryBombardment card) {
public FieryBombardment copy() {return new FieryBombardment(this);
class FieryBombardmentEffect extends OneShotEffect {
public FieryBombardmentEffect() {
public FieryBombardmentEffect(final FieryBombardmentEffect effect) {
public FieryBombardmentEffect copy() {return new FieryBombardmentEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class FigureOfDestiny extends CardImpl {
public FigureOfDestiny(UUID ownerId) {
public FigureOfDestiny(final FigureOfDestiny card) {
public FigureOfDestiny copy() {return new FigureOfDestiny(this);
private class FigureOfDestinyToken1 extends Token {
public FigureOfDestinyToken1() {
private class FigureOfDestinyToken2 extends Token {
public FigureOfDestinyToken2() {
private class FigureOfDestinyToken3 extends Token {
public FigureOfDestinyToken3() {
public class FireAtWill extends CardImpl {
public FireAtWill(UUID ownerId) {
public FireAtWill(final FireAtWill card) {
public FireAtWill copy() {return new FireAtWill(this);
public class FlameJab extends CardImpl {
public FlameJab(UUID ownerId) {
public FlameJab(final FlameJab card) {
public FlameJab copy() {return new FlameJab(this);
public class Flickerwisp extends CardImpl {
public Flickerwisp(UUID ownerId) {
public Flickerwisp(final Flickerwisp card) {
public Flickerwisp copy() {return new Flickerwisp(this);
class FlickerwispEffect extends OneShotEffect {
public FlickerwispEffect() {
public FlickerwispEffect(final FlickerwispEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public FlickerwispEffect copy() {return new FlickerwispEffect(this);
public class FloodedGrove extends CardImpl {
public FloodedGrove (UUID ownerId) {
public FloodedGrove (final FloodedGrove card) {
public FloodedGrove copy() {return new FloodedGrove(this);return new GiftOfTheDeity(this);
public class GilderBairn extends CardImpl {
public GilderBairn(UUID ownerId) {
public GilderBairn(final GilderBairn card) {
public GilderBairn copy() {return new GilderBairn(this);
class GilderBairnEffect extends OneShotEffect {
public GilderBairnEffect() {
public GilderBairnEffect(final GilderBairnEffect effect) {
public GilderBairnEffect copy() {return new GilderBairnEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;
public class GlenElendraArchmage extends CardImpl {
public GlenElendraArchmage(UUID ownerId) {
public GlenElendraArchmage(final GlenElendraArchmage card) {
public GlenElendraArchmage copy() {return new GlenElendraArchmage(this);
public class GrazingKelpie extends CardImpl {
public GrazingKelpie(UUID ownerId) {
public GrazingKelpie(final GrazingKelpie card) {
public GrazingKelpie copy() {return new GrazingKelpie(this);
public class GroundlingPouncer extends CardImpl {
public GroundlingPouncer(UUID ownerId) {
public GroundlingPouncer(final GroundlingPouncer card) {
public GroundlingPouncer copy() {return new GroundlingPouncer(this);
class GroundlingPouncerAbility extends LimitedTimesPerTurnActivatedAbility {
public GroundlingPouncerAbility(Zone zone, Effect effect, Cost cost, Condition condition, String rule) {
public GroundlingPouncerAbility(GroundlingPouncerAbility ability) {
public Effects getEffects(Game game, EffectType effectType) {return emptyEffects;return super.getEffects(game, effectType);
public boolean canActivate(UUID playerId, Game game) {return false;return super.canActivate(playerId, game);
public GroundlingPouncerAbility copy() {return new GroundlingPouncerAbility(this);
public String getRule() {return ruleText;
public class HagHedgeMage extends CardImpl {
public HagHedgeMage(UUID ownerId) {
public HagHedgeMage(final HagHedgeMage card) {
public HagHedgeMage copy() {return new HagHedgeMage(this);
public class HallowedBurial extends CardImpl {
public HallowedBurial(UUID ownerId) {
public HallowedBurial(final HallowedBurial card) {
public HallowedBurial copy() {return new HallowedBurial(this);
class HallowedBurialEffect extends OneShotEffect {
public HallowedBurialEffect() {
public HallowedBurialEffect(final HallowedBurialEffect effect) {
public HallowedBurialEffect copy() {return new HallowedBurialEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HarvestGwyllion extends CardImpl {
public HarvestGwyllion(UUID ownerId) {
public HarvestGwyllion(final HarvestGwyllion card) {
public HarvestGwyllion copy() {return new HarvestGwyllion(this);
public class HatchetBully extends CardImpl {
public HatchetBully(UUID ownerId) {
public HatchetBully(final HatchetBully card) {
public HatchetBully copy() {return new HatchetBully(this);
class HatchetBullyCost extends CostImpl {
public HatchetBullyCost() {
public HatchetBullyCost(HatchetBullyCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public HatchetBullyCost copy() {return new HatchetBullyCost(this);
class HatchetBullyEffect extends OneShotEffect {
public HatchetBullyEffect() {
public HatchetBullyEffect(final HatchetBullyEffect effect) {
public HatchetBullyEffect copy() {return new HatchetBullyEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class HeartlashCinder extends CardImpl {
public HeartlashCinder(UUID ownerId) {
public HeartlashCinder(final HeartlashCinder card) {
public HeartlashCinder copy() {return new HeartlashCinder(this);
class ChromaHeartlashCinderCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return chroma;
public DynamicValue copy() {return new ChromaOutrageShamanCount();
public String toString() {return "1";
public String getMessage() {return "";
public class HelixPinnacle extends CardImpl {
public HelixPinnacle(UUID ownerId) {
public HelixPinnacle(final HelixPinnacle card) {
public HelixPinnacle copy() {return new HelixPinnacle(this);
public class HobgoblinDragoon extends CardImpl {
public HobgoblinDragoon(UUID ownerId) {
public HobgoblinDragoon(final HobgoblinDragoon card) {
public HobgoblinDragoon copy() {return new HobgoblinDragoon(this);
public class HoofSkulkin extends CardImpl {
public HoofSkulkin(UUID ownerId) {
public HoofSkulkin(final HoofSkulkin card) {
public HoofSkulkin copy() {return new HoofSkulkin(this);
public class HotheadedGiant extends CardImpl {
public HotheadedGiant(UUID ownerId) {
public HotheadedGiant(final HotheadedGiant card) {
public HotheadedGiant copy() {return new HotheadedGiant(this);
class CastRedSpellThisTurnCondition implements Condition {
public boolean apply(Game game, Ability source) {return watcher.conditionMet();return false;
class HotHeadedGiantWatcher extends Watcher {
public HotHeadedGiantWatcher(UUID cardId) {
public HotHeadedGiantWatcher(final HotHeadedGiantWatcher watcher) {
public HotHeadedGiantWatcher copy() {return new HotHeadedGiantWatcher(this);
public void watch(GameEvent event, Game game) {
public class IdleThoughts extends CardImpl {
public IdleThoughts(UUID ownerId) {
public IdleThoughts(final IdleThoughts card) {
public IdleThoughts copy() {return new IdleThoughts(this);
public class ImpelledGiant extends CardImpl {
public ImpelledGiant(UUID ownerId) {
public ImpelledGiant(final ImpelledGiant card) {
public ImpelledGiant copy() {return new ImpelledGiant(this);
class ImpelledGiantCost extends CostImpl {
public ImpelledGiantCost(TargetControlledPermanent target) {
public ImpelledGiantCost(final ImpelledGiantCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return false;return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return target.canChoose(controllerId, game);
public ImpelledGiantCost copy() {return new ImpelledGiantCost(this);
class ImpelledGiantBoostEffect extends OneShotEffect {
public ImpelledGiantBoostEffect() {
public ImpelledGiantBoostEffect(ImpelledGiantBoostEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ImpelledGiantBoostEffect copy() {return new ImpelledGiantBoostEffect(this);
public class IndigoFaerie extends CardImpl {
public IndigoFaerie(UUID ownerId) {
public IndigoFaerie(final IndigoFaerie card) {
public IndigoFaerie copy() {return new IndigoFaerie(this);
class BecomesBlueTargetEffect extends ContinuousEffectImpl {
public BecomesBlueTargetEffect() {
public BecomesBlueTargetEffect(final BecomesBlueTargetEffect effect) {
public BecomesBlueTargetEffect copy() {return new BecomesBlueTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class InsideOut extends CardImpl {
public InsideOut(UUID ownerId) {
public InsideOut(final InsideOut card) {
public InsideOut copy() {return new InsideOut(this);
public class Inundate extends CardImpl {
public Inundate(UUID ownerId) {
public Inundate(final Inundate card) {
public Inundate copy() {return new Inundate(this);
public class InvertTheSkies extends CardImpl {
public InvertTheSkies(UUID ownerId) {
public InvertTheSkies(final InvertTheSkies card) {
public InvertTheSkies copy() {return new InvertTheSkies(this);
class InvertTheSkiesEffect extends ContinuousEffectImpl {
public InvertTheSkiesEffect() {
public InvertTheSkiesEffect(final InvertTheSkiesEffect effect) {
public InvertTheSkiesEffect copy() {return new InvertTheSkiesEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class JawboneSkulkin extends CardImpl {
public JawboneSkulkin(UUID ownerId) {
public JawboneSkulkin(final JawboneSkulkin card) {
public JawboneSkulkin copy() {return new JawboneSkulkin(this);
public class KithkinSpellduster extends CardImpl {
public KithkinSpellduster(UUID ownerId) {
public KithkinSpellduster(final KithkinSpellduster card) {
public KithkinSpellduster copy() {return new KithkinSpellduster(this);
public class KithkinZealot extends CardImpl {
public KithkinZealot(UUID ownerId) {
public KithkinZealot(final KithkinZealot card) {
public KithkinZealot copy() {return new KithkinZealot(this);
class KithkinZealotEffect extends OneShotEffect {
public KithkinZealotEffect() {
public KithkinZealotEffect(final KithkinZealotEffect effect) {
public KithkinZealotEffect copy() {return new KithkinZealotEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LeeringEmblem extends CardImpl {
public LeeringEmblem(UUID ownerId) {
public LeeringEmblem(final LeeringEmblem card) {
public LeeringEmblem copy() {return new LeeringEmblem(this);
public class LightFromWithin extends CardImpl {
public LightFromWithin(UUID ownerId) {
public LightFromWithin(final LightFromWithin card) {
public LightFromWithin copy() {return new LightFromWithin(this);
class LightFromWithinEffect extends ContinuousEffectImpl {
public LightFromWithinEffect() {
public LightFromWithinEffect(final LightFromWithinEffect effect) {
public LightFromWithinEffect copy() {return new LightFromWithinEffect(this);
public boolean apply(Game game, Ability source) {return boosted;
class ChromaLightFromWithinCount implements DynamicValue {
public ChromaLightFromWithinCount(Permanent permanent) {
public ChromaLightFromWithinCount(final ChromaLightFromWithinCount dynamicValue) {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return chroma;
public DynamicValue copy() {return new ChromaLightFromWithinCount(this);
public String toString() {return "1";
public String getMessage() {return "";
public class LingeringTormentor extends CardImpl {
public LingeringTormentor(UUID ownerId) {
public LingeringTormentor(final LingeringTormentor card) {
public LingeringTormentor copy() {return new LingeringTormentor(this);
public class LoyalGyrfalcon extends CardImpl {
public LoyalGyrfalcon(UUID ownerId) {
public LoyalGyrfalcon(final LoyalGyrfalcon card) {
public LoyalGyrfalcon copy() {return new LoyalGyrfalcon(this);
public class MerrowLevitator extends CardImpl {
public MerrowLevitator(UUID ownerId) {
public MerrowLevitator(final MerrowLevitator card) {
public MerrowLevitator copy() {return new MerrowLevitator(this);
public class MindwrackLiege extends CardImpl {
public MindwrackLiege(UUID ownerId) {
public MindwrackLiege(final MindwrackLiege card) {
public MindwrackLiege copy() {return new MindwrackLiege(this);
public class MirrorSheen extends CardImpl {
public MirrorSheen(UUID ownerId) {
public MirrorSheen(final MirrorSheen card) {
public MirrorSheen copy() {return new MirrorSheen(this);
class MirrorSheenEffect extends OneShotEffect {
public MirrorSheenEffect() {
public MirrorSheenEffect(final MirrorSheenEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MirrorSheenEffect copy() {return new MirrorSheenEffect(this);
class TargetYouPredicate implements ObjectPlayerPredicate<ObjectPlayer<StackObject>> {
public boolean apply(ObjectPlayer<StackObject> input, Game game) {return false;return true;return false;
public String toString() {return "spell that targets you";return new Monstrify(this);
public class Moonhold extends CardImpl {
public Moonhold(UUID ownerId) {
public Moonhold(final Moonhold card) {
public Moonhold copy() {return new Moonhold(this);
public MoonholdEffect() {
public MoonholdEffect(final MoonholdEffect effect) {
public MoonholdEffect copy() {return new MoonholdEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "you can't play land cards this turn (" + mageObject.getIdName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.PLAY_LAND;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public MoonholdEffect2() {
public MoonholdEffect2(final MoonholdEffect2 effect) {
public MoonholdEffect2 copy() {return new MoonholdEffect2(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't play creature cards this turn (" + mageObject.getIdName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class Necroskitter extends CardImpl {
public Necroskitter(UUID ownerId) {
public Necroskitter(final Necroskitter card) {
public Necroskitter copy() {return new Necroskitter(this);
class NecroskitterTriggeredAbility extends TriggeredAbilityImpl {
public NecroskitterTriggeredAbility() {
public NecroskitterTriggeredAbility(NecroskitterTriggeredAbility ability) {
public NecroskitterTriggeredAbility copy() {return new NecroskitterTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature an opponent controls with a -1/-1 counter on it dies, you may return that card to the battlefield under your control.";
public class NeedleSpecter extends CardImpl {
public NeedleSpecter(UUID ownerId) {
public NeedleSpecter(final NeedleSpecter card) {
public NeedleSpecter copy() {return new NeedleSpecter(this);
class NeedleSpecterEffect extends OneShotEffect {
public NeedleSpecterEffect() {
public NeedleSpecterEffect(final NeedleSpecterEffect effect) {
public NeedleSpecterEffect copy() {return new NeedleSpecterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NettleSentinel extends CardImpl {
public NettleSentinel(UUID ownerId) {
public NettleSentinel(final NettleSentinel card) {
public NettleSentinel copy() {return new NettleSentinel(this);
public class NightmareIncursion extends CardImpl {
public NightmareIncursion(UUID ownerId) {
public NightmareIncursion(final NightmareIncursion card) {
public NightmareIncursion copy() {return new NightmareIncursion(this);
class NightmareIncursionEffect extends OneShotEffect {
public NightmareIncursionEffect() {
public NightmareIncursionEffect(final NightmareIncursionEffect effect) {
public NightmareIncursionEffect copy() {return new NightmareIncursionEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class NightskyMimic extends CardImpl {
public NightskyMimic(UUID ownerId) {
public NightskyMimic(final NightskyMimic card) {
public NightskyMimic copy() {return new NightskyMimic(this);
public class NipGwyllion extends CardImpl {
public NipGwyllion(UUID ownerId) {
public NipGwyllion(final NipGwyllion card) {
public NipGwyllion copy() {return new NipGwyllion(this);
public class NobilisOfWar extends CardImpl {
public NobilisOfWar(UUID ownerId) {
public NobilisOfWar(final NobilisOfWar card) {
public NobilisOfWar copy() {return new NobilisOfWar(this);
public class NoggleBandit extends CardImpl {
public NoggleBandit(UUID ownerId) {
public NoggleBandit(final NoggleBandit card) {
public NoggleBandit copy() {return new NoggleBandit(this);
public class NoggleBridgebreaker extends CardImpl {
public NoggleBridgebreaker(UUID ownerId) {
public NoggleBridgebreaker(final NoggleBridgebreaker card) {
public NoggleBridgebreaker copy() {return new NoggleBridgebreaker(this);
public class NoggleHedgeMage extends CardImpl {
public NoggleHedgeMage(UUID ownerId) {
public NoggleHedgeMage(final NoggleHedgeMage card) {
public NoggleHedgeMage copy() {return new NoggleHedgeMage(this);
public class NoxiousHatchling extends CardImpl {
public NoxiousHatchling(UUID ownerId) {
public NoxiousHatchling(final NoxiousHatchling card) {
public NoxiousHatchling copy() {return new NoxiousHatchling(this);
public class Nucklavee extends CardImpl {
public Nucklavee(UUID ownerId) {
public Nucklavee(final Nucklavee card) {
public Nucklavee copy() {return new Nucklavee(this);
public class OdiousTrow extends CardImpl {
public OdiousTrow(UUID ownerId) {
public OdiousTrow(final OdiousTrow card) {
public OdiousTrow copy() {return new OdiousTrow(this);
public class OverbeingOfMyth extends CardImpl {
public OverbeingOfMyth(UUID ownerId) {
public OverbeingOfMyth(final OverbeingOfMyth card) {
public OverbeingOfMyth copy() {return new OverbeingOfMyth(this);
public class PatrolSignaler extends CardImpl {
public PatrolSignaler(UUID ownerId) {
public PatrolSignaler(final PatrolSignaler card) {
public PatrolSignaler copy() {return new PatrolSignaler(this);
public class PhosphorescentFeast extends CardImpl {
public PhosphorescentFeast(UUID ownerId) {
public PhosphorescentFeast(final PhosphorescentFeast card) {
public PhosphorescentFeast copy() {return new PhosphorescentFeast(this);
class PhosphorescentFeastEffect extends OneShotEffect {
public PhosphorescentFeastEffect() {
public PhosphorescentFeastEffect(final PhosphorescentFeastEffect effect) {
public PhosphorescentFeastEffect copy() {return new PhosphorescentFeastEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class Primalcrux extends CardImpl {
public Primalcrux(UUID ownerId) {
public Primalcrux(final Primalcrux card) {
public Primalcrux copy() {return new Primalcrux(this);
class ChromaPrimalcruxCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return chroma;
public DynamicValue copy() {return new ChromaPrimalcruxCount();
public String toString() {return "1";
public String getMessage() {return "";
public class PunctureBlast extends CardImpl {
public PunctureBlast(UUID ownerId) {
public PunctureBlast(final PunctureBlast card) {
public PunctureBlast copy() {return new PunctureBlast(this);
public class PyrrhicRevival extends CardImpl {
public PyrrhicRevival(UUID ownerId) {
public PyrrhicRevival(final PyrrhicRevival card) {
public PyrrhicRevival copy() {return new PyrrhicRevival(this);
class PyrrhicRevivalEffect extends OneShotEffect {
public PyrrhicRevivalEffect() {staticText = "Each player returns each creature card from his or her graveyard to the battlefield with an additional -1/-1 counter on it";
public PyrrhicRevivalEffect(final PyrrhicRevivalEffect effect) {
public PyrrhicRevivalEffect copy() {return new PyrrhicRevivalEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class Quillspike extends CardImpl {
public Quillspike(UUID ownerId) {
public Quillspike(final Quillspike card) {
public Quillspike copy() {return new Quillspike(this);
public class RavensCrime extends CardImpl {
public RavensCrime(UUID ownerId) {
public RavensCrime(final RavensCrime card) {
public RavensCrime copy() {return new RavensCrime(this);
public class RazorfinAbolisher extends CardImpl {
public RazorfinAbolisher(UUID ownerId) {
public RazorfinAbolisher(final RazorfinAbolisher card) {
public RazorfinAbolisher copy() {return new RazorfinAbolisher(this);
public class RecumbentBliss extends CardImpl {
public RecumbentBliss(UUID ownerId) {
public RecumbentBliss(final RecumbentBliss card) {
public RecumbentBliss copy() {return new RecumbentBliss(this);
class RecumbentBlissEffect extends RestrictionEffect {
public RecumbentBlissEffect() {
public RecumbentBlissEffect(final RecumbentBlissEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canAttack(Game game) {return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public RecumbentBlissEffect copy() {return new RecumbentBlissEffect(this);
public class RegalForce extends CardImpl {
public RegalForce(UUID ownerId) {
public RegalForce(final RegalForce card) {
public RegalForce copy() {return new RegalForce(this);
public class RekindledFlame extends CardImpl {final String rule = "if an opponent has no cards in hand, you may return Rekindled Flame from your graveyard to your hand";
public RekindledFlame(UUID ownerId) {
public RekindledFlame(final RekindledFlame card) {
public RekindledFlame copy() {return new RekindledFlame(this);
class OpponentHasNoCardsInHandCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class RendclawTrow extends CardImpl {
public RendclawTrow(UUID ownerId) {
public RendclawTrow(final RendclawTrow card) {
public RendclawTrow copy() {return new RendclawTrow(this);
public class RestlessApparition extends CardImpl {
public RestlessApparition(UUID ownerId) {
public RestlessApparition(final RestlessApparition card) {
public RestlessApparition copy() {return new RestlessApparition(this);
public class RiseOfTheHobgoblins extends CardImpl {
public RiseOfTheHobgoblins(UUID ownerId) {
public RiseOfTheHobgoblins(final RiseOfTheHobgoblins card) {
public RiseOfTheHobgoblins copy() {return new RiseOfTheHobgoblins(this);
class RiseOfTheHobgoblinsEffect extends OneShotEffect {
public RiseOfTheHobgoblinsEffect() {
public RiseOfTheHobgoblinsEffect(final RiseOfTheHobgoblinsEffect effect) {
public RiseOfTheHobgoblinsEffect copy() {return new RiseOfTheHobgoblinsEffect(this);
public boolean apply(Game game, Ability source) {return token.putOntoBattlefield(costX, game, source.getSourceId(), source.getControllerId());return false;
class GoblinSoldierToken extends Token {
GoblinSoldierToken() {
public class RiverfallMimic extends CardImpl {
public RiverfallMimic(UUID ownerId) {
public RiverfallMimic(final RiverfallMimic card) {
public RiverfallMimic copy() {return new RiverfallMimic(this);
public class RuggedPrairie extends CardImpl {
public RuggedPrairie (UUID ownerId) {
public RuggedPrairie (final RuggedPrairie card) {
public RuggedPrairie copy() {return new RuggedPrairie(this);
public class SanityGrinding extends CardImpl {
public SanityGrinding(UUID ownerId) {
public SanityGrinding(final SanityGrinding card) {
public SanityGrinding copy() {return new SanityGrinding(this);
class SanityGrindingEffect extends OneShotEffect {
public SanityGrindingEffect() {
public SanityGrindingEffect(final SanityGrindingEffect effect) {
public boolean apply(Game game, Ability source) {return false;return controller.putCardsOnBottomOfLibrary(revealed, game, source, true);
public SanityGrindingEffect copy() {return new SanityGrindingEffect(this);
class ChromaSanityGrindingCount implements DynamicValue {
public ChromaSanityGrindingCount(Cards revealed) {
public ChromaSanityGrindingCount(final ChromaSanityGrindingCount dynamicValue) {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return chroma;
public DynamicValue copy() {return new ChromaSanityGrindingCount(this);
public String toString() {return "1";
public String getMessage() {return "";
public class Scarecrone extends CardImpl {
public Scarecrone(UUID ownerId) {
public Scarecrone(final Scarecrone card) {
public Scarecrone copy() {return new Scarecrone(this);
public class ScourgeOfTheNobilis extends CardImpl {
public ScourgeOfTheNobilis(UUID ownerId) {
public ScourgeOfTheNobilis(final ScourgeOfTheNobilis card) {
public ScourgeOfTheNobilis copy() {return new ScourgeOfTheNobilis(this);
public class SelkieHedgeMage extends CardImpl {private final String rule2 = "When {this} enters the battlefield, if you control two or more Islands, you may return target tapped creature to its owner's hand.";
public SelkieHedgeMage(UUID ownerId) {
public SelkieHedgeMage(final SelkieHedgeMage card) {
public SelkieHedgeMage copy() {return new SelkieHedgeMage(this);
public class ShellSkulkin extends CardImpl {
public ShellSkulkin(UUID ownerId) {
public ShellSkulkin(final ShellSkulkin card) {
public ShellSkulkin copy() {return new ShellSkulkin(this);
public class ShorecrasherMimic extends CardImpl {
public ShorecrasherMimic(UUID ownerId) {
public ShorecrasherMimic(final ShorecrasherMimic card) {
public ShorecrasherMimic copy() {return new ShorecrasherMimic(this);
public class ShrewdHatchling extends CardImpl {
public ShrewdHatchling(UUID ownerId) {
public ShrewdHatchling(final ShrewdHatchling card) {
public ShrewdHatchling copy() {return new ShrewdHatchling(this);
class ShrewdHatchlingEffect extends RestrictionEffect {
public ShrewdHatchlingEffect() {
public ShrewdHatchlingEffect(final ShrewdHatchlingEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return true;
public ShrewdHatchlingEffect copy() {return new ShrewdHatchlingEffect(this);
public class SlipperyBogle extends CardImpl {
public SlipperyBogle(UUID ownerId) {
public SlipperyBogle(final SlipperyBogle card) {
public SlipperyBogle copy() {return new SlipperyBogle(this);
public class SmolderingButcher extends CardImpl {
public SmolderingButcher (UUID ownerId) {
public SmolderingButcher (final SmolderingButcher card) {
public SmolderingButcher copy() {return new SmolderingButcher(this);return new Snakeform(this);
public class SootImp extends CardImpl {
public SootImp(UUID ownerId) {
public SootImp(final SootImp card) {
public SootImp copy() {return new SootImp(this);
class SootImpEffect extends OneShotEffect {
public SootImpEffect() {
public SootImpEffect(final SootImpEffect effect) {
public SootImpEffect copy() {return new SootImpEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SoulReap extends CardImpl {
public SoulReap(UUID ownerId) {
public SoulReap(final SoulReap card) {
public SoulReap copy() {return new SoulReap(this);
class CastBlackSpellThisTurnCondition implements Condition {
public boolean apply(Game game, Ability source) {return watcher.conditionMet();return false;
class SoulReapWatcher extends Watcher {
public SoulReapWatcher(UUID cardId) {
public SoulReapWatcher(final SoulReapWatcher watcher) {
public SoulReapWatcher copy() {return new SoulReapWatcher(this);
public void watch(GameEvent event, Game game) {
public class SoulSnuffers extends CardImpl {
public SoulSnuffers (UUID ownerId) {
public SoulSnuffers (final SoulSnuffers card) {
public SoulSnuffers copy() {return new SoulSnuffers(this);
public class SpiritOfTheHearth extends CardImpl {
public SpiritOfTheHearth(UUID ownerId) {
public SpiritOfTheHearth(final SpiritOfTheHearth card) {
public SpiritOfTheHearth copy() {return new SpiritOfTheHearth(this);
public class Spitemare extends CardImpl {
public Spitemare(UUID ownerId) {
public Spitemare(final Spitemare card) {
public Spitemare copy() {return new Spitemare(this);
class SpitemareTriggeredAbility extends TriggeredAbilityImpl {
public SpitemareTriggeredAbility() {
public SpitemareTriggeredAbility(final SpitemareTriggeredAbility effect) {
public SpitemareTriggeredAbility copy() {return new SpitemareTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt damage, " + super.getRule();
class SpitemareEffect extends OneShotEffect {
public SpitemareEffect() {
public SpitemareEffect(final SpitemareEffect effect) {
public SpitemareEffect copy() {return new SpitemareEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class SpittingImage extends CardImpl {
public SpittingImage(UUID ownerId) {
public SpittingImage(final SpittingImage card) {
public SpittingImage copy() {return new SpittingImage(this);
class SpittingImageEffect extends OneShotEffect {
public SpittingImageEffect() {
public SpittingImageEffect(final SpittingImageEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SpittingImageEffect copy() {return new SpittingImageEffect(this);
public class SpringjackShepherd extends CardImpl {
public SpringjackShepherd(UUID ownerId) {
public SpringjackShepherd(final SpringjackShepherd card) {
public SpringjackShepherd copy() {return new SpringjackShepherd(this);
class ChromaSpringjackShepherdCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return chroma;
public DynamicValue copy() {return new ChromaSpringjackShepherdCount();
public String toString() {return "1";
public String getMessage() {return "";
public class StalkerHag extends CardImpl {
public StalkerHag(UUID ownerId) {
public StalkerHag(final StalkerHag card) {
public StalkerHag copy() {return new StalkerHag(this);
public class StigmaLasher extends CardImpl {
public StigmaLasher(UUID ownerId) {
public StigmaLasher(final StigmaLasher card) {
public StigmaLasher copy() {return new StigmaLasher(this);
class StigmaLasherEffect extends ContinuousEffectImpl {
public StigmaLasherEffect() {
public StigmaLasherEffect(final StigmaLasherEffect effect) {
public StigmaLasherEffect copy() {return new StigmaLasherEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class SturdyHatchling extends CardImpl {
public SturdyHatchling(UUID ownerId) {
public SturdyHatchling(final SturdyHatchling card) {
public SturdyHatchling copy() {return new SturdyHatchling(this);
public class SutureSpirit extends CardImpl {
public SutureSpirit(UUID ownerId) {
public SutureSpirit(final SutureSpirit card) {
public SutureSpirit copy() {return new SutureSpirit(this);
public class SwirlingSpriggan extends CardImpl {
public SwirlingSpriggan(UUID ownerId) {
public SwirlingSpriggan(final SwirlingSpriggan card) {
public SwirlingSpriggan copy() {return new SwirlingSpriggan(this);return new SyphonLife(this);
public class TalarasBane extends CardImpl {
public TalarasBane(UUID ownerId) {
public TalarasBane(final TalarasBane card) {
public TalarasBane copy() {return new TalarasBane(this);
class TalarasBaneEffect extends OneShotEffect {
public TalarasBaneEffect() {
public TalarasBaneEffect(final TalarasBaneEffect effect) {
public TalarasBaneEffect copy() {return new TalarasBaneEffect(this);
public boolean apply(Game game, Ability source) {return targetPlayer.discard(card, source, game);return false;
public class TalarasBattalion extends CardImpl {
public TalarasBattalion(UUID ownerId) {
public TalarasBattalion(final TalarasBattalion card) {
public TalarasBattalion copy() {return new TalarasBattalion(this);
TalarasBattalionEffect() {
TalarasBattalionEffect(final TalarasBattalionEffect effect) {
public boolean applies(GameEvent event, Ability source, Game game) {return (!condition.apply(game, source));return false;
public boolean apply(Game game, Ability source) {return true;
public TalarasBattalionEffect copy() {return new TalarasBattalionEffect(this);
class CastGreenSpellThisTurnCondition implements Condition {
public boolean apply(Game game, Ability source) {return watcher.conditionMet();return false;
class TalarasBattalionWatcher extends Watcher {
public TalarasBattalionWatcher(UUID cardId) {
public TalarasBattalionWatcher(final TalarasBattalionWatcher watcher) {
public TalarasBattalionWatcher copy() {return new TalarasBattalionWatcher(this);
public void watch(GameEvent event, Game game) {
public class Talonrend extends CardImpl {
public Talonrend(UUID ownerId) {
public Talonrend(final Talonrend card) {
public Talonrend copy() {return new Talonrend(this);
public class Thunderblust extends CardImpl {
public Thunderblust(UUID ownerId) {
public Thunderblust(final Thunderblust card) {
public Thunderblust copy() {return new Thunderblust(this);
public class TillingTreefolk extends CardImpl {
public TillingTreefolk(UUID ownerId) {effect.setText("you may return up to two target land cards from your graveyard to your hand");
public TillingTreefolk(final TillingTreefolk card) {
public TillingTreefolk copy() {return new TillingTreefolk(this);
public class TrapjawKelpie extends CardImpl {
public TrapjawKelpie(UUID ownerId) {
public TrapjawKelpie(final TrapjawKelpie card) {
public TrapjawKelpie copy() {return new TrapjawKelpie(this);
public class TwilightMire extends CardImpl {
public TwilightMire (UUID ownerId) {
public TwilightMire (final TwilightMire card) {
public TwilightMire copy() {return new TwilightMire(this);
public class TwinbladeSlasher extends CardImpl {
public TwinbladeSlasher(UUID ownerId) {
public TwinbladeSlasher(final TwinbladeSlasher card) {
public TwinbladeSlasher copy() {return new TwinbladeSlasher(this);
public class UmbraStalker extends CardImpl {
public UmbraStalker(UUID ownerId) {
public UmbraStalker(final UmbraStalker card) {
public UmbraStalker copy() {return new UmbraStalker(this);
class ChromaUmbraStalkerCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return 0;return chroma;
public DynamicValue copy() {return new ChromaUmbraStalkerCount();
public String toString() {return "1";
public String getMessage() {return "";
public class Unmake extends CardImpl {
public Unmake (UUID ownerId) {
public Unmake (final Unmake card) {
public Unmake copy() {return new Unmake(this);
public class UnnervingAssault extends CardImpl {
public UnnervingAssault(UUID ownerId) {
public UnnervingAssault(final UnnervingAssault card) {
public UnnervingAssault copy() {return new UnnervingAssault(this);
public class UnwillingRecruit extends CardImpl {
public UnwillingRecruit(UUID ownerId) {
public UnwillingRecruit(final UnwillingRecruit card) {
public UnwillingRecruit copy() {return new UnwillingRecruit(this);
class UnwillingRecruitEffect extends OneShotEffect {
UnwillingRecruitEffect() {
UnwillingRecruitEffect(UnwillingRecruitEffect effect) {
public UnwillingRecruitEffect copy() {return new UnwillingRecruitEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VoraciousHatchling extends CardImpl {
public VoraciousHatchling(UUID ownerId) {
public VoraciousHatchling(final VoraciousHatchling card) {
public VoraciousHatchling copy() {return new VoraciousHatchling(this);
public class WakeThrasher extends CardImpl {
public WakeThrasher(UUID ownerId) {
public WakeThrasher(final WakeThrasher card) {
public WakeThrasher copy() {return new WakeThrasher(this);
class BecomesUntappedControlledPermanentTriggeredAbility extends TriggeredAbilityImpl{
public BecomesUntappedControlledPermanentTriggeredAbility(Effect effect, boolean optional) {
public BecomesUntappedControlledPermanentTriggeredAbility(final BecomesUntappedControlledPermanentTriggeredAbility ability) {
public BecomesUntappedControlledPermanentTriggeredAbility copy() {return new BecomesUntappedControlledPermanentTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UNTAPPED;
public boolean checkTrigger(GameEvent event, Game game) {return game.getPermanent(event.getTargetId()).getControllerId().equals(this.controllerId);
public String getRule() {return "When a permanent you control becomes untapped, " + super.getRule();
public class WickerboughElder extends CardImpl {
public WickerboughElder(UUID ownerId) {
public WickerboughElder(final WickerboughElder card) {
public WickerboughElder copy() {return new WickerboughElder(this);
public class WildernessHypnotist extends CardImpl {
public WildernessHypnotist(UUID ownerId) {
public WildernessHypnotist(final WildernessHypnotist card) {
public WildernessHypnotist copy() {return new WildernessHypnotist(this);
public class WistfulSelkie extends CardImpl {
public WistfulSelkie (UUID ownerId) {
public WistfulSelkie (final WistfulSelkie card) {
public WistfulSelkie copy() {return new WistfulSelkie(this);
public class WoodlurkerMimic extends CardImpl {
public WoodlurkerMimic(UUID ownerId) {
public WoodlurkerMimic(final WoodlurkerMimic card) {
public WoodlurkerMimic copy() {return new WoodlurkerMimic(this);
public class WormHarvest extends CardImpl {
public WormHarvest(UUID ownerId) {
public WormHarvest(final WormHarvest card) {
public WormHarvest copy() {return new WormHarvest(this);
class WormHarvestToken extends Token {
WormHarvestToken() {
public class Allay extends CardImpl {
public Allay(UUID ownerId) {
public Allay(final Allay card) {
public Allay copy() {return new Allay(this);
public class Bequeathal extends CardImpl {
public Bequeathal(UUID ownerId) {
public Bequeathal(final Bequeathal card) {
public Bequeathal copy() {return new Bequeathal(this);
public class Carnophage extends CardImpl {
public Carnophage(UUID ownerId) {
public Carnophage(final Carnophage card) {
public Carnophage copy() {return new Carnophage(this);
public class Cartographer extends CardImpl {
public Cartographer(UUID ownerId) {
public Cartographer(final Cartographer card) {
public Cartographer copy() {return new Cartographer(this);
public class Cataclysm extends CardImpl {
public Cataclysm(UUID ownerId) {
public Cataclysm(final Cataclysm card) {
public Cataclysm copy() {return new Cataclysm(this);
class CataclysmEffect extends OneShotEffect {
public CataclysmEffect() {
public CataclysmEffect(CataclysmEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CataclysmEffect copy() {return new CataclysmEffect(this);
public class CatBurglar extends CardImpl {
public CatBurglar(UUID ownerId) {
public CatBurglar(final CatBurglar card) {
public CatBurglar copy() {return new CatBurglar(this);
public class CityOfTraitors extends CardImpl {
public CityOfTraitors(UUID ownerId) {
public CityOfTraitors(final CityOfTraitors card) {
public CityOfTraitors copy() {return new CityOfTraitors(this);
class CityOfTraitorsTriggeredAbility extends TriggeredAbilityImpl {
CityOfTraitorsTriggeredAbility() {
CityOfTraitorsTriggeredAbility(CityOfTraitorsTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LAND_PLAYED;
public boolean checkTrigger(GameEvent event, Game game) {return land.getCardType().contains(CardType.LAND)
public CityOfTraitorsTriggeredAbility copy() {return new CityOfTraitorsTriggeredAbility(this);
public String getRule() {return "When you play another land, sacrifice {this}";
public class Convalescence extends CardImpl {
public Convalescence(UUID ownerId) {
public Convalescence(final Convalescence card) {
public Convalescence copy() {return new Convalescence(this);
class ConvalescenceEffect extends OneShotEffect {
public ConvalescenceEffect() {
public ConvalescenceEffect(final ConvalescenceEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ConvalescenceEffect copy() {return new ConvalescenceEffect(this);
public class CullingTheWeak extends CardImpl {
public CullingTheWeak(UUID ownerId) {
public CullingTheWeak(final CullingTheWeak card) {
public CullingTheWeak copy() {return new CullingTheWeak(this);
public class DauthiCutthroat extends CardImpl {
public DauthiCutthroat(UUID ownerId) {
public DauthiCutthroat(final DauthiCutthroat card) {
public DauthiCutthroat copy() {return new DauthiCutthroat(this);
public class DominatingLicid extends CardImpl {
public DominatingLicid(UUID ownerId) {
public DominatingLicid(final DominatingLicid card) {
public DominatingLicid copy() {return new DominatingLicid(this);
public class EntropicSpecter extends CardImpl {
public EntropicSpecter(UUID ownerId) {
public EntropicSpecter(final EntropicSpecter card) {
public EntropicSpecter copy() {return new EntropicSpecter(this);
class CardsInTargetPlayerHandCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return chosenPlayer.getHand().size();return 0;
public DynamicValue copy() {return new mage.abilities.dynamicvalue.common.CardsInControllerHandCount();
public String getMessage() {return "cards in chosen opponents hand";
public String toString() {return "1";
public class Ephemeron extends CardImpl {
public Ephemeron(UUID ownerId) {
public Ephemeron(final Ephemeron card) {
public Ephemeron copy() {return new Ephemeron(this);
public class ErtaiWizardAdept extends CardImpl {
public ErtaiWizardAdept(UUID ownerId) {
public ErtaiWizardAdept(final ErtaiWizardAdept card) {
public ErtaiWizardAdept copy() {return new ErtaiWizardAdept(this);
public class ExaltedDragon extends CardImpl {
public ExaltedDragon(UUID ownerId) {
public ExaltedDragon(final ExaltedDragon card) {
public ExaltedDragon copy() {return new ExaltedDragon(this);
class ExaltedDragonCostToAttackBlockEffect extends PayCostToAttackBlockEffectImpl {
ExaltedDragonCostToAttackBlockEffect() {
ExaltedDragonCostToAttackBlockEffect(ExaltedDragonCostToAttackBlockEffect effect) {
public boolean applies(GameEvent event, Ability source, Game game) {return source.getSourceId().equals(event.getSourceId());
public ExaltedDragonCostToAttackBlockEffect copy() {return new ExaltedDragonCostToAttackBlockEffect(this);
public class FlowstoneFlood extends CardImpl {
public FlowstoneFlood(UUID ownerId) {
public FlowstoneFlood(final FlowstoneFlood card) {
public FlowstoneFlood copy() {return new FlowstoneFlood(this);
public class Forbid extends CardImpl {
public Forbid(UUID ownerId) {
public Forbid(final Forbid card) {
public Forbid copy() {return new Forbid(this);
public class Hatred extends CardImpl {
public Hatred(UUID ownerId) {
public Hatred(final Hatred card) {
public Hatred copy() {return new Hatred(this);
public class HighGround extends CardImpl {
public HighGround(UUID ownerId) {
public HighGround(final HighGround card) {
public HighGround copy() {return new HighGround(this);
public class JackalopeHerd extends CardImpl {
public JackalopeHerd(UUID ownerId) {
public JackalopeHerd(final JackalopeHerd card) {
public JackalopeHerd copy() {return new JackalopeHerd(this);
public class KorChant extends CardImpl {
public KorChant(UUID ownerId) {
public KorChant(final KorChant card) {
public KorChant copy() {return new KorChant(this);
class KorChantEffect extends RedirectionEffect {
KorChantEffect() {
KorChantEffect(final KorChantEffect effect) {
public KorChantEffect copy() {return new KorChantEffect(this);
public void init(Ability source, Game game) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_CREATURE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class MageIlVec extends CardImpl {
public MageIlVec(UUID ownerId) {
public MageIlVec(final MageIlVec card) {
public MageIlVec copy() {return new MageIlVec(this);
public class Manabond extends CardImpl {
public Manabond(UUID ownerId) {
public Manabond(final Manabond card) {
public Manabond copy() {return new Manabond(this);
class ManabondEffect extends OneShotEffect {
public ManabondEffect() {
public ManabondEffect(final ManabondEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ManabondEffect copy() {return new ManabondEffect(this);
public class ManaBreach extends CardImpl {
public ManaBreach(UUID ownerId) {
public ManaBreach(final ManaBreach card) {
public ManaBreach copy() {return new ManaBreach(this);
class ManaBreachEffect extends OneShotEffect {
public ManaBreachEffect() {staticText="that player returns a land he or she controls to its owner's hand.";
public boolean apply(Game game, Ability source) {return true;return false;
public ManaBreachEffect(final ManaBreachEffect effect) {
public ManaBreachEffect copy() {return new ManaBreachEffect(this);
public class MedicineBag extends CardImpl {
public MedicineBag(UUID ownerId) {
public MedicineBag(final MedicineBag card) {
public MedicineBag copy() {return new MedicineBag(this);
public class MindlessAutomaton extends CardImpl {
public MindlessAutomaton(UUID ownerId) {
public MindlessAutomaton(final MindlessAutomaton card) {
public MindlessAutomaton copy() {return new MindlessAutomaton(this);
public class MindOverMatter extends CardImpl {
public MindOverMatter(UUID ownerId) {
public MindOverMatter(final MindOverMatter card) {
public MindOverMatter copy() {return new MindOverMatter(this);
public class NullBrooch extends CardImpl {
public NullBrooch(UUID ownerId) {
public NullBrooch(final NullBrooch card) {
public NullBrooch copy() {return new NullBrooch(this);
public class OathOfDruids extends CardImpl {
public OathOfDruids(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public OathOfDruids(final OathOfDruids card) {
public OathOfDruids copy() {return new OathOfDruids(this);
class OathOfDruidsPredicate implements ObjectSourcePlayerPredicate<ObjectSourcePlayer<Player>> {
public boolean apply(ObjectSourcePlayer<Player> input, Game game) {return false;return false;return countTargetPlayer > countActivePlayer;
public String toString() {return "player who controls more creatures than he or she does";
class OathOfDruidsEffect extends OneShotEffect {
public OathOfDruidsEffect() {
public OathOfDruidsEffect(OathOfDruidsEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public OathOfDruidsEffect copy() {return new OathOfDruidsEffect(this);
public class OathOfLieges extends CardImpl {
public OathOfLieges(UUID ownerId) {
public OathOfLieges(final OathOfLieges card) {
public void adjustTargets(Ability ability, Game game) {
public OathOfLieges copy() {return new OathOfLieges(this);
class OathOfLiegesEffect extends OneShotEffect {
public OathOfLiegesEffect() {
public OathOfLiegesEffect(final OathOfLiegesEffect effect) {
public OathOfLiegesEffect copy() {return new OathOfLiegesEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return true;return false;
class OathOfLiegesPredicate implements ObjectSourcePlayerPredicate<ObjectSourcePlayer<Player>> {
public boolean apply(ObjectSourcePlayer<Player> input, Game game) {return false;return false;return countTargetPlayer > countActivePlayer;
public String toString() {return "player who controls more lands than he or she does and is his or her opponent";
public class OgreShaman extends CardImpl {
public OgreShaman(UUID ownerId) {
public OgreShaman(final OgreShaman card) {
public OgreShaman copy() {return new OgreShaman(this);
public class PlatedRootwalla extends CardImpl {
public PlatedRootwalla(UUID ownerId) {
public PlatedRootwalla(final PlatedRootwalla card) {
public PlatedRootwalla copy() {return new PlatedRootwalla(this);
public class PriceOfProgress extends CardImpl {
public PriceOfProgress(UUID ownerId) {
public PriceOfProgress(final PriceOfProgress card) {
public PriceOfProgress copy() {return new PriceOfProgress(this);
class PriceOfProgressEffect extends OneShotEffect {
public PriceOfProgressEffect() {
public PriceOfProgressEffect(final PriceOfProgressEffect effect) {
public PriceOfProgressEffect copy() {return new PriceOfProgressEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PygmyTroll extends CardImpl {
public PygmyTroll(UUID ownerId) {
public PygmyTroll(final PygmyTroll card) {
public PygmyTroll copy() {return new PygmyTroll(this);
public class RabidWolverines extends CardImpl {
public RabidWolverines(UUID ownerId) {
public RabidWolverines(final RabidWolverines card) {
public RabidWolverines copy() {return new RabidWolverines(this);
public class RavenousBaboons extends CardImpl {
public RavenousBaboons(UUID ownerId) {
public RavenousBaboons(final RavenousBaboons card) {
public RavenousBaboons copy() {return new RavenousBaboons(this);
public class ReapingTheRewards extends CardImpl {
public ReapingTheRewards(UUID ownerId) {
public ReapingTheRewards(final ReapingTheRewards card) {
public ReapingTheRewards copy() {return new ReapingTheRewards(this);
public class RecklessOgre extends CardImpl {
public RecklessOgre(UUID ownerId) {
public RecklessOgre(final RecklessOgre card) {
public RecklessOgre copy() {return new RecklessOgre(this);
public class RecurringNightmare extends CardImpl {
public RecurringNightmare(UUID ownerId) {
public RecurringNightmare(final RecurringNightmare card) {
public RecurringNightmare copy() {return new RecurringNightmare(this);
public class RootwaterAlligator extends CardImpl {
public RootwaterAlligator(UUID ownerId) {
public RootwaterAlligator(final RootwaterAlligator card) {
public RootwaterAlligator copy() {return new RootwaterAlligator(this);
public class RootwaterMystic extends CardImpl {
public RootwaterMystic(UUID ownerId) {
public RootwaterMystic(final RootwaterMystic card) {
public RootwaterMystic copy() {return new RootwaterMystic(this);
public class SabertoothWyvern extends CardImpl {
public SabertoothWyvern(UUID ownerId) {
public SabertoothWyvern(final SabertoothWyvern card) {
public SabertoothWyvern copy() {return new SabertoothWyvern(this);
public class SchoolOfPiranha extends CardImpl {
public SchoolOfPiranha(UUID ownerId) {
public SchoolOfPiranha(final SchoolOfPiranha card) {
public SchoolOfPiranha copy() {return new SchoolOfPiranha(this);
public class Scrivener extends CardImpl {
public Scrivener(UUID ownerId) {
public Scrivener(final Scrivener card) {
public Scrivener copy() {return new Scrivener(this);
public class ShatteringPulse extends CardImpl {
public ShatteringPulse(UUID ownerId) {
public ShatteringPulse(final ShatteringPulse card) {
public ShatteringPulse copy() {return new ShatteringPulse(this);
public class SkyshroudElite extends CardImpl {
public SkyshroudElite(UUID ownerId) {
public SkyshroudElite(final SkyshroudElite card) {
public SkyshroudElite copy() {return new SkyshroudElite(this);
public class Slaughter extends CardImpl {
public Slaughter(UUID ownerId) {
public Slaughter(final Slaughter card) {
public Slaughter copy() {return new Slaughter(this);
public class SoltariVisionary extends CardImpl {
public SoltariVisionary(UUID ownerId) {
public SoltariVisionary(final SoltariVisionary card) {
public SoltariVisionary copy() {return new SoltariVisionary(this);
class SoltariVisionaryTriggeredAbility extends TriggeredAbilityImpl {
SoltariVisionaryTriggeredAbility() {
SoltariVisionaryTriggeredAbility(final SoltariVisionaryTriggeredAbility ability) {
public SoltariVisionaryTriggeredAbility copy() {return new SoltariVisionaryTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals damage to a player, destroy target enchantment that player controls.";
public class SonicBurst extends CardImpl {
public SonicBurst(UUID ownerId) {
public SonicBurst(final SonicBurst card) {
public SonicBurst copy() {return new SonicBurst(this);
public class SpikeWeaver extends CardImpl {
public SpikeWeaver(UUID ownerId) {
public SpikeWeaver(final SpikeWeaver card) {
public SpikeWeaver copy() {return new SpikeWeaver(this);
public class SurvivalOfTheFittest extends CardImpl {
public SurvivalOfTheFittest(UUID ownerId) {
public SurvivalOfTheFittest(final SurvivalOfTheFittest card) {
public SurvivalOfTheFittest copy() {return new SurvivalOfTheFittest(this);
public class TheftOfDreams extends CardImpl {
public TheftOfDreams(UUID ownerId) {
public TheftOfDreams(final TheftOfDreams card) {
public TheftOfDreams copy() {return new TheftOfDreams(this);
class TheftOfDreamsEffect extends OneShotEffect {
public TheftOfDreamsEffect() {
public TheftOfDreamsEffect(final TheftOfDreamsEffect effect) {
public TheftOfDreamsEffect copy() {return new TheftOfDreamsEffect(this);
public boolean apply(Game game, Ability source) {return new DrawCardSourceControllerEffect(game.getBattlefield().count(filter, source.getSourceId(), source.getControllerId(), game)).apply(game, source);return false;return new TransmogrifyingLicid(this);
public class VampireHounds extends CardImpl {
public VampireHounds(UUID ownerId) {
public VampireHounds(final VampireHounds card) {
public VampireHounds copy() {return new VampireHounds(this);
public class WallOfNets extends CardImpl {
public WallOfNets(UUID ownerId) {Zone.BATTLEFIELD, "return all cards exiled with {this} to the battlefield under their owners' control"), false));
public WallOfNets(final WallOfNets card) {
public WallOfNets copy() {return new WallOfNets(this);
public class WelkinHawk extends CardImpl {
public WelkinHawk(UUID ownerId) {
public WelkinHawk(final WelkinHawk card) {
public WelkinHawk copy() {return new WelkinHawk(this);
public class WhiptongueFrog extends CardImpl {
public WhiptongueFrog(UUID ownerId) {
public WhiptongueFrog(final WhiptongueFrog card) {
public WhiptongueFrog copy() {return new WhiptongueFrog(this);
public class Workhorse extends CardImpl {
public Workhorse(UUID ownerId) {
public Workhorse(final Workhorse card) {
public Workhorse copy() {return new Workhorse(this);
public class BalmOfRestoration extends CardImpl {
public BalmOfRestoration(UUID ownerId) {
public BalmOfRestoration(final BalmOfRestoration card) {
public BalmOfRestoration copy() {return new BalmOfRestoration(this);
public class BasalThrull1 extends CardImpl {
public BasalThrull1(UUID ownerId) {
public BasalThrull1(final BasalThrull1 card) {
public BasalThrull1 copy() {return new BasalThrull1(this);
public class BottomlessVault extends CardImpl {
public BottomlessVault(UUID ownerId) {
public BottomlessVault(final BottomlessVault card) {
public BottomlessVault copy() {return new BottomlessVault(this);
public class BrassclawOrcs1 extends CardImpl {
public BrassclawOrcs1(UUID ownerId) {
public BrassclawOrcs1(final BrassclawOrcs1 card) {
public BrassclawOrcs1 copy() {return new BrassclawOrcs1(this);
public class ConchHorn extends CardImpl {
public ConchHorn(UUID ownerId) {
public ConchHorn(final ConchHorn card) {
public ConchHorn copy() {return new ConchHorn(this);
class ConchHornEffect extends OneShotEffect {
public ConchHornEffect() {
public ConchHornEffect(final ConchHornEffect effect) {
public ConchHornEffect copy() {return new ConchHornEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private boolean putOnLibrary(Player player, Ability source, Game game) {return player.moveCardToLibraryWithInfo(card, source.getSourceId(), game, Zone.HAND, true, false);return false;
public class DeepSpawn extends CardImpl {
public DeepSpawn(UUID ownerId) {
public DeepSpawn(final DeepSpawn card) {
public DeepSpawn copy() {return new DeepSpawn(this);
public class Derelor extends CardImpl {
public Derelor(UUID ownerId) {
public Derelor(final Derelor card) {
public Derelor copy() {return new Derelor(this);
public class DraconianCylix extends CardImpl {
public DraconianCylix(UUID ownerId) {
public DraconianCylix(final DraconianCylix card) {
public DraconianCylix copy() {return new DraconianCylix(this);
public class DwarvenArmorer extends CardImpl {
public DwarvenArmorer(UUID ownerId) {
public DwarvenArmorer(final DwarvenArmorer card) {
public DwarvenArmorer copy() {return new DwarvenArmorer(this);
class DwarvenArmorerEffect extends OneShotEffect {
public DwarvenArmorerEffect() {
public DwarvenArmorerEffect(final DwarvenArmorerEffect effect) {
public DwarvenArmorerEffect copy() {return new DwarvenArmorerEffect(this);
public boolean apply(Game game, Ability source) {return false;return effect.apply(game, source);return false;
public class EbonStronghold extends CardImpl {
public EbonStronghold(UUID ownerId) {
public EbonStronghold(final EbonStronghold card) {
public EbonStronghold copy() {return new EbonStronghold(this);
public class ElvenFortress1 extends CardImpl {
public ElvenFortress1(UUID ownerId) {
public ElvenFortress1(final ElvenFortress1 card) {
public ElvenFortress1 copy() {return new ElvenFortress1(this);
public class ElvishScout1 extends CardImpl {
public ElvishScout1(UUID ownerId) {
public ElvishScout1(final ElvishScout1 card) {
public ElvishScout1 copy() {return new ElvishScout1(this);
public class FarrelsZealot1 extends CardImpl {
public FarrelsZealot1(UUID ownerId) {
public FarrelsZealot1(final FarrelsZealot1 card) {
public FarrelsZealot1 copy() {return new FarrelsZealot1(this);
public class FeralThallid extends CardImpl {
public FeralThallid(UUID ownerId) {
public FeralThallid(final FeralThallid card) {
public FeralThallid copy() {return new FeralThallid(this);
public class FungalBloom extends CardImpl {
public FungalBloom(UUID ownerId) {
public FungalBloom(final FungalBloom card) {
public FungalBloom copy() {return new FungalBloom(this);
public class GoblinChirurgeon1 extends CardImpl {
public GoblinChirurgeon1(UUID ownerId) {
public GoblinChirurgeon1(final GoblinChirurgeon1 card) {
public GoblinChirurgeon1 copy() {return new GoblinChirurgeon1(this);
public class GoblinWarDrums1 extends CardImpl {
public GoblinWarDrums1(UUID ownerId) {
public GoblinWarDrums1(final GoblinWarDrums1 card) {
public GoblinWarDrums1 copy() {return new GoblinWarDrums1(this);
public class GoblinWarrens extends CardImpl {
public GoblinWarrens(UUID ownerId) {
public GoblinWarrens(final GoblinWarrens card) {
public GoblinWarrens copy() {return new GoblinWarrens(this);
public class HavenwoodBattleground extends CardImpl {
public HavenwoodBattleground(UUID ownerId) {
public HavenwoodBattleground(final HavenwoodBattleground card) {
public HavenwoodBattleground copy() {return new HavenwoodBattleground(this);
public class HighTide1 extends CardImpl {
public HighTide1(UUID ownerId) {
public HighTide1(final HighTide1 card) {
public HighTide1 copy() {return new HighTide1(this);
class HighTideTriggeredAbility extends DelayedTriggeredManaAbility {
public HighTideTriggeredAbility() {
public HighTideTriggeredAbility(HighTideTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public HighTideTriggeredAbility copy() {return new HighTideTriggeredAbility(this);
public String getRule() {return "Until end of turn, whenever a player taps an Island for mana, that player adds {U} to his or her mana pool";
public class HollowTrees extends CardImpl {
public HollowTrees(UUID ownerId) {
public HollowTrees(final HollowTrees card) {
public HollowTrees copy() {return new HollowTrees(this);
public class Homarid1 extends CardImpl {
public Homarid1(UUID ownerId) {
public Homarid1(final Homarid1 card) {
public Homarid1 copy() {return new Homarid1(this);
class HomaridTriggeredAbility extends StateTriggeredAbility {
public HomaridTriggeredAbility(Effect effect) {
public HomaridTriggeredAbility(final HomaridTriggeredAbility ability) {
public HomaridTriggeredAbility copy() {return new HomaridTriggeredAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return new CountersCount(CounterType.TIDE).calculate(game, this, null) == 4;
public String getRule() {return "Whenever there are four tide counters on {this}, " + super.getRule();
public class HomaridShaman extends CardImpl {
public HomaridShaman(UUID ownerId) {
public HomaridShaman(final HomaridShaman card) {
public HomaridShaman copy() {return new HomaridShaman(this);
public class HomaridSpawningBed extends CardImpl {
public HomaridSpawningBed(UUID ownerId) {
public HomaridSpawningBed(final HomaridSpawningBed card) {
public HomaridSpawningBed copy() {return new HomaridSpawningBed(this);
class CamaridToken extends Token {
CamaridToken() {
public class HomaridWarrior1 extends CardImpl {
public HomaridWarrior1(UUID ownerId) {
public HomaridWarrior1(final HomaridWarrior1 card) {
public HomaridWarrior1 copy() {return new HomaridWarrior1(this);
public class HymnToTourach1 extends CardImpl {
public HymnToTourach1(UUID ownerId) {
public HymnToTourach1(final HymnToTourach1 card) {
public HymnToTourach1 copy() {return new HymnToTourach1(this);
public class IcatianJavelineers1 extends CardImpl {
public IcatianJavelineers1(UUID ownerId) {
public IcatianJavelineers1(final IcatianJavelineers1 card) {
public IcatianJavelineers1 copy() {return new IcatianJavelineers1(this);
public class IcatianStore extends CardImpl {
public IcatianStore(UUID ownerId) {
public IcatianStore(final IcatianStore card) {
public IcatianStore copy() {return new IcatianStore(this);
public class IcatianTown extends CardImpl {
public IcatianTown(UUID ownerId) {
public IcatianTown(final IcatianTown card) {
public IcatianTown copy() {return new IcatianTown(this);return new ImplementsOfSacrifice(this);
public class NightSoil1 extends CardImpl {
public NightSoil1(UUID ownerId) {
public NightSoil1(final NightSoil1 card) {
public NightSoil1 copy() {return new NightSoil1(this);
public class OrcishSpy1 extends CardImpl {
public OrcishSpy1(UUID ownerId) {
public OrcishSpy1(final OrcishSpy1 card) {
public OrcishSpy1 copy() {return new OrcishSpy1(this);
public class RuinsOfTrokair extends CardImpl {
public RuinsOfTrokair(UUID ownerId) {
public RuinsOfTrokair(final RuinsOfTrokair card) {
public RuinsOfTrokair copy() {return new RuinsOfTrokair(this);
public class Seasinger extends CardImpl {
public Seasinger(UUID ownerId) {
public Seasinger(final Seasinger card) {
public Seasinger copy() {return new Seasinger(this);
public class SpiritShield extends CardImpl {
public SpiritShield(UUID ownerId) {
public SpiritShield(final SpiritShield card) {
public SpiritShield copy() {return new SpiritShield(this);
public class SporeFlower extends CardImpl {
public SporeFlower(UUID ownerId) {
public SporeFlower(final SporeFlower card) {
public SporeFlower copy() {return new SporeFlower(this);
public class SvyelunitePriest extends CardImpl {
public SvyelunitePriest(UUID ownerId) {
public SvyelunitePriest(final SvyelunitePriest card) {
public SvyelunitePriest copy() {return new SvyelunitePriest(this);
public class SvyeluniteTemple extends CardImpl {
public SvyeluniteTemple(UUID ownerId) {
public SvyeluniteTemple(final SvyeluniteTemple card) {
public SvyeluniteTemple copy() {return new SvyeluniteTemple(this);
public class ThallidDevourer extends CardImpl {
public ThallidDevourer(UUID ownerId) {
public ThallidDevourer(final ThallidDevourer card) {
public ThallidDevourer copy() {return new ThallidDevourer(this);
public class TheloniteMonk extends CardImpl {
public TheloniteMonk(UUID ownerId) {
public TheloniteMonk(final TheloniteMonk card) {
public TheloniteMonk copy() {return new TheloniteMonk(this);
public class ThornThallid1 extends CardImpl {
public ThornThallid1(UUID ownerId) {
public ThornThallid1(final ThornThallid1 card) {
public ThornThallid1 copy() {return new ThornThallid1(this);
public class TidalInfluence extends CardImpl {
public TidalInfluence(UUID ownerId) {
public TidalInfluence(final TidalInfluence card) {
public TidalInfluence copy() {return new TidalInfluence(this);
class TidalInfluenceCost extends CostImpl {
public TidalInfluenceCost() {
public TidalInfluenceCost(final TidalInfluenceCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return !game.getBattlefield().contains(filter, 1, game);
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public TidalInfluenceCost copy() {return new TidalInfluenceCost(this);
class TidalInfluenceTriggeredAbility extends StateTriggeredAbility {
public TidalInfluenceTriggeredAbility(Effect effect) {
public TidalInfluenceTriggeredAbility(final TidalInfluenceTriggeredAbility ability) {
public TidalInfluenceTriggeredAbility copy() {return new TidalInfluenceTriggeredAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return new CountersCount(CounterType.TIDE).calculate(game, this, null) == 4;
public String getRule() {return "Whenever there are four tide counters on {this}, " + super.getRule();
public class VodalianKnights extends CardImpl {
public VodalianKnights(UUID ownerId) {
public VodalianKnights(final VodalianKnights card) {
public VodalianKnights copy() {return new VodalianKnights(this);
public class VodalianMage1 extends CardImpl {
public VodalianMage1(UUID ownerId) {
public VodalianMage1(final VodalianMage1 card) {
public VodalianMage1 copy() {return new VodalianMage1(this);
public class ZelyonSword extends CardImpl {
public ZelyonSword(UUID ownerId) {
public ZelyonSword(final ZelyonSword card) {
public ZelyonSword copy() {return new ZelyonSword(this);
public class AbzanKinGuard extends CardImpl {
public AbzanKinGuard(UUID ownerId) {
public AbzanKinGuard(final AbzanKinGuard card) {
public AbzanKinGuard copy() {return new AbzanKinGuard(this);
public class AbzanRunemark extends CardImpl {
public AbzanRunemark(UUID ownerId) {
public AbzanRunemark(final AbzanRunemark card) {
public AbzanRunemark copy() {return new AbzanRunemark(this);
public class AbzanSkycaptain extends CardImpl {
public AbzanSkycaptain(UUID ownerId) {
public AbzanSkycaptain(final AbzanSkycaptain card) {
public AbzanSkycaptain copy() {return new AbzanSkycaptain(this);
public class AinokGuide extends CardImpl {
public AinokGuide(UUID ownerId) {
public AinokGuide(final AinokGuide card) {
public AinokGuide copy() {return new AinokGuide(this);
public class AleshasVanguard extends CardImpl {
public AleshasVanguard(UUID ownerId) {
public AleshasVanguard(final AleshasVanguard card) {
public AleshasVanguard copy() {return new AleshasVanguard(this);
public class AleshaWhoSmilesAtDeath extends CardImpl {
public AleshaWhoSmilesAtDeath(UUID ownerId) {
public AleshaWhoSmilesAtDeath(final AleshaWhoSmilesAtDeath card) {
public AleshaWhoSmilesAtDeath copy() {return new AleshaWhoSmilesAtDeath(this);
class AleshaWhoSmilesAtDeathEffect extends OneShotEffect {
public AleshaWhoSmilesAtDeathEffect() {this.staticText = "return target creature card with power 2 or less from your graveyard to the battlefield tapped and attacking";
public AleshaWhoSmilesAtDeathEffect(final AleshaWhoSmilesAtDeathEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AleshaWhoSmilesAtDeathEffect copy() {return new AleshaWhoSmilesAtDeathEffect(this);
public class AmbushKrotiq extends CardImpl {
public AmbushKrotiq(UUID ownerId) {
public AmbushKrotiq(final AmbushKrotiq card) {
public AmbushKrotiq copy() {return new AmbushKrotiq(this);
public class AncestralVengeance extends CardImpl {
public AncestralVengeance(UUID ownerId) {
public AncestralVengeance(final AncestralVengeance card) {
public AncestralVengeance copy() {return new AncestralVengeance(this);
public class ArashinCleric extends CardImpl {
public ArashinCleric(UUID ownerId) {
public ArashinCleric(final ArashinCleric card) {
public ArashinCleric copy() {return new ArashinCleric(this);
public class ArashinWarBeast extends CardImpl {
public ArashinWarBeast(UUID ownerId) {
public ArashinWarBeast(final ArashinWarBeast card) {
public ArashinWarBeast copy() {return new ArashinWarBeast(this);
class ArashinWarBeastTriggeredAbility extends TriggeredAbilityImpl {
public ArashinWarBeastTriggeredAbility(Effect effect, boolean optional) {
public ArashinWarBeastTriggeredAbility(final ArashinWarBeastTriggeredAbility ability) {
public ArashinWarBeastTriggeredAbility copy() {return new ArashinWarBeastTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_CREATURE || event.getType() == GameEvent.EventType.COMBAT_DAMAGE_STEP_POST ;
public boolean checkTrigger(GameEvent event, Game game) {
!usedForCombatDamageStep) {return false;return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to one or more blockers, " + super.getRule();
public class Arcbond extends CardImpl {
public Arcbond(UUID ownerId) {
public Arcbond(final Arcbond card) {
public Arcbond copy() {return new Arcbond(this);
class ArcbondDelayedTriggeredAbility extends DelayedTriggeredAbility {
public ArcbondDelayedTriggeredAbility() {
public ArcbondDelayedTriggeredAbility(ArcbondDelayedTriggeredAbility ability) {
public void init(Game game) {
public boolean isInactive(Game game) {return true;return super.isInactive(game);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public ArcbondDelayedTriggeredAbility copy() {return new ArcbondDelayedTriggeredAbility(this);
public String getRule() {return "Choose target creature. Whenever that creature is dealt damage this turn, " + modes.getText();
class ArcbondEffect extends OneShotEffect {
public ArcbondEffect() {
public ArcbondEffect(final ArcbondEffect effect) {
public ArcbondEffect copy() {return new ArcbondEffect(this);
public boolean apply(Game game, Ability source) {return new DamageEverythingEffect(new StaticValue(damage), filter, sourceId).apply(game, source);return false;
public class ArchersOfQarsi extends CardImpl {
public ArchersOfQarsi(UUID ownerId) {
public ArchersOfQarsi(final ArchersOfQarsi card) {
public ArchersOfQarsi copy() {return new ArchersOfQarsi(this);
public class ArchfiendOfDepravity extends CardImpl {
public ArchfiendOfDepravity(UUID ownerId) {
public ArchfiendOfDepravity(final ArchfiendOfDepravity card) {
public ArchfiendOfDepravity copy() {return new ArchfiendOfDepravity(this);
class ArchfiendOfDepravityEffect extends OneShotEffect {
public ArchfiendOfDepravityEffect() {
public class AtarkaWorldRender extends CardImpl {
public AtarkaWorldRender(UUID ownerId) {
public AtarkaWorldRender(final AtarkaWorldRender card) {
public AtarkaWorldRender copy() {return new AtarkaWorldRender(this);
class AtarkaWorldRenderEffect extends TriggeredAbilityImpl {
public AtarkaWorldRenderEffect() {
public AtarkaWorldRenderEffect(final AtarkaWorldRenderEffect ability) {
public AtarkaWorldRenderEffect copy() {return new AtarkaWorldRenderEffect(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Dragon you control attacks, it gains double strike until end of turn.";
public class AvenSkirmisher extends CardImpl {
public AvenSkirmisher(UUID ownerId) {
public AvenSkirmisher(final AvenSkirmisher card) {
public AvenSkirmisher copy() {return new AvenSkirmisher(this);
public class AvenSurveyor extends CardImpl {
public AvenSurveyor(UUID ownerId) {
public AvenSurveyor(final AvenSurveyor card) {
public AvenSurveyor copy() {return new AvenSurveyor(this);
public class BatheInDragonfire extends CardImpl {
public BatheInDragonfire(UUID ownerId) {
public BatheInDragonfire(final BatheInDragonfire card) {
public BatheInDragonfire copy() {return new BatheInDragonfire(this);
public class BattleBrawler extends CardImpl {
public BattleBrawler(UUID ownerId) {
public BattleBrawler(final BattleBrawler card) {
public BattleBrawler copy() {return new BattleBrawler(this);
public class BreakThroughTheLine extends CardImpl {
public BreakThroughTheLine(UUID ownerId) {
public BreakThroughTheLine(final BreakThroughTheLine card) {
public BreakThroughTheLine copy() {return new BreakThroughTheLine(this);
public class BrutalHordechief extends CardImpl {
public BrutalHordechief(UUID ownerId) {
public BrutalHordechief(final BrutalHordechief card) {
public BrutalHordechief copy() {return new BrutalHordechief(this);
class BrutalHordechiefTriggeredAbility extends TriggeredAbilityImpl {
public BrutalHordechiefTriggeredAbility() {
public BrutalHordechiefTriggeredAbility(final BrutalHordechiefTriggeredAbility ability) {
public BrutalHordechiefTriggeredAbility copy() {return new BrutalHordechiefTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control attacks, defending player loses 1 life and you gain 1 life.";
class BrutalHordechiefReplacementEffect extends ReplacementEffectImpl {
public BrutalHordechiefReplacementEffect() {
public BrutalHordechiefReplacementEffect(final BrutalHordechiefReplacementEffect effect) {
public BrutalHordechiefReplacementEffect copy() {return new BrutalHordechiefReplacementEffect(this);
public boolean apply(Game game, Ability source) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DECLARING_BLOCKERS;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public class CachedDefenses extends CardImpl {
public CachedDefenses(UUID ownerId) {
public CachedDefenses(final CachedDefenses card) {
public CachedDefenses copy() {return new CachedDefenses(this);
public class ChannelHarm extends CardImpl {
public ChannelHarm(UUID ownerId) {
public ChannelHarm(final ChannelHarm card) {
public ChannelHarm copy() {return new ChannelHarm(this);
class ChannelHarmEffect extends PreventionEffectImpl {
ChannelHarmEffect() {
ChannelHarmEffect(final ChannelHarmEffect effect) {
public ChannelHarmEffect copy() {return new ChannelHarmEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return !((Controllable) damageSource).getControllerId().equals(source.getControllerId());return !((Card) damageSource).getOwnerId().equals(source.getControllerId());return false;
public class CitadelSiege extends CardImpl {
public CitadelSiege(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public CitadelSiege(final CitadelSiege card) {
public CitadelSiege copy() {return new CitadelSiege(this);return new Cloudform(this);
public class CollateralDamage extends CardImpl {
public CollateralDamage(UUID ownerId) {
public CollateralDamage(final CollateralDamage card) {
public CollateralDamage copy() {return new CollateralDamage(this);
public class CrucibleOfTheSpiritDragon extends CardImpl {
public CrucibleOfTheSpiritDragon(UUID ownerId) {
public CrucibleOfTheSpiritDragon(final CrucibleOfTheSpiritDragon card) {
public CrucibleOfTheSpiritDragon copy() {return new CrucibleOfTheSpiritDragon(this);
class CrucibleOfTheSpiritDragonManaBuilder extends ConditionalManaBuilder {return new CrucibleOfTheSpiritDragonConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast Dragon spells or activate abilities of Dragons";
class CrucibleOfTheSpiritDragonConditionalMana extends ConditionalMana {
public CrucibleOfTheSpiritDragonConditionalMana(Mana mana) {
class CrucibleOfTheSpiritDragonManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class CruxOfFate extends CardImpl {
public CruxOfFate(UUID ownerId) {
public CruxOfFate(final CruxOfFate card) {
public CruxOfFate copy() {return new CruxOfFate(this);
public class CunningStrike extends CardImpl {
public CunningStrike(UUID ownerId) {
public CunningStrike(final CunningStrike card) {
public CunningStrike copy() {return new CunningStrike(this);
public class DaghatarTheAdamant extends CardImpl {
public DaghatarTheAdamant(UUID ownerId) {
public DaghatarTheAdamant(final DaghatarTheAdamant card) {
public DaghatarTheAdamant copy() {return new DaghatarTheAdamant(this);
class MoveCounterFromTargetToTargetEffect extends OneShotEffect {
public MoveCounterFromTargetToTargetEffect() {
public MoveCounterFromTargetToTargetEffect(final MoveCounterFromTargetToTargetEffect effect) {
public MoveCounterFromTargetToTargetEffect copy() {return new MoveCounterFromTargetToTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DarkDeal extends CardImpl {
public DarkDeal(UUID ownerId) {
public DarkDeal(final DarkDeal card) {
public DarkDeal copy() {return new DarkDeal(this);
class DarkDealEffect extends OneShotEffect {
DarkDealEffect() {
DarkDealEffect(final DarkDealEffect effect) {
public DarkDealEffect copy() {return new DarkDealEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DefiantOgre extends CardImpl {
public DefiantOgre(UUID ownerId) {
public DefiantOgre(final DefiantOgre card) {
public DefiantOgre copy() {return new DefiantOgre(this);
public class DestructorDragon extends CardImpl {
public DestructorDragon(UUID ownerId) {
public DestructorDragon(final DestructorDragon card) {
public DestructorDragon copy() {return new DestructorDragon(this);
public class DiplomacyOfTheWastes extends CardImpl {
public DiplomacyOfTheWastes(UUID ownerId) {
public DiplomacyOfTheWastes(final DiplomacyOfTheWastes card) {
public DiplomacyOfTheWastes copy() {return new DiplomacyOfTheWastes(this);
public class DragonBellMonk extends CardImpl {
public DragonBellMonk(UUID ownerId) {
public DragonBellMonk(final DragonBellMonk card) {
public DragonBellMonk copy() {return new DragonBellMonk(this);
public class Dragonrage extends CardImpl {
public Dragonrage(UUID ownerId) {
public Dragonrage(final Dragonrage card) {
public Dragonrage copy() {return new Dragonrage(this);
public class DragonscaleGeneral extends CardImpl {
public DragonscaleGeneral(UUID ownerId) {
public DragonscaleGeneral(final DragonscaleGeneral card) {
public DragonscaleGeneral copy() {return new DragonscaleGeneral(this);
public class EnhancedAwareness extends CardImpl {
public EnhancedAwareness(UUID ownerId) {
public EnhancedAwareness(final EnhancedAwareness card) {
public EnhancedAwareness copy() {return new EnhancedAwareness(this);
public class EtherealAmbush extends CardImpl {
public EtherealAmbush(UUID ownerId) {
public EtherealAmbush(final EtherealAmbush card) {
public EtherealAmbush copy() {return new EtherealAmbush(this);
public class Fascination extends CardImpl {
public Fascination(UUID ownerId) {
public Fascination(final Fascination card) {
public Fascination copy() {return new Fascination(this);
public class FearsomeAwakening extends CardImpl {
public FearsomeAwakening(UUID ownerId) {
public FearsomeAwakening(final FearsomeAwakening card) {
public FearsomeAwakening copy() {return new FearsomeAwakening(this);
class FearsomeAwakeningEffect extends OneShotEffect {
public FearsomeAwakeningEffect() {
public FearsomeAwakeningEffect(final FearsomeAwakeningEffect effect) {
public FearsomeAwakeningEffect copy() {return new FearsomeAwakeningEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FeralKrushok extends CardImpl {
public FeralKrushok(UUID ownerId) {
public FeralKrushok(final FeralKrushok card) {
public FeralKrushok copy() {return new FeralKrushok(this);
public class FierceInvocation extends CardImpl {
public FierceInvocation(UUID ownerId) {
public FierceInvocation(final FierceInvocation card) {
public FierceInvocation copy() {return new FierceInvocation(this);
class FierceInvocationEffect extends OneShotEffect {
public FierceInvocationEffect() {
public FierceInvocationEffect(final FierceInvocationEffect effect) {
public FierceInvocationEffect copy() {return new FierceInvocationEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return true;return false;
public class FlamerushRider extends CardImpl {
public FlamerushRider(UUID ownerId) {
public FlamerushRider(final FlamerushRider card) {
public FlamerushRider copy() {return new FlamerushRider(this);
class FlamerushRiderEffect extends OneShotEffect {
public FlamerushRiderEffect() {
public FlamerushRiderEffect(final FlamerushRiderEffect effect) {
public FlamerushRiderEffect copy() {return new FlamerushRiderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FlamewakePhoenix extends CardImpl {
public FlamewakePhoenix(UUID ownerId) {
new DoIfCostPaid(new ReturnToBattlefieldUnderOwnerControlSourceEffect(), new ManaCostsImpl("{R")),"<i>Ferocious</i> &mdash; At the beginning of combat on your turn, if you control a creature with power 4 or greater, you may pay {R}. If you do, return {this} from your graveyard to the battlefield."
public FlamewakePhoenix(final FlamewakePhoenix card) {
public FlamewakePhoenix copy() {return new FlamewakePhoenix(this);
public class FormlessNurturing extends CardImpl {
public FormlessNurturing(UUID ownerId) {
public FormlessNurturing(final FormlessNurturing card) {
public FormlessNurturing copy() {return new FormlessNurturing(this);
class FormlessNurturingEffect extends OneShotEffect {
public FormlessNurturingEffect() {
public FormlessNurturingEffect(final FormlessNurturingEffect effect) {
public FormlessNurturingEffect copy() {return new FormlessNurturingEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return true;return false;
public class FriendlyFire extends CardImpl {
public FriendlyFire(UUID ownerId) {
public FriendlyFire(final FriendlyFire card) {
public FriendlyFire copy() {return new FriendlyFire(this);
class FriendlyFireEffect extends OneShotEffect {
public FriendlyFireEffect() {
public FriendlyFireEffect(final FriendlyFireEffect effect) {
public FriendlyFireEffect copy() {return new FriendlyFireEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new FrontierMastodon(this);
public class FrontierSiege extends CardImpl {
public FrontierSiege(UUID ownerId) {
public FrontierSiege(final FrontierSiege card) {
public FrontierSiege copy() {return new FrontierSiege(this);
class FrontierSiegeKhansTriggeredAbility extends TriggeredAbilityImpl {
public FrontierSiegeKhansTriggeredAbility() {
public FrontierSiegeKhansTriggeredAbility(final FrontierSiegeKhansTriggeredAbility ability) {
public FrontierSiegeKhansTriggeredAbility copy() {return new FrontierSiegeKhansTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.PRECOMBAT_MAIN_PHASE_PRE
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public String getRule() {return "At the beginning of each of your main phases, " + super.getRule();
class FrontierSiegeFightEffect extends OneShotEffect {
FrontierSiegeFightEffect() {
FrontierSiegeFightEffect(final FrontierSiegeFightEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public FrontierSiegeFightEffect copy() {return new FrontierSiegeFightEffect(this);
public class FrostWalker extends CardImpl {
public FrostWalker(UUID ownerId) {
public FrostWalker(final FrostWalker card) {
public FrostWalker copy() {return new FrostWalker(this);
public class FruitOfTheFirstTree extends CardImpl {
public FruitOfTheFirstTree(UUID ownerId) {
public FruitOfTheFirstTree(final FruitOfTheFirstTree card) {
public FruitOfTheFirstTree copy() {return new FruitOfTheFirstTree(this);
class FruitOfTheFirstTreeEffect extends OneShotEffect {
public FruitOfTheFirstTreeEffect() {
public FruitOfTheFirstTreeEffect(FruitOfTheFirstTreeEffect copy) {
public FruitOfTheFirstTreeEffect copy() {return new FruitOfTheFirstTreeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public String getText(Mode mode) {return "you gain X life and draw X cards, where X is its toughness";
public class GhastlyConscription extends CardImpl {
public GhastlyConscription(UUID ownerId) {
public GhastlyConscription(final GhastlyConscription card) {
public GhastlyConscription copy() {return new GhastlyConscription(this);
class GhastlyConscriptionEffect extends OneShotEffect {
public GhastlyConscriptionEffect() {
public GhastlyConscriptionEffect(final GhastlyConscriptionEffect effect) {
public GhastlyConscriptionEffect copy() {return new GhastlyConscriptionEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class GoblinBoomKeg extends CardImpl {
public GoblinBoomKeg(UUID ownerId) {
public GoblinBoomKeg(final GoblinBoomKeg card) {
public GoblinBoomKeg copy() {return new GoblinBoomKeg(this);
public class GoblinHeelcutter extends CardImpl {
public GoblinHeelcutter(UUID ownerId) {
public GoblinHeelcutter(final GoblinHeelcutter card) {
public GoblinHeelcutter copy() {return new GoblinHeelcutter(this);
public class GoreSwine extends CardImpl {
public GoreSwine(UUID ownerId) {
public GoreSwine(final GoreSwine card) {
public GoreSwine copy() {return new GoreSwine(this);
public class GrimContest extends CardImpl {
public GrimContest(UUID ownerId) {
public GrimContest(final GrimContest card) {
public GrimContest copy() {return new GrimContest(this);
class GrimContestEffect extends OneShotEffect {
public GrimContestEffect() {
public GrimContestEffect(final GrimContestEffect effect) {
public GrimContestEffect copy() {return new GrimContestEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GurmagAngler extends CardImpl {
public GurmagAngler(UUID ownerId) {
public GurmagAngler(final GurmagAngler card) {
public GurmagAngler copy() {return new GurmagAngler(this);
public class HarshSustenance extends CardImpl {
public HarshSustenance(UUID ownerId) {
public HarshSustenance(final HarshSustenance card) {
public HarshSustenance copy() {return new HarshSustenance(this);
public class HerosBlade extends CardImpl {
public HerosBlade(UUID ownerId) {
public HerosBlade(final HerosBlade card) {
public HerosBlade copy() {return new HerosBlade(this);
public class HewedStoneRetainers extends CardImpl {
public HewedStoneRetainers(UUID ownerId) {
public HewedStoneRetainers(final HewedStoneRetainers card) {
public HewedStoneRetainers copy() {return new HewedStoneRetainers(this);
public class HonorsReward extends CardImpl {
public HonorsReward(UUID ownerId) {
public HonorsReward(final HonorsReward card) {
public HonorsReward copy() {return new HonorsReward(this);
public class HoodedAssassin extends CardImpl {
public HoodedAssassin(UUID ownerId) {
public HoodedAssassin(final HoodedAssassin card) {
public HoodedAssassin copy() {return new HoodedAssassin(this);
public class HumbleDefector extends CardImpl {
public HumbleDefector(UUID ownerId) {
public HumbleDefector(final HumbleDefector card) {
public HumbleDefector copy() {return new HumbleDefector(this);
class HumbleDefectorEffect extends OneShotEffect {
public HumbleDefectorEffect() {
public HumbleDefectorEffect(final HumbleDefectorEffect effect) {
public HumbleDefectorEffect copy() {return new HumbleDefectorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class HumbleDefectorControlSourceEffect extends ContinuousEffectImpl {
public HumbleDefectorControlSourceEffect() {
public HumbleDefectorControlSourceEffect(final HumbleDefectorControlSourceEffect effect) {
public HumbleDefectorControlSourceEffect copy() {return new HumbleDefectorControlSourceEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class HungeringYeti extends CardImpl {
public HungeringYeti(UUID ownerId) {
public HungeringYeti(final HungeringYeti card) {
public HungeringYeti copy() {return new HungeringYeti(this);
public class JeskaiBarricade extends CardImpl {
public JeskaiBarricade(UUID ownerId) {
public JeskaiBarricade(final JeskaiBarricade card) {
public JeskaiBarricade copy() {return new JeskaiBarricade(this);
public class JeskaiInfiltrator extends CardImpl {
public JeskaiInfiltrator(UUID ownerId) {
public JeskaiInfiltrator(final JeskaiInfiltrator card) {
public JeskaiInfiltrator copy() {return new JeskaiInfiltrator(this);
class JeskaiInfiltratorEffect extends OneShotEffect {
JeskaiInfiltratorEffect() {
JeskaiInfiltratorEffect(final JeskaiInfiltratorEffect effect) {
public JeskaiInfiltratorEffect copy() {return new JeskaiInfiltratorEffect(this);
public boolean apply(Game game, Ability source) {
public class JeskaiRunemark extends CardImpl {
public JeskaiRunemark(UUID ownerId) {
public JeskaiRunemark(final JeskaiRunemark card) {
public JeskaiRunemark copy() {return new JeskaiRunemark(this);
public class JeskaiSage extends CardImpl {
public JeskaiSage(UUID ownerId) {
public JeskaiSage(final JeskaiSage card) {
public JeskaiSage copy() {return new JeskaiSage(this);
public class KolaghanTheStormsFury extends CardImpl {
public KolaghanTheStormsFury(UUID ownerId) {
public KolaghanTheStormsFury(final KolaghanTheStormsFury card) {
public KolaghanTheStormsFury copy() {return new KolaghanTheStormsFury(this);return new Lightform(this);
public class LightningShrieker extends CardImpl {
public LightningShrieker(UUID ownerId) {
public LightningShrieker(final LightningShrieker card) {
public LightningShrieker copy() {return new LightningShrieker(this);
public class LotusEyeMystics extends CardImpl {
public LotusEyeMystics(UUID ownerId) {
public LotusEyeMystics(final LotusEyeMystics card) {
public LotusEyeMystics copy() {return new LotusEyeMystics(this);
public class LotusPathDjinn extends CardImpl {
public LotusPathDjinn(UUID ownerId) {
public LotusPathDjinn(final LotusPathDjinn card) {
public LotusPathDjinn copy() {return new LotusPathDjinn(this);
public class MarduRunemark extends CardImpl {
public MarduRunemark(UUID ownerId) {
public MarduRunemark(final MarduRunemark card) {
public MarduRunemark copy() {return new MarduRunemark(this);
public class MarduScout extends CardImpl {
public MarduScout(UUID ownerId) {
public MarduScout(final MarduScout card) {
public MarduScout copy() {return new MarduScout(this);return new MarduShadowspear(this);
public class MarduStrikeLeader extends CardImpl {
public MarduStrikeLeader(UUID ownerId) {
public MarduStrikeLeader(final MarduStrikeLeader card) {
public MarduStrikeLeader copy() {return new MarduStrikeLeader(this);
class MarduStrikeLeaderWarriorToken extends Token {
public MarduStrikeLeaderWarriorToken() {
public class MarduWoeReaper extends CardImpl {
public MarduWoeReaper(UUID ownerId) {
public MarduWoeReaper(final MarduWoeReaper card) {
public MarduWoeReaper copy() {return new MarduWoeReaper(this);
class MarduWoeReaperTriggeredAbility extends TriggeredAbilityImpl {
MarduWoeReaperTriggeredAbility() {
MarduWoeReaperTriggeredAbility(final MarduWoeReaperTriggeredAbility ability) {
public MarduWoeReaperTriggeredAbility copy() {return new MarduWoeReaperTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} or another Warrior enters the battlefield under your control, " + super.getRule();
class MarduWoeReaperEffect extends OneShotEffect {
MarduWoeReaperEffect() {
MarduWoeReaperEffect(final MarduWoeReaperEffect effect) {
public MarduWoeReaperEffect copy() {return new MarduWoeReaperEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MasteryOfTheUnseen extends CardImpl {
public MasteryOfTheUnseen(UUID ownerId) {
public MasteryOfTheUnseen(final MasteryOfTheUnseen card) {
public MasteryOfTheUnseen copy() {return new MasteryOfTheUnseen(this);
public class MercilessExecutioner extends CardImpl {
public MercilessExecutioner(UUID ownerId) {
public MercilessExecutioner(final MercilessExecutioner card) {
public MercilessExecutioner copy() {return new MercilessExecutioner(this);
public class MindscourDragon extends CardImpl {
public MindscourDragon(UUID ownerId) {
public MindscourDragon(final MindscourDragon card) {
public MindscourDragon copy() {return new MindscourDragon(this);
public class MistfireAdept extends CardImpl {
public MistfireAdept(UUID ownerId) {
public MistfireAdept(final MistfireAdept card) {
public MistfireAdept copy() {return new MistfireAdept(this);
public class MobRule extends CardImpl {
public MobRule(UUID ownerId) {
public MobRule(final MobRule card) {
public MobRule copy() {return new MobRule(this);
class MobRuleEffect extends OneShotEffect {
public MobRuleEffect(ComparisonType type, int power) {
public MobRuleEffect(final MobRuleEffect effect) {
public MobRuleEffect copy() {return new MobRuleEffect(this);
public boolean apply(Game game, Ability source) {return applied;
class MobRuleControlAllEffect extends ContinuousEffectImpl {
public MobRuleControlAllEffect(UUID controllerId) {
public MobRuleControlAllEffect(final MobRuleControlAllEffect effect) {
public MobRuleControlAllEffect copy() {return new MobRuleControlAllEffect(this);
public boolean apply(Game game, Ability source) {return creature.changeControllerId(controllerId, game);return false;
public class MonasteryMentor extends CardImpl {
public MonasteryMentor(UUID ownerId) {
public MonasteryMentor(final MonasteryMentor card) {
public MonasteryMentor copy() {return new MonasteryMentor(this);
class MonasteryMentorToken extends Token {
MonasteryMentorToken() {
public class MonasterySiege extends CardImpl {
public MonasterySiege(UUID ownerId) {
public MonasterySiege(final MonasterySiege card) {
public MonasterySiege copy() {return new MonasterySiege(this);
MonasterySiegeCostIncreaseEffect() {
MonasterySiegeCostIncreaseEffect(MonasterySiegeCostIncreaseEffect effect) {return true;return true;return true;return false;
public MonasterySiegeCostIncreaseEffect copy() {return new MonasterySiegeCostIncreaseEffect(this);
public class NeutralizingBlast extends CardImpl {
public NeutralizingBlast(UUID ownerId) {
public NeutralizingBlast(final NeutralizingBlast card) {
public NeutralizingBlast copy() {return new NeutralizingBlast(this);
public class NoxiousDragon extends CardImpl {
public NoxiousDragon(UUID ownerId) {
public NoxiousDragon(final NoxiousDragon card) {
public NoxiousDragon copy() {return new NoxiousDragon(this);
public class OjutaiSoulOfWinter extends CardImpl {
public OjutaiSoulOfWinter(UUID ownerId) {
public OjutaiSoulOfWinter(final OjutaiSoulOfWinter card) {
public OjutaiSoulOfWinter copy() {return new OjutaiSoulOfWinter(this);
public class OrcSureshot extends CardImpl {
public OrcSureshot(UUID ownerId) {
public OrcSureshot(final OrcSureshot card) {
public OrcSureshot copy() {return new OrcSureshot(this);
public class OutpostSiege extends CardImpl {
public OutpostSiege(UUID ownerId) {
public OutpostSiege(final OutpostSiege card) {
public OutpostSiege copy() {return new OutpostSiege(this);
class OutpostSiegeExileEffect extends OneShotEffect {
public OutpostSiegeExileEffect() {
public OutpostSiegeExileEffect(final OutpostSiegeExileEffect effect) {
public OutpostSiegeExileEffect copy() {return new OutpostSiegeExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class CastFromNonHandZoneTargetEffect extends AsThoughEffectImpl {
public CastFromNonHandZoneTargetEffect(Duration duration) {
public CastFromNonHandZoneTargetEffect(final CastFromNonHandZoneTargetEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CastFromNonHandZoneTargetEffect copy() {return new CastFromNonHandZoneTargetEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class PalaceSiege extends CardImpl {private final static String ruleTrigger1 = "&bull Khans &mdash; At the beginning of your upkeep, return target creature card from your graveyard to your hand.";
public PalaceSiege(UUID ownerId) {
public PalaceSiege(final PalaceSiege card) {
public PalaceSiege copy() {return new PalaceSiege(this);
public class QarsiHighPriest extends CardImpl {
public QarsiHighPriest(UUID ownerId) {
public QarsiHighPriest(final QarsiHighPriest card) {
public QarsiHighPriest copy() {return new QarsiHighPriest(this);return new Rageform(this);
public class RakshasasDisdain extends CardImpl {
public RakshasasDisdain(UUID ownerId) {
public RakshasasDisdain(final RakshasasDisdain card) {
public RakshasasDisdain copy() {return new RakshasasDisdain(this);
public class RallyTheAncestors extends CardImpl {
public RallyTheAncestors(UUID ownerId) {
public RallyTheAncestors(final RallyTheAncestors card) {
public RallyTheAncestors copy() {return new RallyTheAncestors(this);
class RallyTheAncestorsEffect extends OneShotEffect {
RallyTheAncestorsEffect() {
RallyTheAncestorsEffect(final RallyTheAncestorsEffect effect) {
public RallyTheAncestorsEffect copy() {return new RallyTheAncestorsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new ReachOfShadows(this);return new RealityShift(this);return new RealityShiftEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return false;
public class Refocus extends CardImpl {
public Refocus(UUID ownerId) {
public Refocus(final Refocus card) {
public Refocus copy() {return new Refocus(this);
public class RenownedWeaponsmith extends CardImpl {
public RenownedWeaponsmith(UUID ownerId) {
public RenownedWeaponsmith(final RenownedWeaponsmith card) {
public RenownedWeaponsmith copy() {return new RenownedWeaponsmith(this);
class RenownedWeaponsmithManaBuilder extends ConditionalManaBuilder {return new RenownedWeaponsmithConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast artifact spells or activate abilities of artifacts";
class RenownedWeaponsmithConditionalMana extends ConditionalMana {
public RenownedWeaponsmithConditionalMana(Mana mana) {
class RenownedWeaponsmithCondition implements Condition {
public boolean apply(Game game, Ability source) {return (object != null
class RenownedWeaponsmithEffect extends OneShotEffect {
public RenownedWeaponsmithEffect() {
public RenownedWeaponsmithEffect(final RenownedWeaponsmithEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public RenownedWeaponsmithEffect copy() {return new RenownedWeaponsmithEffect(this);
public class ReturnToTheEarth extends CardImpl {
public ReturnToTheEarth(UUID ownerId) {
public ReturnToTheEarth(final ReturnToTheEarth card) {
public ReturnToTheEarth copy() {return new ReturnToTheEarth(this);return new RiteOfUndoing(this);return new RiteOfUndoingEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class RuthlessInstincts extends CardImpl {
public RuthlessInstincts(UUID ownerId) {
public RuthlessInstincts(final RuthlessInstincts card) {
public RuthlessInstincts copy() {return new RuthlessInstincts(this);
public class SageEyeAvengers extends CardImpl {
public SageEyeAvengers(UUID ownerId) {
public SageEyeAvengers(final SageEyeAvengers card) {
public SageEyeAvengers copy() {return new SageEyeAvengers(this);
class SageEyeAvengersEffect extends OneShotEffect {
public SageEyeAvengersEffect() {this.staticText = "you may return target creature to its owner's hand if its power is less than {this}'s power";
public SageEyeAvengersEffect(final SageEyeAvengersEffect effect) {
public SageEyeAvengersEffect copy() {return new SageEyeAvengersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SagesReverie extends CardImpl {
public SagesReverie(UUID ownerId) {
public SagesReverie(final SagesReverie card) {
public SagesReverie copy() {return new SagesReverie(this);
class SagesReveriePredicate implements Predicate<Permanent> {
public boolean apply(Permanent input, Game game) {return attachedToPermanent != null && attachedToPermanent.getCardType().contains(CardType.CREATURE);
public String toString() {return "Attached to a creature";
public class Sandblast extends CardImpl {
public Sandblast(UUID ownerId) {
public Sandblast(final Sandblast card) {
public Sandblast copy() {return new Sandblast(this);return new SandsteppeMastodon(this);
public class SandsteppeOutcast extends CardImpl {
public SandsteppeOutcast(UUID ownerId) {
public SandsteppeOutcast(final SandsteppeOutcast card) {
public SandsteppeOutcast copy() {return new SandsteppeOutcast(this);
public class ScrollOfTheMasters extends CardImpl {
public ScrollOfTheMasters(UUID ownerId) {
public ScrollOfTheMasters(final ScrollOfTheMasters card) {
public ScrollOfTheMasters copy() {return new ScrollOfTheMasters(this);
public class ShamanicRevelation extends CardImpl {
public ShamanicRevelation(UUID ownerId) {
public ShamanicRevelation(final ShamanicRevelation card) {
public ShamanicRevelation copy() {return new ShamanicRevelation(this);
public class ShockmawDragon extends CardImpl {
public ShockmawDragon(UUID ownerId) {
public ShockmawDragon(final ShockmawDragon card) {
public ShockmawDragon copy() {return new ShockmawDragon(this);
class ShockmawDragonEffect extends OneShotEffect {
public ShockmawDragonEffect() {
public ShockmawDragonEffect(final ShockmawDragonEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ShockmawDragonEffect copy() {return new ShockmawDragonEffect(this);
public class ShuYunTheSilentTempest extends CardImpl {
public ShuYunTheSilentTempest(UUID ownerId) {
public ShuYunTheSilentTempest(final ShuYunTheSilentTempest card) {
public ShuYunTheSilentTempest copy() {return new ShuYunTheSilentTempest(this);
public class SibsigHost extends CardImpl {
public SibsigHost(UUID ownerId) {
public SibsigHost(final SibsigHost card) {
public SibsigHost copy() {return new SibsigHost(this);
public class SibsigMuckdraggers extends CardImpl {
public SibsigMuckdraggers(UUID ownerId) {
public SibsigMuckdraggers(final SibsigMuckdraggers card) {
public SibsigMuckdraggers copy() {return new SibsigMuckdraggers(this);return new SilumgarTheDriftingDeath(this);
class UnboostCreaturesTargetPlayerEffect extends ContinuousEffectImpl {
public UnboostCreaturesTargetPlayerEffect(int power, int toughness) {
public UnboostCreaturesTargetPlayerEffect(final UnboostCreaturesTargetPlayerEffect effect) {
public UnboostCreaturesTargetPlayerEffect copy() {return new UnboostCreaturesTargetPlayerEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public class SmolderingEfreet extends CardImpl {
public SmolderingEfreet(UUID ownerId) {
public SmolderingEfreet(final SmolderingEfreet card) {
public SmolderingEfreet copy() {return new SmolderingEfreet(this);
public class SoulfireGrandMaster extends CardImpl {
public SoulfireGrandMaster(UUID ownerId) {
public SoulfireGrandMaster(final SoulfireGrandMaster card) {
public SoulfireGrandMaster copy() {return new SoulfireGrandMaster(this);
class GainAbilitySpellsEffect extends ContinuousEffectImpl {
public GainAbilitySpellsEffect(Ability ability, FilterObject filter) {
public GainAbilitySpellsEffect(final GainAbilitySpellsEffect effect) {
public GainAbilitySpellsEffect copy() {return new GainAbilitySpellsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class SoulfireGrandMasterCastFromHandReplacementEffect extends ReplacementEffectImpl {
SoulfireGrandMasterCastFromHandReplacementEffect() {
SoulfireGrandMasterCastFromHandReplacementEffect(SoulfireGrandMasterCastFromHandReplacementEffect effect) {
public boolean apply(Game game, Ability source) {
public SoulfireGrandMasterCastFromHandReplacementEffect copy() {return new SoulfireGrandMasterCastFromHandReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {
public class Soulflayer extends CardImpl {
public Soulflayer(UUID ownerId) {
public Soulflayer(final Soulflayer card) {
public Soulflayer copy() {return new Soulflayer(this);
class SoulflayerEffect extends ContinuousEffectImpl implements SourceEffect {
public SoulflayerEffect() {
public SoulflayerEffect(final SoulflayerEffect effect) {
public SoulflayerEffect copy() {return new SoulflayerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SoulSummons extends CardImpl {
public SoulSummons(UUID ownerId) {
public SoulSummons(final SoulSummons card) {
public SoulSummons copy() {return new SoulSummons(this);
public class SuddenReclamation extends CardImpl {
public SuddenReclamation(UUID ownerId) {
public SuddenReclamation(final SuddenReclamation card) {
public SuddenReclamation copy() {return new SuddenReclamation(this);
class SuddenReclamationEffect extends OneShotEffect {
public SuddenReclamationEffect() {this.staticText = ", then return a creature card and a land card from your graveyard to your hand";
public SuddenReclamationEffect(final SuddenReclamationEffect effect) {
public SuddenReclamationEffect copy() {return new SuddenReclamationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SultaiEmissary extends CardImpl {
public SultaiEmissary(UUID ownerId) {
public SultaiEmissary(final SultaiEmissary card) {
public SultaiEmissary copy() {return new SultaiEmissary(this);
public class SultaiRunemark extends CardImpl {
public SultaiRunemark(UUID ownerId) {
public SultaiRunemark(final SultaiRunemark card) {
public SultaiRunemark copy() {return new SultaiRunemark(this);
public class SultaiSkullkeeper extends CardImpl {
public SultaiSkullkeeper(UUID ownerId) {
public SultaiSkullkeeper(final SultaiSkullkeeper card) {
public SultaiSkullkeeper copy() {return new SultaiSkullkeeper(this);
public class SupplantForm extends CardImpl {
public SupplantForm(UUID ownerId) {
public SupplantForm(final SupplantForm card) {
public SupplantForm copy() {return new SupplantForm(this);
public class TasigursCruelty extends CardImpl {
public TasigursCruelty(UUID ownerId) {
public TasigursCruelty(final TasigursCruelty card) {
public TasigursCruelty copy() {return new TasigursCruelty(this);
public class TasigurTheGoldenFang extends CardImpl {
public TasigurTheGoldenFang(UUID ownerId) {
public TasigurTheGoldenFang(final TasigurTheGoldenFang card) {
public TasigurTheGoldenFang copy() {return new TasigurTheGoldenFang(this);
class TasigurTheGoldenFangEffect extends OneShotEffect {
public TasigurTheGoldenFangEffect() {this.staticText = ", then return a nonland card of an opponent's choice from your graveyard to your hand";
public TasigurTheGoldenFangEffect(final TasigurTheGoldenFangEffect effect) {
public TasigurTheGoldenFangEffect copy() {return new TasigurTheGoldenFangEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TemporalTrespass extends CardImpl {
public TemporalTrespass(UUID ownerId) {
public TemporalTrespass(final TemporalTrespass card) {
public TemporalTrespass copy() {return new TemporalTrespass(this);
public class TemurBattleRage extends CardImpl {
public TemurBattleRage(UUID ownerId) {
public TemurBattleRage(final TemurBattleRage card) {
public TemurBattleRage copy() {return new TemurBattleRage(this);
public class TemurWarShaman extends CardImpl {
public TemurWarShaman(UUID ownerId) {
public TemurWarShaman(final TemurWarShaman card) {
public TemurWarShaman copy() {return new TemurWarShaman(this);
class TemurWarShamanTriggeredAbility extends TurnedFaceUpAllTriggeredAbility {
public TemurWarShamanTriggeredAbility() {
public TemurWarShamanTriggeredAbility(final TemurWarShamanTriggeredAbility ability) {
public TemurWarShamanTriggeredAbility copy() {return new TemurWarShamanTriggeredAbility(this);
public String getRule() {return "Whenever a permanent you control is turned face up, if it is a creature, you may have it fight target creature you don't control.";
class TemurWarShamanFightEffect extends OneShotEffect {
TemurWarShamanFightEffect() {
TemurWarShamanFightEffect(final TemurWarShamanFightEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public TemurWarShamanFightEffect copy() {return new TemurWarShamanFightEffect(this);
public class TorrentElemental extends CardImpl {
public TorrentElemental(UUID ownerId) {
public TorrentElemental(final TorrentElemental card) {
public TorrentElemental copy() {return new TorrentElemental(this);
class ReturnSourceFromExileToBattlefieldEffect extends OneShotEffect {
public ReturnSourceFromExileToBattlefieldEffect() {
public ReturnSourceFromExileToBattlefieldEffect(boolean tapped) {
public ReturnSourceFromExileToBattlefieldEffect(boolean tapped, boolean ownerControl) {
public ReturnSourceFromExileToBattlefieldEffect(final ReturnSourceFromExileToBattlefieldEffect effect) {
public ReturnSourceFromExileToBattlefieldEffect copy() {return new ReturnSourceFromExileToBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return false;return player.moveCards(card, Zone.BATTLEFIELD, source, game, true, false, false, null);
private void setText() {
public class UginsConstruct extends CardImpl {
public UginsConstruct(UUID ownerId) {
public UginsConstruct(final UginsConstruct card) {
public UginsConstruct copy() {return new UginsConstruct(this);
public class UginTheSpiritDragon extends CardImpl {
public UginTheSpiritDragon(UUID ownerId) {
public UginTheSpiritDragon(final UginTheSpiritDragon card) {
public UginTheSpiritDragon copy() {return new UginTheSpiritDragon(this);
class UginTheSpiritDragonEffect2 extends OneShotEffect {
public UginTheSpiritDragonEffect2() {
public UginTheSpiritDragonEffect2(final UginTheSpiritDragonEffect2 effect) {
public UginTheSpiritDragonEffect2 copy() {return new UginTheSpiritDragonEffect2(this);
public boolean apply(Game game, Ability source) {return false;return true;
class UginTheSpiritDragonEffect3 extends OneShotEffect {
public UginTheSpiritDragonEffect3() {
public UginTheSpiritDragonEffect3(final UginTheSpiritDragonEffect3 effect) {
public UginTheSpiritDragonEffect3 copy() {return new UginTheSpiritDragonEffect3(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ValorousStance extends CardImpl {
public ValorousStance(UUID ownerId) {
public ValorousStance(final ValorousStance card) {
public ValorousStance copy() {return new ValorousStance(this);
public class Vaultbreaker extends CardImpl {
public Vaultbreaker(UUID ownerId) {
public Vaultbreaker(final Vaultbreaker card) {
public Vaultbreaker copy() {return new Vaultbreaker(this);
public class WanderingChampion extends CardImpl {
public WanderingChampion(UUID ownerId) {
public WanderingChampion(final WanderingChampion card) {
public WanderingChampion copy() {return new WanderingChampion(this);
public class WardenOfTheFirstTree extends CardImpl {
public WardenOfTheFirstTree(UUID ownerId) {
public WardenOfTheFirstTree(final WardenOfTheFirstTree card) {
public WardenOfTheFirstTree copy() {return new WardenOfTheFirstTree(this);
class WardenOfTheFirstTree1 extends Token {
public WardenOfTheFirstTree1() {
class WardenOfTheFirstTree2 extends Token {
public WardenOfTheFirstTree2() {
public class WardscaleDragon extends CardImpl {
public WardscaleDragon(UUID ownerId) {
public WardscaleDragon(final WardscaleDragon card) {
public WardscaleDragon copy() {return new WardscaleDragon(this);
public WardscaleDragonRuleEffect() {
public WardscaleDragonRuleEffect(final WardscaleDragonRuleEffect effect) {
public WardscaleDragonRuleEffect copy() {return new WardscaleDragonRuleEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(game.getCombat().getDefendingPlayerId(sourcePermanent.getId(), game));return false;
public class WarFlare extends CardImpl {
public WarFlare(UUID ownerId) {
public WarFlare(final WarFlare card) {
public WarFlare copy() {return new WarFlare(this);
public class WhiskAway extends CardImpl {
public WhiskAway(UUID ownerId) {
public WhiskAway(final WhiskAway card) {
public WhiskAway copy() {return new WhiskAway(this);
class WhiskAwayEffect extends OneShotEffect {
WhiskAwayEffect() {
WhiskAwayEffect(final WhiskAwayEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public WhiskAwayEffect copy() {return new WhiskAwayEffect(this);
public class WhispererOfTheWilds extends CardImpl {
public WhispererOfTheWilds(UUID ownerId) {
public WhispererOfTheWilds(final WhispererOfTheWilds card) {
public WhispererOfTheWilds copy() {return new WhispererOfTheWilds(this);
public class WhisperwoodElemental extends CardImpl {
public WhisperwoodElemental(UUID ownerId) {
public WhisperwoodElemental(final WhisperwoodElemental card) {
public WhisperwoodElemental copy() {return new WhisperwoodElemental(this);
public class Wildcall extends CardImpl {
public Wildcall(UUID ownerId) {
public Wildcall(final Wildcall card) {
public Wildcall copy() {return new Wildcall(this);
class WildcallEffect extends OneShotEffect {
public WildcallEffect() {
public WildcallEffect(final WildcallEffect effect) {
public WildcallEffect copy() {return new WildcallEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return true;return false;
public class WildSlash extends CardImpl {
public WildSlash(UUID ownerId) {
public WildSlash(final WildSlash card) {
public WildSlash copy() {return new WildSlash(this);
public DamageCantBePreventedEffect() {
public DamageCantBePreventedEffect(final DamageCantBePreventedEffect effect) {
public DamageCantBePreventedEffect copy() {return new DamageCantBePreventedEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.PREVENT_DAMAGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class WillOfTheNaga extends CardImpl {
public WillOfTheNaga(UUID ownerId) {
public WillOfTheNaga(final WillOfTheNaga card) {
public WillOfTheNaga copy() {return new WillOfTheNaga(this);
public class WindsOfQalSisma extends CardImpl {
public WindsOfQalSisma(UUID ownerId) {
public WindsOfQalSisma(final WindsOfQalSisma card) {
public WindsOfQalSisma copy() {return new WindsOfQalSisma(this);
public class WriteIntoBeing extends CardImpl {
public WriteIntoBeing(UUID ownerId) {
public WriteIntoBeing(final WriteIntoBeing card) {
public WriteIntoBeing copy() {return new WriteIntoBeing(this);
class WriteIntoBeingEffect extends OneShotEffect {
public WriteIntoBeingEffect() {
public WriteIntoBeingEffect(final WriteIntoBeingEffect effect) {
public WriteIntoBeingEffect copy() {return new WriteIntoBeingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Acquire extends CardImpl {
public Acquire(UUID ownerId) {
public Acquire(final Acquire card) {
public Acquire copy() {return new Acquire(this);
class AcquireEffect extends OneShotEffect {
public AcquireEffect() {
public AcquireEffect(final AcquireEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AcquireEffect copy() {return new AcquireEffect(this);
public class AdvancedHoverguard extends CardImpl {
public AdvancedHoverguard(UUID ownerId) {
public AdvancedHoverguard(final AdvancedHoverguard card) {
public AdvancedHoverguard copy() {return new AdvancedHoverguard(this);
public class AnodetLurker extends CardImpl {
public AnodetLurker(UUID ownerId) {
public AnodetLurker(final AnodetLurker card) {
public AnodetLurker copy() {return new AnodetLurker(this);
public class Arachnoid extends CardImpl {
public Arachnoid(UUID ownerId) {
public Arachnoid(final Arachnoid card) {
public Arachnoid copy() {return new Arachnoid(this);
public class ArmedResponse extends CardImpl {
public ArmedResponse(UUID ownerId) {
public ArmedResponse(final ArmedResponse card) {
public ArmedResponse copy() {return new ArmedResponse(this);return new ArtificersIntuition(this);
public class AuriokChampion extends CardImpl {
public AuriokChampion(UUID ownerId) {
public AuriokChampion(final AuriokChampion card) {
public AuriokChampion copy() {return new AuriokChampion(this);
public class AuriokWindwalker extends CardImpl {
public AuriokWindwalker(UUID ownerId) {
public AuriokWindwalker(final AuriokWindwalker card) {
public AuriokWindwalker copy() {return new AuriokWindwalker(this);
class AttachTargetEquipmentEffect extends OneShotEffect {
public AttachTargetEquipmentEffect() {
public AttachTargetEquipmentEffect(final AttachTargetEquipmentEffect effect) {
public AttachTargetEquipmentEffect copy() {return new AttachTargetEquipmentEffect(this);
public boolean apply(Game game, Ability source) {return creature.addAttachment(equipment.getId(), game);return false;
public class AvariceTotem extends CardImpl {
public AvariceTotem(UUID ownerId) {
public AvariceTotem(final AvariceTotem card) {
public AvariceTotem copy() {return new AvariceTotem(this);
public class BatonOfCourage extends CardImpl {
public BatonOfCourage(UUID ownerId) {
public BatonOfCourage(final BatonOfCourage card) {
public BatonOfCourage copy() {return new BatonOfCourage(this);
public class BatteredGolem extends CardImpl {
public BatteredGolem(UUID ownerId) {
public BatteredGolem(final BatteredGolem card) {
public BatteredGolem copy() {return new BatteredGolem(this);
public class BeaconOfCreation extends CardImpl {
public BeaconOfCreation(UUID ownerId) {
public BeaconOfCreation(final BeaconOfCreation card) {
public BeaconOfCreation copy() {return new BeaconOfCreation(this);
public class BeaconOfTomorrows extends CardImpl {
public BeaconOfTomorrows(UUID ownerId) {
public BeaconOfTomorrows(final BeaconOfTomorrows card) {
public BeaconOfTomorrows copy() {return new BeaconOfTomorrows(this);
class BeaconOfTomorrowsEffect extends OneShotEffect {
public BeaconOfTomorrowsEffect() {
public BeaconOfTomorrowsEffect(final BeaconOfTomorrowsEffect effect) {
public BeaconOfTomorrowsEffect copy() {return new BeaconOfTomorrowsEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class BlastingStation extends CardImpl {
public BlastingStation(UUID ownerId) {
public BlastingStation(final BlastingStation card) {
public BlastingStation copy() {return new BlastingStation(this);
public class BlindCreeper extends CardImpl {
public BlindCreeper(UUID ownerId) {
public BlindCreeper(final BlindCreeper card) {
public BlindCreeper copy() {return new BlindCreeper(this);
class BlindCreeperAbility extends TriggeredAbilityImpl {
public BlindCreeperAbility() {
public BlindCreeperAbility(final BlindCreeperAbility ability) {
public BlindCreeperAbility copy() {return new BlindCreeperAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return game.getStack().getSpell(event.getTargetId()) != null;
public String getRule() {return "Whenever a player casts a spell, " + super.getRule();
public class BlinkmothInfusion extends CardImpl {
public BlinkmothInfusion(UUID ownerId) {
public BlinkmothInfusion(final BlinkmothInfusion card) {
public BlinkmothInfusion copy() {return new BlinkmothInfusion(this);
public boolean apply(Game game, Ability source) {return true;return false;return new UntapAllArtifactsEffect(this);
public class BringerOfTheBlackDawn extends CardImpl {
public BringerOfTheBlackDawn(UUID ownerId) {
public BringerOfTheBlackDawn(final BringerOfTheBlackDawn card) {
public BringerOfTheBlackDawn copy() {return new BringerOfTheBlackDawn(this);
public class BringerOfTheBlueDawn extends CardImpl {
public BringerOfTheBlueDawn(UUID ownerId) {
public BringerOfTheBlueDawn(final BringerOfTheBlueDawn card) {
public BringerOfTheBlueDawn copy() {return new BringerOfTheBlueDawn(this);
public class BringerOfTheWhiteDawn extends CardImpl {
public BringerOfTheWhiteDawn(UUID ownerId) {
public BringerOfTheWhiteDawn(final BringerOfTheWhiteDawn card) {
public BringerOfTheWhiteDawn copy() {return new BringerOfTheWhiteDawn(this);
public class ChannelTheSuns extends CardImpl {
public ChannelTheSuns(UUID ownerId) {
public ChannelTheSuns(final ChannelTheSuns card) {
public ChannelTheSuns copy() {return new ChannelTheSuns(this);
public class ChimericCoils extends CardImpl {
public ChimericCoils(UUID ownerId) {
public ChimericCoils(final ChimericCoils card) {
public ChimericCoils copy() {return new ChimericCoils(this);
class ChimericCoilsEffect extends ContinuousEffectImpl {
public ChimericCoilsEffect() {
public ChimericCoilsEffect(final ChimericCoilsEffect effect) {
public ChimericCoilsEffect copy() {return new ChimericCoilsEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
private void setText() {
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.TypeChangingEffects_4;return new CircleOfProtectionArtifacts(this);
public class ClearwaterGoblet extends CardImpl {
public ClearwaterGoblet(UUID ownerId) {
public ClearwaterGoblet(final ClearwaterGoblet card) {
public ClearwaterGoblet copy() {return new ClearwaterGoblet(this);
public class Condescend extends CardImpl {
public Condescend(UUID ownerId) {
public Condescend(final Condescend card) {
public Condescend copy() {return new Condescend(this);
public class ConjurersBauble extends CardImpl {
public ConjurersBauble(UUID ownerId) {
public ConjurersBauble(final ConjurersBauble card) {
public ConjurersBauble copy() {return new ConjurersBauble(this);
public class CosmicLarva extends CardImpl {
public CosmicLarva(UUID ownerId) {
public CosmicLarva(final CosmicLarva card) {
public CosmicLarva copy() {return new CosmicLarva(this);
public class DawnsReflection extends CardImpl {
public DawnsReflection(UUID ownerId) {
public DawnsReflection(final DawnsReflection card) {
public DawnsReflection copy() {return new DawnsReflection(this);
class DawnsReflectionTriggeredAbility extends TriggeredManaAbility {
public DawnsReflectionTriggeredAbility() {
public DawnsReflectionTriggeredAbility(final DawnsReflectionTriggeredAbility ability) {
public DawnsReflectionTriggeredAbility copy() {return new DawnsReflectionTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return enchantment != null && event.getSourceId().equals(enchantment.getAttachedTo());
public String getRule() {return "Whenever enchanted land is tapped for mana, its controller adds two mana in any combination of colors to his or her mana pool <i>(in addition to the mana the land produces)</i>.";
class DawnsReflectionManaEffect extends ManaEffect {
public DawnsReflectionManaEffect() {
public DawnsReflectionManaEffect(final DawnsReflectionManaEffect effect) {
public DawnsReflectionManaEffect copy() {return new DawnsReflectionManaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public class DesecrationElemental extends CardImpl {
public DesecrationElemental(UUID ownerId) {
public DesecrationElemental(final DesecrationElemental card) {
public DesecrationElemental copy() {return new DesecrationElemental(this);return new DevourInShadow(this);return new DevourInShadowEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DisruptionAura extends CardImpl {
public DisruptionAura(UUID ownerId) {
public DisruptionAura(final DisruptionAura card) {
public DisruptionAura copy() {return new DisruptionAura(this);
class DisruptionAuraEffect extends OneShotEffect {
public DisruptionAuraEffect() {
public DisruptionAuraEffect(final DisruptionAuraEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public DisruptionAuraEffect copy() {return new DisruptionAuraEffect(this);
public class EarlyFrost extends CardImpl {
public EarlyFrost(UUID ownerId) {
public EarlyFrost(final EarlyFrost card) {
public EarlyFrost copy() {return new EarlyFrost(this);
public class EbonDrake extends CardImpl {
public EbonDrake(UUID ownerId) {
public EbonDrake(final EbonDrake card) {
public EbonDrake copy() {return new EbonDrake(this);
public class EndlessWhispers extends CardImpl {
public EndlessWhispers(UUID ownerId) {
public EndlessWhispers(final EndlessWhispers card) {
public EndlessWhispers copy() {return new EndlessWhispers(this);
class ReturnSourceToBattlefieldEffect extends OneShotEffect {
public ReturnSourceToBattlefieldEffect() {
public ReturnSourceToBattlefieldEffect(boolean tapped) {
public ReturnSourceToBattlefieldEffect(boolean tapped, boolean ownerControl) {
public ReturnSourceToBattlefieldEffect(final ReturnSourceToBattlefieldEffect effect) {
public ReturnSourceToBattlefieldEffect copy() {return new ReturnSourceToBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return false;return player.moveCards(card, Zone.BATTLEFIELD, source, game, true, false, false, null);
public class EngineeredExplosives extends CardImpl {
public EngineeredExplosives(UUID ownerId) {
public EngineeredExplosives(final EngineeredExplosives card) {
public EngineeredExplosives copy() {return new EngineeredExplosives(this);
class EngineeredExplosivesEffect extends OneShotEffect {
public EngineeredExplosivesEffect() {
public EngineeredExplosivesEffect(final EngineeredExplosivesEffect effect) {
public EngineeredExplosivesEffect copy() {return new EngineeredExplosivesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EnsouledScimitar extends CardImpl {
public EnsouledScimitar(UUID ownerId) {
public EnsouledScimitar(final EnsouledScimitar card) {
public EnsouledScimitar copy() {return new EnsouledScimitar(this);
class EnsouledScimitarToken extends Token {
public EnsouledScimitarToken() {
public class EonHub extends CardImpl {
public EonHub(UUID ownerId) {
public EonHub(final EonHub card) {
public EonHub copy() {return new EonHub(this);
public SkipUpkeepStepEffect() {
public SkipUpkeepStepEffect(final SkipUpkeepStepEffect effect) {
public SkipUpkeepStepEffect copy() {return new SkipUpkeepStepEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP;
public boolean applies(GameEvent event, Ability source, Game game) {return controller != null && game.getState().getPlayersInRange(controller.getId(), game).contains(event.getPlayerId());
public class FangrenPathcutter extends CardImpl {
public FangrenPathcutter(UUID ownerId) {
public FangrenPathcutter(final FangrenPathcutter card) {
public FangrenPathcutter copy() {return new FangrenPathcutter(this);
public class FeedbackBolt extends CardImpl {
public FeedbackBolt(UUID ownerId) {
public FeedbackBolt(final FeedbackBolt card) {
public FeedbackBolt copy() {return new FeedbackBolt(this);
public class FerociousCharge extends CardImpl {
public FerociousCharge(UUID ownerId) {
public FerociousCharge(final FerociousCharge card) {
public FerociousCharge copy() {return new FerociousCharge(this);
public class Ferropede extends CardImpl {
public Ferropede(UUID ownerId) {
public Ferropede(final Ferropede card) {
public Ferropede copy() {return new Ferropede(this);
public class FillWithFright extends CardImpl {
public FillWithFright(UUID ownerId) {
public FillWithFright(final FillWithFright card) {
public FillWithFright copy() {return new FillWithFright(this);
public class FistOfSuns extends CardImpl {
public FistOfSuns(UUID ownerId) {
public FistOfSuns(final FistOfSuns card) {
public FistOfSuns copy() {return new FistOfSuns(this);
class FistOfSunsRuleEffect extends ContinuousEffectImpl {
public FistOfSunsRuleEffect() {
public FistOfSunsRuleEffect(final FistOfSunsRuleEffect effect) {
public FistOfSunsRuleEffect copy() {return new FistOfSunsRuleEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class Fleshgrafter extends CardImpl {
public Fleshgrafter(UUID ownerId) {
public Fleshgrafter(final Fleshgrafter card) {
public Fleshgrafter copy() {return new Fleshgrafter(this);
public class FoldIntoAEther extends CardImpl {
public FoldIntoAEther(UUID ownerId) {
public FoldIntoAEther(final FoldIntoAEther card) {
public FoldIntoAEther copy() {return new FoldIntoAEther(this);
class FoldIntoAEtherEffect extends OneShotEffect {
public FoldIntoAEtherEffect() {
public FoldIntoAEtherEffect(final FoldIntoAEtherEffect effect) {
public FoldIntoAEtherEffect copy() {return new FoldIntoAEtherEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GemstoneArray extends CardImpl {
public GemstoneArray(UUID ownerId) {
public GemstoneArray(final GemstoneArray card) {
public GemstoneArray copy() {return new GemstoneArray(this);
public class GoblinBrawler extends CardImpl {
public GoblinBrawler(UUID ownerId) {
public GoblinBrawler(final GoblinBrawler card) {
public GoblinBrawler copy() {return new GoblinBrawler(this);
public CantBeEquippedSourceEffect(CantBeEquippedSourceEffect effect) {
public CantBeEquippedSourceEffect() {
public CantBeEquippedSourceEffect copy() {return new CantBeEquippedSourceEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ATTACH;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class GoblinCannon extends CardImpl {
public GoblinCannon(UUID ownerId) {
public GoblinCannon(final GoblinCannon card) {
public GoblinCannon copy() {return new GoblinCannon(this);
public class GraftedWargear extends CardImpl {
public GraftedWargear(UUID ownerId) {
public GraftedWargear(final GraftedWargear card) {
public GraftedWargear copy() {return new GraftedWargear(this);
public class Granulate extends CardImpl {
public Granulate(UUID ownerId) {
public Granulate(final Granulate card) {
public Granulate copy() {return new Granulate(this);
public class GrindingStation extends CardImpl {
public GrindingStation(UUID ownerId) {
public GrindingStation(final GrindingStation card) {
public GrindingStation copy() {return new GrindingStation(this);return new GuardianIdol(this);
public class HealersHeaddress extends CardImpl {
public HealersHeaddress(UUID ownerId) {
public HealersHeaddress(final HealersHeaddress card) {
public HealersHeaddress copy() {return new HealersHeaddress(this);
public class Heliophial extends CardImpl {
public Heliophial(UUID ownerId) {
public Heliophial(final Heliophial card) {
public Heliophial copy() {return new Heliophial(this);
public class HelmOfKaldra extends CardImpl {
public HelmOfKaldra(UUID ownerId) {
public HelmOfKaldra(final HelmOfKaldra card) {
public HelmOfKaldra copy() {return new HelmOfKaldra(this);
class HelmOfKaldraCondition implements Condition {
public boolean apply(Game game, Ability source) {return false;return false;return game.getBattlefield().count(HelmOfKaldra.filterShield, source.getSourceId(), source.getControllerId(), game) >= 1;
class HelmOfKaldraEffect extends OneShotEffect {
public HelmOfKaldraEffect() {
public HelmOfKaldraEffect(final HelmOfKaldraEffect effect) {
public HelmOfKaldraEffect copy() {return new HelmOfKaldraEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class KaldraToken extends Token {
public KaldraToken() {
public class InfusedArrows extends CardImpl {
public InfusedArrows(UUID ownerId) {
public InfusedArrows(final InfusedArrows card) {
public InfusedArrows copy() {return new InfusedArrows(this);
public class IntoThinAir extends CardImpl {
public IntoThinAir(UUID ownerId) {
public IntoThinAir(final IntoThinAir card) {
public IntoThinAir copy() {return new IntoThinAir(this);
public class IonStorm extends CardImpl {
public IonStorm(UUID ownerId) {
public IonStorm(final IonStorm card) {
public IonStorm copy() {return new IonStorm(this);
public class IronBarbHellion extends CardImpl {
public IronBarbHellion(UUID ownerId) {
public IronBarbHellion(final IronBarbHellion card) {
public IronBarbHellion copy() {return new IronBarbHellion(this);
public class KrarkClanEngineers extends CardImpl {
public KrarkClanEngineers(UUID ownerId) {
public KrarkClanEngineers(final KrarkClanEngineers card) {
public KrarkClanEngineers copy() {return new KrarkClanEngineers(this);
public class KrarkClanIronworks extends CardImpl {
public KrarkClanIronworks(UUID ownerId) {
public KrarkClanIronworks(final KrarkClanIronworks card) {
public KrarkClanIronworks copy() {return new KrarkClanIronworks(this);
public class KrarkClanOgre extends CardImpl {
public KrarkClanOgre(UUID ownerId) {
public KrarkClanOgre(final KrarkClanOgre card) {
public KrarkClanOgre copy() {return new KrarkClanOgre(this);
public class LanternOfInsight extends CardImpl {
public LanternOfInsight(UUID ownerId) {
public LanternOfInsight(final LanternOfInsight card) {
public LanternOfInsight copy() {return new LanternOfInsight(this);
public class LeoninSquire extends CardImpl {
public LeoninSquire(UUID ownerId) {
public LeoninSquire(final LeoninSquire card) {
public LeoninSquire copy() {return new LeoninSquire(this);
public class LoseHope extends CardImpl {
public LoseHope(UUID ownerId) {
public LoseHope(final LoseHope card) {
public LoseHope copy() {return new LoseHope(this);return new LoxodonAnchorite(this);return new LoxodonStalwart(this);
public class LunarAvenger extends CardImpl {
public LunarAvenger(UUID ownerId) {
public LunarAvenger(final LunarAvenger card) {
public LunarAvenger copy() {return new LunarAvenger(this);
class LunarAvengerEffect extends OneShotEffect {
public LunarAvengerEffect() {
public LunarAvengerEffect(final LunarAvengerEffect effect) {
public LunarAvengerEffect copy() {return new LunarAvengerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class MagmaJet extends CardImpl {
public MagmaJet(UUID ownerId) {
public MagmaJet(final MagmaJet card) {
public MagmaJet copy() {return new MagmaJet(this);
public class MagneticTheft extends CardImpl {
public MagneticTheft(UUID ownerId) {
public MagneticTheft(final MagneticTheft card) {
public MagneticTheft copy() {return new MagneticTheft(this);
class EquipEffect extends OneShotEffect {
public EquipEffect() {
public EquipEffect(final EquipEffect effect) {
public EquipEffect copy() {return new EquipEffect(this);
public boolean apply(Game game, Ability source) {return creature.addAttachment(equipment.getId(), game);return false;
public class MephidrossVampire extends CardImpl {
public MephidrossVampire(UUID ownerId) {
public MephidrossVampire(final MephidrossVampire card) {
public MephidrossVampire copy() {return new MephidrossVampire(this);
class MephidrossVampireEffect extends ContinuousEffectImpl {
MephidrossVampireEffect() {
MephidrossVampireEffect(final MephidrossVampireEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public MephidrossVampireEffect copy() {return new MephidrossVampireEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class MoriokRigger extends CardImpl {
public MoriokRigger(UUID ownerId) {
public MoriokRigger(final MoriokRigger card) {
public MoriokRigger copy() {return new MoriokRigger(this);
public class MycosynthGolem extends CardImpl {
public MycosynthGolem(UUID ownerId) {
public MycosynthGolem(final MycosynthGolem card) {
public MycosynthGolem copy() {return new MycosynthGolem(this);
class MycosynthGolemGainAbilitySpellsEffect extends ContinuousEffectImpl {
public MycosynthGolemGainAbilitySpellsEffect() {
public MycosynthGolemGainAbilitySpellsEffect(final MycosynthGolemGainAbilitySpellsEffect effect) {
public MycosynthGolemGainAbilitySpellsEffect copy() {return new MycosynthGolemGainAbilitySpellsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NeurokStealthsuit extends CardImpl {
public NeurokStealthsuit(UUID ownerId) {
public NeurokStealthsuit(final NeurokStealthsuit card) {
public NeurokStealthsuit copy() {return new NeurokStealthsuit(this);
public class NightsWhisper extends CardImpl {
public NightsWhisper(UUID ownerId) {
public NightsWhisper(final NightsWhisper card) {
public NightsWhisper copy() {return new NightsWhisper(this);
public class NimGrotesque extends CardImpl {
public NimGrotesque(UUID ownerId) {
public NimGrotesque(final NimGrotesque card) {
public NimGrotesque copy() {return new NimGrotesque(this);
public class OpalineBracers extends CardImpl {
public OpalineBracers(UUID ownerId) {
public OpalineBracers(final OpalineBracers card) {
public OpalineBracers copy() {return new OpalineBracers(this);
public class ParadiseMantle extends CardImpl {
public ParadiseMantle(UUID ownerId) {
public ParadiseMantle(final ParadiseMantle card) {
public ParadiseMantle copy() {return new ParadiseMantle(this);
public class PlasmaElemental extends CardImpl {
public PlasmaElemental(UUID ownerId) {
public PlasmaElemental(final PlasmaElemental card) {
public PlasmaElemental copy() {return new PlasmaElemental(this);
public class PlungeIntoDarkness extends CardImpl {
public PlungeIntoDarkness(UUID ownerId) {
public PlungeIntoDarkness(final PlungeIntoDarkness card) {
public PlungeIntoDarkness copy() {return new PlungeIntoDarkness(this);return new PlungeIntoDarknessLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class PlungeIntoDarknessSearchEffect extends OneShotEffect {
PlungeIntoDarknessSearchEffect() {
PlungeIntoDarknessSearchEffect(final PlungeIntoDarknessSearchEffect effect) {
public PlungeIntoDarknessSearchEffect copy() {return new PlungeIntoDarknessSearchEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PossessedPortal extends CardImpl {
public PossessedPortal(UUID ownerId) {
public PossessedPortal(final PossessedPortal card) {
public PossessedPortal copy() {return new PossessedPortal(this);
class PossessedPortalReplacementEffect extends ReplacementEffectImpl {
PossessedPortalReplacementEffect() {
PossessedPortalReplacementEffect(final PossessedPortalReplacementEffect effect) {
public PossessedPortalReplacementEffect copy() {return new PossessedPortalReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
class PossessedPortalEffect extends OneShotEffect {
PossessedPortalEffect() {
PossessedPortalEffect(final PossessedPortalEffect effect) {
public PossessedPortalEffect copy() {return new PossessedPortalEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class RainOfRust extends CardImpl {
public RainOfRust(UUID ownerId) {
public RainOfRust(final RainOfRust card) {
public RainOfRust copy() {return new RainOfRust(this);
public class RakshaGoldenCub extends CardImpl {
public RakshaGoldenCub(UUID ownerId) {
public RakshaGoldenCub(final RakshaGoldenCub card) {
public RakshaGoldenCub copy() {return new RakshaGoldenCub(this);
public class RazorgrassScreen extends CardImpl {
public RazorgrassScreen(UUID ownerId) {
public RazorgrassScreen(final RazorgrassScreen card) {
public RazorgrassScreen copy() {return new RazorgrassScreen(this);
public class Retaliate extends CardImpl {
public Retaliate(UUID ownerId) {
public Retaliate(final Retaliate card) {
public Retaliate copy() {return new Retaliate(this);
public class ReversalOfFortune extends CardImpl {
public ReversalOfFortune(UUID ownerId) {
public ReversalOfFortune(final ReversalOfFortune card) {
public ReversalOfFortune copy() {return new ReversalOfFortune(this);
class ReversalOfFortuneEffect extends OneShotEffect {
public ReversalOfFortuneEffect() {
public ReversalOfFortuneEffect(final ReversalOfFortuneEffect effect) {
public ReversalOfFortuneEffect copy() {return new ReversalOfFortuneEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class RiteOfPassage extends CardImpl {
public RiteOfPassage(UUID ownerId) {
public RiteOfPassage(final RiteOfPassage card) {
public RiteOfPassage copy() {return new RiteOfPassage(this);
class RiteOfPassageTriggeredAbility extends TriggeredAbilityImpl {
public RiteOfPassageTriggeredAbility(Effect effect) {
public RiteOfPassageTriggeredAbility(final RiteOfPassageTriggeredAbility ability) {
public RiteOfPassageTriggeredAbility copy() {return new RiteOfPassageTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control is dealt damage, " + super.getRule();
public class RoarOfReclamation extends CardImpl {
public RoarOfReclamation(UUID ownerId) {
public RoarOfReclamation(final RoarOfReclamation card) {
public RoarOfReclamation copy() {return new RoarOfReclamation(this);
class RoarOfReclamationEffect extends OneShotEffect {
public RoarOfReclamationEffect() {staticText = "Each player returns all artifact cards from his or her graveyard to the battlefield";
public RoarOfReclamationEffect(final RoarOfReclamationEffect effect) {
public RoarOfReclamationEffect copy() {return new RoarOfReclamationEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class SalvagingStation extends CardImpl {
public SalvagingStation(UUID ownerId) {
public SalvagingStation(final SalvagingStation card) {
public SalvagingStation copy() {return new SalvagingStation(this);
public class SawtoothThresher extends CardImpl {
public SawtoothThresher(UUID ownerId) {
public SawtoothThresher(final SawtoothThresher card) {
public SawtoothThresher copy() {return new SawtoothThresher(this);
public class ScreamingFury extends CardImpl {
public ScreamingFury(UUID ownerId) {
public ScreamingFury(final ScreamingFury card) {
public ScreamingFury copy() {return new ScreamingFury(this);
public class SilentArbiter extends CardImpl {
public SilentArbiter(UUID ownerId) {
public SilentArbiter(final SilentArbiter card) {
public SilentArbiter copy() {return new SilentArbiter(this);
class SilentArbiterAttackRestrictionEffect extends RestrictionEffect {
SilentArbiterAttackRestrictionEffect() {
SilentArbiterAttackRestrictionEffect(final SilentArbiterAttackRestrictionEffect effect) {
public SilentArbiterAttackRestrictionEffect copy() {return new SilentArbiterAttackRestrictionEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return true;
public boolean canAttack(UUID defenderId, Ability source, Game game) {return game.getCombat().getAttackers().isEmpty();
class SilentArbiterBlockRestrictionEffect extends RestrictionEffect {
SilentArbiterBlockRestrictionEffect() {
SilentArbiterBlockRestrictionEffect(final SilentArbiterBlockRestrictionEffect effect) {
public SilentArbiterBlockRestrictionEffect copy() {return new SilentArbiterBlockRestrictionEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return true;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return game.getCombat().getBlockers().isEmpty();
public class SkyreachManta extends CardImpl {
public SkyreachManta(UUID ownerId) {
public SkyreachManta(final SkyreachManta card) {
public SkyreachManta copy() {return new SkyreachManta(this);
public class Solarion extends CardImpl {
public Solarion(UUID ownerId) {
public Solarion(final Solarion card) {
public Solarion copy() {return new Solarion(this);
public class SparringCollar extends CardImpl {
public SparringCollar(UUID ownerId) {
public SparringCollar(final SparringCollar card) {
public SparringCollar copy() {return new SparringCollar(this);
public class SpinalParasite extends CardImpl {
public SpinalParasite(UUID ownerId) {
public SpinalParasite(final SpinalParasite card) {
public SpinalParasite copy() {return new SpinalParasite(this);
public class StaffOfDomination extends CardImpl {
public StaffOfDomination(UUID ownerId) {
public StaffOfDomination(final StaffOfDomination card) {
public StaffOfDomination copy() {return new StaffOfDomination(this);
public class StandFirm extends CardImpl {
public StandFirm(UUID ownerId) {
public StandFirm(final StandFirm card) {
public StandFirm copy() {return new StandFirm(this);
public class StasisCocoon extends CardImpl {
public StasisCocoon(UUID ownerId) {
public StasisCocoon(final StasisCocoon card) {
public StasisCocoon copy() {return new StasisCocoon(this);return new SteelshapersGift(this);
public class SummonersEgg extends CardImpl {
public SummonersEgg(UUID ownerId) {
public SummonersEgg(final SummonersEgg card) {
public SummonersEgg copy() {return new SummonersEgg(this);
class SummonersEggImprintEffect extends OneShotEffect {
public SummonersEggImprintEffect() {
public SummonersEggImprintEffect(SummonersEggImprintEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SummonersEggImprintEffect copy() {return new SummonersEggImprintEffect(this);
class SummonersEggPutOntoBattlefieldEffect extends OneShotEffect {
public SummonersEggPutOntoBattlefieldEffect() {
public SummonersEggPutOntoBattlefieldEffect(final SummonersEggPutOntoBattlefieldEffect effect) {
public SummonersEggPutOntoBattlefieldEffect copy() {return new SummonersEggPutOntoBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SummoningStation extends CardImpl {
public SummoningStation(UUID ownerId) {
public SummoningStation(final SummoningStation card) {
public SummoningStation copy() {return new SummoningStation(this);
class PincherToken extends Token {
public PincherToken() {
public class Suncrusher extends CardImpl {
public Suncrusher(UUID ownerId) {
public Suncrusher(final Suncrusher card) {
public Suncrusher copy() {return new Suncrusher(this);
public class SylvokExplorer extends CardImpl {
public SylvokExplorer(UUID ownerId) {
public SylvokExplorer(final SylvokExplorer card) {
public SylvokExplorer copy() {return new SylvokExplorer(this);
public class TangleAsp extends CardImpl {
public TangleAsp(UUID ownerId) {
public TangleAsp(final TangleAsp card) {
public TangleAsp copy() {return new TangleAsp(this);
public class TelJiladJustice extends CardImpl {
public TelJiladJustice(UUID ownerId) {
public TelJiladJustice(final TelJiladJustice card) {
public TelJiladJustice copy() {return new TelJiladJustice(this);return new TelJiladLifebreather(this);
public class ThermalNavigator extends CardImpl {
public ThermalNavigator(UUID ownerId) {
public ThermalNavigator(final ThermalNavigator card) {
public ThermalNavigator copy() {return new ThermalNavigator(this);return new TornadoElemental(this);
public class VedalkenOrrery extends CardImpl {
public VedalkenOrrery(UUID ownerId) {
public VedalkenOrrery(final VedalkenOrrery card) {
public VedalkenOrrery copy() {return new VedalkenOrrery(this);
public class ViciousBetrayal extends CardImpl {
public ViciousBetrayal(UUID ownerId) {
public ViciousBetrayal(final ViciousBetrayal card) {
public ViciousBetrayal copy() {return new ViciousBetrayal(this);
class GetXValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return 2*amount;
public GetXValue copy() {return new GetXValue();
public String toString() {return "2";
public String getMessage() {return "creature sacrificed this way";
public class ViridianLorebearers extends CardImpl {
public ViridianLorebearers(UUID ownerId) {
public ViridianLorebearers(final ViridianLorebearers card) {
public ViridianLorebearers copy() {return new ViridianLorebearers(this);
public class ViridianScout extends CardImpl {
public ViridianScout(UUID ownerId) {
public ViridianScout(final ViridianScout card) {
public ViridianScout copy() {return new ViridianScout(this);
public class VulshokSorcerer extends CardImpl {
public VulshokSorcerer(UUID ownerId) {
public VulshokSorcerer(final VulshokSorcerer card) {
public VulshokSorcerer copy() {return new VulshokSorcerer(this);
public class AbbeyGargoyles extends CardImpl {
public AbbeyGargoyles(UUID ownerId) {
public AbbeyGargoyles(final AbbeyGargoyles card) {
public AbbeyGargoyles copy() {return new AbbeyGargoyles(this);
public class AbyssalSpecter extends CardImpl {
public AbyssalSpecter(UUID ownerId) {
public AbyssalSpecter(final AbyssalSpecter card) {
public AbyssalSpecter copy() {return new AbyssalSpecter(this);
public class AmbushParty extends CardImpl {
public AmbushParty(UUID ownerId) {
public AmbushParty(final AmbushParty card) {
public AmbushParty copy() {return new AmbushParty(this);
public class AmuletOfKroog extends CardImpl {
public AmuletOfKroog(UUID ownerId) {
public AmuletOfKroog(final AmuletOfKroog card) {
public AmuletOfKroog copy() {return new AmuletOfKroog(this);
public class AnHavvaConstable extends CardImpl {
public AnHavvaConstable(UUID ownerId) {
public AnHavvaConstable(final AnHavvaConstable card) {
public AnHavvaConstable copy() {return new AnHavvaConstable(this);
class AnHavvaConstableEffect extends ContinuousEffectImpl {
public AnHavvaConstableEffect() {
public AnHavvaConstableEffect(final AnHavvaConstableEffect effect) {
public AnHavvaConstableEffect copy() {return new AnHavvaConstableEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ArensonsAura extends CardImpl {
public ArensonsAura(UUID ownerId) {
public ArensonsAura(final ArensonsAura card) {
public ArensonsAura copy() {return new ArensonsAura(this);return new Armageddon(this);
public class AshesToAshes extends CardImpl {
public AshesToAshes(UUID ownerId) {
public AshesToAshes(final AshesToAshes card) {
public AshesToAshes copy() {return new AshesToAshes(this);
class AshesToAshesEffect extends OneShotEffect {
public AshesToAshesEffect() {
public AshesToAshesEffect(final AshesToAshesEffect effect) {
public AshesToAshesEffect copy() {return new AshesToAshesEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class AshnodsAltar extends CardImpl {
public AshnodsAltar(UUID ownerId) {
public AshnodsAltar(final AshnodsAltar card) {
public AshnodsAltar copy() {return new AshnodsAltar(this);
public class AshnodsTransmogrant extends CardImpl {
public AshnodsTransmogrant(UUID ownerId) {
public AshnodsTransmogrant(final AshnodsTransmogrant card) {
public AshnodsTransmogrant copy() {return new AshnodsTransmogrant(this);
public class BadMoon extends CardImpl {
public BadMoon(UUID ownerId) {
public BadMoon(final BadMoon card) {
public BadMoon copy() {return new BadMoon(this);
public class BirdMaiden extends CardImpl {
public BirdMaiden(UUID ownerId) {
public BirdMaiden(final BirdMaiden card) {
public BirdMaiden copy() {return new BirdMaiden(this);
public class BlessedWine extends CardImpl {
public BlessedWine(UUID ownerId) {
public BlessedWine(final BlessedWine card) {
public BlessedWine copy() {return new BlessedWine(this);
public class BottleOfSuleiman extends CardImpl {
public BottleOfSuleiman(UUID ownerId) {
public BottleOfSuleiman(final BottleOfSuleiman card) {
public BottleOfSuleiman copy() {return new BottleOfSuleiman(this);
class BottleOfSuleimanEffect extends OneShotEffect {
public BottleOfSuleimanEffect() {
public BottleOfSuleimanEffect(final BottleOfSuleimanEffect effect) {
public BottleOfSuleimanEffect copy() {return new BottleOfSuleimanEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
class DjinnToken extends Token {
public DjinnToken() {
public class Brainstorm extends CardImpl {
public Brainstorm(UUID ownerId) {
public Brainstorm(final Brainstorm card) {
public Brainstorm copy() {return new Brainstorm(this);
class BrainstormEffect extends OneShotEffect {
public BrainstormEffect() {
public BrainstormEffect(final BrainstormEffect effect) {
public BrainstormEffect copy() {return new BrainstormEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private boolean putOnLibrary(Player player, Ability source, Game game) {return player.moveCardToLibraryWithInfo(card, source.getSourceId(), game, Zone.HAND, true, false);return false;
public class BreedingPit extends CardImpl {
public BreedingPit(UUID ownerId) {
public BreedingPit(final BreedingPit card) {
public BreedingPit copy() {return new BreedingPit(this);
class ThrullToken extends Token {
ThrullToken() {
public class CaribouRange extends CardImpl {
public CaribouRange(UUID ownerId) {
public CaribouRange(final CaribouRange card) {
public CaribouRange copy() {return new CaribouRange(this);
class CaribouToken extends Token {
public CaribouToken() {
public class CarrionAnts extends CardImpl {
public CarrionAnts(UUID ownerId) {
public CarrionAnts(final CarrionAnts card) {
public CarrionAnts copy() {return new CarrionAnts(this);
public class CatWarriors extends CardImpl {
public CatWarriors(UUID ownerId) {
public CatWarriors(final CatWarriors card) {
public CatWarriors copy() {return new CatWarriors(this);
public class ColossusOfSardia extends CardImpl {
public ColossusOfSardia(UUID ownerId) {
public ColossusOfSardia(final ColossusOfSardia card) {
public ColossusOfSardia copy() {return new ColossusOfSardia(this);
public class Dandan extends CardImpl {
public Dandan(UUID ownerId) {
public Dandan(final Dandan card) {
public Dandan copy() {return new Dandan(this);
public class DarkMaze extends CardImpl {
public DarkMaze(UUID ownerId) {
public DarkMaze(final DarkMaze card) {
public DarkMaze copy() {return new DarkMaze(this);
public class DAvenantArcher extends CardImpl {
public DAvenantArcher(UUID ownerId) {
public DAvenantArcher(final DAvenantArcher card) {
public DAvenantArcher copy() {return new DAvenantArcher(this);
public class Detonate extends CardImpl {
public Detonate(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public Detonate(final Detonate card) {
public Detonate copy() {return new Detonate(this);return new DivineTransformation(this);
public class DragonEngine extends CardImpl {
public DragonEngine(UUID ownerId) {
public DragonEngine(final DragonEngine card) {
public DragonEngine copy() {return new DragonEngine(this);
public class DurkwoodBoars extends CardImpl {
public DurkwoodBoars(UUID ownerId) {
public DurkwoodBoars(final DurkwoodBoars card) {
public DurkwoodBoars copy() {return new DurkwoodBoars(this);
public class DwarvenHold extends CardImpl {
public DwarvenHold(UUID ownerId) {
public DwarvenHold(final DwarvenHold card) {
public DwarvenHold copy() {return new DwarvenHold(this);
public class ElvishArchers extends CardImpl {
public ElvishArchers(UUID ownerId) {
public ElvishArchers(final ElvishArchers card) {
public ElvishArchers copy() {return new ElvishArchers(this);
public class EternalWarrior extends CardImpl {
public EternalWarrior(UUID ownerId) {
public EternalWarrior(final EternalWarrior card) {
public EternalWarrior copy() {return new EternalWarrior(this);
public class EvilEyeOfOrmsByGore extends CardImpl {
public EvilEyeOfOrmsByGore(UUID ownerId) {
public EvilEyeOfOrmsByGore(final EvilEyeOfOrmsByGore card) {
public EvilEyeOfOrmsByGore copy() {return new EvilEyeOfOrmsByGore(this);
public class Flare extends CardImpl {
public Flare(UUID ownerId) {
public Flare(final Flare card) {
public Flare copy() {return new Flare(this);
public class Flashfires extends CardImpl {
public Flashfires(UUID ownerId) {
public Flashfires(final Flashfires card) {
public Flashfires copy() {return new Flashfires(this);
public class GlacialWall extends CardImpl {
public GlacialWall(UUID ownerId) {
public GlacialWall(final GlacialWall card) {
public GlacialWall copy() {return new GlacialWall(this);
public class GoblinHero extends CardImpl {
public GoblinHero(UUID ownerId) {
public GoblinHero(final GoblinHero card) {
public GoblinHero copy() {return new GoblinHero(this);
public class HungryMist extends CardImpl {
public HungryMist(UUID ownerId) {
public HungryMist(final HungryMist card) {
public HungryMist copy() {return new HungryMist(this);
public class HurkylsRecall extends CardImpl {
public HurkylsRecall(UUID ownerId) {
public HurkylsRecall(final HurkylsRecall card) {
public HurkylsRecall copy() {return new HurkylsRecall(this);
class HurkylsRecallReturnToHandEffect extends OneShotEffect {
public HurkylsRecallReturnToHandEffect() {
public HurkylsRecallReturnToHandEffect(final HurkylsRecallReturnToHandEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public HurkylsRecallReturnToHandEffect copy() {return new HurkylsRecallReturnToHandEffect(this);
public class HurloonMinotaur extends CardImpl {
public HurloonMinotaur(UUID ownerId) {
public HurloonMinotaur(final HurloonMinotaur card) {
public HurloonMinotaur copy() {return new HurloonMinotaur(this);
public class Hydroblast extends CardImpl {
public Hydroblast(UUID ownerId) {
public Hydroblast(final Hydroblast card) {
public Hydroblast copy() {return new Hydroblast(this);
class HydroblastCounterEffect extends OneShotEffect {
HydroblastCounterEffect() {
HydroblastCounterEffect(final HydroblastCounterEffect effect) {
public HydroblastCounterEffect copy() {return new HydroblastCounterEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getText(Mode mode) {return "Counter target spell if it's red";
class HydroblastDestroyEffect extends OneShotEffect {
HydroblastDestroyEffect() {
HydroblastDestroyEffect(final HydroblastDestroyEffect effect) {
public HydroblastDestroyEffect copy() {return new HydroblastDestroyEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getText(Mode mode) {return "destroy target permanent if it's red";
public class InstillEnergy extends CardImpl {
public InstillEnergy(UUID ownerId) {
public InstillEnergy(final InstillEnergy card) {
public InstillEnergy copy() {return new InstillEnergy(this);
class CanAttackAsThoughItHadHasteEnchantedEffect extends AsThoughEffectImpl {
public CanAttackAsThoughItHadHasteEnchantedEffect(Duration duration) {
public CanAttackAsThoughItHadHasteEnchantedEffect(final CanAttackAsThoughItHadHasteEnchantedEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CanAttackAsThoughItHadHasteEnchantedEffect copy() {return new CanAttackAsThoughItHadHasteEnchantedEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return enchantment != null && enchantment.getAttachedTo() != null && enchantment.getAttachedTo().equals(objectId);
class LimitedTimesIfConditionActivatedAbility extends ActivateIfConditionActivatedAbility {
class ActivationInfo {
public ActivationInfo(int turnNum, int activationCounter) {
public LimitedTimesIfConditionActivatedAbility(Zone zone, Effect effect, Cost cost, Condition condition) {
public LimitedTimesIfConditionActivatedAbility(Zone zone, Effect effect, Cost cost, Condition condition, int maxActivationsPerTurn) {
public LimitedTimesIfConditionActivatedAbility(LimitedTimesIfConditionActivatedAbility ability) {
public boolean canActivate(UUID playerId, Game game) {return activationInfo == null || activationInfo.turnNum != game.getTurnNum() || activationInfo.activationCounter < maxActivationsPerTurn;return false;
public boolean activate(Game game, boolean noMana) {return true;return false;
public boolean resolve(Game game) {return super.resolve(game);
public String getRule() {
public class IronrootTreefolk extends CardImpl {
public IronrootTreefolk(UUID ownerId) {
public IronrootTreefolk(final IronrootTreefolk card) {
public IronrootTreefolk copy() {return new IronrootTreefolk(this);
public class JestersCap extends CardImpl {
public JestersCap(UUID ownerId) {
public JestersCap(final JestersCap card) {
public JestersCap copy() {return new JestersCap(this);
class JestersCapEffect extends OneShotEffect {
public JestersCapEffect() {
public JestersCapEffect(final JestersCapEffect effect) {
public JestersCapEffect copy() {return new JestersCapEffect(this);
public boolean apply(Game game, Ability source) {return applied;
public class Justice extends CardImpl {
public Justice(UUID ownerId) {
public Justice(final Justice card) {
public Justice copy() {return new Justice(this);
class JusticeTriggeredAbility extends TriggeredAbilityImpl {
public JusticeTriggeredAbility(Effect effect) {
public JusticeTriggeredAbility(final JusticeTriggeredAbility ability) {
public JusticeTriggeredAbility copy() {return new JusticeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE
public boolean checkTrigger(GameEvent event, Game game) {
|| sourceObject instanceof Spell) {return true;return false;
public String getRule() {return "Whenever a red creature or spell deals damage, {this} deals that much damage to that creature's or spell's controller.";
class JusticeEffect extends OneShotEffect {
public JusticeEffect() {
public JusticeEffect(final JusticeEffect effect) {
public JusticeEffect copy() {return new JusticeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Juxtapose extends CardImpl {
public Juxtapose(UUID ownerId) {
public Juxtapose(final Juxtapose card) {
public Juxtapose copy() {return new Juxtapose(this);
class JuxtaposeEffect extends ContinuousEffectImpl {
public JuxtaposeEffect(FilterPermanent filter, String text) {
public JuxtaposeEffect(final JuxtaposeEffect effect) {
public JuxtaposeEffect copy() {return new JuxtaposeEffect(this);
public void init(Ability source, Game game) {return;
public boolean apply(Game game, Ability source) {return false;return true;
private Permanent chooseOnePermanentsWithTheHighestCMC(Game game, Player player, FilterPermanent filter) {return chooseOnePermanent(game, player, permanents);
private List<Permanent> getPermanentsWithTheHighestCMC(Game game, UUID playerId, FilterPermanent filter) {return result;
private Permanent chooseOnePermanent(Game game, Player player, List<Permanent> permanents) {return permanent;
public class Karma extends CardImpl {
public Karma(UUID ownerId) {
public Karma(final Karma card) {
public Karma copy() {return new Karma(this);
class KarmaDamageTargetEffect extends OneShotEffect{
public String getText(Mode mode) {return "{this} deals damage to that player equal to the number of Swamps he or she controls";
public boolean apply(Game game, Ability source) {return true;return false;
public KarmaDamageTargetEffect copy() {return new KarmaDamageTargetEffect(this);
public class KillerBees extends CardImpl {
public KillerBees(UUID ownerId) {
public KillerBees(final KillerBees card) {
public KillerBees copy() {return new KillerBees(this);
public class Kismet extends CardImpl {
public Kismet(UUID ownerId) {
public Kismet(final Kismet card) {
public Kismet copy() {return new Kismet(this);
class KismetEffect extends ReplacementEffectImpl {
KismetEffect() {
KismetEffect(final KismetEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public KismetEffect copy() {return new KismetEffect(this);
public class KrovikanFetish extends CardImpl {
public KrovikanFetish(UUID ownerId) {
public KrovikanFetish(final KrovikanFetish card) {
public KrovikanFetish copy() {return new KrovikanFetish(this);return new Lifetap(this);
public class LostSoul extends CardImpl {
public LostSoul(UUID ownerId) {
public LostSoul(final LostSoul card) {
public LostSoul copy() {return new LostSoul(this);
public class MerfolkOfThePearlTrident extends CardImpl {
public MerfolkOfThePearlTrident(UUID ownerId) {
public MerfolkOfThePearlTrident(final MerfolkOfThePearlTrident card) {
public MerfolkOfThePearlTrident copy() {return new MerfolkOfThePearlTrident(this);
public class Millstone extends CardImpl {
public Millstone(UUID ownerId) {
public Millstone(final Millstone card) {
public Millstone copy() {return new Millstone(this);
public class MindRavel extends CardImpl {
public MindRavel(UUID ownerId) {
public MindRavel(final MindRavel card) {
public MindRavel copy() {return new MindRavel(this);
public class MoleWorms extends CardImpl {
public MoleWorms(UUID ownerId) {
public MoleWorms(final MoleWorms card) {
public MoleWorms copy() {return new MoleWorms(this);
public class MonssGoblinRaiders extends CardImpl {
public MonssGoblinRaiders(UUID ownerId) {
public MonssGoblinRaiders(final MonssGoblinRaiders card) {
public MonssGoblinRaiders copy() {return new MonssGoblinRaiders(this);
public class MountainGoat extends CardImpl {
public MountainGoat(UUID ownerId) {
public MountainGoat(final MountainGoat card) {
public MountainGoat copy() {return new MountainGoat(this);
public class MurkDwellers extends CardImpl {
public MurkDwellers(UUID ownerId) {
public MurkDwellers(final MurkDwellers card) {
public MurkDwellers copy() {return new MurkDwellers(this);
public class NevinyrralsDisk extends CardImpl {
public NevinyrralsDisk(UUID ownerId) {
public NevinyrralsDisk(final NevinyrralsDisk card) {
public NevinyrralsDisk copy() {return new NevinyrralsDisk(this);
public class PearledUnicorn extends CardImpl {
public PearledUnicorn(UUID ownerId) {
public PearledUnicorn(final PearledUnicorn card) {
public PearledUnicorn copy() {return new PearledUnicorn(this);
public class PhantomMonster extends CardImpl {
public PhantomMonster(UUID ownerId) {
public PhantomMonster(final PhantomMonster card) {
public PhantomMonster copy() {return new PhantomMonster(this);
public class PitScorpion extends CardImpl {
public PitScorpion(UUID ownerId) {
public PitScorpion(final PitScorpion card) {
public PitScorpion copy() {return new PitScorpion(this);
public class Portent extends CardImpl {
public Portent(UUID ownerId) {
public Portent(final Portent card) {
public Portent copy() {return new Portent(this);
class PortentEffect extends OneShotEffect {
public PortentEffect() {
public PortentEffect(final PortentEffect effect) {
public PortentEffect copy() {return new PortentEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class Pox extends CardImpl {
public Pox(UUID ownerId) {
public Pox(final Pox card) {
public Pox copy() {return new Pox(this);
class PoxEffect extends OneShotEffect {
PoxEffect() {
PoxEffect(final PoxEffect effect) {
public PoxEffect copy() {return new PoxEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PradeshGypsies extends CardImpl {
public PradeshGypsies(UUID ownerId) {
public PradeshGypsies(final PradeshGypsies card) {
public PradeshGypsies copy() {return new PradeshGypsies(this);
public class PrimalClay extends CardImpl {
public PrimalClay(UUID ownerId) {
public PrimalClay(final PrimalClay card) {
public PrimalClay copy() {return new PrimalClay(this);
class PrimalPlasmaReplacementEffect extends ReplacementEffectImpl {
public PrimalPlasmaReplacementEffect() {
public PrimalPlasmaReplacementEffect(PrimalPlasmaReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(EventType.ENTERS_THE_BATTLEFIELD);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return false;
public PrimalPlasmaReplacementEffect copy() {return new PrimalPlasmaReplacementEffect(this);
public class RadjanSpirit extends CardImpl {
public RadjanSpirit(UUID ownerId) {
public RadjanSpirit(final RadjanSpirit card) {
public RadjanSpirit copy() {return new RadjanSpirit(this);
public class Recall extends CardImpl {
public Recall(UUID ownerId) {
public Recall(final Recall card) {
public Recall copy() {return new Recall(this);
class RecallEffect extends OneShotEffect {
public RecallEffect() {this.staticText = "Discard X cards, then return a card from your graveyard to your hand for each card discarded this way";
public RecallEffect(final RecallEffect effect) {
public RecallEffect copy() {return new RecallEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SandSilos extends CardImpl {
public SandSilos(UUID ownerId) {
public SandSilos(final SandSilos card) {
public SandSilos copy() {return new SandSilos(this);
public class ScavengerFolk extends CardImpl {
public ScavengerFolk(UUID ownerId) {
public ScavengerFolk(final ScavengerFolk card) {
public ScavengerFolk copy() {return new ScavengerFolk(this);
public class ScrybSprites extends CardImpl {
public ScrybSprites(UUID ownerId) {
public ScrybSprites(final ScrybSprites card) {
public ScrybSprites copy() {return new ScrybSprites(this);
public class SegovianLeviathan extends CardImpl {
public SegovianLeviathan(UUID ownerId) {
public SegovianLeviathan(final SegovianLeviathan card) {
public SegovianLeviathan copy() {return new SegovianLeviathan(this);
public class SerpentGenerator extends CardImpl {
public SerpentGenerator(UUID ownerId) {
public SerpentGenerator(final SerpentGenerator card) {
public SerpentGenerator copy() {return new SerpentGenerator(this);
class SnakeToken extends Token {
public SnakeToken() {
public class ShanodinDryads extends CardImpl {
public ShanodinDryads(UUID ownerId) {
public ShanodinDryads(final ShanodinDryads card) {
public ShanodinDryads copy() {return new ShanodinDryads(this);
public class Shatterstorm extends CardImpl {
public Shatterstorm(UUID ownerId) {
public Shatterstorm(final Shatterstorm card) {
public Shatterstorm copy() {return new Shatterstorm(this);
public class Stasis extends CardImpl {
public Stasis(UUID ownerId) {
public Stasis(final Stasis card) {
public Stasis copy() {return new Stasis(this);
public SkipUntapStepEffect() {
public SkipUntapStepEffect(final SkipUntapStepEffect effect) {
public SkipUntapStepEffect copy() {return new SkipUntapStepEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return event.getType() == GameEvent.EventType.UNTAP_STEP
public class SylvanLibrary extends CardImpl {
public SylvanLibrary(UUID ownerId) {
public SylvanLibrary(final SylvanLibrary card) {
public SylvanLibrary copy() {return new SylvanLibrary(this);
class SylvanLibraryEffect extends OneShotEffect {
public SylvanLibraryEffect() {
public SylvanLibraryEffect(final SylvanLibraryEffect effect) {
public SylvanLibraryEffect copy() {return new SylvanLibraryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class CardsDrawnThisTurnWatcher extends Watcher {
public CardsDrawnThisTurnWatcher() {
public CardsDrawnThisTurnWatcher(final CardsDrawnThisTurnWatcher watcher) {
public void watch(GameEvent event, Game game) {
public Set<UUID> getCardsDrawnThisTurn(UUID playerId) {return cardsDrawnThisTurn.get(playerId);
public void reset() {
public CardsDrawnThisTurnWatcher copy() {return new CardsDrawnThisTurnWatcher(this);
class CardIdPredicate implements Predicate<MageObject> {
public CardIdPredicate(Cards cardsId) {
public boolean apply(MageObject input, Game game) {return true;return false;
public String toString() {return "CardsId";
public class TawnossWeaponry extends CardImpl {
public TawnossWeaponry(UUID ownerId) {
public TawnossWeaponry(final TawnossWeaponry card) {
public TawnossWeaponry copy() {return new TawnossWeaponry(this);
public class TheWretched extends CardImpl {
public TheWretched(UUID ownerId) {
public TheWretched(final TheWretched card) {
public TheWretched copy() {return new TheWretched(this);
class TheWretchedEffect extends OneShotEffect {
TheWretchedEffect() {
TheWretchedEffect(final TheWretchedEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;return false;return true;
public TheWretchedEffect copy() {return new TheWretchedEffect(this);
public class UrzasMine extends CardImpl {
public UrzasMine(UUID ownerId) {
public UrzasMine(final UrzasMine card) {
public UrzasMine copy() {return new UrzasMine(this);
public class UrzasPowerPlant extends CardImpl {
public UrzasPowerPlant(UUID ownerId) {
public UrzasPowerPlant(final UrzasPowerPlant card) {
public UrzasPowerPlant copy() {return new UrzasPowerPlant(this);
public class UrzasTower extends CardImpl {
public UrzasTower(UUID ownerId) {
public UrzasTower(final UrzasTower card) {
public UrzasTower copy() {return new UrzasTower(this);
public class VampireBats extends CardImpl {
public VampireBats(UUID ownerId) {
public VampireBats(final VampireBats card) {
public VampireBats copy() {return new VampireBats(this);
public class VodalianSoldiers extends CardImpl {
public VodalianSoldiers(UUID ownerId) {
public VodalianSoldiers(final VodalianSoldiers card) {
public VodalianSoldiers copy() {return new VodalianSoldiers(this);
public class WallOfSpears extends CardImpl {
public WallOfSpears(UUID ownerId) {
public WallOfSpears(final WallOfSpears card) {
public WallOfSpears copy() {return new WallOfSpears(this);
public class WallOfStone extends CardImpl {
public WallOfStone(UUID ownerId) {
public WallOfStone(final WallOfStone card) {
public WallOfStone copy() {return new WallOfStone(this);
public class WindsOfChange extends CardImpl {
public WindsOfChange(UUID ownerId) {
public WindsOfChange(final WindsOfChange card) {
public WindsOfChange copy() {return new WindsOfChange(this);
class WindsOfChangeEffect extends OneShotEffect {
public WindsOfChangeEffect() {
public WindsOfChangeEffect(final WindsOfChangeEffect effect) {
public WindsOfChangeEffect copy() {return new WindsOfChangeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WyluliWolf extends CardImpl {
public WyluliWolf(UUID ownerId) {
public WyluliWolf(final WyluliWolf card) {
public WyluliWolf copy() {return new WyluliWolf(this);
public class ZephyrFalcon extends CardImpl {
public ZephyrFalcon(UUID ownerId) {
public ZephyrFalcon(final ZephyrFalcon card) {
public ZephyrFalcon copy() {return new ZephyrFalcon(this);
public class Blessing extends CardImpl {
public Blessing(UUID ownerId) {
public Blessing(final Blessing card) {
public Blessing copy() {return new Blessing(this);
public class BloodLust extends CardImpl {
public BloodLust(UUID ownerId) {
public BloodLust(final BloodLust card) {
public BloodLust copy() {return new BloodLust(this);
class TargetMatchesFilterCondition implements Condition {
public TargetMatchesFilterCondition(FilterPermanent filter) {
public boolean apply(Game game, Ability source) {return true;return false;
class TargetPermanentToughnessMinus1Value implements DynamicValue {return fINSTANCE;
public int calculate(Game game, Ability sourceAbility, Effect effect) {return target.getToughness().getValue() - 1;return 0;
public TargetPermanentToughnessMinus1Value copy() {return new TargetPermanentToughnessMinus1Value();
public String toString() {return "X";
public String getMessage() {return "target creature's toughness minus 1";
public class BrassMan extends CardImpl {
public BrassMan(UUID ownerId) {
public BrassMan(final BrassMan card) {
public BrassMan copy() {return new BrassMan(this);
public class BrothersOfFire extends CardImpl {
public BrothersOfFire(UUID ownerId) {
public BrothersOfFire(final BrothersOfFire card) {
public BrothersOfFire copy() {return new BrothersOfFire(this);
public class CarnivorousPlant extends CardImpl {
public CarnivorousPlant(UUID ownerId) {
public CarnivorousPlant(final CarnivorousPlant card) {
public CarnivorousPlant copy() {return new CarnivorousPlant(this);
public class Chaoslace extends CardImpl {
public Chaoslace(UUID ownerId) {
public Chaoslace(final Chaoslace card) {
public Chaoslace copy() {return new Chaoslace(this);
public class CursedLand extends CardImpl {
public CursedLand(UUID ownerId) {
public CursedLand(final CursedLand card) {
public CursedLand copy() {return new CursedLand(this);
public class DiabolicMachine extends CardImpl {
public DiabolicMachine(UUID ownerId) {
public DiabolicMachine(final DiabolicMachine card) {
public DiabolicMachine copy() {return new DiabolicMachine(this);
public class EbonyHorse extends CardImpl {
public EbonyHorse(UUID ownerId) {
public EbonyHorse(final EbonyHorse card) {
public EbonyHorse copy() {return new EbonyHorse(this);
public class ErgRaiders extends CardImpl {
public ErgRaiders(UUID ownerId) {
public ErgRaiders(final ErgRaiders card) {
public ErgRaiders copy() {return new ErgRaiders(this);
class ErgRaidersCondition implements Condition {
public boolean apply(Game game, Ability source) {return raiders.wasControlledFromStartOfControllerTurn() && !watcher.getAttackedThisTurnCreatures().contains(raiders.getId());
public class Flood extends CardImpl {
public Flood(UUID ownerId) {
public Flood(final Flood card) {
public Flood copy() {return new Flood(this);
public class ForceOfNature extends CardImpl {
public ForceOfNature(UUID ownerId) {
public ForceOfNature(final ForceOfNature card) {
public ForceOfNature copy() {return new ForceOfNature(this);
class ForceOfNatureEffect extends OneShotEffect {
public ForceOfNatureEffect() {
public ForceOfNatureEffect(final ForceOfNatureEffect effect) {
public ForceOfNatureEffect copy() {return new ForceOfNatureEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GiantTortoise extends CardImpl {
public GiantTortoise(UUID ownerId) {
public GiantTortoise(final GiantTortoise card) {
public GiantTortoise copy() {return new GiantTortoise(this);
public class GrayOgre extends CardImpl {
public GrayOgre(UUID ownerId) {
public GrayOgre(final GrayOgre card) {
public GrayOgre copy() {return new GrayOgre(this);
public class HolyArmor extends CardImpl {
public HolyArmor(UUID ownerId) {
public HolyArmor(final HolyArmor card) {
public HolyArmor copy() {return new HolyArmor(this);
public class JununEfreet extends CardImpl {
public JununEfreet(UUID ownerId) {
public JununEfreet(final JununEfreet card) {
public JununEfreet copy() {return new JununEfreet(this);
public class LandLeeches extends CardImpl {
public LandLeeches(UUID ownerId) {
public LandLeeches(final LandLeeches card) {
public LandLeeches copy() {return new LandLeeches(this);
public class ManaClash extends CardImpl {
public ManaClash(UUID ownerId) {
public ManaClash(final ManaClash card) {
public ManaClash copy() {return new ManaClash(this);
class ManaClashEffect extends OneShotEffect {
public ManaClashEffect() {
public ManaClashEffect(final ManaClashEffect effect) {
public ManaClashEffect copy() {return new ManaClashEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class ManaFlare extends CardImpl {
public ManaFlare(UUID ownerId) {
public ManaFlare(final ManaFlare card) {
public ManaFlare copy() {return new ManaFlare(this);
public class Oasis extends CardImpl {
public Oasis(UUID ownerId) {
public Oasis(final Oasis card) {
public Oasis copy() {return new Oasis(this);
public class PhantasmalForces extends CardImpl {
public PhantasmalForces(UUID ownerId) {
public PhantasmalForces(final PhantasmalForces card) {
public PhantasmalForces copy() {return new PhantasmalForces(this);
public class Sandstorm extends CardImpl {
public Sandstorm(UUID ownerId) {
public Sandstorm(final Sandstorm card) {
public Sandstorm copy() {return new Sandstorm(this);
public class SirensCall extends CardImpl {
public SirensCall(UUID ownerId) {
public SirensCall(final SirensCall card) {
public SirensCall copy() {return new SirensCall(this);
class SirensCallMustAttackEffect extends RequirementEffect {
SirensCallMustAttackEffect() {
SirensCallMustAttackEffect(final SirensCallMustAttackEffect effect) {
public SirensCallMustAttackEffect copy() {return new SirensCallMustAttackEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return game.getActivePlayerId().equals(permanent.getControllerId());
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
class SirensCallDestroyEffect extends OneShotEffect {
SirensCallDestroyEffect() {
SirensCallDestroyEffect(final SirensCallDestroyEffect effect) {
public SirensCallDestroyEffect copy() {return new SirensCallDestroyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SistersOfTheFlame extends CardImpl {
public SistersOfTheFlame(UUID ownerId) {
public SistersOfTheFlame(final SistersOfTheFlame card) {
public SistersOfTheFlame copy() {return new SistersOfTheFlame(this);
public class StripMine extends CardImpl {
public StripMine(UUID ownerId) {
public StripMine(final StripMine card) {
public StripMine copy() {return new StripMine(this);
public class SwordsToPlowshares extends CardImpl {
public SwordsToPlowshares(UUID ownerId) {
public SwordsToPlowshares(final SwordsToPlowshares card) {
public SwordsToPlowshares copy() {return new SwordsToPlowshares(this);
class SwordsToPlowsharesEffect extends OneShotEffect {
public SwordsToPlowsharesEffect() {
public SwordsToPlowsharesEffect(final SwordsToPlowsharesEffect effect) {
public SwordsToPlowsharesEffect copy() {return new SwordsToPlowsharesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TheRack extends CardImpl {
public TheRack(UUID ownerId) {
public TheRack(final TheRack card) {
public TheRack copy() {return new TheRack(this);
class TheRackTriggeredAbility extends TriggeredAbilityImpl {
public TheRackTriggeredAbility() {
public TheRackTriggeredAbility(final TheRackTriggeredAbility ability) {
public TheRackTriggeredAbility copy() {return new TheRackTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals((UUID) game.getState().getValue(this.getSourceId().toString() + ChooseOpponentEffect.VALUE_KEY));
public String getRule() {return "At the beginning of the chosen player's upkeep, " + super.getRule();
class TheRackEffect extends OneShotEffect {
public TheRackEffect() {
public TheRackEffect(final TheRackEffect effect) {
public TheRackEffect copy() {return new TheRackEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Tsunami extends CardImpl {
public Tsunami(UUID ownerId) {
public Tsunami(final Tsunami card) {
public Tsunami copy() {return new Tsunami(this);
public class WallOfIce extends CardImpl {
public WallOfIce(UUID ownerId) {
public WallOfIce(final WallOfIce card) {
public WallOfIce copy() {return new WallOfIce(this);
public class WaterElemental extends CardImpl {
public WaterElemental(UUID ownerId) {
public WaterElemental(final WaterElemental card) {
public WaterElemental copy() {return new WaterElemental(this);
public class WordOfBinding extends CardImpl {
public WordOfBinding(UUID ownerId) {
public WordOfBinding(final WordOfBinding card) {
public void adjustTargets(Ability ability, Game game) {
public WordOfBinding copy() {return new WordOfBinding(this);
public class Draco extends CardImpl {
public Draco(UUID ownerId) {
public Draco(final Draco card) {
public Draco copy() {return new Draco(this);
public DracoCostReductionEffect() {
protected DracoCostReductionEffect(final DracoCostReductionEffect effect) {return true;return abilityToModify.getSourceId().equals(source.getSourceId());
public DracoCostReductionEffect copy() {return new DracoCostReductionEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;return new DracoSacrificeUnlessPaysEffect (this);
public class EbonDragon extends CardImpl {
public EbonDragon(UUID ownerId) {
public EbonDragon(final EbonDragon card) {
public EbonDragon copy() {return new EbonDragon(this);
public class AugurOfSkulls extends CardImpl {
public AugurOfSkulls(UUID ownerId) {
public AugurOfSkulls(final AugurOfSkulls card) {
public AugurOfSkulls copy() {return new AugurOfSkulls(this);
public class AvenAugur extends CardImpl {
public AvenAugur(UUID ownerId) {
public AvenAugur(final AvenAugur card) {
public AvenAugur copy() {return new AvenAugur(this);
public class AvenMindcensor extends CardImpl {
public AvenMindcensor(UUID ownerId) {
public AvenMindcensor(final AvenMindcensor card) {
public AvenMindcensor copy() {return new AvenMindcensor(this);
class AvenMindcensorEffect extends ReplacementEffectImpl {
AvenMindcensorEffect() {
AvenMindcensorEffect(final AvenMindcensorEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SEARCH_LIBRARY;
public boolean applies(GameEvent event, Ability source, Game game) {return controller != null && game.isOpponent(controller, event.getPlayerId());
public AvenMindcensorEffect copy() {return new AvenMindcensorEffect(this);
public class BarrenGlory extends CardImpl {
public BarrenGlory(UUID ownerId) {
public BarrenGlory(final BarrenGlory card) {
public BarrenGlory copy() {return new BarrenGlory(this);
class BarrenGloryTriggeredAbility extends TriggeredAbilityImpl {
BarrenGloryTriggeredAbility() {
BarrenGloryTriggeredAbility(final BarrenGloryTriggeredAbility ability) {
public BarrenGloryTriggeredAbility copy() {return new BarrenGloryTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of your upkeep, if you control no permanents other than {this} and have no cards in hand, you win the game";
public class BaruFistOfKrosa extends CardImpl {
public BaruFistOfKrosa(UUID ownerId) {
public BaruFistOfKrosa(final BaruFistOfKrosa card) {
public BaruFistOfKrosa copy() {return new BaruFistOfKrosa(this);
class BaruFistOfKrosaEffect extends OneShotEffect {
BaruFistOfKrosaEffect() {
BaruFistOfKrosaEffect(final BaruFistOfKrosaEffect effect) {
public BaruFistOfKrosaEffect copy() {return new BaruFistOfKrosaEffect(this);
public boolean apply(Game game, Ability source) {return true;
class BaruFistOfKrosaToken extends Token {
BaruFistOfKrosaToken(int xValue) {
public class BitterOrdeal extends CardImpl {
public BitterOrdeal(UUID ownerId) {
public BitterOrdeal(final BitterOrdeal card) {
public BitterOrdeal copy() {return new BitterOrdeal(this);
class BitterOrdealEffect extends OneShotEffect {
BitterOrdealEffect() {
BitterOrdealEffect(final BitterOrdealEffect effect) {
public BitterOrdealEffect copy() {return new BitterOrdealEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BladeOfTheSixthPride extends CardImpl {
public BladeOfTheSixthPride(UUID ownerId) {
public BladeOfTheSixthPride(final BladeOfTheSixthPride card) {
public BladeOfTheSixthPride copy() {return new BladeOfTheSixthPride(this);
public class BlindPhantasm extends CardImpl {
public BlindPhantasm(UUID ownerId) {
public BlindPhantasm(final BlindPhantasm card) {
public BlindPhantasm copy() {return new BlindPhantasm(this);
public class BogardanLancer extends CardImpl {
public BogardanLancer(UUID ownerId) {
public BogardanLancer(final BogardanLancer card) {
public BogardanLancer copy() {return new BogardanLancer(this);
public class BondedFetch extends CardImpl {
public BondedFetch(UUID ownerId) {
public BondedFetch(final BondedFetch card) {
public BondedFetch copy() {return new BondedFetch(this);
public class BridgeFromBelow extends CardImpl {
public BridgeFromBelow(UUID ownerId) {
public BridgeFromBelow(final BridgeFromBelow card) {
public BridgeFromBelow copy() {return new BridgeFromBelow(this);
class BridgeFromBelowAbility extends TriggeredAbilityImpl {
public BridgeFromBelowAbility(Effect effect, FilterCreaturePermanent filter) {
public BridgeFromBelowAbility(BridgeFromBelowAbility ability) {
public BridgeFromBelowAbility copy() {return new BridgeFromBelowAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public boolean checkInterveningIfClause(Game game) {return controller != null && controller.getGraveyard().contains(this.getSourceId());
public String getRule() {return filter.getMessage() +", if {this} is in your graveyard, " + super.getRule();
public class CentaurOmenreader extends CardImpl {
public CentaurOmenreader(UUID ownerId) {
public CentaurOmenreader(final CentaurOmenreader card) {
public CentaurOmenreader copy() {return new CentaurOmenreader(this);
class CentaurOmenreaderSpellsCostReductionEffect extends SpellsCostReductionControllerEffect {
public CentaurOmenreaderSpellsCostReductionEffect(FilterCard filter) {
protected CentaurOmenreaderSpellsCostReductionEffect(SpellsCostReductionControllerEffect effect) {return super.applies(abilityToModify, source, game);return false;
public CentaurOmenreaderSpellsCostReductionEffect copy() {return new CentaurOmenreaderSpellsCostReductionEffect(this);
public class CharRumbler extends CardImpl {
public CharRumbler(UUID ownerId) {
public CharRumbler(final CharRumbler card) {
public CharRumbler copy() {return new CharRumbler(this);
public class CloudKey extends CardImpl {
public CloudKey(UUID ownerId) {
public CloudKey copy() {return new CloudKey(this);
public CloudKey(final CloudKey card) {
class CloudKeyChooseTypeEffect extends OneShotEffect {
public CloudKeyChooseTypeEffect() {
public CloudKeyChooseTypeEffect(final CloudKeyChooseTypeEffect effect) {
public CloudKeyChooseTypeEffect copy() {return new CloudKeyChooseTypeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new CloudKeyCostModificationEffect(this);return true;return true;return false;
public class Cloudseeder extends CardImpl {
public Cloudseeder(UUID ownerId) {
public Cloudseeder(final Cloudseeder card) {
public Cloudseeder copy() {return new Cloudseeder(this);
class CloudSpriteToken extends Token {
public CloudSpriteToken() {
public class CoalitionRelic extends CardImpl {
public CoalitionRelic(UUID ownerId) {
public CoalitionRelic(final CoalitionRelic card) {
public CoalitionRelic copy() {return new CoalitionRelic(this);
class CoalitionRelicEffect extends OneShotEffect {
public CoalitionRelicEffect() {
public CoalitionRelicEffect(final CoalitionRelicEffect effect) {
public CoalitionRelicEffect copy() {return new CoalitionRelicEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class CrypticAnnelid extends CardImpl {
public CrypticAnnelid(UUID ownerId) {
public CrypticAnnelid(final CrypticAnnelid card) {
public CrypticAnnelid copy() {return new CrypticAnnelid(this);
public class CutthroatIlDal extends CardImpl {
public CutthroatIlDal(UUID ownerId) {
public CutthroatIlDal(final CutthroatIlDal card) {
public CutthroatIlDal copy() {return new CutthroatIlDal(this);
public class DaybreakCoronet extends CardImpl {
public DaybreakCoronet(UUID ownerId) {
public DaybreakCoronet(final DaybreakCoronet card) {
public DaybreakCoronet copy() {return new DaybreakCoronet(this);
class AuraAttachedPredicate implements Predicate<Permanent> {
public AuraAttachedPredicate(UUID ownId) {
public boolean apply(Permanent input, Game game) {return true;return false;
public String toString() {return "Aura attached";
public class Delay extends CardImpl {
public Delay(UUID ownerId) {
public Delay(final Delay card) {
public Delay copy() {return new Delay(this);
class DelayEffect extends OneShotEffect {
public DelayEffect() {
public DelayEffect(final DelayEffect effect) {
public DelayEffect copy() {return new DelayEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DryadArbor extends CardImpl {
public DryadArbor(UUID ownerId) {
public DryadArbor(final DryadArbor card) {
public DryadArbor copy() {return new DryadArbor(this);
public class DustOfMoments extends CardImpl {
public DustOfMoments(UUID ownerId) {
public DustOfMoments(final DustOfMoments card) {
public DustOfMoments copy() {return new DustOfMoments(this);
public DustOfMomentsEffect() {
public DustOfMomentsEffect(final DustOfMomentsEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
private void updateSuspended(final Game game, final Player controller, final MageObject sourceObject) {
private void updatePermanents(final Game game, final Player controller, final MageObject sourceObject) {
private void executeP(final Game game, final Player controller, final MageObject sourceObject, final List<Permanent> cards) {return;
private void execute(final Game game, final Player controller, final MageObject sourceObject, final List<Card> cards) {return;
private void setText() {
public AddCountersEffect() {
public AddCountersEffect(final DustOfMomentsEffect effect) {
protected boolean shouldRemoveCounters() {return false;
protected String getActionStr() {return "add";
public Effect copy() {return new AddCountersEffect(this);
public RemoveCountersEffect() {
public RemoveCountersEffect(final DustOfMomentsEffect effect) {
protected boolean shouldRemoveCounters() {return true;
protected String getActionStr() {return "remove";
public Effect copy() {return new RemoveCountersEffect(this);
public class EmblemOfTheWarmind extends CardImpl {
public EmblemOfTheWarmind(UUID ownerId) {
public EmblemOfTheWarmind(final EmblemOfTheWarmind card) {
public EmblemOfTheWarmind copy() {return new EmblemOfTheWarmind(this);
public class FlowstoneEmbrace extends CardImpl {
public FlowstoneEmbrace(UUID ownerId) {
public FlowstoneEmbrace(final FlowstoneEmbrace card) {
public FlowstoneEmbrace copy() {return new FlowstoneEmbrace(this);
public class FomoriNomad extends CardImpl {
public FomoriNomad(UUID ownerId) {
public FomoriNomad(final FomoriNomad card) {
public FomoriNomad copy() {return new FomoriNomad(this);
public class ForceOfSavagery extends CardImpl {
public ForceOfSavagery(UUID ownerId) {
public ForceOfSavagery(final ForceOfSavagery card) {
public ForceOfSavagery copy() {return new ForceOfSavagery(this);
public class FrenzySliver extends CardImpl {
public FrenzySliver(UUID ownerId) {
public FrenzySliver(final FrenzySliver card) {
public FrenzySliver copy() {return new FrenzySliver(this);
class FrenzyAbility extends TriggeredAbilityImpl {
public FrenzyAbility() {
public FrenzyAbility(final FrenzyAbility ability) {
public FrenzyAbility copy() {return new FrenzyAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_BLOCKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Frenzy 1. <i>(Whenever this creature attacks and isn't blocked, it gets +1/+0 until end of turn.)</i>";
public class GathanRaiders extends CardImpl {
public GathanRaiders(UUID ownerId) {
public GathanRaiders(final GathanRaiders card) {
public GathanRaiders copy() {return new GathanRaiders(this);
public class GibberingDescent extends CardImpl {
public GibberingDescent(UUID ownerId) {
public GibberingDescent(final GibberingDescent card) {
public GibberingDescent copy() {return new GibberingDescent(this);
GibberingDescentSkipUpkeepEffect() {
GibberingDescentSkipUpkeepEffect(final GibberingDescentSkipUpkeepEffect effect) {
public GibberingDescentSkipUpkeepEffect copy() {return new GibberingDescentSkipUpkeepEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public class GlitteringWish extends CardImpl {
public GlitteringWish(UUID ownerId) {
public GlitteringWish(final GlitteringWish card) {
public GlitteringWish copy() {return new GlitteringWish(this);
class GlitteringWishEffect extends OneShotEffect {
public GlitteringWishEffect() {
public GlitteringWishEffect(final GlitteringWishEffect effect) {
public GlitteringWishEffect copy() {return new GlitteringWishEffect(this);
public boolean apply(Game game, Ability source) {return true;return new GoldmeadowLookout(this);
public class GravePeril extends CardImpl {
public GravePeril(UUID ownerId) {
public GravePeril(final GravePeril card) {
public GravePeril copy() {return new GravePeril(this);
class GravePerilEffect extends OneShotEffect {
GravePerilEffect() {
GravePerilEffect(final GravePerilEffect effect) {
public GravePerilEffect copy() {return new GravePerilEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return false;
public class GraveScrabbler extends CardImpl {
public GraveScrabbler(UUID ownerId) {"When {this} enters the battlefield, if its madness cost was paid, you may return target creature card from a graveyard to its owner's hand."));
public GraveScrabbler(final GraveScrabbler card) {
public Card copy() {return new GraveScrabbler(this);
public class GroveOfTheBurnwillows extends CardImpl {
public GroveOfTheBurnwillows(UUID ownerId) {
public GroveOfTheBurnwillows(final GroveOfTheBurnwillows card) {
public GroveOfTheBurnwillows copy() {return new GroveOfTheBurnwillows(this);
class GroveOfTheBurnwillowsEffect extends OneShotEffect {
GroveOfTheBurnwillowsEffect() {
GroveOfTheBurnwillowsEffect(GroveOfTheBurnwillowsEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public GroveOfTheBurnwillowsEffect copy() {return new GroveOfTheBurnwillowsEffect(this);
public class HazeOfRage extends CardImpl {
public HazeOfRage(UUID ownerId) {
public HazeOfRage(final HazeOfRage card) {
public HazeOfRage copy() {return new HazeOfRage(this);
public class HeartwoodStoryteller extends CardImpl {
public HeartwoodStoryteller(UUID ownerId) {
public HeartwoodStoryteller(final HeartwoodStoryteller card) {
public HeartwoodStoryteller copy() {return new HeartwoodStoryteller(this);
class HeartwoodStorytellerTriggeredAbility extends TriggeredAbilityImpl {
HeartwoodStorytellerTriggeredAbility() {
HeartwoodStorytellerTriggeredAbility(final HeartwoodStorytellerTriggeredAbility ability) {
public HeartwoodStorytellerTriggeredAbility copy() {return new HeartwoodStorytellerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a noncreature spell, each of that player's opponents may draw a card.";
class HeartwoodStorytellerEffect extends OneShotEffect {
HeartwoodStorytellerEffect() {
HeartwoodStorytellerEffect(final HeartwoodStorytellerEffect effect) {
public HeartwoodStorytellerEffect copy() {return new HeartwoodStorytellerEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class HorizonCanopy extends CardImpl {
public HorizonCanopy(UUID ownerId) {
public HorizonCanopy(final HorizonCanopy card) {
public HorizonCanopy copy() {return new HorizonCanopy(this);
public class IchorSlick extends CardImpl {
public IchorSlick(UUID ownerId) {
public IchorSlick(final IchorSlick card) {
public IchorSlick copy() {return new IchorSlick(this);
public class InfiltratorIlKor extends CardImpl {
public InfiltratorIlKor(UUID ownerId) {
public InfiltratorIlKor(final InfiltratorIlKor card) {
public InfiltratorIlKor copy() {return new InfiltratorIlKor(this);
public class InterventionPact extends CardImpl {
public InterventionPact(UUID ownerId) {
public InterventionPact(final InterventionPact card) {
public InterventionPact copy() {return new InterventionPact(this);
class InterventionPactEffect extends OneShotEffect {
public InterventionPactEffect() {
public InterventionPactEffect(final InterventionPactEffect effect) {
public InterventionPactEffect copy() {return new InterventionPactEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class InterventionPactPreventDamageEffect extends PreventionEffectImpl {
public InterventionPactPreventDamageEffect() {
public InterventionPactPreventDamageEffect(final InterventionPactPreventDamageEffect effect) {
public InterventionPactPreventDamageEffect copy() {return new InterventionPactPreventDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class JudgeUnworthy extends CardImpl {
public JudgeUnworthy(UUID ownerId) {
public JudgeUnworthy(final JudgeUnworthy card) {
public JudgeUnworthy copy() {return new JudgeUnworthy(this);
class JudgeUnworthyEffect extends OneShotEffect {
public JudgeUnworthyEffect() {
public JudgeUnworthyEffect(final JudgeUnworthyEffect effect) {
public JudgeUnworthyEffect copy() {return new JudgeUnworthyEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class KavuPrimarch extends CardImpl {
public KavuPrimarch(UUID ownerId) {
public KavuPrimarch(final KavuPrimarch card) {
public KavuPrimarch copy() {return new KavuPrimarch(this);
public class KnightOfSursi extends CardImpl {
public KnightOfSursi(UUID ownerId) {
public KnightOfSursi(final KnightOfSursi card) {
public KnightOfSursi copy() {return new KnightOfSursi(this);
public class KorlashHeirToBlackblade extends CardImpl {
public KorlashHeirToBlackblade(UUID ownerId) {
public KorlashHeirToBlackblade(final KorlashHeirToBlackblade card) {
public KorlashHeirToBlackblade copy() {return new KorlashHeirToBlackblade(this);
public class LeadenFists extends CardImpl {
public LeadenFists(UUID ownerId) {
public LeadenFists(final LeadenFists card) {
public LeadenFists copy() {return new LeadenFists(this);
public class LinessaZephyrMage extends CardImpl {
public LinessaZephyrMage(UUID ownerId) {
public LinessaZephyrMage(final LinessaZephyrMage card) {
public void adjustTargets(Ability ability, Game game) {
public LinessaZephyrMage copy() {return new LinessaZephyrMage(this);
class LinessaZephyrMageEffect extends OneShotEffect {
LinessaZephyrMageEffect() {this.staticText = "Target player returns a creature he or she controls to its owner's hand, then repeats this process for an artifact, an enchantment, and a land";
LinessaZephyrMageEffect(final LinessaZephyrMageEffect effect) {
public LinessaZephyrMageEffect copy() {return new LinessaZephyrMageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LlanowarAugur extends CardImpl {
public LlanowarAugur(UUID ownerId) {
public LlanowarAugur(final LlanowarAugur card) {
public LlanowarAugur copy() {return new LlanowarAugur(this);
public class LlanowarEmpath extends CardImpl {
public LlanowarEmpath(UUID ownerId) {
public LlanowarEmpath(final LlanowarEmpath card) {
public LlanowarEmpath copy() {return new LlanowarEmpath(this);
class LlanowarEmpathEffect extends OneShotEffect {
public LlanowarEmpathEffect() {
public LlanowarEmpathEffect(final LlanowarEmpathEffect effect) {
public LlanowarEmpathEffect copy() {return new LlanowarEmpathEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class LlanowarMentor extends CardImpl {
public LlanowarMentor(UUID ownerId) {
public LlanowarMentor(final LlanowarMentor card) {
public LlanowarMentor copy() {return new LlanowarMentor(this);
class LlanowarElvesToken extends Token {
public LlanowarElvesToken() {
public class LucentLiminid extends CardImpl {
public LucentLiminid(UUID ownerId) {
public LucentLiminid(final LucentLiminid card) {
public LucentLiminid copy() {return new LucentLiminid(this);
public class LumithreadField extends CardImpl {
public LumithreadField(UUID ownerId) {
public LumithreadField(final LumithreadField card) {
public LumithreadField copy() {return new LumithreadField(this);
public class LymphSliver extends CardImpl {
public LymphSliver(UUID ownerId) {
public LymphSliver(final LymphSliver card) {
public LymphSliver copy() {return new LymphSliver(this);
class SliverAbsorbEffect extends PreventionEffectImpl {
public SliverAbsorbEffect() {
public SliverAbsorbEffect(SliverAbsorbEffect effect) {
public SliverAbsorbEffect copy() {return new SliverAbsorbEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getSourceId()) && super.applies(event, source, game);
public class MaelstromDjinn extends CardImpl {
public MaelstromDjinn(UUID ownerId) {
public MaelstromDjinn(final MaelstromDjinn card) {
public MaelstromDjinn copy() {return new MaelstromDjinn(this);
public class MagusOfTheFuture extends CardImpl {
public MagusOfTheFuture(UUID ownerId) {
public MagusOfTheFuture(final MagusOfTheFuture card) {
public MagusOfTheFuture copy() {return new MagusOfTheFuture(this);
public class MarshalingCry extends CardImpl {
public MarshalingCry(UUID ownerId) {
public MarshalingCry(final MarshalingCry card) {
public MarshalingCry copy() {return new MarshalingCry(this);
public class MesmericSliver extends CardImpl {
public MesmericSliver(UUID ownerId) {
public MesmericSliver(final MesmericSliver card) {
public MesmericSliver copy() {return new MesmericSliver(this);
public class MysticSpeculation extends CardImpl {
public MysticSpeculation(UUID ownerId) {
public MysticSpeculation(final MysticSpeculation card) {
public MysticSpeculation copy() {return new MysticSpeculation(this);
public class Narcomoeba extends CardImpl {
public Narcomoeba(UUID ownerId) {
public Narcomoeba(final Narcomoeba card) {
public Narcomoeba copy() {return new Narcomoeba(this);
class NarcomoebaAbility extends ZoneChangeTriggeredAbility {
public NarcomoebaAbility() {
public NarcomoebaAbility(final NarcomoebaAbility ability) {
public NarcomoebaAbility copy() {return new NarcomoebaAbility(this);
public String getRule() {return "When {this} is put into your graveyard from your library, you may put it onto the battlefield.";
public class NessianCourser extends CardImpl {
public NessianCourser(UUID ownerId) {
public NessianCourser(final NessianCourser card) {
public NessianCourser copy() {return new NessianCourser(this);
public class NewBenalia extends CardImpl {
public NewBenalia(UUID ownerId) {
public NewBenalia(final NewBenalia card) {
public NewBenalia copy() {return new NewBenalia(this);
public class Nihilith extends CardImpl {
public Nihilith(UUID ownerId) {
public Nihilith(final Nihilith card) {
public Nihilith copy() {return new Nihilith(this);
public class NimbusMaze extends CardImpl {
public NimbusMaze(UUID ownerId) {
public NimbusMaze(final NimbusMaze card) {
public NimbusMaze copy() {return new NimbusMaze(this);
class FilterPermanentCost extends CostImpl {
public FilterPermanentCost(FilterPermanent filter) {
public FilterPermanentCost(final FilterPermanentCost cost) {
public FilterPermanentCost copy() {return new FilterPermanentCost(this);
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return game.getBattlefield().contains(filter, controllerId, 1, game);
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public class OrissSamiteGuardian extends CardImpl {
public OrissSamiteGuardian(UUID ownerId) {
public OrissSamiteGuardian(final OrissSamiteGuardian card) {
public OrissSamiteGuardian copy() {return new OrissSamiteGuardian(this);
class OrissSamiteGuardianEffect extends OneShotEffect {
public OrissSamiteGuardianEffect() {
public OrissSamiteGuardianEffect(final OrissSamiteGuardianEffect effect) {
public OrissSamiteGuardianEffect copy() {return new OrissSamiteGuardianEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
OrissSamiteGuardianCantCastEffect() {
OrissSamiteGuardianCantCastEffect(final OrissSamiteGuardianCantCastEffect effect) {
public OrissSamiteGuardianCantCastEffect copy() {return new OrissSamiteGuardianCantCastEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return player != null && player.getId().equals(event.getPlayerId());
public class PactOfNegation extends CardImpl {
public PactOfNegation(UUID ownerId) {
public PactOfNegation(final PactOfNegation card) {
public PactOfNegation copy() {return new PactOfNegation(this);
public class PactOfTheTitan extends CardImpl {
public PactOfTheTitan(UUID ownerId) {
public PactOfTheTitan(final PactOfTheTitan card) {
public PactOfTheTitan copy() {return new PactOfTheTitan(this);
class GiantToken extends Token {
public GiantToken() {
public class PatriciansScorn extends CardImpl {
public PatriciansScorn(UUID ownerId) {
public PatriciansScorn(final PatriciansScorn card) {
public PatriciansScorn copy() {return new PatriciansScorn(this);
class CastWhiteSpellThisTurnCondition implements Condition {
public boolean apply(Game game, Ability source) {return watcher.conditionMet();return false;
public String toString() {return "If you've cast another white spell this turn";
class PatriciansScornWatcher extends Watcher {
public PatriciansScornWatcher() {
public PatriciansScornWatcher(final PatriciansScornWatcher watcher) {
public PatriciansScornWatcher copy() {return new PatriciansScornWatcher(this);
public void watch(GameEvent event, Game game) {return new PetrifiedPlating(this);
public class PoolingVenom extends CardImpl {
public PoolingVenom(UUID ownerId) {
public PoolingVenom(final PoolingVenom card) {
public PoolingVenom copy() {return new PoolingVenom(this);
public class Quagnoth extends CardImpl {
public Quagnoth(UUID ownerId) {
public Quagnoth(final Quagnoth card) {
public Quagnoth copy() {return new Quagnoth(this);
class QuagnothTriggeredAbility extends TriggeredAbilityImpl {
QuagnothTriggeredAbility() {
QuagnothTriggeredAbility(final QuagnothTriggeredAbility ability) {
public QuagnothTriggeredAbility copy() {return new QuagnothTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(this.getControllerId()).contains(stackObject.getControllerId());return false;
public String getRule() {return "When a spell or ability an opponent controls causes you to discard {this}, " + super.getRule();
public class RamosianRevivalist extends CardImpl {
public RamosianRevivalist(UUID ownerId) {
public RamosianRevivalist(final RamosianRevivalist card) {
public RamosianRevivalist copy() {return new RamosianRevivalist(this);return new RavagingRiftwurm(this);
public class RiverOfTears extends CardImpl {
public RiverOfTears(UUID ownerId) {
public RiverOfTears(final RiverOfTears card) {
public RiverOfTears copy() {return new RiverOfTears(this);
public class ScoutsWarning extends CardImpl {
public ScoutsWarning(UUID ownerId) {
public ScoutsWarning(final ScoutsWarning card) {
public ScoutsWarning copy() {return new ScoutsWarning(this);
class ScoutsWarningAsThoughEffect extends AsThoughEffectImpl {
public ScoutsWarningAsThoughEffect() {
public ScoutsWarningAsThoughEffect(final ScoutsWarningAsThoughEffect effect) {
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public ScoutsWarningAsThoughEffect copy() {return new ScoutsWarningAsThoughEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
class ScoutsWarningWatcher extends Watcher {
public ScoutsWarningWatcher() {
public ScoutsWarningWatcher(final ScoutsWarningWatcher watcher) {
public ScoutsWarningWatcher copy() {return new ScoutsWarningWatcher(this);
public void watch(GameEvent event, Game game) {
public void addScoutsWarningSpell(UUID sourceId, int zoneChangeCounter) {
public boolean isScoutsWarningSpellActive(UUID sourceId, int zoneChangeCounter) {return activeScoutsWarningSpells.contains(spellKey);
public void reset() {
public class SecondWind extends CardImpl {
public SecondWind(UUID ownerId) {
public SecondWind(final SecondWind card) {
public SecondWind copy() {return new SecondWind(this);
public class SkirkRidgeExhumer extends CardImpl {
public SkirkRidgeExhumer(UUID ownerId) {
public SkirkRidgeExhumer(final SkirkRidgeExhumer card) {
public SkirkRidgeExhumer copy() {return new SkirkRidgeExhumer(this);
class FesteringGoblinToken extends Token {
public FesteringGoblinToken() {
public class SkizzikSurger extends CardImpl {
public SkizzikSurger(UUID ownerId) {
public SkizzikSurger(final SkizzikSurger card) {
public SkizzikSurger copy() {return new SkizzikSurger(this);
public class SlaughterPact extends CardImpl {
public SlaughterPact(UUID ownerId) {
public SlaughterPact(final SlaughterPact card) {
public SlaughterPact copy() {return new SlaughterPact(this);
public class SliverLegion extends CardImpl {
public SliverLegion(UUID ownerId) {
public SliverLegion(final SliverLegion card) {
public SliverLegion copy() {return new SliverLegion(this);
public class Sliversmith extends CardImpl {
public Sliversmith(UUID ownerId) {
public Sliversmith(final Sliversmith card) {
public Sliversmith copy() {return new Sliversmith(this);
class SliversmithToken extends Token {
SliversmithToken() {
public class SnakeCultInitiation extends CardImpl {
public SnakeCultInitiation(UUID ownerId) {
public SnakeCultInitiation(final SnakeCultInitiation card) {
public SnakeCultInitiation copy() {return new SnakeCultInitiation(this);
public class SoultetherGolem extends CardImpl {
public SoultetherGolem(UUID ownerId) {
public SoultetherGolem(final SoultetherGolem card) {
public SoultetherGolem copy() {return new SoultetherGolem(this);
public class Sparkspitter extends CardImpl {
public Sparkspitter(UUID ownerId) {
public Sparkspitter(final Sparkspitter card) {
public Sparkspitter copy() {return new Sparkspitter(this);
class SparkElementalToken extends Token {
public SparkElementalToken() {
public class SpiritEnDal extends CardImpl {
public SpiritEnDal(UUID ownerId) {
public SpiritEnDal(final SpiritEnDal card) {
public SpiritEnDal copy() {return new SpiritEnDal(this);
public class SproutSwarm extends CardImpl {
public SproutSwarm(UUID ownerId) {
public SproutSwarm(final SproutSwarm card) {
public SproutSwarm copy() {return new SproutSwarm(this);
public class StreetWraith extends CardImpl {
public StreetWraith(UUID ownerId) {
public StreetWraith(final StreetWraith card) {
public StreetWraith copy() {return new StreetWraith(this);
public class StrongholdRats extends CardImpl {
public StrongholdRats(UUID ownerId) {
public StrongholdRats(final StrongholdRats card) {
public StrongholdRats copy() {return new StrongholdRats(this);
public class SummonersPact extends CardImpl {
public SummonersPact(UUID ownerId) {
public SummonersPact(final SummonersPact card) {
public SummonersPact copy() {return new SummonersPact(this);
public class SwordOfTheMeek extends CardImpl {
public SwordOfTheMeek(UUID ownerId) {
public SwordOfTheMeek(final SwordOfTheMeek card) {
public SwordOfTheMeek copy() {return new SwordOfTheMeek(this);
class SwordOfTheMeekEffect extends OneShotEffect {
public SwordOfTheMeekEffect() {this.staticText = "you may return {this} from your graveyard to the battlefield, then attach it to that creature";
public SwordOfTheMeekEffect(final SwordOfTheMeekEffect effect) {
public SwordOfTheMeekEffect copy() {return new SwordOfTheMeekEffect(this);
public boolean apply(Game game, Ability source) {return permanent.addAttachment(equipment.getId(), game);return false;
public class Tarmogoyf extends CardImpl {
public Tarmogoyf(UUID ownerId) {
public Tarmogoyf(final Tarmogoyf card) {
public Tarmogoyf copy() {return new Tarmogoyf(this);
class TarmogoyfEffect extends ContinuousEffectImpl {
public TarmogoyfEffect() {
public TarmogoyfEffect(final TarmogoyfEffect effect) {
public TarmogoyfEffect copy() {return new TarmogoyfEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TaroxBladewing extends CardImpl {
public TaroxBladewing(UUID ownerId) {
public TaroxBladewing(final TaroxBladewing card) {
public TaroxBladewing copy() {return new TaroxBladewing(this);
public class UnblinkingBleb extends CardImpl {
public UnblinkingBleb(UUID ownerId) {
public UnblinkingBleb(final UnblinkingBleb card) {
public UnblinkingBleb copy() {return new UnblinkingBleb(this);
public class UtopiaMycon extends CardImpl {
public UtopiaMycon(UUID ownerId) {
public UtopiaMycon(final UtopiaMycon card) {
public UtopiaMycon copy() {return new UtopiaMycon(this);
public class VedalkenAEthermage extends CardImpl {
public VedalkenAEthermage(UUID ownerId) {
public VedalkenAEthermage(final VedalkenAEthermage card) {
public VedalkenAEthermage copy() {return new VedalkenAEthermage(this);
public class VeilstoneAmulet extends CardImpl {
public VeilstoneAmulet(UUID ownerId) {
public VeilstoneAmulet(final VeilstoneAmulet card) {
public VeilstoneAmulet copy() {return new VeilstoneAmulet(this);
public VeilstoneAmuletEffect() {
public VeilstoneAmuletEffect(final VeilstoneAmuletEffect effect) {
public VeilstoneAmuletEffect copy() {return new VeilstoneAmuletEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGET;
public boolean applies(GameEvent event, Ability ability, Game game) {return true;return false;
public class VenserShaperSavant extends CardImpl {
public VenserShaperSavant(UUID ownerId) {
public VenserShaperSavant(final VenserShaperSavant card) {
public VenserShaperSavant copy() {return new VenserShaperSavant(this);
public class VirulentSliver extends CardImpl {
public VirulentSliver(UUID ownerId) {
public VirulentSliver(final VirulentSliver card) {
public VirulentSliver copy() {return new VirulentSliver(this);
public class Whetwheel extends CardImpl {
public Whetwheel(UUID ownerId) {
public Whetwheel(final Whetwheel card) {
public Whetwheel copy() {return new Whetwheel(this);
public class WhipSpineDrake extends CardImpl {
public WhipSpineDrake(UUID ownerId) {
public WhipSpineDrake(final WhipSpineDrake card) {
public WhipSpineDrake copy() {return new WhipSpineDrake(this);
public class WitchsMist extends CardImpl {
public WitchsMist(UUID ownerId) {
public WitchsMist(final WitchsMist card) {
public WitchsMist copy() {return new WitchsMist(this);
public class YixlidJailer extends CardImpl {
public YixlidJailer(UUID ownerId) {
public YixlidJailer(final YixlidJailer card) {
public YixlidJailer copy() {return new YixlidJailer(this);
class YixlidJailerEffect extends ContinuousEffectImpl {
YixlidJailerEffect() {
YixlidJailerEffect(final YixlidJailerEffect effect) {
public YixlidJailerEffect copy() {return new YixlidJailerEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {
public class ScaleguardSentinels extends CardImpl {
public ScaleguardSentinels(UUID ownerId) {
public void adjustCosts(Ability ability, Game game) {
public ScaleguardSentinels(final ScaleguardSentinels card) {
public ScaleguardSentinels copy() {return new ScaleguardSentinels(this);
class ScaleguardSentinelsCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return (watcher != null && watcher.castWithConditionTrue(sourcePermanent.getSpellAbility().getId()));return false;
public class ThunderbreakRegent extends CardImpl {
public ThunderbreakRegent(UUID ownerId) {
public ThunderbreakRegent(final ThunderbreakRegent card) {
public ThunderbreakRegent copy() {return new ThunderbreakRegent(this);
class ThunderbreakRegentTriggeredAbility extends TriggeredAbilityImpl {
public ThunderbreakRegentTriggeredAbility(Effect effect) {
public ThunderbreakRegentTriggeredAbility(final ThunderbreakRegentTriggeredAbility ability) {
public ThunderbreakRegentTriggeredAbility copy() {return new ThunderbreakRegentTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Dragon you control becomes the target of a spell or ability your opponent controls, {this} deals 3 damage to that player.";
public class AdaptiveSnapjaw extends CardImpl {
public AdaptiveSnapjaw(UUID ownerId) {
public AdaptiveSnapjaw(final AdaptiveSnapjaw card) {
public AdaptiveSnapjaw copy() {return new AdaptiveSnapjaw(this);
public class AerialManeuver extends CardImpl {
public AerialManeuver(UUID ownerId) {
public AerialManeuver(final AerialManeuver card) {
public AerialManeuver copy() {return new AerialManeuver(this);
public class AEtherize extends CardImpl {
public AEtherize(UUID ownerId) {
public AEtherize(final AEtherize card) {
public AEtherize copy() {return new AEtherize(this);
public class Agoraphobia extends CardImpl {
public Agoraphobia(UUID ownerId) {
public Agoraphobia(final Agoraphobia card) {
public Agoraphobia copy() {return new Agoraphobia(this);
public class AlmsBeast extends CardImpl {
public AlmsBeast(UUID ownerId) {
public AlmsBeast(final AlmsBeast card) {
public AlmsBeast copy() {return new AlmsBeast(this);
public class AlphaAuthority extends CardImpl {
public AlphaAuthority(UUID ownerId) {
public AlphaAuthority(final AlphaAuthority card) {
public AlphaAuthority copy() {return new AlphaAuthority(this);
class CantBeBlockedByMoreThanOneAttachedEffect extends ContinuousEffectImpl {
public CantBeBlockedByMoreThanOneAttachedEffect(AttachmentType attachmentType, int amount) {
public CantBeBlockedByMoreThanOneAttachedEffect(AttachmentType attachmentType, int amount, Duration duration) {
public CantBeBlockedByMoreThanOneAttachedEffect(final CantBeBlockedByMoreThanOneAttachedEffect effect) {
public CantBeBlockedByMoreThanOneAttachedEffect copy() {return new CantBeBlockedByMoreThanOneAttachedEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class ArmoredTransport extends CardImpl {
public ArmoredTransport(UUID ownerId) {
public ArmoredTransport(final ArmoredTransport card) {
public ArmoredTransport copy() {return new ArmoredTransport(this);
class ArmoredTransportPreventCombatDamageSourceEffect extends PreventionEffectImpl {
public ArmoredTransportPreventCombatDamageSourceEffect(Duration duration) {
public ArmoredTransportPreventCombatDamageSourceEffect(final ArmoredTransportPreventCombatDamageSourceEffect effect) {
public ArmoredTransportPreventCombatDamageSourceEffect copy() {return new ArmoredTransportPreventCombatDamageSourceEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class ArrowsOfJustice extends CardImpl {
public ArrowsOfJustice(UUID ownerId) {
public ArrowsOfJustice(final ArrowsOfJustice card) {
public ArrowsOfJustice copy() {return new ArrowsOfJustice(this);
public class AssembleTheLegion extends CardImpl {
public AssembleTheLegion(UUID ownerId) {
public AssembleTheLegion(final AssembleTheLegion card) {
public AssembleTheLegion copy() {return new AssembleTheLegion(this);
public class AureliasFury extends CardImpl {
public AureliasFury(UUID ownerId) {
public AureliasFury(final AureliasFury card) {
public AureliasFury copy() {return new AureliasFury(this);
class AureliasFuryEffect extends OneShotEffect {
public AureliasFuryEffect() {
public AureliasFuryEffect(final AureliasFuryEffect effect) {
public AureliasFuryEffect copy() {return new AureliasFuryEffect(this);
public boolean apply(Game game, Ability source) {return false;
public AureliasFuryCantCastEffect() {
public AureliasFuryCantCastEffect(final AureliasFuryCantCastEffect effect) {
public AureliasFuryCantCastEffect copy() {return new AureliasFuryCantCastEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast noncreature spells this turn (you were dealt damage by " + mageObject.getLogName() + ")";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
class AureliasFuryDamagedByWatcher extends Watcher {
public AureliasFuryDamagedByWatcher() {
public AureliasFuryDamagedByWatcher(final AureliasFuryDamagedByWatcher watcher) {
public AureliasFuryDamagedByWatcher copy() {return new AureliasFuryDamagedByWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
public class AureliaTheWarleader extends CardImpl {
public AureliaTheWarleader(UUID ownerId) {
public AureliaTheWarleader(final AureliaTheWarleader card) {
public AureliaTheWarleader copy() {return new AureliaTheWarleader(this);
class AureliaAttacksTriggeredAbility extends TriggeredAbilityImpl {
public AureliaAttacksTriggeredAbility(Effect effect, boolean optional) {
public AureliaAttacksTriggeredAbility(Effect effect, boolean optional, String text) {
public AureliaAttacksTriggeredAbility(final AureliaAttacksTriggeredAbility ability) {
public void reset(Game game) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
protected String getValueKey(Card sourceCard, Game game) {return "";return new StringBuilder(this.getId().toString()).append(sourceCard.getZoneChangeCounter(game)).append("amountAttacks").toString();
public String getRule() {return "Whenever {this} attacks for the first time each turn, " + super.getRule();return text;
public AureliaAttacksTriggeredAbility copy() {return new AureliaAttacksTriggeredAbility(this);
class AdditionalCombatPhaseEffect extends OneShotEffect {
public AdditionalCombatPhaseEffect() {
public AdditionalCombatPhaseEffect(final AdditionalCombatPhaseEffect effect) {
public AdditionalCombatPhaseEffect copy() {return new AdditionalCombatPhaseEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class BalustradeSpy extends CardImpl {
public BalustradeSpy(UUID ownerId) {
public BalustradeSpy(final BalustradeSpy card) {
public BalustradeSpy copy() {return new BalustradeSpy(this);
class BalustradeSpyEffect extends OneShotEffect {
public BalustradeSpyEffect() {
public BalustradeSpyEffect(final BalustradeSpyEffect effect) {
public BalustradeSpyEffect copy() {return new BalustradeSpyEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;
public class BaneAlleyBroker extends CardImpl {
public BaneAlleyBroker(UUID ownerId) {
public BaneAlleyBroker(final BaneAlleyBroker card) {
public BaneAlleyBroker copy() {return new BaneAlleyBroker(this);
class BaneAlleyBrokerDrawExileEffect extends OneShotEffect {
public BaneAlleyBrokerDrawExileEffect() {
public BaneAlleyBrokerDrawExileEffect(final BaneAlleyBrokerDrawExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BaneAlleyBrokerDrawExileEffect copy() {return new BaneAlleyBrokerDrawExileEffect(this);
class TargetCardInBaneAlleyBrokerExile extends TargetCard {
public TargetCardInBaneAlleyBrokerExile(UUID CardId) {
public TargetCardInBaneAlleyBrokerExile(final TargetCardInBaneAlleyBrokerExile target) {
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {return true;return false;
public boolean canTarget(UUID id, Ability source, Game game) {return filter.match(card, source.getControllerId(), game);return false;
public TargetCardInBaneAlleyBrokerExile copy() {return new TargetCardInBaneAlleyBrokerExile(this);
class BaneAlleyBrokerLookAtCardEffect extends AsThoughEffectImpl {
public BaneAlleyBrokerLookAtCardEffect() {
public BaneAlleyBrokerLookAtCardEffect(final BaneAlleyBrokerLookAtCardEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public BaneAlleyBrokerLookAtCardEffect copy() {return new BaneAlleyBrokerLookAtCardEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return false;return exile != null && exile.contains(objectId);return false;
public class BasilicaGuards extends CardImpl {
public BasilicaGuards(UUID ownerId) {
public BasilicaGuards(final BasilicaGuards card) {
public BasilicaGuards copy() {return new BasilicaGuards(this);
public class BasilicaScreecher extends CardImpl {
public BasilicaScreecher(UUID ownerId) {
public BasilicaScreecher(final BasilicaScreecher card) {
public BasilicaScreecher copy() {return new BasilicaScreecher(this);
public class BiomassMutation extends CardImpl {
public BiomassMutation(UUID ownerId) {
public BiomassMutation(final BiomassMutation card) {
public BiomassMutation copy() {return new BiomassMutation(this);return new Bioshift(this);
class MoveCounterFromTargetToTargetEffect extends OneShotEffect {
public MoveCounterFromTargetToTargetEffect() {
public MoveCounterFromTargetToTargetEffect(final MoveCounterFromTargetToTargetEffect effect) {
public MoveCounterFromTargetToTargetEffect copy() {return new MoveCounterFromTargetToTargetEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return super.canTarget(controllerId, id, source, game);return false;return new BioshiftSecondTargetCreaturePermanent(this);
public class Biovisionary extends CardImpl {
public Biovisionary(UUID ownerId) {
public Biovisionary(final Biovisionary card) {
public Biovisionary copy() {return new Biovisionary(this);
public class BlindObedience extends CardImpl {
public BlindObedience(UUID ownerId) {
public BlindObedience(final BlindObedience card) {
public BlindObedience copy() {return new BlindObedience(this);
class BlindObedienceTapEffect extends ReplacementEffectImpl {
BlindObedienceTapEffect() {
BlindObedienceTapEffect(final BlindObedienceTapEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public BlindObedienceTapEffect copy() {return new BlindObedienceTapEffect(this);
public class BomberCorps extends CardImpl {
public BomberCorps(UUID ownerId) {
public BomberCorps(final BomberCorps card) {
public BomberCorps copy() {return new BomberCorps(this);
public class BorborygmosEnraged extends CardImpl {
public BorborygmosEnraged(UUID ownerId) {
public BorborygmosEnraged(final BorborygmosEnraged card) {
public BorborygmosEnraged copy() {return new BorborygmosEnraged(this);
class BorborygmosEnragedEffect extends OneShotEffect {
public BorborygmosEnragedEffect() {
public BorborygmosEnragedEffect(final BorborygmosEnragedEffect effect) {
public BorborygmosEnragedEffect copy() {return new BorborygmosEnragedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BorosCharm extends CardImpl {
public BorosCharm (UUID ownerId) {
public BorosCharm(final BorosCharm card) {
public BorosCharm copy() {return new BorosCharm(this);
public class BorosElite extends CardImpl {
public BorosElite(UUID ownerId) {
public BorosElite(final BorosElite card) {
public BorosElite copy() {return new BorosElite(this);
public class BorosGuildgate extends CardImpl {
public BorosGuildgate(UUID ownerId) {
public BorosGuildgate(final BorosGuildgate card) {
public BorosGuildgate copy() {return new BorosGuildgate(this);
public class BurningTreeEmissary extends CardImpl {
public BurningTreeEmissary(UUID ownerId) {
public BurningTreeEmissary(final BurningTreeEmissary card) {
public BurningTreeEmissary copy() {return new BurningTreeEmissary(this);
public class BurstOfStrength extends CardImpl {
public BurstOfStrength(UUID ownerId) {
public BurstOfStrength(final BurstOfStrength card) {
public BurstOfStrength copy() {return new BurstOfStrength(this);
public class CallOfTheNightwing extends CardImpl {
public CallOfTheNightwing(UUID ownerId) {
public CallOfTheNightwing(final CallOfTheNightwing card) {
public CallOfTheNightwing copy() {return new CallOfTheNightwing(this);
class NightwingHorrorToken extends Token {
NightwingHorrorToken() {
public class CartelAristocrat extends CardImpl {
public CartelAristocrat(UUID ownerId) {
public CartelAristocrat(final CartelAristocrat card) {
public CartelAristocrat copy() {return new CartelAristocrat(this);
public class CinderElemental extends CardImpl {
public CinderElemental(UUID ownerId) {
public CinderElemental(final CinderElemental card) {
public CinderElemental copy() {return new CinderElemental(this);
public class ClanDefiance extends CardImpl {
public ClanDefiance(UUID ownerId) {
public ClanDefiance(final ClanDefiance card) {
public ClanDefiance copy() {return new ClanDefiance(this);
public class ClingingAnemones extends CardImpl {
public ClingingAnemones(UUID ownerId) {
public ClingingAnemones(final ClingingAnemones card) {
public ClingingAnemones copy() {return new ClingingAnemones(this);
public class CloudfinRaptor extends CardImpl {
public CloudfinRaptor(UUID ownerId) {
public CloudfinRaptor(final CloudfinRaptor card) {
public CloudfinRaptor copy() {return new CloudfinRaptor(this);
public class CoercedConfession extends CardImpl {
public CoercedConfession(UUID ownerId) {
public CoercedConfession(final CoercedConfession card) {
public CoercedConfession copy() {return new CoercedConfession(this);
class CoercedConfessionMillEffect extends OneShotEffect {
public CoercedConfessionMillEffect() {
public CoercedConfessionMillEffect(final CoercedConfessionMillEffect effect) {
public CoercedConfessionMillEffect copy() {return new CoercedConfessionMillEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ConsumingAberration extends CardImpl {
public ConsumingAberration(UUID ownerId) {
public ConsumingAberration(final ConsumingAberration card) {
public ConsumingAberration copy() {return new ConsumingAberration(this);
class ConsumingAberrationEffect extends OneShotEffect {
public ConsumingAberrationEffect() {
public ConsumingAberrationEffect(final ConsumingAberrationEffect effect) {
public ConsumingAberrationEffect copy() {return new ConsumingAberrationEffect(this);
public boolean apply(Game game, Ability source) {return true;
class CardsInOpponentsGraveyardsCount implements DynamicValue {
public CardsInOpponentsGraveyardsCount(){
public CardsInOpponentsGraveyardsCount(DynamicValue count){
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amount;
public DynamicValue copy() {return new CardsInOpponentsGraveyardsCount(this);
public String toString() {return "1";
public String getMessage() {return "cards in your opponents' graveyards";
public class CorpseBlockade extends CardImpl {
public CorpseBlockade(UUID ownerId) {
public CorpseBlockade(final CorpseBlockade card) {
public CorpseBlockade copy() {return new CorpseBlockade(this);
public class CourtStreetDenizen extends CardImpl {
public CourtStreetDenizen(UUID ownerId) {
public CourtStreetDenizen(final CourtStreetDenizen card) {
public CourtStreetDenizen copy() {return new CourtStreetDenizen(this);
public class CracklingPerimeter extends CardImpl {
public CracklingPerimeter(UUID ownerId) {
public CracklingPerimeter(final CracklingPerimeter card) {
public CracklingPerimeter copy() {return new CracklingPerimeter(this);
public class Crocanura extends CardImpl {
public Crocanura(UUID ownerId) {
public Crocanura(final Crocanura card) {
public Crocanura copy() {return new Crocanura(this);
public class CrownedCeratok extends CardImpl {
public CrownedCeratok(UUID ownerId) {
public CrownedCeratok(final CrownedCeratok card) {
public CrownedCeratok copy() {return new CrownedCeratok(this);
public class CryptGhast extends CardImpl {
public CryptGhast(UUID ownerId) {
public CryptGhast(final CryptGhast card) {
public CryptGhast copy() {return new CryptGhast(this);
class CryptGhastTriggeredAbility extends TriggeredManaAbility {
public CryptGhastTriggeredAbility() {
public CryptGhastTriggeredAbility(CryptGhastTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return land != null && filter.match(land, this.getSourceId(), this.getControllerId(), game);
public CryptGhastTriggeredAbility copy() {return new CryptGhastTriggeredAbility(this);
public String getRule() {return "Whenever you tap a Swamp for mana, add {B} to your mana pool <i>(in addition to the mana the land produces)</i>.";
public class DaringSkyjek extends CardImpl {
public DaringSkyjek(UUID ownerId) {
public DaringSkyjek(final DaringSkyjek card) {
public DaringSkyjek copy() {return new DaringSkyjek(this);
public class DeathcultRogue extends CardImpl {
public DeathcultRogue(UUID ownerId) {
public DeathcultRogue(final DeathcultRogue card) {
public DeathcultRogue copy() {return new DeathcultRogue(this);
class DeathcultRogueRestrictionEffect extends RestrictionEffect {
public DeathcultRogueRestrictionEffect() {
public DeathcultRogueRestrictionEffect(final DeathcultRogueRestrictionEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return true;return false;
public DeathcultRogueRestrictionEffect copy() {return new DeathcultRogueRestrictionEffect(this);
public class DebtorsPulpit extends CardImpl {
public DebtorsPulpit(UUID ownerId) {
public DebtorsPulpit(final DebtorsPulpit card) {
public DebtorsPulpit copy() {return new DebtorsPulpit(this);
public class DevourFlesh extends CardImpl {
public DevourFlesh (UUID ownerId) {
public DevourFlesh(final DevourFlesh card) {
public DevourFlesh copy() {return new DevourFlesh(this);return new DevourFleshSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class DiluvianPrimordial extends CardImpl {
public DiluvianPrimordial(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public DiluvianPrimordial(final DiluvianPrimordial card) {
public DiluvianPrimordial copy() {return new DiluvianPrimordial(this);
class DiluvianPrimordialEffect extends OneShotEffect {
public DiluvianPrimordialEffect() {
public DiluvianPrimordialEffect(final DiluvianPrimordialEffect effect) {
public DiluvianPrimordialEffect copy() {return new DiluvianPrimordialEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DiluvianPrimordialReplacementEffect extends ReplacementEffectImpl {
public DiluvianPrimordialReplacementEffect() {
public DiluvianPrimordialReplacementEffect(final DiluvianPrimordialReplacementEffect effect) {
public DiluvianPrimordialReplacementEffect copy() {return new DiluvianPrimordialReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return zEvent.getToZone() == Zone.GRAVEYARD
public class DimirCharm extends CardImpl {
public DimirCharm (UUID ownerId) {
public DimirCharm(final DimirCharm card) {
public DimirCharm copy() {return new DimirCharm(this);
class DimirCharmEffect extends OneShotEffect {
public DimirCharmEffect() {
public DimirCharmEffect(final DimirCharmEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public DimirCharmEffect copy() {return new DimirCharmEffect(this);
public String getText(Mode mode) {return "look at the top three cards of target player's library, then put one back and the rest into that player's graveyard";
public class DimirGuildgate extends CardImpl {
public DimirGuildgate(UUID ownerId) {
public DimirGuildgate(final DimirGuildgate card) {
public DimirGuildgate copy() {return new DimirGuildgate(this);
public class DimirKeyrune extends CardImpl {
public DimirKeyrune(UUID ownerId) {
public DimirKeyrune(final DimirKeyrune card) {
public DimirKeyrune copy() {return new DimirKeyrune(this);
private class DimirKeyruneToken extends Token {
DimirKeyruneToken() {
public class DinrovaHorror extends CardImpl {
public DinrovaHorror(UUID ownerId) {
public DinrovaHorror(final DinrovaHorror card) {
public DinrovaHorror copy() {return new DinrovaHorror(this);
class DinrovaHorrorEffect extends OneShotEffect {
public DinrovaHorrorEffect() {this.staticText = "return target permanent to its owner's hand, then that player discards a card";
public DinrovaHorrorEffect(final DinrovaHorrorEffect effect) {
public DinrovaHorrorEffect copy() {return new DinrovaHorrorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DiscipleOfTheOldWays extends CardImpl {
public DiscipleOfTheOldWays(UUID ownerId) {
public DiscipleOfTheOldWays(final DiscipleOfTheOldWays card) {
public DiscipleOfTheOldWays copy() {return new DiscipleOfTheOldWays(this);
public class DomriRade extends CardImpl {
public DomriRade(UUID ownerId) {
public DomriRade(final DomriRade card) {
public DomriRade copy() {return new DomriRade(this);
class DomriRadeEffect1 extends OneShotEffect {
public DomriRadeEffect1() {
public DomriRadeEffect1(final DomriRadeEffect1 effect) {
public DomriRadeEffect1 copy() {return new DomriRadeEffect1(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DomriRadeEmblem extends Emblem {
public DomriRadeEmblem() {
class DomriRadeTargetOtherCreaturePermanent extends TargetCreaturePermanent {
public DomriRadeTargetOtherCreaturePermanent() {
public DomriRadeTargetOtherCreaturePermanent(final DomriRadeTargetOtherCreaturePermanent target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return false;return super.canTarget(controllerId, id, source, game);
public DomriRadeTargetOtherCreaturePermanent copy() {return new DomriRadeTargetOtherCreaturePermanent(this);
public class DrakewingKrasis extends CardImpl {
public DrakewingKrasis(UUID ownerId) {
public DrakewingKrasis(final DrakewingKrasis card) {
public DrakewingKrasis copy() {return new DrakewingKrasis(this);
public class DuskmantleGuildmage extends CardImpl {
public DuskmantleGuildmage(UUID ownerId) {
public DuskmantleGuildmage(final DuskmantleGuildmage card) {
public DuskmantleGuildmage copy() {return new DuskmantleGuildmage(this);
class CardPutIntoOpponentGraveThisTurn extends DelayedTriggeredAbility {
public CardPutIntoOpponentGraveThisTurn() {
public CardPutIntoOpponentGraveThisTurn(final CardPutIntoOpponentGraveThisTurn ability) {
public CardPutIntoOpponentGraveThisTurn copy() {return new CardPutIntoOpponentGraveThisTurn(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a card is put into an opponent's graveyard from anywhere this turn, that player loses 1 life";
public class DuskmantleSeer extends CardImpl {
public DuskmantleSeer(UUID ownerId) {
public DuskmantleSeer(final DuskmantleSeer card) {
public DuskmantleSeer copy() {return new DuskmantleSeer(this);
class DuskmantleSeerEffect extends OneShotEffect {
public DuskmantleSeerEffect() {
public DuskmantleSeerEffect(final DuskmantleSeerEffect effect) {
public DuskmantleSeerEffect copy() {return new DuskmantleSeerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return new DutifulThrull(this);
public class DyingWish extends CardImpl {
public DyingWish(UUID ownerId) {
public DyingWish(final DyingWish card) {
public DyingWish copy() {return new DyingWish(this);
class DyingWishAttachedPermanentPowerCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return attached.getPower().getValue();return 0;
public DynamicValue copy() {return new DyingWishAttachedPermanentPowerCount();
public String toString() {return "X";
public String getMessage() {return "its power";
public class ElusiveKrasis extends CardImpl {
public ElusiveKrasis(UUID ownerId) {
public ElusiveKrasis(final ElusiveKrasis card) {
public ElusiveKrasis copy() {return new ElusiveKrasis(this);
public class EmberBeast extends CardImpl {
public EmberBeast(UUID ownerId) {
public EmberBeast(final EmberBeast card) {
public EmberBeast copy() {return new EmberBeast(this);
public class EnterTheInfinite extends CardImpl {
public EnterTheInfinite(UUID ownerId) {
public EnterTheInfinite(final EnterTheInfinite card) {
public EnterTheInfinite copy() {return new EnterTheInfinite(this);
class CardsInControllerLibraryCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return controller.getLibrary().size();return 0;
public DynamicValue copy() {return new CardsInControllerLibraryCount();
public String getMessage() {return "card in your library";
public String toString() {return "1";
class PutCardOnLibraryEffect extends OneShotEffect {
public PutCardOnLibraryEffect() {
public PutCardOnLibraryEffect(final PutCardOnLibraryEffect effect) {
public PutCardOnLibraryEffect copy() {return new PutCardOnLibraryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MaximumHandSizeEffect extends MaximumHandSizeControllerEffect {
public MaximumHandSizeEffect() {
public MaximumHandSizeEffect(final MaximumHandSizeEffect effect) {
public boolean isInactive(Ability source, Game game) {return true;return false;
public MaximumHandSizeEffect copy() {return new MaximumHandSizeEffect(this);
public class ExecutionersSwing extends CardImpl {
public ExecutionersSwing(UUID ownerId) {
public ExecutionersSwing(final ExecutionersSwing card) {
public ExecutionersSwing copy() {return new ExecutionersSwing(this);
class TargetCreaturePermanentThatDealtDamageThisTurn extends TargetPermanent {
public TargetCreaturePermanentThatDealtDamageThisTurn() {
public TargetCreaturePermanentThatDealtDamageThisTurn(final TargetCreaturePermanentThatDealtDamageThisTurn target) {
public boolean canTarget(UUID id, Ability source, Game game) {return super.canTarget(id, source, game);return false;
public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {return true;return true;return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public TargetCreaturePermanentThatDealtDamageThisTurn copy() {return new TargetCreaturePermanentThatDealtDamageThisTurn(this);
public class FirefistStriker extends CardImpl {
public FirefistStriker(UUID ownerId) {
public FirefistStriker(final FirefistStriker card) {
public FirefistStriker copy() {return new FirefistStriker(this);
public class FiremaneAvenger extends CardImpl {
public FiremaneAvenger(UUID ownerId) {
public FiremaneAvenger(final FiremaneAvenger card) {
public FiremaneAvenger copy() {return new FiremaneAvenger(this);
public class FiveAlarmFire extends CardImpl {
public FiveAlarmFire(UUID ownerId) {
public FiveAlarmFire(final FiveAlarmFire card) {
public FiveAlarmFire copy() {return new FiveAlarmFire(this);
class FiveAlarmFireTriggeredAbility extends TriggeredAbilityImpl {
public FiveAlarmFireTriggeredAbility() {
public FiveAlarmFireTriggeredAbility(final FiveAlarmFireTriggeredAbility ability) {
public FiveAlarmFireTriggeredAbility copy() {return new FiveAlarmFireTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control deals combat damage, " + super.getRule();
public class ForcedAdaptation extends CardImpl {
public ForcedAdaptation(UUID ownerId) {
public ForcedAdaptation(final ForcedAdaptation card) {
public ForcedAdaptation copy() {return new ForcedAdaptation(this);
public class FortressCyclops extends CardImpl {
public FortressCyclops(UUID ownerId) {
public FortressCyclops(final FortressCyclops card) {
public FortressCyclops copy() {return new FortressCyclops(this);
public class FoundryChampion extends CardImpl {
public FoundryChampion(UUID ownerId) {
public FoundryChampion(final FoundryChampion card) {
public FoundryChampion copy() {return new FoundryChampion(this);
public class FoundryStreetDenizen extends CardImpl {
public FoundryStreetDenizen(UUID ownerId) {
public FoundryStreetDenizen(final FoundryStreetDenizen card) {
public FoundryStreetDenizen copy() {return new FoundryStreetDenizen(this);
public class FrilledOculus extends CardImpl {
public FrilledOculus(UUID ownerId) {
public FrilledOculus(final FrilledOculus card) {
public FrilledOculus copy() {return new FrilledOculus(this);
public class FrontlineMedic extends CardImpl {
public FrontlineMedic(UUID ownerId) {
public FrontlineMedic(final FrontlineMedic card) {
public FrontlineMedic copy() {return new FrontlineMedic(this);
public class FuriousResistance extends CardImpl {
public FuriousResistance(UUID ownerId) {
public FuriousResistance(final FuriousResistance card) {
public FuriousResistance copy() {return new FuriousResistance(this);
class FuriousResistanceEffect extends OneShotEffect {
public FuriousResistanceEffect() {
public FuriousResistanceEffect(final FuriousResistanceEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public FuriousResistanceEffect copy() {return new FuriousResistanceEffect(this);
public class GatewayShade extends CardImpl {
public GatewayShade(UUID ownerId) {
public GatewayShade(final GatewayShade card) {
public GatewayShade copy() {return new GatewayShade(this);
public class GhorClanRampager extends CardImpl {
public GhorClanRampager(UUID ownerId) {
public GhorClanRampager(final GhorClanRampager card) {
public GhorClanRampager copy() {return new GhorClanRampager(this);
public class GiantAdephage extends CardImpl {
public GiantAdephage(UUID ownerId) {
public GiantAdephage(final GiantAdephage card) {
public GiantAdephage copy() {return new GiantAdephage(this);
public class GideonChampionOfJustice extends CardImpl {
public GideonChampionOfJustice(UUID ownerId) {
public GideonChampionOfJustice(final GideonChampionOfJustice card) {
public GideonChampionOfJustice copy() {return new GideonChampionOfJustice(this);
class GideonExileAllOtherPermanentsEffect extends OneShotEffect {
public GideonExileAllOtherPermanentsEffect() {
public GideonExileAllOtherPermanentsEffect(final GideonExileAllOtherPermanentsEffect effect) {
public GideonExileAllOtherPermanentsEffect copy() {return new GideonExileAllOtherPermanentsEffect(this);
public boolean apply(Game game, Ability source) {return true;
class GideonChampionOfJusticeToken extends Token {
public GideonChampionOfJusticeToken() {return new GiftOfOrzhova(this);
public class GlaringSpotlight extends CardImpl {
public GlaringSpotlight(UUID ownerId) {
public GlaringSpotlight(final GlaringSpotlight card) {
public GlaringSpotlight copy() {return new GlaringSpotlight(this);
class GlaringSpotlightEffect extends AsThoughEffectImpl {
public GlaringSpotlightEffect() {
public GlaringSpotlightEffect(final GlaringSpotlightEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public GlaringSpotlightEffect copy() {return new GlaringSpotlightEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class GreensideWatcher extends CardImpl {
public GreensideWatcher(UUID ownerId) {
public GreensideWatcher(final GreensideWatcher card) {
public GreensideWatcher copy() {return new GreensideWatcher(this);
public class Gridlock extends CardImpl {
public Gridlock(UUID ownerId) {
public Gridlock(final Gridlock card) {
public void adjustTargets(Ability ability, Game game) {
public Gridlock copy() {return new Gridlock(this);
public class GruulCharm extends CardImpl {
public GruulCharm(UUID ownerId) {
public GruulCharm(final GruulCharm card) {
public GruulCharm copy() {return new GruulCharm(this);
class GainControlAllEffect extends ContinuousEffectImpl {
public GainControlAllEffect(Duration duration, FilterPermanent filter) {
public GainControlAllEffect(final GainControlAllEffect effect) {
public GainControlAllEffect copy() {return new GainControlAllEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getText(Mode mode) {return "Gain control of all permanents you own";
public class GruulGuildgate extends CardImpl {
public GruulGuildgate(UUID ownerId) {
public GruulGuildgate(final GruulGuildgate card) {
public GruulGuildgate copy() {return new GruulGuildgate(this);
public class GruulKeyrune extends CardImpl {
public GruulKeyrune(UUID ownerId) {
public GruulKeyrune(final GruulKeyrune card) {
public GruulKeyrune copy() {return new GruulKeyrune(this);
private class GruulKeyruneToken extends Token {
GruulKeyruneToken() {
public class GruulRagebeast extends CardImpl {
public GruulRagebeast(UUID ownerId) {
public GruulRagebeast(final GruulRagebeast card) {
public GruulRagebeast copy() {return new GruulRagebeast(this);
class GruulRagebeastTriggeredAbility extends TriggeredAbilityImpl {
GruulRagebeastTriggeredAbility() {
GruulRagebeastTriggeredAbility(final GruulRagebeastTriggeredAbility ability) {
public GruulRagebeastTriggeredAbility copy() {return new GruulRagebeastTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} or another creature enters the battlefield under your control, that creature fights target creature an opponent controls.";
class GruulRagebeastEffect extends OneShotEffect {
GruulRagebeastEffect() {
GruulRagebeastEffect(final GruulRagebeastEffect effect) {
public boolean apply(Game game, Ability source) {return triggeredCreature.fight(target, source, game);return false;
public GruulRagebeastEffect copy() {return new GruulRagebeastEffect(this);
public class GuardianOfTheGateless extends CardImpl {
public GuardianOfTheGateless(UUID ownerId) {
public GuardianOfTheGateless(final GuardianOfTheGateless card) {
public GuardianOfTheGateless copy() {return new GuardianOfTheGateless(this);
public class GuildscornWard extends CardImpl {
public GuildscornWard(UUID ownerId) {
public GuildscornWard(final GuildscornWard card) {
public GuildscornWard copy() {return new GuildscornWard(this);
public class GutterSkulk extends CardImpl {
public GutterSkulk(UUID ownerId) {
public GutterSkulk(final GutterSkulk card) {
public GutterSkulk copy() {return new GutterSkulk(this);
public class GyreSage extends CardImpl {
public GyreSage(UUID ownerId) {
public GyreSage(final GyreSage card) {
public GyreSage copy() {return new GyreSage(this);
public class HandsOfBinding extends CardImpl {
public HandsOfBinding (UUID ownerId) {
public HandsOfBinding(final HandsOfBinding card) {
public HandsOfBinding copy() {return new HandsOfBinding(this);
public class HellkiteTyrant extends CardImpl {
public HellkiteTyrant(UUID ownerId) {
public HellkiteTyrant(final HellkiteTyrant card) {
public HellkiteTyrant copy() {return new HellkiteTyrant(this);
class HellkiteTyrantEffect extends OneShotEffect {
public HellkiteTyrantEffect() {
public HellkiteTyrantEffect(final HellkiteTyrantEffect effect) {
public HellkiteTyrantEffect copy() {return new HellkiteTyrantEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
class HellkiteTyrantControlEffect extends ContinuousEffectImpl {
public HellkiteTyrantControlEffect(UUID controllerId) {
public HellkiteTyrantControlEffect(final HellkiteTyrantControlEffect effect) {
public HellkiteTyrantControlEffect copy() {return new HellkiteTyrantControlEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(controllerId, game);return false;
public class HellraiserGoblin extends CardImpl {
public HellraiserGoblin(UUID ownerId) {
public HellraiserGoblin(final HellraiserGoblin card) {
public HellraiserGoblin copy() {return new HellraiserGoblin(this);
class AttacksIfAbleAllEffect extends RequirementEffect {
public AttacksIfAbleAllEffect(Duration duration) {
public AttacksIfAbleAllEffect(Duration duration, FilterControlledCreaturePermanent filter) {
public AttacksIfAbleAllEffect(final AttacksIfAbleAllEffect effect) {
public AttacksIfAbleAllEffect copy() {return new AttacksIfAbleAllEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return filter.match(permanent, source.getSourceId(), source.getControllerId(), game);
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public String getText(Mode mode) {return staticText;return filter.getMessage() + " attack each combat if able";
public class HighPriestOfPenance extends CardImpl {
public HighPriestOfPenance(UUID ownerId) {
public HighPriestOfPenance(final HighPriestOfPenance card) {
public HighPriestOfPenance copy() {return new HighPriestOfPenance(this);
class HighPriestOfPenanceTriggeredAbility extends TriggeredAbilityImpl {
public HighPriestOfPenanceTriggeredAbility() {
public HighPriestOfPenanceTriggeredAbility(final HighPriestOfPenanceTriggeredAbility ability) {
public HighPriestOfPenanceTriggeredAbility copy() {return new HighPriestOfPenanceTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getTargetId().equals(this.sourceId);
public String getRule() {return "Whenever {this} is dealt damage, " + super.getRule();
public class Hindervines extends CardImpl {
public Hindervines(UUID ownerId) {
public Hindervines(final Hindervines card) {
public Hindervines copy() {return new Hindervines(this);
public class HoldTheGates extends CardImpl {
public HoldTheGates(UUID ownerId) {
public HoldTheGates(final HoldTheGates card) {
public HoldTheGates copy() {return new HoldTheGates(this);
public class HolyMantle extends CardImpl {
public HolyMantle(UUID ownerId) {
public HolyMantle(final HolyMantle card) {
public HolyMantle copy() {return new HolyMantle(this);
public class HomingLightning extends CardImpl {
public HomingLightning(UUID ownerId) {
public HomingLightning(final HomingLightning card) {
public HomingLightning copy() {return new HomingLightning(this);
class HomingLightningEffect extends OneShotEffect {
public HomingLightningEffect() {
public HomingLightningEffect(final HomingLightningEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public class HorrorOfTheDim extends CardImpl {
public HorrorOfTheDim(UUID ownerId) {
public HorrorOfTheDim(final HorrorOfTheDim card) {
public HorrorOfTheDim copy() {return new HorrorOfTheDim(this);return new Hydroform(this);
public class ImmortalServitude extends CardImpl {
public ImmortalServitude(UUID ownerId) {
public ImmortalServitude(final ImmortalServitude card) {
public ImmortalServitude copy() {return new ImmortalServitude(this);
class ImmortalServitudeEffect extends OneShotEffect {
public ImmortalServitudeEffect() {
public ImmortalServitudeEffect(final ImmortalServitudeEffect effect) {
public ImmortalServitudeEffect copy() {return new ImmortalServitudeEffect(this);
public boolean apply(Game game, Ability source) {
&& card != null) {return true;
public class IncursionSpecialist extends CardImpl {
public IncursionSpecialist(UUID ownerId) {
public IncursionSpecialist(final IncursionSpecialist card) {
public IncursionSpecialist copy() {return new IncursionSpecialist(this);
class IncursionTriggeredAbility extends TriggeredAbilityImpl {
public IncursionTriggeredAbility() {
public IncursionTriggeredAbility(final IncursionTriggeredAbility ability) {
public IncursionTriggeredAbility copy() {return new IncursionTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast your second spell each turn, Incursion Specialist gets +2/+0 until end of turn and can't be blocked this turn.";
public class IvyLaneDenizen extends CardImpl {
public IvyLaneDenizen(UUID ownerId) {
public IvyLaneDenizen(final IvyLaneDenizen card) {
public IvyLaneDenizen copy() {return new IvyLaneDenizen(this);
public class KeymasterRogue extends CardImpl {
public KeymasterRogue(UUID ownerId) {
public KeymasterRogue(final KeymasterRogue card) {
public KeymasterRogue copy() {return new KeymasterRogue(this);
public class KillingGlare extends CardImpl {
public KillingGlare (UUID ownerId) {
public KillingGlare(final KillingGlare card) {
public void adjustTargets(Ability ability, Game game) {
public KillingGlare copy() {return new KillingGlare(this);
public class KingpinsPet extends CardImpl {
public KingpinsPet(UUID ownerId) {
public KingpinsPet(final KingpinsPet card) {
public KingpinsPet copy() {return new KingpinsPet(this);
public class KnightOfObligation extends CardImpl {
public KnightOfObligation(UUID ownerId) {
public KnightOfObligation(final KnightOfObligation card) {
public KnightOfObligation copy() {return new KnightOfObligation(this);
public class KnightWatch extends CardImpl {
public KnightWatch (UUID ownerId) {
public KnightWatch(final KnightWatch card) {
public KnightWatch copy() {return new KnightWatch(this);
public class LastThoughts extends CardImpl {
public LastThoughts(UUID ownerId) {
public LastThoughts(final LastThoughts card) {
public LastThoughts copy() {return new LastThoughts(this);
public class LazavDimirMastermind extends CardImpl {
public LazavDimirMastermind(UUID ownerId) {
public LazavDimirMastermind(final LazavDimirMastermind card) {
public LazavDimirMastermind copy() {return new LazavDimirMastermind(this);
class LazavDimirEffect extends ContinuousEffectImpl {
public LazavDimirEffect() {
public LazavDimirEffect(final LazavDimirEffect effect) {
public LazavDimirEffect copy() {return new LazavDimirEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class LegionLoyalist extends CardImpl {
public LegionLoyalist(UUID ownerId) {
public LegionLoyalist(final LegionLoyalist card) {
public LegionLoyalist copy() {return new LegionLoyalist(this);
class CantBeBlockedByTokenEffect extends RestrictionEffect {
public CantBeBlockedByTokenEffect() {
public CantBeBlockedByTokenEffect(final CantBeBlockedByTokenEffect effect) {
public void init(Ability source, Game game) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return true;
public CantBeBlockedByTokenEffect copy() {return new CantBeBlockedByTokenEffect(this);
public class LeylinePhantom extends CardImpl {
public LeylinePhantom(UUID ownerId) {
public LeylinePhantom(final LeylinePhantom card) {
public LeylinePhantom copy() {return new LeylinePhantom(this);
class LeylinePhantomTriggeredAbility extends TriggeredAbilityImpl {
public LeylinePhantomTriggeredAbility() {
public LeylinePhantomTriggeredAbility(final LeylinePhantomTriggeredAbility ability) {
public LeylinePhantomTriggeredAbility copy() {return new LeylinePhantomTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE || event.getType() == EventType.DAMAGED_PLANESWALKER || event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return ((DamagedEvent) event).isCombatDamage() && event.getSourceId().equals(this.getSourceId());
public String getRule() {return "Whenever {this} deals combat damage, " + super.getRule();
public class LordOfTheVoid extends CardImpl {
public LordOfTheVoid(UUID ownerId) {
public LordOfTheVoid(final LordOfTheVoid card) {
public LordOfTheVoid copy() {return new LordOfTheVoid(this);
class LordOfTheVoidEffect extends OneShotEffect {
public LordOfTheVoidEffect() {
public LordOfTheVoidEffect(final LordOfTheVoidEffect effect) {
public LordOfTheVoidEffect copy() {return new LordOfTheVoidEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class LuminatePrimordial extends CardImpl {
public LuminatePrimordial(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public LuminatePrimordial(final LuminatePrimordial card) {
public LuminatePrimordial copy() {return new LuminatePrimordial(this);
class LuminatePrimordialEffect extends OneShotEffect {
public LuminatePrimordialEffect() {
public LuminatePrimordialEffect(final LuminatePrimordialEffect effect) {
public LuminatePrimordialEffect copy() {return new LuminatePrimordialEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class MadcapSkills extends CardImpl {
public MadcapSkills(UUID ownerId) {
public MadcapSkills(final MadcapSkills card) {
public MadcapSkills copy() {return new MadcapSkills(this);
public class MarkForDeath extends CardImpl {
public MarkForDeath(UUID ownerId) {
public MarkForDeath(final MarkForDeath card) {
public MarkForDeath copy() {return new MarkForDeath(this);
class MarkForDeathEffect extends OneShotEffect {
public MarkForDeathEffect() {
public MarkForDeathEffect(final MarkForDeathEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public MarkForDeathEffect copy() {return new MarkForDeathEffect(this);
public class MartialGlory extends CardImpl {
public MartialGlory(UUID ownerId) {
public MartialGlory(final MartialGlory card) {
public MartialGlory copy() {return new MartialGlory(this);
public class MassiveRaid extends CardImpl {
public MassiveRaid(UUID ownerId) {
public MassiveRaid(final MassiveRaid card) {
public MassiveRaid copy() {return new MassiveRaid(this);
public class MercilessEviction extends CardImpl {
public MercilessEviction(UUID ownerId) {
public MercilessEviction(final MercilessEviction card) {
public MercilessEviction copy() {return new MercilessEviction(this);
public class MerfolkOfTheDepths extends CardImpl {
public MerfolkOfTheDepths(UUID ownerId) {
public MerfolkOfTheDepths(final MerfolkOfTheDepths card) {
public MerfolkOfTheDepths copy() {return new MerfolkOfTheDepths(this);
public class MetropolisSprite extends CardImpl {
public MetropolisSprite(UUID ownerId) {
public MetropolisSprite(final MetropolisSprite card) {
public MetropolisSprite copy() {return new MetropolisSprite(this);
public class MidnightRecovery extends CardImpl {
public MidnightRecovery (UUID ownerId) {
public MidnightRecovery(final MidnightRecovery card) {
public MidnightRecovery copy() {return new MidnightRecovery(this);
public class MillennialGargoyle extends CardImpl {
public MillennialGargoyle(UUID ownerId) {
public MillennialGargoyle(final MillennialGargoyle card) {
public MillennialGargoyle copy() {return new MillennialGargoyle(this);
public class MimingSlime extends CardImpl {
public MimingSlime(UUID ownerId) {
public MimingSlime(final MimingSlime card) {
public MimingSlime copy() {return new MimingSlime(this);
class MimingSlimeEffect extends OneShotEffect {
public MimingSlimeEffect() {
public MimingSlimeEffect(final MimingSlimeEffect effect) {
public MimingSlimeEffect copy() {return new MimingSlimeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class OozeToken extends Token {
public OozeToken() {
public class MindeyeDrake extends CardImpl {
public MindeyeDrake(UUID ownerId) {
public MindeyeDrake(final MindeyeDrake card) {
public MindeyeDrake copy() {return new MindeyeDrake(this);
public class MindGrind extends CardImpl {
public MindGrind(UUID ownerId) {
public MindGrind(final MindGrind card) {
public MindGrind copy() {return new MindGrind(this);
class MindGrindEffect extends OneShotEffect {
public MindGrindEffect() {
public MindGrindEffect(final MindGrindEffect effect) {
public MindGrindEffect copy() {return new MindGrindEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class MoltenPrimordial extends CardImpl {
public MoltenPrimordial(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public MoltenPrimordial(final MoltenPrimordial card) {
public MoltenPrimordial copy() {return new MoltenPrimordial(this);
class MoltenPrimordialEffect extends OneShotEffect {
public MoltenPrimordialEffect() {
public MoltenPrimordialEffect(final MoltenPrimordialEffect effect) {
public MoltenPrimordialEffect copy() {return new MoltenPrimordialEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class MortusStrider extends CardImpl {
public MortusStrider(UUID ownerId) {
public MortusStrider(final MortusStrider card) {
public MortusStrider copy() {return new MortusStrider(this);
public class Mugging extends CardImpl {
public Mugging(UUID ownerId) {
public Mugging(final Mugging card) {
public Mugging copy() {return new Mugging(this);
public class MurderInvestigation extends CardImpl {
public MurderInvestigation(UUID ownerId) {
public MurderInvestigation(final MurderInvestigation card) {
public MurderInvestigation copy() {return new MurderInvestigation(this);
class AttachedPermanentPowerCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return attached.getPower().getValue();return 0;
public DynamicValue copy() {return new AttachedPermanentPowerCount();
public String toString() {return "X";
public String getMessage() {return "its power";
public class MysticGenesis extends CardImpl {
public MysticGenesis(UUID ownerId) {
public MysticGenesis(final MysticGenesis card) {
public MysticGenesis copy() {return new MysticGenesis(this);
class MysticGenesisEffect extends OneShotEffect {
public MysticGenesisEffect() {
public MysticGenesisEffect(final MysticGenesisEffect effect) {
public MysticGenesisEffect copy() {return new MysticGenesisEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new MysticGenesisOozeToken(stackObject.getConvertedManaCost())).apply(game, source);return false;
class MysticGenesisOozeToken extends Token {
public MysticGenesisOozeToken(int xValue) {return new NavSquadCommandos(this);
public class NightveilSpecter extends CardImpl {
public NightveilSpecter(UUID ownerId) {
public NightveilSpecter(final NightveilSpecter card) {
public NightveilSpecter copy() {return new NightveilSpecter(this);
class NightveilSpecterExileEffect extends OneShotEffect {
public NightveilSpecterExileEffect() {
public NightveilSpecterExileEffect(final NightveilSpecterExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public NightveilSpecterExileEffect copy() {return new NightveilSpecterExileEffect(this);
class NightveilSpecterEffect extends AsThoughEffectImpl {
public NightveilSpecterEffect() {
public NightveilSpecterEffect(final NightveilSpecterEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public NightveilSpecterEffect copy() {return new NightveilSpecterEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return zone != null && zone.contains(card.getId());return false;
public class NimbusSwimmer extends CardImpl {
public NimbusSwimmer(UUID ownerId) {
public NimbusSwimmer(final NimbusSwimmer card) {
public NimbusSwimmer copy() {return new NimbusSwimmer(this);
public class ObzedatGhostCouncil extends CardImpl {
public ObzedatGhostCouncil(UUID ownerId) {
public ObzedatGhostCouncil(final ObzedatGhostCouncil card) {
public ObzedatGhostCouncil copy() {return new ObzedatGhostCouncil(this);
class ObzedatGhostCouncilExileSourceEffect extends OneShotEffect {
public ObzedatGhostCouncilExileSourceEffect() {
public ObzedatGhostCouncilExileSourceEffect(final ObzedatGhostCouncilExileSourceEffect effect) {
public ObzedatGhostCouncilExileSourceEffect copy() {return new ObzedatGhostCouncilExileSourceEffect(this);
public boolean apply(Game game, Ability source) {return permanent.moveToExile(source.getSourceId(), permanent.getName(), source.getSourceId(), game);return false;
class BeginningOfYourUpkeepdelayTriggeredAbility extends DelayedTriggeredAbility {
public BeginningOfYourUpkeepdelayTriggeredAbility() {
public BeginningOfYourUpkeepdelayTriggeredAbility(Effect effect, TargetController targetController) {
public BeginningOfYourUpkeepdelayTriggeredAbility(BeginningOfYourUpkeepdelayTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public BeginningOfYourUpkeepdelayTriggeredAbility copy() {return new BeginningOfYourUpkeepdelayTriggeredAbility(this);
public String getRule() {return "If you do, return it to the battlefield under it's owner's control at the beginning of your next upkeep. It gains haste";
class ObzedatGhostCouncilReturnEffect extends OneShotEffect {
public ObzedatGhostCouncilReturnEffect() {
public ObzedatGhostCouncilReturnEffect(final ObzedatGhostCouncilReturnEffect effect) {
public ObzedatGhostCouncilReturnEffect copy() {return new ObzedatGhostCouncilReturnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OgreSlumlord extends CardImpl {
public OgreSlumlord(UUID ownerId) {
public OgreSlumlord(final OgreSlumlord card) {
public OgreSlumlord copy() {return new OgreSlumlord(this);
public class OrdruunVeteran extends CardImpl {
public OrdruunVeteran(UUID ownerId) {
public OrdruunVeteran(final OrdruunVeteran card) {
public OrdruunVeteran copy() {return new OrdruunVeteran(this);
public class OrzhovCharm extends CardImpl {
public OrzhovCharm(UUID ownerId) {
public OrzhovCharm(final OrzhovCharm card) {
public OrzhovCharm copy() {return new OrzhovCharm(this);
class OrzhovCharmReturnToHandEffect extends OneShotEffect {
public OrzhovCharmReturnToHandEffect() {
public OrzhovCharmReturnToHandEffect(final OrzhovCharmReturnToHandEffect effect) {
public OrzhovCharmReturnToHandEffect copy() {return new OrzhovCharmReturnToHandEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new OrzhovCharmDestroyAndLoseLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OrzhovGuildgate extends CardImpl {
public OrzhovGuildgate(UUID ownerId) {
public OrzhovGuildgate(final OrzhovGuildgate card) {
public OrzhovGuildgate copy() {return new OrzhovGuildgate(this);
public class OrzhovKeyrune extends CardImpl {
public OrzhovKeyrune(UUID ownerId) {
public OrzhovKeyrune(final OrzhovKeyrune card) {
public OrzhovKeyrune copy() {return new OrzhovKeyrune(this);
private class OrzhovKeyruneToken extends Token {
OrzhovKeyruneToken() {
public class ParanoidDelusions extends CardImpl {
public ParanoidDelusions(UUID ownerId) {
public ParanoidDelusions(final ParanoidDelusions card) {
public ParanoidDelusions copy() {return new ParanoidDelusions(this);
public class PitFight extends CardImpl {
public PitFight(UUID ownerId) {
public PitFight(final PitFight card) {
public PitFight copy() {return new PitFight(this);
class TargetOtherCreaturePermanent extends TargetCreaturePermanent {
public TargetOtherCreaturePermanent() {
public TargetOtherCreaturePermanent(final TargetOtherCreaturePermanent target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return false;return super.canTarget(controllerId, id, source, game);
public TargetOtherCreaturePermanent copy() {return new TargetOtherCreaturePermanent(this);
public class PredatorsRapport extends CardImpl {
public PredatorsRapport(UUID ownerId) {
public PredatorsRapport(final PredatorsRapport card) {
public PredatorsRapport copy() {return new PredatorsRapport(this);
class TargetPermanentPowerPlusToughnessCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return sourcePermanent.getPower().getValue() + sourcePermanent.getToughness().getValue();return 0;
public DynamicValue copy() {return new TargetPermanentPowerPlusToughnessCount();
public String toString() {return "X";
public String getMessage() {return "that creature's power plus its toughness";
public class PrimalVisitation extends CardImpl {
public PrimalVisitation(UUID ownerId) {
public PrimalVisitation(final PrimalVisitation card) {
public PrimalVisitation copy() {return new PrimalVisitation(this);
public class PrimeSpeakerZegana extends CardImpl {
public PrimeSpeakerZegana(UUID ownerId) {
public PrimeSpeakerZegana(final PrimeSpeakerZegana card) {
public PrimeSpeakerZegana copy() {return new PrimeSpeakerZegana(this);
class greatestPowerCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return value;
public DynamicValue copy() {return new greatestPowerCount();
public String toString() {return "X";
public String getMessage() {return "greatest power among other creatures you control";
public class PsychicStrike extends CardImpl {
public PsychicStrike(UUID ownerId) {
public PsychicStrike(final PsychicStrike card) {
public PsychicStrike copy() {return new PsychicStrike(this);
class PsychicStrikeEffect extends OneShotEffect {
public PsychicStrikeEffect() {
public PsychicStrikeEffect(final PsychicStrikeEffect effect) {
public PsychicStrikeEffect copy() {return new PsychicStrikeEffect(this);
public boolean apply(Game game, Ability source) {return countered;
public class PurgeTheProfane extends CardImpl {
public PurgeTheProfane(UUID ownerId) {
public PurgeTheProfane(final PurgeTheProfane card) {
public PurgeTheProfane copy() {return new PurgeTheProfane(this);
public class RapidHybridization extends CardImpl {
public RapidHybridization(UUID ownerId) {
public RapidHybridization(final RapidHybridization card) {
public RapidHybridization copy() {return new RapidHybridization(this);
class RapidHybridizationEffect extends OneShotEffect {
public RapidHybridizationEffect() {
public RapidHybridizationEffect(final RapidHybridizationEffect effect) {
public RapidHybridizationEffect copy() {return new RapidHybridizationEffect(this);
public boolean apply(Game game, Ability source) {return true;
class RapidHybridizationToken extends Token {
public RapidHybridizationToken() {
public class RazortipWhip extends CardImpl {
public RazortipWhip(UUID ownerId) {
public RazortipWhip(final RazortipWhip card) {
public RazortipWhip copy() {return new RazortipWhip(this);
public class Realmwright extends CardImpl {
public Realmwright(UUID ownerId) {
public Realmwright(final Realmwright card) {
public Realmwright copy() {return new Realmwright(this);
class RealmwrightEffect2 extends ContinuousEffectImpl {
public RealmwrightEffect2() {
public RealmwrightEffect2(final RealmwrightEffect2 effect) {
public RealmwrightEffect2 copy() {return new RealmwrightEffect2(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class RighteousCharge extends CardImpl {
public RighteousCharge (UUID ownerId) {
public RighteousCharge(final RighteousCharge card) {
public RighteousCharge copy() {return new RighteousCharge(this);
public class RiotGear extends CardImpl {
public RiotGear(UUID ownerId) {
public RiotGear(final RiotGear card) {
public RiotGear copy() {return new RiotGear(this);
public class RipscalePredator extends CardImpl {
public RipscalePredator(UUID ownerId) {
public RipscalePredator(final RipscalePredator card) {
public RipscalePredator copy() {return new RipscalePredator(this);
public class RubblebeltRaiders extends CardImpl {
public RubblebeltRaiders(UUID ownerId) {
public RubblebeltRaiders(final RubblebeltRaiders card) {
public RubblebeltRaiders copy() {return new RubblebeltRaiders(this);
public class RustScarab extends CardImpl {
public RustScarab(UUID ownerId) {
public RustScarab(final RustScarab card) {
public RustScarab copy() {return new RustScarab(this);
class BecomesBlockedTriggeredAbility extends TriggeredAbilityImpl {
public BecomesBlockedTriggeredAbility(Effect effect, boolean optional) {
public BecomesBlockedTriggeredAbility(final BecomesBlockedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.CREATURE_BLOCKED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} becomes blocked, " + super.getRule();
public BecomesBlockedTriggeredAbility copy() {return new BecomesBlockedTriggeredAbility(this);
public class SagesRowDenizen extends CardImpl {
public SagesRowDenizen(UUID ownerId) {
public SagesRowDenizen(final SagesRowDenizen card) {
public SagesRowDenizen copy() {return new SagesRowDenizen(this);
public class SapphireDrake extends CardImpl {
public SapphireDrake(UUID ownerId) {
public SapphireDrake(final SapphireDrake card) {
public SapphireDrake copy() {return new SapphireDrake(this);
public class ScabClanCharger extends CardImpl {
public ScabClanCharger(UUID ownerId) {
public ScabClanCharger(final ScabClanCharger card) {
public ScabClanCharger copy() {return new ScabClanCharger(this);
public class ScatterArc extends CardImpl {
public ScatterArc(UUID ownerId) {
public ScatterArc(final ScatterArc card) {
public ScatterArc copy() {return new ScatterArc(this);
public class Scorchwalker extends CardImpl {
public Scorchwalker(UUID ownerId) {
public Scorchwalker(final Scorchwalker card) {
public Scorchwalker copy() {return new Scorchwalker(this);
public class SepulchralPrimordial extends CardImpl {
public SepulchralPrimordial(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public SepulchralPrimordial(final SepulchralPrimordial card) {
public SepulchralPrimordial copy() {return new SepulchralPrimordial(this);
class SepulchralPrimordialEffect extends OneShotEffect {
public SepulchralPrimordialEffect() {
public SepulchralPrimordialEffect(final SepulchralPrimordialEffect effect) {
public SepulchralPrimordialEffect copy() {return new SepulchralPrimordialEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SereneRemembrance extends CardImpl {
public SereneRemembrance (UUID ownerId) {
public SereneRemembrance(final SereneRemembrance card) {
public SereneRemembrance copy() {return new SereneRemembrance(this);
class SereneRemembranceEffect extends OneShotEffect {
public SereneRemembranceEffect() {
public SereneRemembranceEffect(final SereneRemembranceEffect effect) {
public SereneRemembranceEffect copy() {return new SereneRemembranceEffect(this);
public boolean apply(Game game, Ability source) {return result;return new ShadowAlleyDenizen(this);return new ShadowSlice(this);
public class Shambleshark extends CardImpl {
public Shambleshark(UUID ownerId) {
public Shambleshark(final Shambleshark card) {
public Shambleshark copy() {return new Shambleshark(this);
public class ShatteringBlow extends CardImpl {
public ShatteringBlow (UUID ownerId) {
public ShatteringBlow(final ShatteringBlow card) {
public ShatteringBlow copy() {return new ShatteringBlow(this);
public class ShieldedPassage extends CardImpl {
public ShieldedPassage (UUID ownerId) {
public ShieldedPassage(final ShieldedPassage card) {
public ShieldedPassage copy() {return new ShieldedPassage(this);
public class SignalTheClans extends CardImpl {
public SignalTheClans (UUID ownerId) {
public SignalTheClans(final SignalTheClans card) {
public SignalTheClans copy() {return new SignalTheClans(this);
class SignalTheClansEffect extends SearchEffect {
public SignalTheClansEffect() {
public SignalTheClansEffect(final SignalTheClansEffect effect) {
public SignalTheClansEffect copy() {return new SignalTheClansEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class SimicCharm extends CardImpl {
public SimicCharm (UUID ownerId) {
public SimicCharm(final SimicCharm card) {
public SimicCharm copy() {return new SimicCharm(this);
public class SimicFluxmage extends CardImpl {
public SimicFluxmage(UUID ownerId) {
public SimicFluxmage(final SimicFluxmage card) {
public SimicFluxmage copy() {return new SimicFluxmage(this);
class MoveCounterFromSourceToTargetEffect extends OneShotEffect {
public MoveCounterFromSourceToTargetEffect() {
public MoveCounterFromSourceToTargetEffect(final MoveCounterFromSourceToTargetEffect effect) {
public MoveCounterFromSourceToTargetEffect copy() {return new MoveCounterFromSourceToTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SimicGuildgate extends CardImpl {
public SimicGuildgate(UUID ownerId) {
public SimicGuildgate(final SimicGuildgate card) {
public SimicGuildgate copy() {return new SimicGuildgate(this);
public class SimicKeyrune extends CardImpl {
public SimicKeyrune(UUID ownerId) {
public SimicKeyrune(final SimicKeyrune card) {
public SimicKeyrune copy() {return new SimicKeyrune(this);
private class SimicKeyruneToken extends Token {
SimicKeyruneToken() {
public class SkarrgGuildmage extends CardImpl {
public SkarrgGuildmage(UUID ownerId) {
public SkarrgGuildmage(final SkarrgGuildmage card) {
public SkarrgGuildmage copy() {return new SkarrgGuildmage(this);
class SkarrgGuildmageToken extends Token {
public SkarrgGuildmageToken() {
public class SkinbrandGoblin extends CardImpl {
public SkinbrandGoblin(UUID ownerId) {
public SkinbrandGoblin(final SkinbrandGoblin card) {
public SkinbrandGoblin copy() {return new SkinbrandGoblin(this);
public class Skullcrack extends CardImpl {
public Skullcrack (UUID ownerId) {
public Skullcrack(final Skullcrack card) {
public Skullcrack copy() {return new Skullcrack(this);
public DamageCantBePreventedEffect() {
public DamageCantBePreventedEffect(final DamageCantBePreventedEffect effect) {
public DamageCantBePreventedEffect copy() {return new DamageCantBePreventedEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.PREVENT_DAMAGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class SkyblinderStaff extends CardImpl {
public SkyblinderStaff(UUID ownerId) {
public SkyblinderStaff(final SkyblinderStaff card) {
public SkyblinderStaff copy() {return new SkyblinderStaff(this);
class CantBeBlockedByCreaturesWithFlyingAttachedEffect extends RestrictionEffect {
public CantBeBlockedByCreaturesWithFlyingAttachedEffect() {
public CantBeBlockedByCreaturesWithFlyingAttachedEffect(final CantBeBlockedByCreaturesWithFlyingAttachedEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return true;
public CantBeBlockedByCreaturesWithFlyingAttachedEffect copy() {return new CantBeBlockedByCreaturesWithFlyingAttachedEffect(this);
public class Skygames extends CardImpl {
public Skygames(UUID ownerId) {
public Skygames(final Skygames card) {
public Skygames copy() {return new Skygames(this);
public class SlateStreetRuffian extends CardImpl {
public SlateStreetRuffian(UUID ownerId) {
public SlateStreetRuffian(final SlateStreetRuffian card) {
public SlateStreetRuffian copy() {return new SlateStreetRuffian(this);
class SlateStreetRuffianDiscardEffect extends OneShotEffect {
public SlateStreetRuffianDiscardEffect() {
public SlateStreetRuffianDiscardEffect(final SlateStreetRuffianDiscardEffect effect) {
public SlateStreetRuffianDiscardEffect copy() {return new SlateStreetRuffianDiscardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Slaughterhorn extends CardImpl {
public Slaughterhorn(UUID ownerId) {
public Slaughterhorn(final Slaughterhorn card) {
public Slaughterhorn copy() {return new Slaughterhorn(this);
public class SmogElemental extends CardImpl {
public SmogElemental(UUID ownerId) {
public SmogElemental(final SmogElemental card) {
public SmogElemental copy() {return new SmogElemental(this);
public class SoulRansom extends CardImpl {
public SoulRansom(UUID ownerId) {
public SoulRansom(final SoulRansom card) {
public SoulRansom copy() {return new SoulRansom(this);
public class SparkTrooper extends CardImpl {
public SparkTrooper(UUID ownerId) {
public SparkTrooper(final SparkTrooper card) {
public SparkTrooper copy() {return new SparkTrooper(this);
public class SpellRupture extends CardImpl {
public SpellRupture(UUID ownerId) {
public SpellRupture(final SpellRupture card) {
public SpellRupture copy() {return new SpellRupture(this);
class SpellRuptureCounterUnlessPaysEffect extends OneShotEffect {
public SpellRuptureCounterUnlessPaysEffect() {
public SpellRuptureCounterUnlessPaysEffect(final SpellRuptureCounterUnlessPaysEffect effect) {
public SpellRuptureCounterUnlessPaysEffect copy() {return new SpellRuptureCounterUnlessPaysEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public String getText(Mode mode) {return "Counter target spell unless its controller pays {X}, where X is the greatest power among creatures you control";
class greatestPowerCountCreatureYouControl implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return value;
public DynamicValue copy() {return new greatestPowerCount();
public String toString() {return "X";
public String getMessage() {return "greatest power among creatures you control";
public class SpireTracer extends CardImpl {
public SpireTracer(UUID ownerId) {
public SpireTracer(final SpireTracer card) {
public SpireTracer copy() {return new SpireTracer(this);
class CantBeBlockedExceptByCreaturesWithFlyingOrReachEffect extends RestrictionEffect {
public CantBeBlockedExceptByCreaturesWithFlyingOrReachEffect() {
public CantBeBlockedExceptByCreaturesWithFlyingOrReachEffect(final CantBeBlockedExceptByCreaturesWithFlyingOrReachEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return true;return false;
public CantBeBlockedExceptByCreaturesWithFlyingOrReachEffect copy() {return new CantBeBlockedExceptByCreaturesWithFlyingOrReachEffect(this);
public class StolenIdentity extends CardImpl {
public StolenIdentity(UUID ownerId) {
public StolenIdentity(final StolenIdentity card) {
public StolenIdentity copy() {return new StolenIdentity(this);
public class StructuralCollapse extends CardImpl {
public StructuralCollapse(UUID ownerId) {
public StructuralCollapse(final StructuralCollapse card) {
public StructuralCollapse copy() {return new StructuralCollapse(this);
public class SunhomeGuildmage extends CardImpl {
public SunhomeGuildmage(UUID ownerId) {
public SunhomeGuildmage(final SunhomeGuildmage card) {
public SunhomeGuildmage copy() {return new SunhomeGuildmage(this);
public class SylvanPrimordial extends CardImpl {
public SylvanPrimordial(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public SylvanPrimordial(final SylvanPrimordial card) {
public SylvanPrimordial copy() {return new SylvanPrimordial(this);
class SylvanPrimordialEffect extends OneShotEffect {
public SylvanPrimordialEffect() {
public SylvanPrimordialEffect(final SylvanPrimordialEffect effect) {
public SylvanPrimordialEffect copy() {return new SylvanPrimordialEffect(this);
public boolean apply(Game game, Ability source) {return result;return new SyndicateEnforcer(this);
public class SyndicOfTithes extends CardImpl {
public SyndicOfTithes(UUID ownerId) {
public SyndicOfTithes(final SyndicOfTithes card) {
public SyndicOfTithes copy() {return new SyndicOfTithes(this);
public class TinStreetMarket extends CardImpl {
public TinStreetMarket(UUID ownerId) {
public TinStreetMarket(final TinStreetMarket card) {
public TinStreetMarket copy() {return new TinStreetMarket(this);
public class TotallyLost extends CardImpl {
public TotallyLost(UUID ownerId) {
public TotallyLost(final TotallyLost card) {
public TotallyLost copy() {return new TotallyLost(this);
public class TowerDefense extends CardImpl {
public TowerDefense(UUID ownerId) {
public TowerDefense(final TowerDefense card) {
public TowerDefense copy() {return new TowerDefense(this);
public class ToweringThunderfist extends CardImpl {
public ToweringThunderfist(UUID ownerId) {
public ToweringThunderfist(final ToweringThunderfist card) {
public ToweringThunderfist copy() {return new ToweringThunderfist(this);
public class TreasuryThrull extends CardImpl {
public TreasuryThrull(UUID ownerId) {
public TreasuryThrull(final TreasuryThrull card) {
public TreasuryThrull copy() {return new TreasuryThrull(this);
public class TruefirePaladin extends CardImpl {
public TruefirePaladin(UUID ownerId) {
public TruefirePaladin(final TruefirePaladin card) {
public TruefirePaladin copy() {return new TruefirePaladin(this);return new UndercityInformer(this);return new UndercityInformerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class UndercityPlague extends CardImpl {
public UndercityPlague(UUID ownerId) {
public UndercityPlague(final UndercityPlague card) {
public UndercityPlague copy() {return new UndercityPlague(this);
public class UnexpectedResults extends CardImpl {
public UnexpectedResults(UUID ownerId) {
public UnexpectedResults(final UnexpectedResults card) {
public UnexpectedResults copy() {return new UnexpectedResults(this);
class UnexpectedResultEffect extends OneShotEffect {
public UnexpectedResultEffect() {this.staticText = "Shuffle your library, then reveal the top card. If it's a nonland card, you may cast it without paying its mana cost. If it's a land card, you may put it onto the battlefield and return Unexpected Results to its owner's hand";
public UnexpectedResultEffect(final UnexpectedResultEffect effect) {
public UnexpectedResultEffect copy() {return new UnexpectedResultEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return sourceCard.moveToZone(Zone.HAND, source.getSourceId(), game, false);return controller.cast(card.getSpellAbility(), game, true);return true;return false;
public class UrbanEvolution extends CardImpl {
public UrbanEvolution(UUID ownerId) {
public UrbanEvolution(final UrbanEvolution card) {
public UrbanEvolution copy() {return new UrbanEvolution(this);
public class UrbisProtector extends CardImpl {
public UrbisProtector(UUID ownerId) {
public UrbisProtector(final UrbisProtector card) {
public UrbisProtector copy() {return new UrbisProtector(this);
public class VerdantHaven extends CardImpl {
public VerdantHaven(UUID ownerId) {
public VerdantHaven(final VerdantHaven card) {
public VerdantHaven copy() {return new VerdantHaven(this);
class VerdantHavenTriggeredAbility extends TriggeredManaAbility {
public VerdantHavenTriggeredAbility() {
public VerdantHavenTriggeredAbility(final VerdantHavenTriggeredAbility ability) {
public VerdantHavenTriggeredAbility copy() {return new VerdantHavenTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return enchantment != null && event.getSourceId().equals(enchantment.getAttachedTo());
public String getRule() {return "Whenever enchanted land is tapped for mana, its controller adds one mana of any color to his or her mana pool.";
public class ViashinoShanktail extends CardImpl {
public ViashinoShanktail(UUID ownerId) {
public ViashinoShanktail(final ViashinoShanktail card) {
public ViashinoShanktail copy() {return new ViashinoShanktail(this);
public class VizkopaConfessor extends CardImpl {
public VizkopaConfessor(UUID ownerId) {
public VizkopaConfessor(final VizkopaConfessor card) {
public VizkopaConfessor copy() {return new VizkopaConfessor(this);
class VizkopaConfessorEffect extends OneShotEffect {
public VizkopaConfessorEffect() {
public VizkopaConfessorEffect(final VizkopaConfessorEffect effect) {
public VizkopaConfessorEffect copy() {return new VizkopaConfessorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VizkopaGuildmage extends CardImpl {
public VizkopaGuildmage(UUID ownerId) {
public VizkopaGuildmage(final VizkopaGuildmage card) {
public VizkopaGuildmage copy() {return new VizkopaGuildmage(this);
class VizkopaGuildmageDelayedTriggeredAbility extends DelayedTriggeredAbility {
public VizkopaGuildmageDelayedTriggeredAbility() {
public VizkopaGuildmageDelayedTriggeredAbility(VizkopaGuildmageDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.GAINED_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public VizkopaGuildmageDelayedTriggeredAbility copy() {return new VizkopaGuildmageDelayedTriggeredAbility(this);
public String getRule() {return "Whenever you gain life this turn, " + modes.getText();return new OpponentsLoseLifeEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class Voidwalk extends CardImpl {
public Voidwalk(UUID ownerId) {
public Voidwalk(final Voidwalk card) {
public Voidwalk copy() {return new Voidwalk(this);
class VoidwalkEffect extends OneShotEffect {
VoidwalkEffect() {
VoidwalkEffect(VoidwalkEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public VoidwalkEffect copy() {return new VoidwalkEffect(this);
public class WarmindInfantry extends CardImpl {
public WarmindInfantry(UUID ownerId) {
public WarmindInfantry(final WarmindInfantry card) {
public WarmindInfantry copy() {return new WarmindInfantry(this);
public class WastelandViper extends CardImpl {
public WastelandViper(UUID ownerId) {
public WastelandViper(final WastelandViper card) {
public WastelandViper copy() {return new WastelandViper(this);
public class WightOfPrecinctSix extends CardImpl {
public WightOfPrecinctSix(UUID ownerId) {
public WightOfPrecinctSix(final WightOfPrecinctSix card) {
public WightOfPrecinctSix copy() {return new WightOfPrecinctSix(this);
class CardsInOpponentGraveyardsCount implements DynamicValue {
public CardsInOpponentGraveyardsCount() {
public CardsInOpponentGraveyardsCount(FilterCard filter) {
private CardsInOpponentGraveyardsCount(CardsInOpponentGraveyardsCount dynamicValue) {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amount;
public DynamicValue copy() {return new CardsInOpponentGraveyardsCount(this);
public String toString() {return "1";
public String getMessage() {return filter.getMessage();
public class WildwoodRebirth extends CardImpl {
public WildwoodRebirth(UUID ownerId) {
public WildwoodRebirth(final WildwoodRebirth card) {
public WildwoodRebirth copy() {return new WildwoodRebirth(this);
public class WojekHalberdiers extends CardImpl {
public WojekHalberdiers(UUID ownerId) {
public WojekHalberdiers(final WojekHalberdiers card) {
public WojekHalberdiers copy() {return new WojekHalberdiers(this);
public class WreckingOgre extends CardImpl {
public WreckingOgre(UUID ownerId) {
public WreckingOgre(final WreckingOgre card) {
public WreckingOgre copy() {return new WreckingOgre(this);
public class ZameckGuildmage extends CardImpl {
public ZameckGuildmage(UUID ownerId) {
public ZameckGuildmage(final ZameckGuildmage card) {
public ZameckGuildmage copy() {return new ZameckGuildmage(this);
class ZameckGuildmageEntersBattlefieldEffect extends ReplacementEffectImpl {
public ZameckGuildmageEntersBattlefieldEffect() {
public ZameckGuildmageEntersBattlefieldEffect(ZameckGuildmageEntersBattlefieldEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.ENTERS_THE_BATTLEFIELD);
public boolean applies(GameEvent event, Ability source, Game game) {return permanent != null && permanent.getControllerId().equals(source.getControllerId()) && permanent.getCardType().contains(CardType.CREATURE);
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public ZameckGuildmageEntersBattlefieldEffect copy() {return new ZameckGuildmageEntersBattlefieldEffect(this);
public class ZarichiTiger extends CardImpl {
public ZarichiTiger(UUID ownerId) {
public ZarichiTiger(final ZarichiTiger card) {
public ZarichiTiger copy() {return new ZarichiTiger(this);
public class ZhurTaaSwine extends CardImpl {
public ZhurTaaSwine(UUID ownerId) {
public ZhurTaaSwine(final ZhurTaaSwine card) {
public ZhurTaaSwine copy() {return new ZhurTaaSwine(this);
public class AbsolverThrull extends CardImpl {
public AbsolverThrull(UUID ownerId) {
public AbsolverThrull(final AbsolverThrull card) {
public AbsolverThrull copy() {return new AbsolverThrull(this);
public class AgentOfMasks extends CardImpl {
public AgentOfMasks(UUID ownerId) {
public AgentOfMasks(final AgentOfMasks card) {
public AgentOfMasks copy() {return new AgentOfMasks(this);
class AgentOfMasksEffect extends OneShotEffect {
public AgentOfMasksEffect() {
public AgentOfMasksEffect(final AgentOfMasksEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public AgentOfMasksEffect copy() {return new AgentOfMasksEffect(this);
public class AngelOfDespair extends CardImpl {
public AngelOfDespair (UUID ownerId) {
public AngelOfDespair (final AngelOfDespair card) {
public AngelOfDespair copy() {return new AngelOfDespair(this);
public class BatteringWurm extends CardImpl {
public BatteringWurm(UUID ownerId) {
public BatteringWurm(final BatteringWurm card) {
public BatteringWurm copy() {return new BatteringWurm(this);
public class BelfrySpirit extends CardImpl {
public BelfrySpirit(UUID ownerId) {
public BelfrySpirit(final BelfrySpirit card) {
public BelfrySpirit copy() {return new BelfrySpirit(this);
public class BlindHunter extends CardImpl {
public BlindHunter(UUID ownerId) {
public BlindHunter(final BlindHunter card) {
public BlindHunter copy() {return new BlindHunter(this);
public class Borborygmos extends CardImpl {
public Borborygmos(UUID ownerId) {
public Borborygmos(final Borborygmos card) {
public Borborygmos copy() {return new Borborygmos(this);
public class BurningTreeShaman extends CardImpl {
public BurningTreeShaman(UUID ownerId) {
public BurningTreeShaman(final BurningTreeShaman card) {
public BurningTreeShaman copy() {return new BurningTreeShaman(this);
class BurningTreeShamanTriggeredAbility extends TriggeredAbilityImpl {
BurningTreeShamanTriggeredAbility() {
BurningTreeShamanTriggeredAbility(final BurningTreeShamanTriggeredAbility ability) {
public BurningTreeShamanTriggeredAbility copy() {return new BurningTreeShamanTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ACTIVATED_ABILITY;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player activates an ability that isn't a mana ability, {this} deals 1 damage to that player.";
public class Castigate extends CardImpl {
public Castigate(UUID ownerId) {
public Castigate(final Castigate card) {
public Castigate copy() {return new Castigate(this);
public class CausticRain extends CardImpl {
public CausticRain(UUID ownerId) {
public CausticRain(final CausticRain card) {
public CausticRain copy() {return new CausticRain(this);
public class CerebralVortex extends CardImpl {
public CerebralVortex(UUID ownerId) {
public CerebralVortex(final CerebralVortex card) {
public CerebralVortex copy() {return new CerebralVortex(this);
class CerebralVortexEffect extends OneShotEffect {
CerebralVortexEffect() {
CerebralVortexEffect(final CerebralVortexEffect effect) {
public CerebralVortexEffect copy() {return new CerebralVortexEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class CerebralVortexWatcher extends Watcher {
CerebralVortexWatcher() {
CerebralVortexWatcher(final CerebralVortexWatcher watcher) {
public void watch(GameEvent event, Game game) {
public void reset() {
public int getDraws(UUID playerId) {return draws.get(playerId);return 0;
public CerebralVortexWatcher copy() {return new CerebralVortexWatcher(this);
public class CrystalSeer extends CardImpl {
public CrystalSeer (UUID ownerId) {
public CrystalSeer (final CrystalSeer card) {
public CrystalSeer copy() {return new CrystalSeer(this);
public class CullingSun extends CardImpl {
public CullingSun(UUID ownerId) {
public CullingSun(final CullingSun card) {
public CullingSun copy() {return new CullingSun(this);
public class DaggerclawImp extends CardImpl {
public DaggerclawImp (UUID ownerId) {
public DaggerclawImp (final DaggerclawImp card) {
public DaggerclawImp copy() {return new DaggerclawImp(this);
public class DebtorsKnell extends CardImpl {
public DebtorsKnell(UUID ownerId) {
public DebtorsKnell(final DebtorsKnell card) {
public DebtorsKnell copy() {return new DebtorsKnell(this);
public class DouseInGloom extends CardImpl {
public DouseInGloom(UUID ownerId) {
public DouseInGloom(final DouseInGloom card) {
public DouseInGloom copy() {return new DouseInGloom(this);
public class DrownedRusalka extends CardImpl {
public DrownedRusalka(UUID ownerId) {
public DrownedRusalka(final DrownedRusalka card) {
public DrownedRusalka copy() {return new DrownedRusalka(this);
public class DryadSophisticate extends CardImpl {
public DryadSophisticate(UUID ownerId) {
public DryadSophisticate(final DryadSophisticate card) {
public DryadSophisticate copy() {return new DryadSophisticate(this);
class NonbasicLandwalkAbility extends LandwalkAbility {
public NonbasicLandwalkAbility() {
public NonbasicLandwalkAbility(final NonbasicLandwalkAbility ability) {
public NonbasicLandwalkAbility copy() {return new NonbasicLandwalkAbility(this);
public class DuneBroodNephilim extends CardImpl {
public DuneBroodNephilim(UUID ownerId) {
public DuneBroodNephilim(final DuneBroodNephilim card) {
public DuneBroodNephilim copy() {return new DuneBroodNephilim(this);
class DuneBroodNephilimToken extends Token {
DuneBroodNephilimToken() {
public class Electrolyze extends CardImpl {
public Electrolyze(UUID ownerId) {
public Electrolyze(final Electrolyze card) {
public Electrolyze copy() {return new Electrolyze(this);
public class ExhumerThrull extends CardImpl {
public ExhumerThrull(UUID ownerId) {
public ExhumerThrull(final ExhumerThrull card) {
public ExhumerThrull copy() {return new ExhumerThrull(this);
public class FeralAnimist extends CardImpl {
public FeralAnimist(UUID ownerId) {
public FeralAnimist(final FeralAnimist card) {
public FeralAnimist copy() {return new FeralAnimist(this);
public class Frazzle extends CardImpl {
public Frazzle(UUID ownerId) {
public Frazzle(final Frazzle card) {
public Frazzle copy() {return new Frazzle(this);
public class Gelectrode extends CardImpl {
public Gelectrode(UUID ownerId) {
public Gelectrode(final Gelectrode card) {
public Gelectrode copy() {return new Gelectrode(this);
public class GhorClanBloodscale extends CardImpl {
public GhorClanBloodscale(UUID ownerId) {
public GhorClanBloodscale(final GhorClanBloodscale card) {
public GhorClanBloodscale copy() {return new GhorClanBloodscale(this);
public class GhorClanSavage extends CardImpl {
public GhorClanSavage(UUID ownerId) {
public GhorClanSavage(final GhorClanSavage card) {
public GhorClanSavage copy() {return new GhorClanSavage(this);
public class GhostCouncilOfOrzhova extends CardImpl {
public GhostCouncilOfOrzhova(UUID ownerId) {
public GhostCouncilOfOrzhova(final GhostCouncilOfOrzhova card) {
public GhostCouncilOfOrzhova copy() {return new GhostCouncilOfOrzhova(this);
class GhostCouncilOfOrzhovaEffect extends OneShotEffect {
GhostCouncilOfOrzhovaEffect() {
GhostCouncilOfOrzhovaEffect(final GhostCouncilOfOrzhovaEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public GhostCouncilOfOrzhovaEffect copy() {return new GhostCouncilOfOrzhovaEffect(this);
public class Ghostway extends CardImpl {
public Ghostway(UUID ownerId) {
public Ghostway(final Ghostway card) {
public Ghostway copy() {return new Ghostway(this);
class GhostwayEffect extends OneShotEffect {
public GhostwayEffect() {
public GhostwayEffect(final GhostwayEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GhostwayEffect copy() {return new GhostwayEffect(this);return new GiantSolifuge(this);
public class GodlessShrine extends CardImpl {
public GodlessShrine (UUID ownerId) {
public GodlessShrine (final GodlessShrine card) {
public GodlessShrine copy() {return new GodlessShrine(this);
public class GravenDominator extends CardImpl {
public GravenDominator(UUID ownerId) {
public GravenDominator(final GravenDominator card) {
public GravenDominator copy() {return new GravenDominator(this);
public class GruulGuildmage extends CardImpl {
public GruulGuildmage(UUID ownerId) {
public GruulGuildmage(final GruulGuildmage card) {
public GruulGuildmage copy() {return new GruulGuildmage(this);return new GruulNodorog(this);
public class GruulSignet extends CardImpl {
public GruulSignet(UUID ownerId) {
public GruulSignet(final GruulSignet card) {
public GruulSignet copy() {return new GruulSignet(this);
public class GruulWarPlow extends CardImpl {
public GruulWarPlow(UUID ownerId) {
public GruulWarPlow(final GruulWarPlow card) {
public GruulWarPlow copy() {return new GruulWarPlow(this);
class GruulWarPlowToken extends Token {
GruulWarPlowToken() {return new HarrierGriffin(this);
public class HatchingPlans extends CardImpl {
public HatchingPlans (UUID ownerId) {
public HatchingPlans (final HatchingPlans card) {
public HatchingPlans copy() {return new HatchingPlans(this);
public class HissingMiasma extends CardImpl {
public HissingMiasma(UUID ownerId) {
public HissingMiasma(final HissingMiasma card) {
public HissingMiasma copy() {return new HissingMiasma(this);
public class HypervoltGrasp extends CardImpl {
public HypervoltGrasp(UUID ownerId) {
public HypervoltGrasp(final HypervoltGrasp card) {
public HypervoltGrasp copy() {return new HypervoltGrasp(this);
public class InfiltratorsMagemark extends CardImpl {
public InfiltratorsMagemark(UUID ownerId) {
public InfiltratorsMagemark(final InfiltratorsMagemark card) {
public InfiltratorsMagemark copy() {return new InfiltratorsMagemark(this);
class InfiltratorsMagemarkCantBeBlockedAllEffect extends RestrictionEffect {
public InfiltratorsMagemarkCantBeBlockedAllEffect(FilterPermanent filter, Duration duration) {
public InfiltratorsMagemarkCantBeBlockedAllEffect(InfiltratorsMagemarkCantBeBlockedAllEffect effect) {
public InfiltratorsMagemarkCantBeBlockedAllEffect copy() {return new InfiltratorsMagemarkCantBeBlockedAllEffect(this);
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return blocker.getAbilities().contains(DefenderAbility.getInstance());
public boolean applies(Permanent permanent, Ability source, Game game) {return filter.match(permanent, source.getSourceId(), source.getControllerId(), game);
public class InkTreaderNephilim extends CardImpl {
public InkTreaderNephilim(UUID ownerId) {
public InkTreaderNephilim(final InkTreaderNephilim card) {
public InkTreaderNephilim copy() {return new InkTreaderNephilim(this);
class InkTreaderNephilimTriggeredAbility extends TriggeredAbilityImpl {
InkTreaderNephilimTriggeredAbility() {
InkTreaderNephilimTriggeredAbility(final InkTreaderNephilimTriggeredAbility ability) {
public InkTreaderNephilimTriggeredAbility copy() {return new InkTreaderNephilimTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public boolean checkInterveningIfClause(Game game) {return true;return false;
public String getRule() {return "Whenever a player casts an instant or sorcery spell, if that spell targets only {this}, copy the spell for each other creature that spell could target. Each copy targets a different one of those creatures.";
class InkTreaderNephilimEffect extends CopySpellForEachItCouldTargetEffect<Permanent> {
public InkTreaderNephilimEffect() {
public InkTreaderNephilimEffect(InkTreaderNephilimEffect effect) {
private InkTreaderNephilimEffect(FilterInPlay<Permanent> filter) {
protected Spell getSpell(Game game, Ability source) {return (Spell) getValue("triggeringSpell");
protected boolean changeTarget(Target target, Game game, Ability source) {return true;
public InkTreaderNephilimEffect copy() {return new InkTreaderNephilimEffect(this);
public class InvokeTheFiremind extends CardImpl {
public InvokeTheFiremind(UUID ownerId) {
public InvokeTheFiremind(final InvokeTheFiremind card) {
public InvokeTheFiremind copy() {return new InvokeTheFiremind(this);
public class IzzetBoilerworks extends CardImpl {
public IzzetBoilerworks(UUID ownerId) {
public IzzetBoilerworks(final IzzetBoilerworks card) {
public IzzetBoilerworks copy() {return new IzzetBoilerworks(this);
public class IzzetChronarch extends CardImpl {
public IzzetChronarch(UUID ownerId) {
public IzzetChronarch(final IzzetChronarch card) {
public IzzetChronarch copy() {return new IzzetChronarch(this);
public class IzzetGuildmage extends CardImpl {
public IzzetGuildmage(UUID ownerId) {
public IzzetGuildmage(final IzzetGuildmage card) {
public IzzetGuildmage copy() {return new IzzetGuildmage(this);
public class IzzetSignet extends CardImpl {
public IzzetSignet(UUID ownerId) {
public IzzetSignet(final IzzetSignet card) {
public IzzetSignet copy() {return new IzzetSignet(this);
public class LeapOfFlame extends CardImpl {
public LeapOfFlame(UUID ownerId) {
public LeapOfFlame(final LeapOfFlame card) {
public LeapOfFlame copy() {return new LeapOfFlame(this);
public class LeylineOfSingularity extends CardImpl {
public LeylineOfSingularity(UUID ownerId) {
public LeylineOfSingularity(final LeylineOfSingularity card) {
public LeylineOfSingularity copy() {return new LeylineOfSingularity(this);
class SetSupertypeAllEffect extends ContinuousEffectImpl {
public SetSupertypeAllEffect(Duration duration, FilterPermanent filter) {
public SetSupertypeAllEffect(final SetSupertypeAllEffect effect) {
public SetSupertypeAllEffect copy() {return new SetSupertypeAllEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getText(Mode mode) {return "All nonland permanents are legendary";
public class LeylineOfTheMeek extends CardImpl {
public LeylineOfTheMeek(UUID ownerId) {
public LeylineOfTheMeek(final LeylineOfTheMeek card) {
public LeylineOfTheMeek copy() {return new LeylineOfTheMeek(this);
public class LionheartMaverick extends CardImpl {
public LionheartMaverick(UUID ownerId) {
public LionheartMaverick(final LionheartMaverick card) {
public LionheartMaverick copy() {return new LionheartMaverick(this);
public class MizziumTransreliquat extends CardImpl {
public MizziumTransreliquat(UUID ownerId) {
public MizziumTransreliquat(final MizziumTransreliquat card) {
public MizziumTransreliquat copy() {return new MizziumTransreliquat(this);
class MizziumTransreliquatCopyEffect extends OneShotEffect {
public MizziumTransreliquatCopyEffect() {
public MizziumTransreliquatCopyEffect(final MizziumTransreliquatCopyEffect effect) {
public MizziumTransreliquatCopyEffect copy() {return new MizziumTransreliquatCopyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MizziumTransreliquatCopyAndGainAbilityEffect extends OneShotEffect {
public MizziumTransreliquatCopyAndGainAbilityEffect() {
public MizziumTransreliquatCopyAndGainAbilityEffect(final MizziumTransreliquatCopyAndGainAbilityEffect effect) {
public MizziumTransreliquatCopyAndGainAbilityEffect copy() {return new MizziumTransreliquatCopyAndGainAbilityEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new Mortify(this);
public class MourningThrull extends CardImpl {
public MourningThrull(UUID ownerId) {
public MourningThrull(final MourningThrull card) {
public MourningThrull copy() {return new MourningThrull(this);
public class NivMizzetTheFiremind extends CardImpl {
public NivMizzetTheFiremind(UUID ownerId) {
public NivMizzetTheFiremind(final NivMizzetTheFiremind card) {
public NivMizzetTheFiremind copy() {return new NivMizzetTheFiremind(this);
public class OrderOfTheStars extends CardImpl {
public OrderOfTheStars(UUID ownerId) {
public OrderOfTheStars(final OrderOfTheStars card) {
public OrderOfTheStars copy() {return new OrderOfTheStars(this);
public class OrzhovaTheChurchOfDeals extends CardImpl {
public OrzhovaTheChurchOfDeals(UUID ownerId) {
public OrzhovaTheChurchOfDeals(final OrzhovaTheChurchOfDeals card) {
public OrzhovaTheChurchOfDeals copy() {return new OrzhovaTheChurchOfDeals(this);
public class OrzhovBasilica extends CardImpl {
public OrzhovBasilica(UUID ownerId) {
public OrzhovBasilica(final OrzhovBasilica card) {
public OrzhovBasilica copy() {return new OrzhovBasilica(this);
public class OrzhovEuthanist extends CardImpl {
public OrzhovEuthanist(UUID ownerId) {
public OrzhovEuthanist(final OrzhovEuthanist card) {
public OrzhovEuthanist copy() {return new OrzhovEuthanist(this);
public class OrzhovGuildmage extends CardImpl {
public OrzhovGuildmage(UUID ownerId) {
public OrzhovGuildmage(final OrzhovGuildmage card) {
public OrzhovGuildmage copy() {return new OrzhovGuildmage(this);return new OrzhovPontiff(this);
public class OrzhovSignet extends CardImpl {
public OrzhovSignet(UUID ownerId) {
public OrzhovSignet(final OrzhovSignet card) {
public OrzhovSignet copy() {return new OrzhovSignet(this);
public class OstiaryThrull extends CardImpl {
public OstiaryThrull(UUID ownerId) {
public OstiaryThrull(final OstiaryThrull card) {
public OstiaryThrull copy() {return new OstiaryThrull(this);
public class Petrahydrox extends CardImpl {
public Petrahydrox(UUID ownerId) {
public Petrahydrox(final Petrahydrox card) {
public Petrahydrox copy() {return new Petrahydrox(this);
public class PilloryOfTheSleepless extends CardImpl {
public PilloryOfTheSleepless(UUID ownerId) {
public PilloryOfTheSleepless(final PilloryOfTheSleepless card) {
public PilloryOfTheSleepless copy() {return new PilloryOfTheSleepless(this);
public class PlaguedRusalka extends CardImpl {
public PlaguedRusalka(UUID ownerId) {
public PlaguedRusalka(final PlaguedRusalka card) {
public PlaguedRusalka copy() {return new PlaguedRusalka(this);
public class Quicken extends CardImpl {
public Quicken(UUID ownerId) {
public Quicken(final Quicken card) {
public Quicken copy() {return new Quicken(this);
class QuickenAsThoughEffect extends AsThoughEffectImpl {
public QuickenAsThoughEffect() {
public QuickenAsThoughEffect(final QuickenAsThoughEffect effect) {
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public QuickenAsThoughEffect copy() {return new QuickenAsThoughEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
class QuickenWatcher extends Watcher {
public QuickenWatcher() {
public QuickenWatcher(final QuickenWatcher watcher) {
public QuickenWatcher copy() {return new QuickenWatcher(this);
public void watch(GameEvent event, Game game) {
public void addQuickenSpell(UUID playerId, UUID sourceId, int zoneChangeCounter) {
public boolean isQuickenSpellActive(UUID playerId, UUID sourceId, int zoneChangeCounter) {return activeQuickenSpells.contains(spellKey);
public void reset() {
public class RabbleRouser extends CardImpl {
public RabbleRouser(UUID ownerId) {
public RabbleRouser(final RabbleRouser card) {
public RabbleRouser copy() {return new RabbleRouser(this);
public class Repeal extends CardImpl {
public Repeal(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public Repeal(final Repeal card) {
public Repeal copy() {return new Repeal(this);
public class RestlessBones extends CardImpl {
public RestlessBones(UUID ownerId) {
public RestlessBones(final RestlessBones card) {
public RestlessBones copy() {return new RestlessBones(this);
public class RumblingSlum extends CardImpl {
public RumblingSlum(UUID ownerId) {
public RumblingSlum(final RumblingSlum card) {
public RumblingSlum copy() {return new RumblingSlum(this);
public class Runeboggle extends CardImpl {
public Runeboggle(UUID ownerId) {
public Runeboggle(final Runeboggle card) {
public Runeboggle copy() {return new Runeboggle(this);
public class ScabClanMauler extends CardImpl {
public ScabClanMauler(UUID ownerId) {
public ScabClanMauler(final ScabClanMauler card) {
public ScabClanMauler copy() {return new ScabClanMauler(this);
public class Schismotivate extends CardImpl {
public Schismotivate(UUID ownerId) {
public Schismotivate(final Schismotivate card) {
public Schismotivate copy() {return new Schismotivate(this);
class SchismotivateEffect extends ContinuousEffectImpl {
public SchismotivateEffect() {
public SchismotivateEffect(final SchismotivateEffect effect) {
public SchismotivateEffect copy() {return new SchismotivateEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ScorchedRusalka extends CardImpl {
public ScorchedRusalka(UUID ownerId) {
public ScorchedRusalka(final ScorchedRusalka card) {
public ScorchedRusalka copy() {return new ScorchedRusalka(this);return new ShadowLance(this);
public class ShatteringSpree extends CardImpl {
public ShatteringSpree(UUID ownerId) {
public ShatteringSpree(final ShatteringSpree card) {
public ShatteringSpree copy() {return new ShatteringSpree(this);
public class ShriekingGrotesque extends CardImpl {
public ShriekingGrotesque(UUID ownerId) {
public ShriekingGrotesque(final ShriekingGrotesque card) {
public ShriekingGrotesque copy() {return new ShriekingGrotesque(this);
public class SiegeOfTowers extends CardImpl {
public SiegeOfTowers(UUID ownerId) {
public SiegeOfTowers(final SiegeOfTowers card) {
public SiegeOfTowers copy() {return new SiegeOfTowers(this);
class SiegeOfTowersToken extends Token {
public SiegeOfTowersToken() {
public class SilhanaLedgewalker extends CardImpl {
public SilhanaLedgewalker (UUID ownerId) {
public SilhanaLedgewalker (final SilhanaLedgewalker card) {
public SilhanaLedgewalker copy() {return new SilhanaLedgewalker(this);
class SilhanaLedgewalkerEffect extends RestrictionEffect {
public SilhanaLedgewalkerEffect() {
public SilhanaLedgewalkerEffect(final SilhanaLedgewalkerEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return true;return false;
public SilhanaLedgewalkerEffect copy() {return new SilhanaLedgewalkerEffect(this);
public class SilhanaStarfletcher extends CardImpl {
public SilhanaStarfletcher(UUID ownerId) {
public SilhanaStarfletcher(final SilhanaStarfletcher card) {
public SilhanaStarfletcher copy() {return new SilhanaStarfletcher(this);
class SilhanaStarfletcherManaEffect extends ManaEffect {
public SilhanaStarfletcherManaEffect() {
public SilhanaStarfletcherManaEffect(final SilhanaStarfletcherManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public Mana getMana(Game game, Ability source) {return new Mana(ColoredManaSymbol.lookup(color.toString().charAt(0)));return null;
public SilhanaStarfletcherManaEffect copy() {return new SilhanaStarfletcherManaEffect(this);
public class SkarrganPitSkulk extends CardImpl {
public SkarrganPitSkulk(UUID ownerId) {
public SkarrganPitSkulk(final SkarrganPitSkulk card) {
public SkarrganPitSkulk copy() {return new SkarrganPitSkulk(this);
public class SkarrgTheRagePits extends CardImpl {
public SkarrgTheRagePits(UUID ownerId) {
public SkarrgTheRagePits(final SkarrgTheRagePits card) {
public SkarrgTheRagePits copy() {return new SkarrgTheRagePits(this);
public class SkeletalVampire extends CardImpl {
public SkeletalVampire(UUID ownerId) {
public SkeletalVampire(final SkeletalVampire card) {
public SkeletalVampire copy() {return new SkeletalVampire(this);
class BatToken extends Token {
BatToken() {
public class SoulsOfTheFaultless extends CardImpl {
public SoulsOfTheFaultless(UUID ownerId) {
public SoulsOfTheFaultless(final SoulsOfTheFaultless card) {
public SoulsOfTheFaultless copy() {return new SoulsOfTheFaultless(this);
class SoulsOfTheFaultlessTriggeredAbility extends TriggeredAbilityImpl {
public SoulsOfTheFaultlessTriggeredAbility() {
public SoulsOfTheFaultlessTriggeredAbility(final SoulsOfTheFaultlessTriggeredAbility effect) {
public SoulsOfTheFaultlessTriggeredAbility copy() {return new SoulsOfTheFaultlessTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt combat damage, " + super.getRule();
class SoulsOfTheFaultlessEffect extends OneShotEffect {
public SoulsOfTheFaultlessEffect() {
public SoulsOfTheFaultlessEffect(final SoulsOfTheFaultlessEffect effect) {
public SoulsOfTheFaultlessEffect copy() {return new SoulsOfTheFaultlessEffect(this);
public boolean apply(Game game, Ability source) {return true;return new SpelltitheEnforcer(this);return new SpelltitheEnforcerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class StarvedRusalka extends CardImpl {
public StarvedRusalka(UUID ownerId) {
public StarvedRusalka(final StarvedRusalka card) {
public StarvedRusalka copy() {return new StarvedRusalka(this);
public class SteamVents extends CardImpl {
public SteamVents (UUID ownerId) {
public SteamVents (final SteamVents card) {
public SteamVents copy() {return new SteamVents(this);
public class StitchInTime extends CardImpl {
public StitchInTime(UUID ownerId) {
public StitchInTime(final StitchInTime card) {
public StitchInTime copy() {return new StitchInTime(this);
class StitchInTimeEffect extends OneShotEffect {
public StitchInTimeEffect() {
public StitchInTimeEffect(final StitchInTimeEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public StitchInTimeEffect copy() {return new StitchInTimeEffect(this);
public class StompingGround extends CardImpl {
public StompingGround(UUID ownerId) {
public StompingGround(final StompingGround card) {
public StompingGround copy() {return new StompingGround(this);
public class StormHerd extends CardImpl {
public StormHerd(UUID ownerId) {
public StormHerd(final StormHerd card) {
public StormHerd copy() {return new StormHerd(this);
public class Stratozeppelid extends CardImpl {
public Stratozeppelid(UUID ownerId) {
public Stratozeppelid(final Stratozeppelid card) {
public Stratozeppelid copy() {return new Stratozeppelid(this);
public class StreetbreakerWurm extends CardImpl {
public StreetbreakerWurm(UUID ownerId) {
public StreetbreakerWurm(final StreetbreakerWurm card) {
public StreetbreakerWurm copy() {return new StreetbreakerWurm(this);
public class TeysaOrzhovScion extends CardImpl {
public TeysaOrzhovScion(UUID ownerId) {
public TeysaOrzhovScion(final TeysaOrzhovScion card) {
public TeysaOrzhovScion copy() {return new TeysaOrzhovScion(this);
public class Thunderheads extends CardImpl {
public Thunderheads(UUID ownerId) {
public Thunderheads(final Thunderheads card) {
public Thunderheads copy() {return new Thunderheads(this);
class ThunderheadsEffect extends OneShotEffect {
public ThunderheadsEffect() {
public ThunderheadsEffect(ThunderheadsEffect effect) {
public ThunderheadsEffect copy() {return new ThunderheadsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class WeirdToken extends Token {
WeirdToken() {
public class TiborAndLumia extends CardImpl {
public TiborAndLumia(UUID ownerId) {
public TiborAndLumia(final TiborAndLumia card) {
public TiborAndLumia copy() {return new TiborAndLumia(this);
public class TinStreetHooligan extends CardImpl {
public TinStreetHooligan(UUID ownerId) {
public TinStreetHooligan(final TinStreetHooligan card) {
public TinStreetHooligan copy() {return new TinStreetHooligan(this);
public class ToArms extends CardImpl {
public ToArms(UUID ownerId) {
public ToArms(final ToArms card) {
public ToArms copy() {return new ToArms(this);
public class TorchDrake extends CardImpl {
public TorchDrake (UUID ownerId) {
public TorchDrake (final TorchDrake card) {
public TorchDrake copy() {return new TorchDrake(this);
public class TrainOfThought extends CardImpl {
public TrainOfThought(UUID ownerId) {
public TrainOfThought(final TrainOfThought card) {
public TrainOfThought copy() {return new TrainOfThought(this);
public class UlashtTheHateSeed extends CardImpl {
public UlashtTheHateSeed(UUID ownerId) {
public UlashtTheHateSeed(final UlashtTheHateSeed card) {
public UlashtTheHateSeed copy() {return new UlashtTheHateSeed(this);
class UlashtTheHateSeedEffect extends OneShotEffect {
UlashtTheHateSeedEffect() {
UlashtTheHateSeedEffect(final UlashtTheHateSeedEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public UlashtTheHateSeedEffect copy() {return new UlashtTheHateSeedEffect(this);
public class Vacuumelt extends CardImpl {
public Vacuumelt(UUID ownerId) {
public Vacuumelt(final Vacuumelt card) {
public Vacuumelt copy() {return new Vacuumelt(this);
public class WildCantor extends CardImpl {
public WildCantor(UUID ownerId) {
public WildCantor(final WildCantor card) {
public WildCantor copy() {return new WildCantor(this);
public class Wildsize extends CardImpl {
public Wildsize(UUID ownerId) {
public Wildsize(final Wildsize card) {
public Wildsize copy() {return new Wildsize(this);
public class WitchMawNephilim extends CardImpl {
public WitchMawNephilim(UUID ownerId) {
public WitchMawNephilim(final WitchMawNephilim card) {
public WitchMawNephilim copy() {return new WitchMawNephilim(this);
class WitchMawNephilimEffect extends OneShotEffect {
public WitchMawNephilimEffect() {
public WitchMawNephilimEffect(final WitchMawNephilimEffect effect) {
public WitchMawNephilimEffect copy() {return new WitchMawNephilimEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Withstand extends CardImpl {
public Withstand(UUID ownerId) {
public Withstand(final Withstand card) {
public Withstand copy() {return new Withstand(this);
public class WreakHavoc extends CardImpl {
public WreakHavoc(UUID ownerId) {
public WreakHavoc(final WreakHavoc card) {
public WreakHavoc copy() {return new WreakHavoc(this);
public class WurmweaverCoil extends CardImpl {
public WurmweaverCoil(UUID ownerId) {
public WurmweaverCoil(final WurmweaverCoil card) {
public WurmweaverCoil copy() {return new WurmweaverCoil(this);
public class YoreTillerNephilim extends CardImpl {
public YoreTillerNephilim(UUID ownerId) {
public YoreTillerNephilim(final YoreTillerNephilim card) {
public YoreTillerNephilim copy() {return new YoreTillerNephilim(this);
class YoreTillerNephilimEffect extends OneShotEffect {
public YoreTillerNephilimEffect() {this.staticText = "return target creature card from your graveyard to the battlefield tapped and attacking";
public YoreTillerNephilimEffect(final YoreTillerNephilimEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public YoreTillerNephilimEffect copy() {return new YoreTillerNephilimEffect(this);
public class DeusOfCalamity extends CardImpl {
public DeusOfCalamity(UUID ownerId) {
public DeusOfCalamity(final DeusOfCalamity card) {
public DeusOfCalamity copy() {return new DeusOfCalamity(this);
class DeusOfCalamityTriggeredAbility extends TriggeredAbilityImpl {
public DeusOfCalamityTriggeredAbility() {
public DeusOfCalamityTriggeredAbility(final DeusOfCalamityTriggeredAbility ability) {
public DeusOfCalamityTriggeredAbility copy() {return new DeusOfCalamityTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever Deus of Calamity deals 6 or more damage to an opponent, destroy target land that player controls.";
public class KavuPredator extends CardImpl {
public KavuPredator(UUID ownerId) {
public KavuPredator(final KavuPredator card) {
public KavuPredator copy() {return new KavuPredator(this);
class KavuPredatorTriggeredAbility extends TriggeredAbilityImpl {
public KavuPredatorTriggeredAbility() {
public KavuPredatorTriggeredAbility(final KavuPredatorTriggeredAbility ability) {
public KavuPredatorTriggeredAbility copy() {return new KavuPredatorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.GAINED_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent gains life, " + super.getRule();
class KavuPredatorEffect extends OneShotEffect {
public KavuPredatorEffect() {
public KavuPredatorEffect(final KavuPredatorEffect effect) {
public KavuPredatorEffect copy() {return new KavuPredatorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class KrosanTusker extends CardImpl {
public KrosanTusker(UUID ownerId) {
public KrosanTusker(final KrosanTusker card) {
public KrosanTusker copy() {return new KrosanTusker(this);
public class LlanowarReborn extends CardImpl {
public LlanowarReborn(UUID ownerId) {
public LlanowarReborn(final LlanowarReborn card) {
public LlanowarReborn copy() {return new LlanowarReborn(this);
public class OrcishLumberjack extends CardImpl {
public OrcishLumberjack(UUID ownerId) {
public OrcishLumberjack(final OrcishLumberjack card) {
public OrcishLumberjack copy() {return new OrcishLumberjack(this);
class OrcishLumberjackManaEffect extends ManaEffect {
public OrcishLumberjackManaEffect() {
public OrcishLumberjackManaEffect(final OrcishLumberjackManaEffect effect) {
public OrcishLumberjackManaEffect copy() {return new OrcishLumberjackManaEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public class ShowerOfSparks extends CardImpl {
public ShowerOfSparks(UUID ownerId) {
public ShowerOfSparks(final ShowerOfSparks card) {
public ShowerOfSparks copy() {return new ShowerOfSparks(this);
public class SkarrganFirebird extends CardImpl {
public SkarrganFirebird(UUID ownerId) {
public SkarrganFirebird(final SkarrganFirebird card) {
public SkarrganFirebird copy() {return new SkarrganFirebird(this);
class OpponentWasDealtDamageCondition implements Condition {
public OpponentWasDealtDamageCondition() {
public boolean apply(Game game, Ability source) {return watcher.conditionMet();
public String toString() {return "if an opponent was dealt damage this turn";
public class SkarrganSkybreaker extends CardImpl {
public SkarrganSkybreaker(UUID ownerId) {
public SkarrganSkybreaker(final SkarrganSkybreaker card) {
public SkarrganSkybreaker copy() {return new SkarrganSkybreaker(this);
public class UndyingRage extends CardImpl {
public UndyingRage(UUID ownerId) {
public UndyingRage(final UndyingRage card) {
public UndyingRage copy() {return new UndyingRage(this);
public class WindsOfRath extends CardImpl {
public WindsOfRath(UUID ownerId) {
public WindsOfRath(final WindsOfRath card) {
public WindsOfRath copy() {return new WindsOfRath(this);
public class AbbeyMatron1 extends CardImpl {
public AbbeyMatron1(UUID ownerId) {
public AbbeyMatron1(final AbbeyMatron1 card) {
public AbbeyMatron1 copy() {return new AbbeyMatron1(this);
public class AnabaAncestor extends CardImpl {
public AnabaAncestor(UUID ownerId) {
public AnabaAncestor(final AnabaAncestor card) {
public AnabaAncestor copy() {return new AnabaAncestor(this);
public class AnabaSpiritCrafter extends CardImpl {
public AnabaSpiritCrafter(UUID ownerId) {
public AnabaSpiritCrafter(final AnabaSpiritCrafter card) {
public AnabaSpiritCrafter copy() {return new AnabaSpiritCrafter(this);
public class AnHavvaInn extends CardImpl {
public AnHavvaInn(UUID ownerId) {
public AnHavvaInn(final AnHavvaInn card) {
public AnHavvaInn copy() {return new AnHavvaInn(this);
class AnHavvaInnEffect extends OneShotEffect {
public AnHavvaInnEffect() {
public AnHavvaInnEffect(final AnHavvaInnEffect effect) {
public AnHavvaInnEffect copy() {return new AnHavvaInnEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class AnHavvaTownship extends CardImpl {
public AnHavvaTownship(UUID ownerId) {
public AnHavvaTownship(final AnHavvaTownship card) {
public AnHavvaTownship copy() {return new AnHavvaTownship(this);
public class AysenAbbey extends CardImpl {
public AysenAbbey(UUID ownerId) {
public AysenAbbey(final AysenAbbey card) {
public AysenAbbey copy() {return new AysenAbbey(this);
public class AysenHighway extends CardImpl {
public AysenHighway(UUID ownerId) {
public AysenHighway(final AysenHighway card) {
public AysenHighway copy() {return new AysenHighway(this);
public class BlackCarriage extends CardImpl {
public BlackCarriage(UUID ownerId) {
public BlackCarriage(final BlackCarriage card) {
public BlackCarriage copy() {return new BlackCarriage(this);
public class CastleSengir extends CardImpl {
public CastleSengir(UUID ownerId) {
public CastleSengir(final CastleSengir card) {
public CastleSengir copy() {return new CastleSengir(this);
public class CemeteryGate1 extends CardImpl {
public CemeteryGate1(UUID ownerId) {
public CemeteryGate1(final CemeteryGate1 card) {
public CemeteryGate1 copy() {return new CemeteryGate1(this);
public class Chandler extends CardImpl {
public Chandler(UUID ownerId) {
public Chandler(final Chandler card) {
public Chandler copy() {return new Chandler(this);
public class CoralReef extends CardImpl {
public CoralReef(UUID ownerId) {
public CoralReef(final CoralReef card) {
public CoralReef copy() {return new CoralReef(this);
public class DeathSpeakers extends CardImpl {
public DeathSpeakers(UUID ownerId) {
public DeathSpeakers(final DeathSpeakers card) {
public DeathSpeakers copy() {return new DeathSpeakers(this);return new Didgeridoo(this);
public class DrudgeSpell extends CardImpl {
public DrudgeSpell(UUID ownerId) {
public DrudgeSpell(final DrudgeSpell card) {
public DrudgeSpell copy() {return new DrudgeSpell(this);
class SkeletonToken extends Token {
SkeletonToken() {
public class DrySpell1 extends CardImpl {
public DrySpell1(UUID ownerId) {
public DrySpell1(final DrySpell1 card) {
public DrySpell1 copy() {return new DrySpell1(this);
public class DwarvenPony extends CardImpl {
public DwarvenPony(UUID ownerId) {
public DwarvenPony(final DwarvenPony card) {
public DwarvenPony copy() {return new DwarvenPony(this);
public class DwarvenTrader1 extends CardImpl {
public DwarvenTrader1(UUID ownerId) {
public DwarvenTrader1(final DwarvenTrader1 card) {
public DwarvenTrader1 copy() {return new DwarvenTrader1(this);
public class EbonyRhino extends CardImpl {
public EbonyRhino(UUID ownerId) {
public EbonyRhino(final EbonyRhino card) {
public EbonyRhino copy() {return new EbonyRhino(this);
public class FeastOfTheUnicorn1 extends CardImpl {
public FeastOfTheUnicorn1(UUID ownerId) {
public FeastOfTheUnicorn1(final FeastOfTheUnicorn1 card) {
public FeastOfTheUnicorn1 copy() {return new FeastOfTheUnicorn1(this);
public class FolkOfAnHavva1 extends CardImpl {
public FolkOfAnHavva1(UUID ownerId) {
public FolkOfAnHavva1(final FolkOfAnHavva1 card) {
public FolkOfAnHavva1 copy() {return new FolkOfAnHavva1(this);
public class Forget extends CardImpl {
public Forget(UUID ownerId) {
public Forget(final Forget card) {
public Forget copy() {return new Forget(this);
class ForgetEffect extends OneShotEffect {
public ForgetEffect() {
public ForgetEffect(final ForgetEffect effect) {
public ForgetEffect copy() {return new ForgetEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Headstone extends CardImpl {
public Headstone(UUID ownerId) {
public Headstone(final Headstone card) {
public Headstone copy() {return new Headstone(this);
public class IhsansShade extends CardImpl {
public IhsansShade(UUID ownerId) {
public IhsansShade(final IhsansShade card) {
public IhsansShade copy() {return new IhsansShade(this);
public class IriniSengir extends CardImpl {
public IriniSengir(UUID ownerId) {
public IriniSengir(final IriniSengir card) {
public IriniSengir copy() {return new IriniSengir(this);
public class Jinx extends CardImpl {
public Jinx(UUID ownerId) {
public Jinx(final Jinx card) {
public Jinx copy() {return new Jinx(this);
public class Joven extends CardImpl {
public Joven(UUID ownerId) {
public Joven(final Joven card) {
public Joven copy() {return new Joven(this);
public class KoskunFalls extends CardImpl {
public KoskunFalls(UUID ownerId) {
public KoskunFalls(final KoskunFalls card) {
public KoskunFalls copy() {return new KoskunFalls(this);
public class KoskunKeep extends CardImpl {
public KoskunKeep(UUID ownerId) {
public KoskunKeep(final KoskunKeep card) {
public KoskunKeep copy() {return new KoskunKeep(this);
public class LeapingLizard extends CardImpl {
public LeapingLizard(UUID ownerId) {
public LeapingLizard(final LeapingLizard card) {
public LeapingLizard copy() {return new LeapingLizard(this);
public class MesaFalcon1 extends CardImpl {
public MesaFalcon1(UUID ownerId) {
public MesaFalcon1(final MesaFalcon1 card) {
public MesaFalcon1 copy() {return new MesaFalcon1(this);
public class MysticDecree extends CardImpl {
public MysticDecree(UUID ownerId) {
public MysticDecree(final MysticDecree card) {
public MysticDecree copy() {return new MysticDecree(this);
public class Narwhal extends CardImpl {
public Narwhal(UUID ownerId) {
public Narwhal(final Narwhal card) {
public Narwhal copy() {return new Narwhal(this);
public class PrimalOrder extends CardImpl {
public PrimalOrder(UUID ownerId) {
public PrimalOrder(final PrimalOrder card) {
public PrimalOrder copy() {return new PrimalOrder(this);
class PrimalOrderDamageTargetEffect extends OneShotEffect{
public String getText(Mode mode) {return "{this} deals damage to that player equal to the number of nonbasic lands he or she controls";
public boolean apply(Game game, Ability source) {return true;return false;
public PrimalOrderDamageTargetEffect copy() {return new PrimalOrderDamageTargetEffect(this);
public class ReefPirates1 extends CardImpl {
public ReefPirates1(UUID ownerId) {
public ReefPirates1(final ReefPirates1 card) {
public ReefPirates1 copy() {return new ReefPirates1(this);
public class Renewal extends CardImpl {
public Renewal(UUID ownerId) {
public Renewal(final Renewal card) {
public Renewal copy() {return new Renewal(this);
public class Roots extends CardImpl {
public Roots(UUID ownerId) {
public Roots(final Roots card) {
public Roots copy() {return new Roots(this);
public class SeaSprite extends CardImpl {
public SeaSprite(UUID ownerId) {
public SeaSprite(final SeaSprite card) {
public SeaSprite copy() {return new SeaSprite(this);
public class SengirAutocrat extends CardImpl {
public SengirAutocrat(UUID ownerId) {
public SengirAutocrat(final SengirAutocrat card) {
public SengirAutocrat copy() {return new SengirAutocrat(this);
class SerfToken extends Token {
public SerfToken() {
public class SengirBats2 extends CardImpl {
public SengirBats2(UUID ownerId) {
public SengirBats2(final SengirBats2 card) {
public SengirBats2 copy() {return new SengirBats2(this);
public class SerraAviary extends CardImpl {
public SerraAviary(UUID ownerId) {
public SerraAviary(final SerraAviary card) {
public SerraAviary copy() {return new SerraAviary(this);
public class SerratedArrows extends CardImpl {
public SerratedArrows(UUID ownerId) {
public SerratedArrows(final SerratedArrows card) {
public SerratedArrows copy() {return new SerratedArrows(this);
public class Torture1 extends CardImpl {
public Torture1(UUID ownerId) {
public Torture1(final Torture1 card) {
public Torture1 copy() {return new Torture1(this);
public class VeldraneOfSengir extends CardImpl {
public VeldraneOfSengir(UUID ownerId) {
public VeldraneOfSengir(final VeldraneOfSengir card) {
public VeldraneOfSengir copy() {return new VeldraneOfSengir(this);
public class WallOfKelp extends CardImpl {
public WallOfKelp(UUID ownerId) {
public WallOfKelp(final WallOfKelp card) {
public WallOfKelp copy() {return new WallOfKelp(this);
class KelpToken extends Token {
public KelpToken() {
public class WillowFaerie1 extends CardImpl {
public WillowFaerie1(UUID ownerId) {
public WillowFaerie1(final WillowFaerie1 card) {
public WillowFaerie1 copy() {return new WillowFaerie1(this);
public class WillowPriestess extends CardImpl {
public WillowPriestess(UUID ownerId) {
public WillowPriestess(final WillowPriestess card) {
public WillowPriestess copy() {return new WillowPriestess(this);
public class WinterSky extends CardImpl {
public WinterSky(UUID ownerId) {
public WinterSky(final WinterSky card) {
public WinterSky copy() {return new WinterSky(this);
class WinterSkyEffect extends OneShotEffect {
public WinterSkyEffect() {
public WinterSkyEffect(WinterSkyEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public WinterSkyEffect copy() {return new WinterSkyEffect(this);
public class WizardsSchool extends CardImpl {
public WizardsSchool(UUID ownerId) {
public WizardsSchool(final WizardsSchool card) {
public WizardsSchool copy() {return new WizardsSchool(this);
public class AdarkarSentinel extends CardImpl {
public AdarkarSentinel(UUID ownerId) {
public AdarkarSentinel(final AdarkarSentinel card) {
public AdarkarSentinel copy() {return new AdarkarSentinel(this);
public class AegisOfTheMeek extends CardImpl {
public AegisOfTheMeek(UUID ownerId) {
public AegisOfTheMeek(final AegisOfTheMeek card) {
public AegisOfTheMeek copy() {return new AegisOfTheMeek(this);
public class AltarOfBone extends CardImpl {
public AltarOfBone(UUID ownerId) {
public AltarOfBone(final AltarOfBone card) {
public AltarOfBone copy() {return new AltarOfBone(this);
public class Anarchy extends CardImpl {
public Anarchy(UUID ownerId) {
public Anarchy(final Anarchy card) {
public Anarchy copy() {return new Anarchy(this);
public class ArnjlotsAscent extends CardImpl {
public ArnjlotsAscent(UUID ownerId) {
public ArnjlotsAscent(final ArnjlotsAscent card) {
public ArnjlotsAscent copy() {return new ArnjlotsAscent(this);
public class Aurochs extends CardImpl {
public Aurochs(UUID ownerId) {
public Aurochs(final Aurochs card) {
public Aurochs copy() {return new Aurochs(this);
public class BattleFrenzy extends CardImpl {
public BattleFrenzy(UUID ownerId) {
public BattleFrenzy(final BattleFrenzy card) {
public BattleFrenzy copy() {return new BattleFrenzy(this);
public class BlackScarab extends CardImpl {
public BlackScarab(UUID ownerId) {
public BlackScarab(final BlackScarab card) {
public BlackScarab copy() {return new BlackScarab(this);
class BlackScarabCondition implements Condition {
public boolean apply(Game game, Ability source) {return conditionApplies;
public class BlueScarab extends CardImpl {
public BlueScarab(UUID ownerId) {
public BlueScarab(final BlueScarab card) {
public BlueScarab copy() {return new BlueScarab(this);
class BlueScarabCondition implements Condition {
public boolean apply(Game game, Ability source) {return conditionApplies;
public class CentaurArcher extends CardImpl {
public CentaurArcher(UUID ownerId) {
public CentaurArcher(final CentaurArcher card) {
public CentaurArcher copy() {return new CentaurArcher(this);
public class ChubToad extends CardImpl {
public ChubToad(UUID ownerId) {
public ChubToad(final ChubToad card) {
public ChubToad copy() {return new ChubToad(this);
public class CircleOfProtectionBlack extends CardImpl {
public CircleOfProtectionBlack(UUID ownerId) {
public CircleOfProtectionBlack(final CircleOfProtectionBlack card) {
public CircleOfProtectionBlack copy() {return new CircleOfProtectionBlack(this);
public class CircleOfProtectionBlue extends CardImpl {
public CircleOfProtectionBlue(UUID ownerId) {
public CircleOfProtectionBlue(final CircleOfProtectionBlue card) {
public CircleOfProtectionBlue copy() {return new CircleOfProtectionBlue(this);
public class CircleOfProtectionGreen extends CardImpl {
public CircleOfProtectionGreen(UUID ownerId) {
public CircleOfProtectionGreen(final CircleOfProtectionGreen card) {
public CircleOfProtectionGreen copy() {return new CircleOfProtectionGreen(this);
public class CircleOfProtectionRed extends CardImpl {
public CircleOfProtectionRed(UUID ownerId) {
public CircleOfProtectionRed(final CircleOfProtectionRed card) {
public CircleOfProtectionRed copy() {return new CircleOfProtectionRed(this);
public class CircleOfProtectionWhite extends CardImpl {
public CircleOfProtectionWhite(UUID ownerId) {
public CircleOfProtectionWhite(final CircleOfProtectionWhite card) {
public CircleOfProtectionWhite copy() {return new CircleOfProtectionWhite(this);
public class Clairvoyance extends CardImpl {
public Clairvoyance(UUID ownerId) {
public Clairvoyance(final Clairvoyance card) {
public Clairvoyance copy() {return new Clairvoyance(this);
public class ColdSnap extends CardImpl {
public ColdSnap(UUID ownerId) {
public ColdSnap(final ColdSnap card) {
public ColdSnap copy() {return new ColdSnap(this);
class ColdSnapDamageTargetEffect extends OneShotEffect{
public String getText(Mode mode) {return "{this} deals damage to that player equal to the number of snow lands he or she controls";
public boolean apply(Game game, Ability source) {return true;return false;
public ColdSnapDamageTargetEffect copy() {return new ColdSnapDamageTargetEffect(this);
public class Conquer extends CardImpl {
public Conquer(UUID ownerId) {
public Conquer(final Conquer card) {
public Conquer copy() {return new Conquer(this);
public class CurseOfMaritLage extends CardImpl {
public CurseOfMaritLage(UUID ownerId) {
public CurseOfMaritLage(final CurseOfMaritLage card) {
public CurseOfMaritLage copy() {return new CurseOfMaritLage(this);
public class DanceOfTheDead extends CardImpl {
public DanceOfTheDead(UUID ownerId) {
public DanceOfTheDead(final DanceOfTheDead card) {
public DanceOfTheDead copy() {return new DanceOfTheDead(this);
class DanceOfTheDeadReAttachEffect extends OneShotEffect {
public DanceOfTheDeadReAttachEffect() {
public DanceOfTheDeadReAttachEffect(final DanceOfTheDeadReAttachEffect effect) {
public DanceOfTheDeadReAttachEffect copy() {return new DanceOfTheDeadReAttachEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
class DanceOfTheDeadLeavesBattlefieldTriggeredEffect extends OneShotEffect {
public DanceOfTheDeadLeavesBattlefieldTriggeredEffect() {
public DanceOfTheDeadLeavesBattlefieldTriggeredEffect(final DanceOfTheDeadLeavesBattlefieldTriggeredEffect effect) {
public DanceOfTheDeadLeavesBattlefieldTriggeredEffect copy() {return new DanceOfTheDeadLeavesBattlefieldTriggeredEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DanceOfTheDeadAttachEffect extends OneShotEffect {
public DanceOfTheDeadAttachEffect(Outcome outcome) {
public DanceOfTheDeadAttachEffect(Outcome outcome, String rule) {
public DanceOfTheDeadAttachEffect(final DanceOfTheDeadAttachEffect effect) {
public DanceOfTheDeadAttachEffect copy() {return new DanceOfTheDeadAttachEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DanceOfTheDeadChangeAbilityEffect extends ContinuousEffectImpl implements SourceEffect {
public DanceOfTheDeadChangeAbilityEffect() {
public DanceOfTheDeadChangeAbilityEffect(final DanceOfTheDeadChangeAbilityEffect effect) {
public DanceOfTheDeadChangeAbilityEffect copy() {return new DanceOfTheDeadChangeAbilityEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;return false;
class DanceOfTheDeadDoIfCostPaidEffect extends DoIfCostPaid {
public DanceOfTheDeadDoIfCostPaidEffect() {
public DanceOfTheDeadDoIfCostPaidEffect(final DanceOfTheDeadDoIfCostPaidEffect effect) {
public DanceOfTheDeadDoIfCostPaidEffect copy() {return new DanceOfTheDeadDoIfCostPaidEffect(this);
protected Player getPayingPlayer(Game game, Ability source) {return game.getPlayer(attachedTo.getControllerId());
public String getText(Mode mode) {return new StringBuilder("that player may ").append(getCostText())
public class Deflection extends CardImpl {
public Deflection(UUID ownerId) {
public Deflection(final Deflection card) {
public Deflection copy() {return new Deflection(this);
public class DemonicConsultation extends CardImpl {
public DemonicConsultation(UUID ownerId) {
public DemonicConsultation(final DemonicConsultation card) {
public DemonicConsultation copy() {return new DemonicConsultation(this);
class DemonicConsultationEffect extends OneShotEffect {
DemonicConsultationEffect() {
DemonicConsultationEffect(final DemonicConsultationEffect effect) {
public DemonicConsultationEffect copy() {return new DemonicConsultationEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class DwarvenArmory extends CardImpl {
public DwarvenArmory(UUID ownerId) {
public DwarvenArmory(final DwarvenArmory card) {
public DwarvenArmory copy() {return new DwarvenArmory(this);
public class FanaticalFever extends CardImpl {
public FanaticalFever(UUID ownerId) {
public FanaticalFever(final FanaticalFever card) {
public FanaticalFever copy() {return new FanaticalFever(this);
public class FieryJustice extends CardImpl {
public FieryJustice(UUID ownerId) {
public FieryJustice(final FieryJustice card) {
public FieryJustice copy() {return new FieryJustice(this);
public class FireCovenant extends CardImpl {
public FireCovenant(UUID ownerId) {
public FireCovenant(final FireCovenant card) {
public FireCovenant copy() {return new FireCovenant(this);
public class FlameSpirit extends CardImpl {
public FlameSpirit(UUID ownerId) {
public FlameSpirit(final FlameSpirit card) {
public FlameSpirit copy() {return new FlameSpirit(this);
public class FlowOfMaggots extends CardImpl {
public FlowOfMaggots(UUID ownerId) {
public FlowOfMaggots(final FlowOfMaggots card) {
public FlowOfMaggots copy() {return new FlowOfMaggots(this);
public class ForbiddenLore extends CardImpl {
public ForbiddenLore(UUID ownerId) {
public ForbiddenLore(final ForbiddenLore card) {
public ForbiddenLore copy() {return new ForbiddenLore(this);
public class ForceVoid extends CardImpl {
public ForceVoid(UUID ownerId) {
public ForceVoid(final ForceVoid card) {
public ForceVoid copy() {return new ForceVoid(this);
public class FyndhornBow extends CardImpl {
public FyndhornBow(UUID ownerId) {
public FyndhornBow(final FyndhornBow card) {
public FyndhornBow copy() {return new FyndhornBow(this);
public class FyndhornBrownie extends CardImpl {
public FyndhornBrownie(UUID ownerId) {
public FyndhornBrownie(final FyndhornBrownie card) {
public FyndhornBrownie copy() {return new FyndhornBrownie(this);
public class FyndhornElder extends CardImpl {
public FyndhornElder(UUID ownerId) {
public FyndhornElder(final FyndhornElder card) {
public FyndhornElder copy() {return new FyndhornElder(this);
public class FyndhornElves extends CardImpl {
public FyndhornElves(UUID ownerId) {
public FyndhornElves(final FyndhornElves card) {
public FyndhornElves copy() {return new FyndhornElves(this);
public class GlacialChasm extends CardImpl {
public GlacialChasm(UUID ownerId) {
public GlacialChasm(final GlacialChasm card) {
public GlacialChasm copy() {return new GlacialChasm(this);
public class GlacialCrevasses extends CardImpl {
public GlacialCrevasses(UUID ownerId) {
public GlacialCrevasses(final GlacialCrevasses card) {
public GlacialCrevasses copy() {return new GlacialCrevasses(this);
public class GoblinMutant extends CardImpl {
public GoblinMutant(UUID ownerId) {
public GoblinMutant(final GoblinMutant card) {
public GoblinMutant copy() {return new GoblinMutant(this);
public class GoblinSnowman extends CardImpl {
public GoblinSnowman(UUID ownerId) {
public GoblinSnowman(final GoblinSnowman card) {
public GoblinSnowman copy() {return new GoblinSnowman(this);
public class GorillaPack extends CardImpl {
public GorillaPack(UUID ownerId) {
public GorillaPack(final GorillaPack card) {
public GorillaPack copy() {return new GorillaPack(this);
public class GreenScarab extends CardImpl {
public GreenScarab(UUID ownerId) {
public GreenScarab(final GreenScarab card) {
public GreenScarab copy() {return new GreenScarab(this);
class GreenScarabCondition implements Condition {
public boolean apply(Game game, Ability source) {return conditionApplies;
public class Heal extends CardImpl {
public Heal(UUID ownerId) {
public Heal(final Heal card) {
public Heal copy() {return new Heal(this);
public class HotSprings extends CardImpl {
public HotSprings(UUID ownerId) {
public HotSprings(final HotSprings card) {
public HotSprings copy() {return new HotSprings(this);
public class HyalopterousLemure extends CardImpl {
public HyalopterousLemure(UUID ownerId) {
public HyalopterousLemure(final HyalopterousLemure card) {
public HyalopterousLemure copy() {return new HyalopterousLemure(this);
public class Icequake extends CardImpl {
public Icequake(UUID ownerId) {
public Icequake(final Icequake card) {
public Icequake copy() {return new Icequake(this);
class IcequakeEffect extends OneShotEffect {
public IcequakeEffect() {
public IcequakeEffect(final IcequakeEffect effect) {
public IcequakeEffect copy() {return new IcequakeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class IcyPrison extends CardImpl {
public IcyPrison(UUID ownerId) {
public IcyPrison(final IcyPrison card) {
public IcyPrison copy() {return new IcyPrison(this);
public class IllusionsOfGrandeur extends CardImpl {
public IllusionsOfGrandeur(UUID ownerId) {
public IllusionsOfGrandeur(final IllusionsOfGrandeur card) {
public IllusionsOfGrandeur copy() {return new IllusionsOfGrandeur(this);
public class ImposingVisage extends CardImpl {
public ImposingVisage(UUID ownerId) {
public ImposingVisage(final ImposingVisage card) {
public ImposingVisage copy() {return new ImposingVisage(this);
public class Infuse extends CardImpl {
public Infuse(UUID ownerId) {
public Infuse(final Infuse card) {
public Infuse copy() {return new Infuse(this);
public class JohtullWurm extends CardImpl {
public JohtullWurm(UUID ownerId) {
public JohtullWurm(final JohtullWurm card) {
public JohtullWurm copy() {return new JohtullWurm(this);
class JohtullWurmAbility extends BecomesBlockedTriggeredAbility {
public JohtullWurmAbility() {
public JohtullWurmAbility(final JohtullWurmAbility ability) {
public JohtullWurmAbility copy() {return new JohtullWurmAbility(this);
public String getRule() {return "Whenever {this} becomes blocked, it gets -2/-1 until end of turn for each creature blocking it beyond the first.";
class JohtullWurmValue implements DynamicValue {
public JohtullWurmValue copy() {return new JohtullWurmValue();
public int calculate(Game game, Ability sourceAbility, Effect effect) {return blockers > 1 ? -(blockers - 1) : 0;return 0;
public String getMessage() {return "-2/-1 until end of turn for each creature blocking it beyond the first";
public class Jokulhaups extends CardImpl {
public Jokulhaups(UUID ownerId) {
public Jokulhaups(final Jokulhaups card) {
public Jokulhaups copy() {return new Jokulhaups(this);
public class JuniperOrderDruid extends CardImpl {
public JuniperOrderDruid(UUID ownerId) {
public JuniperOrderDruid(final JuniperOrderDruid card) {
public JuniperOrderDruid copy() {return new JuniperOrderDruid(this);
public class KarplusanYeti extends CardImpl {
public KarplusanYeti(UUID ownerId) {
public KarplusanYeti(final KarplusanYeti card) {
public KarplusanYeti copy() {return new KarplusanYeti(this);return new KjeldoranDead(this);return new KjeldoranRoyalGuard(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;return new KjeldoranRoyalGuardEffect(this);
public class KnightOfStromgald extends CardImpl {
public KnightOfStromgald(UUID ownerId) {
public KnightOfStromgald(final KnightOfStromgald card) {
public KnightOfStromgald copy() {return new KnightOfStromgald(this);
public class LandCap extends CardImpl {
public LandCap(UUID ownerId) {
public LandCap(final LandCap card) {
public LandCap copy() {return new LandCap(this);
public class LavaTubes extends CardImpl {
public LavaTubes(UUID ownerId) {
public LavaTubes(final LavaTubes card) {
public LavaTubes copy() {return new LavaTubes(this);
public class LegionsOfLimDul extends CardImpl {
public LegionsOfLimDul(UUID ownerId) {
public LegionsOfLimDul(final LegionsOfLimDul card) {
public LegionsOfLimDul copy() {return new LegionsOfLimDul(this);
public class LeshracsRite extends CardImpl {
public LeshracsRite(UUID ownerId) {
public LeshracsRite(final LeshracsRite card) {
public LeshracsRite copy() {return new LeshracsRite(this);
public class MagusOfTheUnseen extends CardImpl {
public MagusOfTheUnseen(UUID ownerId) {
public MagusOfTheUnseen(final MagusOfTheUnseen card) {
public MagusOfTheUnseen copy() {return new MagusOfTheUnseen(this);
class MagusOfTheUnseenDelayedTriggeredAbility extends DelayedTriggeredAbility {
MagusOfTheUnseenDelayedTriggeredAbility() {
public class MeriekeRiBerit extends CardImpl {
public MeriekeRiBerit(UUID ownerId) {
public MeriekeRiBerit(final MeriekeRiBerit card) {
public MeriekeRiBerit copy() {return new MeriekeRiBerit(this);
class MeriekeRiBeritCreateDelayedTriggerEffect extends OneShotEffect {
public MeriekeRiBeritCreateDelayedTriggerEffect() {
public MeriekeRiBeritCreateDelayedTriggerEffect(final MeriekeRiBeritCreateDelayedTriggerEffect effect) {
public MeriekeRiBeritCreateDelayedTriggerEffect copy() {return new MeriekeRiBeritCreateDelayedTriggerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MeriekeRiBeritDelayedTriggeredAbility extends DelayedTriggeredAbility {
MeriekeRiBeritDelayedTriggeredAbility() {
MeriekeRiBeritDelayedTriggeredAbility(MeriekeRiBeritDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE
public boolean checkTrigger(GameEvent event, Game game) {return zEvent.getFromZone().equals(Zone.BATTLEFIELD);return GameEvent.EventType.UNTAPPED.equals(event.getType())
public MeriekeRiBeritDelayedTriggeredAbility copy() {return new MeriekeRiBeritDelayedTriggeredAbility(this);
public String getRule() {return "When {this} leaves the battlefield or becomes untapped, destroy that creature. It can't be regenerated.";
public class MindWarp extends CardImpl {
public MindWarp(UUID ownerId) {
public MindWarp(final MindWarp card) {
public MindWarp copy() {return new MindWarp(this);
public class MoorFiend extends CardImpl {
public MoorFiend(UUID ownerId) {
public MoorFiend(final MoorFiend card) {
public MoorFiend copy() {return new MoorFiend(this);
public class MysticMight extends CardImpl {
public MysticMight(UUID ownerId) {
public MysticMight(final MysticMight card) {
public MysticMight copy() {return new MysticMight(this);
public class MysticRemora extends CardImpl {
public MysticRemora(UUID ownerId) {
public MysticRemora(final MysticRemora card) {
public MysticRemora copy() {return new MysticRemora(this);
class MysticRemoraTriggeredAbility extends TriggeredAbilityImpl {
public MysticRemoraTriggeredAbility() {
public MysticRemoraTriggeredAbility(final MysticRemoraTriggeredAbility ability) {
public MysticRemoraTriggeredAbility copy() {return new MysticRemoraTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent casts a noncreature spell, you may draw a card unless that player pays {4}.";
class MysticRemoraEffect extends OneShotEffect {
public MysticRemoraEffect() {
public MysticRemoraEffect(final MysticRemoraEffect effect) {
public MysticRemoraEffect copy() {return new MysticRemoraEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NakedSingularity extends CardImpl {
public NakedSingularity(UUID ownerId) {
public NakedSingularity(final NakedSingularity card) {
public NakedSingularity copy() {return new NakedSingularity(this);
class NakedSingularityEffect extends ReplacementEffectImpl {
NakedSingularityEffect() {
NakedSingularityEffect(final NakedSingularityEffect effect) {
public NakedSingularityEffect copy() {return new NakedSingularityEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TAPPED_FOR_MANA;
public boolean applies(GameEvent event, Ability source, Game game) {return permanent != null
public class NaturesLore extends CardImpl {
public NaturesLore(UUID ownerId) {
public NaturesLore(final NaturesLore card) {
public NaturesLore copy() {return new NaturesLore(this);
public class Necropotence extends CardImpl {
public Necropotence(UUID ownerId) {
public Necropotence(final Necropotence card) {
public Necropotence copy() {return new Necropotence(this);
class NecropotenceTriggeredAbility extends TriggeredAbilityImpl {
NecropotenceTriggeredAbility(Effect effect) {
NecropotenceTriggeredAbility(final NecropotenceTriggeredAbility ability) {
public NecropotenceTriggeredAbility copy() {return new NecropotenceTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you discard a card, " + super.getRule();
class NecropotenceEffect extends OneShotEffect {
public NecropotenceEffect() {
public NecropotenceEffect(final NecropotenceEffect effect) {
public NecropotenceEffect copy() {return new NecropotenceEffect(this);
public boolean apply(Game game, Ability source) {Effect returnToHandEffect = new ReturnToHandTargetEffect(false);returnToHandEffect.setText("put that face down card into your hand");returnToHandEffect.setTargetPointer(new FixedTarget(card.getId(), card.getZoneChangeCounter(game)));DelayedTriggeredAbility delayedAbility = new AtTheBeginOfNextEndStepDelayedTriggeredAbility(returnToHandEffect, TargetController.YOU);return true;return false;return true;return false;
public class OrcishCannoneers extends CardImpl {
public OrcishCannoneers(UUID ownerId) {
public OrcishCannoneers(final OrcishCannoneers card) {
public OrcishCannoneers copy() {return new OrcishCannoneers(this);
public class OrcishLibrarian extends CardImpl {
public OrcishLibrarian(UUID ownerId) {
public OrcishLibrarian(final OrcishLibrarian card) {
public OrcishLibrarian copy() {return new OrcishLibrarian(this);
class OrcishLibrarianEffect extends OneShotEffect {
public OrcishLibrarianEffect() {
public OrcishLibrarianEffect(final OrcishLibrarianEffect effect) {
public OrcishLibrarianEffect copy() {return new OrcishLibrarianEffect(this);
public boolean apply(Game game, Ability source) {
{return true;return false;
public class OrderOfTheSacredTorch extends CardImpl {
public OrderOfTheSacredTorch(UUID ownerId) {
public OrderOfTheSacredTorch(final OrderOfTheSacredTorch card) {
public OrderOfTheSacredTorch copy() {return new OrderOfTheSacredTorch(this);
public class OrderOfTheWhiteShield extends CardImpl {
public OrderOfTheWhiteShield(UUID ownerId) {
public OrderOfTheWhiteShield(final OrderOfTheWhiteShield card) {
public OrderOfTheWhiteShield copy() {return new OrderOfTheWhiteShield(this);
public class PaleBears extends CardImpl {
public PaleBears(UUID ownerId) {
public PaleBears(final PaleBears card) {
public PaleBears copy() {return new PaleBears(this);
public class PentagramOfTheAges extends CardImpl {
public PentagramOfTheAges(UUID ownerId) {
public PentagramOfTheAges(final PentagramOfTheAges card) {
public PentagramOfTheAges copy() {return new PentagramOfTheAges(this);
public class PestilenceRats extends CardImpl {
public PestilenceRats(UUID ownerId) {
public PestilenceRats(final PestilenceRats card) {
public PestilenceRats copy() {return new PestilenceRats(this);
public class PolarKraken extends CardImpl {
public PolarKraken(UUID ownerId) {
public PolarKraken(final PolarKraken card) {
public PolarKraken copy() {return new PolarKraken(this);
public class PygmyAllosaurus extends CardImpl {
public PygmyAllosaurus(UUID ownerId) {
public PygmyAllosaurus(final PygmyAllosaurus card) {
public PygmyAllosaurus copy() {return new PygmyAllosaurus(this);
public class Rally extends CardImpl {
public Rally(UUID ownerId) {
public Rally(final Rally card) {
public Rally copy() {return new Rally(this);
public class RayOfCommand extends CardImpl {
public RayOfCommand(UUID ownerId) {
public RayOfCommand(final RayOfCommand card) {
public RayOfCommand copy() {return new RayOfCommand(this);
class RayOfCommandDelayedTriggeredAbility extends DelayedTriggeredAbility {
RayOfCommandDelayedTriggeredAbility () {
public class RayOfErasure extends CardImpl {
public RayOfErasure(UUID ownerId) {
public RayOfErasure(final RayOfErasure card) {
public RayOfErasure copy() {return new RayOfErasure(this);
public class RedScarab extends CardImpl {
public RedScarab(UUID ownerId) {
public RedScarab(final RedScarab card) {
public RedScarab copy() {return new RedScarab(this);
class RedScarabCondition implements Condition {
public boolean apply(Game game, Ability source) {return conditionApplies;
public class Regeneration extends CardImpl {
public Regeneration(UUID ownerId) {
public Regeneration(final Regeneration card) {
public Regeneration copy() {return new Regeneration(this);
public class RimeDryad extends CardImpl {
public RimeDryad(UUID ownerId) {
public RimeDryad(final RimeDryad card) {
public RimeDryad copy() {return new RimeDryad(this);
public class RiverDelta extends CardImpl {
public RiverDelta(UUID ownerId) {
public RiverDelta(final RiverDelta card) {
public RiverDelta copy() {return new RiverDelta(this);
public class Seizures extends CardImpl {
public Seizures(UUID ownerId) {
public Seizures(final Seizures card) {
public Seizures copy() {return new Seizures(this);
class SeizuresEffect extends OneShotEffect {
public SeizuresEffect() {
public SeizuresEffect(final SeizuresEffect effect) {
public SeizuresEffect copy() {return new SeizuresEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return true;return false;
public class SibilantSpirit extends CardImpl {
public SibilantSpirit(UUID ownerId) {
public SibilantSpirit(final SibilantSpirit card) {
public SibilantSpirit copy() {return new SibilantSpirit(this);
class SibilantSpiritEffect extends OneShotEffect {
public SibilantSpiritEffect() {
public SibilantSpiritEffect(final SibilantSpiritEffect effect) {
public SibilantSpiritEffect copy() {return new SibilantSpiritEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class SilverErne extends CardImpl {
public SilverErne(UUID ownerId) {
public SilverErne(final SilverErne card) {
public SilverErne copy() {return new SilverErne(this);
public class SkeletonShip extends CardImpl {
public SkeletonShip(UUID ownerId) {
public SkeletonShip(final SkeletonShip card) {
public SkeletonShip copy() {return new SkeletonShip(this);
public class SkullCatapult extends CardImpl {
public SkullCatapult(UUID ownerId) {
public SkullCatapult(final SkullCatapult card) {
public SkullCatapult copy() {return new SkullCatapult(this);
public class SnowCoveredForest extends CardImpl {
public SnowCoveredForest(UUID ownerId) {
public SnowCoveredForest(final SnowCoveredForest card) {
public SnowCoveredForest copy() {return new SnowCoveredForest(this);
public class SnowCoveredIsland extends CardImpl {
public SnowCoveredIsland(UUID ownerId) {
public SnowCoveredIsland(final SnowCoveredIsland card) {
public SnowCoveredIsland copy() {return new SnowCoveredIsland(this);
public class SnowCoveredMountain extends CardImpl {
public SnowCoveredMountain(UUID ownerId) {
public SnowCoveredMountain(final SnowCoveredMountain card) {
public SnowCoveredMountain copy() {return new SnowCoveredMountain(this);
public class SnowCoveredPlains extends CardImpl {
public SnowCoveredPlains(UUID ownerId) {
public SnowCoveredPlains(final SnowCoveredPlains card) {
public SnowCoveredPlains copy() {return new SnowCoveredPlains(this);
public class SnowCoveredSwamp extends CardImpl {
public SnowCoveredSwamp(UUID ownerId) {
public SnowCoveredSwamp(final SnowCoveredSwamp card) {
public SnowCoveredSwamp copy() {return new SnowCoveredSwamp(this);
public class SnowHound extends CardImpl {
public SnowHound(UUID ownerId) {
public SnowHound(final SnowHound card) {
public SnowHound copy() {return new SnowHound(this);
public class Stampede extends CardImpl {
public Stampede(UUID ownerId) {
public Stampede(final Stampede card) {
public Stampede copy() {return new Stampede(this);
public class Stonehands extends CardImpl {
public Stonehands(UUID ownerId) {
public Stonehands(final Stonehands card) {
public Stonehands copy() {return new Stonehands(this);
public class StoneSpirit extends CardImpl {
public StoneSpirit(UUID ownerId) {
public StoneSpirit(final StoneSpirit card) {
public StoneSpirit copy() {return new StoneSpirit(this);
public class Stormbind extends CardImpl {
public Stormbind(UUID ownerId) {
public Stormbind(final Stormbind card) {
public Stormbind copy() {return new Stormbind(this);
public class StromgaldCabal extends CardImpl {
public StromgaldCabal(UUID ownerId) {
public StromgaldCabal(final StromgaldCabal card) {
public StromgaldCabal copy() {return new StromgaldCabal(this);
public class StuntedGrowth extends CardImpl {
public StuntedGrowth(UUID ownerId) {
public StuntedGrowth(final StuntedGrowth card) {
public StuntedGrowth copy() {return new StuntedGrowth(this);
class StuntedGrowthEffect extends OneShotEffect {
public StuntedGrowthEffect() {
public StuntedGrowthEffect(final StuntedGrowthEffect effect) {
public StuntedGrowthEffect copy() {return new StuntedGrowthEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Sunstone extends CardImpl {
public Sunstone(UUID ownerId) {
public Sunstone(final Sunstone card) {
public Sunstone copy() {return new Sunstone(this);
public class Tarpan extends CardImpl {
public Tarpan(UUID ownerId) {
public Tarpan(final Tarpan card) {
public Tarpan copy() {return new Tarpan(this);
public class ThunderWall extends CardImpl {
public ThunderWall(UUID ownerId) {
public ThunderWall(final ThunderWall card) {
public ThunderWall copy() {return new ThunderWall(this);
public class TimberlineRidge extends CardImpl {
public TimberlineRidge(UUID ownerId) {
public TimberlineRidge(final TimberlineRidge card) {
public TimberlineRidge copy() {return new TimberlineRidge(this);
public class TinderWall extends CardImpl {
public TinderWall(UUID ownerId) {
public TinderWall(final TinderWall card) {
public TinderWall copy() {return new TinderWall(this);
class BlockedByWatcher extends Watcher {
public BlockedByWatcher() {
public BlockedByWatcher(final BlockedByWatcher watcher) {
public BlockedByWatcher copy() {return new BlockedByWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
public class TorGiant extends CardImpl {
public TorGiant(UUID ownerId) {
public TorGiant(final TorGiant card) {
public TorGiant copy() {return new TorGiant(this);
public class TouchOfDeath extends CardImpl {
public TouchOfDeath(UUID ownerId) {
public TouchOfDeath(final TouchOfDeath card) {
public TouchOfDeath copy() {return new TouchOfDeath(this);
public class Updraft extends CardImpl {
public Updraft(UUID ownerId) {
public Updraft(final Updraft card) {
public Updraft copy() {return new Updraft(this);
public class Veldt extends CardImpl {
public Veldt(UUID ownerId) {
public Veldt(final Veldt card) {
public Veldt copy() {return new Veldt(this);
public class Vertigo extends CardImpl {
public Vertigo(UUID ownerId) {
public Vertigo(final Vertigo card) {
public Vertigo copy() {return new Vertigo(this);
public class WallOfPineNeedles extends CardImpl {
public WallOfPineNeedles(UUID ownerId) {
public WallOfPineNeedles(final WallOfPineNeedles card) {
public WallOfPineNeedles copy() {return new WallOfPineNeedles(this);
public class WarChariot extends CardImpl {
public WarChariot(UUID ownerId) {
public WarChariot(final WarChariot card) {
public WarChariot copy() {return new WarChariot(this);
public class WildGrowth extends CardImpl {
public WildGrowth(UUID ownerId) {
public WildGrowth(final WildGrowth card) {
public WildGrowth copy() {return new WildGrowth(this);
class WildGrowthTriggeredAbility extends TriggeredManaAbility {
public WildGrowthTriggeredAbility() {
public WildGrowthTriggeredAbility(final WildGrowthTriggeredAbility ability) {
public WildGrowthTriggeredAbility copy() {return new WildGrowthTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever enchanted land is tapped for mana, its controller adds {G} to his or her mana pool";
public class WindSpirit extends CardImpl {
public WindSpirit(UUID ownerId) {
public WindSpirit(final WindSpirit card) {
public WindSpirit copy() {return new WindSpirit(this);
public class WordOfBlasting extends CardImpl {
public WordOfBlasting(UUID ownerId) {
public WordOfBlasting(final WordOfBlasting card) {
public WordOfBlasting copy() {return new WordOfBlasting(this);
public class WrathOfMaritLage extends CardImpl {
public WrathOfMaritLage(UUID ownerId) {
public WrathOfMaritLage(final WrathOfMaritLage card) {
public WrathOfMaritLage copy() {return new WrathOfMaritLage(this);
public class YavimayaGnats extends CardImpl {
public YavimayaGnats(UUID ownerId) {
public YavimayaGnats(final YavimayaGnats card) {
public YavimayaGnats copy() {return new YavimayaGnats(this);
public class ZuranEnchanter extends CardImpl {
public ZuranEnchanter(UUID ownerId) {
public ZuranEnchanter(final ZuranEnchanter card) {
public ZuranEnchanter copy() {return new ZuranEnchanter(this);
public class ZuranOrb extends CardImpl {
public ZuranOrb(UUID ownerId) {
public ZuranOrb(final ZuranOrb card) {
public ZuranOrb copy() {return new ZuranOrb(this);
public class ZuranSpellcaster extends CardImpl {
public ZuranSpellcaster(UUID ownerId) {
public ZuranSpellcaster(final ZuranSpellcaster card) {
public ZuranSpellcaster copy() {return new ZuranSpellcaster(this);
public class ZursWeirding extends CardImpl {
public ZursWeirding(UUID ownerId) {
public ZursWeirding(final ZursWeirding card) {
public ZursWeirding copy() {return new ZursWeirding(this);
class ZursWeirdingReplacementEffect extends ReplacementEffectImpl {
public ZursWeirdingReplacementEffect() {
public ZursWeirdingReplacementEffect(final ZursWeirdingReplacementEffect effect) {
public ZursWeirdingReplacementEffect copy() {return new ZursWeirdingReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class AbattoirGhoul extends CardImpl {
public AbattoirGhoul(UUID ownerId) {
public AbattoirGhoul(final AbattoirGhoul card) {
public AbattoirGhoul copy() {return new AbattoirGhoul(this);
class AbattoirGhoulEffect extends OneShotEffect {
public AbattoirGhoulEffect() {
public AbattoirGhoulEffect(final AbattoirGhoulEffect effect) {
public AbattoirGhoulEffect copy() {return new AbattoirGhoulEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new AbbeyGriffin(this);
public class AltarsReap extends CardImpl {
public AltarsReap(UUID ownerId) {
public AltarsReap(final AltarsReap card) {
public AltarsReap copy() {return new AltarsReap(this);
public class AmbushViper extends CardImpl {
public AmbushViper(UUID ownerId) {
public AmbushViper(final AmbushViper card) {
public AmbushViper copy() {return new AmbushViper(this);
public class AncientGrudge extends CardImpl {
public AncientGrudge(UUID ownerId) {
public AncientGrudge(final AncientGrudge card) {
public AncientGrudge copy() {return new AncientGrudge(this);
public class AngelicOverseer extends CardImpl {
public AngelicOverseer(UUID ownerId) {
public AngelicOverseer(final AngelicOverseer card) {
public AngelicOverseer copy() {return new AngelicOverseer(this);
public class AngelOfFlightAlabaster extends CardImpl {
public AngelOfFlightAlabaster(UUID ownerId) {
public AngelOfFlightAlabaster(final AngelOfFlightAlabaster card) {
public AngelOfFlightAlabaster copy() {return new AngelOfFlightAlabaster(this);
public class ArmoredSkaab extends CardImpl {
public ArmoredSkaab(UUID ownerId) {
public ArmoredSkaab(final ArmoredSkaab card) {
public ArmoredSkaab copy() {return new ArmoredSkaab(this);
public class ArmyOfTheDamned extends CardImpl {
public ArmyOfTheDamned(UUID ownerId) {
public ArmyOfTheDamned(final ArmyOfTheDamned card) {
public ArmyOfTheDamned copy() {return new ArmyOfTheDamned(this);
public class AvacynsPilgrim extends CardImpl {
public AvacynsPilgrim(UUID ownerId) {
public AvacynsPilgrim(final AvacynsPilgrim card) {
public AvacynsPilgrim copy() {return new AvacynsPilgrim(this);
public class BackFromTheBrink extends CardImpl {
public BackFromTheBrink(UUID ownerId) {
public BackFromTheBrink(final BackFromTheBrink card) {
public BackFromTheBrink copy() {return new BackFromTheBrink(this);
class BackFromTheBrinkCost extends CostImpl {
public BackFromTheBrinkCost() {
public BackFromTheBrinkCost(final BackFromTheBrinkCost cost) {
public BackFromTheBrinkCost copy() {return new BackFromTheBrinkCost(this);
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return targets.canChoose(controllerId, game);
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public class BalefireDragon extends CardImpl {
public BalefireDragon(UUID ownerId) {
public BalefireDragon(final BalefireDragon card) {
public BalefireDragon copy() {return new BalefireDragon(this);
class BalefireDragonEffect extends OneShotEffect {
public BalefireDragonEffect() {
public BalefireDragonEffect(final BalefireDragonEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BalefireDragonEffect copy() {return new BalefireDragonEffect(this);
public class BaneOfHanweir extends CardImpl {
public BaneOfHanweir(UUID ownerId) {
public BaneOfHanweir(final BaneOfHanweir card) {
public BaneOfHanweir copy() {return new BaneOfHanweir(this);
public class BattlegroundGeist extends CardImpl {
public BattlegroundGeist(UUID ownerId) {
public BattlegroundGeist(final BattlegroundGeist card) {
public BattlegroundGeist copy() {return new BattlegroundGeist(this);
public class BitterheartWitch extends CardImpl {
public BitterheartWitch(UUID ownerId) {
public BitterheartWitch(final BitterheartWitch card) {
public BitterheartWitch copy() {return new BitterheartWitch(this);
class BitterheartWitchEffect extends OneShotEffect {
public BitterheartWitchEffect() {
public BitterheartWitchEffect(final BitterheartWitchEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BitterheartWitchEffect copy() {return new BitterheartWitchEffect(this);
public class BlasphemousAct extends CardImpl {
public BlasphemousAct(UUID ownerId) {
public BlasphemousAct(final BlasphemousAct card) {
public BlasphemousAct copy() {return new BlasphemousAct(this);
BlasphemousCostReductionEffect() {
BlasphemousCostReductionEffect(BlasphemousCostReductionEffect effect) {return true;return false;return game.getCard(abilityToModify.getSourceId()) != null;return false;
public BlasphemousCostReductionEffect copy() {return new BlasphemousCostReductionEffect(this);
public class BloodcrazedNeonate extends CardImpl {
public BloodcrazedNeonate(UUID ownerId) {
public BloodcrazedNeonate(final BloodcrazedNeonate card) {
public BloodcrazedNeonate copy() {return new BloodcrazedNeonate(this);return new BloodgiftDemon(this);
public class BloodlineKeeper extends CardImpl {
public BloodlineKeeper(UUID ownerId) {
public BloodlineKeeper(final BloodlineKeeper card) {
public BloodlineKeeper copy() {return new BloodlineKeeper(this);
class VampireToken extends Token {
VampireToken() {
public class BondsOfFaith extends CardImpl {
public BondsOfFaith(UUID ownerId) {
public BondsOfFaith(final BondsOfFaith card) {
public BondsOfFaith copy() {return new BondsOfFaith(this);
public class BoneyardWurm extends CardImpl {
public BoneyardWurm(UUID ownerId) {
public BoneyardWurm(final BoneyardWurm card) {
public BoneyardWurm copy() {return new BoneyardWurm(this);
public class BrainWeevil extends CardImpl {
public BrainWeevil(UUID ownerId) {
public BrainWeevil(final BrainWeevil card) {
public BrainWeevil copy() {return new BrainWeevil(this);
public class Bramblecrush extends CardImpl {
public Bramblecrush(UUID ownerId) {
public Bramblecrush(final Bramblecrush card) {
public Bramblecrush copy() {return new Bramblecrush(this);
public class BrimstoneVolley extends CardImpl {
public BrimstoneVolley(UUID ownerId) {
public BrimstoneVolley(final BrimstoneVolley card) {
public BrimstoneVolley copy() {return new BrimstoneVolley(this);
class BrimstoneVolleyEffect extends OneShotEffect {
public BrimstoneVolleyEffect() {
public BrimstoneVolleyEffect(final BrimstoneVolleyEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public BrimstoneVolleyEffect copy() {return new BrimstoneVolleyEffect(this);
public class BumpInTheNight extends CardImpl {
public BumpInTheNight(UUID ownerId) {
public BumpInTheNight(final BumpInTheNight card) {
public BumpInTheNight copy() {return new BumpInTheNight(this);
public class BurningVengeance extends CardImpl {
public BurningVengeance(UUID ownerId) {
public BurningVengeance(final BurningVengeance card) {
public BurningVengeance copy() {return new BurningVengeance(this);
class BurningVengeanceOnCastAbility extends TriggeredAbilityImpl {
BurningVengeanceOnCastAbility() {
BurningVengeanceOnCastAbility(BurningVengeanceOnCastAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(controllerId) && event.getZone().equals(Zone.GRAVEYARD);
public BurningVengeanceOnCastAbility copy() {return new BurningVengeanceOnCastAbility(this);
public String getRule() {return abilityText;
public class ButchersCleaver extends CardImpl {
public ButchersCleaver(UUID ownerId) {
public ButchersCleaver(final ButchersCleaver card) {
public ButchersCleaver copy() {return new ButchersCleaver(this);
public class CellarDoor extends CardImpl {
public CellarDoor(UUID ownerId) {
public CellarDoor(final CellarDoor card) {
public CellarDoor copy() {return new CellarDoor(this);
class CellarDoorEffect extends OneShotEffect {
public CellarDoorEffect() {
public CellarDoorEffect(final CellarDoorEffect effect) {
public CellarDoorEffect copy() {return new CellarDoorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ChampionOfTheParish extends CardImpl {
public ChampionOfTheParish(UUID ownerId) {
public ChampionOfTheParish(final ChampionOfTheParish card) {
public ChampionOfTheParish copy() {return new ChampionOfTheParish(this);
public class ChapelGeist extends CardImpl {
public ChapelGeist(UUID ownerId) {
public ChapelGeist(final ChapelGeist card) {
public ChapelGeist copy() {return new ChapelGeist(this);
public class CharmbreakerDevils extends CardImpl {
public CharmbreakerDevils(UUID ownerId) {
public CharmbreakerDevils(final CharmbreakerDevils card) {
public CharmbreakerDevils copy() {return new CharmbreakerDevils(this);
class CharmbreakerDevilsEffect extends OneShotEffect {
public CharmbreakerDevilsEffect() {this.staticText = "return an instant or sorcery card at random from your graveyard to your hand";
public CharmbreakerDevilsEffect(final CharmbreakerDevilsEffect effect) {
public CharmbreakerDevilsEffect copy() {return new CharmbreakerDevilsEffect(this);
public boolean apply(Game game, Ability source) {game.informPlayers(new StringBuilder("Charmbreaker Devils: ").append(card.getName()).append(" returned to the hand of ").append(player.getLogName()).toString());return true;return false;
public class CivilizedScholar extends CardImpl {
public CivilizedScholar(UUID ownerId) {
public CivilizedScholar(final CivilizedScholar card) {
public CivilizedScholar copy() {return new CivilizedScholar(this);
class HomicidalBruteWatcher extends Watcher {
public HomicidalBruteWatcher() {
public HomicidalBruteWatcher(final HomicidalBruteWatcher watcher) {
public HomicidalBruteWatcher copy() {return new HomicidalBruteWatcher(this);
public void watch(GameEvent event, Game game) {return;
class CivilizedScholarEffect extends OneShotEffect {
public CivilizedScholarEffect() {
public CivilizedScholarEffect(final CivilizedScholarEffect effect) {
public CivilizedScholarEffect copy() {return new CivilizedScholarEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Claustrophobia extends CardImpl {
public Claustrophobia(UUID ownerId) {
public Claustrophobia(final Claustrophobia card) {
public Claustrophobia copy() {return new Claustrophobia(this);return new ClifftopRetreat(this);
public class CloisteredYouth extends CardImpl {
public CloisteredYouth(UUID ownerId) {
public CloisteredYouth(final CloisteredYouth card) {
public CloisteredYouth copy() {return new CloisteredYouth(this);
public class CobbledWings extends CardImpl {
public CobbledWings(UUID ownerId) {
public CobbledWings(final CobbledWings card) {
public CobbledWings copy() {return new CobbledWings(this);
public class CorpseLunge extends CardImpl {
public CorpseLunge(UUID ownerId) {
public CorpseLunge(final CorpseLunge card) {
public CorpseLunge copy() {return new CorpseLunge(this);
class CorpseLungeEffect extends OneShotEffect {
public CorpseLungeEffect() {
public CorpseLungeEffect(final CorpseLungeEffect effect) {
public CorpseLungeEffect copy() {return new CorpseLungeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CreepingRenaissance extends CardImpl {
public CreepingRenaissance(UUID ownerId) {
public CreepingRenaissance(final CreepingRenaissance card) {
public CreepingRenaissance copy() {return new CreepingRenaissance(this);
class CreepingRenaissanceEffect extends OneShotEffect {
public CreepingRenaissanceEffect() {
public CreepingRenaissanceEffect(final CreepingRenaissanceEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CreepingRenaissanceEffect copy() {return new CreepingRenaissanceEffect(this);
public class CreepyDoll extends CardImpl {
public CreepyDoll(UUID ownerId) {
public CreepyDoll(final CreepyDoll card) {
public CreepyDoll copy() {return new CreepyDoll(this);
class CreepyDollTriggeredAbility extends TriggeredAbilityImpl {
CreepyDollTriggeredAbility() {
CreepyDollTriggeredAbility(final CreepyDollTriggeredAbility ability) {
public CreepyDollTriggeredAbility copy() {return new CreepyDollTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a creature, flip a coin. If you win the flip, destroy that creature.";
class CreepyDollEffect extends OneShotEffect {
CreepyDollEffect() {
CreepyDollEffect(final CreepyDollEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public CreepyDollEffect copy() {return new CreepyDollEffect(this);
public class CrosswayVampire extends CardImpl {
public CrosswayVampire(UUID ownerId) {
public CrosswayVampire(final CrosswayVampire card) {
public CrosswayVampire copy() {return new CrosswayVampire(this);
public class Curiosity extends CardImpl {
public Curiosity(UUID ownerId) {
public Curiosity(final Curiosity card) {
public Curiosity copy() {return new Curiosity(this);
class CuriosityAbility extends TriggeredAbilityImpl {
public CuriosityAbility() {
public CuriosityAbility(final CuriosityAbility ability) {
public CuriosityAbility copy() {return new CuriosityAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return permanent != null && game.getOpponents(this.controllerId).contains(event.getTargetId()) && permanent.getAttachments().contains(this.getSourceId());
public String getRule() {return "Whenever enchanted creature deals damage to an opponent, you may draw a card.";
public class CurseOfDeathsHold extends CardImpl {
public CurseOfDeathsHold(UUID ownerId) {
public CurseOfDeathsHold(final CurseOfDeathsHold card) {
public CurseOfDeathsHold copy() {return new CurseOfDeathsHold(this);
class CurseOfDeathsHoldEffect extends ContinuousEffectImpl {
public CurseOfDeathsHoldEffect() {
public CurseOfDeathsHoldEffect(final CurseOfDeathsHoldEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CurseOfDeathsHoldEffect copy() {return new CurseOfDeathsHoldEffect(this);
public class CurseOfOblivion extends CardImpl {
public CurseOfOblivion(UUID ownerId) {
public CurseOfOblivion(final CurseOfOblivion card) {
public CurseOfOblivion copy() {return new CurseOfOblivion(this);
class CurseOfOblivionAbility extends TriggeredAbilityImpl {
public CurseOfOblivionAbility() {
public CurseOfOblivionAbility(final CurseOfOblivionAbility ability) {
public CurseOfOblivionAbility copy() {return new CurseOfOblivionAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of enchanted player's upkeep, that player exiles two cards from his or her graveyard.";
public class CurseOfStalkedPrey extends CardImpl {
public CurseOfStalkedPrey(UUID ownerId) {
public CurseOfStalkedPrey(final CurseOfStalkedPrey card) {
public CurseOfStalkedPrey copy() {return new CurseOfStalkedPrey(this);
class CurseOfStalkedPreyTriggeredAbility extends TriggeredAbilityImpl {
public CurseOfStalkedPreyTriggeredAbility() {
public CurseOfStalkedPreyTriggeredAbility(final CurseOfStalkedPreyTriggeredAbility ability) {
public CurseOfStalkedPreyTriggeredAbility copy() {return new CurseOfStalkedPreyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature deals combat damage to enchanted player, put a +1/+1 counter on that creature";
public class CurseOfTheBloodyTome extends CardImpl {
public CurseOfTheBloodyTome(UUID ownerId) {
public CurseOfTheBloodyTome(final CurseOfTheBloodyTome card) {
public CurseOfTheBloodyTome copy() {return new CurseOfTheBloodyTome(this);
class CurseOfTheBloodyTomeAbility extends TriggeredAbilityImpl {
public CurseOfTheBloodyTomeAbility() {
public CurseOfTheBloodyTomeAbility(final CurseOfTheBloodyTomeAbility ability) {
public CurseOfTheBloodyTomeAbility copy() {return new CurseOfTheBloodyTomeAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of enchanted player's upkeep, that player puts the top two cards of his or her library into his or her graveyard.";
public class DarkthicketWolf extends CardImpl {
public DarkthicketWolf(UUID ownerId) {
public DarkthicketWolf(final DarkthicketWolf card) {
public DarkthicketWolf copy() {return new DarkthicketWolf(this);
public class DaybreakRanger extends CardImpl {
public DaybreakRanger(UUID ownerId) {
public DaybreakRanger(final DaybreakRanger card) {
public DaybreakRanger copy() {return new DaybreakRanger(this);
public class DeadWeight extends CardImpl {
public DeadWeight(UUID ownerId) {
public DeadWeight(final DeadWeight card) {
public DeadWeight copy() {return new DeadWeight(this);
public class DearlyDeparted extends CardImpl {
public DearlyDeparted(UUID ownerId) {
public DearlyDeparted(final DearlyDeparted card) {
public DearlyDeparted copy() {return new DearlyDeparted(this);
class DearlyDepartedEntersBattlefieldEffect extends ReplacementEffectImpl {
public DearlyDepartedEntersBattlefieldEffect() {
public DearlyDepartedEntersBattlefieldEffect(DearlyDepartedEntersBattlefieldEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public DearlyDepartedEntersBattlefieldEffect copy() {return new DearlyDepartedEntersBattlefieldEffect(this);
public class DelverOfSecrets extends CardImpl {
public DelverOfSecrets(UUID ownerId) {
public DelverOfSecrets(final DelverOfSecrets card) {
public DelverOfSecrets copy() {return new DelverOfSecrets(this);
class DelverOfSecretsEffect extends OneShotEffect {
public DelverOfSecretsEffect() {
public DelverOfSecretsEffect(final DelverOfSecretsEffect effect) {
public DelverOfSecretsEffect copy() {return new DelverOfSecretsEffect(this);
public boolean apply(Game game, Ability source) {return new TransformSourceEffect(true, true).apply(game, source);return true;return false;
public class DemonmailHauberk extends CardImpl {
public DemonmailHauberk(UUID ownerId) {
public DemonmailHauberk(final DemonmailHauberk card) {
public DemonmailHauberk copy() {return new DemonmailHauberk(this);
public class DerangedAssistant extends CardImpl {
public DerangedAssistant(UUID ownerId) {
public DerangedAssistant(final DerangedAssistant card) {
public DerangedAssistant copy() {return new DerangedAssistant(this);
public class DesperateRavings extends CardImpl {
public DesperateRavings(UUID ownerId) {
public DesperateRavings(final DesperateRavings card) {
public DesperateRavings copy() {return new DesperateRavings(this);
class DesperateRavingsEffect extends OneShotEffect {
public DesperateRavingsEffect() {
public DesperateRavingsEffect(final DesperateRavingsEffect effect) {
public DesperateRavingsEffect copy() {return new DesperateRavingsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DevilsPlay extends CardImpl {
public DevilsPlay(UUID ownerId) {
public DevilsPlay(final DevilsPlay card) {
public DevilsPlay copy() {return new DevilsPlay(this);
public class DiregrafGhoul extends CardImpl {
public DiregrafGhoul(UUID ownerId) {
public DiregrafGhoul(final DiregrafGhoul card) {
public DiregrafGhoul copy() {return new DiregrafGhoul(this);
public class DiscipleOfGriselbrand extends CardImpl {
public DiscipleOfGriselbrand(UUID ownerId) {
public DiscipleOfGriselbrand(final DiscipleOfGriselbrand card) {
public DiscipleOfGriselbrand copy() {return new DiscipleOfGriselbrand(this);
class DiscipleOfGriselbrandEffect extends OneShotEffect {
public DiscipleOfGriselbrandEffect() {
public DiscipleOfGriselbrandEffect(final DiscipleOfGriselbrandEffect effect) {
public DiscipleOfGriselbrandEffect copy() {return new DiscipleOfGriselbrandEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Dissipate extends CardImpl {
public Dissipate(UUID ownerId) {
public Dissipate(final Dissipate card) {
public Dissipate copy() {return new Dissipate(this);
public class DivineReckoning extends CardImpl {
public DivineReckoning(UUID ownerId) {
public DivineReckoning(final DivineReckoning card) {
public DivineReckoning copy() {return new DivineReckoning(this);
class DivineReckoningEffect extends OneShotEffect {
public DivineReckoningEffect() {
public DivineReckoningEffect(DivineReckoningEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DivineReckoningEffect copy() {return new DivineReckoningEffect(this);
public class DoomedTraveler extends CardImpl {
public DoomedTraveler(UUID ownerId) {
public DoomedTraveler(final DoomedTraveler card) {
public DoomedTraveler copy() {return new DoomedTraveler(this);
public class DreamTwist extends CardImpl {
public DreamTwist(UUID ownerId) {
public DreamTwist(final DreamTwist card) {
public DreamTwist copy() {return new DreamTwist(this);
public class ElderCathar extends CardImpl {
public ElderCathar(UUID ownerId) {
public ElderCathar(final ElderCathar card) {
public ElderCathar copy() {return new ElderCathar(this);
class ElderCatharAddCountersTargetEffect extends OneShotEffect {
public ElderCatharAddCountersTargetEffect() {
public ElderCatharAddCountersTargetEffect(final ElderCatharAddCountersTargetEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ElderCatharAddCountersTargetEffect copy() {return new ElderCatharAddCountersTargetEffect(this);
public class ElderOfLaurels extends CardImpl {
public ElderOfLaurels(UUID ownerId) {
public ElderOfLaurels(final ElderOfLaurels card) {
public ElderOfLaurels copy() {return new ElderOfLaurels(this);
public class EliteInquisitor extends CardImpl {
public EliteInquisitor(UUID ownerId) {
public EliteInquisitor(final EliteInquisitor card) {
public EliteInquisitor copy() {return new EliteInquisitor(this);
public class EvilTwin extends CardImpl {
public EvilTwin(UUID ownerId) {
public EvilTwin(final EvilTwin card) {
public EvilTwin copy() {return new EvilTwin(this);
class EvilTwinApplyToPermanent extends ApplyToPermanent {
public Boolean apply(Game game, Permanent permanent) {return true;
public Boolean apply(Game game, MageObject mageObject) {return true;
class EvilTwinPredicate implements ObjectSourcePlayerPredicate<ObjectSourcePlayer<Permanent>> {
public boolean apply(ObjectSourcePlayer<Permanent> input, Game game) {return permanent != null && twin != null && !twin.getName().isEmpty() && permanent.getName().equals(twin.getName());
public String toString() {return "SameNameAsSource";
public class FalkenrathMarauders extends CardImpl {
public FalkenrathMarauders(UUID ownerId) {
public FalkenrathMarauders(final FalkenrathMarauders card) {
public FalkenrathMarauders copy() {return new FalkenrathMarauders(this);
public class FalkenrathNoble extends CardImpl {
public FalkenrathNoble(UUID ownerId) {
public FalkenrathNoble(final FalkenrathNoble card) {
public FalkenrathNoble copy() {return new FalkenrathNoble(this);
class FalkenrathNobleTriggeredAbility extends TriggeredAbilityImpl {
public FalkenrathNobleTriggeredAbility() {
public FalkenrathNobleTriggeredAbility(final FalkenrathNobleTriggeredAbility ability) {
public FalkenrathNobleTriggeredAbility copy() {return new FalkenrathNobleTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "Whenever {this} or another creature dies, target player loses 1 life and you gain 1 life.";
public class FeelingOfDread extends CardImpl {
public FeelingOfDread(UUID ownerId) {
public FeelingOfDread(final FeelingOfDread card) {
public FeelingOfDread copy() {return new FeelingOfDread(this);
public class FeralRidgewolf extends CardImpl {
public FeralRidgewolf(UUID ownerId) {
public FeralRidgewolf(final FeralRidgewolf card) {
public FeralRidgewolf copy() {return new FeralRidgewolf(this);
public class FesterhideBoar extends CardImpl {
public FesterhideBoar(UUID ownerId) {
public FesterhideBoar(final FesterhideBoar card) {
public FesterhideBoar copy() {return new FesterhideBoar(this);
public class FiendHunter extends CardImpl {
public FiendHunter(UUID ownerId) {
public FiendHunter(final FiendHunter card) {
public FiendHunter copy() {return new FiendHunter(this);
public class ForbiddenAlchemy extends CardImpl {
public ForbiddenAlchemy(UUID ownerId) {
public ForbiddenAlchemy(final ForbiddenAlchemy card) {
public ForbiddenAlchemy copy() {return new ForbiddenAlchemy(this);
class ForbiddenAlchemyEffect extends OneShotEffect {
public ForbiddenAlchemyEffect() {
public ForbiddenAlchemyEffect(final ForbiddenAlchemyEffect effect) {
public ForbiddenAlchemyEffect copy() {return new ForbiddenAlchemyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FortressCrab extends CardImpl {
public FortressCrab(UUID ownerId) {
public FortressCrab(final FortressCrab card) {
public FortressCrab copy() {return new FortressCrab(this);
public class FrightfulDelusion extends CardImpl {
public FrightfulDelusion(UUID ownerId) {
public FrightfulDelusion(final FrightfulDelusion card) {
public FrightfulDelusion copy() {return new FrightfulDelusion(this);
class FrightfulDelusionEffect extends OneShotEffect {
public FrightfulDelusionEffect() {
public FrightfulDelusionEffect(final FrightfulDelusionEffect effect) {
public FrightfulDelusionEffect copy() {return new FrightfulDelusionEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(source.getFirstTarget(),return false;
public class FullMoonsRise extends CardImpl {
public FullMoonsRise(UUID ownerId) {
public FullMoonsRise(final FullMoonsRise card) {
public FullMoonsRise copy() {return new FullMoonsRise(this);
class FullMoonsRiseEffect extends OneShotEffect {
public FullMoonsRiseEffect(FilterPermanent filter) {
public FullMoonsRiseEffect(final FullMoonsRiseEffect effect) {
public FullMoonsRiseEffect copy() {return new FullMoonsRiseEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class FurorOfTheBitten extends CardImpl {
public FurorOfTheBitten(UUID ownerId) {
public FurorOfTheBitten(final FurorOfTheBitten card) {
public FurorOfTheBitten copy() {return new FurorOfTheBitten(this);
public class GallowsWarden extends CardImpl {
public GallowsWarden(UUID ownerId) {
public GallowsWarden(final GallowsWarden card) {
public GallowsWarden copy() {return new GallowsWarden(this);
public class GalvanicJuggernaut extends CardImpl {
public GalvanicJuggernaut(UUID ownerId) {
public GalvanicJuggernaut(final GalvanicJuggernaut card) {
public GalvanicJuggernaut copy() {return new GalvanicJuggernaut(this);
public class GarrukRelentless extends CardImpl {
public GarrukRelentless(UUID ownerId) {
public GarrukRelentless(final GarrukRelentless card) {
public GarrukRelentless copy() {return new GarrukRelentless(this);
class GarrukRelentlessTriggeredAbility extends TriggeredAbilityImpl {
public GarrukRelentlessTriggeredAbility() {
public GarrukRelentlessTriggeredAbility(GarrukRelentlessTriggeredAbility ability) {
public GarrukRelentlessTriggeredAbility copy() {return new GarrukRelentlessTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLANESWALKER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When Garruk Relentless has two or fewer loyalty counters on him, transform him.";
class GarrukRelentlessDamageEffect extends OneShotEffect {
public GarrukRelentlessDamageEffect() {
public GarrukRelentlessDamageEffect(GarrukRelentlessDamageEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GarrukRelentlessDamageEffect copy() {return new GarrukRelentlessDamageEffect(this);
public class GarrukTheVeilCursed extends CardImpl {
public GarrukTheVeilCursed(UUID ownerId) {
public GarrukTheVeilCursed(final GarrukTheVeilCursed card) {
public GarrukTheVeilCursed copy() {return new GarrukTheVeilCursed(this);
class GarrukTheVeilCursedValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return player.getGraveyard().getCards(new FilterCreatureCard(), game).size();return 0;
public DynamicValue copy() {return this;
public String getMessage() {return "the number of creature cards in your graveyard";
public String toString() {return "+X";
class GarrukTheVeilCursedEffect extends OneShotEffect {
public GarrukTheVeilCursedEffect() {
public GarrukTheVeilCursedEffect(final GarrukTheVeilCursedEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public GarrukTheVeilCursedEffect copy() {return new GarrukTheVeilCursedEffect(this);
public class GatstafHowler extends CardImpl {
public GatstafHowler(UUID ownerId) {
public GatstafHowler(final GatstafHowler card) {
public GatstafHowler copy() {return new GatstafHowler(this);
public class GatstafShepherd extends CardImpl {
public GatstafShepherd(UUID ownerId) {
public GatstafShepherd(final GatstafShepherd card) {
public GatstafShepherd copy() {return new GatstafShepherd(this);
public class Geistflame extends CardImpl {
public Geistflame(UUID ownerId) {
public Geistflame(final Geistflame card) {
public Geistflame copy() {return new Geistflame(this);
public class GeistHonoredMonk extends CardImpl {
public GeistHonoredMonk(UUID ownerId) {
public GeistHonoredMonk(final GeistHonoredMonk card) {
public GeistHonoredMonk copy() {return new GeistHonoredMonk(this);
public class GeistOfSaintTraft extends CardImpl {
public GeistOfSaintTraft(UUID ownerId) {
public GeistOfSaintTraft(final GeistOfSaintTraft card) {
public GeistOfSaintTraft copy() {return new GeistOfSaintTraft(this);
class GeistOfSaintTraftEffect extends OneShotEffect {
GeistOfSaintTraftEffect() {
GeistOfSaintTraftEffect(final GeistOfSaintTraftEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GeistOfSaintTraftEffect copy() {return new GeistOfSaintTraftEffect(this);
public class GhostlyPossession extends CardImpl {
public GhostlyPossession(UUID ownerId) {
public GhostlyPossession(final GhostlyPossession card) {
public GhostlyPossession copy() {return new GhostlyPossession(this);
class GhostlyPossessionEffect extends PreventionEffectImpl {
public GhostlyPossessionEffect() {
public GhostlyPossessionEffect(final GhostlyPossessionEffect effect) {
public GhostlyPossessionEffect copy() {return new GhostlyPossessionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class GhostQuarter extends CardImpl {
public GhostQuarter(UUID ownerId) {
public GhostQuarter(final GhostQuarter card) {
public GhostQuarter copy() {return new GhostQuarter(this);
class GhostQuarterEffect extends OneShotEffect {
public GhostQuarterEffect() {
public GhostQuarterEffect(final GhostQuarterEffect effect) {
public GhostQuarterEffect copy() {return new GhostQuarterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GhoulcallersBell extends CardImpl {
public GhoulcallersBell(UUID ownerId) {
public GhoulcallersBell(final GhoulcallersBell card) {
public GhoulcallersBell copy() {return new GhoulcallersBell(this);
class GhoulcallersBellEffect extends OneShotEffect {
public GhoulcallersBellEffect() {
public GhoulcallersBellEffect(final GhoulcallersBellEffect effect) {
public GhoulcallersBellEffect copy() {return new GhoulcallersBellEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class GhoulcallersChant extends CardImpl {
public GhoulcallersChant(UUID ownerId) {
public GhoulcallersChant(final GhoulcallersChant card) {
public GhoulcallersChant copy() {return new GhoulcallersChant(this);
public class Ghoulraiser extends CardImpl {
public Ghoulraiser(UUID ownerId) {
public Ghoulraiser(final Ghoulraiser card) {
public Ghoulraiser copy() {return new Ghoulraiser(this);
class GhoulraiserEffect extends OneShotEffect {
public GhoulraiserEffect() {this.staticText = "return a Zombie card at random from your graveyard to your hand";
public GhoulraiserEffect(final GhoulraiserEffect effect) {
public GhoulraiserEffect copy() {return new GhoulraiserEffect(this);
public boolean apply(Game game, Ability source) {game.informPlayers(card.getName() + "returned to the hand of" + player.getLogName());return true;return false;
public class GnawToTheBone extends CardImpl {
public GnawToTheBone(UUID ownerId) {
public GnawToTheBone(final GnawToTheBone card) {
public GnawToTheBone copy() {return new GnawToTheBone(this);
public class GraspOfPhantoms extends CardImpl {
public GraspOfPhantoms(UUID ownerId) {
public GraspOfPhantoms(final GraspOfPhantoms card) {
public GraspOfPhantoms copy() {return new GraspOfPhantoms(this);
public class GraveBramble extends CardImpl {
public GraveBramble(UUID ownerId) {
public GraveBramble(final GraveBramble card) {
public GraveBramble copy() {return new GraveBramble(this);
public class GraveyardShovel extends CardImpl {
public GraveyardShovel(UUID ownerId) {
public GraveyardShovel(final GraveyardShovel card) {
public GraveyardShovel copy() {return new GraveyardShovel(this);
class GraveyardShovelEffect extends OneShotEffect {
public GraveyardShovelEffect() {
public GraveyardShovelEffect(final GraveyardShovelEffect effect) {
public GraveyardShovelEffect copy() {return new GraveyardShovelEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GrimgrinCorpseBorn extends CardImpl {
public GrimgrinCorpseBorn(UUID ownerId) {
public GrimgrinCorpseBorn(final GrimgrinCorpseBorn card) {
public GrimgrinCorpseBorn copy() {return new GrimgrinCorpseBorn(this);
class GrimgrinCorpseBornAbility extends TriggeredAbilityImpl {
public GrimgrinCorpseBornAbility() {
public GrimgrinCorpseBornAbility(final GrimgrinCorpseBornAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks, destroy target creature defending player controls, then put a +1/+1 counter on {this}.";
public GrimgrinCorpseBornAbility copy() {return new GrimgrinCorpseBornAbility(this);
public class GrimoireOfTheDead extends CardImpl {
public GrimoireOfTheDead(UUID ownerId) {
public GrimoireOfTheDead(final GrimoireOfTheDead card) {
public GrimoireOfTheDead copy() {return new GrimoireOfTheDead(this);
class GrimoireOfTheDeadEffect extends OneShotEffect {
public GrimoireOfTheDeadEffect() {
public GrimoireOfTheDeadEffect(final GrimoireOfTheDeadEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GrimoireOfTheDeadEffect copy() {return new GrimoireOfTheDeadEffect(this);
class GrimoireOfTheDeadEffect2 extends ContinuousEffectImpl {
public GrimoireOfTheDeadEffect2(UUID targetId) {
public GrimoireOfTheDeadEffect2(final GrimoireOfTheDeadEffect2 effect) {
public GrimoireOfTheDeadEffect2 copy() {return new GrimoireOfTheDeadEffect2(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.ColorChangingEffects_5 || layer == Layer.TypeChangingEffects_4;
public class GrizzledOutcasts extends CardImpl {
public GrizzledOutcasts(UUID ownerId) {
public GrizzledOutcasts(final GrizzledOutcasts card) {
public GrizzledOutcasts copy() {return new GrizzledOutcasts(this);return new GruesomeDeformity(this);
public class GutterGrime extends CardImpl {
public GutterGrime(UUID ownerId) {
public GutterGrime(final GutterGrime card) {
public GutterGrime copy() {return new GutterGrime(this);
class GutterGrimeTriggeredAbility extends TriggeredAbilityImpl {
public GutterGrimeTriggeredAbility() {
public GutterGrimeTriggeredAbility(GutterGrimeTriggeredAbility ability) {
public GutterGrimeTriggeredAbility copy() {return new GutterGrimeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {
&& !(permanent instanceof PermanentToken)))) {return true;return false;
public String getRule() {return "Whenever a nontoken creature you control dies, put a slime counter on {this}, then put a green Ooze creature token onto the battlefield with \"This creature's power and toughness are each equal to the number of slime counters on {this}.\"";
class GutterGrimeEffect extends OneShotEffect {
public GutterGrimeEffect() {
public GutterGrimeEffect(final GutterGrimeEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public GutterGrimeEffect copy() {return new GutterGrimeEffect(this);
class GutterGrimeToken extends Token {
public GutterGrimeToken(UUID sourceId) {
class GutterGrimeCounters implements DynamicValue {
public GutterGrimeCounters(UUID sourceId) {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return p.getCounters().getCount(CounterType.SLIME);return 0;
public GutterGrimeCounters copy() {return this;
public String getMessage() {return "slime counters on Gutter Grime";
public String toString() {return "1";
public class HamletCaptain extends CardImpl {
public HamletCaptain(UUID ownerId) {
public HamletCaptain(final HamletCaptain card) {
public HamletCaptain copy() {return new HamletCaptain(this);
public class HeartlessSummoning extends CardImpl {
public HeartlessSummoning(UUID ownerId) {
public HeartlessSummoning(final HeartlessSummoning card) {
public HeartlessSummoning copy() {return new HeartlessSummoning(this);
public class HereticsPunishment extends CardImpl {
public HereticsPunishment(UUID ownerId) {
public HereticsPunishment(final HereticsPunishment card) {
public HereticsPunishment copy() {return new HereticsPunishment(this);
class HereticsPunishmentEffect extends OneShotEffect {
public HereticsPunishmentEffect() {
public HereticsPunishmentEffect(final HereticsPunishmentEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public HereticsPunishmentEffect copy() {return new HereticsPunishmentEffect(this);
public class HinterlandHarbor extends CardImpl {
public HinterlandHarbor(UUID ownerId) {
public HinterlandHarbor(final HinterlandHarbor card) {
public HinterlandHarbor copy() {return new HinterlandHarbor(this);
public class HollowhengeScavenger extends CardImpl {
public HollowhengeScavenger(UUID ownerId) {
public HollowhengeScavenger(final HollowhengeScavenger card) {
public HollowhengeScavenger copy() {return new HollowhengeScavenger(this);
public class HomicidalBrute extends CardImpl {
public HomicidalBrute(UUID ownerId) {
public HomicidalBrute(final HomicidalBrute card) {
public HomicidalBrute copy() {return new HomicidalBrute(this);
class HomicidalBruteTriggeredAbility extends TriggeredAbilityImpl {
public HomicidalBruteTriggeredAbility() {
public HomicidalBruteTriggeredAbility(HomicidalBruteTriggeredAbility ability) {
public HomicidalBruteTriggeredAbility copy() {return new HomicidalBruteTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of your end step, if {this} didn't attack this turn, tap {this}, then transform it";
public class HowlpackAlpha extends CardImpl {
public HowlpackAlpha(UUID ownerId) {
public HowlpackAlpha(final HowlpackAlpha card) {
public HowlpackAlpha copy() {return new HowlpackAlpha(this);
public class HowlpackOfEstwald extends CardImpl {
public HowlpackOfEstwald(UUID ownerId) {
public HowlpackOfEstwald(final HowlpackOfEstwald card) {
public HowlpackOfEstwald copy() {return new HowlpackOfEstwald(this);
public class HystericalBlindness extends CardImpl {
public HystericalBlindness(UUID ownerId) {
public HystericalBlindness(final HystericalBlindness card) {
public HystericalBlindness copy() {return new HystericalBlindness(this);
public class InfernalPlunge extends CardImpl {
public InfernalPlunge(UUID ownerId) {
public InfernalPlunge(final InfernalPlunge card) {
public InfernalPlunge copy() {return new InfernalPlunge(this);
public class InquisitorsFlail extends CardImpl {
public InquisitorsFlail(UUID ownerId) {
public InquisitorsFlail(final InquisitorsFlail card) {
public InquisitorsFlail copy() {return new InquisitorsFlail(this);
class InquisitorsFlailEffect extends ReplacementEffectImpl {
public InquisitorsFlailEffect() {
public InquisitorsFlailEffect(final InquisitorsFlailEffect effect) {
public InquisitorsFlailEffect copy() {return new InquisitorsFlailEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_CREATURE) ||
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class InsectileAberration extends CardImpl {
public InsectileAberration(UUID ownerId) {
public InsectileAberration(final InsectileAberration card) {
public InsectileAberration copy() {return new InsectileAberration(this);
public class InstigatorGang extends CardImpl {
public InstigatorGang(UUID ownerId) {
public InstigatorGang(final InstigatorGang card) {
public InstigatorGang copy() {return new InstigatorGang(this);
public class IntangibleVirtue extends CardImpl {
public IntangibleVirtue(UUID ownerId) {
public IntangibleVirtue(final IntangibleVirtue card) {
public IntangibleVirtue copy() {return new IntangibleVirtue(this);
public class IntoTheMawOfHell extends CardImpl {
public IntoTheMawOfHell(UUID ownerId) {
public IntoTheMawOfHell(final IntoTheMawOfHell card) {
public IntoTheMawOfHell copy() {return new IntoTheMawOfHell(this);
class IntoTheMawOfHellEffect extends OneShotEffect {
public IntoTheMawOfHellEffect() {
public IntoTheMawOfHellEffect(final IntoTheMawOfHellEffect effect) {
public IntoTheMawOfHellEffect copy() {return new IntoTheMawOfHellEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class InvisibleStalker extends CardImpl {
public InvisibleStalker(UUID ownerId) {
public InvisibleStalker(final InvisibleStalker card) {
public InvisibleStalker copy() {return new InvisibleStalker(this);
public class Ironfang extends CardImpl {
public Ironfang(UUID ownerId) {
public Ironfang(final Ironfang card) {
public Ironfang copy() {return new Ironfang(this);
public class IsolatedChapel extends CardImpl {
public IsolatedChapel(UUID ownerId) {
public IsolatedChapel(final IsolatedChapel card) {
public IsolatedChapel copy() {return new IsolatedChapel(this);
public class KessigCagebreakers extends CardImpl {
public KessigCagebreakers(UUID ownerId) {
public KessigCagebreakers(final KessigCagebreakers card) {
public KessigCagebreakers copy() {return new KessigCagebreakers(this);
class KessigCagebreakersEffect extends OneShotEffect {
public KessigCagebreakersEffect() {
public KessigCagebreakersEffect(final KessigCagebreakersEffect effect) {
public KessigCagebreakersEffect copy() {return new KessigCagebreakersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Kindercatch extends CardImpl {
public Kindercatch(UUID ownerId) {
public Kindercatch(final Kindercatch card) {
public Kindercatch copy() {return new Kindercatch(this);
public class KrallenhordeWantons extends CardImpl {
public KrallenhordeWantons(UUID ownerId) {
public KrallenhordeWantons(final KrallenhordeWantons card) {
public KrallenhordeWantons copy() {return new KrallenhordeWantons(this);
public class KruinOutlaw extends CardImpl {
public KruinOutlaw(UUID ownerId) {
public KruinOutlaw(final KruinOutlaw card) {
public KruinOutlaw copy() {return new KruinOutlaw(this);
public class LaboratoryManiac extends CardImpl {
public LaboratoryManiac(UUID ownerId) {
public LaboratoryManiac(final LaboratoryManiac card) {
public LaboratoryManiac copy() {return new LaboratoryManiac(this);
class LaboratoryManiacEffect extends ReplacementEffectImpl {
public LaboratoryManiacEffect() {
public LaboratoryManiacEffect(final LaboratoryManiacEffect effect) {
public LaboratoryManiacEffect copy() {return new LaboratoryManiacEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.EMPTY_DRAW;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class LanternSpirit extends CardImpl {
public LanternSpirit(UUID ownerId) {
public LanternSpirit(final LanternSpirit card) {
public LanternSpirit copy() {return new LanternSpirit(this);
public class LilianaOfTheVeil extends CardImpl {
public LilianaOfTheVeil(UUID ownerId) {
public LilianaOfTheVeil(final LilianaOfTheVeil card) {
public LilianaOfTheVeil copy() {return new LilianaOfTheVeil(this);
class LilianaOfTheVeilEffect extends OneShotEffect {
public LilianaOfTheVeilEffect() {
public LilianaOfTheVeilEffect(final LilianaOfTheVeilEffect effect) {
public LilianaOfTheVeilEffect copy() {return new LilianaOfTheVeilEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LordOfLineage extends CardImpl {
public LordOfLineage(UUID ownerId) {
public LordOfLineage(final LordOfLineage card) {
public LordOfLineage copy() {return new LordOfLineage(this);
public class LostInTheMist extends CardImpl {
public LostInTheMist(UUID ownerId) {
public LostInTheMist(final LostInTheMist card) {
public LostInTheMist copy() {return new LostInTheMist(this);
class LostInTheMistEffect extends OneShotEffect {
public LostInTheMistEffect() {
public LostInTheMistEffect(final LostInTheMistEffect effect) {
public LostInTheMistEffect copy() {return new LostInTheMistEffect(this);
public boolean apply(Game game, Ability source) {return permanent.moveToZone(Zone.HAND, source.getSourceId(), game, false);return false;
public class LudevicsAbomination extends CardImpl {
public LudevicsAbomination(UUID ownerId) {
public LudevicsAbomination(final LudevicsAbomination card) {
public LudevicsAbomination copy() {return new LudevicsAbomination(this);
public class LudevicsTestSubject extends CardImpl {
public LudevicsTestSubject(UUID ownerId) {
public LudevicsTestSubject(final LudevicsTestSubject card) {
public LudevicsTestSubject copy() {return new LudevicsTestSubject(this);
class LudevicsTestSubjectEffect extends OneShotEffect {
LudevicsTestSubjectEffect() {
LudevicsTestSubjectEffect(final LudevicsTestSubjectEffect effect) {
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return false;
public LudevicsTestSubjectEffect copy() {return new LudevicsTestSubjectEffect(this);
public class Lumberknot extends CardImpl {
public Lumberknot(UUID ownerId) {
public Lumberknot(final Lumberknot card) {
public Lumberknot copy() {return new Lumberknot(this);
public class MakeAWish extends CardImpl {
public MakeAWish(UUID ownerId) {
public MakeAWish(final MakeAWish card) {
public MakeAWish copy() {return new MakeAWish(this);
class MakeAWishEffect extends OneShotEffect {
public MakeAWishEffect() {
public MakeAWishEffect(final MakeAWishEffect effect) {
public MakeAWishEffect copy() {return new MakeAWishEffect(this);
public boolean apply(Game game, Ability source) {game.informPlayers(card.getName() + " returned to the hand of " + player.getLogName());return true;return false;return new MakeshiftMauler(this);
public class ManorGargoyle extends CardImpl {
public ManorGargoyle(UUID ownerId) {
public ManorGargoyle(final ManorGargoyle card) {
public ManorGargoyle copy() {return new ManorGargoyle(this);
class HasDefenderCondition implements Condition {
private HasDefenderCondition() {return INSTANCE;
public boolean apply(Game game, Ability source) {return true;return false;
public class ManorSkeleton extends CardImpl {
public ManorSkeleton(UUID ownerId) {
public ManorSkeleton(final ManorSkeleton card) {
public ManorSkeleton copy() {return new ManorSkeleton(this);
public class MarkovPatrician extends CardImpl {
public MarkovPatrician(UUID ownerId) {
public MarkovPatrician(final MarkovPatrician card) {
public MarkovPatrician copy() {return new MarkovPatrician(this);
public class MaskOfAvacyn extends CardImpl {
public MaskOfAvacyn(UUID ownerId) {
public MaskOfAvacyn(final MaskOfAvacyn card) {
public MaskOfAvacyn copy() {return new MaskOfAvacyn(this);
public class MausoleumGuard extends CardImpl {
public MausoleumGuard(UUID ownerId) {
public MausoleumGuard(final MausoleumGuard card) {
public MausoleumGuard copy() {return new MausoleumGuard(this);
public class MemorysJourney extends CardImpl {
public MemorysJourney(UUID ownerId) {
public MemorysJourney(final MemorysJourney card) {
public MemorysJourney copy() {return new MemorysJourney(this);
class MemorysJourneyEffect extends OneShotEffect {
public MemorysJourneyEffect() {
public MemorysJourneyEffect(final MemorysJourneyEffect effect) {
public MemorysJourneyEffect copy() {return new MemorysJourneyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MemorysJourneyTarget extends TargetCard {
public MemorysJourneyTarget() {
public MemorysJourneyTarget(final MemorysJourneyTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return filter.match(card, game);return false;
public MemorysJourneyTarget copy() {return new MemorysJourneyTarget(this);
public class MentorOfTheMeek extends CardImpl {
public MentorOfTheMeek(UUID ownerId) {
public MentorOfTheMeek(final MentorOfTheMeek card) {
public MentorOfTheMeek copy() {return new MentorOfTheMeek(this);
public class MercilessPredator extends CardImpl {
public MercilessPredator(UUID ownerId) {
public MercilessPredator(final MercilessPredator card) {
public MercilessPredator copy() {return new MercilessPredator(this);
public class MidnightHaunting extends CardImpl {
public MidnightHaunting(UUID ownerId) {
public MidnightHaunting(final MidnightHaunting card) {
public MidnightHaunting copy() {return new MidnightHaunting(this);
public class MikaeusTheLunarch extends CardImpl {
public MikaeusTheLunarch(UUID ownerId) {
public MikaeusTheLunarch(final MikaeusTheLunarch card) {
public MikaeusTheLunarch copy() {return new MikaeusTheLunarch(this);
public class Mindshrieker extends CardImpl {
public Mindshrieker(UUID ownerId) {
public Mindshrieker(final Mindshrieker card) {
public Mindshrieker copy() {return new Mindshrieker(this);
class MindshriekerEffect extends OneShotEffect {
public MindshriekerEffect() {
public MindshriekerEffect(final MindshriekerEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MindshriekerEffect copy() {return new MindshriekerEffect(this);
public class MirrorMadPhantasm extends CardImpl {
public MirrorMadPhantasm(UUID ownerId) {
public MirrorMadPhantasm(final MirrorMadPhantasm card) {
public MirrorMadPhantasm copy() {return new MirrorMadPhantasm(this);
class MirrorMadPhantasmEffect extends OneShotEffect {
public MirrorMadPhantasmEffect() {
public MirrorMadPhantasmEffect(final MirrorMadPhantasmEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MirrorMadPhantasmEffect copy() {return new MirrorMadPhantasmEffect(this);
public class MoanOfTheUnhallowed extends CardImpl {
public MoanOfTheUnhallowed(UUID ownerId) {
public MoanOfTheUnhallowed(final MoanOfTheUnhallowed card) {
public MoanOfTheUnhallowed copy() {return new MoanOfTheUnhallowed(this);
public class MoldgrafMonstrosity extends CardImpl {
public MoldgrafMonstrosity(UUID ownerId) {
public MoldgrafMonstrosity(final MoldgrafMonstrosity card) {
public MoldgrafMonstrosity copy() {return new MoldgrafMonstrosity(this);
class MoldgrafMonstrosityEffect extends OneShotEffect {
public MoldgrafMonstrosityEffect() {this.staticText = "then return two creature cards at random from your graveyard to the battlefield";
public MoldgrafMonstrosityEffect(final MoldgrafMonstrosityEffect effect) {
public MoldgrafMonstrosityEffect copy() {return new MoldgrafMonstrosityEffect(this);
public boolean apply(Game game, Ability source) {boolean returned = false;returned |= card.putOntoBattlefield(game, Zone.GRAVEYARD, source.getSourceId(), source.getControllerId());return returned;return null;return card;return null;
public class MomentOfHeroism extends CardImpl {
public MomentOfHeroism(UUID ownerId) {
public MomentOfHeroism(final MomentOfHeroism card) {
public MomentOfHeroism copy() {return new MomentOfHeroism(this);
public class MoonHeron extends CardImpl {
public MoonHeron(UUID ownerId) {
public MoonHeron(final MoonHeron card) {
public MoonHeron copy() {return new MoonHeron(this);
public class Moonmist extends CardImpl {
public Moonmist(UUID ownerId) {
public Moonmist(final Moonmist card) {
public Moonmist copy() {return new Moonmist(this);
class MoonmistEffect extends OneShotEffect {
public MoonmistEffect() {
public MoonmistEffect(final MoonmistEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MoonmistEffect copy() {return new MoonmistEffect(this);
public class MoorlandHaunt extends CardImpl {
public MoorlandHaunt(UUID ownerId) {
public MoorlandHaunt(final MoorlandHaunt card) {
public MoorlandHaunt copy() {return new MoorlandHaunt(this);
public class MorkrutBanshee extends CardImpl {
public MorkrutBanshee(UUID ownerId) {
public MorkrutBanshee(final MorkrutBanshee card) {
public MorkrutBanshee copy() {return new MorkrutBanshee(this);
public class Mulch extends CardImpl {
public Mulch(UUID ownerId) {
public Mulch(final Mulch card) {
public Mulch copy() {return new Mulch(this);
class MulchEffect extends OneShotEffect {
public MulchEffect() {
public MulchEffect(final MulchEffect effect) {
public MulchEffect copy() {return new MulchEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MurderOfCrows extends CardImpl {
public MurderOfCrows(UUID ownerId) {
public MurderOfCrows(final MurderOfCrows card) {
public MurderOfCrows copy() {return new MurderOfCrows(this);
class MurderOfCrowsEffect extends OneShotEffect {
public MurderOfCrowsEffect() {
public MurderOfCrowsEffect(final MurderOfCrowsEffect effect) {
public MurderOfCrowsEffect copy() {return new MurderOfCrowsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NephaliaDrownyard extends CardImpl {
public NephaliaDrownyard(UUID ownerId) {
public NephaliaDrownyard(final NephaliaDrownyard card) {
public NephaliaDrownyard copy() {return new NephaliaDrownyard(this);
public class Nevermore extends CardImpl {
public Nevermore(UUID ownerId) {
public Nevermore(final Nevermore card) {
public Nevermore copy() {return new Nevermore(this);
public NevermoreEffect2() {
public NevermoreEffect2(final NevermoreEffect2 effect) {
public boolean apply(Game game, Ability source) {return true;
public NevermoreEffect2 copy() {return new NevermoreEffect2(this);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class NightRevelers extends CardImpl {
public NightRevelers(UUID ownerId) {
public NightRevelers(final NightRevelers card) {
public NightRevelers copy() {return new NightRevelers(this);
class NightRevelersCondition implements Condition {
public boolean apply(Game game, Ability source) {return conditionApplies;
public class NightTerrors extends CardImpl {
public NightTerrors(UUID ownerId) {
public NightTerrors(final NightTerrors card) {
public NightTerrors copy() {return new NightTerrors(this);
class NightTerrorsEffect extends OneShotEffect {
public NightTerrorsEffect() {
public NightTerrorsEffect(final NightTerrorsEffect effect) {
public NightTerrorsEffect copy() {return new NightTerrorsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OliviaVoldaren extends CardImpl {
public OliviaVoldaren(UUID ownerId) {
public OliviaVoldaren(final OliviaVoldaren card) {
public OliviaVoldaren copy() {return new OliviaVoldaren(this);
public class OneEyedScarecrow extends CardImpl {
public OneEyedScarecrow(UUID ownerId) {
public OneEyedScarecrow(final OneEyedScarecrow card) {
public OneEyedScarecrow copy() {return new OneEyedScarecrow(this);
public class OrchardSpirit extends CardImpl {
public OrchardSpirit(UUID ownerId) {
public OrchardSpirit(final OrchardSpirit card) {
public OrchardSpirit copy() {return new OrchardSpirit(this);
public class ParallelLives extends CardImpl {
public ParallelLives(UUID ownerId) {
public ParallelLives(final ParallelLives card) {
public ParallelLives copy() {return new ParallelLives(this);
class ParallelLivesEffect extends ReplacementEffectImpl {
public ParallelLivesEffect() {
public ParallelLivesEffect(final ParallelLivesEffect effect) {
public ParallelLivesEffect copy() {return new ParallelLivesEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(EventType.CREATE_TOKEN);
public boolean applies(GameEvent event, Ability source, Game game) {return spell != null && spell.getControllerId().equals(source.getControllerId());
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class Paraselene extends CardImpl {
public Paraselene(UUID ownerId) {
public Paraselene(final Paraselene card) {
public Paraselene copy() {return new Paraselene(this);
class ParaseleneEffect extends OneShotEffect {
public ParaseleneEffect() {
public ParaseleneEffect(ParaseleneEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ParaseleneEffect copy() {return new ParaseleneEffect(this);
public class PastInFlames extends CardImpl {
public PastInFlames(UUID ownerId) {
public PastInFlames(final PastInFlames card) {
public PastInFlames copy() {return new PastInFlames(this);
class PastInFlamesEffect extends ContinuousEffectImpl {
public PastInFlamesEffect() {
public PastInFlamesEffect(final PastInFlamesEffect effect) {
public PastInFlamesEffect copy() {return new PastInFlamesEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;return false;
public class PitchburnDevils extends CardImpl {
public PitchburnDevils(UUID ownerId) {
public PitchburnDevils(final PitchburnDevils card) {
public PitchburnDevils copy() {return new PitchburnDevils(this);
public class PreyUpon extends CardImpl {
public PreyUpon(UUID ownerId) {
public PreyUpon(final PreyUpon card) {
public PreyUpon copy() {return new PreyUpon(this);return new PurifyTheGrave(this);
public class RageThrower extends CardImpl {
public RageThrower(UUID ownerId) {
public RageThrower(final RageThrower card) {
public RageThrower copy() {return new RageThrower(this);
public class RakishHeir extends CardImpl {
public RakishHeir(UUID ownerId) {
public RakishHeir(final RakishHeir card) {
public RakishHeir copy() {return new RakishHeir(this);
class RakishHeirTriggeredAbility extends TriggeredAbilityImpl {
public RakishHeirTriggeredAbility() {
public RakishHeirTriggeredAbility(final RakishHeirTriggeredAbility ability) {
public RakishHeirTriggeredAbility copy() {return new RakishHeirTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Vampire you control deals combat damage to a player, put a +1/+1 counter on it.";
public class RallyThePeasants extends CardImpl {
public RallyThePeasants(UUID ownerId) {
public RallyThePeasants(final RallyThePeasants card) {
public RallyThePeasants copy() {return new RallyThePeasants(this);
public class RampagingWerewolf extends CardImpl {
public RampagingWerewolf(UUID ownerId) {
public RampagingWerewolf(final RampagingWerewolf card) {
public RampagingWerewolf copy() {return new RampagingWerewolf(this);
public class RangersGuile extends CardImpl {
public RangersGuile(UUID ownerId) {
public RangersGuile(final RangersGuile card) {
public RangersGuile copy() {return new RangersGuile(this);
public class ReaperFromTheAbyss extends CardImpl {
public ReaperFromTheAbyss(UUID ownerId) {
public ReaperFromTheAbyss(final ReaperFromTheAbyss card) {
public ReaperFromTheAbyss copy() {return new ReaperFromTheAbyss(this);
class ReaperFromTheAbyssAbility extends TriggeredAbilityImpl {
public ReaperFromTheAbyssAbility() {
public ReaperFromTheAbyssAbility(final ReaperFromTheAbyssAbility ability) {
public ReaperFromTheAbyssAbility copy() {return new ReaperFromTheAbyssAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return watcher.conditionMet();
public String getRule() {return "Morbid - At the beginning of each end step, if a creature died this turn, destroy target non-demon creature.";
public class Rebuke extends CardImpl {
public Rebuke(UUID ownerId) {
public Rebuke(final Rebuke card) {
public Rebuke copy() {return new Rebuke(this);
public class RollingTemblor extends CardImpl {
public RollingTemblor(UUID ownerId) {
public RollingTemblor(final RollingTemblor card) {
public RollingTemblor copy() {return new RollingTemblor(this);
public class RooftopStorm extends CardImpl {
public RooftopStorm(UUID ownerId) {
public RooftopStorm(final RooftopStorm card) {
public RooftopStorm copy() {return new RooftopStorm(this);
RooftopStormCostReductionEffect() {
RooftopStormCostReductionEffect(RooftopStormCostReductionEffect effect) {return true;return true;return false;
public RooftopStormCostReductionEffect copy() {return new RooftopStormCostReductionEffect(this);
public class RottingFensnake extends CardImpl {
public RottingFensnake(UUID ownerId) {
public RottingFensnake(final RottingFensnake card) {
public RottingFensnake copy() {return new RottingFensnake(this);
public class RunechantersPike extends CardImpl {
public RunechantersPike(UUID ownerId) {
public RunechantersPike(final RunechantersPike card) {
public RunechantersPike copy() {return new RunechantersPike(this);
class RunechantersPikeValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return player.getGraveyard().getCards(RunechantersPike.filterCard, game).size();return 0;
public DynamicValue copy() {return this;
public String getMessage() {return "instant and sorcery card in your graveyard";
public String toString() {return "X";
public class RunicRepetition extends CardImpl {
public RunicRepetition(UUID ownerId) {
public RunicRepetition(final RunicRepetition card) {
public RunicRepetition copy() {return new RunicRepetition(this);
public class ScourgeOfGeierReach extends CardImpl {
public ScourgeOfGeierReach(UUID ownerId) {
public ScourgeOfGeierReach(final ScourgeOfGeierReach card) {
public ScourgeOfGeierReach copy() {return new ScourgeOfGeierReach(this);
public class ScreechingBat extends CardImpl {
public ScreechingBat(UUID ownerId) {
public ScreechingBat(final ScreechingBat card) {
public ScreechingBat copy() {return new ScreechingBat(this);
class ScreechingBatBeginningOfUpkeepTriggeredAbility extends TriggeredAbilityImpl {
public ScreechingBatBeginningOfUpkeepTriggeredAbility() {
public ScreechingBatBeginningOfUpkeepTriggeredAbility(final ScreechingBatBeginningOfUpkeepTriggeredAbility ability) {
public ScreechingBatBeginningOfUpkeepTriggeredAbility copy() {return new ScreechingBatBeginningOfUpkeepTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public String getRule() {return "At the beginning of your upkeep, you may pay {2}{B}{B}. If you do, transform {this}.";return new ScreechingBatTransformSourceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SelflessCathar extends CardImpl {
public SelflessCathar(UUID ownerId) {
public SelflessCathar(final SelflessCathar card) {
public SelflessCathar copy() {return new SelflessCathar(this);
public class SelhoffOccultist extends CardImpl {
public SelhoffOccultist(UUID ownerId) {
public SelhoffOccultist(final SelhoffOccultist card) {
public SelhoffOccultist copy() {return new SelhoffOccultist(this);
public class SensoryDeprivation extends CardImpl {
public SensoryDeprivation(UUID ownerId) {
public SensoryDeprivation(final SensoryDeprivation card) {
public SensoryDeprivation copy() {return new SensoryDeprivation(this);
public class SeverTheBloodline extends CardImpl {
public SeverTheBloodline(UUID ownerId) {
public SeverTheBloodline(final SeverTheBloodline card) {
public SeverTheBloodline copy() {return new SeverTheBloodline(this);
class SeverTheBloodlineEffect extends OneShotEffect {
public SeverTheBloodlineEffect() {
public SeverTheBloodlineEffect(final SeverTheBloodlineEffect effect) {
public SeverTheBloodlineEffect copy() {return new SeverTheBloodlineEffect(this);
public boolean apply(Game game, Ability source) {return new SharpenedPitchfork(this);
public class SilentDeparture extends CardImpl {
public SilentDeparture(UUID ownerId) {
public SilentDeparture(final SilentDeparture card) {
public SilentDeparture copy() {return new SilentDeparture(this);
public class SilverchaseFox extends CardImpl {
public SilverchaseFox(UUID ownerId) {
public SilverchaseFox(final SilverchaseFox card) {
public SilverchaseFox copy() {return new SilverchaseFox(this);
public class SilverInlaidDagger extends CardImpl {
public SilverInlaidDagger(UUID ownerId) {
public SilverInlaidDagger(final SilverInlaidDagger card) {
public SilverInlaidDagger copy() {return new SilverInlaidDagger(this);
public class SkaabGoliath extends CardImpl {
public SkaabGoliath(UUID ownerId) {
public SkaabGoliath(final SkaabGoliath card) {
public SkaabGoliath copy() {return new SkaabGoliath(this);
public class SkaabRuinator extends CardImpl {
public SkaabRuinator(UUID ownerId) {
public SkaabRuinator(final SkaabRuinator card) {
public SkaabRuinator copy() {return new SkaabRuinator(this);
class SkaabRuinatorPlayEffect extends AsThoughEffectImpl {
public SkaabRuinatorPlayEffect() {
public SkaabRuinatorPlayEffect(final SkaabRuinatorPlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SkaabRuinatorPlayEffect copy() {return new SkaabRuinatorPlayEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class SkeletalGrimace extends CardImpl {
public SkeletalGrimace(UUID ownerId) {
public SkeletalGrimace(final SkeletalGrimace card) {
public SkeletalGrimace copy() {return new SkeletalGrimace(this);
public class SlayerOfTheWicked extends CardImpl {
public SlayerOfTheWicked(UUID ownerId) {
public SlayerOfTheWicked(final SlayerOfTheWicked card) {
public SlayerOfTheWicked copy() {return new SlayerOfTheWicked(this);
public class SmiteTheMonstrous extends CardImpl {
public SmiteTheMonstrous(UUID ownerId) {
public SmiteTheMonstrous(final SmiteTheMonstrous card) {
public SmiteTheMonstrous copy() {return new SmiteTheMonstrous(this);
public class SnapcasterMage extends CardImpl {
public SnapcasterMage(UUID ownerId) {
public SnapcasterMage(final SnapcasterMage card) {
public SnapcasterMage copy() {return new SnapcasterMage(this);
class SnapcasterMageEffect extends ContinuousEffectImpl {
public SnapcasterMageEffect() {
public SnapcasterMageEffect(final SnapcasterMageEffect effect) {
public SnapcasterMageEffect copy() {return new SnapcasterMageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SomberwaldSpider extends CardImpl {
public SomberwaldSpider(UUID ownerId) {
public SomberwaldSpider(final SomberwaldSpider card) {
public SomberwaldSpider copy() {return new SomberwaldSpider(this);
public class SpareFromEvil extends CardImpl {
public SpareFromEvil(UUID ownerId) {
public SpareFromEvil(final SpareFromEvil card) {
public SpareFromEvil copy() {return new SpareFromEvil(this);
public class SpectralFlight extends CardImpl {
public SpectralFlight(UUID ownerId) {
public SpectralFlight(final SpectralFlight card) {
public SpectralFlight copy() {return new SpectralFlight(this);
public class SpectralRider extends CardImpl {
public SpectralRider(UUID ownerId) {
public SpectralRider(final SpectralRider card) {
public SpectralRider copy() {return new SpectralRider(this);
public class SpiderSpawning extends CardImpl {
public SpiderSpawning(UUID ownerId) {
public SpiderSpawning(final SpiderSpawning card) {
public SpiderSpawning copy() {return new SpiderSpawning(this);
public class SpideryGrasp extends CardImpl {
public SpideryGrasp(UUID ownerId) {
public SpideryGrasp(final SpideryGrasp card) {
public SpideryGrasp copy() {return new SpideryGrasp(this);
public class Splinterfright extends CardImpl {
public Splinterfright(UUID ownerId) {
public Splinterfright(final Splinterfright card) {
public Splinterfright copy() {return new Splinterfright(this);
public class StalkingVampire extends CardImpl {
public StalkingVampire(UUID ownerId) {
public StalkingVampire(final StalkingVampire card) {
public StalkingVampire copy() {return new StalkingVampire(this);
public class StensiaBloodhall extends CardImpl {
public StensiaBloodhall(UUID ownerId) {
public StensiaBloodhall(final StensiaBloodhall card) {
public StensiaBloodhall copy() {return new StensiaBloodhall(this);
public class StitchedDrake extends CardImpl {
public StitchedDrake(UUID ownerId) {
public StitchedDrake(final StitchedDrake card) {
public StitchedDrake copy() {return new StitchedDrake(this);
public class StitchersApprentice extends CardImpl {
public StitchersApprentice(UUID ownerId) {
public StitchersApprentice(final StitchersApprentice card) {
public StitchersApprentice copy() {return new StitchersApprentice(this);
class StitchersApprenticeEffect extends OneShotEffect {
public StitchersApprenticeEffect() {
public StitchersApprenticeEffect(final StitchersApprenticeEffect effect) {
public StitchersApprenticeEffect copy() {return new StitchersApprenticeEffect(this);
public boolean apply(Game game, Ability source) {return permanent.sacrifice(source.getSourceId(), game);return false;
class HomunculusToken extends Token {
public HomunculusToken() {
public class StonySilence extends CardImpl {
public StonySilence(UUID ownerId) {
public StonySilence(final StonySilence card) {
public StonySilence copy() {return new StonySilence(this);
class StonySilenceCantActivateEffect extends RestrictionEffect {
public StonySilenceCantActivateEffect() {
public StonySilenceCantActivateEffect(final StonySilenceCantActivateEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getCardType().contains(CardType.ARTIFACT);
public boolean canUseActivatedAbilities(Permanent permanent, Ability source, Game game) {return false;
public StonySilenceCantActivateEffect copy() {return new StonySilenceCantActivateEffect(this);
public class StromkirkNoble extends CardImpl {
public StromkirkNoble(UUID ownerId) {
public StromkirkNoble(final StromkirkNoble card) {
public StromkirkNoble copy() {return new StromkirkNoble(this);
public class StromkirkPatrol extends CardImpl {
public StromkirkPatrol(UUID ownerId) {
public StromkirkPatrol(final StromkirkPatrol card) {
public StromkirkPatrol copy() {return new StromkirkPatrol(this);
public class Sturmgeist extends CardImpl {
public Sturmgeist(UUID ownerId) {
public Sturmgeist(final Sturmgeist card) {
public Sturmgeist copy() {return new Sturmgeist(this);
public class ThinkTwice extends CardImpl {
public ThinkTwice(UUID ownerId) {
public ThinkTwice(final ThinkTwice card) {
public ThinkTwice copy() {return new ThinkTwice(this);
public class ThrabenMilitia extends CardImpl {
public ThrabenMilitia(UUID ownerId) {
public ThrabenMilitia(final ThrabenMilitia card) {
public ThrabenMilitia copy() {return new ThrabenMilitia(this);
public class ThrabenPurebloods extends CardImpl {
public ThrabenPurebloods(UUID ownerId) {
public ThrabenPurebloods(final ThrabenPurebloods card) {
public ThrabenPurebloods copy() {return new ThrabenPurebloods(this);
public class ThrabenSentry extends CardImpl {
public ThrabenSentry(UUID ownerId) {
public ThrabenSentry(final ThrabenSentry card) {
public ThrabenSentry copy() {return new ThrabenSentry(this);
class ThrabenSentryTriggeredAbility extends TriggeredAbilityImpl {
public ThrabenSentryTriggeredAbility() {
public ThrabenSentryTriggeredAbility(ThrabenSentryTriggeredAbility ability) {
public ThrabenSentryTriggeredAbility copy() {return new ThrabenSentryTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return false;return permanent != null && permanent.getCardType().contains(CardType.CREATURE) &&
public String getRule() {return "Whenever another creature you control dies, you may transform Thraben Sentry";
public class TormentedPariah extends CardImpl {
public TormentedPariah(UUID ownerId) {
public TormentedPariah(final TormentedPariah card) {
public TormentedPariah copy() {return new TormentedPariah(this);
public class TraitorousBlood extends CardImpl {
public TraitorousBlood(UUID ownerId) {
public TraitorousBlood(final TraitorousBlood card) {
public TraitorousBlood copy() {return new TraitorousBlood(this);
public class TravelersAmulet extends CardImpl {
public TravelersAmulet(UUID ownerId) {
public TravelersAmulet(final TravelersAmulet card) {
public TravelersAmulet copy() {return new TravelersAmulet(this);
public class TravelPreparations extends CardImpl {
public TravelPreparations(UUID ownerId) {
public TravelPreparations(final TravelPreparations card) {
public TravelPreparations copy() {return new TravelPreparations(this);
public class TreeOfRedemption extends CardImpl {
public TreeOfRedemption(UUID ownerId) {
public TreeOfRedemption(final TreeOfRedemption card) {
public TreeOfRedemption copy() {return new TreeOfRedemption(this);
class TreeOfRedemptionEffect extends OneShotEffect {
public TreeOfRedemptionEffect() {
public TreeOfRedemptionEffect(final TreeOfRedemptionEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;return false;return true;return false;
public TreeOfRedemptionEffect copy() {return new TreeOfRedemptionEffect(this);
public class TrepanationBlade extends CardImpl {
public TrepanationBlade(UUID ownerId) {
public TrepanationBlade(final TrepanationBlade card) {
public TrepanationBlade copy() {return new TrepanationBlade(this);
class TrepanationBladeDiscardEffect extends OneShotEffect {
public TrepanationBladeDiscardEffect() {
public TrepanationBladeDiscardEffect(final TrepanationBladeDiscardEffect effect) {
public TrepanationBladeDiscardEffect copy() {return new TrepanationBladeDiscardEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;
public String getText(Mode mode) {return super.getText(mode); 
public class TributeToHunger extends CardImpl {
public TributeToHunger(UUID ownerId) {
public TributeToHunger(final TributeToHunger card) {
public TributeToHunger copy() {return new TributeToHunger(this);
class TributeToHungerEffect extends OneShotEffect {
TributeToHungerEffect() {
TributeToHungerEffect(TributeToHungerEffect effect) {
public TributeToHungerEffect copy() {return new TributeToHungerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TyphoidRats extends CardImpl {
public TyphoidRats(UUID ownerId) {
public TyphoidRats(final TyphoidRats card) {
public TyphoidRats copy() {return new TyphoidRats(this);
public class UlvenwaldMystics extends CardImpl {
public UlvenwaldMystics(UUID ownerId) {
public UlvenwaldMystics(final UlvenwaldMystics card) {
public UlvenwaldMystics copy() {return new UlvenwaldMystics(this);
public class UlvenwaldPrimordials extends CardImpl {
public UlvenwaldPrimordials(UUID ownerId) {
public UlvenwaldPrimordials(final UlvenwaldPrimordials card) {
public UlvenwaldPrimordials copy() {return new UlvenwaldPrimordials(this);
public class UnbreathingHorde extends CardImpl {
public UnbreathingHorde(UUID ownerId) {
public UnbreathingHorde(final UnbreathingHorde card) {
public UnbreathingHorde copy() {return new UnbreathingHorde(this);
class UnbreathingHordeEffect1 extends OneShotEffect {
public UnbreathingHordeEffect1() {
public UnbreathingHordeEffect1(final UnbreathingHordeEffect1 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public UnbreathingHordeEffect1 copy() {return new UnbreathingHordeEffect1(this);
class UnbreathingHordeEffect2 extends PreventionEffectImpl {
public UnbreathingHordeEffect2() {
public UnbreathingHordeEffect2(final UnbreathingHordeEffect2 effect) {
public UnbreathingHordeEffect2 copy() {return new UnbreathingHordeEffect2(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return retValue;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class UnburialRites extends CardImpl {
public UnburialRites(UUID ownerId) {
public UnburialRites(final UnburialRites card) {
public UnburialRites copy() {return new UnburialRites(this);
public class UndeadAlchemist extends CardImpl {
public UndeadAlchemist(UUID ownerId) {
public UndeadAlchemist(final UndeadAlchemist card) {
public UndeadAlchemist copy() {return new UndeadAlchemist(this);
class UndeadAlchemistTriggeredAbility extends TriggeredAbilityImpl {
public UndeadAlchemistTriggeredAbility() {
public UndeadAlchemistTriggeredAbility(final UndeadAlchemistTriggeredAbility ability) {
public UndeadAlchemistTriggeredAbility copy() {return new UndeadAlchemistTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature card is put into an opponent's graveyard from his or her library, exile that card and put a 2/2 black Zombie creature token onto the battlefield.";
class UndeadAlchemistEffect extends ReplacementEffectImpl {
UndeadAlchemistEffect() {
UndeadAlchemistEffect(final UndeadAlchemistEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return player.moveCards(player.getLibrary().getTopCards(game, event.getAmount()), Zone.LIBRARY, Zone.GRAVEYARD, source, game);return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public UndeadAlchemistEffect copy() {return new UndeadAlchemistEffect(this);
public class UnholyFiend extends CardImpl {
public UnholyFiend(UUID ownerId) {
public UnholyFiend(final UnholyFiend card) {
public UnholyFiend copy() {return new UnholyFiend(this);
public class VampireInterloper extends CardImpl {
public VampireInterloper(UUID ownerId) {
public VampireInterloper(final VampireInterloper card) {
public VampireInterloper copy() {return new VampireInterloper(this);
public class VampiricFury extends CardImpl {
public VampiricFury(UUID ownerId) {
public VampiricFury(final VampiricFury card) {
public VampiricFury copy() {return new VampiricFury(this);
public class VictimOfNight extends CardImpl {
public VictimOfNight(UUID ownerId) {
public VictimOfNight(final VictimOfNight card) {
public VictimOfNight copy() {return new VictimOfNight(this);
public class VillageBellRinger extends CardImpl {
public VillageBellRinger(UUID ownerId) {
public VillageBellRinger(final VillageBellRinger card) {
public VillageBellRinger copy() {return new VillageBellRinger(this);
public class VillageCannibals extends CardImpl {
public VillageCannibals(UUID ownerId) {
public VillageCannibals(final VillageCannibals card) {
public VillageCannibals copy() {return new VillageCannibals(this);
class VillageCannibalsTriggeredAbility extends TriggeredAbilityImpl {
public VillageCannibalsTriggeredAbility() {
public VillageCannibalsTriggeredAbility(final VillageCannibalsTriggeredAbility ability) {
public VillageCannibalsTriggeredAbility copy() {return new VillageCannibalsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever another Human creature dies, " + super.getRule();
public class VillageIronsmith extends CardImpl {
public VillageIronsmith(UUID ownerId) {
public VillageIronsmith(final VillageIronsmith card) {
public VillageIronsmith copy() {return new VillageIronsmith(this);
public class VillagersOfEstwald extends CardImpl {
public VillagersOfEstwald(UUID ownerId) {
public VillagersOfEstwald(final VillagersOfEstwald card) {
public VillagersOfEstwald copy() {return new VillagersOfEstwald(this);
public class VoicelessSpirit extends CardImpl {
public VoicelessSpirit(UUID ownerId) {
public VoicelessSpirit(final VoicelessSpirit card) {
public VoicelessSpirit copy() {return new VoicelessSpirit(this);
public class WalkingCorpse extends CardImpl {
public WalkingCorpse(UUID ownerId) {
public WalkingCorpse(final WalkingCorpse card) {
public WalkingCorpse copy() {return new WalkingCorpse(this);
public class WildbloodPack extends CardImpl {
public WildbloodPack(UUID ownerId) {
public WildbloodPack(final WildbloodPack card) {
public WildbloodPack copy() {return new WildbloodPack(this);
public class WitchbaneOrb extends CardImpl {
public WitchbaneOrb(UUID ownerId) {
public WitchbaneOrb(final WitchbaneOrb card) {
public WitchbaneOrb copy() {return new WitchbaneOrb(this);
class WitchbaneOrbEffect extends OneShotEffect {
public WitchbaneOrbEffect() {
public WitchbaneOrbEffect(final WitchbaneOrbEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public WitchbaneOrbEffect copy() {return new WitchbaneOrbEffect(this);
public class WoodenStake extends CardImpl {
public WoodenStake(UUID ownerId) {
public WoodenStake(final WoodenStake card) {
public WoodenStake copy() {return new WoodenStake(this);
class WoodenStakeBlocksOrBecomesBlockedTriggeredAbility extends TriggeredAbilityImpl {
public WoodenStakeBlocksOrBecomesBlockedTriggeredAbility() {
public WoodenStakeBlocksOrBecomesBlockedTriggeredAbility(final WoodenStakeBlocksOrBecomesBlockedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.BLOCKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;return true;return false;return false;
public String getRule() {return "Whenever equipped creature blocks or becomes blocked by a Vampire, destroy that creature. It can't be regenerated.";
public WoodenStakeBlocksOrBecomesBlockedTriggeredAbility copy() {return new WoodenStakeBlocksOrBecomesBlockedTriggeredAbility(this);
public class WoodlandCemetery extends CardImpl {
public WoodlandCemetery(UUID ownerId) {
public WoodlandCemetery(final WoodlandCemetery card) {
public WoodlandCemetery copy() {return new WoodlandCemetery(this);
public class WoodlandSleuth extends CardImpl {private static final String staticText = "Morbid - When {this} enters the battlefield, if a creature died this turn, return a creature card at random from your graveyard to your hand.";
public WoodlandSleuth(UUID ownerId) {
public WoodlandSleuth(final WoodlandSleuth card) {
public WoodlandSleuth copy() {return new WoodlandSleuth(this);
class WoodlandSleuthEffect extends OneShotEffect {
public WoodlandSleuthEffect() {this.staticText = "return a creature card at random from your graveyard to your hand";
public WoodlandSleuthEffect(final WoodlandSleuthEffect effect) {
public WoodlandSleuthEffect copy() {return new WoodlandSleuthEffect(this);
public boolean apply(Game game, Ability source) {game.informPlayers(card.getName() + " returned to the hand of " + player.getLogName());return true;return false;
public class WreathofGeists extends CardImpl {
public WreathofGeists(UUID ownerId) {
public WreathofGeists(final WreathofGeists card) {
public WreathofGeists copy() {return new WreathofGeists(this);
public class Absorb extends CardImpl {
public Absorb(UUID ownerId) {
public Absorb(final Absorb card) {
public Absorb copy() {return new Absorb(this);return new AEtherRift(this);this.staticText = "discard a card at random. If you discard a creature card this way, return it from your graveyard to the battlefield unless any player pays 5 life";return new AEtherRiftEffect(this);
public boolean apply(Game game, Ability source) {Effect returnEffect = new ReturnFromGraveyardToBattlefieldTargetEffect();returnEffect.setTargetPointer(new FixedTarget(card.getId()));Effect doEffect = new DoUnlessAnyPlayerPaysEffect(returnEffect, new PayLifeCost(5),"Pay 5 life to prevent " + card.getLogName() + " to return from graveyard to battlefield?");return doEffect.apply(game, source);return true;return false;
public class AlabasterLeech extends CardImpl {
public AlabasterLeech(UUID ownerId) {
public AlabasterLeech(final AlabasterLeech card) {
public AlabasterLeech copy() {return new AlabasterLeech(this);
public class AncientSpring extends CardImpl {
public AncientSpring(UUID ownerId) {
public AncientSpring(final AncientSpring card) {
public AncientSpring copy() {return new AncientSpring(this);
public class AndraditeLeech extends CardImpl {
public AndraditeLeech(UUID ownerId) {
public AndraditeLeech(final AndraditeLeech card) {
public AndraditeLeech copy() {return new AndraditeLeech(this);
public class Annihilate extends CardImpl {
public Annihilate(UUID ownerId) {
public Annihilate(final Annihilate card) {
public Annihilate copy() {return new Annihilate(this);
public class ArchaeologicalDig extends CardImpl {
public ArchaeologicalDig(UUID ownerId) {
public ArchaeologicalDig(final ArchaeologicalDig card) {
public ArchaeologicalDig copy() {return new ArchaeologicalDig(this);
public class ArdentSoldier extends CardImpl {
public ArdentSoldier(UUID ownerId) {
public ArdentSoldier(final ArdentSoldier card) {
public ArdentSoldier copy() {return new ArdentSoldier(this);
public class ArmadilloCloak extends CardImpl {
public ArmadilloCloak(UUID ownerId) {
public ArmadilloCloak(final ArmadilloCloak card) {
public ArmadilloCloak copy() {return new ArmadilloCloak(this);
public class ArmoredGuardian extends CardImpl {
public ArmoredGuardian(UUID ownerId) {
public ArmoredGuardian(final ArmoredGuardian card) {
public ArmoredGuardian copy() {return new ArmoredGuardian(this);return new ArtifactMutation(this);
public class AuraMutation extends CardImpl {
public AuraMutation(UUID ownerId) {
public AuraMutation(final AuraMutation card) {
public AuraMutation copy() {return new AuraMutation(this);
public class Backlash extends CardImpl {
public Backlash(UUID ownerId) {
public Backlash(final Backlash card) {
public Backlash copy() {return new Backlash(this);
class BacklashEffect extends OneShotEffect {
public BacklashEffect() {
public BacklashEffect(final BacklashEffect effect) {
public BacklashEffect copy () {return new BacklashEffect(this);
public boolean apply(Game game, Ability source) {return applied;
public class BenalishEmissary extends CardImpl {
public BenalishEmissary(UUID ownerId) {
public BenalishEmissary(final BenalishEmissary card) {
public BenalishEmissary copy() {return new BenalishEmissary(this);
public class BenalishHeralds extends CardImpl {
public BenalishHeralds(UUID ownerId) {
public BenalishHeralds(final BenalishHeralds card) {
public BenalishHeralds copy() {return new BenalishHeralds(this);
public class BenalishLancer extends CardImpl {
public BenalishLancer(UUID ownerId) {
public BenalishLancer(final BenalishLancer card) {
public BenalishLancer copy() {return new BenalishLancer(this);
public class BenalishTrapper extends CardImpl {
public BenalishTrapper(UUID ownerId) {
public BenalishTrapper(final BenalishTrapper card) {
public BenalishTrapper copy() {return new BenalishTrapper(this);
public class Bind extends CardImpl {
public Bind(UUID ownerId) {
public Bind(final Bind card) {
public Bind copy() {return new Bind(this);
public class BlazingSpecter extends CardImpl {
public BlazingSpecter(UUID ownerId) {
public BlazingSpecter(final BlazingSpecter card) {
public BlazingSpecter copy() {return new BlazingSpecter(this);
public class BlindSeer extends CardImpl {
public BlindSeer(UUID ownerId) {
public BlindSeer(final BlindSeer card) {
public BlindSeer copy() {return new BlindSeer(this);
public class BloodstoneCameo extends CardImpl {
public BloodstoneCameo(UUID ownerId) {
public BloodstoneCameo(final BloodstoneCameo card) {
public BloodstoneCameo copy() {return new BloodstoneCameo(this);
public class BreakingWave extends CardImpl {
public BreakingWave(UUID ownerId) {
public BreakingWave(final BreakingWave card) {
public BreakingWave copy() {return new BreakingWave(this);
class BreakingWaveEffect extends OneShotEffect {
public BreakingWaveEffect() {
public BreakingWaveEffect(BreakingWaveEffect copy) {
public BreakingWaveEffect copy() {return new BreakingWaveEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class CallousGiant extends CardImpl {
public CallousGiant(UUID ownerId) {
public CallousGiant(final CallousGiant card) {
public CallousGiant copy() {return new CallousGiant(this);
class CallousGiantEffect extends PreventionEffectImpl {
public CallousGiantEffect() {
public CallousGiantEffect(final CallousGiantEffect effect) {
public CallousGiantEffect copy() {return new CallousGiantEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {
{return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return super.applies(event, source, game) && event.getTargetId().equals(source.getSourceId());
public class CanopySurge extends CardImpl {
public CanopySurge(UUID ownerId) {
public CanopySurge(final CanopySurge card) {
public CanopySurge copy() {return new CanopySurge(this);
public class CapashenUnicorn extends CardImpl {
public CapashenUnicorn(UUID ownerId) {
public CapashenUnicorn(final CapashenUnicorn card) {
public CapashenUnicorn copy() {return new CapashenUnicorn(this);
public class CaptainSisay extends CardImpl {
public CaptainSisay(UUID ownerId) {
public CaptainSisay(final CaptainSisay card) {
public CaptainSisay copy() {return new CaptainSisay(this);
public class ChaoticStrike extends CardImpl {
public ChaoticStrike(UUID ownerId) {
public ChaoticStrike(final ChaoticStrike card) {
public ChaoticStrike copy() {return new ChaoticStrike(this);
class ChaoticStrikeEffect extends OneShotEffect {
public ChaoticStrikeEffect() {
public ChaoticStrikeEffect(ChaoticStrikeEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ChaoticStrikeEffect copy() {return new ChaoticStrikeEffect(this);
public class ChargingTroll extends CardImpl {
public ChargingTroll(UUID ownerId) {
public ChargingTroll(final ChargingTroll card) {
public ChargingTroll copy() {return new ChargingTroll(this);
public class CinderShade extends CardImpl {
public CinderShade(UUID ownerId) {
public CinderShade(final CinderShade card) {
public CinderShade copy() {return new CinderShade(this);
public class CoastalTower extends CardImpl {
public CoastalTower(UUID ownerId) {
public CoastalTower(final CoastalTower card) {
public CoastalTower copy() {return new CoastalTower(this);
public class CollapsingBorders extends CardImpl {
public CollapsingBorders(UUID ownerId) {
public CollapsingBorders(final CollapsingBorders card) {
public CollapsingBorders copy() {return new CollapsingBorders(this);
public class CollectiveRestraint extends CardImpl {
public CollectiveRestraint(UUID ownerId) {
public CollectiveRestraint(final CollectiveRestraint card) {
public CollectiveRestraint copy() {return new CollectiveRestraint(this);
class CollectiveRestraintPayManaToAttackAllEffect extends CantAttackYouUnlessPayManaAllEffect {
CollectiveRestraintPayManaToAttackAllEffect() {
CollectiveRestraintPayManaToAttackAllEffect(CollectiveRestraintPayManaToAttackAllEffect effect) {
public ManaCosts getManaCostToPay(GameEvent event, Ability source, Game game) {return new ManaCostsImpl<>("{" + domainValue + "}");return null;
public CollectiveRestraintPayManaToAttackAllEffect copy() {return new CollectiveRestraintPayManaToAttackAllEffect(this);
public class CrimsonAcolyte extends CardImpl {
public CrimsonAcolyte(UUID ownerId) {
public CrimsonAcolyte(final CrimsonAcolyte card) {
public CrimsonAcolyte copy() {return new CrimsonAcolyte(this);
public class CrosissAttendant extends CardImpl {
public CrosissAttendant(UUID ownerId) {
public CrosissAttendant(final CrosissAttendant card) {
public CrosissAttendant copy() {return new CrosissAttendant(this);
public class CrosisThePurger extends CardImpl {
public CrosisThePurger(UUID ownerId) {
public CrosisThePurger(final CrosisThePurger card) {
public CrosisThePurger copy() {return new CrosisThePurger(this);
class CrosisThePurgerEffect extends OneShotEffect {
CrosisThePurgerEffect() {
CrosisThePurgerEffect(final CrosisThePurgerEffect effect) {
public CrosisThePurgerEffect copy() {return new CrosisThePurgerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CrusadingKnight extends CardImpl {
public CrusadingKnight(UUID ownerId) {
public CrusadingKnight(final CrusadingKnight card) {
public CrusadingKnight copy() {return new CrusadingKnight(this);
public class CryptAngel extends CardImpl {
public CryptAngel(UUID ownerId) {
public CryptAngel(final CryptAngel card) {
public CryptAngel copy() {return new CryptAngel(this);
public class CursedFlesh extends CardImpl {
public CursedFlesh(UUID ownerId) {
public CursedFlesh(final CursedFlesh card) {
public CursedFlesh copy() {return new CursedFlesh(this);
public class DarigaazsAttendant extends CardImpl {
public DarigaazsAttendant(UUID ownerId) {
public DarigaazsAttendant(final DarigaazsAttendant card) {
public DarigaazsAttendant copy() {return new DarigaazsAttendant(this);
public class Disrupt extends CardImpl {
public Disrupt(UUID ownerId) {
public Disrupt(final Disrupt card) {
public Disrupt copy() {return new Disrupt(this);
public class DivinePresence extends CardImpl {
public DivinePresence(UUID ownerId) {
public DivinePresence(final DivinePresence card) {
public DivinePresence copy() {return new DivinePresence(this);
class DivinePresenceEffect extends ReplacementEffectImpl {
public DivinePresenceEffect() {
public DivinePresenceEffect(final DivinePresenceEffect effect) {
public DivinePresenceEffect copy() {return new DivinePresenceEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getAmount() > 3;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class DoOrDie extends CardImpl {
public DoOrDie(UUID ownerId) {
public DoOrDie(final DoOrDie card) {
public DoOrDie copy() {return new DoOrDie(this);
class DoOrDieEffect extends OneShotEffect {
public DoOrDieEffect() {
public DoOrDieEffect(final DoOrDieEffect effect) {
public DoOrDieEffect copy() {return new DoOrDieEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private void destroyPermanents(List<Permanent> pile, Game game, Ability source) {
public class DrakeSkullCameo extends CardImpl {
public DrakeSkullCameo(UUID ownerId) {
public DrakeSkullCameo(final DrakeSkullCameo card) {
public DrakeSkullCameo copy() {return new DrakeSkullCameo(this);
public class DreamThrush extends CardImpl {
public DreamThrush(UUID ownerId) {
public DreamThrush(final DreamThrush card) {
public DreamThrush copy() {return new DreamThrush(this);
public class Dredge extends CardImpl {
public Dredge(UUID ownerId) {
public Dredge(final Dredge card) {
public Dredge copy() {return new Dredge(this);
public class DromarsAttendant extends CardImpl {
public DromarsAttendant(UUID ownerId) {
public DromarsAttendant(final DromarsAttendant card) {
public DromarsAttendant copy() {return new DromarsAttendant(this);
public class DromarTheBanisher extends CardImpl {
public DromarTheBanisher(UUID ownerId) {
public DromarTheBanisher(final DromarTheBanisher card) {
public DromarTheBanisher copy() {return new DromarTheBanisher(this);
class DromarTheBanisherEffect extends OneShotEffect {
DromarTheBanisherEffect() {this.staticText = "choose a color, then return all creatures of that color to their owners' hands.";
DromarTheBanisherEffect(final DromarTheBanisherEffect effect) {
public DromarTheBanisherEffect copy() {return new DromarTheBanisherEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Duskwalker extends CardImpl {
public Duskwalker(UUID ownerId) {
public Duskwalker(final Duskwalker card) {
public Duskwalker copy() {return new Duskwalker(this);
public class ElfhamePalace extends CardImpl {
public ElfhamePalace(UUID ownerId) {
public ElfhamePalace(final ElfhamePalace card) {
public ElfhamePalace copy() {return new ElfhamePalace(this);
public class EmpressGalina extends CardImpl {
public EmpressGalina(UUID ownerId) {
public EmpressGalina(final EmpressGalina card) {
public EmpressGalina copy() {return new EmpressGalina(this);
public class ExplosiveGrowth extends CardImpl {
public ExplosiveGrowth(UUID ownerId) {
public ExplosiveGrowth(final ExplosiveGrowth card) {
public ExplosiveGrowth copy() {return new ExplosiveGrowth(this);
public class FactOrFiction extends CardImpl {
public FactOrFiction(UUID ownerId) {
public FactOrFiction(final FactOrFiction card) {
public FactOrFiction copy() {return new FactOrFiction(this);
class FactOrFictionEffect extends OneShotEffect {
public FactOrFictionEffect() {
public FactOrFictionEffect(final FactOrFictionEffect effect) {
public FactOrFictionEffect copy() {return new FactOrFictionEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class FaerieSquadron extends CardImpl {
public FaerieSquadron(UUID ownerId) {
public FaerieSquadron(final FaerieSquadron card) {
public FaerieSquadron copy() {return new FaerieSquadron(this);
public class FirebrandRanger extends CardImpl {
public FirebrandRanger(UUID ownerId) {
public FirebrandRanger(final FirebrandRanger card) {
public FirebrandRanger copy() {return new FirebrandRanger(this);
class PutLandOnBattlefieldEffect extends OneShotEffect {
public PutLandOnBattlefieldEffect() {
public PutLandOnBattlefieldEffect(final PutLandOnBattlefieldEffect effect) {
public PutLandOnBattlefieldEffect copy() {return new PutLandOnBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class Firescreamer extends CardImpl {
public Firescreamer(UUID ownerId) {
public Firescreamer(final Firescreamer card) {
public Firescreamer copy() {return new Firescreamer(this);
public class FrenziedTilling extends CardImpl {
public FrenziedTilling(UUID ownerId) {
public FrenziedTilling(final FrenziedTilling card) {
public FrenziedTilling copy() {return new FrenziedTilling(this);
public class GalinasKnight extends CardImpl {
public GalinasKnight(UUID ownerId) {
public GalinasKnight(final GalinasKnight card) {
public GalinasKnight copy() {return new GalinasKnight(this);
public class GlimmeringAngel extends CardImpl {
public GlimmeringAngel(UUID ownerId) {
public GlimmeringAngel(final GlimmeringAngel card) {
public GlimmeringAngel copy() {return new GlimmeringAngel(this);
public class GoblinSpy extends CardImpl {
public GoblinSpy(UUID ownerId) {
public GoblinSpy(final GoblinSpy card) {
public GoblinSpy copy() {return new GoblinSpy(this);
public class HannaShipsNavigator extends CardImpl {
public HannaShipsNavigator(UUID ownerId) {
public HannaShipsNavigator(final HannaShipsNavigator card) {
public HannaShipsNavigator copy() {return new HannaShipsNavigator(this);
public class HeroesReunion extends CardImpl {
public HeroesReunion(UUID ownerId) {
public HeroesReunion(final HeroesReunion card) {
public HeroesReunion copy() {return new HeroesReunion(this);
public class HolyDay extends CardImpl {
public HolyDay(UUID ownerId) {
public HolyDay(final HolyDay card) {
public HolyDay copy() {return new HolyDay(this);
public class HoodedKavu extends CardImpl {
public HoodedKavu(UUID ownerId) {
public HoodedKavu(final HoodedKavu card) {
public HoodedKavu copy() {return new HoodedKavu(this);
public class HornedCheetah extends CardImpl {
public HornedCheetah(UUID ownerId) {
public HornedCheetah(final HornedCheetah card) {
public HornedCheetah copy() {return new HornedCheetah(this);
public class HypnoticCloud extends CardImpl {
public HypnoticCloud(UUID ownerId) {
public HypnoticCloud(final HypnoticCloud card) {
public HypnoticCloud copy() {return new HypnoticCloud(this);
public class IrrigationDitch extends CardImpl {
public IrrigationDitch(UUID ownerId) {
public IrrigationDitch(final IrrigationDitch card) {
public IrrigationDitch copy() {return new IrrigationDitch(this);
public class JadeLeech extends CardImpl {
public JadeLeech(UUID ownerId) {
public JadeLeech(final JadeLeech card) {
public JadeLeech copy() {return new JadeLeech(this);
public class JuntuStakes extends CardImpl {
public JuntuStakes(UUID ownerId) {
public JuntuStakes(final JuntuStakes card) {
public JuntuStakes copy() {return new JuntuStakes(this);
public class KangeeAerieKeeper extends CardImpl {
public KangeeAerieKeeper(UUID ownerId) {
public KangeeAerieKeeper(final KangeeAerieKeeper card) {
public KangeeAerieKeeper copy() {return new KangeeAerieKeeper(this);
class KangeeAerieKeeperGetKickerXValue implements DynamicValue {
public KangeeAerieKeeperGetKickerXValue() {
public int calculate(Game game, Ability source, Effect effect) {return count;
public KangeeAerieKeeperGetKickerXValue copy() {return new KangeeAerieKeeperGetKickerXValue();
public String toString() {return "X";
public String getMessage() {return "X";
public class KavuAggressor extends CardImpl {
public KavuAggressor(UUID ownerId) {
public KavuAggressor(final KavuAggressor card) {
public KavuAggressor copy() {return new KavuAggressor(this);
public class KavuChameleon extends CardImpl {
public KavuChameleon(UUID ownerId) {
public KavuChameleon(final KavuChameleon card) {
public KavuChameleon copy() {return new KavuChameleon(this);
public class KavuLair extends CardImpl {
public KavuLair(UUID ownerId) {
public KavuLair(final KavuLair card) {
public KavuLair copy() {return new KavuLair(this);
public class KavuMonarch extends CardImpl {
public KavuMonarch(UUID ownerId) {
public KavuMonarch(final KavuMonarch card) {
public KavuMonarch copy() {return new KavuMonarch(this);
public class KavuRunner extends CardImpl {
public KavuRunner(UUID ownerId) {
public KavuRunner(final KavuRunner card) {
public KavuRunner copy() {return new KavuRunner(this);
public class KavuScout extends CardImpl {
public KavuScout(UUID ownerId) {
public KavuScout(final KavuScout card) {
public KavuScout copy() {return new KavuScout(this);
public class Liberate extends CardImpl {
public Liberate(UUID ownerId) {
public Liberate(final Liberate card) {
public Liberate copy() {return new Liberate(this);
class LiberateEffect extends OneShotEffect {
public LiberateEffect() {
public LiberateEffect(final LiberateEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public LiberateEffect copy() {return new LiberateEffect(this);
public class LlanowarCavalry extends CardImpl {
public LlanowarCavalry(UUID ownerId) {
public LlanowarCavalry(final LlanowarCavalry card) {
public LlanowarCavalry copy() {return new LlanowarCavalry(this);
public class LlanowarElite extends CardImpl {
public LlanowarElite(UUID ownerId) {
public LlanowarElite(final LlanowarElite card) {
public LlanowarElite copy() {return new LlanowarElite(this);
public class LlanowarKnight extends CardImpl {
public LlanowarKnight(UUID ownerId) {
public LlanowarKnight(final LlanowarKnight card) {
public LlanowarKnight copy() {return new LlanowarKnight(this);
public class LlanowarVanguard extends CardImpl {
public LlanowarVanguard(UUID ownerId) {
public LlanowarVanguard(final LlanowarVanguard card) {
public LlanowarVanguard copy() {return new LlanowarVanguard(this);
public class LotusGuardian extends CardImpl {
public LotusGuardian(UUID ownerId) {
public LotusGuardian(final LotusGuardian card) {
public LotusGuardian copy() {return new LotusGuardian(this);
public class ManipulateFate extends CardImpl {
public ManipulateFate(UUID ownerId) {
public ManipulateFate(final ManipulateFate card) {
public ManipulateFate copy() {return new ManipulateFate(this);
class ManipulateFateEffect extends SearchEffect {
ManipulateFateEffect() {
ManipulateFateEffect(final ManipulateFateEffect effect) {
public ManipulateFateEffect copy() {return new ManipulateFateEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public List<UUID> getTargets() {return target.getTargets();
public class MaraudingKnight extends CardImpl {
public MaraudingKnight(UUID ownerId) {
public MaraudingKnight(final MaraudingKnight card) {
public MaraudingKnight copy() {return new MaraudingKnight(this);
public class MetathranTransport extends CardImpl {
public MetathranTransport(UUID ownerId) {
public MetathranTransport(final MetathranTransport card) {
public MetathranTransport copy() {return new MetathranTransport(this);
public class MetathranZombie extends CardImpl {
public MetathranZombie(UUID ownerId) {
public MetathranZombie(final MetathranZombie card) {
public MetathranZombie copy() {return new MetathranZombie(this);
public class MeteorStorm extends CardImpl {
public MeteorStorm(UUID ownerId) {
public MeteorStorm(final MeteorStorm card) {
public MeteorStorm copy() {return new MeteorStorm(this);
public class Mourning extends CardImpl {
public Mourning(UUID ownerId) {
public Mourning(final Mourning card) {
public Mourning copy() {return new Mourning(this);
public class NightscapeApprentice extends CardImpl {
public NightscapeApprentice(UUID ownerId) {
public NightscapeApprentice(final NightscapeApprentice card) {
public NightscapeApprentice copy() {return new NightscapeApprentice(this);
public class NightscapeMaster extends CardImpl {
public NightscapeMaster(UUID ownerId) {Ability returnAbility = new SimpleActivatedAbility(Zone.BATTLEFIELD, new ReturnToHandTargetEffect(), new ManaCostsImpl("{U}{U}"));returnAbility.addTarget(new TargetCreaturePermanent());returnAbility.addCost(new TapSourceCost());this.addAbility(returnAbility);
public NightscapeMaster(final NightscapeMaster card) {
public NightscapeMaster copy() {return new NightscapeMaster(this);
public class NoblePanther extends CardImpl {
public NoblePanther(UUID ownerId) {
public NoblePanther(final NoblePanther card) {
public NoblePanther copy() {return new NoblePanther(this);
public class NomadicElf extends CardImpl {
public NomadicElf(UUID ownerId) {
public NomadicElf(final NomadicElf card) {
public NomadicElf copy() {return new NomadicElf(this);
public class Obliterate extends CardImpl {
public Obliterate(UUID ownerId) {
public Obliterate(final Obliterate card) {
public Obliterate copy() {return new Obliterate(this);
public class ObsidianAcolyte extends CardImpl {
public ObsidianAcolyte(UUID ownerId) {
public ObsidianAcolyte(final ObsidianAcolyte card) {
public ObsidianAcolyte copy() {return new ObsidianAcolyte(this);
public class OrimsTouch extends CardImpl {
public OrimsTouch(UUID ownerId) {
public OrimsTouch(final OrimsTouch card) {
public OrimsTouch copy() {return new OrimsTouch(this);
public class Overload extends CardImpl {
public Overload(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public Overload(final Overload card) {
public Overload copy() {return new Overload(this);
public class PhyrexianAltar extends CardImpl {
public PhyrexianAltar(UUID ownerId) {
public PhyrexianAltar(final PhyrexianAltar card) {
public PhyrexianAltar copy() {return new PhyrexianAltar(this);
public class PhyrexianDelver extends CardImpl {
public PhyrexianDelver(UUID ownerId) {
public PhyrexianDelver(final PhyrexianDelver card) {
public PhyrexianDelver copy() {return new PhyrexianDelver(this);
class PhyrexianDelverEffect extends OneShotEffect {
public PhyrexianDelverEffect() {this.staticText = "return target creature card from your graveyard to the battlefield. You lose life equal to that card's converted mana cost";
public PhyrexianDelverEffect(final PhyrexianDelverEffect effect) {
public PhyrexianDelverEffect copy() {return new PhyrexianDelverEffect(this);
public boolean apply(Game game, Ability source) {return result;return false;
public class PhyrexianInfiltrator extends CardImpl {
public PhyrexianInfiltrator(UUID ownerId) {
public PhyrexianInfiltrator(final PhyrexianInfiltrator card) {
public PhyrexianInfiltrator copy() {return new PhyrexianInfiltrator(this);
public class PhyrexianLens extends CardImpl {
public PhyrexianLens(UUID ownerId) {
public PhyrexianLens(final PhyrexianLens card) {
public PhyrexianLens copy() {return new PhyrexianLens(this);
public class PincerSpider extends CardImpl {
public PincerSpider(UUID ownerId) {
public PincerSpider(final PincerSpider card) {
public PincerSpider copy() {return new PincerSpider(this);
public class PlagueSpitter extends CardImpl {
public PlagueSpitter(UUID ownerId) {
public PlagueSpitter(final PlagueSpitter card) {
public PlagueSpitter copy() {return new PlagueSpitter(this);
public class PlagueSpores extends CardImpl {
public PlagueSpores(UUID ownerId) {
public PlagueSpores(final PlagueSpores card) {
public PlagueSpores copy() {return new PlagueSpores(this);
public class PlanarPortal extends CardImpl {
public PlanarPortal(UUID ownerId) {
public PlanarPortal(final PlanarPortal card) {
public PlanarPortal copy() {return new PlanarPortal(this);
public class PouncingKavu extends CardImpl {
public PouncingKavu(UUID ownerId) {
public PouncingKavu(final PouncingKavu card) {
public PouncingKavu copy() {return new PouncingKavu(this);
public class PowerArmor extends CardImpl {
public PowerArmor(UUID ownerId) {
public PowerArmor(final PowerArmor card) {
public PowerArmor copy() {return new PowerArmor(this);
public class PrisonBarricade extends CardImpl {
public PrisonBarricade(UUID ownerId) {
public PrisonBarricade(final PrisonBarricade card) {
public PrisonBarricade copy() {return new PrisonBarricade(this);
public class Probe extends CardImpl {
public Probe(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public Probe(final Probe card) {
public Probe copy() {return new Probe(this);
public class Prohibit extends CardImpl {
public Prohibit(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public Prohibit(final Prohibit card) {
public Prohibit copy() {return new Prohibit(this);
public class PyreZombie extends CardImpl {
public PyreZombie(UUID ownerId) {
public PyreZombie(final PyreZombie card) {
public PyreZombie copy() {return new PyreZombie(this);
public class QuirionSentinel extends CardImpl {
public QuirionSentinel(UUID ownerId) {
public QuirionSentinel(final QuirionSentinel card) {
public QuirionSentinel copy() {return new QuirionSentinel(this);
public class QuirionTrailblazer extends CardImpl {
public QuirionTrailblazer(UUID ownerId) {
public QuirionTrailblazer(final QuirionTrailblazer card) {
public QuirionTrailblazer copy() {return new QuirionTrailblazer(this);
public class RampantElephant extends CardImpl {
public RampantElephant(UUID ownerId) {
public RampantElephant(final RampantElephant card) {
public RampantElephant copy() {return new RampantElephant(this);
public class RecklessAssault extends CardImpl {
public RecklessAssault(UUID ownerId) {
public RecklessAssault(final RecklessAssault card) {
public RecklessAssault copy() {return new RecklessAssault(this);
public class Recoil extends CardImpl {
public Recoil(UUID ownerId) {
public Recoil(final Recoil card) {
public Recoil copy() {return new Recoil(this);
class RecoilEffect extends OneShotEffect {
public RecoilEffect() {this.staticText = "return target permanent to its owner's hand. Then that player discards a card";
public RecoilEffect(final RecoilEffect effect) {
public RecoilEffect copy() {return new RecoilEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Recover extends CardImpl {
public Recover(UUID ownerId) {
public Recover(final Recover card) {
public Recover copy() {return new Recover(this);
public class Repulse extends CardImpl {
public Repulse(UUID ownerId) {
public Repulse(final Repulse card) {
public Repulse copy() {return new Repulse(this);
public class Restock extends CardImpl {
public Restock(UUID ownerId) {
public Restock(final Restock card) {
public Restock copy() {return new Restock(this);
public class Restrain extends CardImpl {
public Restrain(UUID ownerId) {
public Restrain(final Restrain card) {
public Restrain copy() {return new Restrain(this);
public class RevivingVapors extends CardImpl {
public RevivingVapors(UUID ownerId) {
public RevivingVapors(final RevivingVapors card) {
public RevivingVapors copy() {return new RevivingVapors(this);
class RevivingVaporsEffect extends OneShotEffect {
public RevivingVaporsEffect() {
public RevivingVaporsEffect(final RevivingVaporsEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;return true;
public RevivingVaporsEffect copy() {return new RevivingVaporsEffect(this);
public class RewardsOfDiversity extends CardImpl {
public RewardsOfDiversity(UUID ownerId) {
public RewardsOfDiversity(final RewardsOfDiversity card) {
public RewardsOfDiversity copy() {return new RewardsOfDiversity(this);
public class RiptideCrab extends CardImpl {
public RiptideCrab(UUID ownerId) {
public RiptideCrab(final RiptideCrab card) {
public RiptideCrab copy() {return new RiptideCrab(this);
public class RithsAttendant extends CardImpl {
public RithsAttendant(UUID ownerId) {
public RithsAttendant(final RithsAttendant card) {
public RithsAttendant copy() {return new RithsAttendant(this);
public class RithTheAwakener extends CardImpl {
public RithTheAwakener(UUID ownerId) {
public RithTheAwakener(final RithTheAwakener card) {
public RithTheAwakener copy() {return new RithTheAwakener(this);
class RithTheAwakenerEffect extends OneShotEffect {
public RithTheAwakenerEffect() {
public RithTheAwakenerEffect(final RithTheAwakenerEffect effect) {
public RithTheAwakenerEffect copy() {return new RithTheAwakenerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class RubyLeech extends CardImpl {
public RubyLeech(UUID ownerId) {
public RubyLeech(final RubyLeech card) {
public RubyLeech copy() {return new RubyLeech(this);
public class SabertoothNishoba extends CardImpl {
public SabertoothNishoba(UUID ownerId) {
public SabertoothNishoba(final SabertoothNishoba card) {
public SabertoothNishoba copy() {return new SabertoothNishoba(this);
public class SaltMarsh extends CardImpl {
public SaltMarsh(UUID ownerId) {
public SaltMarsh(final SaltMarsh card) {
public SaltMarsh copy() {return new SaltMarsh(this);
public class SamiteArcher extends CardImpl {
public SamiteArcher(UUID ownerId) {
public SamiteArcher(final SamiteArcher card) {
public SamiteArcher copy() {return new SamiteArcher(this);
public class SapphireLeech extends CardImpl {
public SapphireLeech(UUID ownerId) {
public SapphireLeech(final SapphireLeech card) {
public SapphireLeech copy() {return new SapphireLeech(this);
public class SaprolingSymbiosis extends CardImpl {
public SaprolingSymbiosis(UUID ownerId) {
public SaprolingSymbiosis(final SaprolingSymbiosis card) {
public SaprolingSymbiosis copy() {return new SaprolingSymbiosis(this);
public class ScorchingLava extends CardImpl {
public ScorchingLava(UUID ownerId) {
public ScorchingLava(final ScorchingLava card) {
public ScorchingLava copy() {return new ScorchingLava(this);
public class ScoutingTrek extends CardImpl {
public ScoutingTrek(UUID ownerId) {
public ScoutingTrek(final ScoutingTrek card) {
public ScoutingTrek copy() {return new ScoutingTrek(this);
public class SeashellCameo extends CardImpl {
public SeashellCameo(UUID ownerId) {
public SeashellCameo(final SeashellCameo card) {
public SeashellCameo copy() {return new SeashellCameo(this);
public class SeersVision extends CardImpl {
public SeersVision(UUID ownerId) {
public SeersVision(final SeersVision card) {
public SeersVision copy() {return new SeersVision(this);
public class SerpentineKavu extends CardImpl {
public SerpentineKavu(UUID ownerId) {
public SerpentineKavu(final SerpentineKavu card) {
public SerpentineKavu copy() {return new SerpentineKavu(this);
public class Shackles extends CardImpl {
public Shackles(UUID ownerId) {
public Shackles(final Shackles card) {
public Shackles copy() {return new Shackles(this);
public class ShivanEmissary extends CardImpl {
public ShivanEmissary(UUID ownerId) {
public ShivanEmissary(final ShivanEmissary card) {
public ShivanEmissary copy() {return new ShivanEmissary(this);
public class ShivanHarvest extends CardImpl {
public ShivanHarvest(UUID ownerId) {
public ShivanHarvest(final ShivanHarvest card) {
public ShivanHarvest copy() {return new ShivanHarvest(this);
public class ShivanZombie extends CardImpl {
public ShivanZombie(UUID ownerId) {
public ShivanZombie(final ShivanZombie card) {
public ShivanZombie copy() {return new ShivanZombie(this);
public class ShorelineRaider extends CardImpl {
public ShorelineRaider(UUID ownerId) {
public ShorelineRaider(final ShorelineRaider card) {
public ShorelineRaider copy() {return new ShorelineRaider(this);
public class SkittishKavu extends CardImpl {
public SkittishKavu(UUID ownerId) {
public SkittishKavu(final SkittishKavu card) {
public SkittishKavu copy() {return new SkittishKavu(this);
public class Skizzik extends CardImpl {
public Skizzik(UUID ownerId) {
public Skizzik(final Skizzik card) {
public Skizzik copy() {return new Skizzik(this);
public class SleepersRobe extends CardImpl {
public SleepersRobe(UUID ownerId) {
public SleepersRobe(final SleepersRobe card) {
public SleepersRobe copy() {return new SleepersRobe(this);
public class SlimyKavu extends CardImpl {
public SlimyKavu(UUID ownerId) {
public SlimyKavu(final SlimyKavu card) {
public SlimyKavu copy() {return new SlimyKavu(this);
public class SlinkingSerpent extends CardImpl {
public SlinkingSerpent(UUID ownerId) {
public SlinkingSerpent(final SlinkingSerpent card) {
public SlinkingSerpent copy() {return new SlinkingSerpent(this);
public class SmolderingTar extends CardImpl {
public SmolderingTar(UUID ownerId) {
public SmolderingTar(final SmolderingTar card) {
public SmolderingTar copy() {return new SmolderingTar(this);
public class SparringGolem extends CardImpl {
public SparringGolem(UUID ownerId) {
public SparringGolem(final SparringGolem card) {
public SparringGolem copy() {return new SparringGolem(this);
class SparringGolemAbility extends BecomesBlockedTriggeredAbility {
public SparringGolemAbility() {
public SparringGolemAbility(final SparringGolemAbility ability) {
public SparringGolemAbility copy() {return new SparringGolemAbility(this);
public String getRule() {return "Whenever {this} becomes blocked, it gets +1/+1 until end of turn for each creature blocking it.";
class SparringGolemValue implements DynamicValue {
public SparringGolemValue copy() {return new SparringGolemValue();
public int calculate(Game game, Ability sourceAbility, Effect effect) {return blockers > 1 ? (blockers) : 0;return 0;
public String getMessage() {return "+1/+1 until end of turn for each creature blocking it";
public class SpinalEmbrace extends CardImpl {
public SpinalEmbrace(UUID ownerId) {
public SpinalEmbrace(final SpinalEmbrace card) {
public SpinalEmbrace copy() {return new SpinalEmbrace(this);
class SpinalEmbraceAddDelayedEffect extends OneShotEffect {
public SpinalEmbraceAddDelayedEffect() {
public SpinalEmbraceAddDelayedEffect(final SpinalEmbraceAddDelayedEffect effect) {
public SpinalEmbraceAddDelayedEffect copy() {return new SpinalEmbraceAddDelayedEffect(this);
public boolean apply(Game game, Ability source) {return true;return new SpinalEmbraceSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return affectedTargets > 0;
public class SterlingGrove extends CardImpl {
public SterlingGrove(UUID ownerId) {
public SterlingGrove(final SterlingGrove card) {
public SterlingGrove copy() {return new SterlingGrove(this);
public class StormscapeApprentice extends CardImpl {
public StormscapeApprentice(UUID ownerId) {
public StormscapeApprentice(final StormscapeApprentice card) {
public StormscapeApprentice copy() {return new StormscapeApprentice(this);
public class StormscapeMaster extends CardImpl {
public StormscapeMaster(UUID ownerId) {
public StormscapeMaster(final StormscapeMaster card) {
public StormscapeMaster copy() {return new StormscapeMaster(this);
public class StrengthOfUnity extends CardImpl {
public StrengthOfUnity(UUID ownerId) {
public StrengthOfUnity(final StrengthOfUnity card) {
public StrengthOfUnity copy() {return new StrengthOfUnity(this);
public class SulfurVent extends CardImpl {
public SulfurVent(UUID ownerId) {
public SulfurVent(final SulfurVent card) {
public SulfurVent copy() {return new SulfurVent(this);
public class SunscapeApprentice extends CardImpl {
public SunscapeApprentice(UUID ownerId) {
public SunscapeApprentice(final SunscapeApprentice card) {
public SunscapeApprentice copy() {return new SunscapeApprentice(this);
public class SunscapeMaster extends CardImpl {
public SunscapeMaster(UUID ownerId) {
public SunscapeMaster(final SunscapeMaster card) {
public SunscapeMaster copy() {return new SunscapeMaster(this);
public class SwayOfIllusion extends CardImpl {
public SwayOfIllusion(UUID ownerId) {
public SwayOfIllusion(final SwayOfIllusion card) {
public SwayOfIllusion copy() {return new SwayOfIllusion(this);
public class TaintedWell extends CardImpl {
public TaintedWell(UUID ownerId) {
public TaintedWell(final TaintedWell card) {
public TaintedWell copy() {return new TaintedWell(this);
public class Tangle extends CardImpl {
public Tangle(UUID ownerId) {
public Tangle(final Tangle card) {
public Tangle copy() {return new Tangle(this);
class TangleEffect extends OneShotEffect {
public TangleEffect() {
public TangleEffect(final TangleEffect effect) {
public TangleEffect copy() {return new TangleEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TectonicInstability extends CardImpl {
public TectonicInstability(UUID ownerId) {
public TectonicInstability(final TectonicInstability card) {
public TectonicInstability copy() {return new TectonicInstability(this);
public class TeferisCare extends CardImpl {
public TeferisCare(UUID ownerId) {
public TeferisCare(final TeferisCare card) {
public TeferisCare copy() {return new TeferisCare(this);
public class TeferisResponse extends CardImpl {
public TeferisResponse(UUID ownerId) {
public TeferisResponse(final TeferisResponse card) {
public TeferisResponse copy() {return new TeferisResponse(this);
class TeferisResponseEffect extends OneShotEffect {
public TeferisResponseEffect() {
public TeferisResponseEffect(final TeferisResponseEffect effect) {
public TeferisResponseEffect copy() {return new TeferisResponseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Tek extends CardImpl {
public Tek(UUID ownerId) {
public Tek(final Tek card) {
public Tek copy() {return new Tek(this);
public class ThicketElemental extends CardImpl {
public ThicketElemental(UUID ownerId) {
public ThicketElemental(final ThicketElemental card) {
public ThicketElemental copy() {return new ThicketElemental(this);
class ThicketElementalEffect extends OneShotEffect {
public ThicketElementalEffect() {
public ThicketElementalEffect(final ThicketElementalEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ThicketElementalEffect copy() {return new ThicketElementalEffect(this);
public class ThornscapeMaster extends CardImpl {
public ThornscapeMaster(UUID ownerId) {
public ThornscapeMaster(final ThornscapeMaster card) {
public ThornscapeMaster copy() {return new ThornscapeMaster(this);
public class ThunderscapeApprentice extends CardImpl {
public ThunderscapeApprentice(UUID ownerId) {
public ThunderscapeApprentice(final ThunderscapeApprentice card) {
public ThunderscapeApprentice copy() {return new ThunderscapeApprentice(this);
public class ThunderscapeMaster extends CardImpl {
public ThunderscapeMaster(UUID ownerId) {
public ThunderscapeMaster(final ThunderscapeMaster card) {
public ThunderscapeMaster copy() {return new ThunderscapeMaster(this);
public class TinderFarm extends CardImpl {
public TinderFarm(UUID ownerId) {
public TinderFarm(final TinderFarm card) {
public TinderFarm copy() {return new TinderFarm(this);
public class TolarianEmissary extends CardImpl {
public TolarianEmissary(UUID ownerId) {
public TolarianEmissary(final TolarianEmissary card) {
public TolarianEmissary copy() {return new TolarianEmissary(this);
public class TreefolkHealer extends CardImpl {
public TreefolkHealer(UUID ownerId) {
public TreefolkHealer(final TreefolkHealer card) {
public TreefolkHealer copy() {return new TreefolkHealer(this);
public class TrenchWurm extends CardImpl {
public TrenchWurm(UUID ownerId) {
public TrenchWurm(final TrenchWurm card) {
public TrenchWurm copy() {return new TrenchWurm(this);
public class TrevasAttendant extends CardImpl {
public TrevasAttendant(UUID ownerId) {
public TrevasAttendant(final TrevasAttendant card) {
public TrevasAttendant copy() {return new TrevasAttendant(this);
public class TrevaTheRenewer extends CardImpl {
public TrevaTheRenewer(UUID ownerId) {
public TrevaTheRenewer(final TrevaTheRenewer card) {
public TrevaTheRenewer copy() {return new TrevaTheRenewer(this);
class TrevaTheRenewerEffect extends OneShotEffect {
public TrevaTheRenewerEffect() {
public TrevaTheRenewerEffect(final TrevaTheRenewerEffect effect) {
public TrevaTheRenewerEffect copy() {return new TrevaTheRenewerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class TribalFlames extends CardImpl {
public TribalFlames(UUID ownerId) {
public TribalFlames(final TribalFlames card) {
public TribalFlames copy() {return new TribalFlames(this);
public class TrollHornCameo extends CardImpl {
public TrollHornCameo(UUID ownerId) {
public TrollHornCameo(final TrollHornCameo card) {
public TrollHornCameo copy() {return new TrollHornCameo(this);
public class TsabosDecree extends CardImpl {
public TsabosDecree(UUID ownerId) {
public TsabosDecree(final TsabosDecree card) {
public TsabosDecree copy() {return new TsabosDecree(this);
class TsabosDecreeEffect extends OneShotEffect {
public TsabosDecreeEffect() {
public TsabosDecreeEffect(final TsabosDecreeEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public TsabosDecreeEffect copy() {return new TsabosDecreeEffect(this);
public class TsabosWeb extends CardImpl {
public TsabosWeb(UUID ownerId) {
public TsabosWeb(final TsabosWeb card) {
public TsabosWeb copy() {return new TsabosWeb(this);
public TsabosWebPreventUntapEffect() {
public TsabosWebPreventUntapEffect(final TsabosWebPreventUntapEffect effect) {
public TsabosWebPreventUntapEffect copy() {return new TsabosWebPreventUntapEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.UNTAP;
public boolean applies(GameEvent event, Ability source, Game game) {
&& ability instanceof ActivatedAbility) {return true;return false;
public class TsaboTavoc extends CardImpl {
public TsaboTavoc(UUID ownerId) {
public TsaboTavoc(final TsaboTavoc card) {
public TsaboTavoc copy() {return new TsaboTavoc(this);
public class TurfWound extends CardImpl {
public TurfWound(UUID ownerId) {
public TurfWound(final TurfWound card) {
public TurfWound copy() {return new TurfWound(this);
public TurfWoundEffect() {
public TurfWoundEffect(final TurfWoundEffect effect) {
public TurfWoundEffect copy() {return new TurfWoundEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't play lands this turn (" + mageObject.getIdName() + ").";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class TwilightsCall extends CardImpl {
public TwilightsCall(UUID ownerId) {
public TwilightsCall(final TwilightsCall card) {
public TwilightsCall copy() {return new TwilightsCall(this);
class TwilightsCallEffect extends OneShotEffect {
public TwilightsCallEffect() {staticText = "Each player returns all creature cards from his or her graveyard to the battlefield";
public TwilightsCallEffect(TwilightsCallEffect copy) {
public TwilightsCallEffect copy() {return new TwilightsCallEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Undermine extends CardImpl {
public Undermine(UUID ownerId) {
public Undermine(final Undermine card) {
public Undermine copy() {return new Undermine(this);
public class UrborgDrake extends CardImpl {
public UrborgDrake(UUID ownerId) {
public UrborgDrake(final UrborgDrake card) {
public UrborgDrake copy() {return new UrborgDrake(this);
public class UrborgEmissary extends CardImpl {
public UrborgEmissary(UUID ownerId) {"When {this} enters the battlefield, if it was kicked, return target permanent to its owner's hand."));
public UrborgEmissary(final UrborgEmissary card) {
public UrborgEmissary copy() {return new UrborgEmissary(this);
public class UrborgPhantom extends CardImpl {
public UrborgPhantom(UUID ownerId) {
public UrborgPhantom(final UrborgPhantom card) {
public UrborgPhantom copy() {return new UrborgPhantom(this);
public class UrborgShambler extends CardImpl {
public UrborgShambler(UUID ownerId) {
public UrborgShambler(final UrborgShambler card) {
public UrborgShambler copy() {return new UrborgShambler(this);
public class UrzasFilter extends CardImpl {
public UrzasFilter(UUID ownerId) {
public UrzasFilter(final UrzasFilter card) {
public UrzasFilter copy() {return new UrzasFilter(this);
public class UtopiaTree extends CardImpl {
public UtopiaTree(UUID ownerId) {
public UtopiaTree(final UtopiaTree card) {
public UtopiaTree copy() {return new UtopiaTree(this);
public class VerdelothTheAncient extends CardImpl {
public VerdelothTheAncient(UUID ownerId) {
public VerdelothTheAncient(final VerdelothTheAncient card) {
public VerdelothTheAncient copy() {return new VerdelothTheAncient(this);
class GetKickerXValue implements DynamicValue {
public GetKickerXValue() {
public int calculate(Game game, Ability source, Effect effect) {return count;
public GetKickerXValue copy() {return new GetKickerXValue();
public String toString() {return "X";
public String getMessage() {return "X";
public class ViashinoGrappler extends CardImpl {
public ViashinoGrappler(UUID ownerId) {
public ViashinoGrappler(final ViashinoGrappler card) {
public ViashinoGrappler copy() {return new ViashinoGrappler(this);
public class ViciousKavu extends CardImpl {
public ViciousKavu(UUID ownerId) {
public ViciousKavu(final ViciousKavu card) {
public ViciousKavu copy() {return new ViciousKavu(this);
public class VileConsumption extends CardImpl {
public VileConsumption(UUID ownerId) {
public VileConsumption(final VileConsumption card) {
public VileConsumption copy() {return new VileConsumption(this);
public class VodalianHypnotist extends CardImpl {
public VodalianHypnotist(UUID ownerId) {
public VodalianHypnotist(final VodalianHypnotist card) {
public VodalianHypnotist copy() {return new VodalianHypnotist(this);
public class VodalianMerchant extends CardImpl {
public VodalianMerchant(UUID ownerId) {
public VodalianMerchant(final VodalianMerchant card) {
public VodalianMerchant copy() {return new VodalianMerchant(this);
public class VodalianSerpent extends CardImpl {
public VodalianSerpent(UUID ownerId) {
public VodalianSerpent(final VodalianSerpent card) {
public VodalianSerpent copy() {return new VodalianSerpent(this);
public class VodalianZombie extends CardImpl {
public VodalianZombie(UUID ownerId) {
public VodalianZombie(final VodalianZombie card) {
public VodalianZombie copy() {return new VodalianZombie(this);
public class Void extends CardImpl {
public Void(UUID ownerId) {
public Void(final Void card) {
public Void copy() {return new Void(this);
class VoidEffect extends OneShotEffect {
public VoidEffect() {
public VoidEffect(final VoidEffect effect) {
public VoidEffect copy() {return new VoidEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class VoraciousCobra extends CardImpl {
public VoraciousCobra(UUID ownerId) {
public VoraciousCobra(final VoraciousCobra card) {
public VoraciousCobra copy() {return new VoraciousCobra(this);
public class Wallop extends CardImpl {
public Wallop(UUID ownerId) {
public Wallop(final Wallop card) {
public Wallop copy() {return new Wallop(this);
public class WanderingStream extends CardImpl {
public WanderingStream(UUID ownerId) {
public WanderingStream(final WanderingStream card) {
public WanderingStream copy() {return new WanderingStream(this);
public class WashOut extends CardImpl {
public WashOut(UUID ownerId) {
public WashOut(final WashOut card) {
public WashOut copy() {return new WashOut(this);
class WashOutEffect extends OneShotEffect {
public WashOutEffect() {
public WashOutEffect(final WashOutEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public WashOutEffect copy() {return new WashOutEffect(this);
public class WayfaringGiant extends CardImpl {
public WayfaringGiant(UUID ownerId) {
public WayfaringGiant(final WayfaringGiant card) {
public WayfaringGiant copy() {return new WayfaringGiant(this);
public class WhipSilk extends CardImpl {
public WhipSilk(UUID ownerId) {
public WhipSilk(final WhipSilk card) {
public WhipSilk copy() {return new WhipSilk(this);
public class WingsOfHope extends CardImpl {
public WingsOfHope(UUID ownerId) {
public WingsOfHope(final WingsOfHope card) {
public WingsOfHope copy() {return new WingsOfHope(this);
public class YavimayaKavu extends CardImpl {
public YavimayaKavu(UUID ownerId) {
public YavimayaKavu(final YavimayaKavu card) {
public YavimayaKavu copy() {return new YavimayaKavu(this);
public class YawgmothsAgenda extends CardImpl {
public YawgmothsAgenda(UUID ownerId) {
public YawgmothsAgenda(final YawgmothsAgenda card) {
public YawgmothsAgenda copy() {return new YawgmothsAgenda(this);
class YawgmothsAgendaCanPlayCardsFromGraveyardEffect extends ContinuousEffectImpl {
public YawgmothsAgendaCanPlayCardsFromGraveyardEffect() {
public YawgmothsAgendaCanPlayCardsFromGraveyardEffect(Duration duration) {
public YawgmothsAgendaCanPlayCardsFromGraveyardEffect(final YawgmothsAgendaCanPlayCardsFromGraveyardEffect effect) {
public YawgmothsAgendaCanPlayCardsFromGraveyardEffect copy() {return new YawgmothsAgendaCanPlayCardsFromGraveyardEffect(this);
public boolean apply(Game game, Ability source) {
{return true;return false;
class YawgmothsAgendaReplacementEffect extends ReplacementEffectImpl {
public YawgmothsAgendaReplacementEffect() {
public YawgmothsAgendaReplacementEffect(final YawgmothsAgendaReplacementEffect effect) {
public YawgmothsAgendaReplacementEffect copy() {return new YawgmothsAgendaReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCardToExileWithInfo(permanent, null, "", source.getSourceId(), game, ((ZoneChangeEvent) event).getFromZone(), true);return controller.moveCardToExileWithInfo(card, null, "", source.getSourceId(), game, ((ZoneChangeEvent) event).getFromZone(), true);return false;return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class Zap extends CardImpl {
public Zap(UUID ownerId) {
public Zap(final Zap card) {
public Zap copy() {return new Zap(this);
public class FeastOrFamine extends CardImpl {
public FeastOrFamine(UUID ownerId) {
public FeastOrFamine(final FeastOrFamine card) {
public FeastOrFamine copy() {return new FeastOrFamine(this);
public class GhoulsFeast extends CardImpl {
public GhoulsFeast(UUID ownerId) {
public GhoulsFeast(final GhoulsFeast card) {
public GhoulsFeast copy() {return new GhoulsFeast(this);
public class GolgariGermination extends CardImpl {
public GolgariGermination(UUID ownerId) {
public GolgariGermination(final GolgariGermination card) {
public GolgariGermination copy() {return new GolgariGermination(this);
public class NivixAerieOfTheFiremind extends CardImpl {
public NivixAerieOfTheFiremind(UUID ownerId) {
public NivixAerieOfTheFiremind(final NivixAerieOfTheFiremind card) {
public NivixAerieOfTheFiremind copy() {return new NivixAerieOfTheFiremind(this);
class NivixAerieOfTheFiremindEffect extends OneShotEffect {
NivixAerieOfTheFiremindEffect() {
NivixAerieOfTheFiremindEffect(final NivixAerieOfTheFiremindEffect effect) {
public NivixAerieOfTheFiremindEffect copy() {return new NivixAerieOfTheFiremindEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class NivixAerieOfTheFiremindCanCastEffect extends AsThoughEffectImpl {
NivixAerieOfTheFiremindCanCastEffect() {
NivixAerieOfTheFiremindCanCastEffect(final NivixAerieOfTheFiremindCanCastEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public NivixAerieOfTheFiremindCanCastEffect copy() {return new NivixAerieOfTheFiremindCanCastEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return this.getTargetPointer().getFirst(game, source) != null
public class SteamcoreWeird extends CardImpl {
public SteamcoreWeird(UUID ownerId) {
public SteamcoreWeird(final SteamcoreWeird card) {
public SteamcoreWeird copy() {return new SteamcoreWeird(this);
public class FathomSeer extends CardImpl {
public FathomSeer(UUID ownerId) {
public FathomSeer(final FathomSeer card) {
public FathomSeer copy() {return new FathomSeer(this);
public class FledglingMawcor extends CardImpl {
public FledglingMawcor(UUID ownerId) {
public FledglingMawcor(final FledglingMawcor card) {
public FledglingMawcor copy() {return new FledglingMawcor(this);
public class Gush extends CardImpl {
public Gush(UUID ownerId) {
public Gush(final Gush card) {
public Gush copy() {return new Gush(this);
public class Hostility extends CardImpl {
public Hostility(UUID ownerId) {
public Hostility(final Hostility card) {
public Hostility copy() {return new Hostility(this);
class HostilityEffect extends PreventionEffectImpl {
public HostilityEffect() {
public HostilityEffect(final HostilityEffect effect) {
public HostilityEffect copy() {return new HostilityEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
class HostilityElementalToken extends Token {
public HostilityElementalToken() {return new KeldonMegaliths(this);
public class OxiddaGolem extends CardImpl {
public OxiddaGolem(UUID ownerId) {
public OxiddaGolem(final OxiddaGolem card) {
public OxiddaGolem copy() {return new OxiddaGolem(this);
public class QuicksilverDragon extends CardImpl {
public QuicksilverDragon(UUID ownerId) {
public QuicksilverDragon(final QuicksilverDragon card) {
public QuicksilverDragon copy() {return new QuicksilverDragon(this);
class QuicksilverDragonEffect extends OneShotEffect {
QuicksilverDragonEffect() {
QuicksilverDragonEffect(final QuicksilverDragonEffect effect) {
public QuicksilverDragonEffect copy() {return new QuicksilverDragonEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SpireGolem extends CardImpl {
public SpireGolem(UUID ownerId) {
public SpireGolem(final SpireGolem card) {
public SpireGolem copy() {return new SpireGolem(this);
public class WaterspoutDjinn extends CardImpl {
public WaterspoutDjinn(UUID ownerId) {
public WaterspoutDjinn(final WaterspoutDjinn card) {
public WaterspoutDjinn copy() {return new WaterspoutDjinn(this);
public class AeonChronicler extends CardImpl {
public AeonChronicler(UUID ownerId) {
public AeonChronicler(final AeonChronicler card) {
public AeonChronicler copy() {return new AeonChronicler(this);
class AeonChroniclerTriggeredAbility extends TriggeredAbilityImpl {
public AeonChroniclerTriggeredAbility() {
public AeonChroniclerTriggeredAbility(final AeonChroniclerTriggeredAbility ability) {
public AeonChroniclerTriggeredAbility copy() {return new AeonChroniclerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER_REMOVED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getData().equals(CounterType.TIME.getName()) && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever a time counter is removed from {this} while it's exiled, " + super.getRule();
public class DroolingGroodion extends CardImpl {
public DroolingGroodion(UUID ownerId) {
public DroolingGroodion(final DroolingGroodion card) {
public DroolingGroodion copy() {return new DroolingGroodion(this);
class DroolingGroodionEffect extends ContinuousEffectImpl {
public DroolingGroodionEffect() {
public DroolingGroodionEffect(final DroolingGroodionEffect effect) {
public DroolingGroodionEffect copy() {return new DroolingGroodionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class KrovikanMist extends CardImpl {
public KrovikanMist(UUID ownerId) {
public KrovikanMist(final KrovikanMist card) {
public KrovikanMist copy() {return new KrovikanMist(this);
public class OhranViper extends CardImpl {
public OhranViper(UUID ownerId) {
public OhranViper(final OhranViper card) {
public OhranViper copy() {return new OhranViper(this);
public class SadisticAugermage extends CardImpl {
public SadisticAugermage(UUID ownerId) {
public SadisticAugermage(final SadisticAugermage card) {
public SadisticAugermage copy() {return new SadisticAugermage(this);
class WidespreadPanicEffect extends OneShotEffect {
public WidespreadPanicEffect() {
public WidespreadPanicEffect(final WidespreadPanicEffect effect) {
public WidespreadPanicEffect copy() {return new WidespreadPanicEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AegisOfTheGods extends CardImpl {
public AegisOfTheGods(UUID ownerId) {
public AegisOfTheGods(final AegisOfTheGods card) {
public AegisOfTheGods copy() {return new AegisOfTheGods(this);
public class AerialFormation extends CardImpl {
public AerialFormation(UUID ownerId) {
public AerialFormation(final AerialFormation card) {
public AerialFormation copy() {return new AerialFormation(this);
public class AgentOfErebos extends CardImpl {
public AgentOfErebos(UUID ownerId) {
public AgentOfErebos(final AgentOfErebos card) {
public AgentOfErebos copy() {return new AgentOfErebos(this);
public class AjaniMentorOfHeroes extends CardImpl {
public AjaniMentorOfHeroes(UUID ownerId) {
public AjaniMentorOfHeroes(final AjaniMentorOfHeroes card) {
public AjaniMentorOfHeroes copy() {return new AjaniMentorOfHeroes(this);
public class AjanisPresence extends CardImpl {
public AjanisPresence(UUID ownerId) {
public AjanisPresence(final AjanisPresence card) {
public AjanisPresence copy() {return new AjanisPresence(this);
public class AkroanLineBreaker extends CardImpl {
public AkroanLineBreaker(UUID ownerId) {
public AkroanLineBreaker(final AkroanLineBreaker card) {
public AkroanLineBreaker copy() {return new AkroanLineBreaker(this);return new AkroanMastiff(this);
public class ArmamentOfNyx extends CardImpl {
public ArmamentOfNyx(UUID ownerId) {
public ArmamentOfNyx(final ArmamentOfNyx card) {
public ArmamentOfNyx copy() {return new ArmamentOfNyx(this);
public class ArmoryOfIroas extends CardImpl {
public ArmoryOfIroas(UUID ownerId) {
public ArmoryOfIroas(final ArmoryOfIroas card) {
public ArmoryOfIroas copy() {return new ArmoryOfIroas(this);
public class AspectOfGorgon extends CardImpl {
public AspectOfGorgon(UUID ownerId) {
public AspectOfGorgon(final AspectOfGorgon card) {
public AspectOfGorgon copy() {return new AspectOfGorgon(this);
public class AthreosGodOfPassage extends CardImpl {
public AthreosGodOfPassage(UUID ownerId) {
public AthreosGodOfPassage(final AthreosGodOfPassage card) {
public AthreosGodOfPassage copy() {return new AthreosGodOfPassage(this);
class AthreosGodOfPassageReturnEffect extends OneShotEffect {
public AthreosGodOfPassageReturnEffect() {this.staticText = "return it to your hand unless target opponent pays 3 life";
public AthreosGodOfPassageReturnEffect(final AthreosGodOfPassageReturnEffect effect) {
public AthreosGodOfPassageReturnEffect copy() {return new AthreosGodOfPassageReturnEffect(this);
public boolean apply(Game game, Ability source) {&& opponent.chooseUse(outcome, new StringBuilder("Pay 3 live to prevent that ").append(creature.getLogName()).append(" returns to ").append(controller.getLogName()).append("'s hand?").toString(), source, game)) {return true;return false;
class AthreosDiesCreatureTriggeredAbility extends TriggeredAbilityImpl {
public AthreosDiesCreatureTriggeredAbility(Effect effect, boolean optional, FilterCreaturePermanent filter) {
public AthreosDiesCreatureTriggeredAbility(AthreosDiesCreatureTriggeredAbility ability) {
public AthreosDiesCreatureTriggeredAbility copy() {return new AthreosDiesCreatureTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever " + filter.getMessage() + " dies, " + super.getRule();
public class BanishingLight extends CardImpl {
public BanishingLight(UUID ownerId) {
public BanishingLight(final BanishingLight card) {
public BanishingLight copy() {return new BanishingLight(this);
class BanishingLightExileEffect extends OneShotEffect {
public BanishingLightExileEffect() {this.staticText = "exile target nonland permanent an opponent controls until {this} leaves the battlefield. <i>(That permanent returns under its owner's control.)</i>";
public BanishingLightExileEffect(final BanishingLightExileEffect effect) {
public BanishingLightExileEffect copy() {return new BanishingLightExileEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), permanent.getIdName()).apply(game, source);return false;
public class BassaraTowerArcher extends CardImpl {
public BassaraTowerArcher(UUID ownerId) {
public BassaraTowerArcher(final BassaraTowerArcher card) {
public BassaraTowerArcher copy() {return new BassaraTowerArcher(this);
public class BattlefieldThaumaturge extends CardImpl {
public BattlefieldThaumaturge(UUID ownerId) {
public BattlefieldThaumaturge(final BattlefieldThaumaturge card) {
public BattlefieldThaumaturge copy() {return new BattlefieldThaumaturge(this);
public BattlefieldThaumaturgeSpellsCostReductionEffect() {
protected BattlefieldThaumaturgeSpellsCostReductionEffect(BattlefieldThaumaturgeSpellsCostReductionEffect effect) {return true;return spell != null && BattlefieldThaumaturgeSpellsCostReductionEffect.filter.match(spell, game);return false;
public BattlefieldThaumaturgeSpellsCostReductionEffect copy() {return new BattlefieldThaumaturgeSpellsCostReductionEffect(this);
public class BloodcrazedHoplite extends CardImpl {
public BloodcrazedHoplite(UUID ownerId) {
public BloodcrazedHoplite(final BloodcrazedHoplite card) {
public BloodcrazedHoplite copy() {return new BloodcrazedHoplite(this);
class BloodcrazedHopliteTriggeredAbility extends TriggeredAbilityImpl {
public BloodcrazedHopliteTriggeredAbility() {
public BloodcrazedHopliteTriggeredAbility(BloodcrazedHopliteTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER_ADDED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getTargetId().equals(this.getSourceId()) && event.getData().equals(CounterType.P1P1.getName());
public BloodcrazedHopliteTriggeredAbility copy() {return new BloodcrazedHopliteTriggeredAbility(this);
public String getRule() {return "Whenever a +1/+1 counter is placed on {this}, " + super.getRule();
public class BrainMaggot extends CardImpl {
public BrainMaggot(UUID ownerId) {
public BrainMaggot(final BrainMaggot card) {
public BrainMaggot copy() {return new BrainMaggot(this);
class BrainMaggotExileEffect extends OneShotEffect {
public BrainMaggotExileEffect() {
public BrainMaggotExileEffect(final BrainMaggotExileEffect effect) {
public BrainMaggotExileEffect copy() {return new BrainMaggotExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class BrainMaggotReturnExiledCardAbility extends DelayedTriggeredAbility {
public BrainMaggotReturnExiledCardAbility() {
public BrainMaggotReturnExiledCardAbility(final BrainMaggotReturnExiledCardAbility ability) {
public BrainMaggotReturnExiledCardAbility copy() {return new BrainMaggotReturnExiledCardAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
class BrainMaggotReturnExiledCardEffect extends OneShotEffect {
public BrainMaggotReturnExiledCardEffect() {
public BrainMaggotReturnExiledCardEffect(final BrainMaggotReturnExiledCardEffect effect) {
public BrainMaggotReturnExiledCardEffect copy() {return new BrainMaggotReturnExiledCardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CastIntoDarkness extends CardImpl {
public CastIntoDarkness(UUID ownerId) {
public CastIntoDarkness(final CastIntoDarkness card) {
public CastIntoDarkness copy() {return new CastIntoDarkness(this);
public class ChariotOfVictory extends CardImpl {
public ChariotOfVictory(UUID ownerId) {
public ChariotOfVictory(final ChariotOfVictory card) {
public ChariotOfVictory copy() {return new ChariotOfVictory(this);
public class CloakedSiren extends CardImpl {
public CloakedSiren(UUID ownerId) {
public CloakedSiren(final CloakedSiren card) {
public CloakedSiren copy() {return new CloakedSiren(this);
public class ColossalHeroics extends CardImpl {
public ColossalHeroics(UUID ownerId) {
public ColossalHeroics(final ColossalHeroics card) {
public ColossalHeroics copy() {return new ColossalHeroics(this);
public class ConsignToDust extends CardImpl {
public ConsignToDust(UUID ownerId) {
public ConsignToDust(final ConsignToDust card) {
public ConsignToDust copy() {return new ConsignToDust(this);
public class Countermand extends CardImpl {
public Countermand(UUID ownerId) {
public Countermand(final Countermand card) {
public Countermand copy() {return new Countermand(this);
class CountermandEffect extends OneShotEffect {
public CountermandEffect() {
public CountermandEffect(final CountermandEffect effect) {
public CountermandEffect copy() {return new CountermandEffect(this);
public boolean apply(Game game, Ability source) {return countered;
public class CruelFeeding extends CardImpl {
public CruelFeeding(UUID ownerId) {
public CruelFeeding(final CruelFeeding card) {
public CruelFeeding copy() {return new CruelFeeding(this);
public class CrystallineNautilus extends CardImpl {
public CrystallineNautilus(UUID ownerId) {
public CrystallineNautilus(final CrystallineNautilus card) {
public CrystallineNautilus copy() {return new CrystallineNautilus(this);
public class CyclopsOfEternalFury extends CardImpl {
public CyclopsOfEternalFury(UUID ownerId) {
public CyclopsOfEternalFury(final CyclopsOfEternalFury card) {
public CyclopsOfEternalFury copy() {return new CyclopsOfEternalFury(this);
public class DakraMystic extends CardImpl {
public DakraMystic(UUID ownerId) {
public DakraMystic(final DakraMystic card) {
public DakraMystic copy() {return new DakraMystic(this);
class DakraMysticEffect extends OneShotEffect {
public DakraMysticEffect() {
public DakraMysticEffect(final DakraMysticEffect effect) {
public DakraMysticEffect copy() {return new DakraMysticEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DaringThief extends CardImpl {
public DaringThief(UUID ownerId) {
public DaringThief(final DaringThief card) {
public DaringThief copy() {return new DaringThief(this);
class TargetControlledPermanentSharingOpponentPermanentCardType extends TargetControlledPermanent {
public TargetControlledPermanentSharingOpponentPermanentCardType() {
public TargetControlledPermanentSharingOpponentPermanentCardType(final TargetControlledPermanentSharingOpponentPermanentCardType target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return true;return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public TargetControlledPermanentSharingOpponentPermanentCardType copy() {return new TargetControlledPermanentSharingOpponentPermanentCardType(this);
private Set<CardType> getOpponentPermanentCardTypes(UUID sourceId, UUID sourceControllerId, Game game) {return cardTypes;
class DaringThiefSecondTarget extends TargetPermanent {
public DaringThiefSecondTarget() {
public DaringThiefSecondTarget(final DaringThiefSecondTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return CardUtil.shareTypes(target1, opponentPermanent);return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public boolean chooseTarget(Outcome outcome, UUID playerId, Ability source, Game game) {return super.chooseTarget(Outcome.Damage, playerId, source, game);
public DaringThiefSecondTarget copy() {return new DaringThiefSecondTarget(this);
public class DawnbringerCharioteers extends CardImpl {
public DawnbringerCharioteers(UUID ownerId) {
public DawnbringerCharioteers(final DawnbringerCharioteers card) {
public DawnbringerCharioteers copy() {return new DawnbringerCharioteers(this);
public class Deicide extends CardImpl {
public Deicide(UUID ownerId) {
public Deicide(final Deicide card) {
public Deicide copy() {return new Deicide(this);
class DeicideExileEffect extends SearchTargetGraveyardHandLibraryForCardNameAndExileEffect {
public DeicideExileEffect() {
public DeicideExileEffect(final DeicideExileEffect effect) {
public boolean apply(Game game, Ability source) {return super.applySearchAndExile(game, source, cardInExile.getName(), enchantmentController.getId());return false;
public DeicideExileEffect copy() {return new DeicideExileEffect(this);
public String getText(Mode mode) {return sb.toString();
public class DesecrationPlague extends CardImpl {
public DesecrationPlague(UUID ownerId) {
public DesecrationPlague(final DesecrationPlague card) {
public DesecrationPlague copy() {return new DesecrationPlague(this);
public class DesertersQuarters extends CardImpl {
public DesertersQuarters(UUID ownerId) {
public DesertersQuarters(final DesertersQuarters card) {
public DesertersQuarters copy() {return new DesertersQuarters(this);
public class DesperateStand extends CardImpl {
public DesperateStand(UUID ownerId) {
public DesperateStand(final DesperateStand card) {
public DesperateStand copy() {return new DesperateStand(this);
public class DictateOfKarametra extends CardImpl {
public DictateOfKarametra(UUID ownerId) {
public DictateOfKarametra(final DictateOfKarametra card) {
public DictateOfKarametra copy() {return new DictateOfKarametra(this);
public class DictateOfKruphix extends CardImpl {
public DictateOfKruphix(UUID ownerId) {
public DictateOfKruphix(final DictateOfKruphix card) {
public DictateOfKruphix copy() {return new DictateOfKruphix(this);
class DictateOfKruphixAbility extends TriggeredAbilityImpl {
public DictateOfKruphixAbility() {
public DictateOfKruphixAbility(final DictateOfKruphixAbility ability) {
public DictateOfKruphixAbility copy() {return new DictateOfKruphixAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DRAW_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "At the beginning of each player's draw step, that player draws an additional card.";
public class DictateOfTheTwinGods extends CardImpl {
public DictateOfTheTwinGods(UUID ownerId) {
public DictateOfTheTwinGods(final DictateOfTheTwinGods card) {
public DictateOfTheTwinGods copy() {return new DictateOfTheTwinGods(this);
class DictateOfTheTwinGodsEffect extends ReplacementEffectImpl {
public DictateOfTheTwinGodsEffect() {
public DictateOfTheTwinGodsEffect(final DictateOfTheTwinGodsEffect effect) {
public DictateOfTheTwinGodsEffect copy() {return new DictateOfTheTwinGodsEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return true;return false;
public class DiscipleOfDeceit extends CardImpl {
public DiscipleOfDeceit(UUID ownerId) {
public DiscipleOfDeceit(final DiscipleOfDeceit card) {
public DiscipleOfDeceit copy() {return new DiscipleOfDeceit(this);
class DiscipleOfDeceitEffect extends OneShotEffect {
public DiscipleOfDeceitEffect() {
public DiscipleOfDeceitEffect(final DiscipleOfDeceitEffect effect) {
public DiscipleOfDeceitEffect copy() {return new DiscipleOfDeceitEffect(this);
public boolean apply(Game game, Ability source) {return false;return new SearchLibraryPutInHandEffect(new TargetCardInLibrary(filter), true, true).apply(game, source);return true;return false;
public class DoomwakeGiant extends CardImpl {
public DoomwakeGiant(UUID ownerId) {
public DoomwakeGiant(final DoomwakeGiant card) {
public DoomwakeGiant copy() {return new DoomwakeGiant(this);
public class DreadbringerLampads extends CardImpl {
public DreadbringerLampads(UUID ownerId) {
public DreadbringerLampads(final DreadbringerLampads card) {
public DreadbringerLampads copy() {return new DreadbringerLampads(this);
public class EagleOfTheWatch extends CardImpl {
public EagleOfTheWatch(UUID ownerId) {
public EagleOfTheWatch(final EagleOfTheWatch card) {
public EagleOfTheWatch copy() {return new EagleOfTheWatch(this);return new EidolonOfBlossoms(this);return new EidolonOfRhetoric(this);return new EidolonOfTheGreatRevel(this);return new EidolonOfTheGreatRevelTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a spell with converted mana cost 3 or less, {this} deals 2 damage to that player.";
public class ExtinguishAllHope extends CardImpl {
public ExtinguishAllHope(UUID ownerId) {
public ExtinguishAllHope(final ExtinguishAllHope card) {
public ExtinguishAllHope copy() {return new ExtinguishAllHope(this);
public class FeastOfDreams extends CardImpl {
public FeastOfDreams(UUID ownerId) {
public FeastOfDreams(final FeastOfDreams card) {
public FeastOfDreams copy() {return new FeastOfDreams(this);return new FelhidePetrifier(this);
public class FlamespeakersWill extends CardImpl {
public FlamespeakersWill(UUID ownerId) {
public FlamespeakersWill(final FlamespeakersWill card) {
public FlamespeakersWill copy() {return new FlamespeakersWill(this);
public class FleetfeatherCockatrice extends CardImpl {
public FleetfeatherCockatrice(UUID ownerId) {
public FleetfeatherCockatrice(final FleetfeatherCockatrice card) {
public FleetfeatherCockatrice copy() {return new FleetfeatherCockatrice(this);
public class FlurryOfHorns extends CardImpl {
public FlurryOfHorns(UUID ownerId) {
public FlurryOfHorns(final FlurryOfHorns card) {
public FlurryOfHorns copy() {return new FlurryOfHorns(this);
class FlurryOfHornsMinotaurToken extends Token {
public FlurryOfHornsMinotaurToken() {
public class FontOfFertility extends CardImpl {
public FontOfFertility(UUID ownerId) {
public FontOfFertility(final FontOfFertility card) {
public FontOfFertility copy() {return new FontOfFertility(this);
public class FontOfFortunes extends CardImpl {
public FontOfFortunes(UUID ownerId) {
public FontOfFortunes(final FontOfFortunes card) {
public FontOfFortunes copy() {return new FontOfFortunes(this);
public class FontOfVigor extends CardImpl {
public FontOfVigor(UUID ownerId) {
public FontOfVigor(final FontOfVigor card) {
public FontOfVigor copy() {return new FontOfVigor(this);
public class ForgebornOreads extends CardImpl {
public ForgebornOreads(UUID ownerId) {
public ForgebornOreads(final ForgebornOreads card) {
public ForgebornOreads copy() {return new ForgebornOreads(this);
public class GluttonousCyclops extends CardImpl {
public GluttonousCyclops(UUID ownerId) {
public GluttonousCyclops(final GluttonousCyclops card) {
public GluttonousCyclops copy() {return new GluttonousCyclops(this);
public class GnarledScarhide extends CardImpl {
public GnarledScarhide(UUID ownerId) {
public GnarledScarhide(final GnarledScarhide card) {
public GnarledScarhide copy() {return new GnarledScarhide(this);
public class GodhunterOctopus extends CardImpl {
public GodhunterOctopus(UUID ownerId) {
public GodhunterOctopus(final GodhunterOctopus card) {
public GodhunterOctopus copy() {return new GodhunterOctopus(this);
public class Godsend extends CardImpl {
public Godsend(UUID ownerId) {
public Godsend(final Godsend card) {
public Godsend copy() {return new Godsend(this);
class GodsendTriggeredAbility extends TriggeredAbilityImpl {
GodsendTriggeredAbility() {
GodsendTriggeredAbility(final GodsendTriggeredAbility ability) {
public GodsendTriggeredAbility copy() {return new GodsendTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_BLOCKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature blocks or becomes blocked by one or more creatures, you may exile one of those creatures.";
class GodsendExileEffect extends OneShotEffect {
public GodsendExileEffect() {
public GodsendExileEffect(final GodsendExileEffect effect) {
public GodsendExileEffect copy() {return new GodsendExileEffect(this);
public boolean apply(Game game, Ability source) {return false;return new GodsendRuleModifyingEffect(this);
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast this spell because a card with the same name is exiled by " + mageObject.getLogName() + ".";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class GoldenhideOx extends CardImpl {
public GoldenhideOx(UUID ownerId) {
public GoldenhideOx(final GoldenhideOx card) {
public GoldenhideOx copy() {return new GoldenhideOx(this);
public class GoldenHind extends CardImpl {
public GoldenHind(UUID ownerId) {
public GoldenHind(final GoldenHind card) {
public GoldenHind copy() {return new GoldenHind(this);
public class GoldForgedSentinel extends CardImpl {
public GoldForgedSentinel(UUID ownerId) {
public GoldForgedSentinel(final GoldForgedSentinel card) {
public GoldForgedSentinel copy() {return new GoldForgedSentinel(this);
public class GrimGuardian extends CardImpl {
public GrimGuardian(UUID ownerId) {
public GrimGuardian(final GrimGuardian card) {
public GrimGuardian copy() {return new GrimGuardian(this);
public class HallOfTriumph extends CardImpl {
public HallOfTriumph(UUID ownerId) {
public HallOfTriumph(final HallOfTriumph card) {
public HallOfTriumph copy() {return new HallOfTriumph(this);
class HallOfTriumphBoostControlledEffect extends ContinuousEffectImpl {
public HallOfTriumphBoostControlledEffect() {
public HallOfTriumphBoostControlledEffect(final HallOfTriumphBoostControlledEffect effect) {
public HallOfTriumphBoostControlledEffect copy() {return new HallOfTriumphBoostControlledEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HarnessByForce extends CardImpl {
public HarnessByForce(UUID ownerId) {
public HarnessByForce(final HarnessByForce card) {
public HarnessByForce copy() {return new HarnessByForce(this);
public class HarvestguardAlseids extends CardImpl {
public HarvestguardAlseids(UUID ownerId) {
public HarvestguardAlseids(final HarvestguardAlseids card) {
public HarvestguardAlseids copy() {return new HarvestguardAlseids(this);
public class HeroesBane extends CardImpl {
public HeroesBane(UUID ownerId) {
public HeroesBane(final HeroesBane card) {
public HeroesBane copy() {return new HeroesBane(this);
public class HourOfNeed extends CardImpl {
public HourOfNeed(UUID ownerId) {
public HourOfNeed(final HourOfNeed card) {
public HourOfNeed copy() {return new HourOfNeed(this);
class HourOfNeedExileEffect extends OneShotEffect {
public HourOfNeedExileEffect() {
public HourOfNeedExileEffect(final HourOfNeedExileEffect effect) {
public HourOfNeedExileEffect copy() {return new HourOfNeedExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class HourOfNeedSphinxToken extends Token {
public HourOfNeedSphinxToken() {
public class Hubris extends CardImpl {
public Hubris(UUID ownerId) {
public Hubris(final Hubris card) {
public Hubris copy() {return new Hubris(this);
class HubrisReturnEffect extends OneShotEffect {
public HubrisReturnEffect() {
public HubrisReturnEffect(final HubrisReturnEffect effect) {
public HubrisReturnEffect copy() {return new HubrisReturnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HumblerOfMortals extends CardImpl {
public HumblerOfMortals(UUID ownerId) {
public HumblerOfMortals(final HumblerOfMortals card) {
public HumblerOfMortals copy() {return new HumblerOfMortals(this);
public class HydraBroodmaster extends CardImpl {
public HydraBroodmaster(UUID ownerId) {
public HydraBroodmaster(final HydraBroodmaster card) {
public HydraBroodmaster copy() {return new HydraBroodmaster(this);
class HydraBroodmasterEffect extends OneShotEffect {
public HydraBroodmasterEffect() {
public HydraBroodmasterEffect(final HydraBroodmasterEffect effect) {
public HydraBroodmasterEffect copy() {return new HydraBroodmasterEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new HydraBroodmasterToken(xValue, xValue), xValue).apply(game, source);return false;
class HydraBroodmasterToken extends Token {
public HydraBroodmasterToken(int power, int toughness) {
public class IroasGodOfVictory extends CardImpl {
public IroasGodOfVictory(UUID ownerId) {
public IroasGodOfVictory(final IroasGodOfVictory card) {
public IroasGodOfVictory copy() {return new IroasGodOfVictory(this);
public class KeranosGodOfStorms extends CardImpl {
public KeranosGodOfStorms(UUID ownerId) {
public KeranosGodOfStorms(final KeranosGodOfStorms card) {
public KeranosGodOfStorms copy() {return new KeranosGodOfStorms(this);
class KeranosGodOfStormsTriggeredAbility extends TriggeredAbilityImpl {
KeranosGodOfStormsTriggeredAbility() {
KeranosGodOfStormsTriggeredAbility(final KeranosGodOfStormsTriggeredAbility ability) {
public KeranosGodOfStormsTriggeredAbility copy() {return new KeranosGodOfStormsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DREW_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;return false;
public String getRule() {return "Reveal the first card you draw on each of your turns. Whenever you reveal a land card this way, draw a card. Whenever you reveal a nonland card this way, Keranos deals 3 damage to target creature or player.";
class CardsDrawnDuringTurnWatcher extends Watcher {
public CardsDrawnDuringTurnWatcher() {
public CardsDrawnDuringTurnWatcher(final CardsDrawnDuringTurnWatcher watcher) {
public void watch(GameEvent event, Game game) {
public int getAmountCardsDrawn(UUID playerId) {return amount;return 0;
public void reset() {
public CardsDrawnDuringTurnWatcher copy() {return new CardsDrawnDuringTurnWatcher(this);
public class KingMacarTheGoldCursed extends CardImpl {
public KingMacarTheGoldCursed(UUID ownerId) {
public KingMacarTheGoldCursed(final KingMacarTheGoldCursed card) {
public KingMacarTheGoldCursed copy() {return new KingMacarTheGoldCursed(this);
public class KiorasDismissal extends CardImpl {
public KiorasDismissal(UUID ownerId) {
public KiorasDismissal(final KiorasDismissal card) {
public KiorasDismissal copy() {return new KiorasDismissal(this);
public class KnowledgeAndPower extends CardImpl {
public KnowledgeAndPower(UUID ownerId) {
public KnowledgeAndPower(final KnowledgeAndPower card) {
public KnowledgeAndPower copy() {return new KnowledgeAndPower(this);
class ScryTriggeredAbility extends TriggeredAbilityImpl {
public ScryTriggeredAbility() {
public ScryTriggeredAbility(final ScryTriggeredAbility ability) {
public ScryTriggeredAbility copy() {return new ScryTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SCRY;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.getControllerId());
public String getRule() {return "Whenever you scry, " + super.getRule();
public class KruphixGodOfHorizons extends CardImpl {
public KruphixGodOfHorizons(UUID ownerId) {
public KruphixGodOfHorizons(final KruphixGodOfHorizons card) {
public KruphixGodOfHorizons copy() {return new KruphixGodOfHorizons(this);
class KruphixGodOfHorizonsEffect extends ReplacementEffectImpl {
public KruphixGodOfHorizonsEffect() {
public KruphixGodOfHorizonsEffect(final KruphixGodOfHorizonsEffect effect) {
public KruphixGodOfHorizonsEffect copy() {return new KruphixGodOfHorizonsEffect(this);
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.EMPTY_MANA_POOL;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public class KruphixsInsight extends CardImpl {
public KruphixsInsight(UUID ownerId) {
public KruphixsInsight(final KruphixsInsight card) {
public KruphixsInsight copy() {return new KruphixsInsight(this);
public class LagonnaBandTrailblazer extends CardImpl {
public LagonnaBandTrailblazer(UUID ownerId) {
public LagonnaBandTrailblazer(final LagonnaBandTrailblazer card) {
public LagonnaBandTrailblazer copy() {return new LagonnaBandTrailblazer(this);
public class LaunchTheFleet extends CardImpl {
public LaunchTheFleet(UUID ownerId) {
public LaunchTheFleet(final LaunchTheFleet card) {
public LaunchTheFleet copy() {return new LaunchTheFleet(this);
public class LeoninIconoclast extends CardImpl {
public LeoninIconoclast(UUID ownerId) {
public LeoninIconoclast(final LeoninIconoclast card) {
public LeoninIconoclast copy() {return new LeoninIconoclast(this);
public class LightningDiadem extends CardImpl {
public LightningDiadem(UUID ownerId) {
public LightningDiadem(final LightningDiadem card) {
public LightningDiadem copy() {return new LightningDiadem(this);
public class ManaConfluence extends CardImpl {
public ManaConfluence(UUID ownerId) {
public ManaConfluence(final ManaConfluence card) {
public ManaConfluence copy() {return new ManaConfluence(this);
public class MarketFestival extends CardImpl {
public MarketFestival(UUID ownerId) {
public MarketFestival(final MarketFestival card) {
public MarketFestival copy() {return new MarketFestival(this);
class MarketFestivalTriggeredAbility extends TriggeredManaAbility {
public MarketFestivalTriggeredAbility() {
public MarketFestivalTriggeredAbility(final MarketFestivalTriggeredAbility ability) {
public MarketFestivalTriggeredAbility copy() {return new MarketFestivalTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return enchantment != null && event.getSourceId().equals(enchantment.getAttachedTo());
public String getRule() {return "Whenever enchanted land is tapped for mana, its controller adds two mana in any combination of colors to his or her mana pool <i>(in addition to the mana the land produces)</i>.";
class MarketFestivalManaEffect extends ManaEffect {
public MarketFestivalManaEffect() {
public MarketFestivalManaEffect(final MarketFestivalManaEffect effect) {
public MarketFestivalManaEffect copy() {return new MarketFestivalManaEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public class MasterOfTheFeast extends CardImpl {
public MasterOfTheFeast(UUID ownerId) {
public MasterOfTheFeast(final MasterOfTheFeast card) {
public MasterOfTheFeast copy() {return new MasterOfTheFeast(this);
public class MogissWarhound extends CardImpl {
public MogissWarhound(UUID ownerId) {
public MogissWarhound(final MogissWarhound card) {
public MogissWarhound copy() {return new MogissWarhound(this);
public class MortalObstinacy extends CardImpl {
public MortalObstinacy(UUID ownerId) {
public MortalObstinacy(final MortalObstinacy card) {
public MortalObstinacy copy() {return new MortalObstinacy(this);
class MortalObstinacyAbility extends TriggeredAbilityImpl {
public MortalObstinacyAbility() {
public MortalObstinacyAbility(final MortalObstinacyAbility ability) {
public MortalObstinacyAbility copy() {return new MortalObstinacyAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return damageEvent.isCombatDamage() && damageMakingCreature != null && damageMakingCreature.getAttachments().contains(this.getSourceId());
public String getRule() {return new StringBuilder("Whenever enchanted creature deals combat damage to a player, ").append(super.getRule()).toString();
public class NaturesPanoply extends CardImpl {
public NaturesPanoply(UUID ownerId) {
public NaturesPanoply(final NaturesPanoply card) {
public NaturesPanoply copy() {return new NaturesPanoply(this);
public class NessianGameWarden extends CardImpl {
public NessianGameWarden(UUID ownerId) {
public NessianGameWarden(final NessianGameWarden card) {
public NessianGameWarden copy() {return new NessianGameWarden(this);
class NessianGameWardenEffect extends OneShotEffect {
public NessianGameWardenEffect() {
public NessianGameWardenEffect(final NessianGameWardenEffect effect) {
public NessianGameWardenEffect copy() {return new NessianGameWardenEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class NyxInfusion extends CardImpl {
public NyxInfusion(UUID ownerId) {
public NyxInfusion(final NyxInfusion card) {
public NyxInfusion copy() {return new NyxInfusion(this);
public class NyxWeaver extends CardImpl {
public NyxWeaver(UUID ownerId) {
public NyxWeaver(final NyxWeaver card) {
public NyxWeaver copy() {return new NyxWeaver(this);
public class OakheartDryads extends CardImpl {
public OakheartDryads(UUID ownerId) {
public OakheartDryads(final OakheartDryads card) {
public OakheartDryads copy() {return new OakheartDryads(this);
public class OppressiveRays extends CardImpl {
public OppressiveRays(UUID ownerId) {
public OppressiveRays(final OppressiveRays card) {
public OppressiveRays copy() {return new OppressiveRays(this);return true;return true;return false;return new OppressiveRaysCostModificationEffect(this);return new OreskosSwiftclaw(this);
public class PensiveMinotaur extends CardImpl {
public PensiveMinotaur(UUID ownerId) {
public PensiveMinotaur(final PensiveMinotaur card) {
public PensiveMinotaur copy() {return new PensiveMinotaur(this);
public class PhalanxFormation extends CardImpl {
public PhalanxFormation(UUID ownerId) {
public PhalanxFormation(final PhalanxFormation card) {
public PhalanxFormation copy() {return new PhalanxFormation(this);
public class PharikaGodOfAffliction extends CardImpl {
public PharikaGodOfAffliction(UUID ownerId) {
public PharikaGodOfAffliction(final PharikaGodOfAffliction card) {
public PharikaGodOfAffliction copy() {return new PharikaGodOfAffliction(this);
class PharikaExileEffect extends OneShotEffect {
public PharikaExileEffect() {
public PharikaExileEffect(final PharikaExileEffect effect) {
public boolean apply(Game game, Ability source) {return new PharikaSnakeToken().putOntoBattlefield(1, game, source.getSourceId(), tokenController.getId());return false;
public PharikaExileEffect copy() {return new PharikaExileEffect(this);
class PharikaSnakeToken extends Token {
public PharikaSnakeToken() {
public class PharikasChosen extends CardImpl {
public PharikasChosen(UUID ownerId) {
public PharikasChosen(final PharikasChosen card) {
public PharikasChosen copy() {return new PharikasChosen(this);
public class PheresBandThunderhoof extends CardImpl {
public PheresBandThunderhoof(UUID ownerId) {
public PheresBandThunderhoof(final PheresBandThunderhoof card) {
public PheresBandThunderhoof copy() {return new PheresBandThunderhoof(this);
public class PheresBandWarchief extends CardImpl {
public PheresBandWarchief(UUID ownerId) {
public PheresBandWarchief(final PheresBandWarchief card) {
public PheresBandWarchief copy() {return new PheresBandWarchief(this);
public class PinToTheEarth extends CardImpl {
public PinToTheEarth(UUID ownerId) {
public PinToTheEarth(final PinToTheEarth card) {
public PinToTheEarth copy() {return new PinToTheEarth(this);
public class PolymorphousRush extends CardImpl {
public PolymorphousRush(UUID ownerId) {
public PolymorphousRush(final PolymorphousRush card) {
public PolymorphousRush copy() {return new PolymorphousRush(this);
class PolymorphousRushCopyEffect extends OneShotEffect {
public PolymorphousRushCopyEffect() {
public PolymorphousRushCopyEffect(final PolymorphousRushCopyEffect effect) {
public PolymorphousRushCopyEffect copy() {return new PolymorphousRushCopyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PropheticFlamespeaker extends CardImpl {
public PropheticFlamespeaker(UUID ownerId) {
public PropheticFlamespeaker(final PropheticFlamespeaker card) {
public PropheticFlamespeaker copy() {return new PropheticFlamespeaker(this);
class PropheticFlamespeakerExileEffect extends OneShotEffect {
public PropheticFlamespeakerExileEffect() {
public PropheticFlamespeakerExileEffect(final PropheticFlamespeakerExileEffect effect) {
public PropheticFlamespeakerExileEffect copy() {return new PropheticFlamespeakerExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class PropheticFlamespeakerCastFromExileEffect extends AsThoughEffectImpl {
public PropheticFlamespeakerCastFromExileEffect() {
public PropheticFlamespeakerCastFromExileEffect(final PropheticFlamespeakerCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public PropheticFlamespeakerCastFromExileEffect copy() {return new PropheticFlamespeakerCastFromExileEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return source.getControllerId().equals(affectedControllerId) &&
public class PullFromTheDeep extends CardImpl {
public PullFromTheDeep(UUID ownerId) {
public PullFromTheDeep(final PullFromTheDeep card) {
public PullFromTheDeep copy() {return new PullFromTheDeep(this);
public class QuarryColossus extends CardImpl {
public QuarryColossus(UUID ownerId) {
public QuarryColossus(final QuarryColossus card) {
public QuarryColossus copy() {return new QuarryColossus(this);
class QuarryColossusReturnLibraryEffect extends OneShotEffect {
public QuarryColossusReturnLibraryEffect() {
public QuarryColossusReturnLibraryEffect(final QuarryColossusReturnLibraryEffect effect) {
public QuarryColossusReturnLibraryEffect copy() {return new QuarryColossusReturnLibraryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RavenousLeucrocota extends CardImpl {
public RavenousLeucrocota(UUID ownerId) {
public RavenousLeucrocota(final RavenousLeucrocota card) {
public RavenousLeucrocota copy() {return new RavenousLeucrocota(this);
public class RenownedWeaver extends CardImpl {
public RenownedWeaver(UUID ownerId) {
public RenownedWeaver(final RenownedWeaver card) {
public RenownedWeaver copy() {return new RenownedWeaver(this);
class RenownedWeaverSpiderToken extends Token {
public RenownedWeaverSpiderToken() {
public class RevivingMelody extends CardImpl {
public RevivingMelody(UUID ownerId) {
public RevivingMelody(final RevivingMelody card) {
public RevivingMelody copy() {return new RevivingMelody(this);
public class RiddleOfLightning extends CardImpl {
public RiddleOfLightning(UUID ownerId) {
public RiddleOfLightning(final RiddleOfLightning card) {
public RiddleOfLightning copy() {return new RiddleOfLightning(this);
class RiddleOfLightningEffect extends OneShotEffect {
public RiddleOfLightningEffect() {
public RiddleOfLightningEffect(final RiddleOfLightningEffect effect) {
public RiddleOfLightningEffect copy() {return new RiddleOfLightningEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return true;return false;
public class RiptideChimera extends CardImpl {
public RiptideChimera(UUID ownerId) {effect.setText("return an enchanment you control to its owner's hand");
public RiptideChimera(final RiptideChimera card) {
public RiptideChimera copy() {return new RiptideChimera(this);
public class RiseOfEagles extends CardImpl {
public RiseOfEagles(UUID ownerId) {
public RiseOfEagles(final RiseOfEagles card) {
public RiseOfEagles copy() {return new RiseOfEagles(this);
class RiseOfEaglesBirdToken extends Token {
public RiseOfEaglesBirdToken() {
public class RitualOfTheReturned extends CardImpl {
public RitualOfTheReturned(UUID ownerId) {
public RitualOfTheReturned(final RitualOfTheReturned card) {
public RitualOfTheReturned copy() {return new RitualOfTheReturned(this);
class RitualOfTheReturnedExileEffect extends OneShotEffect {
public RitualOfTheReturnedExileEffect() {
public RitualOfTheReturnedExileEffect(final RitualOfTheReturnedExileEffect effect) {
public RitualOfTheReturnedExileEffect copy() {return new RitualOfTheReturnedExileEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(return false;
class RitualOfTheReturnedZombieToken extends Token {
public RitualOfTheReturnedZombieToken(int power, int toughness) {return new RollickOfAbandon(this);
public class RottedHulk extends CardImpl {
public RottedHulk(UUID ownerId) {
public RottedHulk(final RottedHulk card) {
public RottedHulk copy() {return new RottedHulk(this);
public class RouseTheMob extends CardImpl {
public RouseTheMob(UUID ownerId) {
public RouseTheMob(final RouseTheMob card) {
public RouseTheMob copy() {return new RouseTheMob(this);
public class SageOfHours extends CardImpl {
public SageOfHours(UUID ownerId) {
public SageOfHours(final SageOfHours card) {
public SageOfHours copy() {return new SageOfHours(this);
class SageOfHoursCost extends CostImpl {
public SageOfHoursCost() {
public SageOfHoursCost(SageOfHoursCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return true;
public SageOfHoursCost copy() {return new SageOfHoursCost(this);
public int getRemovedCounters() {return this.removedCounters;
class SageOfHoursEffect extends OneShotEffect {
public SageOfHoursEffect() {
public class SatyrGrovedancer extends CardImpl {
public SatyrGrovedancer(UUID ownerId) {
public SatyrGrovedancer(final SatyrGrovedancer card) {
public SatyrGrovedancer copy() {return new SatyrGrovedancer(this);
public class SatyrHoplite extends CardImpl {
public SatyrHoplite(UUID ownerId) {
public SatyrHoplite(final SatyrHoplite card) {
public SatyrHoplite copy() {return new SatyrHoplite(this);
public class ScourgeOfFleets extends CardImpl {
public ScourgeOfFleets(UUID ownerId) {
public ScourgeOfFleets(final ScourgeOfFleets card) {
public ScourgeOfFleets copy() {return new ScourgeOfFleets(this);
class ScourgeOfFleetsEffect extends OneShotEffect {
public ScourgeOfFleetsEffect() {this.staticText = "return each creature your opponents control with toughness X or less, where X is the number of Islands you control";
public ScourgeOfFleetsEffect(final ScourgeOfFleetsEffect effect) {
public ScourgeOfFleetsEffect copy() {return new ScourgeOfFleetsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SetessanTactics extends CardImpl {
public SetessanTactics(UUID ownerId) {
public SetessanTactics(final SetessanTactics card) {
public SetessanTactics copy() {return new SetessanTactics(this);
public class SightlessBrawler extends CardImpl {
public SightlessBrawler(UUID ownerId) {
public SightlessBrawler(final SightlessBrawler card) {
public SightlessBrawler copy() {return new SightlessBrawler(this);
public class SigiledSkink extends CardImpl {
public SigiledSkink(UUID ownerId) {
public SigiledSkink(final SigiledSkink card) {
public SigiledSkink copy() {return new SigiledSkink(this);
public class SigiledStarfish extends CardImpl {
public SigiledStarfish(UUID ownerId) {
public SigiledStarfish(final SigiledStarfish card) {
public SigiledStarfish copy() {return new SigiledStarfish(this);
public class SilenceTheBelievers extends CardImpl {
public SilenceTheBelievers(UUID ownerId) {
public SilenceTheBelievers(final SilenceTheBelievers card) {
public SilenceTheBelievers copy() {return new SilenceTheBelievers(this);
class SilenceTheBelieversExileEffect extends OneShotEffect {
public SilenceTheBelieversExileEffect() {
public SilenceTheBelieversExileEffect(final SilenceTheBelieversExileEffect effect) {
public SilenceTheBelieversExileEffect copy() {return new SilenceTheBelieversExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Skybind extends CardImpl {
public Skybind(UUID ownerId) {
public Skybind(final Skybind card) {
public Skybind copy() {return new Skybind(this);
class SkybindEffect extends OneShotEffect {
public SkybindEffect() {
public SkybindEffect(final SkybindEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SkybindEffect copy() {return new SkybindEffect(this);
public class SpawnOfThraxes extends CardImpl {
public SpawnOfThraxes(UUID ownerId) {
public SpawnOfThraxes(final SpawnOfThraxes card) {
public SpawnOfThraxes copy() {return new SpawnOfThraxes(this);
public class Spirespine extends CardImpl {
public Spirespine(UUID ownerId) {
public Spirespine(final Spirespine card) {
public Spirespine copy() {return new Spirespine(this);
public class SpitefulBlow extends CardImpl {
public SpitefulBlow(UUID ownerId) {
public SpitefulBlow(final SpitefulBlow card) {
public SpitefulBlow copy() {return new SpitefulBlow(this);
public class SpiteOfMogis extends CardImpl {
public SpiteOfMogis(UUID ownerId) {
public SpiteOfMogis(final SpiteOfMogis card) {
public SpiteOfMogis copy() {return new SpiteOfMogis(this);
public class SquelchingLeeches extends CardImpl {
public SquelchingLeeches(UUID ownerId) {
public SquelchingLeeches(final SquelchingLeeches card) {
public SquelchingLeeches copy() {return new SquelchingLeeches(this);
public class Starfall extends CardImpl {
public Starfall(UUID ownerId) {
public Starfall(final Starfall card) {
public Starfall copy() {return new Starfall(this);
class StarfallEffect extends OneShotEffect {
public StarfallEffect() {
public StarfallEffect(final StarfallEffect effect) {
public StarfallEffect copy() {return new StarfallEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new StonewiseFortifier(this);return new StonewiseFortifierPreventAllDamageToEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class StormchaserChimera extends CardImpl {
public StormchaserChimera(UUID ownerId) {
public StormchaserChimera(final StormchaserChimera card) {
public StormchaserChimera copy() {return new StormchaserChimera(this);
class StormchaserChimeraEffect extends OneShotEffect {
public StormchaserChimeraEffect() {
public StormchaserChimeraEffect(final StormchaserChimeraEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public StormchaserChimeraEffect copy() {return new StormchaserChimeraEffect(this);
public class StrengthFromTheFallen extends CardImpl {
public StrengthFromTheFallen(UUID ownerId) {
public StrengthFromTheFallen(final StrengthFromTheFallen card) {
public StrengthFromTheFallen copy() {return new StrengthFromTheFallen(this);
public class SupplyLineCranes extends CardImpl {
public SupplyLineCranes(UUID ownerId) {
public SupplyLineCranes(final SupplyLineCranes card) {
public SupplyLineCranes copy() {return new SupplyLineCranes(this);
public class SwarmbornGiant extends CardImpl {
public SwarmbornGiant(UUID ownerId) {
public SwarmbornGiant(final SwarmbornGiant card) {
public SwarmbornGiant copy() {return new SwarmbornGiant(this);
class SwarmbornGiantTriggeredAbility extends TriggeredAbilityImpl {
public SwarmbornGiantTriggeredAbility() {
public SwarmbornGiantTriggeredAbility(final SwarmbornGiantTriggeredAbility ability) {
public SwarmbornGiantTriggeredAbility copy() {return new SwarmbornGiantTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return damagedEvent.isCombatDamage();return false;
public String getRule() {return "Whenever you're dealt combat damage, " + super.getRule();
public class TempleOfEpiphany extends CardImpl {
public TempleOfEpiphany(UUID ownerId) {
public TempleOfEpiphany(final TempleOfEpiphany card) {
public TempleOfEpiphany copy() {return new TempleOfEpiphany(this);
public class TempleOfMalady extends CardImpl {
public TempleOfMalady(UUID ownerId) {
public TempleOfMalady(final TempleOfMalady card) {
public TempleOfMalady copy() {return new TempleOfMalady(this);
public class TethmosHighPriest extends CardImpl {
public TethmosHighPriest(UUID ownerId) {
public TethmosHighPriest(final TethmosHighPriest card) {
public TethmosHighPriest copy() {return new TethmosHighPriest(this);
public class ThassasDevourer extends CardImpl {
public ThassasDevourer(UUID ownerId) {
public ThassasDevourer(final ThassasDevourer card) {
public ThassasDevourer copy() {return new ThassasDevourer(this);
public class ThassasIre extends CardImpl {
public ThassasIre(UUID ownerId) {
public ThassasIre(final ThassasIre card) {
public ThassasIre copy() {return new ThassasIre(this);
public class ThoughtrenderLamia extends CardImpl {
public ThoughtrenderLamia(UUID ownerId) {
public ThoughtrenderLamia(final ThoughtrenderLamia card) {
public ThoughtrenderLamia copy() {return new ThoughtrenderLamia(this);
public class TormentedThoughts extends CardImpl {
public TormentedThoughts(UUID ownerId) {
public TormentedThoughts(final TormentedThoughts card) {
public TormentedThoughts copy() {return new TormentedThoughts(this);
class TormentedThoughtsDiscardEffect extends OneShotEffect {
public TormentedThoughtsDiscardEffect() {
public TormentedThoughtsDiscardEffect(final TormentedThoughtsDiscardEffect effect) {
public TormentedThoughtsDiscardEffect copy() {return new TormentedThoughtsDiscardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Twinflame extends CardImpl {
public Twinflame(UUID ownerId) {
public Twinflame(final Twinflame card) {
public Twinflame copy() {return new Twinflame(this);
class TwinflameCopyEffect extends OneShotEffect {
public TwinflameCopyEffect() {
public TwinflameCopyEffect(final TwinflameCopyEffect effect) {
public TwinflameCopyEffect copy() {return new TwinflameCopyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class UnderworldCoinsmith extends CardImpl {
public UnderworldCoinsmith(UUID ownerId) {
public UnderworldCoinsmith(final UnderworldCoinsmith card) {
public UnderworldCoinsmith copy() {return new UnderworldCoinsmith(this);
public class WarWingSiren extends CardImpl {
public WarWingSiren(UUID ownerId) {
public WarWingSiren(final WarWingSiren card) {
public WarWingSiren copy() {return new WarWingSiren(this);
public class WhitewaterNaiads extends CardImpl {
public WhitewaterNaiads(UUID ownerId) {
public WhitewaterNaiads(final WhitewaterNaiads card) {
public WhitewaterNaiads copy() {return new WhitewaterNaiads(this);
public class WildfireCerberus extends CardImpl {
public WildfireCerberus(UUID ownerId) {
public WildfireCerberus(final WildfireCerberus card) {
public WildfireCerberus copy() {return new WildfireCerberus(this);
public class WorstFears extends CardImpl {
public WorstFears(UUID ownerId) {
public WorstFears(final WorstFears card) {
public WorstFears copy() {return new WorstFears(this);
public class Anger extends CardImpl {
public Anger(UUID ownerId) {
public Anger(final Anger card) {
public Anger copy() {return new Anger(this);
public class AnuridBarkripper extends CardImpl {
public AnuridBarkripper(UUID ownerId) {
public AnuridBarkripper(final AnuridBarkripper card) {
public AnuridBarkripper copy() {return new AnuridBarkripper(this);
public class AnuridBrushhopper extends CardImpl {
public AnuridBrushhopper(UUID ownerId) {
public AnuridBrushhopper(final AnuridBrushhopper card) {
public AnuridBrushhopper copy() {return new AnuridBrushhopper(this);
public class AnuridSwarmsnapper extends CardImpl {
public AnuridSwarmsnapper(UUID ownerId) {
public AnuridSwarmsnapper(final AnuridSwarmsnapper card) {
public AnuridSwarmsnapper copy() {return new AnuridSwarmsnapper(this);
public class AvenFogbringer extends CardImpl {
public AvenFogbringer(UUID ownerId) {
public AvenFogbringer(final AvenFogbringer card) {
public AvenFogbringer copy() {return new AvenFogbringer(this);
public class BalthorTheDefiled extends CardImpl {
public BalthorTheDefiled(UUID ownerId) {
public BalthorTheDefiled(final BalthorTheDefiled card) {
public BalthorTheDefiled copy() {return new BalthorTheDefiled(this);
class BalthorTheDefiledEffect extends OneShotEffect {
public BalthorTheDefiledEffect() {this.staticText = "Each player returns all black and all red creature cards from his or her graveyard to the battlefield";
public BalthorTheDefiledEffect(final BalthorTheDefiledEffect effect) {
public BalthorTheDefiledEffect copy() {return new BalthorTheDefiledEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BattleScreech extends CardImpl {
public BattleScreech(UUID ownerId) {
public BattleScreech(final BattleScreech card) {
public BattleScreech copy() {return new BattleScreech(this);
public class BattlewiseAven extends CardImpl {
public BattlewiseAven(UUID ownerId) {
public BattlewiseAven(final BattlewiseAven card) {
public BattlewiseAven copy() {return new BattlewiseAven(this);
public class BookBurning extends CardImpl {
public BookBurning(UUID ownerId) {
public BookBurning(final BookBurning card) {
public BookBurning copy() {return new BookBurning(this);
class BookBurningMillEffect extends OneShotEffect {
public BookBurningMillEffect() {
public BookBurningMillEffect(final BookBurningMillEffect effect) {
public BookBurningMillEffect copy() {return new BookBurningMillEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BorderPatrol extends CardImpl {
public BorderPatrol(UUID ownerId) {
public BorderPatrol(final BorderPatrol card) {
public BorderPatrol copy() {return new BorderPatrol(this);
public class Brawn extends CardImpl {
public Brawn(UUID ownerId) {
public Brawn(final Brawn card) {
public Brawn copy() {return new Brawn(this);
public class BreakingPoint extends CardImpl {
public BreakingPoint(UUID ownerId) {
public BreakingPoint(final BreakingPoint card) {
public BreakingPoint copy() {return new BreakingPoint(this);
class BreakingPointDestroyEffect extends OneShotEffect {
public BreakingPointDestroyEffect() {
public BreakingPointDestroyEffect(final BreakingPointDestroyEffect effect) {
public BreakingPointDestroyEffect copy() {return new BreakingPointDestroyEffect(this);
public boolean apply(Game game, Ability source) {return false;return destroyCreatures;return false;
public class CabalTherapy extends CardImpl {
public CabalTherapy(UUID ownerId) {
public CabalTherapy(final CabalTherapy card) {
public CabalTherapy copy() {return new CabalTherapy(this);
class CabalTherapyEffect extends OneShotEffect {
public CabalTherapyEffect() {
public CabalTherapyEffect(final CabalTherapyEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public CabalTherapyEffect copy() {return new CabalTherapyEffect(this);
public class CabalTrainee extends CardImpl {
public CabalTrainee(UUID ownerId) {
public CabalTrainee(final CabalTrainee card) {
public CabalTrainee copy() {return new CabalTrainee(this);
public class CanopyClaws extends CardImpl {
public CanopyClaws(UUID ownerId) {
public CanopyClaws(final CanopyClaws card) {
public CanopyClaws copy() {return new CanopyClaws(this);
public class CentaurRootcaster extends CardImpl {
public CentaurRootcaster(UUID ownerId) {
public CentaurRootcaster(final CentaurRootcaster card) {
public CentaurRootcaster copy() {return new CentaurRootcaster(this);
public class CephalidConstable extends CardImpl {
public CephalidConstable(UUID ownerId) {
public class CommanderEesha extends CardImpl {
public CommanderEesha(UUID ownerId) {
public CommanderEesha(final CommanderEesha card) {
public CommanderEesha copy() {return new CommanderEesha(this);
public class CunningWish extends CardImpl {
public CunningWish(UUID ownerId) {
public CunningWish(final CunningWish card) {
public CunningWish copy() {return new CunningWish(this);
class CunningWishEffect extends OneShotEffect {
public CunningWishEffect() {
public CunningWishEffect(final CunningWishEffect effect) {
public CunningWishEffect copy() {return new CunningWishEffect(this);
public boolean apply(Game game, Ability source) {
{return true;
public class DeathWish extends CardImpl {
public DeathWish(UUID ownerId) {
public DeathWish(final DeathWish card) {
public DeathWish copy() {return new DeathWish(this);
class DeathWishEffect extends OneShotEffect {
public DeathWishEffect() {
public DeathWishEffect(final DeathWishEffect effect) {
public DeathWishEffect copy() {return new DeathWishEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DefyGravity extends CardImpl {
public DefyGravity(UUID ownerId) {
public DefyGravity(final DefyGravity card) {
public DefyGravity copy() {return new DefyGravity(this);
public class DwarvenBloodboiler extends CardImpl {
public DwarvenBloodboiler(UUID ownerId) {
public DwarvenBloodboiler(final DwarvenBloodboiler card) {
public DwarvenBloodboiler copy() {return new DwarvenBloodboiler(this);
public class EarsplittingRats extends CardImpl {
public EarsplittingRats(UUID ownerId) {
public EarsplittingRats(final EarsplittingRats card) {
public EarsplittingRats copy() {return new EarsplittingRats(this);
public class ElephantGuide extends CardImpl {
public ElephantGuide(UUID ownerId) {
public ElephantGuide(final ElephantGuide card) {
public ElephantGuide copy() {return new ElephantGuide(this);
public class EmberShot extends CardImpl {
public EmberShot(UUID ownerId) {
public EmberShot(final EmberShot card) {
public EmberShot copy() {return new EmberShot(this);
public class Envelop extends CardImpl {
public Envelop(UUID ownerId) {
public Envelop(final Envelop card) {
public Envelop copy() {return new Envelop(this);
public class ErhnamDjinn extends CardImpl {
public ErhnamDjinn(UUID ownerId) {
public ErhnamDjinn(final ErhnamDjinn card) {
public ErhnamDjinn copy() {return new ErhnamDjinn(this);
public class ExoskeletalArmor extends CardImpl {
public ExoskeletalArmor(UUID ownerId) {
public ExoskeletalArmor(final ExoskeletalArmor card) {
public ExoskeletalArmor copy() {return new ExoskeletalArmor(this);
public class Filth extends CardImpl {
public Filth(UUID ownerId) {
public Filth(final Filth card) {
public Filth copy() {return new Filth(this);
public class FlaringPain extends CardImpl {
public FlaringPain(UUID ownerId) {
public FlaringPain(final FlaringPain card) {
public FlaringPain copy() {return new FlaringPain(this);
public DamageCantBePreventedEffect() {
public DamageCantBePreventedEffect(final DamageCantBePreventedEffect effect) {
public DamageCantBePreventedEffect copy() {return new DamageCantBePreventedEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class FolkMedicine extends CardImpl {
public FolkMedicine(UUID ownerId) {
public FolkMedicine(final FolkMedicine card) {
public FolkMedicine copy() {return new FolkMedicine(this);
public class Genesis extends CardImpl {
public Genesis(UUID ownerId) {
public Genesis(final Genesis card) {
public Genesis copy() {return new Genesis(this);
public class GiantWarthog extends CardImpl {
public GiantWarthog(UUID ownerId) {
public GiantWarthog(final GiantWarthog card) {
public GiantWarthog copy() {return new GiantWarthog(this);
public class GoldenWish extends CardImpl {
public GoldenWish(UUID ownerId) {
public GoldenWish(final GoldenWish card) {
public GoldenWish copy() {return new GoldenWish(this);
class GoldenWishEffect extends OneShotEffect {
public GoldenWishEffect() {
public GoldenWishEffect(final GoldenWishEffect effect) {
public GoldenWishEffect copy() {return new GoldenWishEffect(this);
public boolean apply(Game game, Ability source) {
{return true;
public class GoretuskFirebeast extends CardImpl {
public GoretuskFirebeast(UUID ownerId) {
public GoretuskFirebeast(final GoretuskFirebeast card) {
public GoretuskFirebeast copy() {return new GoretuskFirebeast(this);
public class GrizzlyFate extends CardImpl {
public GrizzlyFate(UUID ownerId) {
public GrizzlyFate(final GrizzlyFate card) {
public GrizzlyFate copy() {return new GrizzlyFate(this);
public class Guiltfeeder extends CardImpl {
public Guiltfeeder(UUID ownerId) {
public Guiltfeeder(final Guiltfeeder card) {
public Guiltfeeder copy() {return new Guiltfeeder(this);
public class HaplessResearcher extends CardImpl {
public HaplessResearcher(UUID ownerId) {
public HaplessResearcher(final HaplessResearcher card) {
public HaplessResearcher copy() {return new HaplessResearcher(this);
public class HarvesterDruid extends CardImpl {
public HarvesterDruid(UUID ownerId) {
public HarvesterDruid(final HarvesterDruid card) {
public HarvesterDruid copy() {return new HarvesterDruid(this);
public class HuntingGrounds extends CardImpl {
public HuntingGrounds(UUID ownerId) {
public HuntingGrounds(final HuntingGrounds card) {
public HuntingGrounds copy() {return new HuntingGrounds(this);
public class IronshellBeetle extends CardImpl {
public IronshellBeetle(UUID ownerId) {
public IronshellBeetle(final IronshellBeetle card) {
public IronshellBeetle copy() {return new IronshellBeetle(this);
public class JeskaWarriorAdept extends CardImpl {
public JeskaWarriorAdept(UUID ownerId) {
public JeskaWarriorAdept(final JeskaWarriorAdept card) {
public JeskaWarriorAdept copy() {return new JeskaWarriorAdept(this);
public class KeepWatch extends CardImpl {
public KeepWatch(UUID ownerId) {
public KeepWatch(final KeepWatch card) {
public KeepWatch copy() {return new KeepWatch(this);
public class KrosanReclamation extends CardImpl {
public KrosanReclamation(UUID ownerId) {
public KrosanReclamation(final KrosanReclamation card) {
public KrosanReclamation copy() {return new KrosanReclamation(this);
class KrosanReclamationEffect extends OneShotEffect {
public KrosanReclamationEffect() {
public KrosanReclamationEffect(final KrosanReclamationEffect effect) {
public KrosanReclamationEffect copy() {return new KrosanReclamationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class KrosanReclamationTarget extends TargetCard {
public KrosanReclamationTarget() {
public KrosanReclamationTarget(final KrosanReclamationTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return filter.match(card, game);return false;
public KrosanReclamationTarget copy() {return new KrosanReclamationTarget(this);
public class KrosanWayfarer extends CardImpl {
public KrosanWayfarer(UUID ownerId) {
public KrosanWayfarer(final KrosanWayfarer card) {
public KrosanWayfarer copy() {return new KrosanWayfarer(this);
public class LavaDart extends CardImpl {
public LavaDart(UUID ownerId) {
public LavaDart(final LavaDart card) {
public LavaDart copy() {return new LavaDart(this);
public class LeadAstray extends CardImpl {
public LeadAstray(UUID ownerId) {
public LeadAstray(final LeadAstray card) {
public LeadAstray copy() {return new LeadAstray(this);
public class LiberatedDwarf extends CardImpl {
public LiberatedDwarf(UUID ownerId) {
public LiberatedDwarf(final LiberatedDwarf card) {
public LiberatedDwarf copy() {return new LiberatedDwarf(this);
public class MentalNote extends CardImpl {
public MentalNote(UUID ownerId) {
public MentalNote(final MentalNote card) {
public MentalNote copy() {return new MentalNote(this);
public class MirarisWake extends CardImpl {
public MirarisWake(UUID ownerId) {
public MirarisWake(final MirarisWake card) {
public MirarisWake copy() {return new MirarisWake(this);
public class MirrorWall extends CardImpl {
public MirrorWall(UUID ownerId) {
public MirrorWall(final MirrorWall card) {
public MirrorWall copy() {return new MirrorWall(this);
public class NantukoTracer extends CardImpl {
public NantukoTracer(UUID ownerId) {
public NantukoTracer(final NantukoTracer card) {
public NantukoTracer copy() {return new NantukoTracer(this);
public class PhantomCentaur extends CardImpl {
public PhantomCentaur(UUID ownerId) {
public PhantomCentaur(final PhantomCentaur card) {
public PhantomCentaur copy() {return new PhantomCentaur(this);
class PhantomCentaurPreventionEffect extends PreventionEffectImpl {
public PhantomCentaurPreventionEffect() {
public PhantomCentaurPreventionEffect(final PhantomCentaurPreventionEffect effect) {
public PhantomCentaurPreventionEffect copy() {return new PhantomCentaurPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PhantomFlock extends CardImpl {
public PhantomFlock(UUID ownerId) {
public PhantomFlock(final PhantomFlock card) {
public PhantomFlock copy() {return new PhantomFlock(this);
class PhantomFlockPreventionEffect extends PreventionEffectImpl {
PhantomFlockPreventionEffect() {
PhantomFlockPreventionEffect(final PhantomFlockPreventionEffect effect) {
public PhantomFlockPreventionEffect copy() {return new PhantomFlockPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PhantomNishoba extends CardImpl {
public PhantomNishoba(UUID ownerId) {
public PhantomNishoba(final PhantomNishoba card) {
public PhantomNishoba copy() {return new PhantomNishoba(this);
class PhantomNishobaPreventionEffect extends PreventionEffectImpl {
public PhantomNishobaPreventionEffect() {
public PhantomNishobaPreventionEffect(final PhantomNishobaPreventionEffect effect) {
public PhantomNishobaPreventionEffect copy() {return new PhantomNishobaPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PhantomNomad extends CardImpl {
public PhantomNomad(UUID ownerId) {
public PhantomNomad(final PhantomNomad card) {
public PhantomNomad copy() {return new PhantomNomad(this);
class PhantomNomadPreventionEffect extends PreventionEffectImpl {
public PhantomNomadPreventionEffect() {
public PhantomNomadPreventionEffect(final PhantomNomadPreventionEffect effect) {
public PhantomNomadPreventionEffect copy() {return new PhantomNomadPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PhantomTiger extends CardImpl {
public PhantomTiger(UUID ownerId) {
public PhantomTiger(final PhantomTiger card) {
public PhantomTiger copy() {return new PhantomTiger(this);
class PhantomTigerPreventionEffect extends PreventionEffectImpl {
public PhantomTigerPreventionEffect() {
public PhantomTigerPreventionEffect(final PhantomTigerPreventionEffect effect) {
public PhantomTigerPreventionEffect copy() {return new PhantomTigerPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PlanarChaos extends CardImpl {
public PlanarChaos(UUID ownerId) {
public PlanarChaos(final PlanarChaos card) {
public PlanarChaos copy() {return new PlanarChaos(this);
class PlanarChaosUpkeepEffect extends OneShotEffect {
PlanarChaosUpkeepEffect() {
PlanarChaosUpkeepEffect(final PlanarChaosUpkeepEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PlanarChaosUpkeepEffect copy() {return new PlanarChaosUpkeepEffect(this);
class PlanarChaosCastAllEffect extends OneShotEffect {
public PlanarChaosCastAllEffect() {
public PlanarChaosCastAllEffect(final PlanarChaosCastAllEffect effect) {
public PlanarChaosCastAllEffect copy() {return new PlanarChaosCastAllEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(getTargetPointer().getFirst(game, source), source.getSourceId(), game);return false;
public class QuietSpeculation extends CardImpl {
public QuietSpeculation(UUID ownerId) {
public QuietSpeculation(final QuietSpeculation card) {
public QuietSpeculation copy() {return new QuietSpeculation(this);
class SearchLibraryPutInGraveEffect extends SearchEffect {
public SearchLibraryPutInGraveEffect(TargetCardInLibrary target) {
public SearchLibraryPutInGraveEffect(final SearchLibraryPutInGraveEffect effect) {
public SearchLibraryPutInGraveEffect copy() {return new SearchLibraryPutInGraveEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;return new RiftstonePortal(this);
public class SilverSeraph extends CardImpl {
public SilverSeraph(UUID ownerId) {
public SilverSeraph(final SilverSeraph card) {
public SilverSeraph copy() {return new SilverSeraph(this);
public class SolitaryConfinement extends CardImpl {
public SolitaryConfinement(UUID ownerId) {
public SolitaryConfinement(final SolitaryConfinement card) {
public SolitaryConfinement copy() {return new SolitaryConfinement(this);
public class SoulcatchersAerie extends CardImpl {
public SoulcatchersAerie(UUID ownerId) {
public SoulcatchersAerie(final SoulcatchersAerie card) {
public SoulcatchersAerie copy() {return new SoulcatchersAerie(this);
public class SpellgorgerBarbarian extends CardImpl {
public SpellgorgerBarbarian(UUID ownerId) {
public SpellgorgerBarbarian(final SpellgorgerBarbarian card) {
public SpellgorgerBarbarian copy() {return new SpellgorgerBarbarian(this);
public class Spelljack extends CardImpl {
public Spelljack(UUID ownerId) {
public Spelljack(final Spelljack card) {
public Spelljack copy() {return new Spelljack(this);
class SpelljackEffect extends OneShotEffect {
SpelljackEffect() {
SpelljackEffect(final SpelljackEffect effect) {
public SpelljackEffect copy() {return new SpelljackEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class SpelljackCastFromExileEffect extends AsThoughEffectImpl {
SpelljackCastFromExileEffect() {
SpelljackCastFromExileEffect(final SpelljackCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SpelljackCastFromExileEffect copy() {return new SpelljackCastFromExileEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return false;return true;return false;
public class SuddenStrength extends CardImpl {
public SuddenStrength(UUID ownerId) {
public SuddenStrength(final SuddenStrength card) {
public SuddenStrength copy() {return new SuddenStrength(this);
public class SylvanSafekeeper extends CardImpl {
public SylvanSafekeeper(UUID ownerId) {
public SylvanSafekeeper(final SylvanSafekeeper card) {
public SylvanSafekeeper copy() {return new SylvanSafekeeper(this);
public class TestOfEndurance extends CardImpl {
public TestOfEndurance(UUID ownerId) {
public TestOfEndurance(final TestOfEndurance card) {
public TestOfEndurance copy() {return new TestOfEndurance(this);
public boolean apply(Game game, Ability source) {return game.getPlayer(source.getControllerId()).getLife() >= 50;
public class ThrissNantukoPrimus extends CardImpl {
public ThrissNantukoPrimus(UUID ownerId) {
public ThrissNantukoPrimus(final ThrissNantukoPrimus card) {
public ThrissNantukoPrimus copy() {return new ThrissNantukoPrimus(this);
public class TunnelerWurm extends CardImpl {
public TunnelerWurm(UUID ownerId) {
public TunnelerWurm(final TunnelerWurm card) {
public TunnelerWurm copy() {return new TunnelerWurm(this);
public class UnquestionedAuthority extends CardImpl {
public UnquestionedAuthority(UUID ownerId) {
public UnquestionedAuthority(final UnquestionedAuthority card) {
public UnquestionedAuthority copy() {return new UnquestionedAuthority(this);
public class Valor extends CardImpl {
public Valor(UUID ownerId) {
public Valor(final Valor card) {
public Valor copy() {return new Valor(this);
public class VenomousVines extends CardImpl {
public VenomousVines(UUID ownerId) {
public VenomousVines(final VenomousVines card) {
public VenomousVines copy() {return new VenomousVines(this);
public class VigilantSentry extends CardImpl {
public VigilantSentry(UUID ownerId) {
public VigilantSentry(final VigilantSentry card) {
public VigilantSentry copy() {return new VigilantSentry(this);
public class Wonder extends CardImpl {
public Wonder(UUID ownerId) {
public Wonder(final Wonder card) {
public Wonder copy() {return new Wonder(this);
public class WorldgorgerDragon extends CardImpl {
public WorldgorgerDragon(UUID ownerId) {
public WorldgorgerDragon(final WorldgorgerDragon card) {
public WorldgorgerDragon copy() {return new WorldgorgerDragon(this);
class WorldgorgerDragonEntersEffect extends OneShotEffect {
public WorldgorgerDragonEntersEffect() {
public WorldgorgerDragonEntersEffect(final WorldgorgerDragonEntersEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public WorldgorgerDragonEntersEffect copy() {return new WorldgorgerDragonEntersEffect(this);
class WorldgorgerDragonLeavesEffect extends OneShotEffect {
public WorldgorgerDragonLeavesEffect() {staticText = "return the exiled cards to the battlefield under their owners' control";
public WorldgorgerDragonLeavesEffect(final WorldgorgerDragonLeavesEffect effect) {
public boolean apply(Game game, Ability source) {return controller.moveCards(exile.getCards(game), Zone.BATTLEFIELD, source, game, false, false, true, null);return false;
public WorldgorgerDragonLeavesEffect copy() {return new WorldgorgerDragonLeavesEffect(this);
public class WormfangDrake extends CardImpl {
public WormfangDrake(UUID ownerId) {
public WormfangDrake(final WormfangDrake card) {
public WormfangDrake copy() {return new WormfangDrake(this);
class WormfangDrakeExileCost extends CostImpl {
public WormfangDrakeExileCost() {
public WormfangDrakeExileCost(WormfangDrakeExileCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return false;return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return targets.canChoose(controllerId, game);
public WormfangDrakeExileCost copy() {return new WormfangDrakeExileCost(this);
public class AbominationOfGudul extends CardImpl {
public AbominationOfGudul(UUID ownerId) {
public AbominationOfGudul(final AbominationOfGudul card) {
public AbominationOfGudul copy() {return new AbominationOfGudul(this);
public class AbzanAscendancy extends CardImpl {
public AbzanAscendancy(UUID ownerId) {
public AbzanAscendancy(final AbzanAscendancy card) {
public AbzanAscendancy copy() {return new AbzanAscendancy(this);
public class AbzanBanner extends CardImpl {
public AbzanBanner(UUID ownerId) {
public AbzanBanner(final AbzanBanner card) {
public AbzanBanner copy() {return new AbzanBanner(this);
public class AbzanBattlePriest extends CardImpl {
public AbzanBattlePriest(UUID ownerId) {
public AbzanBattlePriest(final AbzanBattlePriest card) {
public AbzanBattlePriest copy() {return new AbzanBattlePriest(this);
public class AbzanCharm extends CardImpl {
public AbzanCharm(UUID ownerId) {
public AbzanCharm(final AbzanCharm card) {
public AbzanCharm copy() {return new AbzanCharm(this);
public class AbzanFalconer extends CardImpl {
public AbzanFalconer(UUID ownerId) {
public AbzanFalconer(final AbzanFalconer card) {
public AbzanFalconer copy() {return new AbzanFalconer(this);
public class AbzanGuide extends CardImpl {
public AbzanGuide(UUID ownerId) {
public AbzanGuide(final AbzanGuide card) {
public AbzanGuide copy() {return new AbzanGuide(this);
public class AlabasterKirin extends CardImpl {
public AlabasterKirin(UUID ownerId) {
public AlabasterKirin(final AlabasterKirin card) {
public AlabasterKirin copy() {return new AlabasterKirin(this);
public class AlpineGrizzly extends CardImpl {
public AlpineGrizzly(UUID ownerId) {
public AlpineGrizzly(final AlpineGrizzly card) {
public AlpineGrizzly copy() {return new AlpineGrizzly(this);
public class AltarOfTheBrood extends CardImpl {
public AltarOfTheBrood(UUID ownerId) {
public AltarOfTheBrood(final AltarOfTheBrood card) {
public AltarOfTheBrood copy() {return new AltarOfTheBrood(this);
public class AnafenzaTheForemost extends CardImpl {
public AnafenzaTheForemost(UUID ownerId) {
public AnafenzaTheForemost(final AnafenzaTheForemost card) {
public AnafenzaTheForemost copy() {return new AnafenzaTheForemost(this);
class AnafenzaTheForemostEffect extends ReplacementEffectImpl {
public AnafenzaTheForemostEffect() {
public AnafenzaTheForemostEffect(final AnafenzaTheForemostEffect effect) {
public AnafenzaTheForemostEffect copy() {return new AnafenzaTheForemostEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCardToExileWithInfo(permanent, null, null, source.getSourceId(), game, Zone.BATTLEFIELD, true);return controller.moveCardToExileWithInfo(card, null, null, source.getSourceId(), game, ((ZoneChangeEvent) event).getFromZone(), true);return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.ZONE_CHANGE);
public boolean applies(GameEvent event, Ability source, Game game) {
public class AnkleShanker extends CardImpl {
public AnkleShanker(UUID ownerId) {
public AnkleShanker(final AnkleShanker card) {
public AnkleShanker copy() {return new AnkleShanker(this);
public class ArchersParapet extends CardImpl {
public ArchersParapet(UUID ownerId) {
public ArchersParapet(final ArchersParapet card) {
public ArchersParapet copy() {return new ArchersParapet(this);
public class ArmamentCorps extends CardImpl {
public ArmamentCorps(UUID ownerId) {
public ArmamentCorps(final ArmamentCorps card) {
public ArmamentCorps copy() {return new ArmamentCorps(this);
public class ArrowStorm extends CardImpl {
public ArrowStorm(UUID ownerId) {
public ArrowStorm(final ArrowStorm card) {
public ArrowStorm copy() {return new ArrowStorm(this);
public class AshcloudPhoenix extends CardImpl {
public AshcloudPhoenix(UUID ownerId) {
public AshcloudPhoenix(final AshcloudPhoenix card) {
public AshcloudPhoenix copy() {return new AshcloudPhoenix(this);
class AshcloudPhoenixEffect extends OneShotEffect {
AshcloudPhoenixEffect() {this.staticText = "return it to the battlefield face down under your control";
AshcloudPhoenixEffect(final AshcloudPhoenixEffect effect) {
public AshcloudPhoenixEffect copy() {return new AshcloudPhoenixEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AvalancheTusker extends CardImpl {
public AvalancheTusker(UUID ownerId) {
public AvalancheTusker(final AvalancheTusker card) {
public AvalancheTusker copy() {return new AvalancheTusker(this);
class AvalancheTuskerAbility extends TriggeredAbilityImpl {
public AvalancheTuskerAbility() {
public AvalancheTuskerAbility(final AvalancheTuskerAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks, target creature defending player controls blocks it this combat if able.";
public AvalancheTuskerAbility copy() {return new AvalancheTuskerAbility(this);
public class AwakenTheBear extends CardImpl {
public AwakenTheBear(UUID ownerId) {
public AwakenTheBear(final AwakenTheBear card) {
public AwakenTheBear copy() {return new AwakenTheBear(this);
public class BarrageOfBoulders extends CardImpl {
public BarrageOfBoulders(UUID ownerId) {
public BarrageOfBoulders(final BarrageOfBoulders card) {
public BarrageOfBoulders copy() {return new BarrageOfBoulders(this);
public class BearsCompanion extends CardImpl {
public BearsCompanion(UUID ownerId) {
public BearsCompanion(final BearsCompanion card) {
public BearsCompanion copy() {return new BearsCompanion(this);
class BearsCompanionBearToken extends Token {
public BearsCompanionBearToken() {
public class BecomeImmense extends CardImpl {
public BecomeImmense(UUID ownerId) {
public BecomeImmense(final BecomeImmense card) {
public BecomeImmense copy() {return new BecomeImmense(this);
public class BellowingSaddlebrute extends CardImpl {
public BellowingSaddlebrute(UUID ownerId) {
public BellowingSaddlebrute(final BellowingSaddlebrute card) {
public BellowingSaddlebrute copy() {return new BellowingSaddlebrute(this);
public class BitterRevelation extends CardImpl {
public BitterRevelation(UUID ownerId) {
public BitterRevelation(final BitterRevelation card) {
public BitterRevelation copy() {return new BitterRevelation(this);
class BitterRevelationEffect extends OneShotEffect {
BitterRevelationEffect() {
BitterRevelationEffect(final BitterRevelationEffect effect) {
public BitterRevelationEffect copy() {return new BitterRevelationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BlindingSpray extends CardImpl {
public BlindingSpray(UUID ownerId) {
public BlindingSpray(final BlindingSpray card) {
public BlindingSpray copy() {return new BlindingSpray(this);
public class BloodfellCaves extends CardImpl {
public BloodfellCaves(UUID ownerId) {
public BloodfellCaves(final BloodfellCaves card) {
public BloodfellCaves copy() {return new BloodfellCaves(this);
public class BloodsoakedChampion extends CardImpl {
public BloodsoakedChampion(UUID ownerId) {
public BloodsoakedChampion(final BloodsoakedChampion card) {
public BloodsoakedChampion copy() {return new BloodsoakedChampion(this);
public class BlossomingSands extends CardImpl {
public BlossomingSands(UUID ownerId) {
public BlossomingSands(final BlossomingSands card) {
public BlossomingSands copy() {return new BlossomingSands(this);
public class BraveTheSands extends CardImpl {
public BraveTheSands(UUID ownerId) {
public BraveTheSands(final BraveTheSands card) {
public BraveTheSands copy() {return new BraveTheSands(this);
public class BribersPurse extends CardImpl {
public BribersPurse(UUID ownerId) {
public BribersPurse(final BribersPurse card) {
public BribersPurse copy() {return new BribersPurse(this);
public class BringLow extends CardImpl {
public BringLow(UUID ownerId) {
public BringLow(final BringLow card) {
public BringLow copy() {return new BringLow(this);
class TargetHasCounterCondition implements Condition {
public TargetHasCounterCondition(CounterType counterType) {
public boolean apply(Game game, Ability source) {return permanent.getCounters().containsKey(counterType);return false;
public class BurnAway extends CardImpl {
public BurnAway(UUID ownerId) {
public BurnAway(final BurnAway card) {
public BurnAway copy() {return new BurnAway(this);
class BurnAwayDelayedTriggeredAbility extends DelayedTriggeredAbility {
public BurnAwayDelayedTriggeredAbility() {
public BurnAwayDelayedTriggeredAbility(BurnAwayDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {
public class ButcherOfTheHorde extends CardImpl {
public ButcherOfTheHorde(UUID ownerId) {
public ButcherOfTheHorde(final ButcherOfTheHorde card) {
public ButcherOfTheHorde copy() {return new ButcherOfTheHorde(this);
class ButcherOfTheHordeEffect extends OneShotEffect {
ButcherOfTheHordeEffect() {
ButcherOfTheHordeEffect(final ButcherOfTheHordeEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public ButcherOfTheHordeEffect copy() {return new ButcherOfTheHordeEffect(this);
public class CanyonLurkers extends CardImpl {
public CanyonLurkers(UUID ownerId) {
public CanyonLurkers(final CanyonLurkers card) {
public CanyonLurkers copy() {return new CanyonLurkers(this);
public class ChiefOfTheEdge extends CardImpl {
public ChiefOfTheEdge(UUID ownerId) {
public ChiefOfTheEdge(final ChiefOfTheEdge card) {
public ChiefOfTheEdge copy() {return new ChiefOfTheEdge(this);
public class ChiefOfTheScale extends CardImpl {
public ChiefOfTheScale(UUID ownerId) {
public ChiefOfTheScale(final ChiefOfTheScale card) {
public ChiefOfTheScale copy() {return new ChiefOfTheScale(this);
public class CleverImpersonator extends CardImpl {
public CleverImpersonator(UUID ownerId) {
public CleverImpersonator(final CleverImpersonator card) {
public CleverImpersonator copy() {return new CleverImpersonator(this);
public class CracklingDoom extends CardImpl {
public CracklingDoom(UUID ownerId) {
public CracklingDoom(final CracklingDoom card) {
public CracklingDoom copy() {return new CracklingDoom(this);
class CracklingDoomEffect extends OneShotEffect {
public CracklingDoomEffect() {
public CracklingDoomEffect(final CracklingDoomEffect effect) {
public CracklingDoomEffect copy() {return new CracklingDoomEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CranialArchive extends CardImpl {
public CranialArchive(UUID ownerId) {
public CranialArchive(final CranialArchive card) {
public CranialArchive copy() {return new CranialArchive(this);
class CranialArchiveEffect extends OneShotEffect {
public CranialArchiveEffect() {
public CranialArchiveEffect(final CranialArchiveEffect effect) {
public CranialArchiveEffect copy() {return new CranialArchiveEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CratersClaws extends CardImpl {
public CratersClaws(UUID ownerId) {
public CratersClaws(final CratersClaws card) {
public CratersClaws copy() {return new CratersClaws(this);
public class DazzlingRamparts extends CardImpl {
public DazzlingRamparts(UUID ownerId) {
public DazzlingRamparts(final DazzlingRamparts card) {
public DazzlingRamparts copy() {return new DazzlingRamparts(this);
public class DeadDrop extends CardImpl {
public DeadDrop(UUID ownerId) {
public DeadDrop(final DeadDrop card) {
public DeadDrop copy() {return new DeadDrop(this);
public class DeathFrenzy extends CardImpl {
public DeathFrenzy(UUID ownerId) {
public DeathFrenzy(final DeathFrenzy card) {
public DeathFrenzy copy() {return new DeathFrenzy(this);
class DeathFrenzyDelayedTriggeredAbility extends DelayedTriggeredAbility {
public DeathFrenzyDelayedTriggeredAbility() {
public DeathFrenzyDelayedTriggeredAbility(DeathFrenzyDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public DeathFrenzyDelayedTriggeredAbility copy() {return new DeathFrenzyDelayedTriggeredAbility(this);
public String getRule() {return "Whenever a creature dies this turn, " + modes.getText();
public class DebilitatingInjury extends CardImpl {
public DebilitatingInjury(UUID ownerId) {
public DebilitatingInjury(final DebilitatingInjury card) {
public DebilitatingInjury copy() {return new DebilitatingInjury(this);
public class DigThroughTime extends CardImpl {
public DigThroughTime(UUID ownerId) {
public DigThroughTime(final DigThroughTime card) {
public DigThroughTime copy() {return new DigThroughTime(this);
public class DisdainfulStroke extends CardImpl {
public DisdainfulStroke(UUID ownerId) {
public DisdainfulStroke(final DisdainfulStroke card) {
public DisdainfulStroke copy() {return new DisdainfulStroke(this);
public class DismalBackwater extends CardImpl {
public DismalBackwater(UUID ownerId) {
public DismalBackwater(final DismalBackwater card) {
public DismalBackwater copy() {return new DismalBackwater(this);
public class DisownedAncestor extends CardImpl {
public DisownedAncestor(UUID ownerId) {
public DisownedAncestor(final DisownedAncestor card) {
public DisownedAncestor copy() {return new DisownedAncestor(this);
public class DragonGrip extends CardImpl {
public DragonGrip(UUID ownerId) {
public DragonGrip(final DragonGrip card) {
public DragonGrip copy() {return new DragonGrip(this);
public class DragonscaleBoon extends CardImpl {
public DragonscaleBoon(UUID ownerId) {
public DragonscaleBoon(final DragonscaleBoon card) {
public DragonscaleBoon copy() {return new DragonscaleBoon(this);
public class DragonsEyeSavants extends CardImpl {
public DragonsEyeSavants(UUID ownerId) {
public DragonsEyeSavants(final DragonsEyeSavants card) {
public DragonsEyeSavants copy() {return new DragonsEyeSavants(this);
public class DragonStyleTwins extends CardImpl {
public DragonStyleTwins(UUID ownerId) {
public DragonStyleTwins(final DragonStyleTwins card) {
public DragonStyleTwins copy() {return new DragonStyleTwins(this);
public class DragonThroneOfTarkir extends CardImpl {
public DragonThroneOfTarkir(UUID ownerId) {
public DragonThroneOfTarkir(final DragonThroneOfTarkir card) {
public DragonThroneOfTarkir copy() {return new DragonThroneOfTarkir(this);
public class Duneblast extends CardImpl {
public Duneblast(UUID ownerId) {
public Duneblast(final Duneblast card) {
public Duneblast copy() {return new Duneblast(this);
class DuneblastEffect extends OneShotEffect {
public DuneblastEffect() {
public DuneblastEffect(final DuneblastEffect effect) {
public DuneblastEffect copy() {return new DuneblastEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new DutifulReturn(this);
public class EfreetWeaponmaster extends CardImpl {
public EfreetWeaponmaster(UUID ownerId) {
public EfreetWeaponmaster(final EfreetWeaponmaster card) {
public EfreetWeaponmaster copy() {return new EfreetWeaponmaster(this);
class EfreetWeaponmasterAbility extends TriggeredAbilityImpl {
public EfreetWeaponmasterAbility() {
public EfreetWeaponmasterAbility(final EfreetWeaponmasterAbility ability) {
public EfreetWeaponmasterAbility copy() {return new EfreetWeaponmasterAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TURNEDFACEUP || event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "When {this} enters the battlefield or is turned face up, " + super.getRule();
public class EmbodimentOfSpring extends CardImpl {
public EmbodimentOfSpring(UUID ownerId) {
public EmbodimentOfSpring(final EmbodimentOfSpring card) {
public EmbodimentOfSpring copy() {return new EmbodimentOfSpring(this);
public class EmptyThePits extends CardImpl {
public EmptyThePits(UUID ownerId) {
public EmptyThePits(final EmptyThePits card) {
public EmptyThePits copy() {return new EmptyThePits(this);
public class EndHostilities extends CardImpl {
public EndHostilities(UUID ownerId) {
public EndHostilities(final EndHostilities card) {
public EndHostilities copy() {return new EndHostilities(this);
class EndHostilitiesEffect extends OneShotEffect {
public EndHostilitiesEffect() {
public EndHostilitiesEffect(final EndHostilitiesEffect effect) {
public EndHostilitiesEffect copy() {return new EndHostilitiesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FeatOfResistance extends CardImpl {
public FeatOfResistance(UUID ownerId) {
public FeatOfResistance(final FeatOfResistance card) {
public FeatOfResistance copy() {return new FeatOfResistance(this);
public class FeedTheClan extends CardImpl {
public FeedTheClan(UUID ownerId) {
public FeedTheClan(final FeedTheClan card) {
public FeedTheClan copy() {return new FeedTheClan(this);
public class FirehoofCavalry extends CardImpl {
public FirehoofCavalry(UUID ownerId) {
public FirehoofCavalry(final FirehoofCavalry card) {
public FirehoofCavalry copy() {return new FirehoofCavalry(this);
public class FrontierBivouac extends CardImpl {
public FrontierBivouac(UUID ownerId) {
public FrontierBivouac(final FrontierBivouac card) {
public FrontierBivouac copy() {return new FrontierBivouac(this);
public class GhostfireBlade extends CardImpl {
public GhostfireBlade(UUID ownerId) {
public void adjustCosts(Ability ability, Game game) {
public GhostfireBlade(final GhostfireBlade card) {
public GhostfireBlade copy() {return new GhostfireBlade(this);
public class GlacialStalker extends CardImpl {
public GlacialStalker(UUID ownerId) {
public GlacialStalker(final GlacialStalker card) {
public GlacialStalker copy() {return new GlacialStalker(this);
public class Goblinslide extends CardImpl {
public Goblinslide(UUID ownerId) {
public Goblinslide(final Goblinslide card) {
public Goblinslide copy() {return new Goblinslide(this);
public class GrimHaruspex extends CardImpl {
public GrimHaruspex(UUID ownerId) {
public GrimHaruspex(final GrimHaruspex card) {
public GrimHaruspex copy() {return new GrimHaruspex(this);return new GurmagSwiftwing(this);
public class HardenedScales extends CardImpl {
public HardenedScales(UUID ownerId) {
public HardenedScales(final HardenedScales card) {
public HardenedScales copy() {return new HardenedScales(this);
class HardenedScalesEffect extends ReplacementEffectImpl {
HardenedScalesEffect() {
HardenedScalesEffect(final HardenedScalesEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ADD_COUNTERS;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public HardenedScalesEffect copy() {return new HardenedScalesEffect(this);
public class HeartPiercerBow extends CardImpl {
public HeartPiercerBow(UUID ownerId) {
public HeartPiercerBow(final HeartPiercerBow card) {
public HeartPiercerBow copy() {return new HeartPiercerBow(this);
class HeartPiercerBowAbility extends AttacksAttachedTriggeredAbility {
public HeartPiercerBowAbility() {
public HeartPiercerBowAbility(final HeartPiercerBowAbility ability) {
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature attacks, {this} deals 1 damage to target creature defending player controls.";
public HeartPiercerBowAbility copy() {return new HeartPiercerBowAbility(this);
public class HeirOfTheWilds extends CardImpl {
public HeirOfTheWilds(UUID ownerId) {
public HeirOfTheWilds(final HeirOfTheWilds card) {
public HeirOfTheWilds copy() {return new HeirOfTheWilds(this);
public class HeraldOfAnafenza extends CardImpl {
public HeraldOfAnafenza(UUID ownerId) {
public HeraldOfAnafenza(final HeraldOfAnafenza card) {
public HeraldOfAnafenza copy() {return new HeraldOfAnafenza(this);
class HeraldOfAnafenzaTriggeredAbility extends TriggeredAbilityImpl {
public HeraldOfAnafenzaTriggeredAbility() {
public HeraldOfAnafenzaTriggeredAbility(final HeraldOfAnafenzaTriggeredAbility ability) {
public HeraldOfAnafenzaTriggeredAbility copy() {return new HeraldOfAnafenzaTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ACTIVATED_ABILITY;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you activate {this}'s outlast ability, " + super.getRule();
public class HighlandGame extends CardImpl {
public HighlandGame(UUID ownerId) {
public HighlandGame(final HighlandGame card) {
public HighlandGame copy() {return new HighlandGame(this);
public class HighSentinelsOfArashin extends CardImpl {
public HighSentinelsOfArashin(UUID ownerId) {
public HighSentinelsOfArashin(final HighSentinelsOfArashin card) {
public HighSentinelsOfArashin copy() {return new HighSentinelsOfArashin(this);
public class HighspireMantis extends CardImpl {
public HighspireMantis(UUID ownerId) {
public HighspireMantis(final HighspireMantis card) {
public HighspireMantis copy() {return new HighspireMantis(this);
public class HoodedHydra extends CardImpl {
public HoodedHydra(UUID ownerId) {
public HoodedHydra(final HoodedHydra card) {
public HoodedHydra copy() {return new HoodedHydra(this);
public class HootingMandrills extends CardImpl {
public HootingMandrills(UUID ownerId) {
public HootingMandrills(final HootingMandrills card) {
public HootingMandrills copy() {return new HootingMandrills(this);
public class HordeAmbusher extends CardImpl {
public HordeAmbusher(UUID ownerId) {
public HordeAmbusher(final HordeAmbusher card) {
public HordeAmbusher copy() {return new HordeAmbusher(this);
public class HordelingOutburst extends CardImpl {
public HordelingOutburst(UUID ownerId) {
public HordelingOutburst(final HordelingOutburst card) {
public HordelingOutburst copy() {return new HordelingOutburst(this);
public class HowlOfTheHorde extends CardImpl {
public HowlOfTheHorde(UUID ownerId) {
public HowlOfTheHorde(final HowlOfTheHorde card) {
public HowlOfTheHorde copy() {return new HowlOfTheHorde(this);
class HowlOfTheHordeDelayedTriggeredAbility extends DelayedTriggeredAbility {
HowlOfTheHordeDelayedTriggeredAbility() {
HowlOfTheHordeDelayedTriggeredAbility(final HowlOfTheHordeDelayedTriggeredAbility ability) {
public HowlOfTheHordeDelayedTriggeredAbility copy() {return new HowlOfTheHordeDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When you cast your next instant or sorcery spell this turn, copy that spell. You may choose new targets for the copy.";
public class IvorytuskFortress extends CardImpl {
public IvorytuskFortress(UUID ownerId) {
public IvorytuskFortress(final IvorytuskFortress card) {
public IvorytuskFortress copy() {return new IvorytuskFortress(this);
public class JeeringInstigator extends CardImpl {
public JeeringInstigator(UUID ownerId) {
public JeeringInstigator(final JeeringInstigator card) {
public JeeringInstigator copy() {return new JeeringInstigator(this);
public class JeskaiAscendancy extends CardImpl {
public JeskaiAscendancy(UUID ownerId) {
public JeskaiAscendancy(final JeskaiAscendancy card) {
public JeskaiAscendancy copy() {return new JeskaiAscendancy(this);
public class JeskaiBanner extends CardImpl {
public JeskaiBanner(UUID ownerId) {
public JeskaiBanner(final JeskaiBanner card) {
public JeskaiBanner copy() {return new JeskaiBanner(this);
public class JeskaiCharm extends CardImpl {
public JeskaiCharm(UUID ownerId) {
public JeskaiCharm(final JeskaiCharm card) {
public JeskaiCharm copy() {return new JeskaiCharm(this);
public class JeskaiElder extends CardImpl {
public JeskaiElder(UUID ownerId) {
public JeskaiElder(final JeskaiElder card) {
public JeskaiElder copy() {return new JeskaiElder(this);
public class JeskaiStudent extends CardImpl {
public JeskaiStudent(UUID ownerId) {
public JeskaiStudent(final JeskaiStudent card) {
public JeskaiStudent copy() {return new JeskaiStudent(this);
public class JeskaiWindscout extends CardImpl {
public JeskaiWindscout(UUID ownerId) {
public JeskaiWindscout(final JeskaiWindscout card) {
public JeskaiWindscout copy() {return new JeskaiWindscout(this);
public class JungleHollow extends CardImpl {
public JungleHollow(UUID ownerId) {
public JungleHollow(final JungleHollow card) {
public JungleHollow copy() {return new JungleHollow(this);
public class KheruBloodsucker extends CardImpl {
public KheruBloodsucker(UUID ownerId) {
public KheruBloodsucker(final KheruBloodsucker card) {
public KheruBloodsucker copy() {return new KheruBloodsucker(this);
public class KheruDreadmaw extends CardImpl {
public KheruDreadmaw(UUID ownerId) {
public KheruDreadmaw(final KheruDreadmaw card) {
public KheruDreadmaw copy() {return new KheruDreadmaw(this);
public class KheruLichLord extends CardImpl {
public KheruLichLord(UUID ownerId) {
public KheruLichLord(final KheruLichLord card) {
public KheruLichLord copy() {return new KheruLichLord(this);
class KheruLichLordEffect extends OneShotEffect {
public KheruLichLordEffect() {this.staticText = "return a creature card at random from your graveyard to the battlefield. It gains flying, trample, and haste. Exile that card at the beginning of the next end step. If that card would leave the battlefield, exile it instead of putting it anywhere else";
public KheruLichLordEffect(final KheruLichLordEffect effect) {
public KheruLichLordEffect copy() {return new KheruLichLordEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class KheruLichLordReplacementEffect extends ReplacementEffectImpl {
KheruLichLordReplacementEffect() {
KheruLichLordReplacementEffect(final KheruLichLordReplacementEffect effect) {
public KheruLichLordReplacementEffect copy() {return new KheruLichLordReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public class KheruSpellsnatcher extends CardImpl {
public KheruSpellsnatcher(UUID ownerId) {
public KheruSpellsnatcher(final KheruSpellsnatcher card) {
public KheruSpellsnatcher copy() {return new KheruSpellsnatcher(this);
class KheruSpellsnatcherEffect extends OneShotEffect {
KheruSpellsnatcherEffect() {
KheruSpellsnatcherEffect(final KheruSpellsnatcherEffect effect) {
public KheruSpellsnatcherEffect copy() {return new KheruSpellsnatcherEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class KheruSpellsnatcherCastFromExileEffect extends AsThoughEffectImpl {
KheruSpellsnatcherCastFromExileEffect() {
KheruSpellsnatcherCastFromExileEffect(final KheruSpellsnatcherCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public KheruSpellsnatcherCastFromExileEffect copy() {return new KheruSpellsnatcherCastFromExileEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return false;return true;return false;
public class KillShot extends CardImpl {
public KillShot(UUID ownerId) {
public KillShot(final KillShot card) {
public KillShot copy() {return new KillShot(this);
public class KinTreeInvocation extends CardImpl {
public KinTreeInvocation(UUID ownerId) {
public KinTreeInvocation(final KinTreeInvocation card) {
public KinTreeInvocation copy() {return new KinTreeInvocation(this);
class KinTreeInvocationCreateTokenEffect extends OneShotEffect {
public KinTreeInvocationCreateTokenEffect() {
public KinTreeInvocationCreateTokenEffect(final KinTreeInvocationCreateTokenEffect effect) {
public KinTreeInvocationCreateTokenEffect copy() {return new KinTreeInvocationCreateTokenEffect(this);
public boolean apply(Game game, Ability source) {
public class KinTreeWarden extends CardImpl {
public KinTreeWarden(UUID ownerId) {
public KinTreeWarden(final KinTreeWarden card) {
public KinTreeWarden copy() {return new KinTreeWarden(this);
public class KrumarBondKin extends CardImpl {
public KrumarBondKin(UUID ownerId) {
public KrumarBondKin(final KrumarBondKin card) {
public KrumarBondKin copy() {return new KrumarBondKin(this);
public class LeapingMaster extends CardImpl {
public LeapingMaster(UUID ownerId) {
public LeapingMaster(final LeapingMaster card) {
public LeapingMaster copy() {return new LeapingMaster(this);
public class MantisRider extends CardImpl {
public MantisRider(UUID ownerId) {
public MantisRider(final MantisRider card) {
public MantisRider copy() {return new MantisRider(this);
public class MarduAscendancy extends CardImpl {
public MarduAscendancy(UUID ownerId) {
public MarduAscendancy(final MarduAscendancy card) {
public MarduAscendancy copy() {return new MarduAscendancy(this);
public class MarduBanner extends CardImpl {
public MarduBanner(UUID ownerId) {
public MarduBanner(final MarduBanner card) {
public MarduBanner copy() {return new MarduBanner(this);
public class MarduBlazebringer extends CardImpl {
public MarduBlazebringer(UUID ownerId) {
public MarduBlazebringer(final MarduBlazebringer card) {
public MarduBlazebringer copy() {return new MarduBlazebringer(this);
public class MarduCharm extends CardImpl {
public MarduCharm(UUID ownerId) {
public MarduCharm(final MarduCharm card) {
public MarduCharm copy() {return new MarduCharm(this);
class MarduCharmCreateTokenEffect extends OneShotEffect {
public MarduCharmCreateTokenEffect() {
public MarduCharmCreateTokenEffect(final MarduCharmCreateTokenEffect effect) {
public MarduCharmCreateTokenEffect copy() {return new MarduCharmCreateTokenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MarduHateblade extends CardImpl {
public MarduHateblade(UUID ownerId) {
public MarduHateblade(final MarduHateblade card) {
public MarduHateblade copy() {return new MarduHateblade(this);
public class MarduHeartPiercer extends CardImpl {
public MarduHeartPiercer(UUID ownerId) {
public MarduHeartPiercer(final MarduHeartPiercer card) {
public MarduHeartPiercer copy() {return new MarduHeartPiercer(this);
public class MarduHordechief extends CardImpl {
public MarduHordechief(UUID ownerId) {
public MarduHordechief(final MarduHordechief card) {
public MarduHordechief copy() {return new MarduHordechief(this);
public class MarduRoughrider extends CardImpl {
public MarduRoughrider(UUID ownerId) {
public MarduRoughrider(final MarduRoughrider card) {
public MarduRoughrider copy() {return new MarduRoughrider(this);
public class MarduSkullhunter extends CardImpl {
public MarduSkullhunter(UUID ownerId) {
public MarduSkullhunter(final MarduSkullhunter card) {
public MarduSkullhunter copy() {return new MarduSkullhunter(this);
public class MarduWarshrieker extends CardImpl {
public MarduWarshrieker(UUID ownerId) {
public MarduWarshrieker(final MarduWarshrieker card) {
public MarduWarshrieker copy() {return new MarduWarshrieker(this);
public class MasterOfPearls extends CardImpl {
public MasterOfPearls(UUID ownerId) {
public MasterOfPearls(final MasterOfPearls card) {
public MasterOfPearls copy() {return new MasterOfPearls(this);
public class MasterTheWay extends CardImpl {
public MasterTheWay(UUID ownerId) {
public MasterTheWay(final MasterTheWay card) {
public MasterTheWay copy() {return new MasterTheWay(this);
public class MeanderingTowershell extends CardImpl {
public MeanderingTowershell(UUID ownerId) {
public MeanderingTowershell(final MeanderingTowershell card) {
public MeanderingTowershell copy() {return new MeanderingTowershell(this);
class MeanderingTowershellEffect extends OneShotEffect {
public MeanderingTowershellEffect() {
public MeanderingTowershellEffect(final MeanderingTowershellEffect effect) {
public MeanderingTowershellEffect copy() {return new MeanderingTowershellEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AtBeginningNextDeclareAttackersStepNextTurnDelayedTriggeredAbility extends DelayedTriggeredAbility {
public AtBeginningNextDeclareAttackersStepNextTurnDelayedTriggeredAbility() {
public AtBeginningNextDeclareAttackersStepNextTurnDelayedTriggeredAbility(final AtBeginningNextDeclareAttackersStepNextTurnDelayedTriggeredAbility ability) {
public void init(Game game) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Return it to the battlefield under your control tapped and attacking at the beginning of the next declare attackers step on your next turn.";
public AtBeginningNextDeclareAttackersStepNextTurnDelayedTriggeredAbility copy() {return new AtBeginningNextDeclareAttackersStepNextTurnDelayedTriggeredAbility(this);
class MeanderingTowershellReturnEffect extends OneShotEffect {
public MeanderingTowershellReturnEffect() {
public MeanderingTowershellReturnEffect(final MeanderingTowershellReturnEffect effect) {
public MeanderingTowershellReturnEffect copy() {return new MeanderingTowershellReturnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MerEkNightblade extends CardImpl {
public MerEkNightblade(UUID ownerId) {
public MerEkNightblade(final MerEkNightblade card) {
public MerEkNightblade copy() {return new MerEkNightblade(this);
public class Mindswipe extends CardImpl {
public Mindswipe(UUID ownerId) {
public Mindswipe(final Mindswipe card) {
public Mindswipe copy() {return new Mindswipe(this);
class MindswipeEffect extends OneShotEffect {
public MindswipeEffect() {
public MindswipeEffect(final MindswipeEffect effect) {
public MindswipeEffect copy() {return new MindswipeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MistfireWeaver extends CardImpl {
public MistfireWeaver(UUID ownerId) {
public MistfireWeaver(final MistfireWeaver card) {
public MistfireWeaver copy() {return new MistfireWeaver(this);
public class MoltingSnakeskin extends CardImpl {
public MoltingSnakeskin(UUID ownerId) {
public MoltingSnakeskin(final MoltingSnakeskin card) {
public MoltingSnakeskin copy() {return new MoltingSnakeskin(this);
public class MurderousCut extends CardImpl {
public MurderousCut(UUID ownerId) {
public MurderousCut(final MurderousCut card) {
public MurderousCut copy() {return new MurderousCut(this);
public class MysticMonastery extends CardImpl {
public MysticMonastery(UUID ownerId) {
public MysticMonastery(final MysticMonastery card) {
public MysticMonastery copy() {return new MysticMonastery(this);
public class MysticOfTheHiddenWay extends CardImpl {
public MysticOfTheHiddenWay(UUID ownerId) {
public MysticOfTheHiddenWay(final MysticOfTheHiddenWay card) {
public MysticOfTheHiddenWay copy() {return new MysticOfTheHiddenWay(this);
public class NarsetEnlightenedMaster extends CardImpl {
public NarsetEnlightenedMaster(UUID ownerId) {
public NarsetEnlightenedMaster(final NarsetEnlightenedMaster card) {
public NarsetEnlightenedMaster copy() {return new NarsetEnlightenedMaster(this);
class NarsetEnlightenedMasterExileEffect extends OneShotEffect {
public NarsetEnlightenedMasterExileEffect() {
public NarsetEnlightenedMasterExileEffect(final NarsetEnlightenedMasterExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public NarsetEnlightenedMasterExileEffect copy() {return new NarsetEnlightenedMasterExileEffect(this);
class NarsetEnlightenedMasterCastFromExileEffect extends AsThoughEffectImpl {
public NarsetEnlightenedMasterCastFromExileEffect() {
public NarsetEnlightenedMasterCastFromExileEffect(final NarsetEnlightenedMasterCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public NarsetEnlightenedMasterCastFromExileEffect copy() {return new NarsetEnlightenedMasterCastFromExileEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class NecropolisFiend extends CardImpl {
public NecropolisFiend(UUID ownerId) {
public void adjustChoices(Ability ability, Game game) {
public void adjustCosts(Ability ability, Game game) {
public NecropolisFiend(final NecropolisFiend card) {
public NecropolisFiend copy() {return new NecropolisFiend(this);
public class NomadOutpost extends CardImpl {
public NomadOutpost(UUID ownerId) {
public NomadOutpost(final NomadOutpost card) {
public NomadOutpost copy() {return new NomadOutpost(this);
public class OpulentPalace extends CardImpl {
public OpulentPalace(UUID ownerId) {
public OpulentPalace(final OpulentPalace card) {
public OpulentPalace copy() {return new OpulentPalace(this);
public class PearlLakeAncient extends CardImpl {
public PearlLakeAncient(UUID ownerId) {
public PearlLakeAncient(final PearlLakeAncient card) {
public PearlLakeAncient copy() {return new PearlLakeAncient(this);
public class PineWalker extends CardImpl {
public PineWalker(UUID ownerId) {
public PineWalker(final PineWalker card) {
public PineWalker copy() {return new PineWalker(this);
public class PonybackBrigade extends CardImpl {
public PonybackBrigade(UUID ownerId) {
public PonybackBrigade(final PonybackBrigade card) {
public PonybackBrigade copy() {return new PonybackBrigade(this);
class PonybackBrigadeAbility extends TriggeredAbilityImpl {
public PonybackBrigadeAbility(Token token) {
public PonybackBrigadeAbility(final PonybackBrigadeAbility ability) {
public PonybackBrigadeAbility copy() {return new PonybackBrigadeAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TURNEDFACEUP || event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "When {this} enters the battlefield or is turned face up, " + super.getRule();
public class QuietContemplation extends CardImpl {
public QuietContemplation(UUID ownerId) {
public QuietContemplation(final QuietContemplation card) {
public QuietContemplation copy() {return new QuietContemplation(this);
public class RaidersSpoils extends CardImpl {
public RaidersSpoils(UUID ownerId) {
public RaidersSpoils(final RaidersSpoils card) {
public RaidersSpoils copy() {return new RaidersSpoils(this);
class RaidersSpoilsTriggeredAbility extends TriggeredAbilityImpl {
RaidersSpoilsTriggeredAbility() {
RaidersSpoilsTriggeredAbility(final RaidersSpoilsTriggeredAbility ability) {
public RaidersSpoilsTriggeredAbility copy() {return new RaidersSpoilsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Warrior you control deals combat damage to a player, you may pay 1 life. If you do, draw a card";
public class RakshasaDeathdealer extends CardImpl {
public RakshasaDeathdealer(UUID ownerId) {
public RakshasaDeathdealer(final RakshasaDeathdealer card) {
public RakshasaDeathdealer copy() {return new RakshasaDeathdealer(this);
public class RakshasasSecret extends CardImpl {
public RakshasasSecret(UUID ownerId) {
public RakshasasSecret(final RakshasasSecret card) {
public RakshasasSecret copy() {return new RakshasasSecret(this);
public class RakshasaVizier extends CardImpl {
public RakshasaVizier(UUID ownerId) {
public RakshasaVizier(final RakshasaVizier card) {
public RakshasaVizier copy() {return new RakshasaVizier(this);
class RakshasaVizierTriggeredAbility extends TriggeredAbilityImpl {
public RakshasaVizierTriggeredAbility() {
public RakshasaVizierTriggeredAbility(final RakshasaVizierTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever one or more cards are put into exile from your graveyard, put that many +1/+1 counters on {this}.";
public RakshasaVizierTriggeredAbility copy() {return new RakshasaVizierTriggeredAbility(this);
public class RattleclawMystic extends CardImpl {
public RattleclawMystic(UUID ownerId) {
public RattleclawMystic(final RattleclawMystic card) {
public RattleclawMystic copy() {return new RattleclawMystic(this);
public class RetributionOfTheAncients extends CardImpl {
public RetributionOfTheAncients(UUID ownerId) {
public RetributionOfTheAncients(final RetributionOfTheAncients card) {
public RetributionOfTheAncients copy() {return new RetributionOfTheAncients(this);
public class RideDown extends CardImpl {
public RideDown(UUID ownerId) {
public RideDown(final RideDown card) {
public RideDown copy() {return new RideDown(this);
class RideDownEffect extends OneShotEffect {
public RideDownEffect() {
public RideDownEffect(final RideDownEffect effect) {
public RideDownEffect copy() {return new RideDownEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RoarOfChallenge extends CardImpl {
public RoarOfChallenge(UUID ownerId) {
public RoarOfChallenge(final RoarOfChallenge card) {
public RoarOfChallenge copy() {return new RoarOfChallenge(this);return new RottingMastodon(this);
public class RuggedHighlands extends CardImpl {
public RuggedHighlands(UUID ownerId) {
public RuggedHighlands(final RuggedHighlands card) {
public RuggedHighlands copy() {return new RuggedHighlands(this);
public class RushOfBattle extends CardImpl {
public RushOfBattle(UUID ownerId) {
public RushOfBattle(final RushOfBattle card) {
public RushOfBattle copy() {return new RushOfBattle(this);
public class RuthlessRipper extends CardImpl {
public RuthlessRipper(UUID ownerId) {
public RuthlessRipper(final RuthlessRipper card) {
public RuthlessRipper copy() {return new RuthlessRipper(this);
public class SageEyeHarrier extends CardImpl {
public SageEyeHarrier(UUID ownerId) {
public SageEyeHarrier(final SageEyeHarrier card) {
public SageEyeHarrier copy() {return new SageEyeHarrier(this);
public class SageOfTheInwardEye extends CardImpl {
public SageOfTheInwardEye(UUID ownerId) {
public SageOfTheInwardEye(final SageOfTheInwardEye card) {
public SageOfTheInwardEye copy() {return new SageOfTheInwardEye(this);
public class SaguArcher extends CardImpl {
public SaguArcher(UUID ownerId) {
public SaguArcher(final SaguArcher card) {
public SaguArcher copy() {return new SaguArcher(this);
public class SaguMauler extends CardImpl {
public SaguMauler(UUID ownerId) {
public SaguMauler(final SaguMauler card) {
public SaguMauler copy() {return new SaguMauler(this);
public class SaltRoadPatrol extends CardImpl {
public SaltRoadPatrol(UUID ownerId) {
public SaltRoadPatrol(final SaltRoadPatrol card) {
public SaltRoadPatrol copy() {return new SaltRoadPatrol(this);
public class SandsteppeCitadel extends CardImpl {
public SandsteppeCitadel(UUID ownerId) {
public SandsteppeCitadel(final SandsteppeCitadel card) {
public SandsteppeCitadel copy() {return new SandsteppeCitadel(this);
public class SarkhanTheDragonspeaker extends CardImpl {
public SarkhanTheDragonspeaker(UUID ownerId) {
public SarkhanTheDragonspeaker(final SarkhanTheDragonspeaker card) {
public SarkhanTheDragonspeaker copy() {return new SarkhanTheDragonspeaker(this);
class SarkhanTheDragonspeakerEffect extends ContinuousEffectImpl {
SarkhanTheDragonspeakerEffect() {
SarkhanTheDragonspeakerEffect(final SarkhanTheDragonspeakerEffect effect) {
public SarkhanTheDragonspeakerEffect copy() {return new SarkhanTheDragonspeakerEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.ColorChangingEffects_5 || layer == Layer.TypeChangingEffects_4;
class SarkhanTheDragonspeakerEmblem extends Emblem {
SarkhanTheDragonspeakerEmblem() {
public class SavageKnuckleblade extends CardImpl {
public SavageKnuckleblade(UUID ownerId) {
public SavageKnuckleblade(final SavageKnuckleblade card) {
public SavageKnuckleblade copy() {return new SavageKnuckleblade(this);
public class SavagePunch extends CardImpl {
public SavagePunch(UUID ownerId) {
public SavagePunch(final SavagePunch card) {
public SavagePunch copy() {return new SavagePunch(this);
public class Scaldkin extends CardImpl {
public Scaldkin(UUID ownerId) {
public Scaldkin(final Scaldkin card) {
public Scaldkin copy() {return new Scaldkin(this);
public class ScionOfGlaciers extends CardImpl {
public ScionOfGlaciers(UUID ownerId) {
public ScionOfGlaciers(final ScionOfGlaciers card) {
public ScionOfGlaciers copy() {return new ScionOfGlaciers(this);
public class ScouredBarrens extends CardImpl {
public ScouredBarrens(UUID ownerId) {
public ScouredBarrens(final ScouredBarrens card) {
public ScouredBarrens copy() {return new ScouredBarrens(this);
public class ScoutTheBorders extends CardImpl {
public ScoutTheBorders(UUID ownerId) {
public ScoutTheBorders(final ScoutTheBorders card) {
public ScoutTheBorders copy() {return new ScoutTheBorders(this);
class ScoutTheBordersEffect extends OneShotEffect {
public ScoutTheBordersEffect() {
public ScoutTheBordersEffect(final ScoutTheBordersEffect effect) {
public ScoutTheBordersEffect copy() {return new ScoutTheBordersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SeeTheUnwritten extends CardImpl {
public SeeTheUnwritten(UUID ownerId) {
public SeeTheUnwritten(final SeeTheUnwritten card) {
public SeeTheUnwritten copy() {return new SeeTheUnwritten(this);
class SeeTheUnwrittenEffect extends OneShotEffect {
public SeeTheUnwrittenEffect(int numberOfCardsToPutIntoPlay) {
public SeeTheUnwrittenEffect(final SeeTheUnwrittenEffect effect) {
public SeeTheUnwrittenEffect copy() {return new SeeTheUnwrittenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new SetAdrift(this);
public class ShamblingAttendants extends CardImpl {
public ShamblingAttendants(UUID ownerId) {
public ShamblingAttendants(final ShamblingAttendants card) {
public ShamblingAttendants copy() {return new ShamblingAttendants(this);
public class SidisiBroodTyrant extends CardImpl {
public SidisiBroodTyrant(UUID ownerId) {
public SidisiBroodTyrant(final SidisiBroodTyrant card) {
public SidisiBroodTyrant copy() {return new SidisiBroodTyrant(this);
class SidisiBroodTyrantAbility extends TriggeredAbilityImpl {
public SidisiBroodTyrantAbility() {
public SidisiBroodTyrantAbility(final SidisiBroodTyrantAbility ability) {
public SidisiBroodTyrantAbility copy() {return new SidisiBroodTyrantAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ATTACKER_DECLARED || event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return event.getType() == EventType.ENTERS_THE_BATTLEFIELD && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever {this} enters the battlefield or attacks, put the top three cards of your library into your graveyard.";
class SidisiBroodTyrantTriggeredAbility extends TriggeredAbilityImpl {
public SidisiBroodTyrantTriggeredAbility() {
public SidisiBroodTyrantTriggeredAbility(final SidisiBroodTyrantTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE_GROUP;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public SidisiBroodTyrantTriggeredAbility copy() {return new SidisiBroodTyrantTriggeredAbility(this);
public String getRule() {return "Whenever one or more creature cards are put into your graveyard from your library, put a 2/2 black Zombie creature token onto the battlefield.";
public class SidisisPet extends CardImpl {
public SidisisPet(UUID ownerId) {
public SidisisPet(final SidisisPet card) {
public SidisisPet copy() {return new SidisisPet(this);
public class Siegecraft extends CardImpl {
public Siegecraft(UUID ownerId) {
public Siegecraft(final Siegecraft card) {
public Siegecraft copy() {return new Siegecraft(this);
public class SiegeRhino extends CardImpl {
public SiegeRhino(UUID ownerId) {
public SiegeRhino(final SiegeRhino card) {
public SiegeRhino copy() {return new SiegeRhino(this);
public class SingingBellStrike extends CardImpl {
public SingingBellStrike(UUID ownerId) {
public SingingBellStrike(final SingingBellStrike card) {
public SingingBellStrike copy() {return new SingingBellStrike(this);
public class SmokeTeller extends CardImpl {
public SmokeTeller(UUID ownerId) {
public SmokeTeller(final SmokeTeller card) {
public SmokeTeller copy() {return new SmokeTeller(this);
class SmokeTellerLookFaceDownEffect extends OneShotEffect {
public SmokeTellerLookFaceDownEffect() {
public SmokeTellerLookFaceDownEffect(final SmokeTellerLookFaceDownEffect effect) {
public SmokeTellerLookFaceDownEffect copy() {return new SmokeTellerLookFaceDownEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class SnowhornRider extends CardImpl {
public SnowhornRider(UUID ownerId) {
public SnowhornRider(final SnowhornRider card) {
public SnowhornRider copy() {return new SnowhornRider(this);
public class SorinSolemnVisitor extends CardImpl {
public SorinSolemnVisitor(UUID ownerId) {
public SorinSolemnVisitor(final SorinSolemnVisitor card) {
public SorinSolemnVisitor copy() {return new SorinSolemnVisitor(this);
class SorinEmblem extends Emblem {
public SorinEmblem() {
class SorinSolemnVisitorVampireToken extends Token {
SorinSolemnVisitorVampireToken() {
public class StubbornDenial extends CardImpl {
public StubbornDenial(UUID ownerId) {
public StubbornDenial(final StubbornDenial card) {
public StubbornDenial copy() {return new StubbornDenial(this);
public class SultaiAscendancy extends CardImpl {
public SultaiAscendancy(UUID ownerId) {
public SultaiAscendancy(final SultaiAscendancy card) {
public SultaiAscendancy copy() {return new SultaiAscendancy(this);
public class SultaiBanner extends CardImpl {
public SultaiBanner(UUID ownerId) {
public SultaiBanner(final SultaiBanner card) {
public SultaiBanner copy() {return new SultaiBanner(this);
public class SultaiCharm extends CardImpl {
public SultaiCharm(UUID ownerId) {
public SultaiCharm(final SultaiCharm card) {
public SultaiCharm copy() {return new SultaiCharm(this);
public class SultaiFlayer extends CardImpl {
public SultaiFlayer(UUID ownerId) {
public SultaiFlayer(final SultaiFlayer card) {
public SultaiFlayer copy() {return new SultaiFlayer(this);
public class SultaiScavenger extends CardImpl {
public SultaiScavenger(UUID ownerId) {
public SultaiScavenger(final SultaiScavenger card) {
public SultaiScavenger copy() {return new SultaiScavenger(this);
public class SultaiSoothsayer extends CardImpl {
public SultaiSoothsayer(UUID ownerId) {
public SultaiSoothsayer(final SultaiSoothsayer card) {
public SultaiSoothsayer copy() {return new SultaiSoothsayer(this);
class SultaiSoothsayerEffect extends OneShotEffect {
public SultaiSoothsayerEffect() {
public SultaiSoothsayerEffect(final SultaiSoothsayerEffect effect) {
public SultaiSoothsayerEffect copy() {return new SultaiSoothsayerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SuspensionField extends CardImpl {
public SuspensionField(UUID ownerId) {
public SuspensionField(final SuspensionField card) {
public SuspensionField copy() {return new SuspensionField(this);
class SuspensionFieldExileEffect extends OneShotEffect {
SuspensionFieldExileEffect() {this.staticText = "you may exile target creature with toughness 3 or greater until {this} leaves the battlefield. <i>(That creature returns under its owner's control.)</i>";
SuspensionFieldExileEffect(final SuspensionFieldExileEffect effect) {
public SuspensionFieldExileEffect copy() {return new SuspensionFieldExileEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), sourcePermanent.getIdName()).apply(game, source);return false;
public class SwarmOfBloodflies extends CardImpl {
public SwarmOfBloodflies(UUID ownerId) {
public SwarmOfBloodflies(final SwarmOfBloodflies card) {
public SwarmOfBloodflies copy() {return new SwarmOfBloodflies(this);return new SwiftKick(this);return new SwiftwaterCliffs(this);
public class TaigamsScheming extends CardImpl {
public TaigamsScheming(UUID ownerId) {
public TaigamsScheming(final TaigamsScheming card) {
public TaigamsScheming copy() {return new TaigamsScheming(this);
class TaigamsSchemingEffect extends OneShotEffect {
public TaigamsSchemingEffect() {
public TaigamsSchemingEffect(final TaigamsSchemingEffect effect) {
public TaigamsSchemingEffect copy() {return new TaigamsSchemingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TakeUpArms extends CardImpl {
public TakeUpArms(UUID ownerId) {
public TakeUpArms(final TakeUpArms card) {
public TakeUpArms copy() {return new TakeUpArms(this);
public class TemurAscendancy extends CardImpl {
public TemurAscendancy(UUID ownerId) {
public TemurAscendancy(final TemurAscendancy card) {
public TemurAscendancy copy() {return new TemurAscendancy(this);
public class TemurBanner extends CardImpl {
public TemurBanner(UUID ownerId) {
public TemurBanner(final TemurBanner card) {
public TemurBanner copy() {return new TemurBanner(this);
public class TemurCharger extends CardImpl {
public TemurCharger(UUID ownerId) {
public TemurCharger(final TemurCharger card) {
public TemurCharger copy() {return new TemurCharger(this);
public class TemurCharm extends CardImpl {
public TemurCharm(UUID ownerId) {
public TemurCharm(final TemurCharm card) {
public TemurCharm copy() {return new TemurCharm(this);
public class ThornwoodFalls extends CardImpl {
public ThornwoodFalls(UUID ownerId) {
public ThornwoodFalls(final ThornwoodFalls card) {
public ThornwoodFalls copy() {return new ThornwoodFalls(this);
public class ThousandWinds extends CardImpl {
public ThousandWinds(UUID ownerId) {
public ThousandWinds(final ThousandWinds card) {
public ThousandWinds copy() {return new ThousandWinds(this);
public class Throttle extends CardImpl {
public Throttle(UUID ownerId) {
public Throttle(final Throttle card) {
public Throttle copy() {return new Throttle(this);
public class TimelyHordemate extends CardImpl {
public TimelyHordemate(UUID ownerId) {"<i>Raid</i> - When {this} enters the battlefield, if you attacked with a creature this turn, return target creature card with converted mana cost 2 or less from your graveyard to the battlefield.");
public TimelyHordemate(final TimelyHordemate card) {
public TimelyHordemate copy() {return new TimelyHordemate(this);
public class TombOfTheSpiritDragon extends CardImpl {
public TombOfTheSpiritDragon(UUID ownerId) {
public TombOfTheSpiritDragon(final TombOfTheSpiritDragon card) {
public TombOfTheSpiritDragon copy() {return new TombOfTheSpiritDragon(this);
public class TormentingVoice extends CardImpl {
public TormentingVoice(UUID ownerId) {
public TormentingVoice(final TormentingVoice card) {
public TormentingVoice copy() {return new TormentingVoice(this);
public class TrailOfMystery extends CardImpl {
public TrailOfMystery(UUID ownerId) {
public TrailOfMystery(final TrailOfMystery card) {
public TrailOfMystery copy() {return new TrailOfMystery(this);
class TrailOfMysteryTriggeredAbility extends TurnedFaceUpAllTriggeredAbility {
public TrailOfMysteryTriggeredAbility() {
public TrailOfMysteryTriggeredAbility(final TrailOfMysteryTriggeredAbility ability) {
public TrailOfMysteryTriggeredAbility copy() {return new TrailOfMysteryTriggeredAbility(this);
public String getRule() {return "Whenever a permanent you control is turned face up, if it's a creature, it gets +2/+2 until end of turn.";
public class TranquilCove extends CardImpl {
public TranquilCove(UUID ownerId) {
public TranquilCove(final TranquilCove card) {
public TranquilCove copy() {return new TranquilCove(this);return new TuskedColossodon(this);
public class TuskguardCaptain extends CardImpl {
public TuskguardCaptain(UUID ownerId) {
public TuskguardCaptain(final TuskguardCaptain card) {
public TuskguardCaptain copy() {return new TuskguardCaptain(this);
public class UginsNexus extends CardImpl {
public UginsNexus(UUID ownerId) {
public UginsNexus(final UginsNexus card) {
public UginsNexus copy() {return new UginsNexus(this);
class UginsNexusSkipExtraTurnsEffect extends ReplacementEffectImpl {
public UginsNexusSkipExtraTurnsEffect() {
public UginsNexusSkipExtraTurnsEffect(final UginsNexusSkipExtraTurnsEffect effect) {
public UginsNexusSkipExtraTurnsEffect copy() {return new UginsNexusSkipExtraTurnsEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.EXTRA_TURN;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
class UginsNexusExileEffect extends ReplacementEffectImpl {
public UginsNexusExileEffect() {
public UginsNexusExileEffect(final UginsNexusExileEffect effect) {
public UginsNexusExileEffect copy() {return new UginsNexusExileEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class UnyieldingKrumar extends CardImpl {
public UnyieldingKrumar(UUID ownerId) {
public UnyieldingKrumar(final UnyieldingKrumar card) {
public UnyieldingKrumar copy() {return new UnyieldingKrumar(this);
public class UtterEnd extends CardImpl {
public UtterEnd(UUID ownerId) {
public UtterEnd(final UtterEnd card) {
public UtterEnd copy() {return new UtterEnd(this);
public class ValleyDasher extends CardImpl {
public ValleyDasher(UUID ownerId) {
public ValleyDasher(final ValleyDasher card) {
public ValleyDasher copy() {return new ValleyDasher(this);
public class VenerableLammasu extends CardImpl {
public VenerableLammasu(UUID ownerId) {
public VenerableLammasu(final VenerableLammasu card) {
public VenerableLammasu copy() {return new VenerableLammasu(this);
public class VillainousWealth extends CardImpl {
public VillainousWealth(UUID ownerId) {
public VillainousWealth(final VillainousWealth card) {
public VillainousWealth copy() {return new VillainousWealth(this);
class VillainousWealthEffect extends OneShotEffect {
public VillainousWealthEffect() {
public VillainousWealthEffect(final VillainousWealthEffect effect) {
public VillainousWealthEffect copy() {return new VillainousWealthEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WarBehemoth extends CardImpl {
public WarBehemoth(UUID ownerId) {
public WarBehemoth(final WarBehemoth card) {
public WarBehemoth copy() {return new WarBehemoth(this);
public class WardenOfTheEye extends CardImpl {
public WardenOfTheEye(UUID ownerId) {
public WardenOfTheEye(final WardenOfTheEye card) {
public WardenOfTheEye copy() {return new WardenOfTheEye(this);
public class WarNameAspirant extends CardImpl {
public WarNameAspirant(UUID ownerId) {
public WarNameAspirant(final WarNameAspirant card) {
public WarNameAspirant copy() {return new WarNameAspirant(this);
public class WatcherOfTheRoost extends CardImpl {
public WatcherOfTheRoost(UUID ownerId) {
public WatcherOfTheRoost(final WatcherOfTheRoost card) {
public WatcherOfTheRoost copy() {return new WatcherOfTheRoost(this);
public class Waterwhirl extends CardImpl {
public Waterwhirl(UUID ownerId) {
public Waterwhirl(final Waterwhirl card) {
public Waterwhirl copy() {return new Waterwhirl(this);
public class WeaveFate extends CardImpl {
public WeaveFate(UUID ownerId) {
public WeaveFate(final WeaveFate card) {
public WeaveFate copy() {return new WeaveFate(this);
public class WetlandSambar extends CardImpl {
public WetlandSambar(UUID ownerId) {
public WetlandSambar(final WetlandSambar card) {
public WetlandSambar copy() {return new WetlandSambar(this);
public class WhirlwindAdept extends CardImpl {
public WhirlwindAdept(UUID ownerId) {
public WhirlwindAdept(final WhirlwindAdept card) {
public WhirlwindAdept copy() {return new WhirlwindAdept(this);
public class WindScarredCrag extends CardImpl {
public WindScarredCrag(UUID ownerId) {
public WindScarredCrag(final WindScarredCrag card) {
public WindScarredCrag copy() {return new WindScarredCrag(this);
public class WingmateRoc extends CardImpl {
public WingmateRoc(UUID ownerId) {
public WingmateRoc(final WingmateRoc card) {
public WingmateRoc copy() {return new WingmateRoc(this);
class WingmateRocToken extends Token {
WingmateRocToken() {return new WoollyLoxodon(this);
public class ZurgoHelmsmasher extends CardImpl {
public ZurgoHelmsmasher(UUID ownerId) {
public ZurgoHelmsmasher(final ZurgoHelmsmasher card) {
public ZurgoHelmsmasher copy() {return new ZurgoHelmsmasher(this);
public class CinderWall extends CardImpl {
public CinderWall(UUID ownerId) {
public CinderWall(final CinderWall card) {
public CinderWall copy() {return new CinderWall(this);
public class ConeOfFlame extends CardImpl {
public ConeOfFlame(UUID ownerId) {
public ConeOfFlame(final ConeOfFlame card) {
public ConeOfFlame copy() {return new ConeOfFlame(this);
class ConeOfFlameEffect extends OneShotEffect {
public ConeOfFlameEffect() {
public ConeOfFlameEffect(final ConeOfFlameEffect effect) {
public ConeOfFlameEffect copy() {return new ConeOfFlameEffect(this);
public boolean apply(Game game, Ability source) {return applied;
public class EdgeOfAutumn extends CardImpl {
public EdgeOfAutumn(UUID ownerId) {
public EdgeOfAutumn(final EdgeOfAutumn card) {
public EdgeOfAutumn copy() {return new EdgeOfAutumn(this);
public class FireBellyChangeling extends CardImpl {
public FireBellyChangeling(UUID ownerId) {
public FireBellyChangeling(final FireBellyChangeling card) {
public FireBellyChangeling copy() {return new FireBellyChangeling(this);
public class Ghostfire extends CardImpl {
public Ghostfire(UUID ownerId) {
public Ghostfire(final Ghostfire card) {
public Ghostfire copy() {return new Ghostfire(this);
public class Grasslands extends CardImpl {
public Grasslands(UUID ownerId) {
public Grasslands(final Grasslands card) {
public Grasslands copy() {return new Grasslands(this);
public class KilnmouthDragon extends CardImpl {
public KilnmouthDragon(UUID ownerId) {
public KilnmouthDragon(final KilnmouthDragon card) {
public KilnmouthDragon copy() {return new KilnmouthDragon(this);
public class PaladinOfPrahv extends CardImpl {
public PaladinOfPrahv(UUID ownerId) {
public PaladinOfPrahv(final PaladinOfPrahv card) {
public PaladinOfPrahv copy() {return new PaladinOfPrahv(this);
class PaladinOfPrahvTriggeredAbility extends DelayedTriggeredAbility {
public PaladinOfPrahvTriggeredAbility() {
public PaladinOfPrahvTriggeredAbility(final PaladinOfPrahvTriggeredAbility ability) {
public PaladinOfPrahvTriggeredAbility copy() {return new PaladinOfPrahvTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return true;return false;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever target creature deals damage this turn, " + super.getRule();
class PaladinOfPrahvEffect extends OneShotEffect {
public PaladinOfPrahvEffect() {
public PaladinOfPrahvEffect(final PaladinOfPrahvEffect effect) {
public PaladinOfPrahvEffect copy() {return new PaladinOfPrahvEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class SilverKnight extends CardImpl {
public SilverKnight(UUID ownerId) {
public SilverKnight(final SilverKnight card) {
public SilverKnight copy() {return new SilverKnight(this);
public class SpidersilkArmor extends CardImpl {
public SpidersilkArmor(UUID ownerId) {
public SpidersilkArmor(final SpidersilkArmor card) {
public SpidersilkArmor copy() {return new SpidersilkArmor(this);
public class Abomination extends CardImpl {
public Abomination(UUID ownerId) {
public Abomination(final Abomination card) {
public Abomination copy() {return new Abomination(this);
public class AcidRain extends CardImpl {
public AcidRain(UUID ownerId) {
public AcidRain(final AcidRain card) {
public AcidRain copy() {return new AcidRain(this);
public class ActiveVolcano extends CardImpl {
public ActiveVolcano(UUID ownerId) {
public ActiveVolcano(final ActiveVolcano card) {
public ActiveVolcano copy() {return new ActiveVolcano(this);
public class AdunOakenshield extends CardImpl {
public AdunOakenshield(UUID ownerId) {
public AdunOakenshield(final AdunOakenshield card) {
public AdunOakenshield copy() {return new AdunOakenshield(this);
public class AErathiBerserker extends CardImpl {
public AErathiBerserker(UUID ownerId) {
public AErathiBerserker(final AErathiBerserker card) {
public AErathiBerserker copy() {return new AErathiBerserker(this);
public class AkronLegionnaire extends CardImpl {
public AkronLegionnaire(UUID ownerId) {
public AkronLegionnaire(final AkronLegionnaire card) {
public AkronLegionnaire copy() {return new AkronLegionnaire(this);
public class ArenaOfTheAncients extends CardImpl {
public ArenaOfTheAncients(UUID ownerId) {
public ArenaOfTheAncients(final ArenaOfTheAncients card) {
public ArenaOfTheAncients copy() {return new ArenaOfTheAncients(this);
public class AvoidFate extends CardImpl {
public AvoidFate(UUID ownerId) {
public AvoidFate(final AvoidFate card) {
public AvoidFate copy() {return new AvoidFate(this);
public class BarbaryApes extends CardImpl {
public BarbaryApes(UUID ownerId) {
public BarbaryApes(final BarbaryApes card) {
public BarbaryApes copy() {return new BarbaryApes(this);
public class BarktoothWarbeard extends CardImpl {
public BarktoothWarbeard(UUID ownerId) {
public BarktoothWarbeard(final BarktoothWarbeard card) {
public BarktoothWarbeard copy() {return new BarktoothWarbeard(this);
public class BartelRuneaxe extends CardImpl {
public BartelRuneaxe(UUID ownerId) {
public BartelRuneaxe(final BartelRuneaxe card) {
public BartelRuneaxe copy() {return new BartelRuneaxe(this);
public BartelRuneaxeEffect() {
public BartelRuneaxeEffect(final BartelRuneaxeEffect effect) {
public BartelRuneaxeEffect copy() {return new BartelRuneaxeEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TARGET;
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return sourcePermanent.getLogName() + " can't be the target of Aura spells";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class BorisDevilboon extends CardImpl {
public BorisDevilboon(UUID ownerId) {
public BorisDevilboon(final BorisDevilboon card) {
public BorisDevilboon copy() {return new BorisDevilboon(this);
class MinorDemonToken extends Token {
public MinorDemonToken() {
public class ChainLightning extends CardImpl {
public ChainLightning(UUID ownerId) {
public ChainLightning(final ChainLightning card) {
public ChainLightning copy() {return new ChainLightning(this);
class ChainLightningEffect extends OneShotEffect {
ChainLightningEffect() {
ChainLightningEffect(final ChainLightningEffect effect) {
public ChainLightningEffect copy() {return new ChainLightningEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ChainsOfMephistopheles extends CardImpl {
public ChainsOfMephistopheles(UUID ownerId) {
public ChainsOfMephistopheles(final ChainsOfMephistopheles card) {
public ChainsOfMephistopheles copy() {return new ChainsOfMephistopheles(this);
class ChainsOfMephistophelesReplacementEffect extends ReplacementEffectImpl {
public ChainsOfMephistophelesReplacementEffect() {
public ChainsOfMephistophelesReplacementEffect(final ChainsOfMephistophelesReplacementEffect effect) {
public ChainsOfMephistophelesReplacementEffect copy() {return new ChainsOfMephistophelesReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false; 
public class Cleanse extends CardImpl {
public Cleanse(UUID ownerId) {
public Cleanse(final Cleanse card) {
public Cleanse copy() {return new Cleanse(this);
public class CosmicHorror extends CardImpl {
public CosmicHorror(UUID ownerId) {
public CosmicHorror(final CosmicHorror card) {
public CosmicHorror copy() {return new CosmicHorror(this);
class CosmicHorrorEffect extends OneShotEffect {
public CosmicHorrorEffect(Cost cost) {
public CosmicHorrorEffect(final CosmicHorrorEffect effect) {
public boolean apply(Game game, Ability source) {if (!sb.toString().toLowerCase().startsWith("exile ") && !sb.toString().toLowerCase().startsWith("return ")) {return true;return true;return false;
public CosmicHorrorEffect copy() {return new CosmicHorrorEffect(this);
public class CrawGiant extends CardImpl {
public CrawGiant(UUID ownerId) {
public CrawGiant(final CrawGiant card) {
public CrawGiant copy() {return new CrawGiant(this);
public class CrimsonKobolds extends CardImpl {
public CrimsonKobolds(UUID ownerId) {
public CrimsonKobolds(final CrimsonKobolds card) {
public CrimsonKobolds copy() {return new CrimsonKobolds(this);
public class CrimsonManticore extends CardImpl {
public CrimsonManticore(UUID ownerId) {
public CrimsonManticore(final CrimsonManticore card) {
public CrimsonManticore copy() {return new CrimsonManticore(this);
public class CrookshankKobolds extends CardImpl {
public CrookshankKobolds(UUID ownerId) {
public CrookshankKobolds(final CrookshankKobolds card) {
public CrookshankKobolds copy() {return new CrookshankKobolds(this);
public class DakkonBlackblade extends CardImpl {
public DakkonBlackblade(UUID ownerId) {
public DakkonBlackblade(final DakkonBlackblade card) {
public DakkonBlackblade copy() {return new DakkonBlackblade(this);
public class DemonicTorment extends CardImpl {
public DemonicTorment(UUID ownerId) {
public DemonicTorment(final DemonicTorment card) {
public DemonicTorment copy() {return new DemonicTorment(this);
public class DevouringDeep extends CardImpl {
public DevouringDeep(UUID ownerId) {
public DevouringDeep(final DevouringDeep card) {
public DevouringDeep copy() {return new DevouringDeep(this);
public class FieldOfDreams extends CardImpl {
public FieldOfDreams(UUID ownerId) {
public FieldOfDreams(final FieldOfDreams card) {
public FieldOfDreams copy() {return new FieldOfDreams(this);
public class GravitySphere extends CardImpl {
public GravitySphere(UUID ownerId) {
public GravitySphere(final GravitySphere card) {
public GravitySphere copy() {return new GravitySphere(this);
public class GwendlynDiCorci extends CardImpl {
public GwendlynDiCorci(UUID ownerId) {
public GwendlynDiCorci(final GwendlynDiCorci card) {
public GwendlynDiCorci copy() {return new GwendlynDiCorci(this);
public class HazezonTamar extends CardImpl {
public HazezonTamar(UUID ownerId) {
public HazezonTamar(final HazezonTamar card) {
public HazezonTamar copy() {return new HazezonTamar(this);
class HazezonTamarEntersEffect extends OneShotEffect {
public HazezonTamarEntersEffect() {
public HazezonTamarEntersEffect(final HazezonTamarEntersEffect effect) {
public HazezonTamarEntersEffect copy() {return new HazezonTamarEntersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class HazezonTamarSandWarrior extends Token {
public HazezonTamarSandWarrior() {
public class HeadlessHorseman extends CardImpl {
public HeadlessHorseman(UUID ownerId) {
public HeadlessHorseman(final HeadlessHorseman card) {
public HeadlessHorseman copy() {return new HeadlessHorseman(this);
public class HornetCobra extends CardImpl {
public HornetCobra(UUID ownerId) {
public HornetCobra(final HornetCobra card) {
public HornetCobra copy() {return new HornetCobra(this);
public class HornOfDeafening extends CardImpl {
public HornOfDeafening(UUID ownerId) {
public HornOfDeafening(final HornOfDeafening card) {
public HornOfDeafening copy() {return new HornOfDeafening(this);
public class HorrorOfHorrors extends CardImpl {
public HorrorOfHorrors(UUID ownerId) {
public HorrorOfHorrors(final HorrorOfHorrors card) {
public HorrorOfHorrors copy() {return new HorrorOfHorrors(this);
public class HundingGjornersen extends CardImpl {
public HundingGjornersen(UUID ownerId) {
public HundingGjornersen(final HundingGjornersen card) {
public HundingGjornersen copy() {return new HundingGjornersen(this);
public class HyperionBlacksmith extends CardImpl {
public HyperionBlacksmith(UUID ownerId) {
public HyperionBlacksmith(final HyperionBlacksmith card) {
public HyperionBlacksmith copy() {return new HyperionBlacksmith(this);
public class InTheEyeOfChaos extends CardImpl {
public InTheEyeOfChaos(UUID ownerId) {
public InTheEyeOfChaos(final InTheEyeOfChaos card) {
public InTheEyeOfChaos copy() {return new InTheEyeOfChaos(this);
class InTheEyeOfChaosEffect extends OneShotEffect {
InTheEyeOfChaosEffect() {
InTheEyeOfChaosEffect(final InTheEyeOfChaosEffect effect) {
public InTheEyeOfChaosEffect copy() {return new InTheEyeOfChaosEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class IvoryGuardians extends CardImpl {
public IvoryGuardians(UUID ownerId) {
public IvoryGuardians(final IvoryGuardians card) {
public IvoryGuardians copy() {return new IvoryGuardians(this);
class IvoryGuardiansCondition implements Condition {
public boolean apply(Game game, Ability source) {return conditionApplies;
public class JacquesLeVert extends CardImpl {
public JacquesLeVert(UUID ownerId) {
public JacquesLeVert(final JacquesLeVert card) {
public JacquesLeVert copy() {return new JacquesLeVert(this);
public class JeditOjanen extends CardImpl {
public JeditOjanen(UUID ownerId) {
public JeditOjanen(final JeditOjanen card) {
public JeditOjanen copy() {return new JeditOjanen(this);
public class JerrardOfTheClosedFist extends CardImpl {
public JerrardOfTheClosedFist(UUID ownerId) {
public JerrardOfTheClosedFist(final JerrardOfTheClosedFist card) {
public JerrardOfTheClosedFist copy() {return new JerrardOfTheClosedFist(this);
public class Karakas extends CardImpl {
public Karakas(UUID ownerId) {
public Karakas(final Karakas card) {
public Karakas copy() {return new Karakas(this);
public class KasimirTheLoneWolf extends CardImpl {
public KasimirTheLoneWolf(UUID ownerId) {
public KasimirTheLoneWolf(final KasimirTheLoneWolf card) {
public KasimirTheLoneWolf copy() {return new KasimirTheLoneWolf(this);
public class KeepersOfTheFaith extends CardImpl {
public KeepersOfTheFaith(UUID ownerId) {
public KeepersOfTheFaith(final KeepersOfTheFaith card) {
public KeepersOfTheFaith copy() {return new KeepersOfTheFaith(this);
public class KoboldOverlord extends CardImpl {
public KoboldOverlord(UUID ownerId) {
public KoboldOverlord(final KoboldOverlord card) {
public KoboldOverlord copy() {return new KoboldOverlord(this);
public class LadyOrca extends CardImpl {
public LadyOrca(UUID ownerId) {
public LadyOrca(final LadyOrca card) {
public LadyOrca copy() {return new LadyOrca(this);
public class LandTax extends CardImpl {
public LandTax(UUID ownerId) {
public LandTax(final LandTax card) {
public LandTax copy() {return new LandTax(this);return new Lifeblood(this);
public class LivingPlane extends CardImpl {
public LivingPlane(UUID ownerId) {
public LivingPlane(final LivingPlane card) {
public LivingPlane copy() {return new LivingPlane(this);
class LivingPlaneToken extends Token {
public LivingPlaneToken() {
public class MarhaultElsdragon extends CardImpl {
public MarhaultElsdragon(UUID ownerId) {
public MarhaultElsdragon(final MarhaultElsdragon card) {
public MarhaultElsdragon copy() {return new MarhaultElsdragon(this);
public class Moat extends CardImpl {
public Moat(UUID ownerId) {
public Moat(final Moat card) {
public Moat copy() {return new Moat(this);
public class MoldDemon extends CardImpl {
public MoldDemon(UUID ownerId) {
public MoldDemon(final MoldDemon card) {
public MoldDemon copy() {return new MoldDemon(this);
public class MountainYeti extends CardImpl {
public MountainYeti(UUID ownerId) {
public MountainYeti(final MountainYeti card) {
public MountainYeti copy() {return new MountainYeti(this);
public class NetherVoid extends CardImpl {
public NetherVoid(UUID ownerId) {
public NetherVoid(final NetherVoid card) {
public NetherVoid copy() {return new NetherVoid(this);
public class NicolBolas extends CardImpl {
public NicolBolas(UUID ownerId) {
public NicolBolas(final NicolBolas card) {
public NicolBolas copy() {return new NicolBolas(this);
public class OsaiVultures extends CardImpl {
public OsaiVultures(UUID ownerId) {
public OsaiVultures(final OsaiVultures card) {
public OsaiVultures copy() {return new OsaiVultures(this);
public class PartWater extends CardImpl {
public PartWater(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public PartWater(final PartWater card) {
public PartWater copy() {return new PartWater(this);
public class PavelMaliki extends CardImpl {
public PavelMaliki(UUID ownerId) {
public PavelMaliki(final PavelMaliki card) {
public PavelMaliki copy() {return new PavelMaliki(this);
public class PixieQueen extends CardImpl {
public PixieQueen(UUID ownerId) {
public PixieQueen(final PixieQueen card) {
public PixieQueen copy() {return new PixieQueen(this);
public class PresenceOfTheMaster extends CardImpl {
public PresenceOfTheMaster(UUID ownerId) {
public PresenceOfTheMaster(final PresenceOfTheMaster card) {
public PresenceOfTheMaster copy() {return new PresenceOfTheMaster(this);
class PresenceOfTheMasterTriggeredAbility extends TriggeredAbilityImpl {
public PresenceOfTheMasterTriggeredAbility() {
public PresenceOfTheMasterTriggeredAbility(final PresenceOfTheMasterTriggeredAbility abiltity) {
public PresenceOfTheMasterTriggeredAbility copy() {return new PresenceOfTheMasterTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts an enchantment spell, counter it";
class CounterEffect extends OneShotEffect {
public CounterEffect() {
public CounterEffect(final CounterEffect effect) {
public CounterEffect copy() {return new CounterEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(this.getTargetPointer().getFirst(game, source), source.getSourceId(), game);
public class RagingBull extends CardImpl {
public RagingBull(UUID ownerId) {
public RagingBull(final RagingBull card) {
public RagingBull copy() {return new RagingBull(this);
public class Ragnar extends CardImpl {
public Ragnar(UUID ownerId) {
public Ragnar(final Ragnar card) {
public Ragnar copy() {return new Ragnar(this);
public class RamirezDePietro extends CardImpl {
public RamirezDePietro(UUID ownerId) {
public RamirezDePietro(final RamirezDePietro card) {
public RamirezDePietro copy() {return new RamirezDePietro(this);
public class Revelation extends CardImpl {
public Revelation(UUID ownerId) {
public Revelation(final Revelation card) {
public Revelation copy() {return new Revelation(this);
public class RighteousAvengers extends CardImpl {
public RighteousAvengers(UUID ownerId) {
public RighteousAvengers(final RighteousAvengers card) {
public RighteousAvengers copy() {return new RighteousAvengers(this);
public class RingOfImmortals extends CardImpl {
public RingOfImmortals(UUID ownerId) {
public RingOfImmortals(final RingOfImmortals card) {
public RingOfImmortals copy() {return new RingOfImmortals(this);
public class RivenTurnbull extends CardImpl {
public RivenTurnbull(UUID ownerId) {
public RivenTurnbull(final RivenTurnbull card) {
public RivenTurnbull copy() {return new RivenTurnbull(this);
public class Sentinel extends CardImpl {
public Sentinel(UUID ownerId) {
public Sentinel(final Sentinel card) {
public Sentinel copy() {return new Sentinel(this);
class SentinelEffect extends OneShotEffect {
public SentinelEffect() {
public SentinelEffect(final SentinelEffect effect) {
public SentinelEffect copy() {return new SentinelEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShieldWall extends CardImpl {
public ShieldWall(UUID ownerId) {
public ShieldWall(final ShieldWall card) {
public ShieldWall copy() {return new ShieldWall(this);
public class SirShandlarOfEberyn extends CardImpl {
public SirShandlarOfEberyn(UUID ownerId) {
public SirShandlarOfEberyn(final SirShandlarOfEberyn card) {
public SirShandlarOfEberyn copy() {return new SirShandlarOfEberyn(this);
public class SivitriScarzam extends CardImpl {
public SivitriScarzam(UUID ownerId) {
public SivitriScarzam(final SivitriScarzam card) {
public SivitriScarzam copy() {return new SivitriScarzam(this);
public class SpinalVillain extends CardImpl {
public SpinalVillain(UUID ownerId) {
public SpinalVillain(final SpinalVillain card) {
public SpinalVillain copy() {return new SpinalVillain(this);
public class SunastianFalconer extends CardImpl {
public SunastianFalconer(UUID ownerId) {
public SunastianFalconer(final SunastianFalconer card) {
public SunastianFalconer copy() {return new SunastianFalconer(this);
public class TetsuoUmezawa extends CardImpl {
public TetsuoUmezawa(UUID ownerId) {
public TetsuoUmezawa(final TetsuoUmezawa card) {
public TetsuoUmezawa copy() {return new TetsuoUmezawa(this);
public TetsuoUmezawaEffect() {
public TetsuoUmezawaEffect(final TetsuoUmezawaEffect effect) {
public TetsuoUmezawaEffect copy() {return new TetsuoUmezawaEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TARGET;
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return sourcePermanent.getLogName() + " can't be the target of Aura spells";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class TheAbyss extends CardImpl {
public TheAbyss(UUID ownerId) {
public TheAbyss(final TheAbyss card) {
public TheAbyss copy() {return new TheAbyss(this);
class TheAbyssTriggeredAbility extends TriggeredAbilityImpl {
TheAbyssTriggeredAbility() {
TheAbyssTriggeredAbility(final TheAbyssTriggeredAbility ability) {
public TheAbyssTriggeredAbility copy() {return new TheAbyssTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of each player's upkeep, destroy target nonartifact creature that player controls of his or her choice. It can't be regenerated.";
public class TheLadyOfTheMountain extends CardImpl {
public TheLadyOfTheMountain(UUID ownerId) {
public TheLadyOfTheMountain(final TheLadyOfTheMountain card) {
public TheLadyOfTheMountain copy() {return new TheLadyOfTheMountain(this);
public class TheTabernacleAtPendrellVale extends CardImpl {
public TheTabernacleAtPendrellVale(UUID ownerId) {
public TheTabernacleAtPendrellVale(final TheTabernacleAtPendrellVale card) {
public TheTabernacleAtPendrellVale copy() {return new TheTabernacleAtPendrellVale(this);
class DestroySourceUnlessPaysEffect extends OneShotEffect {
public DestroySourceUnlessPaysEffect(Cost cost) {
public DestroySourceUnlessPaysEffect(final DestroySourceUnlessPaysEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public DestroySourceUnlessPaysEffect copy() {return new DestroySourceUnlessPaysEffect(this);
public String getText(Mode mode) {return "destroy this creature unless you pay {1}";
public class ThunderSpirit extends CardImpl {
public ThunderSpirit(UUID ownerId) {
public ThunderSpirit(final ThunderSpirit card) {
public ThunderSpirit copy() {return new ThunderSpirit(this);
public class TobiasAndrion extends CardImpl {
public TobiasAndrion(UUID ownerId) {
public TobiasAndrion(final TobiasAndrion card) {
public TobiasAndrion copy() {return new TobiasAndrion(this);
public class TorstenVonUrsus extends CardImpl {
public TorstenVonUrsus(UUID ownerId) {
public TorstenVonUrsus(final TorstenVonUrsus card) {
public TorstenVonUrsus copy() {return new TorstenVonUrsus(this);
public class TorWauki extends CardImpl {
public TorWauki(UUID ownerId) {
public TorWauki(final TorWauki card) {
public TorWauki copy() {return new TorWauki(this);
public class Urborg extends CardImpl {
public Urborg(UUID ownerId) {
public Urborg(final Urborg card) {
public Urborg copy() {return new Urborg(this);
public class WallOfEarth extends CardImpl {
public WallOfEarth(UUID ownerId) {
public WallOfEarth(final WallOfEarth card) {
public WallOfEarth copy() {return new WallOfEarth(this);
public class WallOfHeat extends CardImpl {
public WallOfHeat(UUID ownerId) {
public WallOfHeat(final WallOfHeat card) {
public WallOfHeat copy() {return new WallOfHeat(this);
public class WillowSatyr extends CardImpl {
public WillowSatyr(UUID ownerId) {
public WillowSatyr(final WillowSatyr card) {
public WillowSatyr copy() {return new WillowSatyr(this);
public class WolverinePack extends CardImpl {
public WolverinePack(UUID ownerId) {
public WolverinePack(final WolverinePack card) {
public WolverinePack copy() {return new WolverinePack(this);
public class XiraArien extends CardImpl {
public XiraArien(UUID ownerId) {
public XiraArien(final XiraArien card) {
public XiraArien copy() {return new XiraArien(this);
public class AkromasDevoted extends CardImpl {
public AkromasDevoted(UUID ownerId) {
public AkromasDevoted(final AkromasDevoted card) {
public AkromasDevoted copy() {return new AkromasDevoted(this);
public class AvenEnvoy extends CardImpl {
public AvenEnvoy(UUID ownerId) {
public AvenEnvoy(final AvenEnvoy card) {
public AvenEnvoy copy() {return new AvenEnvoy(this);
public class AvenRedeemer extends CardImpl {
public AvenRedeemer(UUID ownerId) {
public AvenRedeemer(final AvenRedeemer card) {
public AvenRedeemer copy() {return new AvenRedeemer(this);
public class AvenWarhawk extends CardImpl {
public AvenWarhawk(UUID ownerId) {
public AvenWarhawk(final AvenWarhawk card) {
public AvenWarhawk copy() {return new AvenWarhawk(this);
public class BaneOfTheLiving extends CardImpl {
public BaneOfTheLiving(UUID ownerId) {
public BaneOfTheLiving(final BaneOfTheLiving card) {
public BaneOfTheLiving copy() {return new BaneOfTheLiving(this);return new BerserkMurlodont(this);
public class BladeSliver extends CardImpl {
public BladeSliver(UUID ownerId) {
public BladeSliver(final BladeSliver card) {
public BladeSliver copy() {return new BladeSliver(this);
public class BloodCelebrant extends CardImpl {
public BloodCelebrant(UUID ownerId) {
public BloodCelebrant(final BloodCelebrant card) {
public BloodCelebrant copy() {return new BloodCelebrant(this);
public class BranchsnapLorian extends CardImpl {
public BranchsnapLorian(UUID ownerId) {
public BranchsnapLorian(final BranchsnapLorian card) {
public BranchsnapLorian copy() {return new BranchsnapLorian(this);
public class Brontotherium extends CardImpl {
public Brontotherium(UUID ownerId) {
public Brontotherium(final Brontotherium card) {
public Brontotherium copy() {return new Brontotherium(this);
public class BroodSliver extends CardImpl {
public BroodSliver(UUID ownerId) {
public BroodSliver(final BroodSliver card) {
public BroodSliver copy() {return new BroodSliver(this);
public class CallerOfTheClaw extends CardImpl {
public CallerOfTheClaw(UUID ownerId) {
public CallerOfTheClaw(final CallerOfTheClaw card) {
public CallerOfTheClaw copy() {return new CallerOfTheClaw(this);
class CallerOfTheClawWatcher extends Watcher {
public CallerOfTheClawWatcher() {
public CallerOfTheClawWatcher(final CallerOfTheClawWatcher watcher) {
public CallerOfTheClawWatcher copy() {return new CallerOfTheClawWatcher(this);
public int getCreaturesCount() {return creaturesCount;
public void watch(GameEvent event, Game game) {
public void reset() {
class CallerOfTheClawDynamicValue implements DynamicValue {
public CallerOfTheClawDynamicValue copy() {return new CallerOfTheClawDynamicValue();
public String toString() {return "1";
public String getMessage() {return "nontoken creature put into your graveyard from the battlefield this turn";
public int calculate(Game game, Ability sourceAbility, Effect effect) {return watcher.getCreaturesCount();return 0;
public class CovertOperative extends CardImpl {
public CovertOperative(UUID ownerId) {
public CovertOperative(final CovertOperative card) {
public CovertOperative copy() {return new CovertOperative(this);
public class CrestedCraghorn extends CardImpl {
public CrestedCraghorn(UUID ownerId) {
public CrestedCraghorn(final CrestedCraghorn card) {
public CrestedCraghorn copy() {return new CrestedCraghorn(this);
public class CryptSliver extends CardImpl {
public CryptSliver(UUID ownerId) {
public CryptSliver(final CryptSliver card) {
public CryptSliver copy() {return new CryptSliver(this);
public class DarkSupplicant extends CardImpl {
public DarkSupplicant(UUID ownerId) {
public DarkSupplicant(final DarkSupplicant card) {
public DarkSupplicant copy() {return new DarkSupplicant(this);
class DarkSupplicantEffect extends OneShotEffect {
public DarkSupplicantEffect() {
public DarkSupplicantEffect(final DarkSupplicantEffect effect) {
public DarkSupplicantEffect copy() {return new DarkSupplicantEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;return true;return false;
public class DaruMender extends CardImpl {
public DaruMender(UUID ownerId) {
public DaruMender(final DaruMender card) {
public DaruMender copy() {return new DaruMender(this);return new DaruSanctifier(this);
public class DaruStinger extends CardImpl {
public DaruStinger(UUID ownerId) {
public DaruStinger(final DaruStinger card) {
public DaruStinger copy() {return new DaruStinger(this);
public class DefenderOfTheOrder extends CardImpl {
public DefenderOfTheOrder(UUID ownerId) {
public DefenderOfTheOrder(final DefenderOfTheOrder card) {
public DefenderOfTheOrder copy() {return new DefenderOfTheOrder(this);
public class DefiantElf extends CardImpl {
public DefiantElf(UUID ownerId) {
public DefiantElf(final DefiantElf card) {
public DefiantElf copy() {return new DefiantElf(this);
public class DreambornMuse extends CardImpl {
public DreambornMuse(UUID ownerId) {
public DreambornMuse(final DreambornMuse card) {
public DreambornMuse copy() {return new DreambornMuse(this);
public class Earthblighter extends CardImpl {
public Earthblighter(UUID ownerId) {
public Earthblighter(final Earthblighter card) {
public Earthblighter copy() {return new Earthblighter(this);
public class ElvishSoultiller extends CardImpl {
public ElvishSoultiller(UUID ownerId) {
public ElvishSoultiller(final ElvishSoultiller card) {
public ElvishSoultiller copy() {return new ElvishSoultiller(this);
class ElvishSoultillerEffect extends OneShotEffect {
public ElvishSoultillerEffect() {
public ElvishSoultillerEffect(final ElvishSoultillerEffect effect) {
public ElvishSoultillerEffect copy() {return new ElvishSoultillerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class EmbalmedBrawler extends CardImpl {
public EmbalmedBrawler(UUID ownerId) {
public EmbalmedBrawler(final EmbalmedBrawler card) {
public EmbalmedBrawler copy() {return new EmbalmedBrawler(this);
public class GempalmAvenger extends CardImpl {
public GempalmAvenger(UUID ownerId) {
public GempalmAvenger(final GempalmAvenger card) {
public GempalmAvenger copy() {return new GempalmAvenger(this);
public class GempalmIncinerator extends CardImpl {
public GempalmIncinerator(UUID ownerId) {
public GempalmIncinerator(final GempalmIncinerator card) {
public GempalmIncinerator copy() {return new GempalmIncinerator(this);
public class GempalmPolluter extends CardImpl {
public GempalmPolluter(UUID ownerId) {
public GempalmPolluter(final GempalmPolluter card) {
public GempalmPolluter copy() {return new GempalmPolluter(this);
public class GlintwingInvoker extends CardImpl {
public GlintwingInvoker(UUID ownerId) {
public GlintwingInvoker(final GlintwingInvoker card) {
public GlintwingInvoker copy() {return new GlintwingInvoker(this);
public class GloweringRogon extends CardImpl {
public GloweringRogon(UUID ownerId) {
public GloweringRogon(final GloweringRogon card) {
public GloweringRogon copy() {return new GloweringRogon(this);
public class GoblinClearcutter extends CardImpl {
public GoblinClearcutter(UUID ownerId) {
public GoblinClearcutter(final GoblinClearcutter card) {
public GoblinClearcutter copy() {return new GoblinClearcutter(this);
class GoblinClearCutterEffect extends OneShotEffect {
public GoblinClearCutterEffect() {
public GoblinClearCutterEffect(final GoblinClearCutterEffect effect) {
public GoblinClearCutterEffect copy() {return new GoblinClearCutterEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class GoblinDynamo extends CardImpl {
public GoblinDynamo(UUID ownerId) {
public GoblinDynamo(final GoblinDynamo card) {
public GoblinDynamo copy() {return new GoblinDynamo(this);
public class GoblinFirebug extends CardImpl {
public GoblinFirebug(UUID ownerId) {
public GoblinFirebug(final GoblinFirebug card) {
public GoblinFirebug copy() {return new GoblinFirebug(this);
public class GoblinGoon extends CardImpl {
public GoblinGoon(UUID ownerId) {
public GoblinGoon(final GoblinGoon card) {
public GoblinGoon copy() {return new GoblinGoon(this);
class GoblinGoonCantAttackEffect extends RestrictionEffect {
GoblinGoonCantAttackEffect() {
GoblinGoonCantAttackEffect(final GoblinGoonCantAttackEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getId().equals(source.getSourceId());
public boolean canAttack(UUID defenderId, Ability source, Game game) {return false;return game.getBattlefield().countAll(new FilterControlledCreaturePermanent(), source.getControllerId(), game) > game.getBattlefield().countAll(new FilterControlledCreaturePermanent(), defendingPlayerId, game);return true;
public GoblinGoonCantAttackEffect copy() {return new GoblinGoonCantAttackEffect(this);
class GoblinGoonCantBlockEffect extends RestrictionEffect {
GoblinGoonCantBlockEffect() {
GoblinGoonCantBlockEffect(final GoblinGoonCantBlockEffect effect) {
public GoblinGoonCantBlockEffect copy() {return new GoblinGoonCantBlockEffect(this);
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return game.getBattlefield().countAll(new FilterControlledCreaturePermanent(), source.getControllerId(), game) > game.getBattlefield().countAll(new FilterControlledCreaturePermanent(), attackingPlayerId, game);return true;
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getId().equals(source.getSourceId());
public class GoblinGrappler extends CardImpl {
public GoblinGrappler(UUID ownerId) {
public GoblinGrappler(final GoblinGrappler card) {
public GoblinGrappler copy() {return new GoblinGrappler(this);
public class GoblinLookout extends CardImpl {
public GoblinLookout(UUID ownerId) {
public GoblinLookout(final GoblinLookout card) {
public GoblinLookout copy() {return new GoblinLookout(this);
public class GoblinTurncoat extends CardImpl {
public GoblinTurncoat(UUID ownerId) {
public GoblinTurncoat(final GoblinTurncoat card) {
public GoblinTurncoat copy() {return new GoblinTurncoat(this);
public class HavocDemon extends CardImpl {
public HavocDemon(UUID ownerId) {
public HavocDemon(final HavocDemon card) {
public HavocDemon copy() {return new HavocDemon(this);
public class Hundroog extends CardImpl {
public Hundroog(UUID ownerId) {
public Hundroog(final Hundroog card) {
public Hundroog copy() {return new Hundroog(this);
public class HunterSliver extends CardImpl {
public HunterSliver(UUID ownerId) {
public HunterSliver(final HunterSliver card) {
public HunterSliver copy() {return new HunterSliver(this);
class ProvokeEffect extends RequirementEffect {
public ProvokeEffect() {
public ProvokeEffect(Duration duration) {
public ProvokeEffect(final ProvokeEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean mustAttack(Game game) {return false;
public boolean mustBlock(Game game) {return true;
public UUID mustBlockAttacker(Ability source, Game game) {return source.getSourceId();
public ProvokeEffect copy() {return new ProvokeEffect(this);
public class KeeneyeAven extends CardImpl {
public KeeneyeAven(UUID ownerId) {
public KeeneyeAven(final KeeneyeAven card) {
public KeeneyeAven copy() {return new KeeneyeAven(this);
public class KeeperOfTheNineGales extends CardImpl {
public KeeperOfTheNineGales(UUID ownerId) {
public KeeperOfTheNineGales(final KeeperOfTheNineGales card) {
public KeeperOfTheNineGales copy() {return new KeeperOfTheNineGales(this);
public class LiegeOfTheAxe extends CardImpl {
public LiegeOfTheAxe(UUID ownerId) {
public LiegeOfTheAxe(final LiegeOfTheAxe card) {
public LiegeOfTheAxe copy() {return new LiegeOfTheAxe(this);
public class LowlandTracker extends CardImpl {
public LowlandTracker(UUID ownerId) {
public LowlandTracker(final LowlandTracker card) {
public LowlandTracker copy() {return new LowlandTracker(this);return new MacetailHystrodon(this);
public class MagmaSliver extends CardImpl {
public MagmaSliver(UUID ownerId) {
public MagmaSliver(final MagmaSliver card) {
public MagmaSliver copy() {return new MagmaSliver(this);
public class MerchantOfSecrets extends CardImpl {
public MerchantOfSecrets(UUID ownerId) {
public MerchantOfSecrets(final MerchantOfSecrets card) {
public MerchantOfSecrets copy() {return new MerchantOfSecrets(this);return new MistformSliver(this);
public boolean apply(Game game, Ability source) {return false;return false;return new MistformSliverEffect(this);
public class PatronOfTheWild extends CardImpl {
public PatronOfTheWild(UUID ownerId) {
public PatronOfTheWild(final PatronOfTheWild card) {
public PatronOfTheWild copy() {return new PatronOfTheWild(this);
public class PlatedSliver extends CardImpl {
public PlatedSliver(UUID ownerId) {
public PlatedSliver(final PlatedSliver card) {
public PlatedSliver copy() {return new PlatedSliver(this);
public class PrimalWhisperer extends CardImpl {
public PrimalWhisperer(UUID ownerId) {
public PrimalWhisperer(final PrimalWhisperer card) {
public PrimalWhisperer copy() {return new PrimalWhisperer(this);
public class PrimocEscapee extends CardImpl {
public PrimocEscapee(UUID ownerId) {
public PrimocEscapee(final PrimocEscapee card) {
public PrimocEscapee copy() {return new PrimocEscapee(this);
public class QuickSliver extends CardImpl {
public QuickSliver(UUID ownerId) {
public QuickSliver(final QuickSliver card) {
public QuickSliver copy() {return new QuickSliver(this);
public class RidgetopRaptor extends CardImpl {
public RidgetopRaptor(UUID ownerId) {
public RidgetopRaptor(final RidgetopRaptor card) {
public RidgetopRaptor copy() {return new RidgetopRaptor(this);
public class RiptideDirector extends CardImpl {
public RiptideDirector(UUID ownerId) {
public RiptideDirector(final RiptideDirector card) {
public RiptideDirector copy() {return new RiptideDirector(this);
public class RockshardElemental extends CardImpl {
public RockshardElemental(UUID ownerId) {
public RockshardElemental(final RockshardElemental card) {
public RockshardElemental copy() {return new RockshardElemental(this);
public class RootSliver extends CardImpl {
public RootSliver(UUID ownerId) {
public RootSliver(final RootSliver card) {
public RootSliver copy() {return new RootSliver(this);
public class ScionOfDarkness extends CardImpl {
public ScionOfDarkness(UUID ownerId) {
public ScionOfDarkness(final ScionOfDarkness card) {
public ScionOfDarkness copy() {return new ScionOfDarkness(this);
class ScionOfDarknessEffect extends OneShotEffect {
public ScionOfDarknessEffect() {
public ScionOfDarknessEffect(final ScionOfDarknessEffect effect) {
public ScionOfDarknessEffect copy() {return new ScionOfDarknessEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShaleskinPlower extends CardImpl {
public ShaleskinPlower(UUID ownerId) {
public ShaleskinPlower(final ShaleskinPlower card) {
public ShaleskinPlower copy() {return new ShaleskinPlower(this);return new ShiftingSliver(this);
public class Skinthinner extends CardImpl {
public Skinthinner(UUID ownerId) {
public Skinthinner(final Skinthinner card) {
public Skinthinner copy() {return new Skinthinner(this);
public class SkirkMarauder extends CardImpl {
public SkirkMarauder(UUID ownerId) {
public SkirkMarauder(final SkirkMarauder card) {
public SkirkMarauder copy() {return new SkirkMarauder(this);
public class SmokespewInvoker extends CardImpl {
public SmokespewInvoker(UUID ownerId) {
public SmokespewInvoker(final SmokespewInvoker card) {
public SmokespewInvoker copy() {return new SmokespewInvoker(this);
public class SootfeatherFlock extends CardImpl {
public SootfeatherFlock(UUID ownerId) {
public SootfeatherFlock(final SootfeatherFlock card) {
public SootfeatherFlock copy() {return new SootfeatherFlock(this);
public class SpectralSliver extends CardImpl {
public SpectralSliver(UUID ownerId) {
public SpectralSliver(final SpectralSliver card) {
public SpectralSliver copy() {return new SpectralSliver(this);
public class SunstrikeLegionnaire extends CardImpl {
public SunstrikeLegionnaire(UUID ownerId) {
public SunstrikeLegionnaire(final SunstrikeLegionnaire card) {
public SunstrikeLegionnaire copy() {return new SunstrikeLegionnaire(this);
public class ToxinSliver extends CardImpl {
public ToxinSliver(UUID ownerId) {
public ToxinSliver(final ToxinSliver card) {
public ToxinSliver copy() {return new ToxinSliver(this);
class DealsDamageTriggeredAbility extends TriggeredAbilityImpl {
public DealsDamageTriggeredAbility(Effect effect, boolean optional, boolean setTargetPointer) {
public DealsDamageTriggeredAbility(final DealsDamageTriggeredAbility ability) {
public DealsDamageTriggeredAbility copy() {return new DealsDamageTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Sliver deals damage to a creature" + super.getRule();
public class UnstableHulk extends CardImpl {
public UnstableHulk(UUID ownerId) {
public UnstableHulk(final UnstableHulk card) {
public UnstableHulk copy() {return new UnstableHulk(this);
public class VileDeacon extends CardImpl {
public VileDeacon(UUID ownerId) {
public VileDeacon(final VileDeacon card) {
public VileDeacon copy() {return new VileDeacon(this);
public class WallOfHope extends CardImpl {
public WallOfHope(UUID ownerId) {
public WallOfHope(final WallOfHope card) {
public WallOfHope copy() {return new WallOfHope(this);
class WallOfHopeTriggeredAbility extends TriggeredAbilityImpl {
public WallOfHopeTriggeredAbility() {
public WallOfHopeTriggeredAbility(final WallOfHopeTriggeredAbility effect) {
public WallOfHopeTriggeredAbility copy() {return new WallOfHopeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt damage, " + super.getRule();return new WallOfHopeGainLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class WarbreakTrumpeter extends CardImpl {
public WarbreakTrumpeter(UUID ownerId) {
public WarbreakTrumpeter(final WarbreakTrumpeter card) {
public WarbreakTrumpeter copy() {return new WarbreakTrumpeter(this);
public class WardSliver extends CardImpl {
public WardSliver(UUID ownerId) {
public WardSliver(final WardSliver card) {
public WardSliver copy() {return new WardSliver(this);
class WardSliverGainAbilityControlledEffect extends ContinuousEffectImpl {
public WardSliverGainAbilityControlledEffect() {
public WardSliverGainAbilityControlledEffect(final WardSliverGainAbilityControlledEffect effect) {
public WardSliverGainAbilityControlledEffect copy() {return new WardSliverGainAbilityControlledEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WingbeatWarrior extends CardImpl {
public WingbeatWarrior(UUID ownerId) {
public WingbeatWarrior(final WingbeatWarrior card) {
public WingbeatWarrior copy() {return new WingbeatWarrior(this);
public class WirewoodChanneler extends CardImpl {
public WirewoodChanneler(UUID ownerId) {
public WirewoodChanneler(final WirewoodChanneler card) {
public WirewoodChanneler copy() {return new WirewoodChanneler(this);
public class WirewoodHivemaster extends CardImpl {
public WirewoodHivemaster(UUID ownerId) {
public WirewoodHivemaster(final WirewoodHivemaster card) {
public WirewoodHivemaster copy() {return new WirewoodHivemaster(this);
public class ZombieBrute extends CardImpl {
public ZombieBrute(UUID ownerId) {
public ZombieBrute(final ZombieBrute card) {
public ZombieBrute copy() {return new ZombieBrute(this);
public class AncestralRecall extends CardImpl {
public AncestralRecall(UUID ownerId) {
public AncestralRecall(final AncestralRecall card) {
public AncestralRecall copy() {return new AncestralRecall(this);
public class AnimateDead extends CardImpl {
public AnimateDead(UUID ownerId) {
public AnimateDead(final AnimateDead card) {
public AnimateDead copy() {return new AnimateDead(this);
class AnimateDeadReAttachEffect extends OneShotEffect {
public AnimateDeadReAttachEffect() {
public AnimateDeadReAttachEffect(final AnimateDeadReAttachEffect effect) {
public AnimateDeadReAttachEffect copy() {return new AnimateDeadReAttachEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
class AnimateDeadLeavesBattlefieldTriggeredEffect extends OneShotEffect {
public AnimateDeadLeavesBattlefieldTriggeredEffect() {
public AnimateDeadLeavesBattlefieldTriggeredEffect(final AnimateDeadLeavesBattlefieldTriggeredEffect effect) {
public AnimateDeadLeavesBattlefieldTriggeredEffect copy() {return new AnimateDeadLeavesBattlefieldTriggeredEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AnimateDeadAttachEffect extends OneShotEffect {
public AnimateDeadAttachEffect(Outcome outcome) {
public AnimateDeadAttachEffect(Outcome outcome, String rule) {
public AnimateDeadAttachEffect(final AnimateDeadAttachEffect effect) {
public AnimateDeadAttachEffect copy() {return new AnimateDeadAttachEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AnimateDeadChangeAbilityEffect extends ContinuousEffectImpl implements SourceEffect {
public AnimateDeadChangeAbilityEffect() {
public AnimateDeadChangeAbilityEffect(final AnimateDeadChangeAbilityEffect effect) {
public AnimateDeadChangeAbilityEffect copy() {return new AnimateDeadChangeAbilityEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;return false;
public class AnimateWall extends CardImpl {
public AnimateWall(UUID ownerId) {
public AnimateWall(final AnimateWall card) {
public AnimateWall copy() {return new AnimateWall(this);
public class AnkhOfMishra extends CardImpl {
public AnkhOfMishra(UUID ownerId) {
public AnkhOfMishra(final AnkhOfMishra card) {
public AnkhOfMishra copy() {return new AnkhOfMishra(this);
class AnkhOfMishraAbility extends TriggeredAbilityImpl {
public AnkhOfMishraAbility() {
AnkhOfMishraAbility(final AnkhOfMishraAbility ability) {
public AnkhOfMishraAbility copy() {return new AnkhOfMishraAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a land enters the battlefield, Ankh of Mishra deals 2 damage to that land's controller.";
public class AspectOfWolf extends CardImpl {
public AspectOfWolf(UUID ownerId) {
public AspectOfWolf(final AspectOfWolf card) {
public AspectOfWolf copy() {return new AspectOfWolf(this);
class HalfForestsDownCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amount;
public DynamicValue copy() {return new HalfForestsDownCount();
public String toString() {return "X";
public String getMessage() {return "half the number of Forests you control, rounded down";
class HalfForestsUpCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amount;
public DynamicValue copy() {return new HalfForestsUpCount();
public String toString() {return "Y";
public String getMessage() {return "half the number of Forests you control, rounded up";
public class Badlands extends CardImpl {
public Badlands(UUID ownerId) {
public Badlands(final Badlands card) {
public Badlands copy() {return new Badlands(this);
public class BasaltMonolith extends CardImpl {
public BasaltMonolith(UUID ownerId) {
public BasaltMonolith(final BasaltMonolith card) {
public BasaltMonolith copy() {return new BasaltMonolith(this);
public class Bayou extends CardImpl {
public Bayou(UUID ownerId) {
public Bayou(final Bayou card) {
public Bayou copy() {return new Bayou(this);
public class BlackVise extends CardImpl {
public BlackVise(UUID ownerId) {
public BlackVise(final BlackVise card) {
public BlackVise copy() {return new BlackVise(this);
class BlackViseTriggeredAbility extends TriggeredAbilityImpl {
public BlackViseTriggeredAbility() {
public BlackViseTriggeredAbility(final BlackViseTriggeredAbility ability) {
public BlackViseTriggeredAbility copy() {return new BlackViseTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(game.getState().getValue(getSourceId().toString() + ChooseOpponentEffect.VALUE_KEY));
public String getRule() {return "At the beginning of the chosen player's upkeep, " + super.getRule();
class BlackViseEffect extends OneShotEffect {
public BlackViseEffect() {
public BlackViseEffect(final BlackViseEffect effect) {
public BlackViseEffect copy() {return new BlackViseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BlueElementalBlast extends CardImpl {
public BlueElementalBlast(UUID ownerId) {
public BlueElementalBlast(final BlueElementalBlast card) {
public BlueElementalBlast copy() {return new BlueElementalBlast(this);
public class Braingeyser extends CardImpl {
public Braingeyser(UUID ownerId) {
public Braingeyser(final Braingeyser card) {
public Braingeyser copy() {return new Braingeyser(this);
public class Burrowing extends CardImpl {
public Burrowing(UUID ownerId) {
public Burrowing(final Burrowing card) {
public Burrowing copy() {return new Burrowing(this);
class BurrowingEffect extends ContinuousEffectImpl {
public BurrowingEffect() {
public BurrowingEffect(final BurrowingEffect effect) {
public BurrowingEffect copy() {return new BurrowingEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6;
public class Castle extends CardImpl {
public Castle(UUID ownerId) {
public Castle(final Castle card) {
public Castle copy() {return new Castle(this);
public class CelestialPrism extends CardImpl {
public CelestialPrism(UUID ownerId) {
public CelestialPrism(final CelestialPrism card) {
public CelestialPrism copy() {return new CelestialPrism(this);
public class Cockatrice extends CardImpl {
public Cockatrice(UUID ownerId) {
public Cockatrice(final Cockatrice card) {
public Cockatrice copy() {return new Cockatrice(this);
public class Conservator extends CardImpl {
public Conservator(UUID ownerId) {
public Conservator(final Conservator card) {
public Conservator copy() {return new Conservator(this);
class ConservatorEffect extends PreventionEffectImpl {
public ConservatorEffect() {
public ConservatorEffect(final ConservatorEffect effect) {
public ConservatorEffect copy() {return new ConservatorEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class ControlMagic extends CardImpl {
public ControlMagic(UUID ownerId) {
public ControlMagic(final ControlMagic card) {
public ControlMagic copy() {return new ControlMagic(this);
public class Conversion extends CardImpl {
public Conversion(UUID ownerId) {
public Conversion(final Conversion card) {
public Conversion copy() {return new Conversion(this);
class ConversionEffect extends ContinuousEffectImpl {
ConversionEffect() {
ConversionEffect(final ConversionEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public ConversionEffect copy() {return new ConversionEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public Set<UUID> isDependentTo(List<ContinuousEffect> allEffectsInLayer) {return dependentTo;
public class CopperTablet extends CardImpl {
public CopperTablet(UUID ownerId) {
public CopperTablet(final CopperTablet card) {
public CopperTablet copy() {return new CopperTablet(this);return new CopyArtifact(this);
public class CrystalRod extends CardImpl {
public CrystalRod(UUID ownerId) {
public CrystalRod(final CrystalRod card) {
public CrystalRod copy() {return new CrystalRod(this);
class CrystalRodAbility extends TriggeredAbilityImpl {
public CrystalRodAbility() {
public CrystalRodAbility(final CrystalRodAbility ability) {
public CrystalRodAbility copy() {return new CrystalRodAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).contains(ObjectColor.BLUE);
public String getRule() {return "Whenever a player casts a blue spell, you may pay {1}. If you do, you gain 1 life.";
public class DeathWard extends CardImpl {
public DeathWard(UUID ownerId) {
public DeathWard(final DeathWard card) {
public DeathWard copy() {return new DeathWard(this);
public class DemonicHordes extends CardImpl {
public DemonicHordes(UUID ownerId) {
public DemonicHordes(final DemonicHordes card) {
public DemonicHordes copy() {return new DemonicHordes(this);
class DemonicHordesEffect extends OneShotEffect {
public DemonicHordesEffect(Cost cost) {
public DemonicHordesEffect(final DemonicHordesEffect effect) {
public boolean apply(Game game, Ability source) {if (!sb.toString().toLowerCase().startsWith("exile ") && !sb.toString().toLowerCase().startsWith("return ")) {return true;return true;return false;
public DemonicHordesEffect copy() {return new DemonicHordesEffect(this);
public class DemonicTutor extends CardImpl {
public DemonicTutor(UUID ownerId) {
public DemonicTutor(final DemonicTutor card) {
public DemonicTutor copy() {return new DemonicTutor(this);
public class DingusEgg extends CardImpl {
public DingusEgg(UUID ownerId) {
public DingusEgg(final DingusEgg card) {
public DingusEgg copy() {return new DingusEgg(this);
class DingusEggTriggeredAbility extends TriggeredAbilityImpl {
public DingusEggTriggeredAbility() {
public DingusEggTriggeredAbility(final DingusEggTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a land is put into a graveyard from the battlefield, {this} deals 2 damage to that land's controller";
public DingusEggTriggeredAbility copy() {return new DingusEggTriggeredAbility(this);
public class Disintegrate extends CardImpl {
public Disintegrate(UUID ownerId) {
public Disintegrate(final Disintegrate card) {
public Disintegrate copy() {return new Disintegrate(this);
public class Feedback extends CardImpl {
public Feedback(UUID ownerId) {
public Feedback(final Feedback card) {
public Feedback copy() {return new Feedback(this);
public class FrozenShade extends CardImpl {
public FrozenShade(UUID ownerId) {
public FrozenShade(final FrozenShade card) {
public FrozenShade copy() {return new FrozenShade(this);
public class Fungusaur extends CardImpl {
public Fungusaur(UUID ownerId) {
public Fungusaur(final Fungusaur card) {
public Fungusaur copy() {return new Fungusaur(this);
public class GauntletOfMight extends CardImpl {
public GauntletOfMight(UUID ownerId) {
public GauntletOfMight(final GauntletOfMight card) {
public GauntletOfMight copy() {return new GauntletOfMight(this);
public class GlassesOfUrza extends CardImpl {
public GlassesOfUrza(UUID ownerId) {
public GlassesOfUrza(final GlassesOfUrza card) {
public GlassesOfUrza copy() {return new GlassesOfUrza(this);
public class HowlFromBeyond extends CardImpl {
public HowlFromBeyond(UUID ownerId) {
public HowlFromBeyond(final HowlFromBeyond card) {
public HowlFromBeyond copy() {return new HowlFromBeyond(this);
public class Hurricane extends CardImpl {
public Hurricane(UUID ownerId) {
public Hurricane(final Hurricane card) {
public Hurricane copy() {return new Hurricane(this);
public class IceStorm extends CardImpl {
public IceStorm(UUID ownerId) {
public IceStorm(final IceStorm card) {
public IceStorm copy() {return new IceStorm(this);
public class Invisibility extends CardImpl {
public Invisibility(UUID ownerId) {
public Invisibility(final Invisibility card) {
public Invisibility copy() {return new Invisibility(this);
class CantBeBlockedByWallsEffect extends RestrictionEffect {
public CantBeBlockedByWallsEffect() {
public CantBeBlockedByWallsEffect(final CantBeBlockedByWallsEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return true;
public CantBeBlockedByWallsEffect copy() {return new CantBeBlockedByWallsEffect(this);
public class IronclawOrcs extends CardImpl {
public IronclawOrcs(UUID ownerId) {
public IronclawOrcs(final IronclawOrcs card) {
public IronclawOrcs copy() {return new IronclawOrcs(this);
public class IronStar extends CardImpl {
public IronStar(UUID ownerId) {
public IronStar(final IronStar card) {
public IronStar copy() {return new IronStar(this);
class IronStarAbility extends TriggeredAbilityImpl {
public IronStarAbility() {
public IronStarAbility(final IronStarAbility ability) {
public IronStarAbility copy() {return new IronStarAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).contains(ObjectColor.RED);
public String getRule() {return "Whenever a player casts a red spell, you may pay {1}. If you do, you gain 1 life.";
public class IslandSanctuary extends CardImpl {
public IslandSanctuary(UUID ownerId) {
public IslandSanctuary(final IslandSanctuary card) {
public IslandSanctuary copy() {return new IslandSanctuary(this);
class IslandSanctuaryEffect extends ReplacementEffectImpl {
IslandSanctuaryEffect() {
IslandSanctuaryEffect(final IslandSanctuaryEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return source.getControllerId().equals(event.getPlayerId()) && game.getTurn().getStepType().equals(PhaseStep.DRAW);
public boolean apply(Game game, Ability source) {return false;
public IslandSanctuaryEffect copy() {return new IslandSanctuaryEffect(this);
public class IvoryCup extends CardImpl {
public IvoryCup(UUID ownerId) {
public IvoryCup(final IvoryCup card) {
public IvoryCup copy() {return new IvoryCup(this);
class IvoryCupAbility extends TriggeredAbilityImpl {
public IvoryCupAbility() {
public IvoryCupAbility(final IvoryCupAbility ability) {
public IvoryCupAbility copy() {return new IvoryCupAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).contains(ObjectColor.WHITE);
public String getRule() {return "Whenever a player casts a white spell, you may pay {1}. If you do, you gain 1 life.";
public class JadeMonolith extends CardImpl {
public JadeMonolith(UUID ownerId) {
public JadeMonolith(final JadeMonolith card) {
public JadeMonolith copy() {return new JadeMonolith(this);
class JadeMonolithRedirectionEffect extends ReplacementEffectImpl {
public JadeMonolithRedirectionEffect() {
public JadeMonolithRedirectionEffect(final JadeMonolithRedirectionEffect effect) {
public JadeMonolithRedirectionEffect copy() {return new JadeMonolithRedirectionEffect(this);
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {
public class KormusBell extends CardImpl {
public KormusBell(UUID ownerId) {
public KormusBell(final KormusBell card) {
public KormusBell copy() {return new KormusBell(this);
class KormusBellToken extends Token {
public KormusBellToken() {
public class Lance extends CardImpl {
public Lance(UUID ownerId) {
public Lance(final Lance card) {
public Lance copy() {return new Lance(this);
public class LeyDruid extends CardImpl {
public LeyDruid(UUID ownerId) {
public LeyDruid(final LeyDruid card) {
public LeyDruid copy() {return new LeyDruid(this);return new Lifelace(this);
public class ManaVault extends CardImpl {
public ManaVault(UUID ownerId) {
public ManaVault(final ManaVault card) {
public ManaVault copy() {return new ManaVault(this);
public class Meekstone extends CardImpl {
public Meekstone(UUID ownerId) {
public Meekstone(final Meekstone card) {
public Meekstone copy() {return new Meekstone(this);
public class MindTwist extends CardImpl {
public MindTwist(UUID ownerId) {
public MindTwist(final MindTwist card) {
public MindTwist copy() {return new MindTwist(this);
public class MoxEmerald extends CardImpl {
public MoxEmerald(UUID ownerId) {
public MoxEmerald(final MoxEmerald card) {
public MoxEmerald copy() {return new MoxEmerald(this);
public class MoxJet extends CardImpl {
public MoxJet(UUID ownerId) {
public MoxJet(final MoxJet card) {
public MoxJet copy() {return new MoxJet(this);
public class MoxPearl extends CardImpl {
public MoxPearl(UUID ownerId) {
public MoxPearl(final MoxPearl card) {
public MoxPearl copy() {return new MoxPearl(this);
public class MoxRuby extends CardImpl {
public MoxRuby(UUID ownerId) {
public MoxRuby(final MoxRuby card) {
public MoxRuby copy() {return new MoxRuby(this);
public class MoxSapphire extends CardImpl {
public MoxSapphire(UUID ownerId) {
public MoxSapphire(final MoxSapphire card) {
public MoxSapphire copy() {return new MoxSapphire(this);
public class NaturalSelection extends CardImpl {
public NaturalSelection(UUID ownerId) {
public NaturalSelection(final NaturalSelection card) {
public NaturalSelection copy() {return new NaturalSelection(this);
class NaturalSelectionEffect extends OneShotEffect {
public NaturalSelectionEffect() {
public NaturalSelectionEffect(final NaturalSelectionEffect effect) {
public NaturalSelectionEffect copy() {return new NaturalSelectionEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return new NetherShadow(this);
public boolean checkInterveningIfClause(Game game) {return count >= 3;return false;return new NetherShadowTriggerdAbility(this);
public String getRule() {return "At the beginning of your upkeep, if {source} is in your graveyard with three or more creature cards above it, you may put {source} onto the battlefield.";
public class NorthernPaladin extends CardImpl {
public NorthernPaladin(UUID ownerId) {
public NorthernPaladin(final NorthernPaladin card) {
public NorthernPaladin copy() {return new NorthernPaladin(this);return new OrcishOriflamme(this);
public class Paralyze extends CardImpl {
public Paralyze(UUID ownerId) {
public Paralyze(final Paralyze card) {
public Paralyze copy() {return new Paralyze(this);
class ParalyzeEffect extends DoIfCostPaid {
public ParalyzeEffect() {
public ParalyzeEffect(final ParalyzeEffect effect) {
public ParalyzeEffect copy() {return new ParalyzeEffect(this);
protected Player getPayingPlayer(Game game, Ability source) {return game.getPlayer(attachedTo.getControllerId());
public String getText(Mode mode) {return new StringBuilder("that player may ").append(getCostText())
public class PhantasmalTerrain extends CardImpl {
public PhantasmalTerrain(UUID ownerId) {
public PhantasmalTerrain(final PhantasmalTerrain card) {
public PhantasmalTerrain copy() {return new PhantasmalTerrain(this);
class PhantasmalTerrainContinuousEffect extends ContinuousEffectImpl {
public PhantasmalTerrainContinuousEffect() {
public PhantasmalTerrainContinuousEffect(final PhantasmalTerrainContinuousEffect effect) {
public PhantasmalTerrainContinuousEffect copy() {return new PhantasmalTerrainContinuousEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class PirateShip extends CardImpl {
public PirateShip(UUID ownerId) {
public PirateShip(final PirateShip card) {
public PirateShip copy() {return new PirateShip(this);
public class Plateau extends CardImpl {
public Plateau(UUID ownerId) {
public Plateau(final Plateau card) {
public Plateau copy() {return new Plateau(this);
public class PowerSink extends CardImpl {
public PowerSink(UUID ownerId) {
public PowerSink(final PowerSink card) {
public PowerSink copy() {return new PowerSink(this);
class PowerSinkCounterUnlessPaysEffect extends OneShotEffect {
public PowerSinkCounterUnlessPaysEffect() {
public PowerSinkCounterUnlessPaysEffect(final PowerSinkCounterUnlessPaysEffect effect) {
public PowerSinkCounterUnlessPaysEffect copy() {return new PowerSinkCounterUnlessPaysEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class PsychicVenom extends CardImpl {
public PsychicVenom(UUID ownerId) {
public PsychicVenom(final PsychicVenom card) {
public PsychicVenom copy() {return new PsychicVenom(this);
public class Resurrection extends CardImpl {
public Resurrection(UUID ownerId) {
public Resurrection(final Resurrection card) {
public Resurrection copy() {return new Resurrection(this);
class ResurrectionEffect extends OneShotEffect {
public ResurrectionEffect() {
public ResurrectionEffect(final ResurrectionEffect effect) {
public ResurrectionEffect copy() {return new ResurrectionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ReverseDamage extends CardImpl {
public ReverseDamage(UUID ownerId) {
public ReverseDamage(final ReverseDamage card) {
public ReverseDamage copy() {return new ReverseDamage(this);
class ReverseDamageEffect extends PreventionEffectImpl {
public ReverseDamageEffect() {
public ReverseDamageEffect(final ReverseDamageEffect effect) {
public ReverseDamageEffect copy() {return new ReverseDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {
public class RocOfKherRidges extends CardImpl {
public RocOfKherRidges(UUID ownerId) {
public RocOfKherRidges(final RocOfKherRidges card) {
public RocOfKherRidges copy() {return new RocOfKherRidges(this);
public class Savannah extends CardImpl {
public Savannah(UUID ownerId) {
public Savannah(final Savannah card) {
public Savannah copy() {return new Savannah(this);
public class ScavengingGhoul extends CardImpl {
public ScavengingGhoul(UUID ownerId) {
public ScavengingGhoul(final ScavengingGhoul card) {
public ScavengingGhoul copy() {return new ScavengingGhoul(this);
public class Scrubland extends CardImpl {
public Scrubland(UUID ownerId) {
public Scrubland(final Scrubland card) {
public Scrubland copy() {return new Scrubland(this);
public class SeaSerpent extends CardImpl {
public SeaSerpent(UUID ownerId) {
public SeaSerpent(final SeaSerpent card) {
public SeaSerpent copy() {return new SeaSerpent(this);
public class Sinkhole extends CardImpl {
public Sinkhole(UUID ownerId) {
public Sinkhole(final Sinkhole card) {
public Sinkhole copy() {return new Sinkhole(this);
public class Smoke extends CardImpl {
public Smoke(UUID ownerId) {
public Smoke(final Smoke card) {
public Smoke copy() {return new Smoke(this);
class SmokeEffect extends RestrictionUntapNotMoreThanEffect {
public SmokeEffect() {
public SmokeEffect(final SmokeEffect effect) {
public boolean applies(Player player, Ability source, Game game) {return true;
public SmokeEffect copy() {return new SmokeEffect(this);
public class SoulNet extends CardImpl {
public SoulNet(UUID ownerId) {
public SoulNet(final SoulNet card) {
public SoulNet copy() {return new SoulNet(this);
public class SpellBlast extends CardImpl {
public SpellBlast(UUID ownerId) {
public SpellBlast(final SpellBlast card) {
public SpellBlast copy() {return new SpellBlast(this);
public void adjustTargets(Ability ability, Game game) {
public class SunglassesOfUrza extends CardImpl {
public SunglassesOfUrza(UUID ownerId) {
public SunglassesOfUrza(final SunglassesOfUrza card) {
public SunglassesOfUrza copy() {return new SunglassesOfUrza(this);
class SunglassesOfUrzaManaAsThoughtEffect extends AsThoughEffectImpl implements AsThoughManaEffect {
public SunglassesOfUrzaManaAsThoughtEffect() {
public boolean apply(Game game, Ability source) {return true;
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return affectedControllerId.equals(source.getControllerId());
public ManaType getAsThoughManaType(ManaType manaType, ManaPoolItem mana, UUID affectedControllerId, Ability source, Game game) {return ManaType.WHITE;return manaType;
public SunglassesOfUrzaManaAsThoughtEffect copy() {return new SunglassesOfUrzaManaAsThoughtEffect(this);
private SunglassesOfUrzaManaAsThoughtEffect(SunglassesOfUrzaManaAsThoughtEffect effect) {
public class Taiga extends CardImpl {
public Taiga(UUID ownerId) {
public Taiga(final Taiga card) {
public Taiga copy() {return new Taiga(this);
public class ThicketBasilisk extends CardImpl {
public ThicketBasilisk(UUID ownerId) {
public ThicketBasilisk(final ThicketBasilisk card) {
public ThicketBasilisk copy() {return new ThicketBasilisk(this);
public class ThroneOfBone extends CardImpl {
public ThroneOfBone(UUID ownerId) {
public ThroneOfBone(final ThroneOfBone card) {
public ThroneOfBone copy() {return new ThroneOfBone(this);
class ThroneOfBoneAbility extends TriggeredAbilityImpl {
public ThroneOfBoneAbility() {
public ThroneOfBoneAbility(final ThroneOfBoneAbility ability) {
public ThroneOfBoneAbility copy() {return new ThroneOfBoneAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).contains(ObjectColor.BLACK);
public String getRule() {return "Whenever a player casts a black spell, you may pay {1}. If you do, you gain 1 life.";
public class Timetwister extends CardImpl {
public Timetwister(UUID ownerId) {
public Timetwister(final Timetwister card) {
public Timetwister copy() {return new Timetwister(this);
class TimetwisterEffect extends OneShotEffect {
public TimetwisterEffect() {
public TimetwisterEffect(final TimetwisterEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TimetwisterEffect copy() {return new TimetwisterEffect(this);
public class TimeWalk extends CardImpl {
public TimeWalk(UUID ownerId) {
public TimeWalk(final TimeWalk card) {
public TimeWalk copy() {return new TimeWalk(this);
public class TropicalIsland extends CardImpl {
public TropicalIsland(UUID ownerId) {
public TropicalIsland(final TropicalIsland card) {
public TropicalIsland copy() {return new TropicalIsland(this);
public class UthdenTroll extends CardImpl {
public UthdenTroll(UUID ownerId) {
public UthdenTroll(final UthdenTroll card) {
public UthdenTroll copy() {return new UthdenTroll(this);
public class WallOfBrambles extends CardImpl {
public WallOfBrambles(UUID ownerId) {
public WallOfBrambles(final WallOfBrambles card) {
public WallOfBrambles copy() {return new WallOfBrambles(this);
public class WallOfWater extends CardImpl {
public WallOfWater(UUID ownerId) {
public WallOfWater(final WallOfWater card) {
public WallOfWater copy() {return new WallOfWater(this);
public class Web extends CardImpl {
public Web(UUID ownerId) {
public Web(final Web card) {
public Web copy() {return new Web(this);
public class WheelOfFortune extends CardImpl {
public WheelOfFortune(UUID ownerId) {
public WheelOfFortune(final WheelOfFortune card) {
public WheelOfFortune copy() {return new WheelOfFortune(this);
public class WillOTheWisp extends CardImpl {
public WillOTheWisp(UUID ownerId) {
public WillOTheWisp(final WillOTheWisp card) {
public WillOTheWisp copy() {return new WillOTheWisp(this);
public class WinterOrb extends CardImpl {
public WinterOrb(UUID ownerId) {
public WinterOrb(final WinterOrb card) {
public WinterOrb copy() {return new WinterOrb(this);
class WinterOrbEffect extends RestrictionUntapNotMoreThanEffect {
public WinterOrbEffect() {
public WinterOrbEffect(final WinterOrbEffect effect) {
public boolean applies(Player player, Ability source, Game game) {return true;
public WinterOrbEffect copy() {return new WinterOrbEffect(this);
public class WoodenSphere extends CardImpl {
public WoodenSphere(UUID ownerId) {
public WoodenSphere(final WoodenSphere card) {
public WoodenSphere copy() {return new WoodenSphere(this);
class WoodenSphereAbility extends TriggeredAbilityImpl {
public WoodenSphereAbility() {
public WoodenSphereAbility(final WoodenSphereAbility ability) {
public WoodenSphereAbility copy() {return new WoodenSphereAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).contains(ObjectColor.GREEN);
public String getRule() {return "Whenever a player casts a green spell, you may pay {1}. If you do, you gain 1 life.";
public class ZombieMaster extends CardImpl {
public ZombieMaster(UUID ownerId) {
public ZombieMaster(final ZombieMaster card) {
public ZombieMaster copy() {return new ZombieMaster(this);
public class Balance extends CardImpl {
public Balance(UUID ownerId) {
public Balance(final Balance card) {
public Balance copy() {return new Balance(this);
class BalanceEffect extends OneShotEffect {
BalanceEffect() {
BalanceEffect(final BalanceEffect effect) {
public BalanceEffect copy() {return new BalanceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Deathgrip extends CardImpl {
public Deathgrip(UUID ownerId) {
public Deathgrip(final Deathgrip card) {
public Deathgrip copy() {return new Deathgrip(this);
public class Deathlace extends CardImpl {
public Deathlace(UUID ownerId) {
public Deathlace(final Deathlace card) {
public Deathlace copy() {return new Deathlace(this);
public class Fork extends CardImpl {
public Fork(UUID ownerId) {
public Fork(final Fork card) {
public Fork copy() {return new Fork(this);
class ForkEffect extends OneShotEffect {
public ForkEffect() {
public ForkEffect(final ForkEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ForkEffect copy() {return new ForkEffect(this);
public String getText(Mode mode) {return sb.toString();
public class LibraryOfLeng extends CardImpl {
public LibraryOfLeng(UUID ownerId) {
public LibraryOfLeng(final LibraryOfLeng card) {
public LibraryOfLeng copy() {return new LibraryOfLeng(this);
class LibraryOfLengEffect extends ReplacementEffectImpl {
public LibraryOfLengEffect() {
public LibraryOfLengEffect(final LibraryOfLengEffect effect) {
public LibraryOfLengEffect copy() {return new LibraryOfLengEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(EventType.DISCARD_CARD)
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return true;return false;
public class Thoughtlace extends CardImpl {
public Thoughtlace(UUID ownerId) {
public Thoughtlace(final Thoughtlace card) {
public Thoughtlace copy() {return new Thoughtlace(this);
public class WhiteWard extends CardImpl {
public WhiteWard(UUID ownerId) {
public WhiteWard(final WhiteWard card) {
public WhiteWard copy() {return new WhiteWard(this);
public class AdderStaffBoggart extends CardImpl {
public AdderStaffBoggart(UUID ownerId) {
public AdderStaffBoggart(final AdderStaffBoggart card) {
public AdderStaffBoggart copy() {return new AdderStaffBoggart(this);
public class AmoeboidChangeling extends CardImpl {
public AmoeboidChangeling(UUID ownerId) {
public AmoeboidChangeling(final AmoeboidChangeling card) {
public AmoeboidChangeling copy() {return new AmoeboidChangeling(this);
public class ArbiterOfKnollridge extends CardImpl {
public ArbiterOfKnollridge(UUID ownerId) {
public ArbiterOfKnollridge(final ArbiterOfKnollridge card) {
public ArbiterOfKnollridge copy() {return new ArbiterOfKnollridge(this);
class ArbiterOfKnollridgeEffect extends OneShotEffect {
ArbiterOfKnollridgeEffect() {
ArbiterOfKnollridgeEffect(final ArbiterOfKnollridgeEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ArbiterOfKnollridgeEffect copy() {return new ArbiterOfKnollridgeEffect(this);
public class AshlingThePilgrim extends CardImpl {
public AshlingThePilgrim(UUID ownerId) {
public AshlingThePilgrim(final AshlingThePilgrim card) {
public AshlingThePilgrim copy() {return new AshlingThePilgrim(this);
class AshlingThePilgrimEffect extends OneShotEffect {
class ActivationInfo {
public AshlingThePilgrimEffect() {
public AshlingThePilgrimEffect(final AshlingThePilgrimEffect effect) {
public AshlingThePilgrimEffect copy() {return new AshlingThePilgrimEffect(this);
public boolean apply(Game game, Ability source) {return new DamageEverythingEffect(damage, new FilterCreaturePermanent()).apply(game, source);return true;return false;
public class AuntiesHovel extends CardImpl {
public AuntiesHovel(UUID ownerId) {
public AuntiesHovel(final AuntiesHovel card) {
public AuntiesHovel copy() {return new AuntiesHovel(this);
public class AvianChangeling extends CardImpl {
public AvianChangeling(UUID ownerId) {
public AvianChangeling(final AvianChangeling card) {
public AvianChangeling copy() {return new AvianChangeling(this);
public class AxegrinderGiant extends CardImpl {
public AxegrinderGiant(UUID ownerId) {
public AxegrinderGiant(final AxegrinderGiant card) {
public AxegrinderGiant copy() {return new AxegrinderGiant(this);
public class BattleMastery extends CardImpl {
public BattleMastery(UUID ownerId) {
public BattleMastery(final BattleMastery card) {
public BattleMastery copy() {return new BattleMastery(this);
public class BattlewandOak extends CardImpl {
public BattlewandOak(UUID ownerId) {
public BattlewandOak(final BattlewandOak card) {
public BattlewandOak copy() {return new BattlewandOak(this);
public class Benthicore extends CardImpl {
public Benthicore(UUID ownerId) {
public Benthicore(final Benthicore card) {
public Benthicore copy() {return new Benthicore(this);
public class BlackPoplarShaman extends CardImpl {
public BlackPoplarShaman(UUID ownerId) {
public BlackPoplarShaman(final BlackPoplarShaman card) {
public BlackPoplarShaman copy() {return new BlackPoplarShaman(this);
public class BladesOfVelisVel extends CardImpl {
public BladesOfVelisVel(UUID ownerId) {
public BladesOfVelisVel(final BladesOfVelisVel card) {
public BladesOfVelisVel copy() {return new BladesOfVelisVel(this);
public class BoggartBirthRite extends CardImpl {
public BoggartBirthRite(UUID ownerId) {
public BoggartBirthRite(final BoggartBirthRite card) {
public BoggartBirthRite copy() {return new BoggartBirthRite(this);
public class BoggartForager extends CardImpl {
public BoggartForager(UUID ownerId) {
public BoggartForager(final BoggartForager card) {
public BoggartForager copy() {return new BoggartForager(this);
public class BoggartHarbinger extends CardImpl {
public BoggartHarbinger(UUID ownerId) {
public BoggartHarbinger(final BoggartHarbinger card) {
public BoggartHarbinger copy() {return new BoggartHarbinger(this);
public class BoggartLoggers extends CardImpl {
public BoggartLoggers(UUID ownerId) {
public BoggartLoggers(final BoggartLoggers card) {
public BoggartLoggers copy() {return new BoggartLoggers(this);
public class BoggartMob extends CardImpl {
public BoggartMob(UUID ownerId) {
public BoggartMob(final BoggartMob card) {
public BoggartMob copy() {return new BoggartMob(this);
public class BoggartSpriteChaser extends CardImpl {
public BoggartSpriteChaser(UUID ownerId) {
public BoggartSpriteChaser(final BoggartSpriteChaser card) {
public BoggartSpriteChaser copy() {return new BoggartSpriteChaser(this);
public class BogHoodlums extends CardImpl {
public BogHoodlums(UUID ownerId) {
public BogHoodlums(final BogHoodlums card) {
public BogHoodlums copy() {return new BogHoodlums(this);
public class BogStriderAsh extends CardImpl {
public BogStriderAsh(UUID ownerId) {
public BogStriderAsh(final BogStriderAsh card) {
public BogStriderAsh copy() {return new BogStriderAsh(this);
public class BurrentonForgeTender extends CardImpl {
public BurrentonForgeTender(UUID ownerId) {
public BurrentonForgeTender(final BurrentonForgeTender card) {
public BurrentonForgeTender copy() {return new BurrentonForgeTender(this);
public class CaterwaulingBoggart extends CardImpl {
public CaterwaulingBoggart(UUID ownerId) {
public CaterwaulingBoggart(final CaterwaulingBoggart card) {
public CaterwaulingBoggart copy() {return new CaterwaulingBoggart(this);
public class CeaselessSearblades extends CardImpl {
public CeaselessSearblades(UUID ownerId) {
public CeaselessSearblades(final CeaselessSearblades card) {
public CeaselessSearblades copy() {return new CeaselessSearblades(this);
class CeaselessSearbladesTriggeredAbility extends TriggeredAbilityImpl {
CeaselessSearbladesTriggeredAbility() {
CeaselessSearbladesTriggeredAbility(final CeaselessSearbladesTriggeredAbility ability) {
public CeaselessSearbladesTriggeredAbility copy() {return new CeaselessSearbladesTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ACTIVATED_ABILITY;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you activate an ability of an Elemental, " + super.getRule();
public class CennsHeir extends CardImpl {
public CennsHeir(UUID ownerId) {
public CennsHeir(final CennsHeir card) {
public CennsHeir copy() {return new CennsHeir(this);
public class ChangelingBerserker extends CardImpl {
public ChangelingBerserker(UUID ownerId) {
public ChangelingBerserker(final ChangelingBerserker card) {
public ChangelingBerserker copy() {return new ChangelingBerserker(this);
public class ChangelingHero extends CardImpl {
public ChangelingHero(UUID ownerId) {
public ChangelingHero(final ChangelingHero card) {
public ChangelingHero copy() {return new ChangelingHero(this);
public class ChangelingTitan extends CardImpl {
public ChangelingTitan(UUID ownerId) {
public ChangelingTitan(final ChangelingTitan card) {
public ChangelingTitan copy() {return new ChangelingTitan(this);
public class CloudcrownOak extends CardImpl {
public CloudcrownOak(UUID ownerId) {
public CloudcrownOak(final CloudcrownOak card) {
public CloudcrownOak copy() {return new CloudcrownOak(this);
public class CloudgoatRanger extends CardImpl {
public CloudgoatRanger(UUID ownerId) {
public CloudgoatRanger(final CloudgoatRanger card) {
public CloudgoatRanger copy() {return new CloudgoatRanger(this);
public class Cloudthresher extends CardImpl {
public Cloudthresher(UUID ownerId) {
public Cloudthresher(final Cloudthresher card) {
public Cloudthresher copy() {return new Cloudthresher(this);
public class ConsumingBonfire extends CardImpl {
public ConsumingBonfire(UUID ownerId) {
public ConsumingBonfire(final ConsumingBonfire card) {
public ConsumingBonfire copy() {return new ConsumingBonfire(this);
public class CribSwap extends CardImpl {
public CribSwap(UUID ownerId) {
public CribSwap(final CribSwap card) {
public CribSwap copy() {return new CribSwap(this);
class CribSwapEffect extends OneShotEffect {
public CribSwapEffect() {
public CribSwapEffect(final CribSwapEffect effect) {
public CribSwapEffect copy() {return new CribSwapEffect(this);
public boolean apply(Game game, Ability source) {return token.putOntoBattlefield(1, game, source.getSourceId(), targetCreature.getControllerId());return false;
public class CrypticCommand extends CardImpl {
public CrypticCommand(UUID ownerId) {
public CrypticCommand(final CrypticCommand card) {
public CrypticCommand copy() {return new CrypticCommand(this);
class CrypticCommandEffect extends OneShotEffect {
public CrypticCommandEffect() {
public CrypticCommandEffect(final CrypticCommandEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public CrypticCommandEffect copy() {return new CrypticCommandEffect(this);
public class DauntlessDourbark extends CardImpl {
public DauntlessDourbark(UUID ownerId) {
public DauntlessDourbark(final DauntlessDourbark card) {
public DauntlessDourbark copy() {return new DauntlessDourbark(this);
public class Dawnfluke extends CardImpl {
public Dawnfluke(UUID ownerId) {
public Dawnfluke(final Dawnfluke card) {
public Dawnfluke copy() {return new Dawnfluke(this);
public class Deathrender extends CardImpl {
public Deathrender(UUID ownerId) {
public Deathrender(final Deathrender card) {
public Deathrender copy() {return new Deathrender(this);
class DeathrenderEffect extends OneShotEffect {
DeathrenderEffect() {
DeathrenderEffect(final DeathrenderEffect effect) {
public DeathrenderEffect copy() {return new DeathrenderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DeeptreadMerrow extends CardImpl {
public DeeptreadMerrow(UUID ownerId) {
public DeeptreadMerrow(final DeeptreadMerrow card) {
public DeeptreadMerrow copy() {return new DeeptreadMerrow(this);
public class DolmenGate extends CardImpl {
public DolmenGate(UUID ownerId) {
public DolmenGate(final DolmenGate card) {
public DolmenGate copy() {return new DolmenGate(this);
public class DrownerOfSecrets extends CardImpl {
public DrownerOfSecrets(UUID ownerId) {
public DrownerOfSecrets(final DrownerOfSecrets card) {
public DrownerOfSecrets copy() {return new DrownerOfSecrets(this);
public class ElvishBranchbender extends CardImpl {
public ElvishBranchbender(UUID ownerId) {
public ElvishBranchbender(final ElvishBranchbender card) {
public ElvishBranchbender copy() {return new ElvishBranchbender(this);
class ElvishBranchbenderEffect extends OneShotEffect {
ElvishBranchbenderEffect() {
ElvishBranchbenderEffect(final ElvishBranchbenderEffect effect) {
public ElvishBranchbenderEffect copy() {return new ElvishBranchbenderEffect(this);
public boolean apply(Game game, Ability source) {return false;
class ElvishBranchbenderToken extends Token {
ElvishBranchbenderToken(int xValue) {
public class ElvishEulogist extends CardImpl {
public ElvishEulogist(UUID ownerId) {
public ElvishEulogist(final ElvishEulogist card) {
public ElvishEulogist copy() {return new ElvishEulogist(this);
public class ElvishHandservant extends CardImpl {
public ElvishHandservant(UUID ownerId) {
public ElvishHandservant(final ElvishHandservant card) {
public ElvishHandservant copy() {return new ElvishHandservant(this);
public class ElvishHarbinger extends CardImpl {
public ElvishHarbinger(UUID ownerId) {
public ElvishHarbinger(final ElvishHarbinger card) {
public ElvishHarbinger copy() {return new ElvishHarbinger(this);
public class ElvishPromenade extends CardImpl {
public ElvishPromenade(UUID ownerId) {
public ElvishPromenade(final ElvishPromenade card) {
public ElvishPromenade copy() {return new ElvishPromenade(this);
public class EntanglingTrap extends CardImpl {
public EntanglingTrap(UUID ownerId) {
public EntanglingTrap(final EntanglingTrap card) {
public EntanglingTrap copy() {return new EntanglingTrap(this);
class EntanglingClashTriggeredAbility extends TriggeredAbilityImpl {
public EntanglingClashTriggeredAbility() {
public EntanglingClashTriggeredAbility(final EntanglingClashTriggeredAbility ability) {
public EntanglingClashTriggeredAbility copy() {return new EntanglingClashTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.CLASHED;
public boolean checkTrigger(GameEvent event, Game game) {
public class EpicProportions extends CardImpl {
public EpicProportions(UUID ownerId) {
public EpicProportions(final EpicProportions card) {
public EpicProportions copy() {return new EpicProportions(this);
public class EtherealWhiskergill extends CardImpl {
public EtherealWhiskergill(UUID ownerId) {
public EtherealWhiskergill(final EtherealWhiskergill card) {
public EtherealWhiskergill copy() {return new EtherealWhiskergill(this);
public class ExiledBoggart extends CardImpl {
public ExiledBoggart(UUID ownerId) {
public ExiledBoggart(final ExiledBoggart card) {
public ExiledBoggart copy() {return new ExiledBoggart(this);
public class EyeblightsEnding extends CardImpl {
public EyeblightsEnding(UUID ownerId) {
public EyeblightsEnding(final EyeblightsEnding card) {
public EyeblightsEnding copy() {return new EyeblightsEnding(this);
public class EyesOfTheWisent extends CardImpl {
public EyesOfTheWisent(UUID ownerId) {
public EyesOfTheWisent(final EyesOfTheWisent card) {
public EyesOfTheWisent copy() {return new EyesOfTheWisent(this);
class EyesOfTheWisentElementalToken extends Token {
public EyesOfTheWisentElementalToken() {
public class Facevaulter extends CardImpl {
public Facevaulter(UUID ownerId) {
public Facevaulter(final Facevaulter card) {
public Facevaulter copy() {return new Facevaulter(this);
public class FaerieHarbinger extends CardImpl {
public FaerieHarbinger(UUID ownerId) {
public FaerieHarbinger(final FaerieHarbinger card) {
public FaerieHarbinger copy() {return new FaerieHarbinger(this);
public class FaerieTrickery extends CardImpl {
public FaerieTrickery(UUID ownerId) {
public FaerieTrickery(final FaerieTrickery card) {
public FaerieTrickery copy() {return new FaerieTrickery(this);
public class Fallowsage extends CardImpl {
public Fallowsage(UUID ownerId) {
public Fallowsage(final Fallowsage card) {
public Fallowsage copy() {return new Fallowsage(this);
public class FamiliarsRuse extends CardImpl {
public FamiliarsRuse(UUID ownerId) {
public FamiliarsRuse(final FamiliarsRuse card) {
public FamiliarsRuse copy() {return new FamiliarsRuse(this);
public class FavorOfTheMighty extends CardImpl {
public FavorOfTheMighty(UUID ownerId) {
public FavorOfTheMighty(final FavorOfTheMighty card) {
public FavorOfTheMighty copy() {return new FavorOfTheMighty(this);
class FavorOfTheMightyEffect extends ContinuousEffectImpl {
FavorOfTheMightyEffect() {
FavorOfTheMightyEffect(final FavorOfTheMightyEffect effect) {
public FavorOfTheMightyEffect copy() {return new FavorOfTheMightyEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class FlamekinBladewhirl extends CardImpl {
public FlamekinBladewhirl(UUID ownerId) {
public FlamekinBladewhirl(final FlamekinBladewhirl card) {
public FlamekinBladewhirl copy() {return new FlamekinBladewhirl(this);
public class FlamekinBrawler extends CardImpl {
public FlamekinBrawler(UUID ownerId) {
public FlamekinBrawler(final FlamekinBrawler card) {
public FlamekinBrawler copy() {return new FlamekinBrawler(this);
public class FlamekinSpitfire extends CardImpl {
public FlamekinSpitfire(UUID ownerId) {
public FlamekinSpitfire(final FlamekinSpitfire card) {
public FlamekinSpitfire copy() {return new FlamekinSpitfire(this);
public class FodderLaunch extends CardImpl {
public FodderLaunch(UUID ownerId) {
public FodderLaunch(final FodderLaunch card) {
public FodderLaunch copy() {return new FodderLaunch(this);
public class ForcedFruition extends CardImpl {
public ForcedFruition(UUID ownerId) {
public ForcedFruition(final ForcedFruition card) {
public ForcedFruition copy() {return new ForcedFruition(this);return new GaddockTeeg(this);
public boolean apply(Game game, Ability source) {return true;return new GaddockTeegReplacementEffect4(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;return new GaddockTeegReplacementEffectX(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class GhostlyChangeling extends CardImpl {
public GhostlyChangeling(UUID ownerId) {
public GhostlyChangeling(final GhostlyChangeling card) {
public GhostlyChangeling copy() {return new GhostlyChangeling(this);
public class GiantHarbinger extends CardImpl {
public GiantHarbinger(UUID ownerId) {
public GiantHarbinger(final GiantHarbinger card) {
public GiantHarbinger copy() {return new GiantHarbinger(this);
public class GiantsIre extends CardImpl {
public GiantsIre(UUID ownerId) {
public GiantsIre(final GiantsIre card) {
public GiantsIre copy() {return new GiantsIre(this);
public class GiltLeafPalace extends CardImpl {
public GiltLeafPalace(UUID ownerId) {
public GiltLeafPalace(final GiltLeafPalace card) {
public GiltLeafPalace copy() {return new GiltLeafPalace(this);
public class GiltLeafSeer extends CardImpl {
public GiltLeafSeer(UUID ownerId) {
public GiltLeafSeer(final GiltLeafSeer card) {
public GiltLeafSeer copy() {return new GiltLeafSeer(this);
public class Glarewielder extends CardImpl {
public Glarewielder(UUID ownerId) {
public Glarewielder(final Glarewielder card) {
public Glarewielder copy() {return new Glarewielder(this);
public class GlimmerdustNap extends CardImpl {
public GlimmerdustNap(UUID ownerId) {
public GlimmerdustNap(final GlimmerdustNap card) {
public GlimmerdustNap copy() {return new GlimmerdustNap(this);
public class Goatnapper extends CardImpl {
public Goatnapper(UUID ownerId) {
public Goatnapper(final Goatnapper card) {
public Goatnapper copy() {return new Goatnapper(this);return new GoldmeadowDodger(this);return new GoldmeadowStalwart(this);
public class GuardianOfCloverdell extends CardImpl {
public GuardianOfCloverdell(UUID ownerId) {
public GuardianOfCloverdell(final GuardianOfCloverdell card) {
public GuardianOfCloverdell copy() {return new GuardianOfCloverdell(this);
public class Guile extends CardImpl {
public Guile(UUID ownerId) {
public Guile(final Guile card) {
public Guile copy() {return new Guile(this);
class GuileReplacementEffect extends ReplacementEffectImpl {
GuileReplacementEffect() {
GuileReplacementEffect(final GuileReplacementEffect effect) {
public GuileReplacementEffect copy() {return new GuileReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER;
public boolean applies(GameEvent event, Ability source, Game game) {return counteredSpell != null
public class HerbalPoultice extends CardImpl {
public HerbalPoultice(UUID ownerId) {
public HerbalPoultice(final HerbalPoultice card) {
public HerbalPoultice copy() {return new HerbalPoultice(this);
public class HillcomberGiant extends CardImpl {
public HillcomberGiant(UUID ownerId) {
public HillcomberGiant(final HillcomberGiant card) {
public HillcomberGiant copy() {return new HillcomberGiant(this);
public class HoardersGreed extends CardImpl {
public HoardersGreed(UUID ownerId) {
public HoardersGreed(final HoardersGreed card) {
public HoardersGreed copy() {return new HoardersGreed(this);
class HoardersGreedEffect extends OneShotEffect {
public HoardersGreedEffect() {
public HoardersGreedEffect(final HoardersGreedEffect effect) {
public HoardersGreedEffect copy() {return new HoardersGreedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HoofprintsOfTheStag extends CardImpl {
public HoofprintsOfTheStag(UUID ownerId) {
public HoofprintsOfTheStag(final HoofprintsOfTheStag card) {
public HoofprintsOfTheStag copy() {return new HoofprintsOfTheStag(this);
class WhiteElementalToken extends Token {
WhiteElementalToken() {
public class HordeOfNotions extends CardImpl {
public HordeOfNotions(UUID ownerId) {
public HordeOfNotions(final HordeOfNotions card) {
public HordeOfNotions copy() {return new HordeOfNotions(this);
class HordeOfNotionsEffect extends OneShotEffect {
public HordeOfNotionsEffect() {
public HordeOfNotionsEffect(final HordeOfNotionsEffect effect) {
public HordeOfNotionsEffect copy() {return new HordeOfNotionsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HornetHarasser extends CardImpl {
public HornetHarasser(UUID ownerId) {
public HornetHarasser(final HornetHarasser card) {
public HornetHarasser copy() {return new HornetHarasser(this);
public class HowltoothHollow extends CardImpl {
public HowltoothHollow(UUID ownerId) {
public HowltoothHollow(final HowltoothHollow card) {
public HowltoothHollow copy() {return new HowltoothHollow(this);
public class HurlyBurly extends CardImpl {
public HurlyBurly(UUID ownerId) {
public HurlyBurly(final HurlyBurly card) {
public HurlyBurly copy() {return new HurlyBurly(this);
public class ImmaculateMagistrate extends CardImpl {
public ImmaculateMagistrate(UUID ownerId) {
public ImmaculateMagistrate(final ImmaculateMagistrate card) {
public ImmaculateMagistrate copy() {return new ImmaculateMagistrate(this);
class ImmaculateMagistrateEffect extends OneShotEffect {
public ImmaculateMagistrateEffect() {
public ImmaculateMagistrateEffect(final ImmaculateMagistrateEffect effect) {
public ImmaculateMagistrateEffect copy() {return new ImmaculateMagistrateEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ImperiousPerfect extends CardImpl {
public ImperiousPerfect(UUID ownerId) {
public ImperiousPerfect(final ImperiousPerfect card) {
public ImperiousPerfect copy() {return new ImperiousPerfect(this);
public class IncandescentSoulstoke extends CardImpl {
public IncandescentSoulstoke(UUID ownerId) {
public IncandescentSoulstoke(final IncandescentSoulstoke card) {
public IncandescentSoulstoke copy() {return new IncandescentSoulstoke(this);
class IncandescentSoulstokeEffect extends OneShotEffect {
public IncandescentSoulstokeEffect() {
public IncandescentSoulstokeEffect(final IncandescentSoulstokeEffect effect) {
public IncandescentSoulstokeEffect copy() {return new IncandescentSoulstokeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class IngotChewer extends CardImpl {
public IngotChewer(UUID ownerId) {
public IngotChewer(final IngotChewer card) {
public IngotChewer copy() {return new IngotChewer(this);
public class InkfathomDivers extends CardImpl {
public InkfathomDivers (UUID ownerId) {
public InkfathomDivers (final InkfathomDivers card) {
public InkfathomDivers copy() {return new InkfathomDivers(this);
public class InnerFlameAcolyte extends CardImpl {
public InnerFlameAcolyte(UUID ownerId) {
public InnerFlameAcolyte(final InnerFlameAcolyte card) {
public InnerFlameAcolyte copy() {return new InnerFlameAcolyte(this);
public class InnerFlameIgniter extends CardImpl {
public InnerFlameIgniter(UUID ownerId) {
public InnerFlameIgniter(final InnerFlameIgniter card) {
public InnerFlameIgniter copy() {return new InnerFlameIgniter(this);
class InnerFlameIgniterEffect extends OneShotEffect {
class ActivationInfo {
public InnerFlameIgniterEffect() {
public InnerFlameIgniterEffect(final InnerFlameIgniterEffect effect) {
public InnerFlameIgniterEffect copy() {return new InnerFlameIgniterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JaggedScarArchers extends CardImpl {
public JaggedScarArchers(UUID ownerId) {
public JaggedScarArchers(final JaggedScarArchers card) {
public JaggedScarArchers copy() {return new JaggedScarArchers(this);
public class JudgeOfCurrents extends CardImpl {
public JudgeOfCurrents(UUID ownerId) {
public JudgeOfCurrents(final JudgeOfCurrents card) {
public JudgeOfCurrents copy() {return new JudgeOfCurrents(this);
public class KinsbaileBalloonist extends CardImpl {
public KinsbaileBalloonist(UUID ownerId) {
public KinsbaileBalloonist(final KinsbaileBalloonist card) {
public KinsbaileBalloonist copy() {return new KinsbaileBalloonist(this);
public class KithkinHarbinger extends CardImpl {
public KithkinHarbinger(UUID ownerId) {
public KithkinHarbinger(final KithkinHarbinger card) {
public KithkinHarbinger copy() {return new KithkinHarbinger(this);
public class KithkinHealer extends CardImpl {
public KithkinHealer(UUID ownerId) {
public KithkinHealer(final KithkinHealer card) {
public KithkinHealer copy() {return new KithkinHealer(this);
public class KithkinMourncaller extends CardImpl {
public KithkinMourncaller(UUID ownerId) {
public KithkinMourncaller(final KithkinMourncaller card) {
public KithkinMourncaller copy() {return new KithkinMourncaller(this);return new KnightOfMeadowgrain(this);
public class KnuckleboneWitch extends CardImpl {
public KnuckleboneWitch(UUID ownerId) {
public KnuckleboneWitch(final KnuckleboneWitch card) {
public KnuckleboneWitch copy() {return new KnuckleboneWitch(this);
public class LaceWithMoonglove extends CardImpl {
public LaceWithMoonglove(UUID ownerId) {
public LaceWithMoonglove(final LaceWithMoonglove card) {
public LaceWithMoonglove copy() {return new LaceWithMoonglove(this);
public class LeafGilder extends CardImpl {
public LeafGilder(UUID ownerId) {
public LeafGilder(final LeafGilder card) {
public LeafGilder copy() {return new LeafGilder(this);return new Lignify(this);
public class LysAlanaHuntmaster extends CardImpl {
public LysAlanaHuntmaster(UUID ownerId) {
public LysAlanaHuntmaster(final LysAlanaHuntmaster card) {
public LysAlanaHuntmaster copy() {return new LysAlanaHuntmaster(this);
public class LysAlanaScarblade extends CardImpl {
public LysAlanaScarblade(UUID ownerId) {
public LysAlanaScarblade(final LysAlanaScarblade card) {
public LysAlanaScarblade copy() {return new LysAlanaScarblade(this);
public class MadAuntie extends CardImpl {
public MadAuntie(UUID ownerId) {
public MadAuntie(final MadAuntie card) {
public MadAuntie copy() {return new MadAuntie(this);
public class MerrowCommerce extends CardImpl {
public MerrowCommerce(UUID ownerId) {
public MerrowCommerce(final MerrowCommerce card) {
public MerrowCommerce copy() {return new MerrowCommerce(this);
public class MerrowHarbinger extends CardImpl {
public MerrowHarbinger(UUID ownerId) {
public MerrowHarbinger(final MerrowHarbinger card) {
public MerrowHarbinger copy() {return new MerrowHarbinger(this);
public class MerrowReejerey extends CardImpl {
public MerrowReejerey(UUID ownerId) {
public MerrowReejerey(final MerrowReejerey card) {
public MerrowReejerey copy() {return new MerrowReejerey(this);
public class MirrorEntity extends CardImpl {
public MirrorEntity(UUID ownerId) {
public MirrorEntity(final MirrorEntity card) {
public MirrorEntity copy() {return new MirrorEntity(this);
public class MistbindClique extends CardImpl {
public MistbindClique(UUID ownerId) {
public MistbindClique(final MistbindClique card) {
public MistbindClique copy() {return new MistbindClique(this);
class MistbindCliqueAbility extends ZoneChangeTriggeredAbility {
public MistbindCliqueAbility() {
public MistbindCliqueAbility(MistbindCliqueAbility ability) {
public MistbindCliqueAbility copy() {return new MistbindCliqueAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public class MoongloveWinnower extends CardImpl {
public MoongloveWinnower(UUID ownerId) {
public MoongloveWinnower(final MoongloveWinnower card) {
public MoongloveWinnower copy() {return new MoongloveWinnower(this);
public class Mournwhelk extends CardImpl {
public Mournwhelk(UUID ownerId) {
public Mournwhelk(final Mournwhelk card) {
public Mournwhelk copy() {return new Mournwhelk(this);
public class NathOfTheGiltLeaf extends CardImpl {
public NathOfTheGiltLeaf(UUID ownerId) {
public NathOfTheGiltLeaf(final NathOfTheGiltLeaf card) {
public NathOfTheGiltLeaf copy() {return new NathOfTheGiltLeaf(this);
public class NathsBuffoon extends CardImpl {
public NathsBuffoon(UUID ownerId) {
public NathsBuffoon(final NathsBuffoon card) {
public NathsBuffoon copy() {return new NathsBuffoon(this);
public class NathsElite extends CardImpl {
public NathsElite(UUID ownerId) {
public NathsElite(final NathsElite card) {
public NathsElite copy() {return new NathsElite(this);
public class NeckSnap extends CardImpl {
public NeckSnap(UUID ownerId) {
public NeckSnap(final NeckSnap card) {
public NeckSnap copy() {return new NeckSnap(this);
public class NectarFaerie extends CardImpl {
public NectarFaerie(UUID ownerId) {
public NectarFaerie(final NectarFaerie card) {
public NectarFaerie copy() {return new NectarFaerie(this);
public class NightshadeStinger extends CardImpl {
public NightshadeStinger(UUID ownerId) {
public NightshadeStinger(final NightshadeStinger card) {
public NightshadeStinger copy() {return new NightshadeStinger(this);
public class NovaChaser extends CardImpl {
public NovaChaser(UUID ownerId) {
public NovaChaser(final NovaChaser card) {
public NovaChaser copy() {return new NovaChaser(this);
public class OakenBrawler extends CardImpl {
public OakenBrawler(UUID ownerId) {
public OakenBrawler(final OakenBrawler card) {
public OakenBrawler copy() {return new OakenBrawler(this);
public class OakgnarlWarrior extends CardImpl {
public OakgnarlWarrior(UUID ownerId) {
public OakgnarlWarrior(final OakgnarlWarrior card) {
public OakgnarlWarrior copy() {return new OakgnarlWarrior(this);
public class OonasProwler extends CardImpl {
public OonasProwler(UUID ownerId) {
public OonasProwler(final OonasProwler card) {
public OonasProwler copy() {return new OonasProwler(this);
public class PaperfinRascal extends CardImpl {
public PaperfinRascal(UUID ownerId) {
public PaperfinRascal(final PaperfinRascal card) {
public PaperfinRascal copy() {return new PaperfinRascal(this);
public class Pestermite extends CardImpl {
public Pestermite(UUID ownerId) {
public Pestermite(final Pestermite card) {
public Pestermite copy() {return new Pestermite(this);
public class PloverKnights extends CardImpl {
public PloverKnights(UUID ownerId) {
public PloverKnights(final PloverKnights card) {
public PloverKnights copy() {return new PloverKnights(this);
public class PrimalCommand extends CardImpl {
public PrimalCommand(UUID ownerId) {
public PrimalCommand(final PrimalCommand card) {
public PrimalCommand copy() {return new PrimalCommand(this);
class PrimalCommandShuffleGraveyardEffect extends OneShotEffect {
public PrimalCommandShuffleGraveyardEffect() {
public PrimalCommandShuffleGraveyardEffect(final PrimalCommandShuffleGraveyardEffect effect) {
public PrimalCommandShuffleGraveyardEffect copy() {return new PrimalCommandShuffleGraveyardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ProtectiveBubble extends CardImpl {
public ProtectiveBubble(UUID ownerId) {
public ProtectiveBubble(final ProtectiveBubble card) {
public ProtectiveBubble copy() {return new ProtectiveBubble(this);
public class ProwessOfTheFair extends CardImpl {
public ProwessOfTheFair(UUID ownerId) {
public ProwessOfTheFair(final ProwessOfTheFair card) {
public ProwessOfTheFair copy() {return new ProwessOfTheFair(this);
public class QuillSlingerBoggart extends CardImpl {
public QuillSlingerBoggart(UUID ownerId) {
public QuillSlingerBoggart(final QuillSlingerBoggart card) {
public QuillSlingerBoggart copy() {return new QuillSlingerBoggart(this);
public class RingsOfBrighthearth extends CardImpl {
public RingsOfBrighthearth(UUID ownerId) {
public RingsOfBrighthearth(final RingsOfBrighthearth card) {
public RingsOfBrighthearth copy() {return new RingsOfBrighthearth(this);
class RingsOfBrighthearthTriggeredAbility extends TriggeredAbilityImpl {
RingsOfBrighthearthTriggeredAbility() {
RingsOfBrighthearthTriggeredAbility(final RingsOfBrighthearthTriggeredAbility ability) {
public RingsOfBrighthearthTriggeredAbility copy() {return new RingsOfBrighthearthTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ACTIVATED_ABILITY;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you activate an ability, if it isn't a mana ability, you may pay {2}. If you do, copy that ability. You may choose new targets for the copy.";
class RingsOfBrighthearthEffect extends OneShotEffect {
RingsOfBrighthearthEffect() {
RingsOfBrighthearthEffect(final RingsOfBrighthearthEffect effect) {
public RingsOfBrighthearthEffect copy() {return new RingsOfBrighthearthEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;return false;
public class ScionOfOona extends CardImpl {
public ScionOfOona(UUID ownerId) {
public ScionOfOona(final ScionOfOona card) {
public ScionOfOona copy() {return new ScionOfOona(this);
public class SecludedGlen extends CardImpl {
public SecludedGlen(UUID ownerId) {
public SecludedGlen(final SecludedGlen card) {
public SecludedGlen copy() {return new SecludedGlen(this);
public class SeedguideAsh extends CardImpl {
public SeedguideAsh(UUID ownerId) {
public SeedguideAsh(final SeedguideAsh card) {
public SeedguideAsh copy() {return new SeedguideAsh(this);
public class SentinelsOfGlenElendra extends CardImpl {
public SentinelsOfGlenElendra(UUID ownerId) {
public SentinelsOfGlenElendra(final SentinelsOfGlenElendra card) {
public SentinelsOfGlenElendra copy() {return new SentinelsOfGlenElendra(this);
public class Shapesharer extends CardImpl {
public Shapesharer(UUID ownerId) {
public Shapesharer(final Shapesharer card) {
public Shapesharer copy() {return new Shapesharer(this);
class ShapesharerEffect extends OneShotEffect {
public ShapesharerEffect() {
public ShapesharerEffect(final ShapesharerEffect effect) {
public ShapesharerEffect copy() {return new ShapesharerEffect(this);
public boolean apply(Game game, Ability ability) {return true;return new ShelldockIsle(this);
public class ShimmeringGrotto extends CardImpl {
public ShimmeringGrotto(UUID ownerId) {
public ShimmeringGrotto(final ShimmeringGrotto card) {
public ShimmeringGrotto copy() {return new ShimmeringGrotto(this);
public class SilvergillAdept extends CardImpl {
public SilvergillAdept(UUID ownerId) {
public SilvergillAdept(final SilvergillAdept card) {
public SilvergillAdept copy() {return new SilvergillAdept(this);
class SilvergillAdeptCost extends CostImpl {
public SilvergillAdeptCost() {
public SilvergillAdeptCost(SilvergillAdeptCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return false;return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;return true;return false;
public SilvergillAdeptCost copy() {return new SilvergillAdeptCost(this);
public class SkeletalChangeling extends CardImpl {
public SkeletalChangeling(UUID ownerId) {
public SkeletalChangeling(final SkeletalChangeling card) {
public SkeletalChangeling copy() {return new SkeletalChangeling(this);
public class SoulbrightFlamekin extends CardImpl {
public SoulbrightFlamekin(UUID ownerId) {
public SoulbrightFlamekin(final SoulbrightFlamekin card) {
public SoulbrightFlamekin copy() {return new SoulbrightFlamekin(this);
class SoulbrightFlamekinEffect extends OneShotEffect {
class ActivationInfo {
public SoulbrightFlamekinEffect() {
public SoulbrightFlamekinEffect(final SoulbrightFlamekinEffect effect) {
public SoulbrightFlamekinEffect copy() {return new SoulbrightFlamekinEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SowerOfTemptation extends CardImpl {
public SowerOfTemptation(UUID ownerId) {
public SowerOfTemptation(final SowerOfTemptation card) {
public SowerOfTemptation copy() {return new SowerOfTemptation(this);
class SowerOfTemptationGainControlEffect extends OneShotEffect {
public SowerOfTemptationGainControlEffect() {
public SowerOfTemptationGainControlEffect(final SowerOfTemptationGainControlEffect effect) {
public SowerOfTemptationGainControlEffect copy() {return new SowerOfTemptationGainControlEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class SpellstutterSprite extends CardImpl {
public SpellstutterSprite(UUID ownerId) {
public SpellstutterSprite(final SpellstutterSprite card) {
public void adjustTargets(Ability ability, Game game) {
public SpellstutterSprite copy() {return new SpellstutterSprite(this);
class SpellstutterSpriteCounterTargetEffect extends OneShotEffect {
public SpellstutterSpriteCounterTargetEffect() {
public SpellstutterSpriteCounterTargetEffect(final SpellstutterSpriteCounterTargetEffect effect) {
public SpellstutterSpriteCounterTargetEffect copy() {return new SpellstutterSpriteCounterTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public String getText(Mode mode) {return "counter target spell with converted mana cost X or less, where X is the number of Faeries you control";
public class SpiderwigBoggart extends CardImpl {
public SpiderwigBoggart(UUID ownerId) {
public SpiderwigBoggart(final SpiderwigBoggart card) {
public SpiderwigBoggart copy() {return new SpiderwigBoggart(this);
public class SpinerockKnoll extends CardImpl {
public SpinerockKnoll(UUID ownerId) {
public SpinerockKnoll(final SpinerockKnoll card) {
public SpinerockKnoll copy() {return new SpinerockKnoll(this);
class SpinerockKnollCondition extends IntCompareCondition {
SpinerockKnollCondition() {
protected int getInputValue(Game game, Ability source) {return maxDamageReceived;
public String toString() {return "if an opponent was dealt 7 or more damage this turn";
class SpinerockKnollWatcher extends Watcher {
SpinerockKnollWatcher() {
SpinerockKnollWatcher(final SpinerockKnollWatcher watcher) {
public void watch(GameEvent event, Game game) {
public int getDamageReceived(UUID playerId) {return amount;return 0;
public void reset() {
public SpinerockKnollWatcher copy() {return new SpinerockKnollWatcher(this);
public class SpringleafDrum extends CardImpl {
public SpringleafDrum(UUID ownerId) {
public SpringleafDrum(final SpringleafDrum card) {
public SpringleafDrum copy() {return new SpringleafDrum(this);
public class SqueakingPieSneak extends CardImpl {
public SqueakingPieSneak(UUID ownerId) {
public SqueakingPieSneak(final SqueakingPieSneak card) {
public SqueakingPieSneak copy() {return new SqueakingPieSneak(this);
public class StinkdrinkerDaredevil extends CardImpl {
public StinkdrinkerDaredevil(UUID ownerId) {
public StinkdrinkerDaredevil(final StinkdrinkerDaredevil card) {
public StinkdrinkerDaredevil copy() {return new StinkdrinkerDaredevil(this);
public class StonybrookAngler extends CardImpl {
public StonybrookAngler(UUID ownerId) {
public StonybrookAngler(final StonybrookAngler card) {
public StonybrookAngler copy() {return new StonybrookAngler(this);
public class SunriseSovereign extends CardImpl {
public SunriseSovereign(UUID ownerId) {
public SunriseSovereign(final SunriseSovereign card) {
public SunriseSovereign copy() {return new SunriseSovereign(this);
public class SurgeOfThoughtweft extends CardImpl {
public SurgeOfThoughtweft(UUID ownerId) {
public SurgeOfThoughtweft(final SurgeOfThoughtweft card) {
public SurgeOfThoughtweft copy() {return new SurgeOfThoughtweft(this);
public class Surgespanner extends CardImpl {
public Surgespanner(UUID ownerId) {
public Surgespanner(final Surgespanner card) {
public Surgespanner copy() {return new Surgespanner(this);
public class SyggRiverGuide extends CardImpl {
public SyggRiverGuide(UUID ownerId) {
public SyggRiverGuide(final SyggRiverGuide card) {
public SyggRiverGuide copy() {return new SyggRiverGuide(this);
public class Tarfire extends CardImpl {
public Tarfire(UUID ownerId) {
public Tarfire(final Tarfire card) {
public Tarfire copy() {return new Tarfire(this);
public class TarPitcher extends CardImpl {
public TarPitcher(UUID ownerId) {
public TarPitcher(final TarPitcher card) {
public TarPitcher copy() {return new TarPitcher(this);
public class ThornOfAmethyst extends CardImpl {
public ThornOfAmethyst(UUID ownerId) {
public ThornOfAmethyst(final ThornOfAmethyst card) {
public ThornOfAmethyst copy() {return new ThornOfAmethyst(this);
public class ThorntoothWitch extends CardImpl {
public ThorntoothWitch(UUID ownerId) {
public ThorntoothWitch(final ThorntoothWitch card) {
public ThorntoothWitch copy() {return new ThorntoothWitch(this);
public class Thoughtseize extends CardImpl {
public Thoughtseize(UUID ownerId) {
public Thoughtseize(final Thoughtseize card) {
public Thoughtseize copy() {return new Thoughtseize(this);
public class ThoughtweftTrio extends CardImpl {
public ThoughtweftTrio(UUID ownerId) {
public ThoughtweftTrio(final ThoughtweftTrio card) {
public ThoughtweftTrio copy() {return new ThoughtweftTrio(this);
public class TideshaperMystic extends CardImpl {
public TideshaperMystic(UUID ownerId) {
public TideshaperMystic(final TideshaperMystic card) {
public TideshaperMystic copy() {return new TideshaperMystic(this);
public class TimberProtector extends CardImpl {
public TimberProtector(UUID ownerId) {
public TimberProtector(final TimberProtector card) {
public TimberProtector copy() {return new TimberProtector(this);
public class TreefolkHarbinger extends CardImpl {
public TreefolkHarbinger(UUID ownerId) {
public TreefolkHarbinger(final TreefolkHarbinger card) {
public TreefolkHarbinger copy() {return new TreefolkHarbinger(this);
public class TriclopeanSight extends CardImpl {
public TriclopeanSight(UUID ownerId) {
public TriclopeanSight(final TriclopeanSight card) {
public TriclopeanSight copy() {return new TriclopeanSight(this);
public class Vigor extends CardImpl {
public Vigor(UUID ownerId) {
public Vigor(final Vigor card) {
public Vigor copy() {return new Vigor(this);
class VigorReplacementEffect extends ReplacementEffectImpl {
VigorReplacementEffect() {
VigorReplacementEffect(final VigorReplacementEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_CREATURE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId())
public VigorReplacementEffect copy() {return new VigorReplacementEffect(this);
public class VividCrag extends CardImpl {
public VividCrag(UUID ownerId) {
public VividCrag(final VividCrag card) {
public VividCrag copy() {return new VividCrag(this);
public class VividCreek extends CardImpl {
public VividCreek(UUID ownerId) {
public VividCreek(final VividCreek card) {
public VividCreek copy() {return new VividCreek(this);
public class VividGrove extends CardImpl {
public VividGrove(UUID ownerId) {
public VividGrove(final VividGrove card) {
public VividGrove copy() {return new VividGrove(this);
public class WanderersTwig extends CardImpl {
public WanderersTwig(UUID ownerId) {
public WanderersTwig(final WanderersTwig card) {
public WanderersTwig copy() {return new WanderersTwig(this);
public class WanderwineHub extends CardImpl {
public WanderwineHub(UUID ownerId) {
public WanderwineHub(final WanderwineHub card) {
public WanderwineHub copy() {return new WanderwineHub(this);
public class WanderwineProphets extends CardImpl {
public WanderwineProphets(UUID ownerId) {
public WanderwineProphets(final WanderwineProphets card) {
public WanderwineProphets copy() {return new WanderwineProphets(this);
public class WarrenScourgeElf extends CardImpl {
public WarrenScourgeElf(UUID ownerId) {
public WarrenScourgeElf(final WarrenScourgeElf card) {
public WarrenScourgeElf copy() {return new WarrenScourgeElf(this);
public class WeedStrangle extends CardImpl {
public WeedStrangle(UUID ownerId) {
public WeedStrangle(final WeedStrangle card) {
public WeedStrangle copy() {return new WeedStrangle(this);
class WeedStrangleEffect extends OneShotEffect {
public WeedStrangleEffect() {
public WeedStrangleEffect(final WeedStrangleEffect effect) {
public WeedStrangleEffect copy() {return new WeedStrangleEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WindbriskHeights extends CardImpl {
public WindbriskHeights(UUID ownerId) {
public WindbriskHeights(final WindbriskHeights card) {
public WindbriskHeights copy() {return new WindbriskHeights(this);
class WindbriskHeightsAttackersCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return watcher != null && watcher.getNumberOfAttackersCurrentTurn(source.getControllerId()) >= 3;
public String toString() {return "you attacked with three or more creatures this turn";
public class WingsOfVelisVel extends CardImpl {
public WingsOfVelisVel(UUID ownerId) {
public WingsOfVelisVel(final WingsOfVelisVel card) {
public WingsOfVelisVel copy() {return new WingsOfVelisVel(this);
public class Wispmare extends CardImpl {
public Wispmare(UUID ownerId) {
public Wispmare(final Wispmare card) {
public Wispmare copy() {return new Wispmare(this);
public class WizenedCenn extends CardImpl {
public WizenedCenn(UUID ownerId) {
public WizenedCenn(final WizenedCenn card) {
public WizenedCenn copy() {return new WizenedCenn(this);
public class WoodlandChangeling extends CardImpl {
public WoodlandChangeling(UUID ownerId) {
public WoodlandChangeling(final WoodlandChangeling card) {
public WoodlandChangeling copy() {return new WoodlandChangeling(this);
public class WortBoggartAuntie extends CardImpl {
public WortBoggartAuntie(UUID ownerId) {
public WortBoggartAuntie(final WortBoggartAuntie card) {
public WortBoggartAuntie copy() {return new WortBoggartAuntie(this);
public class WrensRunPackmaster extends CardImpl {
public WrensRunPackmaster(UUID ownerId) {
public WrensRunPackmaster(final WrensRunPackmaster card) {
public WrensRunPackmaster copy() {return new WrensRunPackmaster(this);
public class WrensRunVanquisher extends CardImpl {
public WrensRunVanquisher(UUID ownerId) {
public WrensRunVanquisher(final WrensRunVanquisher card) {
public WrensRunVanquisher copy() {return new WrensRunVanquisher(this);
public class WydwenTheBitingGale extends CardImpl {
public WydwenTheBitingGale(UUID ownerId) {
public WydwenTheBitingGale(final WydwenTheBitingGale card) {
public WydwenTheBitingGale copy() {return new WydwenTheBitingGale(this);
public class ZephyrNet extends CardImpl {
public ZephyrNet(UUID ownerId) {
public ZephyrNet(final ZephyrNet card) {
public ZephyrNet copy() {return new ZephyrNet(this);
public class AcidicSlime extends CardImpl {
public AcidicSlime(UUID ownerId) {
public AcidicSlime(final AcidicSlime card) {
public AcidicSlime copy() {return new AcidicSlime(this);
public class AcolyteOfXathrid extends CardImpl {
public AcolyteOfXathrid(UUID ownerId) {
public AcolyteOfXathrid(final AcolyteOfXathrid card) {
public AcolyteOfXathrid copy() {return new AcolyteOfXathrid(this);
public class ActOfTreason extends CardImpl {
public ActOfTreason(UUID ownerId) {
public ActOfTreason(final ActOfTreason card) {
public ActOfTreason copy() {return new ActOfTreason(this);
public class AlluringSiren extends CardImpl {
public AlluringSiren(UUID ownerId) {
public AlluringSiren(final AlluringSiren card) {
public AlluringSiren copy() {return new AlluringSiren(this);
public class AngelsMercy extends CardImpl {
public AngelsMercy(UUID ownerId) {
public AngelsMercy(final AngelsMercy card) {
public AngelsMercy copy() {return new AngelsMercy(this);
public class AntQueen extends CardImpl {
public AntQueen(UUID ownerId) {
public AntQueen(final AntQueen card) {
public AntQueen copy() {return new AntQueen(this);
public class ArmoredAscension extends CardImpl {
public ArmoredAscension(UUID ownerId) {
public ArmoredAscension(final ArmoredAscension card) {
public ArmoredAscension copy() {return new ArmoredAscension(this);
public class AwakenerDruid extends CardImpl {
public AwakenerDruid(UUID ownerId) {
public AwakenerDruid(final AwakenerDruid card) {
public AwakenerDruid copy() {return new AwakenerDruid(this);
class AwakenerDruidBecomesCreatureEffect extends BecomesCreatureTargetEffect {
public AwakenerDruidBecomesCreatureEffect() {
public AwakenerDruidBecomesCreatureEffect(final AwakenerDruidBecomesCreatureEffect effect) {
public AwakenerDruidBecomesCreatureEffect copy() {return new AwakenerDruidBecomesCreatureEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return false;return super.apply(layer, sublayer, source, game);
public String getText(Mode mode) {return "target Forest becomes a 4/5 green Treefolk creature for as long as {this} remains on the battlefield. It's still a land";
class AwakenerDruidToken extends Token {
public AwakenerDruidToken() {
public class BallLightning extends CardImpl {
public BallLightning(UUID ownerId) {
public BallLightning(final BallLightning card) {
public BallLightning copy() {return new BallLightning(this);
public class BaneslayerAngel extends CardImpl {
public BaneslayerAngel(UUID ownerId) {
public BaneslayerAngel(final BaneslayerAngel card) {
public BaneslayerAngel copy() {return new BaneslayerAngel(this);
public class BerserkersOfBloodRidge extends CardImpl {
public BerserkersOfBloodRidge(UUID ownerId) {
public BerserkersOfBloodRidge(final BerserkersOfBloodRidge card) {
public BerserkersOfBloodRidge copy() {return new BerserkersOfBloodRidge(this);
public class BlackKnight extends CardImpl {
public BlackKnight(UUID ownerId) {
public BlackKnight(final BlackKnight card) {
public BlackKnight copy() {return new BlackKnight(this);
public class BlindingMage extends CardImpl {
public BlindingMage(UUID ownerId) {
public BlindingMage(final BlindingMage card) {
public BlindingMage copy() {return new BlindingMage(this);
public class BogardanHellkite extends CardImpl {
public BogardanHellkite(UUID ownerId) {
public BogardanHellkite(final BogardanHellkite card) {
public BogardanHellkite copy() {return new BogardanHellkite(this);
public class BogWraith extends CardImpl {
public BogWraith(UUID ownerId) {
public BogWraith(final BogWraith card) {
public BogWraith copy() {return new BogWraith(this);
public class BorderlandRanger extends CardImpl {
public BorderlandRanger(UUID ownerId) {
public BorderlandRanger(final BorderlandRanger card) {
public BorderlandRanger copy() {return new BorderlandRanger(this);
public class BrambleCreeper extends CardImpl {
public BrambleCreeper(UUID ownerId) {
public BrambleCreeper(final BrambleCreeper card) {
public BrambleCreeper copy() {return new BrambleCreeper(this);
public class BurningInquiry extends CardImpl {
public BurningInquiry(UUID ownerId) {
public BurningInquiry(final BurningInquiry card) {
public BurningInquiry copy() {return new BurningInquiry(this);
public class BurstOfSpeed extends CardImpl {
public BurstOfSpeed(UUID ownerId) {
public BurstOfSpeed(final BurstOfSpeed card) {
public BurstOfSpeed copy() {return new BurstOfSpeed(this);
public class CapriciousEfreet extends CardImpl {
public CapriciousEfreet(UUID ownerId) {
public CapriciousEfreet(final CapriciousEfreet card) {
public CapriciousEfreet copy() {return new CapriciousEfreet(this);
class CapriciousEfreetEffect extends OneShotEffect {
public CapriciousEfreetEffect() {
public CapriciousEfreetEffect(final CapriciousEfreetEffect effect) {
public CapriciousEfreetEffect copy() {return new CapriciousEfreetEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CaptainOfTheWatch extends CardImpl {
public CaptainOfTheWatch(UUID ownerId) {
public CaptainOfTheWatch(final CaptainOfTheWatch card) {
public CaptainOfTheWatch copy() {return new CaptainOfTheWatch(this);
public class ChildOfNight extends CardImpl {
public ChildOfNight(UUID ownerId) {
public ChildOfNight(final ChildOfNight card) {
public ChildOfNight copy() {return new ChildOfNight(this);
public class CoatOfArms extends CardImpl {
public CoatOfArms(UUID ownerId) {
public CoatOfArms(final CoatOfArms card) {
public CoatOfArms copy() {return new CoatOfArms(this);
class CoatOfArmsEffect extends ContinuousEffectImpl {
public CoatOfArmsEffect() {
public CoatOfArmsEffect(final CoatOfArmsEffect effect) {
public CoatOfArmsEffect copy() {return new CoatOfArmsEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
private int getAmount(List<Permanent> permanents, Permanent target) {return permanents.size() - 1;return amount;
public class ConsumeSpirit extends CardImpl {
public ConsumeSpirit(UUID ownerId) {
public ConsumeSpirit(final ConsumeSpirit card) {
public ConsumeSpirit copy() {return new ConsumeSpirit(this);
class ConsumeSpiritEffect extends OneShotEffect {
public ConsumeSpiritEffect() {
public ConsumeSpiritEffect(final ConsumeSpiritEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;return true;
public ConsumeSpiritEffect copy() {return new ConsumeSpiritEffect(this);
public class ConvincingMirage extends CardImpl {
public ConvincingMirage(UUID ownerId) {
public ConvincingMirage(final ConvincingMirage card) {
public ConvincingMirage copy() {return new ConvincingMirage(this);
class ConvincingMirageContinousEffect extends ContinuousEffectImpl {
public ConvincingMirageContinousEffect() {
public ConvincingMirageContinousEffect(final ConvincingMirageContinousEffect effect) {
public ConvincingMirageContinousEffect copy() {return new ConvincingMirageContinousEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class CoralMerfolk extends CardImpl {
public CoralMerfolk(UUID ownerId) {
public CoralMerfolk(final CoralMerfolk card) {
public CoralMerfolk copy() {return new CoralMerfolk(this);
public class CudgelTroll extends CardImpl {
public CudgelTroll(UUID ownerId) {
public CudgelTroll(final CudgelTroll card) {
public CudgelTroll copy() {return new CudgelTroll(this);
public class DeadlyRecluse extends CardImpl {
public DeadlyRecluse(UUID ownerId) {
public DeadlyRecluse(final DeadlyRecluse card) {
public DeadlyRecluse copy() {return new DeadlyRecluse(this);
public class Disentomb extends CardImpl {
public Disentomb(UUID ownerId) {
public Disentomb(final Disentomb card) {
public Disentomb copy() {return new Disentomb(this);
public class Disorient extends CardImpl {
public Disorient(UUID ownerId) {
public Disorient(final Disorient card) {
public Disorient copy() {return new Disorient(this);
public class DivineVerdict extends CardImpl {
public DivineVerdict(UUID ownerId) {
public DivineVerdict(final DivineVerdict card) {
public DivineVerdict copy() {return new DivineVerdict(this);
public class DjinnOfWishes extends CardImpl {
public DjinnOfWishes(UUID ownerId) {
public DjinnOfWishes(final DjinnOfWishes card) {
public DjinnOfWishes copy() {return new DjinnOfWishes(this);
class DjinnOfWishesEffect extends OneShotEffect {
public DjinnOfWishesEffect() {
public DjinnOfWishesEffect(final DjinnOfWishesEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DjinnOfWishesEffect copy() {return new DjinnOfWishesEffect(this);
public class DoomBlade extends CardImpl {
public DoomBlade(UUID ownerId){
public DoomBlade(final DoomBlade card) {
public DoomBlade copy() {return new DoomBlade(this);
public class DragonskullSummit extends CardImpl {
public DragonskullSummit(UUID ownerId) {
public DragonskullSummit(final DragonskullSummit card) {
public DragonskullSummit copy() {return new DragonskullSummit(this);
public class DragonWhelp extends CardImpl {
public DragonWhelp(UUID ownerId) {
public DragonWhelp(final DragonWhelp card) {
public DragonWhelp copy() {return new DragonWhelp(this);
class DragonWhelpEffect extends OneShotEffect {
public DragonWhelpEffect() {
public DragonWhelpEffect(final DragonWhelpEffect effect) {
public DragonWhelpEffect copy() {return new DragonWhelpEffect(this);
public boolean apply(Game game, Ability source) {return true;
class DragonWhelpDelayedEffect extends OneShotEffect {
public DragonWhelpDelayedEffect() {
public DragonWhelpDelayedEffect(final DragonWhelpDelayedEffect effect) {
public DragonWhelpDelayedEffect copy() {return new DragonWhelpDelayedEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class DreadWarlock extends CardImpl {
public DreadWarlock(UUID ownerId) {
public DreadWarlock(final DreadWarlock card) {
public DreadWarlock copy() {return new DreadWarlock(this);
public class DrownedCatacomb extends CardImpl {
public DrownedCatacomb(UUID ownerId) {
public DrownedCatacomb(final DrownedCatacomb card) {
public DrownedCatacomb copy() {return new DrownedCatacomb(this);
public class DrudgeSkeletons extends CardImpl{
public DrudgeSkeletons(UUID ownerId) {
public DrudgeSkeletons(final DrudgeSkeletons card) {
public DrudgeSkeletons copy() {return new DrudgeSkeletons(this);
public class Duress extends CardImpl {
public Duress(UUID ownerId){
public Duress(final Duress card) {
public Duress copy() {return new Duress(this);
public class ElvishArchdruid extends CardImpl {
public ElvishArchdruid(UUID ownerId) {
public ElvishArchdruid(final ElvishArchdruid card) {
public ElvishArchdruid copy() {return new ElvishArchdruid(this);
public class ElvishPiper extends CardImpl {
public ElvishPiper(UUID ownerId) {
public ElvishPiper(final ElvishPiper card) {
public ElvishPiper copy() {return new ElvishPiper(this);
public class EmeraldOryx extends CardImpl {
public EmeraldOryx(UUID ownerId) {
public EmeraldOryx(final EmeraldOryx card) {
public EmeraldOryx copy() {return new EmeraldOryx(this);
public class EnormousBaloth extends CardImpl {
public EnormousBaloth(UUID ownerId) {
public EnormousBaloth(final EnormousBaloth card) {
public EnormousBaloth copy() {return new EnormousBaloth(this);
public class EntanglingVines extends CardImpl {
public EntanglingVines(UUID ownerId) {
public EntanglingVines(final EntanglingVines card) {
public EntanglingVines copy() {return new EntanglingVines(this);
public class EssenceScatter extends CardImpl {
public EssenceScatter(UUID ownerId) {
public EssenceScatter(final EssenceScatter card) {
public EssenceScatter copy() {return new EssenceScatter(this);
public class Fabricate extends CardImpl {
public Fabricate(UUID ownerId) {
public Fabricate(final Fabricate card) {
public Fabricate copy() {return new Fabricate(this);
public class FieryHellhound extends CardImpl {
public FieryHellhound(UUID ownerId) {
public FieryHellhound(final FieryHellhound card) {
public FieryHellhound copy() {return new FieryHellhound(this);
public class Fireball extends CardImpl {
public Fireball(UUID ownerId) {
public void adjustCosts(Ability ability, Game game) {
public Fireball(final Fireball card) {
public Fireball copy() {return new Fireball(this);
class FireballEffect extends OneShotEffect {
public FireballEffect() {
public FireballEffect(final FireballEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public FireballEffect copy() {return new FireballEffect(this);
class FireballTargetCreatureOrPlayer extends TargetCreatureOrPlayer {
public FireballTargetCreatureOrPlayer(int minNumTargets, int maxNumTargets) {
public FireballTargetCreatureOrPlayer(final FireballTargetCreatureOrPlayer target) {* return
public List<TargetCreatureOrPlayer> getTargetOptions(Ability source, Game game) {return options;return options;return options;
public FireballTargetCreatureOrPlayer copy() {return new FireballTargetCreatureOrPlayer(this);
public class Fog extends CardImpl {
public Fog(UUID ownerId) {
public Fog(final Fog card) {
public Fog copy() {return new Fog(this);
public class GargoyleCastle extends CardImpl {
public GargoyleCastle(UUID ownerId) {
public GargoyleCastle(final GargoyleCastle card) {
public GargoyleCastle copy() {return new GargoyleCastle(this);
class GargoyleCastleAbility extends ActivatedAbilityImpl {
public GargoyleCastleAbility() {
public GargoyleCastleAbility(final GargoyleCastleAbility ability) {
public GargoyleCastleAbility copy() {return new GargoyleCastleAbility(this);
class GargoyleToken extends Token {
public GargoyleToken() {
public class GarrukWildspeaker extends CardImpl {
public GarrukWildspeaker(UUID ownerId) {
public GarrukWildspeaker(final GarrukWildspeaker card) {
public GarrukWildspeaker copy() {return new GarrukWildspeaker(this);
public class GlacialFortress extends CardImpl {
public GlacialFortress(UUID ownerId) {
public GlacialFortress(final GlacialFortress card) {
public GlacialFortress copy() {return new GlacialFortress(this);
public class GloriousCharge extends CardImpl {
public GloriousCharge(UUID ownerId) {
public GloriousCharge(final GloriousCharge card) {
public GloriousCharge copy() {return new GloriousCharge(this);
public class GoblinArtillery extends CardImpl {
public GoblinArtillery(UUID ownerId) {
public GoblinArtillery(final GoblinArtillery card) {
public GoblinArtillery copy() {return new GoblinArtillery(this);
public class GoblinChieftain extends CardImpl {
public GoblinChieftain(UUID ownerId) {
public GoblinChieftain(final GoblinChieftain card) {
public GoblinChieftain copy() {return new GoblinChieftain(this);
public class GorgonFlail extends CardImpl {
public GorgonFlail(UUID ownerId) {
public GorgonFlail(final GorgonFlail card) {
public GorgonFlail copy() {return new GorgonFlail(this);
public class GreatSableStag extends CardImpl {
public GreatSableStag(UUID ownerId) {
public GreatSableStag(final GreatSableStag card) {
public GreatSableStag copy() {return new GreatSableStag(this);
public class HarmsWay extends CardImpl {
public HarmsWay(UUID ownerId) {
public HarmsWay(final HarmsWay card) {
public HarmsWay copy() {return new HarmsWay(this);
class HarmsWayPreventDamageTargetEffect extends RedirectionEffect {
public HarmsWayPreventDamageTargetEffect() {
public HarmsWayPreventDamageTargetEffect(final HarmsWayPreventDamageTargetEffect effect) {
public HarmsWayPreventDamageTargetEffect copy() {return new HarmsWayPreventDamageTargetEffect(this);
public void init(Ability source, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return false;return false;return true;return true;return false;
public class HauntingEchoes extends CardImpl {
public HauntingEchoes(UUID ownerId) {
public HauntingEchoes(final HauntingEchoes card) {
public HauntingEchoes copy() {return new HauntingEchoes(this);
class HauntingEchoesEffect extends OneShotEffect {
public HauntingEchoesEffect() {
public HauntingEchoesEffect(final HauntingEchoesEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public HauntingEchoesEffect copy() {return new HauntingEchoesEffect(this);
public class HiveMind extends CardImpl {
public HiveMind(UUID ownerId) {
public HiveMind(final HiveMind card) {
public HiveMind copy() {return new HiveMind(this);
class HiveMindTriggeredAbility extends TriggeredAbilityImpl {
public HiveMindTriggeredAbility() {
public HiveMindTriggeredAbility(final HiveMindTriggeredAbility ability) {
public HiveMindTriggeredAbility copy() {return new HiveMindTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts an instant or sorcery spell, " + super.getRule();
class HiveMindEffect extends OneShotEffect {
public HiveMindEffect() {
public HiveMindEffect(final HiveMindEffect effect) {
public HiveMindEffect copy() {return new HiveMindEffect(this);
public boolean apply(Game game, Ability source) {
public class HonorOfThePure extends CardImpl {
public HonorOfThePure(UUID ownerId) {
public HonorOfThePure(final HonorOfThePure card) {
public HonorOfThePure copy() {return new HonorOfThePure(this);
public class HornedTurtle extends CardImpl {
public HornedTurtle(UUID ownerId) {
public HornedTurtle(final HornedTurtle card) {
public HornedTurtle copy() {return new HornedTurtle(this);
public class HowlingBanshee extends CardImpl {
public HowlingBanshee(UUID ownerId) {
public HowlingBanshee(final HowlingBanshee card) {
public HowlingBanshee copy() {return new HowlingBanshee(this);
public class HowlingMine extends CardImpl {
public HowlingMine(UUID ownerId) {
public HowlingMine(final HowlingMine card) {
public HowlingMine copy() {return new HowlingMine(this);
class HowlingMineAbility extends TriggeredAbilityImpl {
public HowlingMineAbility() {
public HowlingMineAbility(final HowlingMineAbility ability) {
public HowlingMineAbility copy() {return new HowlingMineAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DRAW_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public boolean checkInterveningIfClause(Game game) {return source != null && !source.isTapped();
public String getRule() {return "At the beginning of each player's draw step, if {this} is untapped, that player draws an additional card.";
public class HowlOfTheNightPack extends CardImpl {
public HowlOfTheNightPack(UUID ownerId) {
public HowlOfTheNightPack(final HowlOfTheNightPack card) {
public HowlOfTheNightPack copy() {return new HowlOfTheNightPack(this);
public class HypnoticSpecter extends CardImpl {
public HypnoticSpecter(UUID ownerId) {
public HypnoticSpecter(final HypnoticSpecter card) {
public HypnoticSpecter copy() {return new HypnoticSpecter(this);
public class IceCage extends CardImpl {
public IceCage(UUID ownerId) {
public IceCage(final IceCage card) {
public IceCage copy() {return new IceCage(this);
public class IgniteDisorder extends CardImpl {
public IgniteDisorder(UUID ownerId) {
public IgniteDisorder(final IgniteDisorder card) {
public IgniteDisorder copy() {return new IgniteDisorder(this);
public class IllusionaryServant extends CardImpl {
public IllusionaryServant(UUID ownerId) {
public IllusionaryServant(final IllusionaryServant card) {
public IllusionaryServant copy() {return new IllusionaryServant(this);
public class Indestructibility extends CardImpl {
public Indestructibility(UUID ownerId) {
public Indestructibility(final Indestructibility card) {
public Indestructibility copy() {return new Indestructibility(this);
public class InfernoElemental extends CardImpl {
public InfernoElemental(UUID ownerId) {
public InfernoElemental(final InfernoElemental card) {
public InfernoElemental copy() {return new InfernoElemental(this);
public class JaceBeleren extends CardImpl {
public JaceBeleren(UUID ownerId) {
public JaceBeleren(final JaceBeleren card) {
public JaceBeleren copy() {return new JaceBeleren(this);
public class JackalFamiliar extends CardImpl {
public JackalFamiliar(UUID ownerId) {
public JackalFamiliar(final JackalFamiliar card) {
public JackalFamiliar copy() {return new JackalFamiliar(this);
public class Jump extends CardImpl {
public Jump(UUID ownerId) {
public Jump(final Jump card) {
public Jump copy() {return new Jump(this);
public class KalonianBehemoth extends CardImpl {
public KalonianBehemoth(UUID ownerId) {
public KalonianBehemoth(final KalonianBehemoth card) {
public KalonianBehemoth copy() {return new KalonianBehemoth(this);
public class LightningBolt extends CardImpl {
public LightningBolt(UUID ownerId) {
public LightningBolt(final LightningBolt card) {
public LightningBolt copy() {return new LightningBolt(this);
public class LightwielderPaladin extends CardImpl {
public LightwielderPaladin(UUID ownerId) {
public LightwielderPaladin(final LightwielderPaladin card) {
public LightwielderPaladin copy() {return new LightwielderPaladin(this);
class LightwielderPaladinTriggeredAbility extends TriggeredAbilityImpl {
public LightwielderPaladinTriggeredAbility() {
public LightwielderPaladinTriggeredAbility(final LightwielderPaladinTriggeredAbility ability) {
public LightwielderPaladinTriggeredAbility copy() {return new LightwielderPaladinTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, you may exile target black or red permanent that player controls.";
public class LilianaVess extends CardImpl {
public LilianaVess(UUID ownerId) {
public LilianaVess(final LilianaVess card) {
public LilianaVess copy() {return new LilianaVess(this);
class LilianaVessEffect extends OneShotEffect {
public LilianaVessEffect() {
public LilianaVessEffect(final LilianaVessEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public LilianaVessEffect copy() {return new LilianaVessEffect(this);
public class LoomingShade extends CardImpl {
public LoomingShade(UUID ownerId) {
public LoomingShade(final LoomingShade card) {
public LoomingShade copy() {return new LoomingShade(this);
public class LurkingPredators extends CardImpl {
public LurkingPredators(UUID ownerId) {
public LurkingPredators(final LurkingPredators card) {
public LurkingPredators copy() {return new LurkingPredators(this);
class LurkingPredatorsEffect extends OneShotEffect {
public LurkingPredatorsEffect() {
public LurkingPredatorsEffect(final LurkingPredatorsEffect effect) {
public LurkingPredatorsEffect copy() {return new LurkingPredatorsEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class MagebaneArmor extends CardImpl {
public MagebaneArmor(UUID ownerId) {
public MagebaneArmor(final MagebaneArmor card) {
public MagebaneArmor copy() {return new MagebaneArmor(this);
class MagebaneArmorAbility extends StaticAbility {
public MagebaneArmorAbility() {
public MagebaneArmorAbility(MagebaneArmorAbility ability) {
public MagebaneArmorAbility copy() {return new MagebaneArmorAbility(this);
public String getRule() {return "Equipped creature gets +2/+4 and loses flying.";
class MagebaneArmorPreventionEffect extends PreventionEffectImpl {
public MagebaneArmorPreventionEffect() {
public MagebaneArmorPreventionEffect(final MagebaneArmorPreventionEffect effect) {
public MagebaneArmorPreventionEffect copy() {return new MagebaneArmorPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class MagmaPhoenix extends CardImpl {
public MagmaPhoenix(UUID ownerId) {
public MagmaPhoenix(final MagmaPhoenix card) {
public MagmaPhoenix copy() {return new MagmaPhoenix(this);
public class MasterOfTheWildHunt extends CardImpl {
public MasterOfTheWildHunt(UUID ownerId) {
public MasterOfTheWildHunt(final MasterOfTheWildHunt card) {
public MasterOfTheWildHunt copy() {return new MasterOfTheWildHunt(this);
class MasterOfTheWildHuntEffect extends OneShotEffect {
public MasterOfTheWildHuntEffect() {
public MasterOfTheWildHuntEffect(final MasterOfTheWildHuntEffect effect) {
public MasterOfTheWildHuntEffect copy() {return new MasterOfTheWildHuntEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MerfolkSovereign extends CardImpl {
public MerfolkSovereign(UUID ownerId) {
public MerfolkSovereign(final MerfolkSovereign card) {
public MerfolkSovereign copy() {return new MerfolkSovereign(this);
public class MesaEnchantress extends CardImpl {
public MesaEnchantress(UUID ownerId) {
public MesaEnchantress(final MesaEnchantress card) {
public MesaEnchantress copy() {return new MesaEnchantress(this);
public class MightOfOaks extends CardImpl {
public MightOfOaks(UUID ownerId){
public MightOfOaks(final MightOfOaks card) {
public MightOfOaks copy() {return new MightOfOaks(this);
public class MindControl extends CardImpl {
public MindControl(UUID ownerId) {
public MindControl(final MindControl card) {
public MindControl copy() {return new MindControl(this);
public class MindShatter extends CardImpl {
public MindShatter(UUID ownerId) {
public MindShatter(final MindShatter card) {
public MindShatter copy() {return new MindShatter(this);
public class MindSpring extends CardImpl {
public MindSpring(UUID ownerId) {
public MindSpring(final MindSpring card) {
public MindSpring copy() {return new MindSpring(this);
public class MirrorOfFate extends CardImpl {
public MirrorOfFate(UUID ownerId) {
public MirrorOfFate(final MirrorOfFate card) {
public MirrorOfFate copy() {return new MirrorOfFate(this);
class MirrorOfFateEffect extends OneShotEffect {
public MirrorOfFateEffect() {
public MirrorOfFateEffect(final MirrorOfFateEffect effect) {
public MirrorOfFateEffect copy() {return new MirrorOfFateEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
class FaceUpPredicate implements Predicate<Card> {
public boolean apply(Card input, Game game) {return !input.isFaceDown(game);
public String toString() {return "FaceUp";
class MirrorOfFateTarget extends TargetCard {
public MirrorOfFateTarget() {
public MirrorOfFateTarget(final MirrorOfFateTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return filter.match(card, source.getControllerId(), game);return false;
public MirrorOfFateTarget copy() {return new MirrorOfFateTarget(this);
public class MistLeopard extends CardImpl {
public MistLeopard(UUID ownerId) {
public MistLeopard(final MistLeopard card) {
public MistLeopard copy() {return new MistLeopard(this);
public class MoldAdder extends CardImpl {
public MoldAdder(UUID ownerId) {
public MoldAdder(final MoldAdder card) {
public MoldAdder copy() {return new MoldAdder(this);
public class NaturesSpiral extends CardImpl {
public NaturesSpiral(UUID ownerId) {
public NaturesSpiral(final NaturesSpiral card) {
public NaturesSpiral copy() {return new NaturesSpiral(this);
public class OpenTheVaults extends CardImpl {
public OpenTheVaults(UUID ownerId) {
public OpenTheVaults(final OpenTheVaults card) {
public OpenTheVaults copy() {return new OpenTheVaults(this);
class OpenTheVaultsEffect extends OneShotEffect {
public OpenTheVaultsEffect() {
public OpenTheVaultsEffect(final OpenTheVaultsEffect effect) {
public OpenTheVaultsEffect copy() {return new OpenTheVaultsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Overrun extends CardImpl {
public Overrun(UUID ownerId) {
public Overrun(final Overrun card) {
public Overrun copy() {return new Overrun(this);
public class PalaceGuard extends CardImpl {
public PalaceGuard(UUID ownerId) {
public PalaceGuard(final PalaceGuard card) {
public PalaceGuard copy() {return new PalaceGuard(this);
public class PanicAttack extends CardImpl {
public PanicAttack(UUID ownerId) {
public PanicAttack(final PanicAttack card) {
public PanicAttack copy() {return new PanicAttack(this);
public class PhantomWarrior extends CardImpl {
public PhantomWarrior(UUID ownerId) {
public PhantomWarrior(final PhantomWarrior card) {
public PhantomWarrior copy() {return new PhantomWarrior(this);
public class PlanarCleansing extends CardImpl {
public PlanarCleansing(UUID ownerId) {
public PlanarCleansing(final PlanarCleansing card) {
public PlanarCleansing copy() {return new PlanarCleansing(this);
class PlanarCleansingEffect extends OneShotEffect {
public PlanarCleansingEffect() {
public PlanarCleansingEffect(final PlanarCleansingEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public PlanarCleansingEffect copy() {return new PlanarCleansingEffect(this);
public class Polymorph extends CardImpl {
public Polymorph(UUID ownerId) {
public Polymorph(final Polymorph card) {
public Polymorph copy() {return new Polymorph(this);
class PolymorphEffect extends OneShotEffect {
public PolymorphEffect() {
public PolymorphEffect(final PolymorphEffect effect) {
public PolymorphEffect copy() {return new PolymorphEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Ponder extends CardImpl {
public Ponder(UUID ownerId) {
public Ponder(final Ponder card) {
public Ponder copy() {return new Ponder(this);
public class PrizedUnicorn extends CardImpl {
public PrizedUnicorn(UUID ownerId) {
public PrizedUnicorn(final PrizedUnicorn card) {
public PrizedUnicorn copy() {return new PrizedUnicorn(this);
public class ProteanHydra extends CardImpl {
public ProteanHydra(UUID ownerId) {
public ProteanHydra(final ProteanHydra card) {
public ProteanHydra copy() {return new ProteanHydra(this);
class ProteanHydraEffect2 extends PreventionEffectImpl {
public ProteanHydraEffect2() {
public ProteanHydraEffect2(final ProteanHydraEffect2 effect) {
public ProteanHydraEffect2 copy() {return new ProteanHydraEffect2(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
class ProteanHydraAbility extends TriggeredAbilityImpl {
public ProteanHydraAbility() {
public ProteanHydraAbility(final ProteanHydraAbility ability) {
public ProteanHydraAbility copy() {return new ProteanHydraAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER_REMOVED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a +1/+1 counter is removed from {this}, put two +1/+1 counters on it at the beginning of the next end step.";
class ProteanHydraDelayedTriggeredAbility extends DelayedTriggeredAbility {
public ProteanHydraDelayedTriggeredAbility() {
public ProteanHydraDelayedTriggeredAbility(final ProteanHydraDelayedTriggeredAbility ability) {
public ProteanHydraDelayedTriggeredAbility copy() {return new ProteanHydraDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "Put two +1/+1 counters on {this} at the beginning of the next end step";
public class RampantGrowth extends CardImpl {
public RampantGrowth(UUID ownerId){
public RampantGrowth(final RampantGrowth card) {
public RampantGrowth copy() {return new RampantGrowth(this);return new RazorfootGriffin(this);
public class Regenerate extends CardImpl {
public Regenerate(UUID ownerId) {
public Regenerate(final Regenerate card) {
public Regenerate copy() {return new Regenerate(this);
public class RhoxPikemaster extends CardImpl {
public RhoxPikemaster(UUID ownerId) {
public RhoxPikemaster(final RhoxPikemaster card) {
public RhoxPikemaster copy() {return new RhoxPikemaster(this);
public class RiseFromTheGrave extends CardImpl {
public RiseFromTheGrave(UUID ownerId) {
public RiseFromTheGrave(final RiseFromTheGrave card) {
public RiseFromTheGrave copy() {return new RiseFromTheGrave(this);
class RiseFromTheGraveEffect extends ContinuousEffectImpl {
public RiseFromTheGraveEffect() {
public RiseFromTheGraveEffect(final RiseFromTheGraveEffect effect) {
public RiseFromTheGraveEffect copy() {return new RiseFromTheGraveEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.ColorChangingEffects_5 || layer == Layer.TypeChangingEffects_4;
public class RootboundCrag extends CardImpl {
public RootboundCrag(UUID ownerId) {
public RootboundCrag(final RootboundCrag card) {
public RootboundCrag copy() {return new RootboundCrag(this);
public class RuneclawBear extends CardImpl {
public RuneclawBear(UUID ownerId) {
public RuneclawBear(final RuneclawBear card) {
public RuneclawBear copy() {return new RuneclawBear(this);
public class SafePassage extends CardImpl {
public SafePassage(UUID ownerId) {
public SafePassage(final SafePassage card) {
public SafePassage copy() {return new SafePassage(this);
public class SeismicStrike extends CardImpl {
public SeismicStrike(UUID ownerId) {
public SeismicStrike(final SeismicStrike card) {
public SeismicStrike copy() {return new SeismicStrike(this);
public class SerpentOfTheEndlessSea extends CardImpl {
public SerpentOfTheEndlessSea(UUID ownerId) {
public SerpentOfTheEndlessSea(final SerpentOfTheEndlessSea card) {
public SerpentOfTheEndlessSea copy() {return new SerpentOfTheEndlessSea(this);
public class SiegeGangCommander extends CardImpl {
public SiegeGangCommander(UUID ownerId) {
public SiegeGangCommander(final SiegeGangCommander card) {
public SiegeGangCommander copy() {return new SiegeGangCommander(this);return new SiegeMastodon(this);
public class SignInBlood extends CardImpl {
public SignInBlood(UUID ownerId) {
public SignInBlood(final SignInBlood card) {
public SignInBlood copy() {return new SignInBlood(this);
public class Silence extends CardImpl {
public Silence(UUID ownerId) {
public Silence(final Silence card) {
public Silence copy() {return new Silence(this);
public SilenceEffect() {
public SilenceEffect(final SilenceEffect effect) {
public SilenceEffect copy() {return new SilenceEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast spells this turn (" + mageObject.getIdName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return game.getOpponents(source.getControllerId()).contains(event.getPlayerId());
public class SilvercoatLion extends CardImpl {
public SilvercoatLion(UUID ownerId) {
public SilvercoatLion(final SilvercoatLion card) {
public SilvercoatLion copy() {return new SilvercoatLion(this);
public class Sleep extends CardImpl {
public Sleep(UUID ownerId) {
public Sleep(final Sleep card) {
public Sleep copy() {return new Sleep(this);
class SleepEffect extends OneShotEffect {
public SleepEffect() {
public SleepEffect(final SleepEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SleepEffect copy() {return new SleepEffect(this);
public class SnappingDrake extends CardImpl{
public SnappingDrake(UUID ownerId) {
public SnappingDrake(final SnappingDrake card) {
public SnappingDrake copy() {return new SnappingDrake(this);
public class SolemnOffering extends CardImpl {
public SolemnOffering(UUID ownerId) {
public SolemnOffering(final SolemnOffering card) {
public SolemnOffering copy() {return new SolemnOffering(this);
public class SoulBleed extends CardImpl {
public SoulBleed(UUID ownerId) {
public SoulBleed(final SoulBleed card) {
public SoulBleed copy() {return new SoulBleed(this);
public class SoulWarden extends CardImpl {
public SoulWarden(UUID ownerId) {
public SoulWarden(final SoulWarden card) {
public SoulWarden copy() {return new SoulWarden(this);
public class SparkmageApprentice extends CardImpl {
public SparkmageApprentice(UUID ownerId) {
public SparkmageApprentice(final SparkmageApprentice card) {
public SparkmageApprentice copy() {return new SparkmageApprentice(this);
public class Spellbook extends CardImpl {
public Spellbook(UUID ownerId) {
public Spellbook(final Spellbook card) {
public Spellbook copy() {return new Spellbook(this);return new SphinxAmbassador(this);return new SphinxAmbassadorEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class StoneGiant extends CardImpl {
public StoneGiant(UUID ownerId) {
public StoneGiant(final StoneGiant card) {
public StoneGiant copy() {return new StoneGiant(this);
class StoneGiantTarget extends TargetPermanent {
public StoneGiantTarget() {
public StoneGiantTarget(final StoneGiantTarget target) {
public StoneGiantTarget copy() {return new StoneGiantTarget(this);
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return super.canTarget(controllerId, id, source, game);return false;
public class StormfrontPegasus extends CardImpl {
public StormfrontPegasus(UUID ownerId) {
public StormfrontPegasus(final StormfrontPegasus card) {
public StormfrontPegasus copy() {return new StormfrontPegasus(this);
public class SunpetalGrove extends CardImpl {
public SunpetalGrove(UUID ownerId) {
public SunpetalGrove(final SunpetalGrove card) {
public SunpetalGrove copy() {return new SunpetalGrove(this);
public class TimeWarp extends CardImpl {
public TimeWarp(UUID ownerId) {
public TimeWarp(final TimeWarp card) {
public TimeWarp copy() {return new TimeWarp(this);
class TimeWarpEffect extends OneShotEffect {
public TimeWarpEffect() {
public TimeWarpEffect(final TimeWarpEffect effect) {
public TimeWarpEffect copy() {return new TimeWarpEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class TomeScour extends CardImpl {
public TomeScour(UUID ownerId) {
public TomeScour(final TomeScour card) {
public TomeScour copy() {return new TomeScour(this);
public class TrumpetBlast extends CardImpl {
public TrumpetBlast(UUID ownerId) {
public TrumpetBlast(final TrumpetBlast card) {
public TrumpetBlast copy() {return new TrumpetBlast(this);
public class Twincast extends CardImpl {
public Twincast(UUID ownerId) {
public Twincast(final Twincast card) {
public Twincast copy() {return new Twincast(this);
public class UndeadSlayer extends CardImpl {
public UndeadSlayer(UUID ownerId) {
public UndeadSlayer(final UndeadSlayer card) {
public UndeadSlayer copy() {return new UndeadSlayer(this);
public class UnderworldDreams extends CardImpl {
public UnderworldDreams(UUID ownerId) {
public UnderworldDreams(final UnderworldDreams card) {
public UnderworldDreams copy() {return new UnderworldDreams(this);
public class VampireAristocrat extends CardImpl {
public VampireAristocrat(UUID ownerId) {
public VampireAristocrat(final VampireAristocrat card) {
public VampireAristocrat copy() {return new VampireAristocrat(this);
public class VampireNocturnus extends CardImpl {
public VampireNocturnus(UUID ownerId) {
public VampireNocturnus(final VampireNocturnus card) {
public VampireNocturnus copy() {return new VampireNocturnus(this);
class VampireNocturnusAbility extends StaticAbility {
public VampireNocturnusAbility() {
public VampireNocturnusAbility(VampireNocturnusAbility ability) {
public VampireNocturnusAbility copy() {return new VampireNocturnusAbility(this);
public String getRule() {return "As long as the top card of your library is black, {this} and other Vampire creatures you control get +2/+1 and have flying.";
class VampireNocturnusCondition implements Condition {
public boolean apply(Game game, Ability source) {return card.getColor(game).isBlack();return false;
public class VeteranArmorsmith extends CardImpl {
public VeteranArmorsmith(UUID ownerId) {
public VeteranArmorsmith(final VeteranArmorsmith card) {
public VeteranArmorsmith copy() {return new VeteranArmorsmith(this);
public class VeteranSwordsmith extends CardImpl {
public VeteranSwordsmith(UUID ownerId) {
public VeteranSwordsmith(final VeteranSwordsmith card) {
public VeteranSwordsmith copy() {return new VeteranSwordsmith(this);
public class ViashinoSpearhunter extends CardImpl {
public ViashinoSpearhunter(UUID ownerId) {
public ViashinoSpearhunter(final ViashinoSpearhunter card) {
public ViashinoSpearhunter copy() {return new ViashinoSpearhunter(this);
public class WallOfBone extends CardImpl {
public WallOfBone(UUID ownerId) {
public WallOfBone(final WallOfBone card) {
public WallOfBone copy() {return new WallOfBone(this);
public class WallOfFaith extends CardImpl {
public WallOfFaith(UUID ownerId) {
public WallOfFaith(final WallOfFaith card) {
public WallOfFaith copy() {return new WallOfFaith(this);
public class WallOfFrost extends CardImpl {
public WallOfFrost(UUID ownerId) {
public WallOfFrost(final WallOfFrost card) {
public WallOfFrost copy() {return new WallOfFrost(this);
public class WarpathGhoul extends CardImpl {
public WarpathGhoul(UUID ownerId) {
public WarpathGhoul(final WarpathGhoul card) {
public WarpathGhoul copy() {return new WarpathGhoul(this);
public class WarpWorld extends CardImpl {
public WarpWorld(UUID ownerId) {
public WarpWorld(final WarpWorld card) {
public WarpWorld copy() {return new WarpWorld(this);
class WarpWorldEffect extends OneShotEffect {
public WarpWorldEffect() {
public WarpWorldEffect(final WarpWorldEffect effect) {
public WarpWorldEffect copy() {return new WarpWorldEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class Weakness extends CardImpl {
public Weakness(UUID ownerId) {
public Weakness(final Weakness card) {
public Weakness copy() {return new Weakness(this);
public class WhiteKnight extends CardImpl {
public WhiteKnight(UUID ownerId) {
public WhiteKnight(final WhiteKnight card) {
public WhiteKnight copy() {return new WhiteKnight(this);
public class XathridDemon extends CardImpl {
public XathridDemon(UUID ownerId) {
public XathridDemon(final XathridDemon card) {
public XathridDemon copy() {return new XathridDemon(this);
class XathridDemonEffect extends OneShotEffect {
public XathridDemonEffect() {
public XathridDemonEffect(final XathridDemonEffect effect) {
public XathridDemonEffect copy() {return new XathridDemonEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;return false;
public class YawningFissure extends CardImpl {
public YawningFissure(UUID ownerId) {
public YawningFissure(final YawningFissure card) {
public YawningFissure copy() {return new YawningFissure(this);
public class ZephyrSprite extends CardImpl {
public ZephyrSprite(UUID ownerId) {
public ZephyrSprite(final ZephyrSprite card) {
public ZephyrSprite copy() {return new ZephyrSprite(this);
public class AetherAdept extends CardImpl {
public AetherAdept(UUID ownerId) {
public AetherAdept(final AetherAdept card) {
public AetherAdept copy() {return new AetherAdept(this);
public class AirServant extends CardImpl {
public AirServant(UUID ownerId) {
public AirServant(final AirServant card) {
public AirServant copy() {return new AirServant(this);
public class AjanisMantra extends CardImpl {
public AjanisMantra(UUID ownerId) {
public AjanisMantra(final AjanisMantra card) {
public AjanisMantra copy() {return new AjanisMantra(this);
public class AjanisPridemate extends CardImpl {
public AjanisPridemate(UUID ownerId) {
public AjanisPridemate(final AjanisPridemate card) {
public AjanisPridemate copy() {return new AjanisPridemate(this);
class AjanisPridemateAbility extends TriggeredAbilityImpl {
public AjanisPridemateAbility() {
public AjanisPridemateAbility(final AjanisPridemateAbility ability) {
public AjanisPridemateAbility copy() {return new AjanisPridemateAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.GAINED_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(controllerId);
public String getRule() {return "Whenever you gain life, you may put a +1/+1 counter on {this}.";
public class AncientHellkite extends CardImpl {
public AncientHellkite(UUID ownerId) {
public AncientHellkite(final AncientHellkite card) {
public AncientHellkite copy() {return new AncientHellkite(this);
class AncientHellkiteAbility extends ActivatedAbilityImpl {
public AncientHellkiteAbility() {
public AncientHellkiteAbility(final AncientHellkiteAbility ability) {
public AncientHellkiteAbility copy() {return new AncientHellkiteAbility(this);
public boolean activate(Game game, boolean noMana) {return super.activate(game, noMana);return false;
class AncientHellkiteCost extends CostImpl {
public AncientHellkiteCost() {
public AncientHellkiteCost(final AncientHellkiteCost cost) {
public AncientHellkiteCost copy() {return new AncientHellkiteCost(this);
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;return false;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public class AngelicArbiter extends CardImpl {
public AngelicArbiter(UUID ownerId) {
public AngelicArbiter(final AngelicArbiter card) {
public AngelicArbiter copy() {return new AngelicArbiter(this);
class AngelicArbiterWatcher2 extends Watcher {
public AngelicArbiterWatcher2() {
public AngelicArbiterWatcher2(final AngelicArbiterWatcher2 watcher) {
public AngelicArbiterWatcher2 copy() {return new AngelicArbiterWatcher2(this);
public void watch(GameEvent event, Game game) {
public void reset() {
public boolean hasPlayerAttackedThisTurn(UUID playerId) {return playersThatAttackedThisTurn.contains(playerId);
class AngelicArbiterCantAttackTargetEffect extends RestrictionEffect {
public AngelicArbiterCantAttackTargetEffect(Duration duration) {
public AngelicArbiterCantAttackTargetEffect(final AngelicArbiterCantAttackTargetEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canAttack(Game game) {return false;
public AngelicArbiterCantAttackTargetEffect copy() {return new AngelicArbiterCantAttackTargetEffect(this);
public AngelicArbiterEffect2() {
public AngelicArbiterEffect2(final AngelicArbiterEffect2 effect) {
public AngelicArbiterEffect2 copy() {return new AngelicArbiterEffect2(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class ArcRunner extends CardImpl {
public ArcRunner(UUID ownerId) {
public ArcRunner(final ArcRunner card) {
public ArcRunner copy() {return new ArcRunner(this);
public class ArmoredCancrix extends CardImpl {
public ArmoredCancrix(UUID ownerId) {
public ArmoredCancrix(final ArmoredCancrix card) {
public ArmoredCancrix copy() {return new ArmoredCancrix(this);return new AssaultGriffin(this);
public class AuguryOwl extends CardImpl {
public AuguryOwl(UUID ownerId) {
public AuguryOwl(final AuguryOwl card) {
public AuguryOwl copy() {return new AuguryOwl(this);
public class AutumnsVeil extends CardImpl {
public AutumnsVeil(UUID ownerId) {
public AutumnsVeil(final AutumnsVeil card) {
public AutumnsVeil copy() {return new AutumnsVeil(this);
public class AzureDrake extends CardImpl {
public AzureDrake(UUID ownerId) {
public AzureDrake(final AzureDrake card) {
public AzureDrake copy() {return new AzureDrake(this);
public class BackToNature extends CardImpl {
public BackToNature(UUID ownerId) {
public BackToNature(final BackToNature card) {
public BackToNature copy() {return new BackToNature(this);
public class BaronyVampire extends CardImpl {
public BaronyVampire(UUID ownerId) {
public BaronyVampire(final BaronyVampire card) {
public BaronyVampire copy() {return new BaronyVampire(this);
public class BloodcrazedGoblin extends CardImpl {
public BloodcrazedGoblin(UUID ownerId) {
public BloodcrazedGoblin(final BloodcrazedGoblin card) {
public BloodcrazedGoblin copy() {return new BloodcrazedGoblin(this);
class BloodcrazedGoblinEffect extends RestrictionEffect {
public BloodcrazedGoblinEffect() {
public BloodcrazedGoblinEffect(final BloodcrazedGoblinEffect effect) {
public BloodcrazedGoblinEffect copy() {return new BloodcrazedGoblinEffect(this);
public boolean canAttack(Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {
public class BrindleBoar extends CardImpl {
public BrindleBoar(UUID ownerId) {
public BrindleBoar(final BrindleBoar card) {
public BrindleBoar copy() {return new BrindleBoar(this);
public class BrittleEffigy extends CardImpl {
public BrittleEffigy(UUID ownerId) {
public BrittleEffigy(final BrittleEffigy card) {
public BrittleEffigy copy() {return new BrittleEffigy(this);
public class CallToMind extends CardImpl {
public CallToMind(UUID ownerId) {
public CallToMind(final CallToMind card) {
public CallToMind copy() {return new CallToMind(this);
public class CaptivatingVampire extends CardImpl {
public CaptivatingVampire(UUID ownerId) {
public CaptivatingVampire(final CaptivatingVampire card) {
public CaptivatingVampire copy() {return new CaptivatingVampire(this);
class CaptivatingVampireEffect extends ContinuousEffectImpl {
public CaptivatingVampireEffect() {
public CaptivatingVampireEffect(final CaptivatingVampireEffect effect) {
public CaptivatingVampireEffect copy() {return new CaptivatingVampireEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.ControlChangingEffects_2 || layer == layer.TypeChangingEffects_4;
public class ChandrasOutrage extends CardImpl {
public ChandrasOutrage(UUID ownerId) {
public ChandrasOutrage(final ChandrasOutrage card) {
public ChandrasOutrage copy() {return new ChandrasOutrage(this);
public class ChandrasSpitfire extends CardImpl {
public ChandrasSpitfire(UUID ownerId) {
public ChandrasSpitfire(final ChandrasSpitfire card) {
public ChandrasSpitfire copy() {return new ChandrasSpitfire(this);
class ChandrasSpitfireAbility extends TriggeredAbilityImpl {
public ChandrasSpitfireAbility() {
public ChandrasSpitfireAbility(final ChandrasSpitfireAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return !damageEvent.isCombatDamage() && game.getOpponents(controllerId).contains(event.getTargetId());
public String getRule() {return "Whenever an opponent is dealt noncombat damage, {this} gets +3/+0 until end of turn.";
public ChandrasSpitfireAbility copy() {return new ChandrasSpitfireAbility(this);
public class CloudCrusader extends CardImpl {
public CloudCrusader(UUID ownerId) {
public CloudCrusader(final CloudCrusader card) {
public CloudCrusader copy() {return new CloudCrusader(this);
public class Combust extends CardImpl {
public Combust(UUID ownerId) {
public Combust(final Combust card) {
public Combust copy() {return new Combust(this);
public class ConundrumSphinx extends CardImpl {
public ConundrumSphinx(UUID ownerId) {
public ConundrumSphinx(final ConundrumSphinx card) {
public ConundrumSphinx copy() {return new ConundrumSphinx(this);
class ConundrumSphinxEffect extends OneShotEffect {
public ConundrumSphinxEffect() {
public ConundrumSphinxEffect(final ConundrumSphinxEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public ConundrumSphinxEffect copy() {return new ConundrumSphinxEffect(this);
public class Corrupt extends CardImpl {
public Corrupt(UUID ownerId) {
public Corrupt(final Corrupt card) {
public Corrupt copy() {return new Corrupt(this);
class CorruptEffect extends OneShotEffect {
public CorruptEffect() {
public CorruptEffect(final CorruptEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public CorruptEffect copy() {return new CorruptEffect(this);
public class CrystalBall extends CardImpl {
public CrystalBall(UUID ownerId) {
public CrystalBall(final CrystalBall card) {
public CrystalBall copy() {return new CrystalBall(this);
public class Cultivate extends CardImpl {
public Cultivate(UUID ownerId) {
public Cultivate(final Cultivate card) {
public Cultivate copy() {return new Cultivate(this);
class CultivateEffect extends OneShotEffect {
public CultivateEffect() {
public CultivateEffect(final CultivateEffect effect) {
public CultivateEffect copy() {return new CultivateEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class CyclopsGladiator extends CardImpl {
public CyclopsGladiator(UUID ownerId) {
public CyclopsGladiator(final CyclopsGladiator card) {
public CyclopsGladiator copy() {return new CyclopsGladiator(this);
class CyclopsGladiatorEffect extends OneShotEffect {
public CyclopsGladiatorEffect() {
public CyclopsGladiatorEffect(final CyclopsGladiatorEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CyclopsGladiatorEffect copy() {return new CyclopsGladiatorEffect(this);
public class DarkTutelage extends CardImpl {
public DarkTutelage(UUID ownerId) {
public DarkTutelage(final DarkTutelage card) {
public DarkTutelage copy() {return new DarkTutelage(this);
class DarkTutelageEffect extends OneShotEffect {
public DarkTutelageEffect() {
public DarkTutelageEffect(final DarkTutelageEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DarkTutelageEffect copy() {return new DarkTutelageEffect(this);
public class DemonOfDeathsGate extends CardImpl {
public DemonOfDeathsGate(UUID ownerId) {
public DemonOfDeathsGate(final DemonOfDeathsGate card) {
public DemonOfDeathsGate copy() {return new DemonOfDeathsGate(this);
public class DestructiveForce extends CardImpl {
public DestructiveForce(UUID ownerId) {
public DestructiveForce(final DestructiveForce card) {
public DestructiveForce copy() {return new DestructiveForce(this);
public class Diminish extends CardImpl {
public Diminish(UUID ownerId) {
public Diminish(final Diminish card) {
public Diminish copy() {return new Diminish(this);
public class DryadsFavor extends CardImpl {
public DryadsFavor(UUID ownerId) {
public DryadsFavor(final DryadsFavor card) {
public DryadsFavor copy() {return new DryadsFavor(this);
class DryadsFavorEffect extends ContinuousEffectImpl {
public DryadsFavorEffect() {
public DryadsFavorEffect(final DryadsFavorEffect effect) {
public DryadsFavorEffect copy() {return new DryadsFavorEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6;
public class ElixirOfImmortality extends CardImpl {
public ElixirOfImmortality(UUID ownerId) {
public ElixirOfImmortality(final ElixirOfImmortality card) {
public ElixirOfImmortality copy() {return new ElixirOfImmortality(this);
class ElixerOfImmortalityEffect extends OneShotEffect {
public ElixerOfImmortalityEffect() {
public ElixerOfImmortalityEffect(final ElixerOfImmortalityEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ElixerOfImmortalityEffect copy() {return new ElixerOfImmortalityEffect(this);
public class EmberHauler extends CardImpl {
public EmberHauler(UUID ownerId) {
public EmberHauler(final EmberHauler card) {
public EmberHauler copy() {return new EmberHauler(this);
public class FaunaShaman extends CardImpl {
public FaunaShaman(UUID ownerId) {
public FaunaShaman(final FaunaShaman card) {
public FaunaShaman copy() {return new FaunaShaman(this);
public class FireServant extends CardImpl {
public FireServant(UUID ownerId) {
public FireServant(final FireServant card) {
public FireServant copy() {return new FireServant(this);
class FireServantEffect extends ReplacementEffectImpl {
public FireServantEffect() {
public FireServantEffect(final FireServantEffect effect) {
public FireServantEffect copy() {return new FireServantEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_CREATURE) ||
public boolean applies(GameEvent event, Ability source, Game game) {return spell != null &&
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class Fling extends CardImpl {
public Fling(UUID ownerId) {
public Fling(final Fling card) {
public Fling copy() {return new Fling(this);
class FlingEffect extends OneShotEffect {
public FlingEffect() {
public FlingEffect(final FlingEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public FlingEffect copy() {return new FlingEffect(this);
public class Foresee extends CardImpl {
public Foresee(UUID ownerId) {
public Foresee(final Foresee card) {
public Foresee copy() {return new Foresee(this);
public class FrostTitan extends CardImpl {
public FrostTitan(UUID ownerId) {
public FrostTitan(final FrostTitan card) {
public FrostTitan copy() {return new FrostTitan(this);
class FrostTitanAbility1 extends TriggeredAbilityImpl {
public FrostTitanAbility1() {
public FrostTitanAbility1(final FrostTitanAbility1 ability) {
public FrostTitanAbility1 copy() {return new FrostTitanAbility1(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} becomes the target of a spell or ability an opponent controls, counter that spell or ability unless its controller pays {2}.";
class FrostTitanAbility2 extends TriggeredAbilityImpl {
public FrostTitanAbility2() {
public FrostTitanAbility2(final FrostTitanAbility2 ability) {
public FrostTitanAbility2 copy() {return new FrostTitanAbility2(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED || event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return event.getType() == EventType.ENTERS_THE_BATTLEFIELD && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever {this} enters the battlefield or attacks, tap target permanent. It doesn't untap during its controller's next untap step.";
public class GaeasRevenge extends CardImpl {
public GaeasRevenge(UUID ownerId) {
public GaeasRevenge(final GaeasRevenge card) {
public GaeasRevenge copy() {return new GaeasRevenge(this);
public class GargoyleSentinel extends CardImpl {
public GargoyleSentinel(UUID ownerId) {
public GargoyleSentinel(final GargoyleSentinel card) {
public GargoyleSentinel copy() {return new GargoyleSentinel(this);
class GargoyleSentinelEffect extends ContinuousEffectImpl {
public GargoyleSentinelEffect() {
public GargoyleSentinelEffect(final GargoyleSentinelEffect effect) {
public GargoyleSentinelEffect copy() {return new GargoyleSentinelEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6;
public class GarruksCompanion extends CardImpl {
public GarruksCompanion(UUID ownerId) {
public GarruksCompanion(final GarruksCompanion card) {
public GarruksCompanion copy() {return new GarruksCompanion(this);
public class GarruksPackleader extends CardImpl {
public GarruksPackleader(UUID ownerId) {
public GarruksPackleader(final GarruksPackleader card) {
public GarruksPackleader copy() {return new GarruksPackleader(this);
public class GoblinBalloonBrigade extends CardImpl {
public GoblinBalloonBrigade(UUID ownerId) {
public GoblinBalloonBrigade(final GoblinBalloonBrigade card) {
public GoblinBalloonBrigade copy() {return new GoblinBalloonBrigade(this);
public class GoldenglowMoth extends CardImpl {
public GoldenglowMoth(UUID ownerId) {
public GoldenglowMoth(final GoldenglowMoth card) {
public GoldenglowMoth copy() {return new GoldenglowMoth(this);
public class GraveTitan extends CardImpl {
public GraveTitan(UUID ownerId) {
public GraveTitan(final GraveTitan card) {
public GraveTitan copy() {return new GraveTitan(this);
class GraveTitanAbility extends TriggeredAbilityImpl {
public GraveTitanAbility() {
public GraveTitanAbility(final GraveTitanAbility ability) {
public GraveTitanAbility copy() {return new GraveTitanAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED || event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return event.getType() == EventType.ENTERS_THE_BATTLEFIELD && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever {this} enters the battlefield or attacks, put two 2/2 black Zombie creature tokens onto the battlefield.";
public class GreaterBasilisk extends CardImpl {
public GreaterBasilisk(UUID ownerId) {
public GreaterBasilisk(final GreaterBasilisk card) {
public GreaterBasilisk copy() {return new GreaterBasilisk(this);
public class HarborSerpent extends CardImpl {
public HarborSerpent(UUID ownerId) {
public HarborSerpent(final HarborSerpent card) {
public HarborSerpent copy() {return new HarborSerpent(this);
class HarborSerpentEffect extends RestrictionEffect {
public HarborSerpentEffect() {
public HarborSerpentEffect(final HarborSerpentEffect effect) {
public HarborSerpentEffect copy() {return new HarborSerpentEffect(this);
public boolean canAttack(Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getId().equals(source.getSourceId()) &&
public class HoardingDragon extends CardImpl {
public HoardingDragon(UUID ownerId) {
public HoardingDragon(final HoardingDragon card) {
public HoardingDragon copy() {return new HoardingDragon(this);
class HoardingDragonEffect extends OneShotEffect {
public HoardingDragonEffect(UUID exileId) {
public HoardingDragonEffect(final HoardingDragonEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public HoardingDragonEffect copy() {return new HoardingDragonEffect(this);
public class HornetSting extends CardImpl {
public HornetSting(UUID ownerId) {
public HornetSting(final HornetSting card) {
public HornetSting copy() {return new HornetSting(this);
public class InfantryVeteran extends CardImpl {
public InfantryVeteran(UUID ownerId) {
public InfantryVeteran(final InfantryVeteran card) {
public InfantryVeteran copy() {return new InfantryVeteran(this);
public class InfernoTitan extends CardImpl {
public InfernoTitan(UUID ownerId) {
public InfernoTitan(final InfernoTitan card) {
public InfernoTitan copy() {return new InfernoTitan(this);
class InfernoTitanAbility extends TriggeredAbilityImpl {
public InfernoTitanAbility() {
public InfernoTitanAbility(final InfernoTitanAbility ability) {
public InfernoTitanAbility copy() {return new InfernoTitanAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED || event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return event.getType() == EventType.ENTERS_THE_BATTLEFIELD && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever {this} enters the battlefield or attacks, it deals 3 damage divided as you choose among one, two, or three target creatures and/or players.";
public class InspiredCharge extends CardImpl {
public InspiredCharge(UUID ownerId) {
public InspiredCharge(final InspiredCharge card) {
public InspiredCharge copy() {return new InspiredCharge(this);
public class JacesErasure extends CardImpl {
public JacesErasure(UUID ownerId) {
public JacesErasure(final JacesErasure card) {
public JacesErasure copy() {return new JacesErasure(this);
public class JacesIngenuity extends CardImpl {
public JacesIngenuity(UUID ownerId) {
public JacesIngenuity(final JacesIngenuity card) {
public JacesIngenuity copy() {return new JacesIngenuity(this);return new JinxedIdol(this);return new JinxedIdolEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(source.getFirstTarget(), game);return false;
public class KnightExemplar extends CardImpl {
public KnightExemplar(UUID ownerId) {
public KnightExemplar(final KnightExemplar card) {
public KnightExemplar copy() {return new KnightExemplar(this);
public class LeylineOfAnticipation extends CardImpl {
public LeylineOfAnticipation(UUID ownerId) {
public LeylineOfAnticipation(final LeylineOfAnticipation card) {
public LeylineOfAnticipation copy() {return new LeylineOfAnticipation(this);
public class LeylineOfPunishment extends CardImpl {
public LeylineOfPunishment(UUID ownerId) {
public LeylineOfPunishment(final LeylineOfPunishment card) {
public LeylineOfPunishment copy() {return new LeylineOfPunishment(this);
public LeylineOfPunishmentEffect2() {
public LeylineOfPunishmentEffect2(final LeylineOfPunishmentEffect2 effect) {
public LeylineOfPunishmentEffect2 copy() {return new LeylineOfPunishmentEffect2(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.PREVENT_DAMAGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class LeylineOfSanctity extends CardImpl {
public LeylineOfSanctity(UUID ownerId) {
public LeylineOfSanctity(final LeylineOfSanctity card) {
public LeylineOfSanctity copy() {return new LeylineOfSanctity(this);
public class LeylineOfTheVoid extends CardImpl {
public LeylineOfTheVoid(UUID ownerId) {
public LeylineOfTheVoid(final LeylineOfTheVoid card) {
public LeylineOfTheVoid copy() {return new LeylineOfTheVoid(this);
class LeylineOfTheVoidEffect extends ReplacementEffectImpl {
public LeylineOfTheVoidEffect() {
public LeylineOfTheVoidEffect(final LeylineOfTheVoidEffect effect) {
public LeylineOfTheVoidEffect copy() {return new LeylineOfTheVoidEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCardToExileWithInfo(permanent, null, null, source.getSourceId(), game, Zone.BATTLEFIELD, true);return controller.moveCardToExileWithInfo(card, null, null, source.getSourceId(), game, ((ZoneChangeEvent)event).getFromZone(), true);return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class LeylineOfVitality extends CardImpl {
public LeylineOfVitality(UUID ownerId) {
public LeylineOfVitality(final LeylineOfVitality card) {
public LeylineOfVitality copy() {return new LeylineOfVitality(this);
public class LilianasCaress extends CardImpl {
public LilianasCaress(UUID ownerId) {
public LilianasCaress(final LilianasCaress card) {
public LilianasCaress copy() {return new LilianasCaress(this);
class LilianasCaressAbility extends TriggeredAbilityImpl {
public LilianasCaressAbility() {
public LilianasCaressAbility(final LilianasCaressAbility ability) {
public LilianasCaressAbility copy() {return new LilianasCaressAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent discards a card, that player loses 2 life.";
public class LilianasSpecter extends CardImpl {
public LilianasSpecter(UUID ownerId) {
public LilianasSpecter(final LilianasSpecter card) {
public LilianasSpecter copy() {return new LilianasSpecter(this);
public class ManaLeak extends CardImpl {
public ManaLeak(UUID ownerId) {
public ManaLeak(final ManaLeak card) {
public ManaLeak copy() {return new ManaLeak(this);
public class ManicVandal extends CardImpl {
public ManicVandal(UUID ownerId) {
public ManicVandal(final ManicVandal card) {
public ManicVandal copy() {return new ManicVandal(this);
public class MaritimeGuard extends CardImpl {
public MaritimeGuard(UUID ownerId) {
public MaritimeGuard(final MaritimeGuard card) {
public MaritimeGuard copy() {return new MaritimeGuard(this);
public class MassPolymorph extends CardImpl {
public MassPolymorph(UUID ownerId) {
public MassPolymorph(final MassPolymorph card) {
public MassPolymorph copy() {return new MassPolymorph(this);
class MassPolymorphEffect extends OneShotEffect {
public MassPolymorphEffect() {
public MassPolymorphEffect(final MassPolymorphEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MassPolymorphEffect copy() {return new MassPolymorphEffect(this);
public class MitoticSlime extends CardImpl {
public MitoticSlime(UUID ownerId) {
public MitoticSlime(final MitoticSlime card) {
public MitoticSlime copy() {return new MitoticSlime(this);
class Ooze2Token extends Token {
public Ooze2Token() {
class Ooze1Token extends Token {
public Ooze1Token() {return new MystifyingMaze(this);staticText = "Exile target attacking creature an opponent controls. At the beginning of the next end step, return it to the battlefield tapped under its owner's control";
public boolean apply(Game game, Ability source) {return true;return false;return new MystifyingMazeEffect(this);
public class NantukoShade extends CardImpl {
public NantukoShade(UUID ownerId) {
public NantukoShade(final NantukoShade card) {
public NantukoShade copy() {return new NantukoShade(this);
public class NecroticPlague extends CardImpl {
public NecroticPlague(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public NecroticPlague(final NecroticPlague card) {
public NecroticPlague copy() {return new NecroticPlague(this);
class NecroticPlagueEffect extends OneShotEffect {
public NecroticPlagueEffect() {
public NecroticPlagueEffect(final NecroticPlagueEffect effect) {
public boolean apply(Game game, Ability source) {return creature.addAttachment(sourceEnchantmentCard.getId(), game);return false;
public NecroticPlagueEffect copy() {return new NecroticPlagueEffect(this);
public class NetherHorror extends CardImpl {
public NetherHorror(UUID ownerId) {
public NetherHorror(final NetherHorror card) {
public NetherHorror copy() {return new NetherHorror(this);
public class NightwingShade extends CardImpl {
public NightwingShade(UUID ownerId) {
public NightwingShade(final NightwingShade card) {
public NightwingShade copy() {return new NightwingShade(this);
public class ObstinateBaloth extends CardImpl {
public ObstinateBaloth(UUID ownerId) {
public ObstinateBaloth(final ObstinateBaloth card) {
public ObstinateBaloth copy() {return new ObstinateBaloth(this);
public class OverwhelmingStampede extends CardImpl {
public OverwhelmingStampede(UUID ownerId) {
public OverwhelmingStampede(final OverwhelmingStampede card) {
public OverwhelmingStampede copy() {return new OverwhelmingStampede(this);
class OverwhelmingStampedeInitEffect extends OneShotEffect {
public OverwhelmingStampedeInitEffect() {
public OverwhelmingStampedeInitEffect(final OverwhelmingStampedeInitEffect effect) {
public OverwhelmingStampedeInitEffect copy() {return new OverwhelmingStampedeInitEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class PhantomBeast extends CardImpl {
public PhantomBeast(UUID ownerId) {
public PhantomBeast(final PhantomBeast card) {
public PhantomBeast copy() {return new PhantomBeast(this);
public class PhylacteryLich extends CardImpl {
public PhylacteryLich(UUID ownerId) {
public PhylacteryLich(final PhylacteryLich card) {
public PhylacteryLich copy() {return new PhylacteryLich(this);
class PhylacteryLichAbility extends StateTriggeredAbility {
public PhylacteryLichAbility() {
public PhylacteryLichAbility(final PhylacteryLichAbility ability) {
public PhylacteryLichAbility copy() {return new PhylacteryLichAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;
public String getRule() {return "When you control no permanents with phylactery counters on them, sacrifice {this}.";
class PhylacteryLichEffect extends OneShotEffect {
public PhylacteryLichEffect() {
public PhylacteryLichEffect(final PhylacteryLichEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public PhylacteryLichEffect copy() {return new PhylacteryLichEffect(this);
public class Plummet extends CardImpl {
public Plummet(UUID ownerId) {
public Plummet(final Plummet card) {
public Plummet copy() {return new Plummet(this);
public class Preordain extends CardImpl {
public Preordain(UUID ownerId) {
public Preordain(final Preordain card) {
public Preordain copy() {return new Preordain(this);
public class PrimalCocoon extends CardImpl {
public PrimalCocoon(UUID ownerId) {
public PrimalCocoon(final PrimalCocoon card) {
public PrimalCocoon copy() {return new PrimalCocoon(this);
class PrimalCocoonAbility1 extends TriggeredAbilityImpl {
public PrimalCocoonAbility1() {
public PrimalCocoonAbility1(final PrimalCocoonAbility1 ability) {
public PrimalCocoonAbility1 copy() {return new PrimalCocoonAbility1(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public String getRule() {return "At the beginning of your upkeep, put a +1/+1 counter on enchanted creature.";
class PrimalCocoonAbility2 extends TriggeredAbilityImpl {
public PrimalCocoonAbility2() {
public PrimalCocoonAbility2(final PrimalCocoonAbility2 ability) {
public PrimalCocoonAbility2 copy() {return new PrimalCocoonAbility2(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED || event.getType() == EventType.BLOCKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return enchantment != null && enchantment.getAttachedTo() != null && event.getSourceId() != null && event.getSourceId().equals(enchantment.getAttachedTo());
public String getRule() {return "When enchanted creature attacks or blocks, sacrifice {this}.";
public class PrimevalTitan extends CardImpl {
public PrimevalTitan(UUID ownerId) {
public PrimevalTitan(final PrimevalTitan card) {
public PrimevalTitan copy() {return new PrimevalTitan(this);
class PrimevalTitanAbility extends TriggeredAbilityImpl {
public PrimevalTitanAbility() {
public PrimevalTitanAbility(final PrimevalTitanAbility ability) {
public PrimevalTitanAbility copy() {return new PrimevalTitanAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED || event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return event.getType() == EventType.ENTERS_THE_BATTLEFIELD && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever {this} enters the battlefield or attacks, you may search your library for up to two land cards, put them onto the battlefield tapped, then shuffle your library.";
public class PyreticRitual extends CardImpl {
public PyreticRitual(UUID ownerId) {
public PyreticRitual(final PyreticRitual card) {
public PyreticRitual copy() {return new PyreticRitual(this);
public class QuagSickness extends CardImpl {
public QuagSickness(UUID ownerId) {
public QuagSickness(final QuagSickness card) {
public QuagSickness copy() {return new QuagSickness(this);
public class ReassemblingSkeleton extends CardImpl {
public ReassemblingSkeleton(UUID ownerId) {
public ReassemblingSkeleton(final ReassemblingSkeleton card) {
public ReassemblingSkeleton copy() {return new ReassemblingSkeleton(this);
public class Redirect extends CardImpl {
public Redirect(UUID ownerId) {
public Redirect(final Redirect card) {
public Redirect copy() {return new Redirect(this);
public class RottingLegion extends CardImpl {
public RottingLegion(UUID ownerId) {
public RottingLegion(final RottingLegion card) {
public RottingLegion copy() {return new RottingLegion(this);
public class SacredWolf extends CardImpl {
public SacredWolf(UUID ownerId) {
public SacredWolf(final SacredWolf card) {
public SacredWolf copy() {return new SacredWolf(this);
public class ScrollThief extends CardImpl {
public ScrollThief(UUID ownerId) {
public ScrollThief(final ScrollThief card) {
public ScrollThief copy() {return new ScrollThief(this);
public class SerraAscendant extends CardImpl {
public SerraAscendant(UUID ownerId) {
public SerraAscendant(final SerraAscendant card) {
public SerraAscendant copy() {return new SerraAscendant(this);
class SerraAscendantEffect extends ContinuousEffectImpl {
public SerraAscendantEffect() {
public SerraAscendantEffect(final SerraAscendantEffect effect) {
public SerraAscendantEffect copy() {return new SerraAscendantEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == layer.PTChangingEffects_7;
public class ShivsEmbrace extends CardImpl {
public ShivsEmbrace(UUID ownerId) {
public ShivsEmbrace(final ShivsEmbrace card) {
public ShivsEmbrace copy() {return new ShivsEmbrace(this);
public class SorcerersStrongbox extends CardImpl {
public SorcerersStrongbox(UUID ownerId) {
public SorcerersStrongbox(final SorcerersStrongbox card) {
public SorcerersStrongbox copy() {return new SorcerersStrongbox(this);
class SorcerersStrongboxEffect extends OneShotEffect {
public SorcerersStrongboxEffect() {
public SorcerersStrongboxEffect(final SorcerersStrongboxEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SorcerersStrongboxEffect copy() {return new SorcerersStrongboxEffect(this);
public class SquadronHawk extends CardImpl {
public SquadronHawk(UUID ownerId) {
public SquadronHawk(final SquadronHawk card) {
public SquadronHawk copy() {return new SquadronHawk(this);
public class StabbingPain extends CardImpl {
public StabbingPain(UUID ownerId) {
public StabbingPain(final StabbingPain card) {
public StabbingPain copy() {return new StabbingPain(this);
public class SteelOverseer extends CardImpl {
public SteelOverseer(UUID ownerId) {
public SteelOverseer(final SteelOverseer card) {
public SteelOverseer copy() {return new SteelOverseer(this);
public class StoneGolem extends CardImpl {
public StoneGolem(UUID ownerId) {
public StoneGolem(final StoneGolem card) {
public StoneGolem copy() {return new StoneGolem(this);
public class StormtideLeviathan extends CardImpl {
public StormtideLeviathan(UUID ownerId) {
public StormtideLeviathan(final StormtideLeviathan card) {
public StormtideLeviathan copy() {return new StormtideLeviathan(this);
class StormtideLeviathanEffect extends ContinuousEffectImpl {
public StormtideLeviathanEffect() {
public StormtideLeviathanEffect(final StormtideLeviathanEffect effect) {
public StormtideLeviathanEffect copy() {return new StormtideLeviathanEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class SunTitan extends CardImpl {
public SunTitan(UUID ownerId) {
public SunTitan(final SunTitan card) {
public SunTitan copy() {return new SunTitan(this);
class SunTitanAbility extends TriggeredAbilityImpl {
public SunTitanAbility() {
public SunTitanAbility(final SunTitanAbility ability) {
public SunTitanAbility copy() {return new SunTitanAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED || event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return event.getType() == EventType.ENTERS_THE_BATTLEFIELD && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever {this} enters the battlefield or attacks, you may return target permanent card with converted mana cost 3 or less from your graveyard to the battlefield.";
public class SwordOfVengeance extends CardImpl {
public SwordOfVengeance(UUID ownerId) {
protected SwordOfVengeance(SwordOfVengeance me) {
public SwordOfVengeance copy() {return new SwordOfVengeance(this);
public class SylvanRanger extends CardImpl {
public SylvanRanger(UUID ownerId) {
public SylvanRanger(final SylvanRanger card) {
public SylvanRanger copy() {return new SylvanRanger(this);
public class TempleBell extends CardImpl {
public TempleBell(UUID ownerId) {
public TempleBell(final TempleBell card) {
public TempleBell copy() {return new TempleBell(this);
public class ThunderStrike extends CardImpl {
public ThunderStrike(UUID ownerId) {
public ThunderStrike(final ThunderStrike card) {
public ThunderStrike copy() {return new ThunderStrike(this);
public class TimeReversal extends CardImpl {
public TimeReversal(UUID ownerId) {
public TimeReversal(final TimeReversal card) {
public TimeReversal copy() {return new TimeReversal(this);
class TimeReversalEffect extends OneShotEffect {
public TimeReversalEffect() {
public TimeReversalEffect(final TimeReversalEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TimeReversalEffect copy() {return new TimeReversalEffect(this);
public class TirelessMissionaries extends CardImpl {
public TirelessMissionaries(UUID ownerId) {
public TirelessMissionaries(final TirelessMissionaries card) {
public TirelessMissionaries copy() {return new TirelessMissionaries(this);
public class VisceraSeer extends CardImpl {
public VisceraSeer(UUID ownerId) {
public VisceraSeer(final VisceraSeer card) {
public VisceraSeer copy() {return new VisceraSeer(this);
public class VolcanicStrength extends CardImpl {
public VolcanicStrength(UUID ownerId) {
public VolcanicStrength(final VolcanicStrength card) {
public VolcanicStrength copy() {return new VolcanicStrength(this);
class VolcanicStrengthEffect extends ContinuousEffectImpl {
public VolcanicStrengthEffect() {
public VolcanicStrengthEffect(final VolcanicStrengthEffect effect) {
public VolcanicStrengthEffect copy() {return new VolcanicStrengthEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.PTChangingEffects_7;
public class VoltaicKey extends CardImpl {
public VoltaicKey(UUID ownerId) {
public VoltaicKey(final VoltaicKey card) {
public VoltaicKey copy() {return new VoltaicKey(this);
public class VulshokBerserker extends CardImpl {
public VulshokBerserker(UUID ownerId) {
public VulshokBerserker(final VulshokBerserker card) {
public VulshokBerserker copy() {return new VulshokBerserker(this);
public class WallOfVines extends CardImpl {
public WallOfVines(UUID ownerId) {
public WallOfVines(final WallOfVines card) {
public WallOfVines copy() {return new WallOfVines(this);
public class WarlordsAxe extends CardImpl {
public WarlordsAxe(UUID ownerId) {
protected WarlordsAxe(WarlordsAxe me) {
public WarlordsAxe copy() {return new WarlordsAxe(this);
public class WarPriestOfThune extends CardImpl {
public WarPriestOfThune(UUID ownerId) {
public WarPriestOfThune(final WarPriestOfThune card) {
public WarPriestOfThune copy() {return new WarPriestOfThune(this);
public class WaterServant extends CardImpl {
public WaterServant(UUID ownerId) {
public WaterServant(final WaterServant card) {
public WaterServant copy() {return new WaterServant(this);
public class WildEvocation extends CardImpl {
public WildEvocation(UUID ownerId) {
public WildEvocation(final WildEvocation card) {
public WildEvocation copy() {return new WildEvocation(this);
class WildEvocationEffect extends OneShotEffect {
public WildEvocationEffect() {
public WildEvocationEffect(final WildEvocationEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public WildEvocationEffect copy() {return new WildEvocationEffect(this);
public class YavimayaWurm extends CardImpl {
public YavimayaWurm(UUID ownerId) {
public YavimayaWurm(final YavimayaWurm card) {
public YavimayaWurm copy() {return new YavimayaWurm(this);
public class AdaptiveAutomaton extends CardImpl {
public AdaptiveAutomaton(UUID ownerId) {
public AdaptiveAutomaton(final AdaptiveAutomaton card) {
public AdaptiveAutomaton copy() {return new AdaptiveAutomaton(this);
class AdaptiveAutomatonAddSubtypeEffect extends ContinuousEffectImpl {
public AdaptiveAutomatonAddSubtypeEffect() {
public AdaptiveAutomatonAddSubtypeEffect(final AdaptiveAutomatonAddSubtypeEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public AdaptiveAutomatonAddSubtypeEffect copy() {return new AdaptiveAutomatonAddSubtypeEffect(this);
public class AegisAngel extends CardImpl {
public AegisAngel(UUID ownerId) {
public AegisAngel(final AegisAngel card) {
public AegisAngel copy() {return new AegisAngel(this);
public class AlabasterMage extends CardImpl {
public AlabasterMage(UUID ownerId) {
public AlabasterMage(final AlabasterMage card) {
public AlabasterMage copy() {return new AlabasterMage(this);
public class AmphinCutthroat extends CardImpl {
public AmphinCutthroat(UUID ownerId) {
public AmphinCutthroat(final AmphinCutthroat card) {
public AmphinCutthroat copy() {return new AmphinCutthroat(this);
public class AngelicDestiny extends CardImpl {
public AngelicDestiny(UUID ownerId) {
public AngelicDestiny(final AngelicDestiny card) {
public AngelicDestiny copy() {return new AngelicDestiny(this);
public class ArachnusSpinner extends CardImpl {
public ArachnusSpinner(UUID ownerId) {
public ArachnusSpinner(final ArachnusSpinner card) {
public ArachnusSpinner copy() {return new ArachnusSpinner(this);
class ArachnusSpinnerEffect extends OneShotEffect {
public ArachnusSpinnerEffect() {
public ArachnusSpinnerEffect(final ArachnusSpinnerEffect effect) {
public ArachnusSpinnerEffect copy() {return new ArachnusSpinnerEffect(this);
public boolean apply(Game game, Ability source) {return false;return permanent.addAttachment(card.getId(), game);return false;
public class ArachnusWeb extends CardImpl {
public ArachnusWeb(UUID ownerId) {
public ArachnusWeb(final ArachnusWeb card) {
public ArachnusWeb copy() {return new ArachnusWeb(this);
class ArachnusWebEffect2 extends OneShotEffect {
public ArachnusWebEffect2() {
public ArachnusWebEffect2(final ArachnusWebEffect2 effect) {
public ArachnusWebEffect2 copy() {return new ArachnusWebEffect2(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ArbalestElite extends CardImpl {
public ArbalestElite(UUID ownerId) {
public ArbalestElite(final ArbalestElite card) {
public ArbalestElite copy() {return new ArbalestElite(this);
public class AvenFleetwing extends CardImpl {
public AvenFleetwing(UUID ownerId) {
public AvenFleetwing(final AvenFleetwing card) {
public AvenFleetwing copy() {return new AvenFleetwing(this);
public class AzureMage extends CardImpl {
public AzureMage(UUID ownerId) {
public AzureMage(final AzureMage card) {
public AzureMage copy() {return new AzureMage(this);
public class BenalishVeteran extends CardImpl {
public BenalishVeteran(UUID ownerId) {
public BenalishVeteran(final BenalishVeteran card) {
public BenalishVeteran copy() {return new BenalishVeteran(this);
public class BloodlordOfVaasgoth extends CardImpl {
public BloodlordOfVaasgoth(UUID ownerId) {
public BloodlordOfVaasgoth(final BloodlordOfVaasgoth card) {
public BloodlordOfVaasgoth copy() {return new BloodlordOfVaasgoth(this);
class BloodlordOfVaasgothEffect extends ContinuousEffectImpl {
public BloodlordOfVaasgothEffect() {
public BloodlordOfVaasgothEffect(final BloodlordOfVaasgothEffect effect) {
public BloodlordOfVaasgothEffect copy() {return new BloodlordOfVaasgothEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public class BloodOgre extends CardImpl {
public BloodOgre(UUID ownerId) {
public BloodOgre(final BloodOgre card) {
public BloodOgre copy() {return new BloodOgre(this);
public class BloodrageVampire extends CardImpl {
public BloodrageVampire(UUID ownerId) {
public BloodrageVampire(final BloodrageVampire card) {
public BloodrageVampire copy() {return new BloodrageVampire(this);
public class BonebreakerGiant extends CardImpl {
public BonebreakerGiant(UUID ownerId) {
public BonebreakerGiant(final BonebreakerGiant card) {
public BonebreakerGiant copy() {return new BonebreakerGiant(this);return new BountifulHarvest(this);
public class BuriedRuin extends CardImpl {
public BuriedRuin(UUID ownerId) {
public BuriedRuin(final BuriedRuin card) {
public BuriedRuin copy() {return new BuriedRuin(this);
public class CallToTheGrave extends CardImpl {
public CallToTheGrave(UUID ownerId) {
public CallToTheGrave(final CallToTheGrave card) {
public CallToTheGrave copy() {return new CallToTheGrave(this);
public class CarnageWurm extends CardImpl {
public CarnageWurm(UUID ownerId) {
public CarnageWurm(final CarnageWurm card) {
public CarnageWurm copy() {return new CarnageWurm(this);
public class CemeteryReaper extends CardImpl {
public CemeteryReaper(UUID ownerId) {
public CemeteryReaper(final CemeteryReaper card) {
public CemeteryReaper copy() {return new CemeteryReaper(this);
public class ChandrasPhoenix extends CardImpl {
public ChandrasPhoenix(UUID ownerId) {
public ChandrasPhoenix(final ChandrasPhoenix card) {
public ChandrasPhoenix copy() {return new ChandrasPhoenix(this);
class ChandrasPhoenixTriggeredAbility extends TriggeredAbilityImpl {
ChandrasPhoenixTriggeredAbility() {
ChandrasPhoenixTriggeredAbility(final ChandrasPhoenixTriggeredAbility ability) {
public ChandrasPhoenixTriggeredAbility copy() {return new ChandrasPhoenixTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent is dealt damage by a red instant or sorcery spell you control or by a red planeswalker you control, return {this} from your graveyard to your hand.";
public class ChandraTheFirebrand extends CardImpl {
public ChandraTheFirebrand(UUID ownerId) {
public ChandraTheFirebrand(final ChandraTheFirebrand card) {
public ChandraTheFirebrand copy() {return new ChandraTheFirebrand(this);
class ChandraTheFirebrandAbility extends DelayedTriggeredAbility {
ChandraTheFirebrandAbility() {
ChandraTheFirebrandAbility(final ChandraTheFirebrandAbility ability) {
public ChandraTheFirebrandAbility copy() {return new ChandraTheFirebrandAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When you cast your next instant or sorcery spell this turn, copy that spell. You may choose new targets for the copy.";
public class ChasmDrake extends CardImpl {
public ChasmDrake(UUID ownerId) {
public ChasmDrake(final ChasmDrake card) {
public ChasmDrake copy() {return new ChasmDrake(this);
public class CircleOfFlame extends CardImpl {
public CircleOfFlame(UUID ownerId) {
public CircleOfFlame(final CircleOfFlame card) {
public CircleOfFlame copy() {return new CircleOfFlame(this);
class CircleOfFlameTriggeredAbility extends TriggeredAbilityImpl {
public CircleOfFlameTriggeredAbility() {
public CircleOfFlameTriggeredAbility(final CircleOfFlameTriggeredAbility ability) {
public CircleOfFlameTriggeredAbility copy() {return new CircleOfFlameTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return false;
public class CrimsonMage extends CardImpl {
public CrimsonMage(UUID ownerId) {
public CrimsonMage(final CrimsonMage card) {
public CrimsonMage copy() {return new CrimsonMage(this);
public class CrownOfEmpires extends CardImpl {
public CrownOfEmpires(UUID ownerId) {
public CrownOfEmpires(final CrownOfEmpires card) {
public CrownOfEmpires copy() {return new CrownOfEmpires(this);
class CrownOfEmpiresEffect extends OneShotEffect {
public CrownOfEmpiresEffect() {
public CrownOfEmpiresEffect(CrownOfEmpiresEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public CrownOfEmpiresEffect copy() {return new CrownOfEmpiresEffect(this);
class CrownOfEmpiresControlEffect extends ContinuousEffectImpl {
public CrownOfEmpiresControlEffect() {
public CrownOfEmpiresControlEffect(final CrownOfEmpiresControlEffect effect) {
public CrownOfEmpiresControlEffect copy() {return new CrownOfEmpiresControlEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(controllerId, game);return false;
public String getText(Mode mode) {return "Gain control of {this}";
public class DevouringSwarm extends CardImpl {
public DevouringSwarm(UUID ownerId) {
public DevouringSwarm(final DevouringSwarm card) {
public DevouringSwarm copy() {return new DevouringSwarm(this);
public class Divination extends CardImpl {
public Divination (UUID ownerId) {
public Divination (final Divination card) {
public Divination copy() {return new Divination(this);
public class DivineFavor extends CardImpl {
public DivineFavor(UUID ownerId) {
public DivineFavor(final DivineFavor card) {
public DivineFavor copy() {return new DivineFavor(this);
public class DoublingChant extends CardImpl {
public DoublingChant(UUID ownerId) {
public DoublingChant(final DoublingChant card) {
public DoublingChant copy() {return new DoublingChant(this);
class DoublingChantEffect extends OneShotEffect {
public DoublingChantEffect() {
public DoublingChantEffect(final DoublingChantEffect effect) {
public DoublingChantEffect copy() {return new DoublingChantEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return new DriftingShade(this);
public class DruidicSatchel extends CardImpl {
public DruidicSatchel(UUID ownerId) {
public DruidicSatchel(final DruidicSatchel card) {
public DruidicSatchel copy() {return new DruidicSatchel(this);
class DruidicSatchelEffect extends OneShotEffect {
public DruidicSatchelEffect() {
public DruidicSatchelEffect(final DruidicSatchelEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DruidicSatchelEffect copy() {return new DruidicSatchelEffect(this);
public class DungroveElder extends CardImpl {
public DungroveElder (UUID ownerId) {
public DungroveElder (final DungroveElder card) {
public DungroveElder copy() {return new DungroveElder(this);
public class DuskhunterBat extends CardImpl {
public DuskhunterBat(UUID ownerId) {
public DuskhunterBat(final DuskhunterBat card) {
public DuskhunterBat copy() {return new DuskhunterBat(this);
public class Firebreathing extends CardImpl {
public Firebreathing(UUID ownerId) {
public Firebreathing(final Firebreathing card) {
public Firebreathing copy() {return new Firebreathing(this);
public class Flight extends CardImpl {
public Flight(UUID ownerId) {
public Flight(final Flight card) {
public Flight copy() {return new Flight(this);
public class FrostBreath extends CardImpl {
public FrostBreath(UUID ownerId) {
public FrostBreath(final FrostBreath card) {
public FrostBreath copy() {return new FrostBreath(this);
public class FurybornHellkite extends CardImpl {
public FurybornHellkite(UUID ownerId) {
public FurybornHellkite(final FurybornHellkite card) {
public FurybornHellkite copy() {return new FurybornHellkite(this);
public class GarrukPrimalHunter extends CardImpl {
public GarrukPrimalHunter(UUID ownerId) {
public GarrukPrimalHunter(final GarrukPrimalHunter card) {
public GarrukPrimalHunter copy() {return new GarrukPrimalHunter(this);
class GarrukPrimalHunterEffect extends OneShotEffect {
GarrukPrimalHunterEffect() {
GarrukPrimalHunterEffect(final GarrukPrimalHunterEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GarrukPrimalHunterEffect copy() {return new GarrukPrimalHunterEffect(this);
public class GarruksHorde extends CardImpl {
public GarruksHorde(UUID ownerId) {
public GarruksHorde(final GarruksHorde card) {
public GarruksHorde copy() {return new GarruksHorde(this);
public class GideonsAvenger extends CardImpl {
public GideonsAvenger(UUID ownerId) {
public GideonsAvenger(final GideonsAvenger card) {
public GideonsAvenger copy() {return new GideonsAvenger(this);
public class GideonsLawkeeper extends CardImpl {
public GideonsLawkeeper(UUID ownerId) {
public GideonsLawkeeper(final GideonsLawkeeper card) {
public GideonsLawkeeper copy() {return new GideonsLawkeeper(this);
public class GladecoverScout extends CardImpl {
public GladecoverScout(UUID ownerId) {
public GladecoverScout(final GladecoverScout card) {
public GladecoverScout copy() {return new GladecoverScout(this);
public class GoblinBangchuckers extends CardImpl {
public GoblinBangchuckers(UUID ownerId) {
public GoblinBangchuckers(final GoblinBangchuckers card) {
public GoblinBangchuckers copy() {return new GoblinBangchuckers(this);
class GoblinBangchuckersEffect extends OneShotEffect {
public GoblinBangchuckersEffect() {
public GoblinBangchuckersEffect(GoblinBangchuckersEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return true;return false;
public GoblinBangchuckersEffect copy() {return new GoblinBangchuckersEffect(this);
public class GorehornMinotaurs extends CardImpl {
public GorehornMinotaurs(UUID ownerId) {
public GorehornMinotaurs(final GorehornMinotaurs card) {
public GorehornMinotaurs copy() {return new GorehornMinotaurs(this);
public class GrandAbolisher extends CardImpl {
public GrandAbolisher(UUID ownerId) {
public GrandAbolisher(final GrandAbolisher card) {
public GrandAbolisher copy() {return new GrandAbolisher(this);
public GrandAbolisherEffect() {
public GrandAbolisherEffect(final GrandAbolisherEffect effect) {
public GrandAbolisherEffect copy() {return new GrandAbolisherEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast spells or activate abilities of artifacts, creatures, or enchantments during the turns of " + activePlayer.getLogName() +return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL || event.getType() == GameEvent.EventType.ACTIVATE_ABILITY;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return permanent.getCardType().contains(CardType.ARTIFACT) || permanent.getCardType().contains(CardType.CREATURE)return false;
public class Greatsword extends CardImpl {
public Greatsword(UUID ownerId) {
public Greatsword(final Greatsword card) {
public Greatsword copy() {return new Greatsword(this);return new GriffinRider(this);
public class GrimLavamancer extends CardImpl {
public GrimLavamancer(UUID ownerId) {
public GrimLavamancer(final GrimLavamancer card) {
public GrimLavamancer copy() {return new GrimLavamancer(this);
public class GuardiansPledge extends CardImpl {
public GuardiansPledge (UUID ownerId) {
public GuardiansPledge (final GuardiansPledge card) {
public GuardiansPledge copy() {return new GuardiansPledge(this);
public class HideousVisage extends CardImpl {
public HideousVisage(UUID ownerId) {
public HideousVisage(final HideousVisage card) {
public HideousVisage copy() {return new HideousVisage(this);
public class HuntersInsight extends CardImpl {
public HuntersInsight(UUID ownerId) {
public HuntersInsight(final HuntersInsight card) {
public HuntersInsight copy() {return new HuntersInsight(this);
class HuntersInsightTriggeredAbility extends TriggeredAbilityImpl {
public HuntersInsightTriggeredAbility() {
public HuntersInsightTriggeredAbility(final HuntersInsightTriggeredAbility ability) {
public HuntersInsightTriggeredAbility copy() {return new HuntersInsightTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER || event.getType() == EventType.DAMAGED_PLANESWALKER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever this creature deals combat damage to a player or planeswalker, draw that many cards.";
public class JaceMemoryAdept extends CardImpl {
public JaceMemoryAdept(UUID ownerId) {
public class JacesArchivist extends CardImpl {
public JacesArchivist(UUID ownerId) {
public JacesArchivist(final JacesArchivist card) {
public JacesArchivist copy() {return new JacesArchivist(this);
class JacesArchivistEffect extends OneShotEffect {
JacesArchivistEffect() {
JacesArchivistEffect(final JacesArchivistEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public JacesArchivistEffect copy() {return new JacesArchivistEffect(this);
public class JadeMage extends CardImpl {
public JadeMage(UUID ownerId) {
public JadeMage(final JadeMage card) {
public JadeMage copy() {return new JadeMage(this);
public class KiteShield extends CardImpl {
public KiteShield (UUID ownerId) {
public KiteShield (final KiteShield card) {
public KiteShield copy() {return new KiteShield(this);
public class Levitation extends CardImpl {
public Levitation (UUID ownerId) {
public Levitation (final Levitation card) {
public Levitation copy() {return new Levitation(this);return new Lifelink(this);
public class LordOfTheUnreal extends CardImpl {
public LordOfTheUnreal(UUID ownerId) {
public LordOfTheUnreal(final LordOfTheUnreal card) {
public LordOfTheUnreal copy() {return new LordOfTheUnreal(this);
public class LurkingCrocodile extends CardImpl {
public LurkingCrocodile(UUID ownerId) {
public LurkingCrocodile(final LurkingCrocodile card) {
public LurkingCrocodile copy() {return new LurkingCrocodile(this);
public class Manalith extends CardImpl {
public Manalith (UUID ownerId) {
public Manalith (final Manalith card) {
public Manalith copy() {return new Manalith(this);
public class MasterThief extends CardImpl {
public MasterThief(UUID ownerId) {
public MasterThief(final MasterThief card) {
public MasterThief copy() {return new MasterThief(this);
public class MindUnbound extends CardImpl {
public MindUnbound(UUID ownerId) {
public MindUnbound(final MindUnbound card) {
public MindUnbound copy() {return new MindUnbound(this);
public class Monomania extends CardImpl {
public Monomania(UUID ownerId) {
public Monomania(final Monomania card) {
public Monomania copy() {return new Monomania(this);
class MonomaniaEffect extends OneShotEffect {
public MonomaniaEffect() {
public MonomaniaEffect(final MonomaniaEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MonomaniaEffect copy() {return new MonomaniaEffect(this);
public class OnyxMage extends CardImpl {
public OnyxMage(UUID ownerId) {
public OnyxMage(final OnyxMage card) {
public OnyxMage copy() {return new OnyxMage(this);return new PeregrineGriffin(this);
public class PersonalSanctuary extends CardImpl {
public PersonalSanctuary(UUID ownerId) {
public PersonalSanctuary(final PersonalSanctuary card) {
public PersonalSanctuary copy() {return new PersonalSanctuary(this);
class PersonalSanctuaryEffect extends PreventionEffectImpl {
public PersonalSanctuaryEffect() {
public PersonalSanctuaryEffect(PersonalSanctuaryEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return super.applies(event, source, game);return false;
public PersonalSanctuaryEffect copy() {return new PersonalSanctuaryEffect(this);
public class PhantasmalBear extends CardImpl {
public PhantasmalBear(UUID ownerId) {
public PhantasmalBear(final PhantasmalBear card) {
public PhantasmalBear copy() {return new PhantasmalBear(this);
public class PhantasmalDragon extends CardImpl {
public PhantasmalDragon(UUID ownerId) {
public PhantasmalDragon(final PhantasmalDragon card) {
public PhantasmalDragon copy() {return new PhantasmalDragon(this);
public class PhantasmalImage extends CardImpl {
ApplyToPermanent phantasmalImageApplier = new ApplyToPermanent() {
public Boolean apply(Game game, Permanent permanent) {return true;
public Boolean apply(Game game, MageObject mageObject) {return true;
public PhantasmalImage(UUID ownerId) {
public PhantasmalImage(final PhantasmalImage card) {
public PhantasmalImage copy() {return new PhantasmalImage(this);
public class PrideGuardian extends CardImpl {
public PrideGuardian(UUID ownerId) {
public PrideGuardian(final PrideGuardian card) {
public PrideGuardian copy() {return new PrideGuardian(this);
public class PrimordialHydra extends CardImpl {
public PrimordialHydra(UUID ownerId) {
public PrimordialHydra(final PrimordialHydra card) {
public PrimordialHydra copy() {return new PrimordialHydra(this);
class PrimordialHydraDoubleEffect extends OneShotEffect {
PrimordialHydraDoubleEffect() {
PrimordialHydraDoubleEffect(final PrimordialHydraDoubleEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PrimordialHydraDoubleEffect copy() {return new PrimordialHydraDoubleEffect(this);
public class QuicksilverAmulet extends CardImpl {
public QuicksilverAmulet(UUID ownerId) {
public QuicksilverAmulet(final QuicksilverAmulet card) {
public QuicksilverAmulet copy() {return new QuicksilverAmulet(this);
public class Reclaim extends CardImpl {
public Reclaim(UUID ownerId) {
public Reclaim(final Reclaim card) {
public Reclaim copy() {return new Reclaim(this);
public class RitesOfFlourishing extends CardImpl {
public RitesOfFlourishing(UUID ownerId) {
public RitesOfFlourishing(final RitesOfFlourishing card) {
public RitesOfFlourishing copy() {return new RitesOfFlourishing(this);
class RitesOfFlourishingAbility extends TriggeredAbilityImpl {
public RitesOfFlourishingAbility() {
public RitesOfFlourishingAbility(final RitesOfFlourishingAbility ability) {
public RitesOfFlourishingAbility copy() {return new RitesOfFlourishingAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DRAW_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "At the beginning of each player's draw step, that player draws an additional card.";
public class RuneScarredDemon extends CardImpl {
public RuneScarredDemon (UUID ownerId) {
public RuneScarredDemon (final RuneScarredDemon card) {
public RuneScarredDemon copy() {return new RuneScarredDemon(this);
public class RustedSentinel extends CardImpl {
public RustedSentinel(UUID ownerId) {
public RustedSentinel(final RustedSentinel card) {
public RustedSentinel copy() {return new RustedSentinel(this);
public class ScepterOfEmpires extends CardImpl {
public ScepterOfEmpires(UUID ownerId) {
public ScepterOfEmpires(final ScepterOfEmpires card) {
public ScepterOfEmpires copy() {return new ScepterOfEmpires(this);
class ScepterOfEmpiresEffect extends OneShotEffect {
public ScepterOfEmpiresEffect() {
public ScepterOfEmpiresEffect(ScepterOfEmpiresEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ScepterOfEmpiresEffect copy() {return new ScepterOfEmpiresEffect(this);
public class Scrambleverse extends CardImpl {
public Scrambleverse(UUID ownerId) {
public Scrambleverse(final Scrambleverse card) {
public Scrambleverse copy() {return new Scrambleverse(this);
class ScrambleverseEffect extends OneShotEffect {
public ScrambleverseEffect() {
public ScrambleverseEffect(ScrambleverseEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ScrambleverseEffect copy() {return new ScrambleverseEffect(this);return new Skinshifter(this);
private class RhinoToken extends Token {
public RhinoToken() {
private class BirdToken extends Token {
public BirdToken() {
private class PlantToken extends Token {
public PlantToken() {
public class SolemnSimulacrum extends CardImpl {
public SolemnSimulacrum(UUID ownerId) {
public SolemnSimulacrum(final SolemnSimulacrum card) {
public SolemnSimulacrum copy() {return new SolemnSimulacrum(this);
public class SorinsThirst extends CardImpl {
public SorinsThirst (UUID ownerId) {
public SorinsThirst (final SorinsThirst card) {
public SorinsThirst copy() {return new SorinsThirst(this);
public class SorinsVengeance extends CardImpl {
public SorinsVengeance (UUID ownerId) {
public SorinsVengeance (final SorinsVengeance card) {
public SorinsVengeance copy() {return new SorinsVengeance(this);
public class SphinxOfUthuun extends CardImpl {
public SphinxOfUthuun(UUID ownerId) {
public SphinxOfUthuun(final SphinxOfUthuun card) {
public SphinxOfUthuun copy() {return new SphinxOfUthuun(this);
class SphinxOfUthuunEffect extends OneShotEffect {
public SphinxOfUthuunEffect() {
public SphinxOfUthuunEffect(final SphinxOfUthuunEffect effect) {
public SphinxOfUthuunEffect copy() {return new SphinxOfUthuunEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class SpiritMantle extends CardImpl {
public SpiritMantle(UUID ownerId) {
public SpiritMantle(final SpiritMantle card) {
public SpiritMantle copy() {return new SpiritMantle(this);
public class StampedingRhino extends CardImpl {
public StampedingRhino(UUID ownerId) {
public StampedingRhino(final StampedingRhino card) {
public StampedingRhino copy() {return new StampedingRhino(this);
public class StaveOff extends CardImpl {
public StaveOff(UUID ownerId) {
public StaveOff(final StaveOff card) {
public StaveOff copy() {return new StaveOff(this);
public class StingerflingSpider extends CardImpl {
public StingerflingSpider(UUID ownerId) {
public StingerflingSpider(final StingerflingSpider card) {
public StingerflingSpider copy() {return new StingerflingSpider(this);
public class StonehornDignitary extends CardImpl {
public StonehornDignitary(UUID ownerId) {
public StonehornDignitary(final StonehornDignitary card) {
public StonehornDignitary copy() {return new StonehornDignitary(this);
class SkipNextCombatEffect extends OneShotEffect {
public SkipNextCombatEffect() {
public SkipNextCombatEffect(SkipNextCombatEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SkipNextCombatEffect copy() {return new SkipNextCombatEffect();
public class StormbloodBerserker extends CardImpl {
public StormbloodBerserker(UUID ownerId) {
public StormbloodBerserker(final StormbloodBerserker card) {
public StormbloodBerserker copy() {return new StormbloodBerserker(this);
public class SundialOfTheInfinite extends CardImpl {
public SundialOfTheInfinite(UUID ownerId) {
public SundialOfTheInfinite(final SundialOfTheInfinite card) {
public SundialOfTheInfinite copy() {return new SundialOfTheInfinite(this);
public class SuturedGhoul extends CardImpl {
public SuturedGhoul(UUID ownerId) {
public SuturedGhoul(final SuturedGhoul card) {
public SuturedGhoul copy() {return new SuturedGhoul(this);
class SuturedGhoulEffect extends OneShotEffect {
public SuturedGhoulEffect() {
public SuturedGhoulEffect(SuturedGhoulEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public SuturedGhoulEffect copy() {return new SuturedGhoulEffect(this);
class SuturedGhoulPowerCount implements DynamicValue {return instance;
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amount;
public DynamicValue copy() {return getInstance();
public String toString() {return "1";
public String getMessage() {return "the total power of the exiled cards";
class SuturedGhoulToughnessCount implements DynamicValue {return instance;
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amount;
public DynamicValue copy() {return getInstance();
public String toString() {return "1";
public String getMessage() {return "the total toughness of the exiled cards";return new SwiftfootBoots(this);
public class TasteOfBlood extends CardImpl {
public TasteOfBlood (UUID ownerId) {
public TasteOfBlood (final TasteOfBlood card) {
public TasteOfBlood copy() {return new TasteOfBlood(this);return new TectonicRift(this);
public class ThranGolem extends CardImpl {
public ThranGolem(UUID ownerId) {
public ThranGolem(final ThranGolem card) {
public ThranGolem copy() {return new ThranGolem(this);
public class ThroneOfEmpires extends CardImpl {
public ThroneOfEmpires(UUID ownerId) {
public ThroneOfEmpires(final ThroneOfEmpires card) {
public ThroneOfEmpires copy() {return new ThroneOfEmpires(this);
class ThroneOfEmpiresEffect extends OneShotEffect {
public ThroneOfEmpiresEffect() {
public ThroneOfEmpiresEffect(ThroneOfEmpiresEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public ThroneOfEmpiresEffect copy() {return new ThroneOfEmpiresEffect(this);return new TimelyReinforcements(this);
public boolean apply(Game game, Ability source) {
public class Trollhide extends CardImpl {
public Trollhide (UUID ownerId) {
public Trollhide (final Trollhide card) {
public Trollhide copy() {return new Trollhide(this);
public class TurnToFrog extends CardImpl {
public TurnToFrog(UUID ownerId) {
public TurnToFrog(final TurnToFrog card) {
public TurnToFrog copy() {return new TurnToFrog(this);
public class VampireOutcasts extends CardImpl {
public VampireOutcasts(UUID ownerId) {
public VampireOutcasts(final VampireOutcasts card) {
public VampireOutcasts copy() {return new VampireOutcasts(this);
public class VengefulPharaoh extends CardImpl {
public VengefulPharaoh(UUID ownerId) {
public VengefulPharaoh(final VengefulPharaoh card) {
public VengefulPharaoh copy() {return new VengefulPharaoh(this);
class VengefulPharaohTriggeredAbility extends TriggeredAbilityImpl {
public VengefulPharaohTriggeredAbility() {
public VengefulPharaohTriggeredAbility(final VengefulPharaohTriggeredAbility ability) {
public VengefulPharaohTriggeredAbility copy() {return new VengefulPharaohTriggeredAbility(this);
public boolean checkInterveningIfClause(Game game) {return mor.refersTo(this.getSourceObject(game), game);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER || event.getType() == EventType.DAMAGED_PLANESWALKER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "Whenever combat damage is dealt to you or a planeswalker you control, if {this} is in your graveyard, destroy target attacking creature, then put {this} on top of your library.";
class VengefulPharaohEffect extends OneShotEffect {
public VengefulPharaohEffect() {
public VengefulPharaohEffect(final VengefulPharaohEffect effect) {
public VengefulPharaohEffect copy() {return new VengefulPharaohEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VisionsOfBeyond extends CardImpl {
public VisionsOfBeyond(UUID ownerId) {
public VisionsOfBeyond(final VisionsOfBeyond card) {
public VisionsOfBeyond copy() {return new VisionsOfBeyond(this);
class VisionsOfBeyondEffect extends OneShotEffect {
public VisionsOfBeyondEffect() {
public VisionsOfBeyondEffect(VisionsOfBeyondEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public VisionsOfBeyondEffect copy() {return new VisionsOfBeyondEffect(this);
public class VolcanicDragon extends CardImpl {
public VolcanicDragon(UUID ownerId) {
public VolcanicDragon(final VolcanicDragon card) {
public VolcanicDragon copy() {return new VolcanicDragon(this);
public class WallOfTorches extends CardImpl {
public WallOfTorches(UUID ownerId) {
public WallOfTorches(final WallOfTorches card) {
public WallOfTorches copy() {return new WallOfTorches(this);
public class WarstormSurge extends CardImpl {
public WarstormSurge(UUID ownerId) {
public WarstormSurge(final WarstormSurge card) {
public WarstormSurge copy() {return new WarstormSurge(this);
class WarstormSurgeTriggeredAbility extends TriggeredAbilityImpl {
public WarstormSurgeTriggeredAbility() {
public WarstormSurgeTriggeredAbility(WarstormSurgeTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature enters the battlefield under your control, it deals damage equal to its power to target creature or player.";
public WarstormSurgeTriggeredAbility copy() {return new WarstormSurgeTriggeredAbility(this);
class WarstormSurgeEffect extends OneShotEffect {
public WarstormSurgeEffect() {
public WarstormSurgeEffect(final WarstormSurgeEffect effect) {
public WarstormSurgeEffect copy() {return new WarstormSurgeEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class Worldslayer extends CardImpl {
public Worldslayer(UUID ownerId) {
public Worldslayer(final Worldslayer card) {
public Worldslayer copy() {return new Worldslayer(this);
class WorldslayerTriggeredAbility extends TriggeredAbilityImpl {
WorldslayerTriggeredAbility() {
WorldslayerTriggeredAbility(final WorldslayerTriggeredAbility ability) {
public WorldslayerTriggeredAbility copy() {return new WorldslayerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return damageEvent.isCombatDamage() && p != null && p.getAttachments().contains(this.getSourceId());
public String getRule() {return "Whenever equipped creature deals combat damage to a player, destroy all permanents other than {this}.";
class WorldslayerEffect extends OneShotEffect {
public WorldslayerEffect() {
public WorldslayerEffect(final WorldslayerEffect effect) {
public WorldslayerEffect copy() {return new WorldslayerEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class WringFlesh extends CardImpl {
public WringFlesh(UUID ownerId) {
public WringFlesh(final WringFlesh card) {
public WringFlesh copy() {return new WringFlesh(this);
public class ZombieGoliath extends CardImpl {
public ZombieGoliath(UUID ownerId) {
public ZombieGoliath(final ZombieGoliath card) {
public ZombieGoliath copy() {return new ZombieGoliath(this);
public class ZombieInfestation extends CardImpl {
public ZombieInfestation(UUID ownerId) {
public ZombieInfestation(final ZombieInfestation card) {
public ZombieInfestation copy() {return new ZombieInfestation(this);
public class AjaniCallerOfThePride extends CardImpl {
public AjaniCallerOfThePride(UUID ownerId) {
public void build() {
public AjaniCallerOfThePride(final AjaniCallerOfThePride card) {
public AjaniCallerOfThePride copy() {return new AjaniCallerOfThePride(this);
public class AjanisSunstriker extends CardImpl {
public AjanisSunstriker(UUID ownerId) {
public AjanisSunstriker(final AjanisSunstriker card) {
public AjanisSunstriker copy() {return new AjanisSunstriker(this);
public class AkromasMemorial extends CardImpl {
public AkromasMemorial(UUID ownerId) {
public void build() {
public AkromasMemorial(final AkromasMemorial card) {
public AkromasMemorial copy() {return new AkromasMemorial(this);
public class Archaeomancer extends CardImpl {
public Archaeomancer(UUID ownerId) {
public Archaeomancer(final Archaeomancer card) {
public Archaeomancer copy() {return new Archaeomancer(this);
public class ArcticAven extends CardImpl {
public ArcticAven(UUID ownerId) {
public ArcticAven(final ArcticAven card) {
public ArcticAven copy() {return new ArcticAven(this);
public class ArmsDealer extends CardImpl {
public ArmsDealer(UUID ownerId) {
public ArmsDealer(final ArmsDealer card) {
public ArmsDealer copy() {return new ArmsDealer(this);
public class BattleflightEagle extends CardImpl {
public BattleflightEagle(UUID ownerId) {
public void build() {
public BattleflightEagle(final BattleflightEagle card) {
public BattleflightEagle copy() {return new BattleflightEagle(this);
public class BloodhunterBat extends CardImpl {
public BloodhunterBat(UUID ownerId) {
public BloodhunterBat(final BloodhunterBat card) {
public BloodhunterBat copy() {return new BloodhunterBat(this);
public class BloodReckoning extends CardImpl {
public BloodReckoning(UUID ownerId) {
public BloodReckoning(final BloodReckoning card) {
public BloodReckoning copy() {return new BloodReckoning(this);
class BloodReckoningTriggeredAbility extends TriggeredAbilityImpl {
public BloodReckoningTriggeredAbility() {
public BloodReckoningTriggeredAbility(final BloodReckoningTriggeredAbility ability) {
public BloodReckoningTriggeredAbility copy() {return new BloodReckoningTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {
public class BondBeetle extends CardImpl {
public BondBeetle(UUID ownerId) {
public BondBeetle(final BondBeetle card) {
public BondBeetle copy() {return new BondBeetle(this);
public class BoundlessRealms extends CardImpl {
public BoundlessRealms(UUID ownerId) {
public BoundlessRealms(final BoundlessRealms card) {
public BoundlessRealms copy() {return new BoundlessRealms(this);
class BoundlessRealmsEffect extends OneShotEffect {
public BoundlessRealmsEffect() {
public BoundlessRealmsEffect(final BoundlessRealmsEffect effect) {
public BoundlessRealmsEffect copy() {return new BoundlessRealmsEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class CaptainsCall extends CardImpl {
public CaptainsCall(UUID ownerId) {
public void build() {
public CaptainsCall(final CaptainsCall card) {
public CaptainsCall copy() {return new CaptainsCall(this);
public class CathedralOfWar extends CardImpl {
public CathedralOfWar(UUID ownerId) {
public CathedralOfWar(final CathedralOfWar card) {
public CathedralOfWar copy() {return new CathedralOfWar(this);
public class ChandrasFury extends CardImpl {
public ChandrasFury(UUID ownerId) {
public ChandrasFury(final ChandrasFury card) {
public ChandrasFury copy() {return new ChandrasFury(this);
public class Chronomaton extends CardImpl {
public Chronomaton(UUID ownerId) {
public void build() {
public Chronomaton(final Chronomaton card) {
public Chronomaton copy() {return new Chronomaton(this);
public class CleaverRiot extends CardImpl {
public CleaverRiot(UUID ownerId) {
public CleaverRiot(final CleaverRiot card) {
public CleaverRiot copy() {return new CleaverRiot(this);
public class ClockOfOmens extends CardImpl {
public ClockOfOmens(UUID ownerId) {
public ClockOfOmens(final ClockOfOmens card) {
public ClockOfOmens copy() {return new ClockOfOmens(this);
public class CourtlyProvocateur extends CardImpl {
public CourtlyProvocateur(UUID ownerId) {
public CourtlyProvocateur(final CourtlyProvocateur card) {
public CourtlyProvocateur copy() {return new CourtlyProvocateur(this);
public class CowerInFear extends CardImpl {
public CowerInFear(UUID ownerId) {
public CowerInFear(final CowerInFear card) {
public CowerInFear copy() {return new CowerInFear(this);
public class Craterize extends CardImpl {
public Craterize(UUID ownerId) {
public Craterize(final Craterize card) {
public Craterize copy() {return new Craterize(this);
public class CrimsonMuckwader extends CardImpl {
public CrimsonMuckwader(UUID ownerId) {
public CrimsonMuckwader(final CrimsonMuckwader card) {
public CrimsonMuckwader copy() {return new CrimsonMuckwader(this);
public class CripplingBlight extends CardImpl {
public CripplingBlight(UUID ownerId) {
public CripplingBlight(final CripplingBlight card) {
public CripplingBlight copy() {return new CripplingBlight(this);
public class CrusaderOfOdric extends CardImpl {
public CrusaderOfOdric(UUID ownerId) {
public void build() {
public CrusaderOfOdric(final CrusaderOfOdric card) {
public CrusaderOfOdric copy() {return new CrusaderOfOdric(this);
public class DiabolicRevelation extends CardImpl {
public DiabolicRevelation(UUID ownerId) {
public DiabolicRevelation(final DiabolicRevelation card) {
public DiabolicRevelation copy() {return new DiabolicRevelation(this);
class DiabolicRevelationEffect extends OneShotEffect {
public DiabolicRevelationEffect() {
public DiabolicRevelationEffect(final DiabolicRevelationEffect effect) {
public DiabolicRevelationEffect copy() {return new DiabolicRevelationEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class DragonHatchling extends CardImpl {
public DragonHatchling(UUID ownerId) {
public DragonHatchling(final DragonHatchling card) {
public DragonHatchling copy() {return new DragonHatchling(this);
public class DuskmantleProwler extends CardImpl {
public DuskmantleProwler(UUID ownerId) {
public DuskmantleProwler(final DuskmantleProwler card) {
public DuskmantleProwler copy() {return new DuskmantleProwler(this);
public class DutyBoundDead extends CardImpl {
public DutyBoundDead(UUID ownerId) {
public DutyBoundDead(final DutyBoundDead card) {
public DutyBoundDead copy() {return new DutyBoundDead(this);
public class ElderscaleWurm extends CardImpl {
public ElderscaleWurm(UUID ownerId) {
public ElderscaleWurm(final ElderscaleWurm card) {
public ElderscaleWurm copy() {return new ElderscaleWurm(this);
public boolean apply(Game game, Ability source) {return true;return new ElderscaleWurmSetLifeEffect(this);
class ElderscaleWurmReplacementEffect extends ReplacementEffectImpl {
public ElderscaleWurmReplacementEffect() {
public ElderscaleWurmReplacementEffect(final ElderscaleWurmReplacementEffect effect) {
public ElderscaleWurmReplacementEffect copy() {return new ElderscaleWurmReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class Encrust extends CardImpl {
public Encrust(UUID ownerId) {
public Encrust(final Encrust card) {
public Encrust copy() {return new Encrust(this);
public class FaerieInvaders extends CardImpl {
public FaerieInvaders(UUID ownerId) {
public FaerieInvaders(final FaerieInvaders card) {
public FaerieInvaders copy() {return new FaerieInvaders(this);
public class FaithsReward extends CardImpl {
public FaithsReward(UUID ownerId) {
public FaithsReward(final FaithsReward card) {
public FaithsReward copy() {return new FaithsReward(this);
class FaithsRewardEffect extends OneShotEffect {
FaithsRewardEffect() {
FaithsRewardEffect(final FaithsRewardEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public FaithsRewardEffect copy() {return new FaithsRewardEffect(this);
class FaithsRewardWatcher extends Watcher {
public FaithsRewardWatcher() {
public FaithsRewardWatcher(final FaithsRewardWatcher watcher) {
public void watch(GameEvent event, Game game) {
public FaithsRewardWatcher copy() {return new FaithsRewardWatcher(this);
public void reset() {
public class Fervor extends CardImpl {
public Fervor(UUID ownerId) {
public Fervor(final Fervor card) {
public Fervor copy() {return new Fervor(this);
public class FireElemental extends CardImpl {
public FireElemental(UUID ownerId) {
public FireElemental(final FireElemental card) {
public FireElemental copy() {return new FireElemental(this);
public class FirewingPhoenix extends CardImpl {
public FirewingPhoenix(UUID ownerId) {
public FirewingPhoenix(final FirewingPhoenix card) {
public FirewingPhoenix copy() {return new FirewingPhoenix(this);
public class FlamesOfTheFirebrand extends CardImpl {
public FlamesOfTheFirebrand(UUID ownerId) {
public FlamesOfTheFirebrand(final FlamesOfTheFirebrand card) {
public FlamesOfTheFirebrand copy() {return new FlamesOfTheFirebrand(this);
public class FlinthoofBoar extends CardImpl {
public FlinthoofBoar(UUID ownerId) {
public FlinthoofBoar(final FlinthoofBoar card) {
public FlinthoofBoar copy() {return new FlinthoofBoar(this);
public class FungalSprouting extends CardImpl {
public FungalSprouting(UUID ownerId) {
public FungalSprouting(final FungalSprouting card) {
public FungalSprouting copy() {return new FungalSprouting(this);
class FungalSproutingEffect extends OneShotEffect {
public FungalSproutingEffect() {
public FungalSproutingEffect(final FungalSproutingEffect effect) {
public FungalSproutingEffect copy() {return new FungalSproutingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GemOfBecoming extends CardImpl {
public GemOfBecoming(UUID ownerId) {
public GemOfBecoming(final GemOfBecoming card) {
public GemOfBecoming copy() {return new GemOfBecoming(this);
class GemOfBecomingEffect extends OneShotEffect {
public GemOfBecomingEffect() {
public GemOfBecomingEffect(final GemOfBecomingEffect effect) {
public GemOfBecomingEffect copy() {return new GemOfBecomingEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;
private void searchLand(Player player, Ability source, Game game, Cards cards, String subtype) {
public class GildedLotus extends CardImpl {
public GildedLotus(UUID ownerId) {
public GildedLotus(final GildedLotus card) {
public GildedLotus copy() {return new GildedLotus(this);
public class GoblinBattleJester extends CardImpl {
public GoblinBattleJester(UUID ownerId) {
public GoblinBattleJester(final GoblinBattleJester card) {
public GoblinBattleJester copy() {return new GoblinBattleJester(this);
public void build() {return new GriffinProtector(this);
public class GroundSeal extends CardImpl {
public GroundSeal(UUID ownerId) {
public GroundSeal(final GroundSeal card) {
public GroundSeal copy() {return new GroundSeal(this);
public GroundSealEffect() {
public GroundSealEffect(final GroundSealEffect effect) {
public GroundSealEffect copy() {return new GroundSealEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class HarborBandit extends CardImpl {
public HarborBandit(UUID ownerId) {
public HarborBandit(final HarborBandit card) {
public HarborBandit copy() {return new HarborBandit(this);
public class HealerOfThePride extends CardImpl {
public HealerOfThePride(UUID ownerId) {
public void build() {
public HealerOfThePride(final HealerOfThePride card) {
public HealerOfThePride copy() {return new HealerOfThePride(this);
public class HellionCrucible extends CardImpl {
public HellionCrucible(UUID ownerId) {
public HellionCrucible(final HellionCrucible card) {
public HellionCrucible copy() {return new HellionCrucible(this);
class HellionToken extends Token {
public HellionToken() {
public class Hydrosurge extends CardImpl {
public Hydrosurge(UUID ownerId) {
public Hydrosurge(final Hydrosurge card) {
public Hydrosurge copy() {return new Hydrosurge(this);
public class JacesPhantasm extends CardImpl {
public JacesPhantasm(UUID ownerId) {
public JacesPhantasm(final JacesPhantasm card) {
public JacesPhantasm copy() {return new JacesPhantasm(this);
public class KnightOfGlory extends CardImpl {
public KnightOfGlory(UUID ownerId) {
public KnightOfGlory(final KnightOfGlory card) {
public KnightOfGlory copy() {return new KnightOfGlory(this);
public class KnightOfInfamy extends CardImpl {
public KnightOfInfamy(UUID ownerId) {
public KnightOfInfamy(final KnightOfInfamy card) {
public KnightOfInfamy copy() {return new KnightOfInfamy(this);
public class KrenkoMobBoss extends CardImpl {
public KrenkoMobBoss(UUID ownerId) {
public KrenkoMobBoss(final KrenkoMobBoss card) {
public KrenkoMobBoss copy() {return new KrenkoMobBoss(this);
public class KrenkosCommand extends CardImpl {
public KrenkosCommand(UUID ownerId) {
public KrenkosCommand(final KrenkosCommand card) {
public KrenkosCommand copy() {return new KrenkosCommand(this);
public class LilianaOfTheDarkRealms extends CardImpl {
public LilianaOfTheDarkRealms(UUID ownerId) {
public LilianaOfTheDarkRealms(final LilianaOfTheDarkRealms card) {
public LilianaOfTheDarkRealms copy() {return new LilianaOfTheDarkRealms(this);
class LilianaOfTheDarkRealmsEffect extends ContinuousEffectImpl {
public LilianaOfTheDarkRealmsEffect() {
public LilianaOfTheDarkRealmsEffect(final LilianaOfTheDarkRealmsEffect effect) {
public LilianaOfTheDarkRealmsEffect copy() {return new LilianaOfTheDarkRealmsEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;return false;
class LilianaOfTheDarkRealmsEmblem extends Emblem {
public LilianaOfTheDarkRealmsEmblem() {
public class LilianasShade extends CardImpl {
public LilianasShade(UUID ownerId) {
public LilianasShade(final LilianasShade card) {
public LilianasShade copy() {return new LilianasShade(this);
public class Magmaquake extends CardImpl {
public Magmaquake(UUID ownerId) {
public Magmaquake(final Magmaquake card) {
public Magmaquake copy() {return new Magmaquake(this);
public class MarkOfTheVampire extends CardImpl {
public MarkOfTheVampire(UUID ownerId) {
public MarkOfTheVampire(final MarkOfTheVampire card) {
public MarkOfTheVampire copy() {return new MarkOfTheVampire(this);
public class MasterOfThePearlTrident extends CardImpl {
public MasterOfThePearlTrident(UUID ownerId) {
public MasterOfThePearlTrident(final MasterOfThePearlTrident card) {
public MasterOfThePearlTrident copy() {return new MasterOfThePearlTrident(this);
public class MindclawShaman extends CardImpl {
public MindclawShaman(UUID ownerId) {
public MindclawShaman(final MindclawShaman card) {
public MindclawShaman copy() {return new MindclawShaman(this);
class MindclawShamanEffect extends OneShotEffect {
public MindclawShamanEffect() {
public MindclawShamanEffect(final MindclawShamanEffect effect) {
public MindclawShamanEffect copy() {return new MindclawShamanEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MindSculpt extends CardImpl {
public MindSculpt(UUID ownerId) {
public MindSculpt(final MindSculpt card) {
public MindSculpt copy() {return new MindSculpt(this);
public class MoggFlunkies extends CardImpl {
public MoggFlunkies(UUID ownerId) {
public MoggFlunkies(final MoggFlunkies card) {
public MoggFlunkies copy() {return new MoggFlunkies(this);
public class Murder extends CardImpl {
public Murder(UUID ownerId) {
public Murder(final Murder card) {
public Murder copy() {return new Murder(this);
public class NefaroxOverlordOfGrixis extends CardImpl {
public NefaroxOverlordOfGrixis(UUID ownerId) {
public NefaroxOverlordOfGrixis(final NefaroxOverlordOfGrixis card) {
public NefaroxOverlordOfGrixis copy() {return new NefaroxOverlordOfGrixis(this);
public class OdricMasterTactician extends CardImpl {
public OdricMasterTactician(UUID ownerId) {
public OdricMasterTactician(final OdricMasterTactician card) {
public OdricMasterTactician copy() {return new OdricMasterTactician(this);
class OdricMasterTacticianTriggeredAbility extends TriggeredAbilityImpl {
public OdricMasterTacticianTriggeredAbility() {
public OdricMasterTacticianTriggeredAbility(final OdricMasterTacticianTriggeredAbility ability) {
public OdricMasterTacticianTriggeredAbility copy() {return new OdricMasterTacticianTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public void reset(Game game) {
private void resetEffect() {
private void enableEffect() {
public String getRule() {return "Whenever {this} and at least three other creatures attack, you choose which creatures block this combat and how those creatures block.";
class OdricMasterTacticianEffect extends ReplacementEffectImpl {
public OdricMasterTacticianEffect() {
public OdricMasterTacticianEffect(final OdricMasterTacticianEffect effect) {
public OdricMasterTacticianEffect copy() {return new OdricMasterTacticianEffect(this);
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DECLARING_BLOCKERS;
public boolean applies(GameEvent event, Ability source, Game game) {return true; 
public class Omniscience extends CardImpl {
public Omniscience(UUID ownerId) {
public Omniscience(final Omniscience card) {
public Omniscience copy() {return new Omniscience(this);
class OmniscienceCastingEffect extends ContinuousEffectImpl {
public OmniscienceCastingEffect() {
public OmniscienceCastingEffect(final OmniscienceCastingEffect effect) {
public OmniscienceCastingEffect copy() {return new OmniscienceCastingEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
class IsBeingCastFromHandCondition implements Condition {
public boolean apply(Game game, Ability source) {
public class PredatoryRampage extends CardImpl {
public PredatoryRampage(UUID ownerId) {
public PredatoryRampage(final PredatoryRampage card) {
public PredatoryRampage copy() {return new PredatoryRampage(this);
public class PrimalHuntbeast extends CardImpl {
public PrimalHuntbeast(UUID ownerId) {
public PrimalHuntbeast(final PrimalHuntbeast card) {
public PrimalHuntbeast copy() {return new PrimalHuntbeast(this);
public class PrizedElephant extends CardImpl {
public PrizedElephant(UUID ownerId) {
public PrizedElephant(final PrizedElephant card) {
public PrizedElephant copy() {return new PrizedElephant(this);
public class PublicExecution extends CardImpl {
public PublicExecution(UUID ownerId) {
public PublicExecution(final PublicExecution card) {
public PublicExecution copy() {return new PublicExecution(this);
class PublicExecutionEffect extends OneShotEffect {
public PublicExecutionEffect() {
public PublicExecutionEffect(final PublicExecutionEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PublicExecutionEffect copy() {return new PublicExecutionEffect(this);
public class RainOfBlades extends CardImpl {
public RainOfBlades(UUID ownerId) {
public RainOfBlades(final RainOfBlades card) {
public RainOfBlades copy() {return new RainOfBlades(this);
public class RangersPath extends CardImpl {
public RangersPath(UUID ownerId) {
public RangersPath(final RangersPath card) {
public RangersPath copy() {return new RangersPath(this);
public class RecklessBrute extends CardImpl {
public RecklessBrute(UUID ownerId) {
public RecklessBrute(final RecklessBrute card) {
public RecklessBrute copy() {return new RecklessBrute(this);
public class Revive extends CardImpl {
public Revive(UUID ownerId) {
public Revive(final Revive card) {
public Revive copy() {return new Revive(this);
public class RhoxFaithmender extends CardImpl {
public RhoxFaithmender(UUID ownerId) {
public RhoxFaithmender(final RhoxFaithmender card) {
public RhoxFaithmender copy() {return new RhoxFaithmender(this);
class RhoxFaithmenderEffect extends ReplacementEffectImpl {
public RhoxFaithmenderEffect() {
public RhoxFaithmenderEffect(final RhoxFaithmenderEffect effect) {
public RhoxFaithmenderEffect copy() {return new RhoxFaithmenderEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(EventType.GAIN_LIFE);
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId()) && (source.getControllerId() != null);
public class RingOfEvosIsle extends CardImpl {
public RingOfEvosIsle(UUID ownerId) {
public RingOfEvosIsle(final RingOfEvosIsle card) {
public RingOfEvosIsle copy() {return new RingOfEvosIsle(this);
public class RingOfKalonia extends CardImpl {
public RingOfKalonia(UUID ownerId) {
public RingOfKalonia(final RingOfKalonia card) {
public RingOfKalonia copy() {return new RingOfKalonia(this);
public class RingOfThune extends CardImpl {
public RingOfThune(UUID ownerId) {
public RingOfThune(final RingOfThune card) {
public RingOfThune copy() {return new RingOfThune(this);
public class RingOfValkas extends CardImpl {
public RingOfValkas(UUID ownerId) {
public RingOfValkas(final RingOfValkas card) {
public RingOfValkas copy() {return new RingOfValkas(this);
public class RingOfXathrid extends CardImpl {
public RingOfXathrid(UUID ownerId) {
public RingOfXathrid(final RingOfXathrid card) {
public RingOfXathrid copy() {return new RingOfXathrid(this);return new RoaringPrimadox(this);
public class SearingSpear extends CardImpl {
public SearingSpear(UUID ownerId) {
public SearingSpear(final SearingSpear card) {
public SearingSpear copy() {return new SearingSpear(this);
public class SentinelSpider extends CardImpl {
public SentinelSpider(UUID ownerId) {
public SentinelSpider(final SentinelSpider card) {
public SentinelSpider copy() {return new SentinelSpider(this);return new SerpentsGift(this);
public class ServantOfNefarox extends CardImpl {
public ServantOfNefarox(UUID ownerId) {
public ServantOfNefarox(final ServantOfNefarox card) {
public ServantOfNefarox copy() {return new ServantOfNefarox(this);
public class ShimianSpecter extends CardImpl {
public ShimianSpecter(UUID ownerId) {
public ShimianSpecter(final ShimianSpecter card) {
public ShimianSpecter copy() {return new ShimianSpecter(this);
class ShimianSpecterEffect extends OneShotEffect {
public ShimianSpecterEffect() {
public ShimianSpecterEffect(final ShimianSpecterEffect effect) {
public boolean apply(Game game, Ability source) {
public class ShowOfValor extends CardImpl {
public ShowOfValor(UUID ownerId) {
public ShowOfValor(final ShowOfValor card) {
public ShowOfValor copy() {return new ShowOfValor(this);
public class SlumberingDragon extends CardImpl {
public SlumberingDragon(UUID ownerId) {
public SlumberingDragon(final SlumberingDragon card) {
public SlumberingDragon copy() {return new SlumberingDragon(this);
class SlumberingDragonEffect extends RestrictionEffect {
public SlumberingDragonEffect() {
public SlumberingDragonEffect(final SlumberingDragonEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return false;return true;return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public boolean canAttack(Game game) {return false;
public SlumberingDragonEffect copy() {return new SlumberingDragonEffect(this);
class SlumberingDragonTriggeredAbility extends TriggeredAbilityImpl {
public SlumberingDragonTriggeredAbility() {
public SlumberingDragonTriggeredAbility(final SlumberingDragonTriggeredAbility ability) {
public SlumberingDragonTriggeredAbility copy() {return new SlumberingDragonTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "Whenever a creature attacks you or a planeswalker you control, put a +1/+1 counter on {this}.";
public class Smelt extends CardImpl {
public Smelt(UUID ownerId) {
public Smelt(final Smelt card) {
public Smelt copy() {return new Smelt(this);
public class Spelltwine extends CardImpl {
public Spelltwine(UUID ownerId) {
public Spelltwine(final Spelltwine card) {
public Spelltwine copy() {return new Spelltwine(this);
class SpelltwineEffect extends OneShotEffect {
public SpelltwineEffect() {
public SpelltwineEffect(final SpelltwineEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SpelltwineEffect copy() {return new SpelltwineEffect(this);
public class SpikedBaloth extends CardImpl {
public SpikedBaloth(UUID ownerId) {
public SpikedBaloth(final SpikedBaloth card) {
public SpikedBaloth copy() {return new SpikedBaloth(this);
public class StaffOfNin extends CardImpl {
public StaffOfNin(UUID ownerId) {
public StaffOfNin(final StaffOfNin card) {
public StaffOfNin copy() {return new StaffOfNin(this);
public class SublimeArchangel extends CardImpl {
public SublimeArchangel(UUID ownerId) {
public SublimeArchangel(final SublimeArchangel card) {
public SublimeArchangel copy() {return new SublimeArchangel(this);
public class Switcheroo extends CardImpl {
public Switcheroo(UUID ownerId) {
public Switcheroo(final Switcheroo card) {
public Switcheroo copy() {return new Switcheroo(this);
public class TalrandsInvocation extends CardImpl {
public TalrandsInvocation(UUID ownerId) {
public TalrandsInvocation(final TalrandsInvocation card) {
public TalrandsInvocation copy() {return new TalrandsInvocation(this);
public class TalrandSkySummoner extends CardImpl {
public TalrandSkySummoner(UUID ownerId) {
public TalrandSkySummoner(final TalrandSkySummoner card) {
public TalrandSkySummoner copy() {return new TalrandSkySummoner(this);
public class Thragtusk extends CardImpl {
public Thragtusk(UUID ownerId) {
public Thragtusk(final Thragtusk card) {
public Thragtusk copy() {return new Thragtusk(this);
public class ThundermawHellkite extends CardImpl {
public ThundermawHellkite(UUID ownerId) {
public ThundermawHellkite(final ThundermawHellkite card) {
public ThundermawHellkite copy() {return new ThundermawHellkite(this);
class TapAllEffect extends OneShotEffect {
public TapAllEffect(FilterCreaturePermanent filter) {
public TapAllEffect(final TapAllEffect effect) {
public TapAllEffect copy() {return new TapAllEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class TimberpackWolf extends CardImpl {
public TimberpackWolf(UUID ownerId) {
public TimberpackWolf(final TimberpackWolf card) {
public TimberpackWolf copy() {return new TimberpackWolf(this);
class TimberpackWolfEffect extends ContinuousEffectImpl {
public TimberpackWolfEffect() {
public TimberpackWolfEffect(final TimberpackWolfEffect effect) {
public TimberpackWolfEffect copy() {return new TimberpackWolfEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TricksOfTheTrade extends CardImpl {
public TricksOfTheTrade(UUID ownerId) {
public TricksOfTheTrade(final TricksOfTheTrade card) {
public TricksOfTheTrade copy() {return new TricksOfTheTrade(this);
public class VeilbornGhoul extends CardImpl {
public VeilbornGhoul(UUID ownerId) {
public VeilbornGhoul(final VeilbornGhoul card) {
public VeilbornGhoul copy() {return new VeilbornGhoul(this);
public class VileRebirth extends CardImpl {
public VileRebirth(UUID ownerId) {
public VileRebirth(final VileRebirth card) {
public VileRebirth copy() {return new VileRebirth(this);
public class VoidStalker extends CardImpl {
public VoidStalker(UUID ownerId) {
public VoidStalker(final VoidStalker card) {
public VoidStalker copy() {return new VoidStalker(this);
class VoidStalkerEffect extends OneShotEffect {
VoidStalkerEffect() {
VoidStalkerEffect(final VoidStalkerEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public VoidStalkerEffect copy() {return new VoidStalkerEffect(this);
public class VolcanicGeyser extends CardImpl {
public VolcanicGeyser(UUID ownerId) {
public VolcanicGeyser(final VolcanicGeyser card) {
public VolcanicGeyser copy() {return new VolcanicGeyser(this);return new WarclampMastiff(this);
public class WarFalcon extends CardImpl {
public WarFalcon(UUID ownerId) {
public WarFalcon(final WarFalcon card) {
public WarFalcon copy() {return new WarFalcon(this);
class WarFalconEffect extends RestrictionEffect {
public WarFalconEffect() {
public WarFalconEffect(final WarFalconEffect effect) {
public WarFalconEffect copy() {return new WarFalconEffect(this);
public boolean canAttack(Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return false;return true;
public class Watercourser extends CardImpl {
public Watercourser(UUID ownerId) {
public Watercourser(final Watercourser card) {
public Watercourser copy() {return new Watercourser(this);
public class WildGuess extends CardImpl {
public WildGuess(UUID ownerId) {
public WildGuess(final WildGuess card) {
public WildGuess copy() {return new WildGuess(this);
public class WitsEnd extends CardImpl {
public WitsEnd(UUID ownerId) {
public WitsEnd(final WitsEnd card) {
public WitsEnd copy() {return new WitsEnd(this);
class WitsEndEffect extends OneShotEffect {
public WitsEndEffect() {
public WitsEndEffect(final WitsEndEffect effect) {
public WitsEndEffect copy() {return new WitsEndEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Worldfire extends CardImpl {
public Worldfire(UUID ownerId) {
public Worldfire(final Worldfire card) {
public Worldfire copy() {return new Worldfire(this);
class WorldfireEffect extends OneShotEffect {
public WorldfireEffect() {
public WorldfireEffect(final WorldfireEffect effect) {
public WorldfireEffect copy() {return new WorldfireEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class XathridGorgon extends CardImpl {
public XathridGorgon(UUID ownerId) {
public XathridGorgon(final XathridGorgon card) {
public XathridGorgon copy() {return new XathridGorgon(this);
class XathridGorgonCantActivateEffect extends RestrictionEffect {
public XathridGorgonCantActivateEffect() {
public XathridGorgonCantActivateEffect(final XathridGorgonCantActivateEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getId().equals(getTargetPointer().getFirst(game, source));
public boolean isInactive(Ability source, Game game) {return getTargetPointer().getFirst(game, source) != null;
public boolean canUseActivatedAbilities(Permanent permanent, Ability source, Game game) {return false;
public XathridGorgonCantActivateEffect copy() {return new XathridGorgonCantActivateEffect(this);
public class YevaNaturesHerald extends CardImpl {
public YevaNaturesHerald(UUID ownerId) {
public YevaNaturesHerald(final YevaNaturesHerald card) {
public YevaNaturesHerald copy() {return new YevaNaturesHerald(this);
public class YevasForcemage extends CardImpl {
public YevasForcemage(UUID ownerId) {
public YevasForcemage(final YevasForcemage card) {
public YevasForcemage copy() {return new YevasForcemage(this);
public class AcademyRaider extends CardImpl {
public AcademyRaider(UUID ownerId) {
public AcademyRaider(final AcademyRaider card) {
public AcademyRaider copy() {return new AcademyRaider(this);
public class AccursedSpirit extends CardImpl {
public AccursedSpirit(UUID ownerId) {
public AccursedSpirit(final AccursedSpirit card) {
public AccursedSpirit copy() {return new AccursedSpirit(this);
public class AdvocateOfTheBeast extends CardImpl {
public AdvocateOfTheBeast(UUID ownerId) {
public AdvocateOfTheBeast(final AdvocateOfTheBeast card) {
public AdvocateOfTheBeast copy() {return new AdvocateOfTheBeast(this);
public class AjanisChosen extends CardImpl {
public AjanisChosen(UUID ownerId) {
public AjanisChosen(final AjanisChosen card) {
public AjanisChosen copy() {return new AjanisChosen(this);
class AjanisChosenEffect extends OneShotEffect {
public AjanisChosenEffect() {
public AjanisChosenEffect(final AjanisChosenEffect effect) {
public AjanisChosenEffect copy() {return new AjanisChosenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new ArtificersHex(this);return new ArtificersHexEffect(this);
public boolean apply(Game game, Ability source) {return creature.destroy(source.getSourceId(), game, false);return false;
public class AwakenTheAncient extends CardImpl {
public AwakenTheAncient(UUID ownerId) {
public AwakenTheAncient(final AwakenTheAncient card) {
public AwakenTheAncient copy() {return new AwakenTheAncient(this);
private class GiantToken extends Token {
GiantToken() {
public class BanisherPriest extends CardImpl {
public BanisherPriest(UUID ownerId) {
public BanisherPriest(final BanisherPriest card) {
public BanisherPriest copy() {return new BanisherPriest(this);
class BanisherPriestExileEffect extends OneShotEffect {
public BanisherPriestExileEffect() {this.staticText = "exile target creature an opponent controls until {this} leaves the battlefield. <i>(That creature returns under its owner's control.)</i>";
public BanisherPriestExileEffect(final BanisherPriestExileEffect effect) {
public BanisherPriestExileEffect copy() {return new BanisherPriestExileEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getExileZoneId(game, source.getSourceId(), source.getSourceObjectZoneChangeCounter()), permanent.getIdName()).apply(game, source);return false;
public class BarrageOfExpendables extends CardImpl {
public BarrageOfExpendables(UUID ownerId) {
public BarrageOfExpendables(final BarrageOfExpendables card) {
public BarrageOfExpendables copy() {return new BarrageOfExpendables(this);
public class BattleSliver extends CardImpl {
public BattleSliver(UUID ownerId) {
public BattleSliver(final BattleSliver card) {
public BattleSliver copy() {return new BattleSliver(this);
public class Blightcaster extends CardImpl {
public Blightcaster(UUID ownerId) {
public Blightcaster(final Blightcaster card) {
public Blightcaster copy() {return new Blightcaster(this);
public class BloodBairn extends CardImpl {
public BloodBairn(UUID ownerId) {
public BloodBairn(final BloodBairn card) {
public BloodBairn copy() {return new BloodBairn(this);
public class BlurSliver extends CardImpl {
public BlurSliver(UUID ownerId) {
public BlurSliver(final BlurSliver card) {
public BlurSliver copy() {return new BlurSliver(this);
public class BogbrewWitch extends CardImpl {
public BogbrewWitch(UUID ownerId) {
public BogbrewWitch(final BogbrewWitch card) {
public BogbrewWitch copy() {return new BogbrewWitch(this);
public class BonescytheSliver extends CardImpl {
public BonescytheSliver(UUID ownerId) {
public BonescytheSliver(final BonescytheSliver card) {
public BonescytheSliver copy() {return new BonescytheSliver(this);
public class BubblingCauldron extends CardImpl {
public BubblingCauldron(UUID ownerId) {
public BubblingCauldron(final BubblingCauldron card) {
public BubblingCauldron copy() {return new BubblingCauldron(this);
class BubblingCauldronEffect extends OneShotEffect {
public BubblingCauldronEffect() {
public BubblingCauldronEffect(final BubblingCauldronEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public BubblingCauldronEffect copy() {return new BubblingCauldronEffect(this);
public class BurningEarth extends CardImpl {
public BurningEarth(UUID ownerId) {
public BurningEarth(final BurningEarth card) {
public BurningEarth copy() {return new BurningEarth(this);
public class CelestialFlare extends CardImpl {
public CelestialFlare(UUID ownerId) {
public CelestialFlare(final CelestialFlare card) {
public CelestialFlare copy() {return new CelestialFlare(this);
public class ChandraPyromaster extends CardImpl {
public ChandraPyromaster(UUID ownerId) {
public ChandraPyromaster(final ChandraPyromaster card) {
public ChandraPyromaster copy() {return new ChandraPyromaster(this);
class ChandraPyromasterEffect1 extends OneShotEffect {
public ChandraPyromasterEffect1() {
public ChandraPyromasterEffect1(final ChandraPyromasterEffect1 effect) {
public ChandraPyromasterEffect1 copy() {return new ChandraPyromasterEffect1(this);
public boolean apply(Game game, Ability source) {return true;
class ChandraPyromasterTarget extends TargetPermanent {
public ChandraPyromasterTarget() {
public ChandraPyromasterTarget(final ChandraPyromasterTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return super.canTarget(id, source, game);return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public ChandraPyromasterTarget copy() {return new ChandraPyromasterTarget(this);
class ChandraPyromasterEffect2 extends OneShotEffect {
public ChandraPyromasterEffect2() {
public ChandraPyromasterEffect2(final ChandraPyromasterEffect2 effect) {
public ChandraPyromasterEffect2 copy() {return new ChandraPyromasterEffect2(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ChandraPyromasterCastFromExileEffect extends AsThoughEffectImpl {
public ChandraPyromasterCastFromExileEffect() {
public ChandraPyromasterCastFromExileEffect(final ChandraPyromasterCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ChandraPyromasterCastFromExileEffect copy() {return new ChandraPyromasterCastFromExileEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return game.getState().getZone(sourceId).equals(Zone.EXILED);return false;
class ChandraPyromasterEffect3 extends OneShotEffect {
public ChandraPyromasterEffect3() {
public ChandraPyromasterEffect3(final ChandraPyromasterEffect3 effect) {
public ChandraPyromasterEffect3 copy() {return new ChandraPyromasterEffect3(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;return new ChargingGriffin(this);
public class ColossalWhale extends CardImpl {
public ColossalWhale(UUID ownerId) {
public ColossalWhale(final ColossalWhale card) {
public ColossalWhale copy() {return new ColossalWhale(this);
class ColossalWhaleAbility extends TriggeredAbilityImpl {
public ColossalWhaleAbility() {
public ColossalWhaleAbility(final ColossalWhaleAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return new StringBuilder("Whenever {this} attacks, ").append(super.getRule()).toString();
public ColossalWhaleAbility copy() {return new ColossalWhaleAbility(this);
class ColossalWhaleExileEffect extends OneShotEffect {
public ColossalWhaleExileEffect() {
public ColossalWhaleExileEffect(final ColossalWhaleExileEffect effect) {
public ColossalWhaleExileEffect copy() {return new ColossalWhaleExileEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), permanent.getIdName()).apply(game, source);return false;
public class CorpseHauler extends CardImpl {
public CorpseHauler(UUID ownerId) {
public CorpseHauler(final CorpseHauler card) {
public CorpseHauler copy() {return new CorpseHauler(this);
public class CyclopsTyrant extends CardImpl {
public CyclopsTyrant(UUID ownerId) {
public CyclopsTyrant(final CyclopsTyrant card) {
public CyclopsTyrant copy() {return new CyclopsTyrant(this);
public class DeathgazeCockatrice extends CardImpl {
public DeathgazeCockatrice(UUID ownerId) {
public DeathgazeCockatrice(final DeathgazeCockatrice card) {
public DeathgazeCockatrice copy() {return new DeathgazeCockatrice(this);
public class DevoutInvocation extends CardImpl {
public DevoutInvocation(UUID ownerId) {
public DevoutInvocation(final DevoutInvocation card) {
public DevoutInvocation copy() {return new DevoutInvocation(this);
class DevoutInvocationEffect extends OneShotEffect {
public DevoutInvocationEffect() {
public DevoutInvocationEffect(DevoutInvocationEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DevoutInvocationEffect copy() {return new DevoutInvocationEffect(this);
public class DismissIntoDream extends CardImpl {
public DismissIntoDream(UUID ownerId) {
public DismissIntoDream(final DismissIntoDream card) {
public DismissIntoDream copy() {return new DismissIntoDream(this);
class DismissIntoDreamEffect extends ContinuousEffectImpl {
DismissIntoDreamEffect() {
DismissIntoDreamEffect(final DismissIntoDreamEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public DismissIntoDreamEffect copy() {return new DismissIntoDreamEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class DoorOfDestinies extends CardImpl {
public DoorOfDestinies(UUID ownerId) {
public DoorOfDestinies(final DoorOfDestinies card) {
public DoorOfDestinies copy() {return new DoorOfDestinies(this);
class AddCounterAbility extends TriggeredAbilityImpl {
public AddCounterAbility() {
public AddCounterAbility(final AddCounterAbility ability) {
public AddCounterAbility copy() {return new AddCounterAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast a spell of the chosen type, put a charge counter on {source}";
class BoostCreatureEffectEffect extends ContinuousEffectImpl {
public BoostCreatureEffectEffect() {
public BoostCreatureEffectEffect(final BoostCreatureEffectEffect effect) {
public BoostCreatureEffectEffect copy() {return new BoostCreatureEffectEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class DragonEgg extends CardImpl {
public DragonEgg(UUID ownerId) {
public DragonEgg(final DragonEgg card) {
public DragonEgg copy() {return new DragonEgg(this);
class DragonToken extends Token {
DragonToken() {
public class EliteArcanist extends CardImpl {
public EliteArcanist(UUID ownerId) {
public EliteArcanist(final EliteArcanist card) {
public void adjustCosts(Ability ability, Game game) {
public EliteArcanist copy() {return new EliteArcanist(this);
class EliteArcanistImprintEffect extends OneShotEffect {
public EliteArcanistImprintEffect() {
public EliteArcanistImprintEffect(EliteArcanistImprintEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;
public EliteArcanistImprintEffect copy() {return new EliteArcanistImprintEffect(this);
class EliteArcanistCopyEffect extends OneShotEffect {
public EliteArcanistCopyEffect() {
public EliteArcanistCopyEffect(final EliteArcanistCopyEffect effect) {
public EliteArcanistCopyEffect copy() {return new EliteArcanistCopyEffect(this);
public boolean apply(Game game, Ability source) {return controller.cast(copiedCard.getSpellAbility(), game, true);return false;
public class ElvishMystic extends CardImpl {
public ElvishMystic(UUID ownerId) {
public ElvishMystic(final ElvishMystic card) {
public ElvishMystic copy() {return new ElvishMystic(this);
public class EncroachingWastes extends CardImpl {
public EncroachingWastes(UUID ownerId) {
public EncroachingWastes(final EncroachingWastes card) {
public EncroachingWastes copy() {return new EncroachingWastes(this);
public class Enlarge extends CardImpl {
public Enlarge(UUID ownerId) {
public Enlarge(final Enlarge card) {
public Enlarge copy() {return new Enlarge(this);
public class FesteringNewt extends CardImpl {
public FesteringNewt(UUID ownerId) {
public FesteringNewt(final FesteringNewt card) {
public FesteringNewt copy() {return new FesteringNewt(this);
public class FiendslayerPaladin extends CardImpl {
public FiendslayerPaladin(UUID ownerId) {
public FiendslayerPaladin(final FiendslayerPaladin card) {
public FiendslayerPaladin copy() {return new FiendslayerPaladin(this);
public FiendslayerPaladinEffect() {
public FiendslayerPaladinEffect(final FiendslayerPaladinEffect effect) {
public FiendslayerPaladinEffect copy() {return new FiendslayerPaladinEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return sourcePermanent.getLogName() + " can't be the target of black or red spells opponents control";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TARGET;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class Fireshrieker extends CardImpl {
public Fireshrieker(UUID ownerId) {
public Fireshrieker(final Fireshrieker card) {
public Fireshrieker copy() {return new Fireshrieker(this);
public class FleshpulperGiant extends CardImpl {
public FleshpulperGiant(UUID ownerId) {
public FleshpulperGiant(final FleshpulperGiant card) {
public FleshpulperGiant copy() {return new FleshpulperGiant(this);
public class GaleriderSliver extends CardImpl {
public GaleriderSliver(UUID ownerId) {
public GaleriderSliver(final GaleriderSliver card) {
public GaleriderSliver copy() {return new GaleriderSliver(this);
public class GarrukCallerOfBeasts extends CardImpl {
public GarrukCallerOfBeasts(UUID ownerId) {
public GarrukCallerOfBeasts(final GarrukCallerOfBeasts card) {
public GarrukCallerOfBeasts copy() {return new GarrukCallerOfBeasts(this);
class GarrukCallerOfBeastsEmblem extends Emblem {
public GarrukCallerOfBeastsEmblem() {
public class GlimpseTheFuture extends CardImpl {
public GlimpseTheFuture(UUID ownerId) {
public GlimpseTheFuture(final GlimpseTheFuture card) {
public GlimpseTheFuture copy() {return new GlimpseTheFuture(this);
class GlimpseTheFutureEffect extends OneShotEffect {
public GlimpseTheFutureEffect() {
public GlimpseTheFutureEffect(final GlimpseTheFutureEffect effect) {
public GlimpseTheFutureEffect copy() {return new GlimpseTheFutureEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GnawingZombie extends CardImpl {
public GnawingZombie(UUID ownerId) {
public GnawingZombie(final GnawingZombie card) {
public GnawingZombie copy() {return new GnawingZombie(this);
public class GoblinDiplomats extends CardImpl {
public GoblinDiplomats(UUID ownerId) {
public GoblinDiplomats(final GoblinDiplomats card) {
public GoblinDiplomats copy() {return new GoblinDiplomats(this);
class GoblinDiplomatsEffect extends RequirementEffect {
public GoblinDiplomatsEffect() {
public GoblinDiplomatsEffect(final GoblinDiplomatsEffect effect) {
public GoblinDiplomatsEffect copy() {return new GoblinDiplomatsEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public class GuardianOfTheAges extends CardImpl{
public GuardianOfTheAges(UUID ownerId){
public GuardianOfTheAges(final GuardianOfTheAges card){
public GuardianOfTheAges copy(){return new GuardianOfTheAges(this);
class GuardianOfTheAgesTriggerAbility extends TriggeredAbilityImpl {
public GuardianOfTheAgesTriggerAbility(){
public GuardianOfTheAgesTriggerAbility(final GuardianOfTheAgesTriggerAbility ability){
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game){return true;return false;
public String getRule(){return "Whenever a creature attacks you or a planeswalker you control, if {this} has defender, it loses defender and gains trample.";
public GuardianOfTheAgesTriggerAbility copy(){return new GuardianOfTheAgesTriggerAbility(this);
public class HauntedPlateMail extends CardImpl {
public HauntedPlateMail(UUID ownerId) {
public HauntedPlateMail(final HauntedPlateMail card) {
public HauntedPlateMail copy() {return new HauntedPlateMail(this);
class HauntedPlateMailToken extends Token {
public HauntedPlateMailToken() {
public class HiveStirrings extends CardImpl {
public HiveStirrings(UUID ownerId) {
public HiveStirrings(final HiveStirrings card) {
public HiveStirrings copy() {return new HiveStirrings(this);
public class HuntTheWeak extends CardImpl {
public HuntTheWeak(UUID ownerId) {
public HuntTheWeak(final HuntTheWeak card) {
public HuntTheWeak copy() {return new HuntTheWeak(this);
public class IllusionaryArmor extends CardImpl {
public IllusionaryArmor(UUID ownerId) {
public IllusionaryArmor(final IllusionaryArmor card) {
public IllusionaryArmor copy() {return new IllusionaryArmor(this);
public class ImposingSovereign extends CardImpl {
public ImposingSovereign(UUID ownerId) {
public ImposingSovereign(final ImposingSovereign card) {
public ImposingSovereign copy() {return new ImposingSovereign(this);
class ImposingSovereignEffect extends ReplacementEffectImpl {
ImposingSovereignEffect() {
ImposingSovereignEffect(final ImposingSovereignEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public ImposingSovereignEffect copy() {return new ImposingSovereignEffect(this);
public class IntoTheWilds extends CardImpl {
public IntoTheWilds(UUID ownerId) {
public IntoTheWilds(final IntoTheWilds card) {
public IntoTheWilds copy() {return new IntoTheWilds(this);
class IntoTheWildsEffect extends OneShotEffect {
public IntoTheWildsEffect() {
public IntoTheWildsEffect(final IntoTheWildsEffect effect) {
public IntoTheWildsEffect copy() {return new IntoTheWildsEffect(this);
public boolean apply(Game game, Ability source) {return false;return card.putOntoBattlefield(game, Zone.LIBRARY, source.getSourceId(), source.getControllerId(), false);return true;
public class JacesMindseeker extends CardImpl {
public JacesMindseeker(UUID ownerId) {
public JacesMindseeker(final JacesMindseeker card) {
public JacesMindseeker copy() {return new JacesMindseeker(this);
class JaceMindseekerEffect extends OneShotEffect {
public JaceMindseekerEffect() {
public JaceMindseekerEffect(final JaceMindseekerEffect effect) {
public JaceMindseekerEffect copy() {return new JaceMindseekerEffect(this);
public boolean apply(Game game, Ability source) {
public class KalonianHydra extends CardImpl {
public KalonianHydra(UUID ownerId) {
public KalonianHydra(final KalonianHydra card) {
public KalonianHydra copy() {return new KalonianHydra(this);
class KalonianHydraEffect extends OneShotEffect {
public KalonianHydraEffect() {
public KalonianHydraEffect(final KalonianHydraEffect effect) {
public KalonianHydraEffect copy() {return new KalonianHydraEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class KalonianTusker extends CardImpl {
public KalonianTusker(UUID ownerId) {
public KalonianTusker(final KalonianTusker card) {
public KalonianTusker copy() {return new KalonianTusker(this);return new LifebaneZombie(this);
public class LilianasReaver extends CardImpl {
public LilianasReaver(UUID ownerId) {
public LilianasReaver(final LilianasReaver card) {
public LilianasReaver copy() {return new LilianasReaver(this);
public class LiturgyOfBlood extends CardImpl {
public LiturgyOfBlood(UUID ownerId) {
public LiturgyOfBlood(final LiturgyOfBlood card) {
public LiturgyOfBlood copy() {return new LiturgyOfBlood(this);
public class ManaweftSliver extends CardImpl {
public ManaweftSliver(UUID ownerId) {
public ManaweftSliver(final ManaweftSliver card) {
public ManaweftSliver copy() {return new ManaweftSliver(this);
public class MaraudingMaulhorn extends CardImpl {
public MaraudingMaulhorn(UUID ownerId) {
public MaraudingMaulhorn(final MaraudingMaulhorn card) {
public MaraudingMaulhorn copy() {return new MaraudingMaulhorn(this);
public class MasterOfDiversion extends CardImpl {
public MasterOfDiversion(UUID ownerId) {
public MasterOfDiversion(final MasterOfDiversion card) {
public void adjustTargets(Ability ability, Game game) {
public MasterOfDiversion copy() {return new MasterOfDiversion(this);
public class MeganticSliver extends CardImpl {
public MeganticSliver(UUID ownerId) {
public MeganticSliver(final MeganticSliver card) {
public MeganticSliver copy() {return new MeganticSliver(this);
public class MessengerDrake extends CardImpl {
public MessengerDrake(UUID ownerId) {
public MessengerDrake(final MessengerDrake card) {
public MessengerDrake copy() {return new MessengerDrake(this);
public class MoltenBirth extends CardImpl {
public MoltenBirth(UUID ownerId) {
public MoltenBirth(final MoltenBirth card) {
public MoltenBirth copy() {return new MoltenBirth(this);
class MoltenBirthEffect extends OneShotEffect {
public MoltenBirthEffect() {staticText = "Put two 1/1 red Elemental creature tokens onto the battlefield. Then flip a coin. If you win the flip, return {this} to its owner's hand";
public MoltenBirthEffect(final MoltenBirthEffect effect) {
public MoltenBirthEffect copy() {return new MoltenBirthEffect(this);
public boolean apply(Game game, Ability source) {game.informPlayers(controller.getLogName() + " won the flip. " + molten.getLogName() +" is returned to "+ controller.getLogName() + "'s hand.");return true;return false;
class ElementalToken extends Token {
public ElementalToken() {
public class OathOfTheAncientWood extends CardImpl {
public OathOfTheAncientWood(UUID ownerId) {
public OathOfTheAncientWood(final OathOfTheAncientWood card) {
public OathOfTheAncientWood copy() {return new OathOfTheAncientWood(this);
public class OgreBattledriver extends CardImpl {
public OgreBattledriver(UUID ownerId) {
public OgreBattledriver(final OgreBattledriver card) {
public OgreBattledriver copy() {return new OgreBattledriver(this);
public class PathOfBravery extends CardImpl {
public PathOfBravery(UUID ownerId) {
public PathOfBravery(final PathOfBravery card) {
public PathOfBravery copy() {return new PathOfBravery(this);return fInstance;
public boolean apply(Game game, Ability source) {return you.getLife() >= game.getLife();return false;
class PathOfBraveryTriggeredAbility extends TriggeredAbilityImpl {
public PathOfBraveryTriggeredAbility() {
public PathOfBraveryTriggeredAbility(final PathOfBraveryTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return !game.getCombat().noAttackers() && event.getPlayerId().equals(controllerId);
public PathOfBraveryTriggeredAbility copy() {return new PathOfBraveryTriggeredAbility(this);
public String getRule() {return "Whenever one or more creatures you control attack, " + super.getRule();
class PathOfBraveryEffect extends OneShotEffect {
public PathOfBraveryEffect() {
public PathOfBraveryEffect(final PathOfBraveryEffect effect) {
public PathOfBraveryEffect copy() {return new PathOfBraveryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PayNoHeed extends CardImpl {
public PayNoHeed(UUID ownerId) {
public PayNoHeed(final PayNoHeed card) {
public PayNoHeed copy() {return new PayNoHeed(this);
public class PredatorySliver extends CardImpl {
public PredatorySliver(UUID ownerId) {
public PredatorySliver(final PredatorySliver card) {
public PredatorySliver copy() {return new PredatorySliver(this);
public class PrimevalBounty extends CardImpl {
public PrimevalBounty(UUID ownerId) {
public PrimevalBounty(final PrimevalBounty card) {
public PrimevalBounty copy() {return new PrimevalBounty(this);
public class PyromancersGauntlet extends CardImpl {
public PyromancersGauntlet(UUID ownerId) {
public PyromancersGauntlet(final PyromancersGauntlet card) {
public PyromancersGauntlet copy() {return new PyromancersGauntlet(this);
class PyromancersGauntletReplacementEffect extends ReplacementEffectImpl {
PyromancersGauntletReplacementEffect() {
PyromancersGauntletReplacementEffect(final PyromancersGauntletReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_PLAYER)
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public PyromancersGauntletReplacementEffect copy() {return new PyromancersGauntletReplacementEffect(this);
public class RegathanFirecat extends CardImpl {
public RegathanFirecat(UUID ownerId) {
public RegathanFirecat(final RegathanFirecat card) {
public RegathanFirecat copy() {return new RegathanFirecat(this);
public class RingOfThreeWishes extends CardImpl {
public RingOfThreeWishes(UUID ownerId) {
public RingOfThreeWishes(final RingOfThreeWishes card) {
public RingOfThreeWishes copy() {return new RingOfThreeWishes(this);
public class RiseOfTheDarkRealms extends CardImpl {
public RiseOfTheDarkRealms(UUID ownerId) {
public RiseOfTheDarkRealms(final RiseOfTheDarkRealms card) {
public RiseOfTheDarkRealms copy() {return new RiseOfTheDarkRealms(this);
class RiseOfTheDarkRealmsEffect extends OneShotEffect {
public RiseOfTheDarkRealmsEffect() {
public RiseOfTheDarkRealmsEffect(final RiseOfTheDarkRealmsEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public RiseOfTheDarkRealmsEffect copy() {return new RiseOfTheDarkRealmsEffect(this);
public class RumblingBaloth extends CardImpl {
public RumblingBaloth(UUID ownerId) {
public RumblingBaloth(final RumblingBaloth card) {
public RumblingBaloth copy() {return new RumblingBaloth(this);
public class SavageSummoning extends CardImpl {
public SavageSummoning(UUID ownerId) {
public SavageSummoning(final SavageSummoning card) {
public SavageSummoning copy() {return new SavageSummoning(this);
class SavageSummoningAsThoughEffect extends AsThoughEffectImpl {
public SavageSummoningAsThoughEffect() {
public SavageSummoningAsThoughEffect(final SavageSummoningAsThoughEffect effect) {
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public SavageSummoningAsThoughEffect copy() {return new SavageSummoningAsThoughEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return true;return false;
class SavageSummoningWatcher extends Watcher {
public SavageSummoningWatcher() {
public SavageSummoningWatcher(final SavageSummoningWatcher watcher) {
public SavageSummoningWatcher copy() {return new SavageSummoningWatcher(this);
public void watch(GameEvent event, Game game) {
public void setSavageSummoningSpellActive(Card card, Game game) {
public boolean isSavageSummoningSpellActive() {return !savageSummoningSpells.isEmpty();
public boolean isSpellCastWithThisSavageSummoning(UUID spellId, UUID cardId, int zoneChangeCounter) {return savageSpells != null && savageSpells.contains(cardKey);
public boolean isCardCastWithThisSavageSummoning(Card card, UUID cardId, int zoneChangeCounter, Game game) {return savageSpells != null && savageSpells.contains(cardKey);
public void reset() {
public SavageSummoningCantCounterEffect() {
public SavageSummoningCantCounterEffect(final SavageSummoningCantCounterEffect effect) {
public void init(Ability source, Game game) {
public SavageSummoningCantCounterEffect copy() {return new SavageSummoningCantCounterEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "This creature spell can't be countered (" + sourceObject.getName() + ").";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
class SavageSummoningEntersBattlefieldEffect extends ReplacementEffectImpl {
public SavageSummoningEntersBattlefieldEffect() {
public SavageSummoningEntersBattlefieldEffect(final SavageSummoningEntersBattlefieldEffect effect) {
public void init(Ability source, Game game) {
public SavageSummoningEntersBattlefieldEffect copy() {return new SavageSummoningEntersBattlefieldEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return card != null && watcher.isCardCastWithThisSavageSummoning(card, source.getSourceId(), zoneChangeCounter, game);
public class ScourgeOfValkas extends CardImpl {
public ScourgeOfValkas(UUID ownerId) {
public ScourgeOfValkas(final ScourgeOfValkas card) {
public ScourgeOfValkas copy() {return new ScourgeOfValkas(this);
public class SeacoastDrake extends CardImpl {
public SeacoastDrake(UUID ownerId) {
public SeacoastDrake(final SeacoastDrake card) {
public SeacoastDrake copy() {return new SeacoastDrake(this);
public class SeismicStomp extends CardImpl {
public SeismicStomp(UUID ownerId) {
public SeismicStomp(final SeismicStomp card) {
public SeismicStomp copy() {return new SeismicStomp(this);
public class SentinelSliver extends CardImpl {
public SentinelSliver(UUID ownerId) {
public SentinelSliver(final SentinelSliver card) {
public SentinelSliver copy() {return new SentinelSliver(this);
public class SeraphOfTheSword extends CardImpl {
public SeraphOfTheSword(UUID ownerId) {
public SeraphOfTheSword(final SeraphOfTheSword card) {
public SeraphOfTheSword copy() {return new SeraphOfTheSword(this);
public class SliverConstruct extends CardImpl {
public SliverConstruct(UUID ownerId) {
public SliverConstruct(final SliverConstruct card) {
public SliverConstruct copy() {return new SliverConstruct(this);
public class Soulmender extends CardImpl {
public Soulmender(UUID ownerId) {
public Soulmender(final Soulmender card) {
public Soulmender copy() {return new Soulmender(this);
public class Sporemound extends CardImpl {
public Sporemound(UUID ownerId) {
public Sporemound(final Sporemound card) {
public Sporemound copy() {return new Sporemound(this);
public class StaffOfTheDeathMagus extends CardImpl {
public StaffOfTheDeathMagus(UUID ownerId) {
public StaffOfTheDeathMagus(final StaffOfTheDeathMagus card) {
public StaffOfTheDeathMagus copy() {return new StaffOfTheDeathMagus(this);
public class StaffOfTheFlameMagus extends CardImpl {
public StaffOfTheFlameMagus(UUID ownerId) {
public StaffOfTheFlameMagus(final StaffOfTheFlameMagus card) {
public StaffOfTheFlameMagus copy() {return new StaffOfTheFlameMagus(this);
public class StaffOfTheMindMagus extends CardImpl {
public StaffOfTheMindMagus(UUID ownerId) {
public StaffOfTheMindMagus(final StaffOfTheMindMagus card) {
public StaffOfTheMindMagus copy() {return new StaffOfTheMindMagus(this);
public class StaffOfTheSunMagus extends CardImpl {
public StaffOfTheSunMagus(UUID ownerId) {
public StaffOfTheSunMagus(final StaffOfTheSunMagus card) {
public StaffOfTheSunMagus copy() {return new StaffOfTheSunMagus(this);
public class StaffOfTheWildMagus extends CardImpl {
public StaffOfTheWildMagus(UUID ownerId) {
public StaffOfTheWildMagus(final StaffOfTheWildMagus card) {
public StaffOfTheWildMagus copy() {return new StaffOfTheWildMagus(this);return new SteelformSliver(this);
public class StonehornChanter extends CardImpl {
public StonehornChanter(UUID ownerId) {
public StonehornChanter(final StonehornChanter card) {
public StonehornChanter copy() {return new StonehornChanter(this);
public class StrikingSliver extends CardImpl {
public StrikingSliver(UUID ownerId) {
public StrikingSliver(final StrikingSliver card) {
public StrikingSliver copy() {return new StrikingSliver(this);
public class StrionicResonator extends CardImpl {
public StrionicResonator(UUID ownerId) {
public StrionicResonator(final StrionicResonator card) {
public StrionicResonator copy() {return new StrionicResonator(this);
class StrionicResonatorEffect extends OneShotEffect {
public StrionicResonatorEffect() {
public StrionicResonatorEffect(final StrionicResonatorEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public StrionicResonatorEffect copy() {return new StrionicResonatorEffect(this);
public String getText(Mode mode) {return sb.toString();
class TargetTriggeredAbility extends TargetObject {
public TargetTriggeredAbility() {
public TargetTriggeredAbility(final TargetTriggeredAbility target) {
public boolean canTarget(UUID id, Ability source, Game game) {return false;return stackObject.getStackAbility() != null
public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {return canChoose(sourceControllerId, game);
public boolean canChoose(UUID sourceControllerId, Game game) {return true;return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets(sourceControllerId, game);
public Set<UUID> possibleTargets(UUID sourceControllerId, Game game) {return possibleTargets;
public TargetTriggeredAbility copy() {return new TargetTriggeredAbility(this);
public Filter getFilter() {return new FilterAbility();
public class SyphonSliver extends CardImpl {
public SyphonSliver(UUID ownerId) {
public SyphonSliver(final SyphonSliver card) {
public SyphonSliver copy() {return new SyphonSliver(this);
public class TenaciousDead extends CardImpl {
public TenaciousDead(UUID ownerId) {
public TenaciousDead(final TenaciousDead card) {
public TenaciousDead copy() {return new TenaciousDead(this);
public class ThorncasterSliver extends CardImpl {
public ThorncasterSliver(UUID ownerId) {
public ThorncasterSliver(final ThorncasterSliver card) {
public ThorncasterSliver copy() {return new ThorncasterSliver(this);
public class TidebinderMage extends CardImpl {
public TidebinderMage(UUID ownerId) {
public TidebinderMage(final TidebinderMage card) {
public TidebinderMage copy() {return new TidebinderMage(this);
public TidebinderMageEffect() {
public TidebinderMageEffect(final TidebinderMageEffect effect) {
public TidebinderMageEffect copy() {return new TidebinderMageEffect(this);
public boolean apply(Game game, Ability source) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return false;return false;return false;return true;return false;
class TidebinderMageWatcher extends Watcher {
TidebinderMageWatcher () {
TidebinderMageWatcher(TidebinderMageWatcher watcher) {
public void watch(GameEvent event, Game game) {return;
public void reset() {
public TidebinderMageWatcher copy() {return new TidebinderMageWatcher(this);return new TrainedCondor(this);
public class UndeadMinotaur extends CardImpl {
public UndeadMinotaur(UUID ownerId) {
public UndeadMinotaur(final UndeadMinotaur card) {
public UndeadMinotaur copy() {return new UndeadMinotaur(this);
public class VialOfPoison extends CardImpl {
public VialOfPoison(UUID ownerId) {
public VialOfPoison(final VialOfPoison card) {
public VialOfPoison copy() {return new VialOfPoison(this);
public class VoraciousWurm extends CardImpl {
public VoraciousWurm(UUID ownerId) {
public VoraciousWurm(final VoraciousWurm card) {
public VoraciousWurm copy() {return new VoraciousWurm(this);
public class WardenOfEvosIsle extends CardImpl {
public WardenOfEvosIsle(UUID ownerId) {
public WardenOfEvosIsle(final WardenOfEvosIsle card) {
public WardenOfEvosIsle copy() {return new WardenOfEvosIsle(this);
public class WindreaderSphinx extends CardImpl {
public WindreaderSphinx(UUID ownerId) {
public WindreaderSphinx(final WindreaderSphinx card) {
public WindreaderSphinx copy() {return new WindreaderSphinx(this);
class WindreaderSphinxTriggeredAbility extends TriggeredAbilityImpl {
public WindreaderSphinxTriggeredAbility() {
public WindreaderSphinxTriggeredAbility(final WindreaderSphinxTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return attacker != null && filter.match(attacker, game);
public String getRule() {return "Whenever a creature with flying attacks, " + super.getRule();
public WindreaderSphinxTriggeredAbility copy() {return new WindreaderSphinxTriggeredAbility(this);
public class Witchstalker extends CardImpl {
public Witchstalker(UUID ownerId) {
public Witchstalker(final Witchstalker card) {
public Witchstalker copy() {return new Witchstalker(this);
class WitchstalkerTriggeredAbility extends TriggeredAbilityImpl {
public WitchstalkerTriggeredAbility() {
public WitchstalkerTriggeredAbility(final WitchstalkerTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null
public String getRule() {return "Whenever an opponent casts a blue or black spell during your turn, put a +1/+1 counter on {this}.";
public WitchstalkerTriggeredAbility copy() {return new WitchstalkerTriggeredAbility(this);
public class WoodbornBehemoth extends CardImpl {
public WoodbornBehemoth(UUID ownerId) {
public WoodbornBehemoth(final WoodbornBehemoth card) {
public WoodbornBehemoth copy() {return new WoodbornBehemoth(this);
public class XathridNecromancer extends CardImpl {
public XathridNecromancer(UUID ownerId) {
public XathridNecromancer(final XathridNecromancer card) {
public XathridNecromancer copy() {return new XathridNecromancer(this);
public class YoungPyromancer extends CardImpl {
public YoungPyromancer(UUID ownerId) {
public YoungPyromancer(final YoungPyromancer card) {
public YoungPyromancer copy() {return new YoungPyromancer(this);
public class ZephyrCharge extends CardImpl {
public ZephyrCharge(UUID ownerId) {
public ZephyrCharge(final ZephyrCharge card) {
public ZephyrCharge copy() {return new ZephyrCharge(this);
public class ActOnImpulse extends CardImpl {
public ActOnImpulse(UUID ownerId) {
public ActOnImpulse(final ActOnImpulse card) {
public ActOnImpulse copy() {return new ActOnImpulse(this);
class ActOnImpulseExileEffect extends OneShotEffect {
public ActOnImpulseExileEffect() {
public ActOnImpulseExileEffect(final ActOnImpulseExileEffect effect) {
public ActOnImpulseExileEffect copy() {return new ActOnImpulseExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ActOnImpulseMayPlayExiledEffect extends AsThoughEffectImpl {
public ActOnImpulseMayPlayExiledEffect(List<UUID> cards) {
public ActOnImpulseMayPlayExiledEffect(final ActOnImpulseMayPlayExiledEffect effect) {
public ActOnImpulseMayPlayExiledEffect copy() {return new ActOnImpulseMayPlayExiledEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class AeronautTinkerer extends CardImpl {
public AeronautTinkerer(UUID ownerId) {
public AeronautTinkerer(final AeronautTinkerer card) {
public AeronautTinkerer copy() {return new AeronautTinkerer(this);
public class AEtherspouts extends CardImpl {
public AEtherspouts(UUID ownerId) {
public AEtherspouts(final AEtherspouts card) {
public AEtherspouts copy() {return new AEtherspouts(this);
class AEtherspoutsEffect extends OneShotEffect {
public AEtherspoutsEffect() {
public AEtherspoutsEffect(final AEtherspoutsEffect effect) {
public AEtherspoutsEffect copy() {return new AEtherspoutsEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class AggressiveMining extends CardImpl {
public AggressiveMining(UUID ownerId) {
public AggressiveMining(final AggressiveMining card) {
public AggressiveMining copy() {return new AggressiveMining(this);
public AggressiveMiningEffect() {
public AggressiveMiningEffect(final AggressiveMiningEffect effect) {
public AggressiveMiningEffect copy() {return new AggressiveMiningEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.PLAY_LAND;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public class AjaniSteadfast extends CardImpl {
public AjaniSteadfast(UUID ownerId) {
public AjaniSteadfast(final AjaniSteadfast card) {
public AjaniSteadfast copy() {return new AjaniSteadfast(this);
class AjaniSteadfastEmblem extends Emblem {
public AjaniSteadfastEmblem() {
class AjaniSteadfastPreventEffect extends PreventionEffectImpl {
public AjaniSteadfastPreventEffect() {
public AjaniSteadfastPreventEffect(AjaniSteadfastPreventEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return super.applies(event, source, game);return super.applies(event, source, game);return false;
public AjaniSteadfastPreventEffect copy() {return new AjaniSteadfastPreventEffect(this);
public class AltacBloodseeker extends CardImpl {
public AltacBloodseeker(UUID ownerId) {
public AltacBloodseeker(final AltacBloodseeker card) {
public AltacBloodseeker copy() {return new AltacBloodseeker(this);
public class AmphinPathmage extends CardImpl {
public AmphinPathmage(UUID ownerId) {
public AmphinPathmage(final AmphinPathmage card) {
public AmphinPathmage copy() {return new AmphinPathmage(this);
public class AvacynGuardianAngel extends CardImpl {
public AvacynGuardianAngel(UUID ownerId) {
public AvacynGuardianAngel(final AvacynGuardianAngel card) {
public AvacynGuardianAngel copy() {return new AvacynGuardianAngel(this);
class AvacynGuardianAngelPreventToCreatureEffect extends PreventionEffectImpl {
public AvacynGuardianAngelPreventToCreatureEffect(Duration duration, int amount, boolean onlyCombat) {
public AvacynGuardianAngelPreventToCreatureEffect(AvacynGuardianAngelPreventToCreatureEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public AvacynGuardianAngelPreventToCreatureEffect copy() {return new AvacynGuardianAngelPreventToCreatureEffect(this);
class AvacynGuardianAngelPreventToPlayerEffect extends PreventionEffectImpl {
public AvacynGuardianAngelPreventToPlayerEffect(Duration duration, int amount, boolean onlyCombat) {
public AvacynGuardianAngelPreventToPlayerEffect(AvacynGuardianAngelPreventToPlayerEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public AvacynGuardianAngelPreventToPlayerEffect copy() {return new AvacynGuardianAngelPreventToPlayerEffect(this);
public class AvariceAmulet extends CardImpl {
public AvariceAmulet(UUID ownerId) {
public AvariceAmulet(final AvariceAmulet card) {
public AvariceAmulet copy() {return new AvariceAmulet(this);
class AvariceAmuletChangeControlEffect extends ContinuousEffectImpl {
AvariceAmuletChangeControlEffect() {
AvariceAmuletChangeControlEffect(final AvariceAmuletChangeControlEffect effect) {
public AvariceAmuletChangeControlEffect copy() {return new AvariceAmuletChangeControlEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(source.getFirstTarget(), game);return false;
public class BloodHost extends CardImpl {
public BloodHost(UUID ownerId) {
public BloodHost(final BloodHost card) {
public BloodHost copy() {return new BloodHost(this);
public class BoonweaverGiant extends CardImpl {
public BoonweaverGiant(UUID ownerId) {
public BoonweaverGiant(final BoonweaverGiant card) {
public BoonweaverGiant copy() {return new BoonweaverGiant(this);
class BoonweaverGiantEffect extends OneShotEffect {
public BoonweaverGiantEffect() {
public BoonweaverGiantEffect(final BoonweaverGiantEffect effect) {
public BoonweaverGiantEffect copy() {return new BoonweaverGiantEffect(this);
public boolean apply(Game game, Ability source) {return false;return permanent.addAttachment(card.getId(), game);return true;
public class BorderlandMarauder extends CardImpl {
public BorderlandMarauder(UUID ownerId) {
public BorderlandMarauder(final BorderlandMarauder card) {
public BorderlandMarauder copy() {return new BorderlandMarauder(this);
public class BrawlersPlate extends CardImpl {
public BrawlersPlate(UUID ownerId) {
public BrawlersPlate(final BrawlersPlate card) {
public BrawlersPlate copy() {return new BrawlersPlate(this);
public class BroodKeeper extends CardImpl {
public BroodKeeper(UUID ownerId) {
public BroodKeeper(final BroodKeeper card) {
public BroodKeeper copy() {return new BroodKeeper(this);
class BroodKeeperDragonToken extends Token {
public BroodKeeperDragonToken() {
public class BurningAnger extends CardImpl {
public BurningAnger(UUID ownerId) {
public BurningAnger(final BurningAnger card) {
public BurningAnger copy() {return new BurningAnger(this);
public class CarnivorousMossBeast extends CardImpl {
public CarnivorousMossBeast(UUID ownerId) {
public CarnivorousMossBeast(final CarnivorousMossBeast card) {
public CarnivorousMossBeast copy() {return new CarnivorousMossBeast(this);
public class CarrionCrow extends CardImpl {
public CarrionCrow(UUID ownerId) {
public CarrionCrow(final CarrionCrow card) {
public CarrionCrow copy() {return new CarrionCrow(this);
public class ChasmSkulker extends CardImpl {
public ChasmSkulker(UUID ownerId) {
public ChasmSkulker(final ChasmSkulker card) {
public ChasmSkulker copy() {return new ChasmSkulker(this);
class ChasmSkulkerEffect extends OneShotEffect {
public ChasmSkulkerEffect() {
public ChasmSkulkerEffect(final ChasmSkulkerEffect effect) {
public ChasmSkulkerEffect copy() {return new ChasmSkulkerEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new ChasmSkulkerSquidToken(), counters).apply(game, source);return true;return false;
class ChasmSkulkerSquidToken extends Token {
public ChasmSkulkerSquidToken() {
public class ChiefEngineer extends CardImpl {
public ChiefEngineer(UUID ownerId) {
public ChiefEngineer(final ChiefEngineer card) {
public ChiefEngineer copy() {return new ChiefEngineer(this);
class ChiefEngineerGainAbilitySpellsEffect extends ContinuousEffectImpl {
public ChiefEngineerGainAbilitySpellsEffect(Ability ability, FilterSpell filter) {
public ChiefEngineerGainAbilitySpellsEffect(final ChiefEngineerGainAbilitySpellsEffect effect) {
public ChiefEngineerGainAbilitySpellsEffect copy() {return new ChiefEngineerGainAbilitySpellsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Chronostutter extends CardImpl {
public Chronostutter(UUID ownerId) {
public Chronostutter(final Chronostutter card) {
public Chronostutter copy() {return new Chronostutter(this);
class ChronostutterEffect extends OneShotEffect {
public ChronostutterEffect() {
public ChronostutterEffect(final ChronostutterEffect effect) {
public ChronostutterEffect copy() {return new ChronostutterEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class ConstrictingSliver extends CardImpl {
public ConstrictingSliver(UUID ownerId) {
public ConstrictingSliver(final ConstrictingSliver card) {
public ConstrictingSliver copy() {return new ConstrictingSliver(this);
class ConstrictingSliverExileEffect extends OneShotEffect {
public ConstrictingSliverExileEffect() {
public ConstrictingSliverExileEffect(final ConstrictingSliverExileEffect effect) {
public ConstrictingSliverExileEffect copy() {return new ConstrictingSliverExileEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), permanent.getIdName()).apply(game, source);return false;
public class CoralBarrier extends CardImpl {
public CoralBarrier(UUID ownerId) {
public CoralBarrier(final CoralBarrier card) {
public CoralBarrier copy() {return new CoralBarrier(this);
class CoralBarrierSquidToken extends Token {
public CoralBarrierSquidToken() {
public class CovenantOfBlood extends CardImpl {
public CovenantOfBlood(UUID ownerId) {
public CovenantOfBlood(final CovenantOfBlood card) {
public CovenantOfBlood copy() {return new CovenantOfBlood(this);
public class CrowdsFavor extends CardImpl {
public CrowdsFavor(UUID ownerId) {
public CrowdsFavor(final CrowdsFavor card) {
public CrowdsFavor copy() {return new CrowdsFavor(this);
public class CruelSadist extends CardImpl {
public CruelSadist(UUID ownerId) {
public CruelSadist(final CruelSadist card) {
public CruelSadist copy() {return new CruelSadist(this);
public class DauntlessRiverMarshal extends CardImpl {
public DauntlessRiverMarshal(UUID ownerId) {
public DauntlessRiverMarshal(final DauntlessRiverMarshal card) {
public DauntlessRiverMarshal copy() {return new DauntlessRiverMarshal(this);return new DiffusionSliver(this);return new DiffusionSliverTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Sliver creature you control becomes the target of a spell or ability an opponent controls, counter that spell or ability unless its controller pays {2}.";
public class EphemeralShields extends CardImpl {
public EphemeralShields(UUID ownerId) {
public EphemeralShields(final EphemeralShields card) {
public EphemeralShields copy() {return new EphemeralShields(this);
public class EternalThirst extends CardImpl {
public EternalThirst(UUID ownerId) {
public EternalThirst(final EternalThirst card) {
public EternalThirst copy() {return new EternalThirst(this);
public class FeastOnTheFallen extends CardImpl {
public FeastOnTheFallen(UUID ownerId) {
public FeastOnTheFallen(final FeastOnTheFallen card) {
public FeastOnTheFallen copy() {return new FeastOnTheFallen(this);
class FeastOnTheFallenCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return true;return false;
public class FeralIncarnation extends CardImpl {
public FeralIncarnation(UUID ownerId) {
public FeralIncarnation(final FeralIncarnation card) {
public FeralIncarnation copy() {return new FeralIncarnation(this);
public class Festergloom extends CardImpl {
public Festergloom(UUID ownerId) {
public Festergloom(final Festergloom card) {
public Festergloom copy() {return new Festergloom(this);
public class FirstResponse extends CardImpl {
public FirstResponse(UUID ownerId) {
public FirstResponse(final FirstResponse card) {
public FirstResponse copy() {return new FirstResponse(this);
class FirstResponseEffect extends OneShotEffect {
public FirstResponseEffect() {
public FirstResponseEffect(final FirstResponseEffect effect) {
public FirstResponseEffect copy() {return new FirstResponseEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new SoldierToken()).apply(game, source);return true;return false;
public class FleshToDust extends CardImpl {
public FleshToDust(UUID ownerId) {
public FleshToDust(final FleshToDust card) {
public FleshToDust copy() {return new FleshToDust(this);
public class FrostLynx extends CardImpl {
public FrostLynx(UUID ownerId) {
public FrostLynx(final FrostLynx card) {
public FrostLynx copy() {return new FrostLynx(this);
public class GarrukApexPredator extends CardImpl {
public GarrukApexPredator(UUID ownerId) {
public GarrukApexPredator(final GarrukApexPredator card) {
public GarrukApexPredator copy() {return new GarrukApexPredator(this);
class GarrukApexPredatorEffect3 extends OneShotEffect {
public GarrukApexPredatorEffect3() {
public GarrukApexPredatorEffect3(final GarrukApexPredatorEffect3 effect) {
public GarrukApexPredatorEffect3 copy() {return new GarrukApexPredatorEffect3(this);
public boolean apply(Game game, Ability source) {return true;return false;
class GarrukApexPredatorBeastToken extends Token {
public GarrukApexPredatorBeastToken() {
class GarrukApexPredatorEmblem extends Emblem {
public GarrukApexPredatorEmblem() {
public class GeistOfTheMoors extends CardImpl {
public GeistOfTheMoors(UUID ownerId) {
public GeistOfTheMoors(final GeistOfTheMoors card) {
public GeistOfTheMoors copy() {return new GeistOfTheMoors(this);
public class GeneratorServant extends CardImpl {
public GeneratorServant(UUID ownerId) {
public class GenesisHydra extends CardImpl {
public GenesisHydra(UUID ownerId) {
public GenesisHydra(final GenesisHydra card) {
public GenesisHydra copy() {return new GenesisHydra(this);
class GenesisHydraPutOntoBattlefieldEffect extends OneShotEffect {
public GenesisHydraPutOntoBattlefieldEffect() {
public GenesisHydraPutOntoBattlefieldEffect(final GenesisHydraPutOntoBattlefieldEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public GenesisHydraPutOntoBattlefieldEffect copy() {return new GenesisHydraPutOntoBattlefieldEffect(this);
public class GlacialCrasher extends CardImpl {
public GlacialCrasher(UUID ownerId) {
public GlacialCrasher(final GlacialCrasher card) {
public GlacialCrasher copy() {return new GlacialCrasher(this);
class GlacialCrasherEffect extends RestrictionEffect {
public GlacialCrasherEffect() {
public GlacialCrasherEffect(final GlacialCrasherEffect effect) {
public GlacialCrasherEffect copy() {return new GlacialCrasherEffect(this);
public boolean canAttack(Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public class GoblinKaboomist extends CardImpl {
public GoblinKaboomist(UUID ownerId) {
public GoblinKaboomist(final GoblinKaboomist card) {
public GoblinKaboomist copy() {return new GoblinKaboomist(this);
class GoblinKaboomistFlipCoinEffect extends OneShotEffect {
public GoblinKaboomistFlipCoinEffect() {
public GoblinKaboomistFlipCoinEffect(final GoblinKaboomistFlipCoinEffect effect) {
public GoblinKaboomistFlipCoinEffect copy() {return new GoblinKaboomistFlipCoinEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class LandMineToken extends Token {
public LandMineToken() {
public class GoblinRabblemaster extends CardImpl {
public GoblinRabblemaster(UUID ownerId) {
public GoblinRabblemaster(final GoblinRabblemaster card) {
public GoblinRabblemaster copy() {return new GoblinRabblemaster(this);
public class Hammerhand extends CardImpl {
public Hammerhand(UUID ownerId) {
public Hammerhand(final Hammerhand card) {
public Hammerhand copy() {return new Hammerhand(this);
public class HeliodsPilgrim extends CardImpl {
public HeliodsPilgrim(UUID ownerId) {
public HeliodsPilgrim(final HeliodsPilgrim card) {
public HeliodsPilgrim copy() {return new HeliodsPilgrim(this);
public class HornetNest extends CardImpl {
public HornetNest(UUID ownerId) {
public HornetNest(final HornetNest card) {
public HornetNest copy() {return new HornetNest(this);
class HornetNestDealDamageEffect extends OneShotEffect {
public HornetNestDealDamageEffect() {
public HornetNestDealDamageEffect(final HornetNestDealDamageEffect effect) {
public HornetNestDealDamageEffect copy() {return new HornetNestDealDamageEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new HornetNestInsectToken(), amount).apply(game, source);return false;
class HornetNestInsectToken extends Token {
public HornetNestInsectToken() {
public class HushwingGryff extends CardImpl {
public HushwingGryff(UUID ownerId) {
public HushwingGryff(final HushwingGryff card) {
public HushwingGryff copy() {return new HushwingGryff(this);
HushwingGryffEffect() {
HushwingGryffEffect(final HushwingGryffEffect effect) {
public String getInfoMessage(Ability source, GameEvent event, Game game) {return sourceObject.getLogName() + " prevented ability of " + mageObject.getLogName() + " to trigger";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public HushwingGryffEffect copy() {return new HushwingGryffEffect(this);
public class IndulgentTormentor extends CardImpl {
public IndulgentTormentor(UUID ownerId) {
public IndulgentTormentor(final IndulgentTormentor card) {
public IndulgentTormentor copy() {return new IndulgentTormentor(this);
class IndulgentTormentorEffect extends OneShotEffect {
IndulgentTormentorEffect() {
IndulgentTormentorEffect(final IndulgentTormentorEffect effect) {
public IndulgentTormentorEffect copy() {return new IndulgentTormentorEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return true;return false;
public class InfernoFist extends CardImpl {
public InfernoFist(UUID ownerId) {
public InfernoFist(final InfernoFist card) {
public InfernoFist copy() {return new InfernoFist(this);
public class InGarruksWake extends CardImpl {
public InGarruksWake(UUID ownerId) {
public InGarruksWake(final InGarruksWake card) {
public InGarruksWake copy() {return new InGarruksWake(this);
public class InvasiveSpecies extends CardImpl {
public InvasiveSpecies(UUID ownerId) {
public InvasiveSpecies(final InvasiveSpecies card) {
public InvasiveSpecies copy() {return new InvasiveSpecies(this);
public class JaceTheLivingGuildpact extends CardImpl {
public JaceTheLivingGuildpact(UUID ownerId) {
public JaceTheLivingGuildpact(final JaceTheLivingGuildpact card) {
public JaceTheLivingGuildpact copy() {return new JaceTheLivingGuildpact(this);
class JaceTheLivingGuildpactEffect extends OneShotEffect {
public JaceTheLivingGuildpactEffect() {
public JaceTheLivingGuildpactEffect(final JaceTheLivingGuildpactEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public JaceTheLivingGuildpactEffect copy() {return new JaceTheLivingGuildpactEffect(this);
public class JaliraMasterPolymorphist extends CardImpl {
public JaliraMasterPolymorphist(UUID ownerId) {
public JaliraMasterPolymorphist(final JaliraMasterPolymorphist card) {
public JaliraMasterPolymorphist copy() {return new JaliraMasterPolymorphist(this);
class JaliraMasterPolymorphistEffect extends OneShotEffect {
public JaliraMasterPolymorphistEffect() {
public JaliraMasterPolymorphistEffect(final JaliraMasterPolymorphistEffect effect) {
public JaliraMasterPolymorphistEffect copy() {return new JaliraMasterPolymorphistEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JorubaiMurkLurker extends CardImpl {
public JorubaiMurkLurker(UUID ownerId) {
public JorubaiMurkLurker(final JorubaiMurkLurker card) {
public JorubaiMurkLurker copy() {return new JorubaiMurkLurker(this);
public class KalonianTwingrove extends CardImpl {
public KalonianTwingrove(UUID ownerId) {
public KalonianTwingrove(final KalonianTwingrove card) {
public KalonianTwingrove copy() {return new KalonianTwingrove(this);
class KalonianTwingroveTreefolkWarriorToken extends Token {
public KalonianTwingroveTreefolkWarriorToken() {
public class KapshoKitefins extends CardImpl {
public KapshoKitefins(UUID ownerId) {
public KapshoKitefins(final KapshoKitefins card) {
public KapshoKitefins copy() {return new KapshoKitefins(this);
public class KirdChieftain extends CardImpl {
public KirdChieftain(UUID ownerId) {
public KirdChieftain(final KirdChieftain card) {
public KirdChieftain copy() {return new KirdChieftain(this);return new KrenkosEnforcer(this);
public class KurkeshOnakkeAncient extends CardImpl {
public KurkeshOnakkeAncient(UUID ownerId) {
public KurkeshOnakkeAncient(final KurkeshOnakkeAncient card) {
public KurkeshOnakkeAncient copy() {return new KurkeshOnakkeAncient(this);
class KurkeshOnakkeAncientTriggeredAbility extends TriggeredAbilityImpl {
KurkeshOnakkeAncientTriggeredAbility() {
KurkeshOnakkeAncientTriggeredAbility(final KurkeshOnakkeAncientTriggeredAbility ability) {
public KurkeshOnakkeAncientTriggeredAbility copy() {return new KurkeshOnakkeAncientTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ACTIVATED_ABILITY;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you activate an ability of an artifact, if it isn't a mana ability" + super.getRule();
class KurkeshOnakkeAncientEffect extends OneShotEffect {
KurkeshOnakkeAncientEffect() {
KurkeshOnakkeAncientEffect(final KurkeshOnakkeAncientEffect effect) {
public KurkeshOnakkeAncientEffect copy() {return new KurkeshOnakkeAncientEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;return false;
public class LeechingSliver extends CardImpl {
public LeechingSliver(UUID ownerId) {
public LeechingSliver(final LeechingSliver card) {
public LeechingSliver copy() {return new LeechingSliver(this);return new LifesLegacy(this);
public boolean apply(Game game, Ability source) {return false;return true;return new LifesLegacyEffect(this);
public class LivingTotem extends CardImpl {
public LivingTotem(UUID ownerId) {
public LivingTotem(final LivingTotem card) {
public LivingTotem copy() {return new LivingTotem(this);
public class MarkedByHonor extends CardImpl {
public MarkedByHonor(UUID ownerId) {
public MarkedByHonor(final MarkedByHonor card) {
public MarkedByHonor copy() {return new MarkedByHonor(this);
public class MasterOfPredicaments extends CardImpl {
public MasterOfPredicaments(UUID ownerId) {
public MasterOfPredicaments(final MasterOfPredicaments card) {
public MasterOfPredicaments copy() {return new MasterOfPredicaments(this);
class MasterOfPredicamentsEffect extends OneShotEffect {
public MasterOfPredicamentsEffect() {
public MasterOfPredicamentsEffect(final MasterOfPredicamentsEffect effect) {
public MasterOfPredicamentsEffect copy() {return new MasterOfPredicamentsEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;
public class Meteorite extends CardImpl {
public Meteorite(UUID ownerId) {
public Meteorite(final Meteorite card) {
public Meteorite copy() {return new Meteorite(this);
public class MightMakesRight extends CardImpl {
public MightMakesRight(UUID ownerId) {
public MightMakesRight(final MightMakesRight card) {
public MightMakesRight copy() {return new MightMakesRight(this);
class ControlsEachCreatureWithGreatestPowerCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return result;
public class MilitaryIntelligence extends CardImpl {
public MilitaryIntelligence(UUID ownerId) {
public MilitaryIntelligence(final MilitaryIntelligence card) {
public MilitaryIntelligence copy() {return new MilitaryIntelligence(this);
class MilitaryIntelligenceTriggeredAbility extends TriggeredAbilityImpl {
public MilitaryIntelligenceTriggeredAbility(Effect effect) {
public MilitaryIntelligenceTriggeredAbility(final MilitaryIntelligenceTriggeredAbility ability) {
public MilitaryIntelligenceTriggeredAbility copy() {return new MilitaryIntelligenceTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return game.getCombat().getAttackers().size() >= 2 && game.getCombat().getAttackerId().equals(getControllerId());
public String getRule() {return new StringBuilder("Whenever you attack with two or more creatures, ").append(super.getRule()).toString() ;
public class MinersBane extends CardImpl {
public MinersBane(UUID ownerId) {
public MinersBane(final MinersBane card) {
public MinersBane copy() {return new MinersBane(this);
public class NecromancersAssistant extends CardImpl {
public NecromancersAssistant(UUID ownerId) {
public NecromancersAssistant(final NecromancersAssistant card) {
public NecromancersAssistant copy() {return new NecromancersAssistant(this);
public class NecromancersStockpile extends CardImpl {
public NecromancersStockpile(UUID ownerId) {
public NecromancersStockpile(final NecromancersStockpile card) {
public NecromancersStockpile copy() {return new NecromancersStockpile(this);
class NecromancersStockpileDiscardTargetCost extends CostImpl {
public NecromancersStockpileDiscardTargetCost(TargetCardInHand target) {
public NecromancersStockpileDiscardTargetCost(NecromancersStockpileDiscardTargetCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return false;return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return targets.canChoose(controllerId, game);
public NecromancersStockpileDiscardTargetCost copy() {return new NecromancersStockpileDiscardTargetCost(this);
public boolean isZombieCard() {return isZombieCard;
class NecromancersStockpilePutTokenEffect extends OneShotEffect {
NecromancersStockpilePutTokenEffect() {
NecromancersStockpilePutTokenEffect(final NecromancersStockpilePutTokenEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public NecromancersStockpilePutTokenEffect copy() {return new NecromancersStockpilePutTokenEffect(this);
public class NetcasterSpider extends CardImpl {
public NetcasterSpider(UUID ownerId) {
public NetcasterSpider(final NetcasterSpider card) {
public NetcasterSpider copy() {return new NetcasterSpider(this);
class BlocksCreatureWithFlyingTriggeredAbility extends TriggeredAbilityImpl {
public BlocksCreatureWithFlyingTriggeredAbility(Effect effect, boolean optional) {
public BlocksCreatureWithFlyingTriggeredAbility(final BlocksCreatureWithFlyingTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.BLOCKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId().equals(this.getSourceId())
public String getRule() {return "Whenever {this} blocks a creature with flying, " + super.getRule();
public BlocksCreatureWithFlyingTriggeredAbility copy() {return new BlocksCreatureWithFlyingTriggeredAbility(this);
public class NightfireGiant extends CardImpl {
public NightfireGiant(UUID ownerId) {
public NightfireGiant(final NightfireGiant card) {
public NightfireGiant copy() {return new NightfireGiant(this);
public class NimbusOfTheIsles extends CardImpl {
public NimbusOfTheIsles(UUID ownerId) {
public NimbusOfTheIsles(final NimbusOfTheIsles card) {
public NimbusOfTheIsles copy() {return new NimbusOfTheIsles(this);
public class NissasExpedition extends CardImpl {
public NissasExpedition(UUID ownerId) {
public NissasExpedition(final NissasExpedition card) {
public NissasExpedition copy() {return new NissasExpedition(this);
public class NissaWorldwaker extends CardImpl {
public NissaWorldwaker(UUID ownerId) {
public NissaWorldwaker(final NissaWorldwaker card) {
public NissaWorldwaker copy() {return new NissaWorldwaker(this);
class NissaWorldwakerSearchEffect extends OneShotEffect {
public NissaWorldwakerSearchEffect() {
public NissaWorldwakerSearchEffect(final NissaWorldwakerSearchEffect effect) {
public NissaWorldwakerSearchEffect copy() {return new NissaWorldwakerSearchEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
class NissaWorldwakerToken extends Token {
public NissaWorldwakerToken() {
public class ObeliskOfUrd extends CardImpl {
public ObeliskOfUrd(UUID ownerId) {
public ObeliskOfUrd(final ObeliskOfUrd card) {
public ObeliskOfUrd copy() {return new ObeliskOfUrd(this);
class ObeliskOfUrdBoostEffect extends ContinuousEffectImpl {
ObeliskOfUrdBoostEffect() {
ObeliskOfUrdBoostEffect(final ObeliskOfUrdBoostEffect effect) {
public ObeliskOfUrdBoostEffect copy() {return new ObeliskOfUrdBoostEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ObNixilisUnshackled extends CardImpl {
public ObNixilisUnshackled(UUID ownerId) {
public ObNixilisUnshackled(final ObNixilisUnshackled card) {
public ObNixilisUnshackled copy() {return new ObNixilisUnshackled(this);
class ObNixilisUnshackledTriggeredAbility extends TriggeredAbilityImpl {
ObNixilisUnshackledTriggeredAbility() {
ObNixilisUnshackledTriggeredAbility(final ObNixilisUnshackledTriggeredAbility ability) {
public ObNixilisUnshackledTriggeredAbility copy() {return new ObNixilisUnshackledTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LIBRARY_SEARCHED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent searches his or her library, that player sacrifices a creature and loses 10 life.";
ObNixilisUnshackledEffect() {
ObNixilisUnshackledEffect(final ObNixilisUnshackledEffect effect) {
public ObNixilisUnshackledEffect copy() {return new ObNixilisUnshackledEffect(this);
public boolean apply(Game game, Ability source) {return super.apply(game, source);
public class ParagonOfEternalWilds extends CardImpl {
public ParagonOfEternalWilds(UUID ownerId) {
public ParagonOfEternalWilds(final ParagonOfEternalWilds card) {
public ParagonOfEternalWilds copy() {return new ParagonOfEternalWilds(this);
public class ParagonOfFierceDefiance extends CardImpl {
public ParagonOfFierceDefiance(UUID ownerId) {
public ParagonOfFierceDefiance(final ParagonOfFierceDefiance card) {
public ParagonOfFierceDefiance copy() {return new ParagonOfFierceDefiance(this);
public class ParagonOfGatheringMists extends CardImpl {
public ParagonOfGatheringMists(UUID ownerId) {
public ParagonOfGatheringMists(final ParagonOfGatheringMists card) {
public ParagonOfGatheringMists copy() {return new ParagonOfGatheringMists(this);
public class ParagonOfNewDawns extends CardImpl {
public ParagonOfNewDawns(UUID ownerId) {
public ParagonOfNewDawns(final ParagonOfNewDawns card) {
public ParagonOfNewDawns copy() {return new ParagonOfNewDawns(this);
public class ParagonOfOpenGraves extends CardImpl {
public ParagonOfOpenGraves(UUID ownerId) {
public ParagonOfOpenGraves(final ParagonOfOpenGraves card) {
public ParagonOfOpenGraves copy() {return new ParagonOfOpenGraves(this);
public class PillarOfLight extends CardImpl {
public PillarOfLight(UUID ownerId) {
public PillarOfLight(final PillarOfLight card) {
public PillarOfLight copy() {return new PillarOfLight(this);
public class PolymorphistsJest extends CardImpl {
public PolymorphistsJest(UUID ownerId) {
public PolymorphistsJest(final PolymorphistsJest card) {
public PolymorphistsJest copy() {return new PolymorphistsJest(this);
class PolymorphistsJestEffect extends ContinuousEffectImpl {
public PolymorphistsJestEffect() {
public PolymorphistsJestEffect(final PolymorphistsJestEffect effect) {
public PolymorphistsJestEffect copy() {return new PolymorphistsJestEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.ColorChangingEffects_5 || layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class ProfaneMemento extends CardImpl {
public ProfaneMemento(UUID ownerId) {
public ProfaneMemento(final ProfaneMemento card) {
public ProfaneMemento copy() {return new ProfaneMemento(this);
class ProfaneMementoTriggeredAbility extends TriggeredAbilityImpl {
public ProfaneMementoTriggeredAbility() {
public ProfaneMementoTriggeredAbility(final ProfaneMementoTriggeredAbility ability) {
public ProfaneMementoTriggeredAbility copy() {return new ProfaneMementoTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature card is put into an opponent's graveyard from anywhere, " + super.getRule();
public class Quickling extends CardImpl {
public Quickling(UUID ownerId) {
public Quickling(final Quickling card) {
public Quickling copy() {return new Quickling(this);
class QuicklingEffect extends OneShotEffect {private static final String effectText = "sacrifice it unless you return another creature you control to its owner's hand";
QuicklingEffect() {
QuicklingEffect(QuicklingEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public QuicklingEffect copy() {return new QuicklingEffect(this);
public class RadiantFountain extends CardImpl {
public RadiantFountain(UUID ownerId) {
public RadiantFountain(final RadiantFountain card) {
public RadiantFountain copy() {return new RadiantFountain(this);
public class ReclamationSage extends CardImpl {
public ReclamationSage(UUID ownerId) {
public ReclamationSage(final ReclamationSage card) {
public ReclamationSage copy() {return new ReclamationSage(this);
public class ResearchAssistant extends CardImpl {
public ResearchAssistant(UUID ownerId) {
public ResearchAssistant(final ResearchAssistant card) {
public ResearchAssistant copy() {return new ResearchAssistant(this);
public class ResoluteArchangel extends CardImpl {
public ResoluteArchangel(UUID ownerId) {
public ResoluteArchangel(final ResoluteArchangel card) {
public ResoluteArchangel copy() {return new ResoluteArchangel(this);
class ResoluteArchangelEffect extends OneShotEffect {
public ResoluteArchangelEffect() {
public ResoluteArchangelEffect(final ResoluteArchangelEffect effect) {
public ResoluteArchangelEffect copy() {return new ResoluteArchangelEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return fInstance;
public boolean apply(Game game, Ability source) {return controller.getLife() < game.getLife();return false;
public class ReturnToTheRanks extends CardImpl {
public ReturnToTheRanks(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public ReturnToTheRanks(final ReturnToTheRanks card) {
public ReturnToTheRanks copy() {return new ReturnToTheRanks(this);
public class RoguesGloves extends CardImpl {
public RoguesGloves(UUID ownerId) {
public RoguesGloves(final RoguesGloves card) {
public RoguesGloves copy() {return new RoguesGloves(this);
public class RotfeasterMaggot extends CardImpl {
public RotfeasterMaggot(UUID ownerId) {
public RotfeasterMaggot(final RotfeasterMaggot card) {
public RotfeasterMaggot copy() {return new RotfeasterMaggot(this);
class RotfeasterMaggotExileEffect extends OneShotEffect {
public RotfeasterMaggotExileEffect() {
public RotfeasterMaggotExileEffect(final RotfeasterMaggotExileEffect effect) {
public RotfeasterMaggotExileEffect copy() {return new RotfeasterMaggotExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SacredArmory extends CardImpl {
public SacredArmory(UUID ownerId) {
public SacredArmory(final SacredArmory card) {
public SacredArmory copy() {return new SacredArmory(this);return new SanctifiedCharge(this);
public class ScrapyardMongrel extends CardImpl {
public ScrapyardMongrel(UUID ownerId) {
public ScrapyardMongrel(final ScrapyardMongrel card) {
public ScrapyardMongrel copy() {return new ScrapyardMongrel(this);
public class ScuttlingDoomEngine extends CardImpl {
public ScuttlingDoomEngine(UUID ownerId) {
public ScuttlingDoomEngine(final ScuttlingDoomEngine card) {
public ScuttlingDoomEngine copy() {return new ScuttlingDoomEngine(this);
public class SeraphOfTheMasses extends CardImpl {
public SeraphOfTheMasses(UUID ownerId) {
public SeraphOfTheMasses(final SeraphOfTheMasses card) {
public SeraphOfTheMasses copy() {return new SeraphOfTheMasses(this);return new ShadowcloakVampire(this);
public class ShamanOfSpring extends CardImpl {
public ShamanOfSpring(UUID ownerId) {
public ShamanOfSpring(final ShamanOfSpring card) {
public ShamanOfSpring copy() {return new ShamanOfSpring(this);
public class SliverHive extends CardImpl {
public SliverHive(UUID ownerId) {
public SliverHive(final SliverHive card) {
public SliverHive copy() {return new SliverHive(this);
class SliverHiveManaBuilder extends ConditionalManaBuilder {
public class SliverHivelord extends CardImpl {
public SliverHivelord(UUID ownerId) {
public SliverHivelord(final SliverHivelord card) {
public SliverHivelord copy() {return new SliverHivelord(this);
public class SoulOfInnistrad extends CardImpl {
public SoulOfInnistrad(UUID ownerId) {
public SoulOfInnistrad(final SoulOfInnistrad card) {
public SoulOfInnistrad copy() {return new SoulOfInnistrad(this);
public class SoulOfNewPhyrexia extends CardImpl {
public SoulOfNewPhyrexia(UUID ownerId) {
public SoulOfNewPhyrexia(final SoulOfNewPhyrexia card) {
public SoulOfNewPhyrexia copy() {return new SoulOfNewPhyrexia(this);
public class SoulOfRavnica extends CardImpl {
public SoulOfRavnica(UUID ownerId) {
public SoulOfRavnica(final SoulOfRavnica card) {
public SoulOfRavnica copy() {return new SoulOfRavnica(this);
class SoulOfRavnicaEffect extends OneShotEffect {
public SoulOfRavnicaEffect() {
public SoulOfRavnicaEffect(final SoulOfRavnicaEffect effect) {
public SoulOfRavnicaEffect copy() {return new SoulOfRavnicaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SoulOfShandalar extends CardImpl {
public SoulOfShandalar(UUID ownerId) {
public SoulOfShandalar(final SoulOfShandalar card) {
public SoulOfShandalar copy() {return new SoulOfShandalar(this);
class SoulOfShandalarEffect extends OneShotEffect {
public SoulOfShandalarEffect() {
public SoulOfShandalarEffect(final SoulOfShandalarEffect effect) {
public SoulOfShandalarEffect copy() {return new SoulOfShandalarEffect(this);
public boolean apply(Game game, Ability source) {return true;
class SoulOfShandalarTarget extends TargetPermanent {
public SoulOfShandalarTarget() {
public SoulOfShandalarTarget(final SoulOfShandalarTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return super.canTarget(id, source, game);return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public SoulOfShandalarTarget copy() {return new SoulOfShandalarTarget(this);
public class SoulOfTheros extends CardImpl {
public SoulOfTheros(UUID ownerId) {
public SoulOfTheros(final SoulOfTheros card) {
public SoulOfTheros copy() {return new SoulOfTheros(this);
public class SoulOfZendikar extends CardImpl {
public SoulOfZendikar(UUID ownerId) {
public SoulOfZendikar(final SoulOfZendikar card) {
public SoulOfZendikar copy() {return new SoulOfZendikar(this);
public class SpectraWard extends CardImpl {
public SpectraWard(UUID ownerId) {
public SpectraWard(final SpectraWard card) {
public SpectraWard copy() {return new SpectraWard(this);
public class SpiritBonds extends CardImpl {
public SpiritBonds(UUID ownerId) {
public SpiritBonds(final SpiritBonds card) {
public SpiritBonds copy() {return new SpiritBonds(this);
public class StainTheMind extends CardImpl {
public StainTheMind(UUID ownerId) {
public StainTheMind(final StainTheMind card) {
public StainTheMind copy() {return new StainTheMind(this);
class StainTheMindEffect extends SearchTargetGraveyardHandLibraryForCardNameAndExileEffect {
public StainTheMindEffect() {
public StainTheMindEffect(final StainTheMindEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public StainTheMindEffect copy() {return new StainTheMindEffect(this);
public String getText(Mode mode) {return sb.toString();
public class StatuteOfDenial extends CardImpl {
public StatuteOfDenial(UUID ownerId) {
public StatuteOfDenial(final StatuteOfDenial card) {
public StatuteOfDenial copy() {return new StatuteOfDenial(this);
public class StokeTheFlames extends CardImpl {
public StokeTheFlames(UUID ownerId) {
public StokeTheFlames(final StokeTheFlames card) {
public StokeTheFlames copy() {return new StokeTheFlames(this);
public class SunbladeElf extends CardImpl {
public SunbladeElf(UUID ownerId) {
public SunbladeElf(final SunbladeElf card) {
public SunbladeElf copy() {return new SunbladeElf(this);
public class SungracePegasus extends CardImpl {
public SungracePegasus(UUID ownerId) {
public SungracePegasus(final SungracePegasus card) {
public SungracePegasus copy() {return new SungracePegasus(this);
public class TheChainVeil extends CardImpl {
public TheChainVeil(UUID ownerId) {
public TheChainVeil(final TheChainVeil card) {
public TheChainVeil copy() {return new TheChainVeil(this);
class ActivatedLoyaltyAbilityWatcher extends Watcher {
public ActivatedLoyaltyAbilityWatcher() {
public ActivatedLoyaltyAbilityWatcher(final ActivatedLoyaltyAbilityWatcher watcher) {
public void watch(GameEvent event, Game game) {
public void reset() {
public ActivatedLoyaltyAbilityWatcher copy() {return new ActivatedLoyaltyAbilityWatcher(this);
public boolean activatedLayaltyAbility(UUID playerId) {return playerIds.contains(playerId);
class TheChainVeilIncreaseLoyaltyUseEffect extends ContinuousEffectImpl {
public TheChainVeilIncreaseLoyaltyUseEffect() {
public TheChainVeilIncreaseLoyaltyUseEffect(final TheChainVeilIncreaseLoyaltyUseEffect effect) {
public TheChainVeilIncreaseLoyaltyUseEffect copy() {return new TheChainVeilIncreaseLoyaltyUseEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
class TheChainVeilCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return true;return false;
public String toString() {return "if you didn't activate a loyalty ability of a planeswalker this turn";
public class TriplicateSpirits extends CardImpl {
public TriplicateSpirits(UUID ownerId) {
public TriplicateSpirits(final TriplicateSpirits card) {
public TriplicateSpirits copy() {return new TriplicateSpirits(this);
public class TyrantsMachine extends CardImpl {
public TyrantsMachine(UUID ownerId) {
public TyrantsMachine(final TyrantsMachine card) {
public TyrantsMachine copy() {return new TyrantsMachine(this);
public class UnmakeTheGraves extends CardImpl {
public UnmakeTheGraves(UUID ownerId) {
public UnmakeTheGraves(final UnmakeTheGraves card) {
public UnmakeTheGraves copy() {return new UnmakeTheGraves(this);
public class VenomSliver extends CardImpl {
public VenomSliver(UUID ownerId) {
public VenomSliver(final VenomSliver card) {
public VenomSliver copy() {return new VenomSliver(this);
public class Vineweft extends CardImpl {
public Vineweft(UUID ownerId) {
public Vineweft(final Vineweft card) {
public Vineweft copy() {return new Vineweft(this);
public class VoidSnare extends CardImpl {
public VoidSnare(UUID ownerId) {
public VoidSnare(final VoidSnare card) {
public VoidSnare copy() {return new VoidSnare(this);
public class WallOfLimbs extends CardImpl {
public WallOfLimbs(UUID ownerId) {
public WallOfLimbs(final WallOfLimbs card) {
public WallOfLimbs copy() {return new WallOfLimbs(this);
class WallOfLimbsTriggeredAbility extends TriggeredAbilityImpl {
WallOfLimbsTriggeredAbility() {
WallOfLimbsTriggeredAbility(final WallOfLimbsTriggeredAbility ability) {
public WallOfLimbsTriggeredAbility copy() {return new WallOfLimbsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.GAINED_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(controllerId);
public String getRule() {return "Whenever you gain life, put a +1/+1 counter on Wall of Limbs.";
public class WardenOfTheBeyond extends CardImpl {
public WardenOfTheBeyond(UUID ownerId) {
public WardenOfTheBeyond(final WardenOfTheBeyond card) {
public WardenOfTheBeyond copy() {return new WardenOfTheBeyond(this);
class OpponentOwnsCardInExileCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return true;return false;
public class WasteNot extends CardImpl {
public WasteNot(UUID ownerId) {
public WasteNot(final WasteNot card) {
public WasteNot copy() {return new WasteNot(this);
class WasteNotCreatureTriggeredAbility extends TriggeredAbilityImpl {
WasteNotCreatureTriggeredAbility() {
WasteNotCreatureTriggeredAbility(final WasteNotCreatureTriggeredAbility ability) {
public WasteNotCreatureTriggeredAbility copy() {return new WasteNotCreatureTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent discards a creature card, put a 2/2 black Zombie creature token onto the battlefield.";
class WasteNotLandTriggeredAbility extends TriggeredAbilityImpl {
WasteNotLandTriggeredAbility() {
WasteNotLandTriggeredAbility(final WasteNotLandTriggeredAbility ability) {
public WasteNotLandTriggeredAbility copy() {return new WasteNotLandTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent discards a land card, add {B}{B} to your mana pool.";
class WasteNotOtherTriggeredAbility extends TriggeredAbilityImpl {
WasteNotOtherTriggeredAbility() {
WasteNotOtherTriggeredAbility(final WasteNotOtherTriggeredAbility ability) {
public WasteNotOtherTriggeredAbility copy() {return new WasteNotOtherTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent discards a noncreature, nonland card, draw a card.";
public class WillForgedGolem extends CardImpl {
public WillForgedGolem(UUID ownerId) {
public WillForgedGolem(final WillForgedGolem card) {
public WillForgedGolem copy() {return new WillForgedGolem(this);
public class WitchsFamiliar extends CardImpl {
public WitchsFamiliar(UUID ownerId) {
public WitchsFamiliar(final WitchsFamiliar card) {
public WitchsFamiliar copy() {return new WitchsFamiliar(this);
public class XathridSlyblade extends CardImpl {
public XathridSlyblade(UUID ownerId) {
public XathridSlyblade(final XathridSlyblade card) {
public XathridSlyblade copy() {return new XathridSlyblade(this);
public class YisanTheWandererBard extends CardImpl {
public YisanTheWandererBard(UUID ownerId) {
public YisanTheWandererBard(final YisanTheWandererBard card) {
public YisanTheWandererBard copy() {return new YisanTheWandererBard(this);
class YisanTheWandererBardEffect extends OneShotEffect {
public YisanTheWandererBardEffect() {
public YisanTheWandererBardEffect(final YisanTheWandererBardEffect effect) {
public YisanTheWandererBardEffect copy() {return new YisanTheWandererBardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AbbotOfKeralKeep extends CardImpl {
public AbbotOfKeralKeep(UUID ownerId) {
public AbbotOfKeralKeep(final AbbotOfKeralKeep card) {
public AbbotOfKeralKeep copy() {return new AbbotOfKeralKeep(this);
class AbbotOfKeralKeepExileEffect extends OneShotEffect {
public AbbotOfKeralKeepExileEffect() {
public AbbotOfKeralKeepExileEffect(final AbbotOfKeralKeepExileEffect effect) {
public AbbotOfKeralKeepExileEffect copy() {return new AbbotOfKeralKeepExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AbbotOfKeralKeepCastFromExileEffect extends AsThoughEffectImpl {
public AbbotOfKeralKeepCastFromExileEffect() {
public AbbotOfKeralKeepCastFromExileEffect(final AbbotOfKeralKeepCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public AbbotOfKeralKeepCastFromExileEffect copy() {return new AbbotOfKeralKeepCastFromExileEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return source.getControllerId().equals(affectedControllerId)
public class AcolyteOfTheInferno extends CardImpl {
public AcolyteOfTheInferno(UUID ownerId) {
public AcolyteOfTheInferno(final AcolyteOfTheInferno card) {
public AcolyteOfTheInferno copy() {return new AcolyteOfTheInferno(this);
public class AerialVolley extends CardImpl {
public AerialVolley(UUID ownerId) {
public AerialVolley(final AerialVolley card) {
public AerialVolley copy() {return new AerialVolley(this);
public class AkroanJailer extends CardImpl {
public AkroanJailer(UUID ownerId) {
public AkroanJailer(final AkroanJailer card) {
public AkroanJailer copy() {return new AkroanJailer(this);
public class AkroanSergeant extends CardImpl {
public AkroanSergeant(UUID ownerId) {
public AkroanSergeant(final AkroanSergeant card) {
public AkroanSergeant copy() {return new AkroanSergeant(this);
public class AlchemistsVial extends CardImpl {
public AlchemistsVial(UUID ownerId) {
public AlchemistsVial(final AlchemistsVial card) {
public AlchemistsVial copy() {return new AlchemistsVial(this);
public class AlhammarretHighArbiter extends CardImpl {
public AlhammarretHighArbiter(UUID ownerId) {
public AlhammarretHighArbiter(final AlhammarretHighArbiter card) {
public AlhammarretHighArbiter copy() {return new AlhammarretHighArbiter(this);
class AlhammarretHighArbiterEffect extends OneShotEffect {
public AlhammarretHighArbiterEffect() {
public AlhammarretHighArbiterEffect(final AlhammarretHighArbiterEffect effect) {
public AlhammarretHighArbiterEffect copy() {return new AlhammarretHighArbiterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public AlhammarretHighArbiterCantCastEffect(String cardName) {
public AlhammarretHighArbiterCantCastEffect(final AlhammarretHighArbiterCantCastEffect effect) {
public AlhammarretHighArbiterCantCastEffect copy() {return new AlhammarretHighArbiterCantCastEffect(this);
public boolean isInactive(Ability source, Game game) {return sourceObject == null || sourceObject.getZoneChangeCounter(game) != source.getSourceObjectZoneChangeCounter();
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You may not cast a card named " + cardName + " (" + mageObject.getIdName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class AnchorToTheAEther extends CardImpl {
public AnchorToTheAEther(UUID ownerId) {
public AnchorToTheAEther(final AnchorToTheAEther card) {
public AnchorToTheAEther copy() {return new AnchorToTheAEther(this);
public class AnimistsAwakening extends CardImpl {
public AnimistsAwakening(UUID ownerId) {
public AnimistsAwakening(final AnimistsAwakening card) {
public AnimistsAwakening copy() {return new AnimistsAwakening(this);
class AnimistsAwakeningEffect extends OneShotEffect {
public AnimistsAwakeningEffect() {
public AnimistsAwakeningEffect(final AnimistsAwakeningEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public AnimistsAwakeningEffect copy() {return new AnimistsAwakeningEffect(this);
public class AnointerOfChampions extends CardImpl {
public AnointerOfChampions(UUID ownerId) {
public AnointerOfChampions(final AnointerOfChampions card) {
public AnointerOfChampions copy() {return new AnointerOfChampions(this);
public class ArchangelOfTithes extends CardImpl {
public ArchangelOfTithes(UUID ownerId) {
public ArchangelOfTithes(final ArchangelOfTithes card) {
public ArchangelOfTithes copy() {return new ArchangelOfTithes(this);
class ArchangelOfTithesPayManaToAttackAllEffect extends CantAttackYouUnlessPayManaAllEffect {
ArchangelOfTithesPayManaToAttackAllEffect() {
ArchangelOfTithesPayManaToAttackAllEffect(ArchangelOfTithesPayManaToAttackAllEffect effect) {
public boolean applies(GameEvent event, Ability source, Game game) {return false;return super.applies(event, source, game);
public ArchangelOfTithesPayManaToAttackAllEffect copy() {return new ArchangelOfTithesPayManaToAttackAllEffect(this);
class ArchangelOfTithesPayManaToBlockAllEffect extends CantBlockUnlessPayManaAllEffect {
ArchangelOfTithesPayManaToBlockAllEffect() {
ArchangelOfTithesPayManaToBlockAllEffect(ArchangelOfTithesPayManaToBlockAllEffect effect) {
public boolean applies(GameEvent event, Ability source, Game game) {return false;return super.applies(event, source, game);
public ArchangelOfTithesPayManaToBlockAllEffect copy() {return new ArchangelOfTithesPayManaToBlockAllEffect(this);return new ArtificersEpiphany(this);
public class AspiringAeronaut extends CardImpl {
public AspiringAeronaut(UUID ownerId) {
public AspiringAeronaut(final AspiringAeronaut card) {
public AspiringAeronaut copy() {return new AspiringAeronaut(this);
public class AvariciousDragon extends CardImpl {
public AvariciousDragon(UUID ownerId) {
public AvariciousDragon(final AvariciousDragon card) {
public AvariciousDragon copy() {return new AvariciousDragon(this);
public class AvenBattlePriest extends CardImpl {
public AvenBattlePriest(UUID ownerId) {
public AvenBattlePriest(final AvenBattlePriest card) {
public AvenBattlePriest copy() {return new AvenBattlePriest(this);
public class BlazingHellhound extends CardImpl {
public BlazingHellhound(UUID ownerId) {
public BlazingHellhound(final BlazingHellhound card) {
public BlazingHellhound copy() {return new BlazingHellhound(this);
public class BlessedSpirits extends CardImpl {
public BlessedSpirits(UUID ownerId) {
public BlessedSpirits(final BlessedSpirits card) {
public BlessedSpirits copy() {return new BlessedSpirits(this);
public class BloodCursedKnight extends CardImpl {
public BloodCursedKnight(UUID ownerId) {
public BloodCursedKnight(final BloodCursedKnight card) {
public BloodCursedKnight copy() {return new BloodCursedKnight(this);
public class BoggartBrute extends CardImpl {
public BoggartBrute(UUID ownerId) {
public BoggartBrute(final BoggartBrute card) {
public BoggartBrute copy() {return new BoggartBrute(this);
public class BondedConstruct extends CardImpl {
public BondedConstruct(UUID ownerId) {
public BondedConstruct(final BondedConstruct card) {
public BondedConstruct copy() {return new BondedConstruct(this);
public class BoundingKrasis extends CardImpl {
public BoundingKrasis(UUID ownerId) {
public BoundingKrasis(final BoundingKrasis card) {
public BoundingKrasis copy() {return new BoundingKrasis(this);
public class CalculatedDismissal extends CardImpl {
public CalculatedDismissal(UUID ownerId) {
public CalculatedDismissal(final CalculatedDismissal card) {
public CalculatedDismissal copy() {return new CalculatedDismissal(this);
public class CallOfTheFullMoon extends CardImpl {
public CallOfTheFullMoon(UUID ownerId) {
public CallOfTheFullMoon(final CallOfTheFullMoon card) {
public CallOfTheFullMoon copy() {return new CallOfTheFullMoon(this);
public class CausticCaterpillar extends CardImpl {
public CausticCaterpillar(UUID ownerId) {
public CausticCaterpillar(final CausticCaterpillar card) {
public CausticCaterpillar copy() {return new CausticCaterpillar(this);
public class ChandraFireOfKaladesh extends CardImpl {
public ChandraFireOfKaladesh(UUID ownerId) {
public ChandraFireOfKaladesh(final ChandraFireOfKaladesh card) {
public ChandraFireOfKaladesh copy() {return new ChandraFireOfKaladesh(this);
public class ChiefOfTheFoundry extends CardImpl {
public ChiefOfTheFoundry(UUID ownerId) {
public ChiefOfTheFoundry(final ChiefOfTheFoundry card) {
public ChiefOfTheFoundry copy() {return new ChiefOfTheFoundry(this);
public class CitadelCastellan extends CardImpl {
public CitadelCastellan(UUID ownerId) {
public CitadelCastellan(final CitadelCastellan card) {
public CitadelCastellan copy() {return new CitadelCastellan(this);
public class ClashOfWills extends CardImpl {
public ClashOfWills(UUID ownerId) {
public ClashOfWills(final ClashOfWills card) {
public ClashOfWills copy() {return new ClashOfWills(this);
public class ClericOfTheForwardOrder extends CardImpl {
public ClericOfTheForwardOrder(UUID ownerId) {
public ClericOfTheForwardOrder(final ClericOfTheForwardOrder card) {
public ClericOfTheForwardOrder copy() {return new ClericOfTheForwardOrder(this);
public class ConclaveNaturalists extends CardImpl {
public ConclaveNaturalists(UUID ownerId) {
public ConclaveNaturalists(final ConclaveNaturalists card) {
public ConclaveNaturalists copy() {return new ConclaveNaturalists(this);
public class ConsecratedByBlood extends CardImpl {
public ConsecratedByBlood(UUID ownerId) {
public ConsecratedByBlood(final ConsecratedByBlood card) {
public ConsecratedByBlood copy() {return new ConsecratedByBlood(this);
public class ConsulsLieutenant extends CardImpl {
public ConsulsLieutenant(UUID ownerId) {
public ConsulsLieutenant(final ConsulsLieutenant card) {
public ConsulsLieutenant copy() {return new ConsulsLieutenant(this);
public class DarkDabbling extends CardImpl {
public DarkDabbling(UUID ownerId) {
public DarkDabbling(final DarkDabbling card) {
public DarkDabbling copy() {return new DarkDabbling(this);
class DarkDabblingEffect extends OneShotEffect {
public DarkDabblingEffect() {
public DarkDabblingEffect(final DarkDabblingEffect effect) {
public DarkDabblingEffect copy() {return new DarkDabblingEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class DarkPetition extends CardImpl {
public DarkPetition(UUID ownerId) {
public DarkPetition(final DarkPetition card) {
public DarkPetition copy() {return new DarkPetition(this);return new DaysUndoing(this);
public boolean apply(Game game, Ability source) {return true;return new DaysUndoingEffect(this);
public class DeadbridgeShaman extends CardImpl {
public DeadbridgeShaman(UUID ownerId) {
public DeadbridgeShaman(final DeadbridgeShaman card) {
public DeadbridgeShaman copy() {return new DeadbridgeShaman(this);
public class DeepSeaTerror extends CardImpl {
public DeepSeaTerror(UUID ownerId) {
public DeepSeaTerror(final DeepSeaTerror card) {
public DeepSeaTerror copy() {return new DeepSeaTerror(this);
public class DemonicPact extends CardImpl {
public DemonicPact(UUID ownerId) {
public DemonicPact(final DemonicPact card) {
public DemonicPact copy() {return new DemonicPact(this);
public class DespoilerOfSouls extends CardImpl {
public DespoilerOfSouls(UUID ownerId) {
public DespoilerOfSouls(final DespoilerOfSouls card) {
public DespoilerOfSouls copy() {return new DespoilerOfSouls(this);
public class DiscipleOfTheRing extends CardImpl {
public DiscipleOfTheRing(UUID ownerId) {
public DiscipleOfTheRing(final DiscipleOfTheRing card) {
public DiscipleOfTheRing copy() {return new DiscipleOfTheRing(this);
public class DisplacementWave extends CardImpl {
public DisplacementWave(UUID ownerId) {
public DisplacementWave(final DisplacementWave card) {
public DisplacementWave copy() {return new DisplacementWave(this);
class DisplacementWaveEffect extends OneShotEffect {
public DisplacementWaveEffect() {
public DisplacementWaveEffect(final DisplacementWaveEffect effect) {
public DisplacementWaveEffect copy() {return new DisplacementWaveEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class DwynenGiltLeafDaen extends CardImpl {
public DwynenGiltLeafDaen(UUID ownerId) {
public DwynenGiltLeafDaen(final DwynenGiltLeafDaen card) {
public DwynenGiltLeafDaen copy() {return new DwynenGiltLeafDaen(this);
public class DwynensElite extends CardImpl {
public DwynensElite(UUID ownerId) {
public DwynensElite(final DwynensElite card) {
public DwynensElite copy() {return new DwynensElite(this);
public class EnlightenedAscetic extends CardImpl {
public EnlightenedAscetic(UUID ownerId) {
public EnlightenedAscetic(final EnlightenedAscetic card) {
public EnlightenedAscetic copy() {return new EnlightenedAscetic(this);
public class EnshroudingMist extends CardImpl {
public EnshroudingMist(UUID ownerId) {
public EnshroudingMist(final EnshroudingMist card) {
public EnshroudingMist copy() {return new EnshroudingMist(this);
public class EnthrallingVictor extends CardImpl {
public EnthrallingVictor(UUID ownerId) {
public EnthrallingVictor(final EnthrallingVictor card) {
public EnthrallingVictor copy() {return new EnthrallingVictor(this);
public class ErebossTitan extends CardImpl {
public ErebossTitan(UUID ownerId) {
public ErebossTitan(final ErebossTitan card) {
public ErebossTitan copy() {return new ErebossTitan(this);
class ErebossTitanTriggeredAbility extends TriggeredAbilityImpl {
public ErebossTitanTriggeredAbility() {
public ErebossTitanTriggeredAbility(final ErebossTitanTriggeredAbility ability) {
public ErebossTitanTriggeredAbility copy() {return new ErebossTitanTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return card != nullreturn false;
public String getRule() {return "Whenever a creature leaves an opponent's graveyard, " + super.getRule();
public class EvolutionaryLeap extends CardImpl {
public EvolutionaryLeap(UUID ownerId) {
public EvolutionaryLeap(final EvolutionaryLeap card) {
public EvolutionaryLeap copy() {return new EvolutionaryLeap(this);
class EvolutionaryLeapEffect extends OneShotEffect {
public EvolutionaryLeapEffect() {
public EvolutionaryLeapEffect(final EvolutionaryLeapEffect effect) {
public EvolutionaryLeapEffect copy() {return new EvolutionaryLeapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ExquisiteFirecraft extends CardImpl {
public ExquisiteFirecraft(UUID ownerId) {
public ExquisiteFirecraft(final ExquisiteFirecraft card) {
public ExquisiteFirecraft copy() {return new ExquisiteFirecraft(this);
public class EyeblightAssassin extends CardImpl {
public EyeblightAssassin(UUID ownerId) {
public EyeblightAssassin(final EyeblightAssassin card) {
public EyeblightAssassin copy() {return new EyeblightAssassin(this);
public class EyeblightMassacre extends CardImpl {
public EyeblightMassacre(UUID ownerId) {
public EyeblightMassacre(final EyeblightMassacre card) {
public EyeblightMassacre copy() {return new EyeblightMassacre(this);
public class FaerieMiscreant extends CardImpl {
public FaerieMiscreant(UUID ownerId) {
public FaerieMiscreant(final FaerieMiscreant card) {
public FaerieMiscreant copy() {return new FaerieMiscreant(this);
public class FetidImp extends CardImpl {
public FetidImp(UUID ownerId) {
public FetidImp(final FetidImp card) {
public FetidImp copy() {return new FetidImp(this);
public class FieryImpulse extends CardImpl {
public FieryImpulse(UUID ownerId) {
public FieryImpulse(final FieryImpulse card) {
public FieryImpulse copy() {return new FieryImpulse(this);
public class FirefiendElemental extends CardImpl {
public FirefiendElemental(UUID ownerId) {
public FirefiendElemental(final FirefiendElemental card) {
public FirefiendElemental copy() {return new FirefiendElemental(this);return new FlameshadowConjuring(this);return new FlameshadowConjuringEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FoundryOfTheConsuls extends CardImpl {
public FoundryOfTheConsuls(UUID ownerId) {
public FoundryOfTheConsuls(final FoundryOfTheConsuls card) {
public FoundryOfTheConsuls copy() {return new FoundryOfTheConsuls(this);
public class GatherThePack extends CardImpl {
public GatherThePack(UUID ownerId) {
public GatherThePack(final GatherThePack card) {
public GatherThePack copy() {return new GatherThePack(this);
class GatherThePackEffect extends OneShotEffect {
public GatherThePackEffect(final GatherThePackEffect effect) {
public GatherThePackEffect() {
public boolean apply(Game game, Ability source) {return false;return true;
public GatherThePackEffect copy() {return new GatherThePackEffect(this);
public class GhirapurAEtherGrid extends CardImpl {
public GhirapurAEtherGrid(UUID ownerId) {
public GhirapurAEtherGrid(final GhirapurAEtherGrid card) {
public GhirapurAEtherGrid copy() {return new GhirapurAEtherGrid(this);
public class GhirapurGearcrafter extends CardImpl {
public GhirapurGearcrafter(UUID ownerId) {
public GhirapurGearcrafter(final GhirapurGearcrafter card) {
public GhirapurGearcrafter copy() {return new GhirapurGearcrafter(this);
public class GideonBattleForged extends CardImpl {
public GideonBattleForged(UUID ownerId) {
public GideonBattleForged(final GideonBattleForged card) {
public GideonBattleForged copy() {return new GideonBattleForged(this);
class GideonBattleForgedToken extends Token {
public GideonBattleForgedToken() {
class GideonBattleForgedAttacksIfAbleTargetEffect extends RequirementEffect {
public GideonBattleForgedAttacksIfAbleTargetEffect(Duration duration) {
public GideonBattleForgedAttacksIfAbleTargetEffect(final GideonBattleForgedAttacksIfAbleTargetEffect effect) {
public GideonBattleForgedAttacksIfAbleTargetEffect copy() {return new GideonBattleForgedAttacksIfAbleTargetEffect(this);
public boolean isInactive(Ability source, Game game) {return true;return true;return game.getPhase().getType() == TurnPhase.END && nextTurnTargetController > 0 && game.getTurnNum() > nextTurnTargetController;
public void init(Ability source, Game game) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public UUID mustAttackDefender(Ability source, Game game) {return source.getSourceId();
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public class GnarlrootTrapper extends CardImpl {
public GnarlrootTrapper(UUID ownerId) {
public GnarlrootTrapper(final GnarlrootTrapper card) {
public GnarlrootTrapper copy() {return new GnarlrootTrapper(this);
class GnarlrootTrapperManaBuilder extends ConditionalManaBuilder {return new GnarlrootTrapperConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast an Elf creature spell.";
class GnarlrootTrapperManaCondition extends CreatureCastManaCondition {
public boolean apply(Game game, Ability source) {return true;return false;
class GnarlrootTrapperConditionalMana extends ConditionalMana {
public GnarlrootTrapperConditionalMana(Mana mana) {
public class GoblinGloryChaser extends CardImpl {
public GoblinGloryChaser(UUID ownerId) {
public GoblinGloryChaser(final GoblinGloryChaser card) {
public GoblinGloryChaser copy() {return new GoblinGloryChaser(this);
public class GraspOfTheHieromancer extends CardImpl {
public GraspOfTheHieromancer(UUID ownerId) {
public GraspOfTheHieromancer(final GraspOfTheHieromancer card) {
public GraspOfTheHieromancer copy() {return new GraspOfTheHieromancer(this);
class GraspOfTheHieromancerTriggeredAbility extends TriggeredAbilityImpl {
public GraspOfTheHieromancerTriggeredAbility(Effect effect, boolean optional) {
public GraspOfTheHieromancerTriggeredAbility(final GraspOfTheHieromancerTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks, tap target creature defending player controls.";
public GraspOfTheHieromancerTriggeredAbility copy() {return new GraspOfTheHieromancerTriggeredAbility(this);
public class GravebladeMarauder extends CardImpl {
public GravebladeMarauder(UUID ownerId) {
public GravebladeMarauder(final GravebladeMarauder card) {
public GravebladeMarauder copy() {return new GravebladeMarauder(this);
class GravebladeMarauderEffect extends OneShotEffect {
public GravebladeMarauderEffect() {
public GravebladeMarauderEffect(final GravebladeMarauderEffect effect) {
public GravebladeMarauderEffect copy() {return new GravebladeMarauderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GuardianAutomaton extends CardImpl {
public GuardianAutomaton(UUID ownerId) {
public GuardianAutomaton(final GuardianAutomaton card) {
public GuardianAutomaton copy() {return new GuardianAutomaton(this);
public class HallowedMoonlight extends CardImpl {
public HallowedMoonlight(UUID ownerId) {
public HallowedMoonlight(final HallowedMoonlight card) {
public HallowedMoonlight copy() {return new HallowedMoonlight(this);
class HallowedMoonlightEffect extends ReplacementEffectImpl {
public HallowedMoonlightEffect() {
public HallowedMoonlightEffect(final HallowedMoonlightEffect effect) {
public HallowedMoonlightEffect copy() {return new HallowedMoonlightEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class HangarbackWalker extends CardImpl {
public HangarbackWalker(UUID ownerId) {
public HangarbackWalker(final HangarbackWalker card) {
public HangarbackWalker copy() {return new HangarbackWalker(this);
public class HarbingerOfTheTides extends CardImpl {
public HarbingerOfTheTides(UUID ownerId) {
public HarbingerOfTheTides(final HarbingerOfTheTides card) {
public HarbingerOfTheTides copy() {return new HarbingerOfTheTides(this);
public class HealingHands extends CardImpl {
public HealingHands(UUID ownerId) {
public HealingHands(final HealingHands card) {
public HealingHands copy() {return new HealingHands(this);
public class HeavyInfantry extends CardImpl {
public HeavyInfantry(UUID ownerId) {
public HeavyInfantry(final HeavyInfantry card) {
public HeavyInfantry copy() {return new HeavyInfantry(this);
public class HelmOfTheGods extends CardImpl {
public HelmOfTheGods(UUID ownerId) {
public HelmOfTheGods(final HelmOfTheGods card) {
public HelmOfTheGods copy() {return new HelmOfTheGods(this);
public class HeraldOfThePantheon extends CardImpl {
public HeraldOfThePantheon(UUID ownerId) {
public HeraldOfThePantheon(final HeraldOfThePantheon card) {
public HeraldOfThePantheon copy() {return new HeraldOfThePantheon(this);
public class HitchclawRecluse extends CardImpl {
public HitchclawRecluse(UUID ownerId) {
public HitchclawRecluse(final HitchclawRecluse card) {
public HitchclawRecluse copy() {return new HitchclawRecluse(this);
public class HixusPrisonWarden extends CardImpl {
public HixusPrisonWarden(UUID ownerId) {
public HixusPrisonWarden(final HixusPrisonWarden card) {
public HixusPrisonWarden copy() {return new HixusPrisonWarden(this);
class HixusPrisonWardenTriggeredAbility extends TriggeredAbilityImpl {
public HixusPrisonWardenTriggeredAbility(Effect effect) {
public HixusPrisonWardenTriggeredAbility(final HixusPrisonWardenTriggeredAbility ability) {
public HixusPrisonWardenTriggeredAbility copy() {return new HixusPrisonWardenTriggeredAbility(this);
public boolean checkInterveningIfClause(Game game) {return (mageObject instanceof Permanent) && ((Permanent) mageObject).getTurnsOnBattlefield() == 0;
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature deals combat damage to you, if {this} entered the battlefield this turn, exile that creature until {this} leaves the battlefield.";
class HixusPrisonWardenExileEffect extends OneShotEffect {
public HixusPrisonWardenExileEffect() {
public HixusPrisonWardenExileEffect(final HixusPrisonWardenExileEffect effect) {
public HixusPrisonWardenExileEffect copy() {return new HixusPrisonWardenExileEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return false;
public class HonoredHierarch extends CardImpl {
public HonoredHierarch(UUID ownerId) {
public HonoredHierarch(final HonoredHierarch card) {
public HonoredHierarch copy() {return new HonoredHierarch(this);
public class Hydrolash extends CardImpl {
public Hydrolash(UUID ownerId) {
public Hydrolash(final Hydrolash card) {
public Hydrolash copy() {return new Hydrolash(this);
public class InfectiousBloodlust extends CardImpl {
public InfectiousBloodlust(UUID ownerId) {
public InfectiousBloodlust(final InfectiousBloodlust card) {
public InfectiousBloodlust copy() {return new InfectiousBloodlust(this);
public class InfernalScarring extends CardImpl {
public InfernalScarring(UUID ownerId) {
public InfernalScarring(final InfernalScarring card) {
public InfernalScarring copy() {return new InfernalScarring(this);
public class JacesSanctum extends CardImpl {
public JacesSanctum(UUID ownerId) {
public JacesSanctum(final JacesSanctum card) {
public JacesSanctum copy() {return new JacesSanctum(this);
public class JaceTelepathUnbound extends CardImpl {
public JaceTelepathUnbound(UUID ownerId) {
public JaceTelepathUnbound(final JaceTelepathUnbound card) {
public JaceTelepathUnbound copy() {return new JaceTelepathUnbound(this);
class JaceTelepathUnboundEffect extends OneShotEffect {
JaceTelepathUnboundEffect() {
JaceTelepathUnboundEffect(final JaceTelepathUnboundEffect effect) {
public JaceTelepathUnboundEffect copy() {return new JaceTelepathUnboundEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class JaceTelepathUnboundCastFromGraveyardEffect extends AsThoughEffectImpl {
JaceTelepathUnboundCastFromGraveyardEffect() {
JaceTelepathUnboundCastFromGraveyardEffect(final JaceTelepathUnboundCastFromGraveyardEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public JaceTelepathUnboundCastFromGraveyardEffect copy() {return new JaceTelepathUnboundCastFromGraveyardEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return objectId.equals(this.getTargetPointer().getFirst(game, source)) && affectedControllerId.equals(source.getControllerId());
class JaceTelepathUnboundReplacementEffect extends ReplacementEffectImpl {
JaceTelepathUnboundReplacementEffect(UUID cardId) {
JaceTelepathUnboundReplacementEffect(final JaceTelepathUnboundReplacementEffect effect) {
public JaceTelepathUnboundReplacementEffect copy() {return new JaceTelepathUnboundReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return zEvent.getToZone() == Zone.GRAVEYARD
class JaceTelepathUnboundEmblem extends Emblem {
public JaceTelepathUnboundEmblem() {
public class JaceVrynsProdigy extends CardImpl {
public JaceVrynsProdigy(UUID ownerId) {
public JaceVrynsProdigy(final JaceVrynsProdigy card) {
public JaceVrynsProdigy copy() {return new JaceVrynsProdigy(this);
public class JhessianThief extends CardImpl {
public JhessianThief(UUID ownerId) {
public JhessianThief(final JhessianThief card) {
public JhessianThief copy() {return new JhessianThief(this);
public class JoragaInvocation extends CardImpl {
public JoragaInvocation(UUID ownerId) {
public JoragaInvocation(final JoragaInvocation card) {
public JoragaInvocation copy() {return new JoragaInvocation(this);
class JoragaInvocationEffect extends OneShotEffect {
public JoragaInvocationEffect() {
public JoragaInvocationEffect(final JoragaInvocationEffect effect) {
public JoragaInvocationEffect copy() {return new JoragaInvocationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class KnightOfThePilgrimsRoad extends CardImpl {
public KnightOfThePilgrimsRoad(UUID ownerId) {
public KnightOfThePilgrimsRoad(final KnightOfThePilgrimsRoad card) {
public KnightOfThePilgrimsRoad copy() {return new KnightOfThePilgrimsRoad(this);
public class KothophedSoulHoarder extends CardImpl {
public KothophedSoulHoarder(UUID ownerId) {
public KothophedSoulHoarder(final KothophedSoulHoarder card) {
public KothophedSoulHoarder copy() {return new KothophedSoulHoarder(this);
class KothophedSoulHoarderTriggeredAbility extends TriggeredAbilityImpl {
public KothophedSoulHoarderTriggeredAbility(Effect effect) {
public KothophedSoulHoarderTriggeredAbility(final KothophedSoulHoarderTriggeredAbility ability) {
public KothophedSoulHoarderTriggeredAbility copy() {return new KothophedSoulHoarderTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return card != null && controller != null && controller.hasOpponent(card.getOwnerId(), game);return false;
public String getRule() {return "Whenever a creature leaves an opponent's graveyard, " + super.getRule();
public class KytheonHeroOfAkros extends CardImpl {
public KytheonHeroOfAkros(UUID ownerId) {"then return him to the battlefield transformed under his owner's control."), new AttackedThisCombatWatcher());
public KytheonHeroOfAkros(final KytheonHeroOfAkros card) {
public KytheonHeroOfAkros copy() {return new KytheonHeroOfAkros(this);
class KytheonHeroOfAkrosCondition implements Condition {
public boolean apply(Game game, Ability source) {return sourceFound && number >= 2;return false;
public String toString() {return "if {this} and at least two other creatures attacked this combat";
public class KytheonsIrregulars extends CardImpl {
public KytheonsIrregulars(UUID ownerId) {
public KytheonsIrregulars(final KytheonsIrregulars card) {
public KytheonsIrregulars copy() {return new KytheonsIrregulars(this);
public class KytheonsTactics extends CardImpl {
public KytheonsTactics(UUID ownerId) {
public KytheonsTactics(final KytheonsTactics card) {
public KytheonsTactics copy() {return new KytheonsTactics(this);
public class Languish extends CardImpl {
public Languish(UUID ownerId) {
public Languish(final Languish card) {
public Languish copy() {return new Languish(this);
public class LightningJavelin extends CardImpl {
public LightningJavelin(UUID ownerId) {
public LightningJavelin(final LightningJavelin card) {
public LightningJavelin copy() {return new LightningJavelin(this);
public class LilianaDefiantNecromancer extends CardImpl {
public LilianaDefiantNecromancer(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public LilianaDefiantNecromancer(final LilianaDefiantNecromancer card) {
public LilianaDefiantNecromancer copy() {return new LilianaDefiantNecromancer(this);
class LilianaDefiantNecromancerEmblem extends Emblem {
public LilianaDefiantNecromancerEmblem() {
class LilianaDefiantNecromancerEmblemEffect extends OneShotEffect {
LilianaDefiantNecromancerEmblemEffect() {this.staticText = "return it to the battlefield under your control at the beginning of the next end step";
LilianaDefiantNecromancerEmblemEffect(final LilianaDefiantNecromancerEmblemEffect effect) {
public LilianaDefiantNecromancerEmblemEffect copy() {return new LilianaDefiantNecromancerEmblemEffect(this);
public boolean apply(Game game, Ability source) {effect.setText("return that card to the battlefield at the beginning of the next end step");return true;return false;
public class LilianaHereticalHealer extends CardImpl {
public LilianaHereticalHealer(UUID ownerId) {
public LilianaHereticalHealer(final LilianaHereticalHealer card) {
public LilianaHereticalHealer copy() {return new LilianaHereticalHealer(this);
public class MacabreWaltz extends CardImpl {
public MacabreWaltz(UUID ownerId) {
public MacabreWaltz(final MacabreWaltz card) {
public MacabreWaltz copy() {return new MacabreWaltz(this);
public class MageRingBully extends CardImpl {
public MageRingBully(UUID ownerId) {
public MageRingBully(final MageRingBully card) {
public MageRingBully copy() {return new MageRingBully(this);
public class MageRingNetwork extends CardImpl {
public MageRingNetwork(UUID ownerId) {
public MageRingNetwork(final MageRingNetwork card) {
public MageRingNetwork copy() {return new MageRingNetwork(this);
public class MageRingResponder extends CardImpl {
public MageRingResponder(UUID ownerId) {
public MageRingResponder(final MageRingResponder card) {
public MageRingResponder copy() {return new MageRingResponder(this);
class MageRingResponderAbility extends TriggeredAbilityImpl {
public MageRingResponderAbility() {
public MageRingResponderAbility(final MageRingResponderAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks, it deals 7 damage to target creature defending player controls.";
public MageRingResponderAbility copy() {return new MageRingResponderAbility(this);
public class ManagorgerHydra extends CardImpl {
public ManagorgerHydra(UUID ownerId) {
public ManagorgerHydra(final ManagorgerHydra card) {
public ManagorgerHydra copy() {return new ManagorgerHydra(this);
public class MantleOfWebs extends CardImpl {
public MantleOfWebs(UUID ownerId) {
public MantleOfWebs(final MantleOfWebs card) {
public MantleOfWebs copy() {return new MantleOfWebs(this);
public class MizziumMeddler extends CardImpl {
public MizziumMeddler(UUID ownerId) {
public MizziumMeddler(final MizziumMeddler card) {
public MizziumMeddler copy() {return new MizziumMeddler(this);
public class MoltenVortex extends CardImpl {
public MoltenVortex(UUID ownerId) {
public MoltenVortex(final MoltenVortex card) {
public MoltenVortex copy() {return new MoltenVortex(this);
public class NecromanticSummons extends CardImpl {
public NecromanticSummons(UUID ownerId) {
public NecromanticSummons(final NecromanticSummons card) {
public NecromanticSummons copy() {return new NecromanticSummons(this);
class NecromanticSummoningEffect extends OneShotEffect {
public NecromanticSummoningEffect() {
public NecromanticSummoningEffect(final NecromanticSummoningEffect effect) {
public NecromanticSummoningEffect copy() {return new NecromanticSummoningEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Nightsnare extends CardImpl {
public Nightsnare(UUID ownerId) {
public Nightsnare(final Nightsnare card) {
public Nightsnare copy() {return new Nightsnare(this);
class NightsnareDiscardEffect extends OneShotEffect {
public NightsnareDiscardEffect() {
public NightsnareDiscardEffect(final NightsnareDiscardEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public NightsnareDiscardEffect copy() {return new NightsnareDiscardEffect(this);
public class NissaSageAnimist extends CardImpl {
public NissaSageAnimist(UUID ownerId) {
public NissaSageAnimist(final NissaSageAnimist card) {
public NissaSageAnimist copy() {return new NissaSageAnimist(this);
class NissaSageAnimistPlusOneEffect extends OneShotEffect {
NissaSageAnimistPlusOneEffect() {
NissaSageAnimistPlusOneEffect(final NissaSageAnimistPlusOneEffect effect) {
public NissaSageAnimistPlusOneEffect copy() {return new NissaSageAnimistPlusOneEffect(this);
public boolean apply(Game game, Ability source) {return false;return controller.moveCards(card, targetZone, source, game);return true;
class NissaSageAnimistToken extends Token {
NissaSageAnimistToken() {
class NissaSageAnimistMinusSevenEffect extends ContinuousEffectImpl {
NissaSageAnimistMinusSevenEffect() {
NissaSageAnimistMinusSevenEffect(final NissaSageAnimistMinusSevenEffect effect) {
public NissaSageAnimistMinusSevenEffect copy() {return new NissaSageAnimistMinusSevenEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.TypeChangingEffects_4 || layer == Layer.PTChangingEffects_7;
public class NissasPilgrimage extends CardImpl {
public NissasPilgrimage(UUID ownerId) {
public NissasPilgrimage(final NissasPilgrimage card) {
public NissasPilgrimage copy() {return new NissasPilgrimage(this);
class NissasPilgrimageEffect extends OneShotEffect {
public NissasPilgrimageEffect() {
public NissasPilgrimageEffect(final NissasPilgrimageEffect effect) {
public NissasPilgrimageEffect copy() {return new NissasPilgrimageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NissasRevelation extends CardImpl {
public NissasRevelation(UUID ownerId) {
public NissasRevelation(final NissasRevelation card) {
public NissasRevelation copy() {return new NissasRevelation(this);
class NissasRevelationEffect extends OneShotEffect {
public NissasRevelationEffect() {
public NissasRevelationEffect(final NissasRevelationEffect effect) {
public NissasRevelationEffect copy() {return new NissasRevelationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NissaVastwoodSeer extends CardImpl {
public NissaVastwoodSeer(UUID ownerId) {"Whenever a land enters the battlefield under your control, if you control seven or more lands, exile {this}, then return her to the battlefield transformed under her owner's control."));
public NissaVastwoodSeer(final NissaVastwoodSeer card) {
public NissaVastwoodSeer copy() {return new NissaVastwoodSeer(this);
public class NivixBarrier extends CardImpl {
public NivixBarrier(UUID ownerId) {
public NivixBarrier(final NivixBarrier card) {
public NivixBarrier copy() {return new NivixBarrier(this);
public class OrbsOfWarding extends CardImpl {
public OrbsOfWarding(UUID ownerId) {
public OrbsOfWarding(final OrbsOfWarding card) {
public OrbsOfWarding copy() {return new OrbsOfWarding(this);
class OrbsOfWardingEffect extends PreventionEffectImpl {
public OrbsOfWardingEffect() {
public OrbsOfWardingEffect(OrbsOfWardingEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_PLAYER);
public boolean applies(GameEvent event, Ability source, Game game) {return super.applies(event, source, game);return false;
public OrbsOfWardingEffect copy() {return new OrbsOfWardingEffect(this);
public class OutlandColossus extends CardImpl {
public OutlandColossus(UUID ownerId) {
public OutlandColossus(final OutlandColossus card) {
public OutlandColossus copy() {return new OutlandColossus(this);
public class PatronOfTheValiant extends CardImpl {
public PatronOfTheValiant(UUID ownerId) {
public PatronOfTheValiant(final PatronOfTheValiant card) {
public PatronOfTheValiant copy() {return new PatronOfTheValiant(this);
class PatronOfTheValiantEffect extends OneShotEffect {
public PatronOfTheValiantEffect() {
public PatronOfTheValiantEffect(final PatronOfTheValiantEffect effect) {
public PatronOfTheValiantEffect copy() {return new PatronOfTheValiantEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class PharikasDisciple extends CardImpl {
public PharikasDisciple(UUID ownerId) {
public PharikasDisciple(final PharikasDisciple card) {
public PharikasDisciple copy() {return new PharikasDisciple(this);
public class PiaAndKiranNalaar extends CardImpl {
public PiaAndKiranNalaar(UUID ownerId) {
public PiaAndKiranNalaar(final PiaAndKiranNalaar card) {
public PiaAndKiranNalaar copy() {return new PiaAndKiranNalaar(this);
public class PossessedSkaab extends CardImpl {
public PossessedSkaab(UUID ownerId) {
public PossessedSkaab(final PossessedSkaab card) {
public PossessedSkaab copy() {return new PossessedSkaab(this);
class PossessedSkaabDiesEffect extends ReplacementEffectImpl {
public PossessedSkaabDiesEffect() {
public PossessedSkaabDiesEffect(final PossessedSkaabDiesEffect effect) {
public PossessedSkaabDiesEffect copy() {return new PossessedSkaabDiesEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCardToExileWithInfo(permanent, null, null, source.getSourceId(), game, Zone.BATTLEFIELD, true);return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return zce.isDiesEvent();return false;
public class Prickleboar extends CardImpl {
public Prickleboar(UUID ownerId) {
public Prickleboar(final Prickleboar card) {
public Prickleboar copy() {return new Prickleboar(this);
public class PsychicRebuttal extends CardImpl {
public PsychicRebuttal(UUID ownerId) {
public PsychicRebuttal(final PsychicRebuttal card) {
public PsychicRebuttal copy() {return new PsychicRebuttal(this);
class PsychicRebuttalEffect extends OneShotEffect {
public PsychicRebuttalEffect() {
public PsychicRebuttalEffect(final PsychicRebuttalEffect effect) {
public PsychicRebuttalEffect copy() {return new PsychicRebuttalEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
class PsychicRebuttalPredicate implements ObjectPlayerPredicate<ObjectPlayer<StackObject>> {
public boolean apply(ObjectPlayer<StackObject> input, Game game) {return false;return true;return false;
public String toString() {return "spell that targets you";
public class PyromancersGoggles extends CardImpl {
public PyromancersGoggles(UUID ownerId) {
public PyromancersGoggles(final PyromancersGoggles card) {
public PyromancersGoggles copy() {return new PyromancersGoggles(this);
class PyromancersGogglesTriggeredAbility extends TriggeredAbilityImpl {
public PyromancersGogglesTriggeredAbility(UUID abilityOriginalId, Effect effect) {
public PyromancersGogglesTriggeredAbility(final PyromancersGogglesTriggeredAbility ability) {
public PyromancersGogglesTriggeredAbility copy() {return new PyromancersGogglesTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(EventType.MANA_PAYED);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When that mana is used to cast a red instant or sorcery spell, " + super.getRule();
public class RabidBloodsucker extends CardImpl {
public RabidBloodsucker(UUID ownerId) {
public RabidBloodsucker(final RabidBloodsucker card) {
public RabidBloodsucker copy() {return new RabidBloodsucker(this);
public class Ramroller extends CardImpl {
public Ramroller(UUID ownerId) {
public Ramroller(final Ramroller card) {
public Ramroller copy() {return new Ramroller(this);
public class RavagingBlaze extends CardImpl {
public RavagingBlaze(UUID ownerId) {
public RavagingBlaze(final RavagingBlaze card) {
public RavagingBlaze copy() {return new RavagingBlaze(this);
public class ReaveSoul extends CardImpl {
public ReaveSoul(UUID ownerId) {
public ReaveSoul(final ReaveSoul card) {
public ReaveSoul copy() {return new ReaveSoul(this);return new ReclusiveArtificer(this);
public class RelicSeeker extends CardImpl {
public RelicSeeker(UUID ownerId) {
public RelicSeeker(final RelicSeeker card) {
public RelicSeeker copy() {return new RelicSeeker(this);
public class RhoxMaulers extends CardImpl {
public RhoxMaulers(UUID ownerId) {
public RhoxMaulers(final RhoxMaulers card) {
public RhoxMaulers copy() {return new RhoxMaulers(this);
public class RingwardenOwl extends CardImpl {
public RingwardenOwl(UUID ownerId) {
public RingwardenOwl(final RingwardenOwl card) {
public RingwardenOwl copy() {return new RingwardenOwl(this);
public class ScabClanBerserker extends CardImpl {
public ScabClanBerserker(UUID ownerId) {
public ScabClanBerserker(final ScabClanBerserker card) {
public ScabClanBerserker copy() {return new ScabClanBerserker(this);
class ScabClanBerserkerTriggeredAbility extends TriggeredAbilityImpl {
public ScabClanBerserkerTriggeredAbility() {
public ScabClanBerserkerTriggeredAbility(final ScabClanBerserkerTriggeredAbility abiltity) {
public ScabClanBerserkerTriggeredAbility copy() {return new ScabClanBerserkerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent casts a noncreature spell, if Scab-Clan Berserker is renowned, Scab-Clan Berserker deals 2 damage to that player";
public class SeismicElemental extends CardImpl {
public SeismicElemental(UUID ownerId) {
public SeismicElemental(final SeismicElemental card) {
public SeismicElemental copy() {return new SeismicElemental(this);
public class SendToSleep extends CardImpl {
public SendToSleep(UUID ownerId) {
public SendToSleep(final SendToSleep card) {
public SendToSleep copy() {return new SendToSleep(this);
public class SentinelOfTheEternalWatch extends CardImpl {
public SentinelOfTheEternalWatch(UUID ownerId) {
public SentinelOfTheEternalWatch(final SentinelOfTheEternalWatch card) {
public SentinelOfTheEternalWatch copy() {return new SentinelOfTheEternalWatch(this);
public void adjustTargets(Ability ability, Game game) {
public class SeparatistVoidmage extends CardImpl {
public SeparatistVoidmage(UUID ownerId) {
public SeparatistVoidmage(final SeparatistVoidmage card) {
public SeparatistVoidmage copy() {return new SeparatistVoidmage(this);return new ShadowsOfThePast(this);
public class ShamanOfThePack extends CardImpl {
public ShamanOfThePack(UUID ownerId) {
public ShamanOfThePack(final ShamanOfThePack card) {
public ShamanOfThePack copy() {return new ShamanOfThePack(this);
public class ShamblingGhoul extends CardImpl {
public ShamblingGhoul(UUID ownerId) {
public ShamblingGhoul(final ShamblingGhoul card) {
public ShamblingGhoul copy() {return new ShamblingGhoul(this);
public class SkysnareSpider extends CardImpl {
public SkysnareSpider(UUID ownerId) {
public SkysnareSpider(final SkysnareSpider card) {
public SkysnareSpider copy() {return new SkysnareSpider(this);
public class SomberwaldAlpha extends CardImpl {
public SomberwaldAlpha(UUID ownerId) {
public SomberwaldAlpha(final SomberwaldAlpha card) {
public SomberwaldAlpha copy() {return new SomberwaldAlpha(this);
public class SoulbladeDjinn extends CardImpl {
public SoulbladeDjinn(UUID ownerId) {
public SoulbladeDjinn(final SoulbladeDjinn card) {
public SoulbladeDjinn copy() {return new SoulbladeDjinn(this);
public class SphinxsTutelage extends CardImpl {
public SphinxsTutelage(UUID ownerId) {
public SphinxsTutelage(final SphinxsTutelage card) {
public SphinxsTutelage copy() {return new SphinxsTutelage(this);
class SphinxsTutelageEffect extends OneShotEffect {
public SphinxsTutelageEffect() {
public SphinxsTutelageEffect(final SphinxsTutelageEffect effect) {
public SphinxsTutelageEffect copy() {return new SphinxsTutelageEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class StalwartAven extends CardImpl {
public StalwartAven(UUID ownerId) {
public StalwartAven(final StalwartAven card) {
public StalwartAven copy() {return new StalwartAven(this);
public class StarfieldOfNyx extends CardImpl {
public StarfieldOfNyx(UUID ownerId) {
public StarfieldOfNyx(final StarfieldOfNyx card) {
public StarfieldOfNyx copy() {return new StarfieldOfNyx(this);
class StarfieldOfNyxEffect extends ContinuousEffectImpl {
public StarfieldOfNyxEffect() {
public StarfieldOfNyxEffect(final StarfieldOfNyxEffect effect) {
public StarfieldOfNyxEffect copy() {return new StarfieldOfNyxEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.TypeChangingEffects_4;
public Set<UUID> isDependentTo(List<ContinuousEffect> allEffectsInLayer) {return dependentTo;
public class SubterraneanScout extends CardImpl {
public SubterraneanScout(UUID ownerId) {
public SubterraneanScout(final SubterraneanScout card) {
public SubterraneanScout copy() {return new SubterraneanScout(this);
public class SuppressionBonds extends CardImpl {
public SuppressionBonds(UUID ownerId) {
public SuppressionBonds(final SuppressionBonds card) {
public SuppressionBonds copy() {return new SuppressionBonds(this);return new SwiftReckoning(this);
public class SwordOfTheAnimist extends CardImpl {
public SwordOfTheAnimist(UUID ownerId) {
public SwordOfTheAnimist(final SwordOfTheAnimist card) {
public SwordOfTheAnimist copy() {return new SwordOfTheAnimist(this);
public class TaintedRemedy extends CardImpl {
public TaintedRemedy(UUID ownerId) {
public TaintedRemedy(final TaintedRemedy card) {
public TaintedRemedy copy() {return new TaintedRemedy(this);
class TaintedRemedyReplacementEffect extends ReplacementEffectImpl {
public TaintedRemedyReplacementEffect() {
public TaintedRemedyReplacementEffect(final TaintedRemedyReplacementEffect effect) {
public TaintedRemedyReplacementEffect copy() {return new TaintedRemedyReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.GAIN_LIFE;
public boolean applies(GameEvent event, Ability source, Game game) {return controller.hasOpponent(event.getPlayerId(), game);return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public class TalentOfTheTelepath extends CardImpl {
public TalentOfTheTelepath(UUID ownerId) {
public TalentOfTheTelepath(final TalentOfTheTelepath card) {
public TalentOfTheTelepath copy() {return new TalentOfTheTelepath(this);
class TalentOfTheTelepathEffect extends OneShotEffect {
public TalentOfTheTelepathEffect() {
public TalentOfTheTelepathEffect(final TalentOfTheTelepathEffect effect) {
public TalentOfTheTelepathEffect copy() {return new TalentOfTheTelepathEffect(this);
public boolean apply(Game game, Ability source) {
public class TheGreatAurora extends CardImpl {
public TheGreatAurora(UUID ownerId) {
public TheGreatAurora(final TheGreatAurora card) {
public TheGreatAurora copy() {return new TheGreatAurora(this);
class TheGreatAuroraEffect extends OneShotEffect {
public TheGreatAuroraEffect() {
public TheGreatAuroraEffect(final TheGreatAuroraEffect effect) {
public TheGreatAuroraEffect copy() {return new TheGreatAuroraEffect(this);
public boolean apply(Game game, Ability source) {
public class ThopterEngineer extends CardImpl {
public ThopterEngineer(UUID ownerId) {
public ThopterEngineer(final ThopterEngineer card) {
public ThopterEngineer copy() {return new ThopterEngineer(this);
public class ThopterSpyNetwork extends CardImpl {
public ThopterSpyNetwork(UUID ownerId) {
public ThopterSpyNetwork(final ThopterSpyNetwork card) {
public ThopterSpyNetwork copy() {return new ThopterSpyNetwork(this);
class ThopterSpyNetworkUpkeepTriggeredAbility extends TriggeredAbilityImpl {
public ThopterSpyNetworkUpkeepTriggeredAbility() {
public ThopterSpyNetworkUpkeepTriggeredAbility(final ThopterSpyNetworkUpkeepTriggeredAbility ability) {
public ThopterSpyNetworkUpkeepTriggeredAbility copy() {return new ThopterSpyNetworkUpkeepTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public boolean checkInterveningIfClause(Game game) {return game.getBattlefield().countAll(new FilterArtifactPermanent(), this.controllerId, game) >= 1;
public String getRule() {return "At the beginning of your upkeep, if you control an artifact, put a 1/1 colorless Thopter artifact creature token with flying onto the battlefield";
class ThopterSpyNetworkDamageTriggeredAbility extends TriggeredAbilityImpl {
public ThopterSpyNetworkDamageTriggeredAbility() {
public ThopterSpyNetworkDamageTriggeredAbility(final ThopterSpyNetworkDamageTriggeredAbility ability) {
public ThopterSpyNetworkDamageTriggeredAbility copy() {return new ThopterSpyNetworkDamageTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever one or more artifact creatures you control deals combat damage to a player, draw a card";
public class ThornbowArcher extends CardImpl {
public ThornbowArcher(UUID ownerId) {
public ThornbowArcher(final ThornbowArcher card) {
public ThornbowArcher copy() {return new ThornbowArcher(this);
class ThornbowArcherEffect extends OneShotEffect {
public ThornbowArcherEffect() {
public ThornbowArcherEffect(final ThornbowArcherEffect effect) {
public ThornbowArcherEffect copy() {return new ThornbowArcherEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new ThrowingKnife(this);
public class ThunderclapWyvern extends CardImpl {
public ThunderclapWyvern(UUID ownerId) {
public ThunderclapWyvern(final ThunderclapWyvern card) {
public ThunderclapWyvern copy() {return new ThunderclapWyvern(this);
public class TragicArrogance extends CardImpl {
public TragicArrogance(UUID ownerId) {
public TragicArrogance(final TragicArrogance card) {
public TragicArrogance copy() {return new TragicArrogance(this);
class TragicArroganceffect extends OneShotEffect {
public TragicArroganceffect() {
public TragicArroganceffect(final TragicArroganceffect effect) {
public TragicArroganceffect copy() {return new TragicArroganceffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class UndeadServant extends CardImpl {
public UndeadServant(UUID ownerId) {
public UndeadServant(final UndeadServant card) {
public UndeadServant copy() {return new UndeadServant(this);
public class UndercityTroll extends CardImpl {
public UndercityTroll(UUID ownerId) {
public UndercityTroll(final UndercityTroll card) {
public UndercityTroll copy() {return new UndercityTroll(this);
public class UnholyHunger extends CardImpl {
public UnholyHunger(UUID ownerId) {
public UnholyHunger(final UnholyHunger card) {
public UnholyHunger copy() {return new UnholyHunger(this);
public class ValeronWardens extends CardImpl {
public ValeronWardens(UUID ownerId) {
public ValeronWardens(final ValeronWardens card) {
public ValeronWardens copy() {return new ValeronWardens(this);
class ValeronWardensTriggeredAbility extends TriggeredAbilityImpl {
public ValeronWardensTriggeredAbility() {
public ValeronWardensTriggeredAbility(final ValeronWardensTriggeredAbility ability) {
public ValeronWardensTriggeredAbility copy() {return new ValeronWardensTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(EventType.BECOMES_RENOWNED);
public boolean checkTrigger(GameEvent event, Game game) {return permanent != null && permanent.getControllerId().equals(getControllerId());
public String getRule() {return "Whenever a creature you control becomes renowned, draw a card.";
public class ValorInAkros extends CardImpl {
public ValorInAkros(UUID ownerId) {
public ValorInAkros(final ValorInAkros card) {
public ValorInAkros copy() {return new ValorInAkros(this);
public class VeteransSidearm extends CardImpl {
public VeteransSidearm(UUID ownerId) {
public VeteransSidearm(final VeteransSidearm card) {
public VeteransSidearm copy() {return new VeteransSidearm(this);
public class VineSnare extends CardImpl {
public VineSnare(UUID ownerId) {
public VineSnare(final VineSnare card) {
public VineSnare copy() {return new VineSnare(this);
public class VolcanicRambler extends CardImpl {
public VolcanicRambler(UUID ownerId) {
public VolcanicRambler(final VolcanicRambler card) {
public VolcanicRambler copy() {return new VolcanicRambler(this);
public class VrynWingmare extends CardImpl {
public VrynWingmare(UUID ownerId) {
public VrynWingmare(final VrynWingmare card) {
public VrynWingmare copy() {return new VrynWingmare(this);
VrynWingmareCostReductionEffect ( ) {
VrynWingmareCostReductionEffect(VrynWingmareCostReductionEffect effect) {return true;return true;return false;
public VrynWingmareCostReductionEffect copy() {return new VrynWingmareCostReductionEffect(this);
public class WarHorn extends CardImpl {
public WarHorn(UUID ownerId) {
public WarHorn(final WarHorn card) {
public WarHorn copy() {return new WarHorn(this);
public class WarOracle extends CardImpl {
public WarOracle(UUID ownerId) {
public WarOracle(final WarOracle card) {
public WarOracle copy() {return new WarOracle(this);
public class WhirlerRogue extends CardImpl {
public WhirlerRogue(UUID ownerId) {
public WhirlerRogue(final WhirlerRogue card) {
public WhirlerRogue copy() {return new WhirlerRogue(this);
public class WildInstincts extends CardImpl {
public WildInstincts(UUID ownerId) {
public WildInstincts(final WildInstincts card) {
public WildInstincts copy() {return new WildInstincts(this);
public class Willbreaker extends CardImpl {
public Willbreaker(UUID ownerId) {
public Willbreaker(final Willbreaker card) {
public Willbreaker copy() {return new Willbreaker(this);
class WillbreakerTriggeredAbility extends TriggeredAbilityImpl {
public WillbreakerTriggeredAbility(Effect effect) {
public WillbreakerTriggeredAbility(WillbreakerTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature an opponent controls becomes the target of a spell or ability you control, " + super.getRule();
public WillbreakerTriggeredAbility copy() {return new WillbreakerTriggeredAbility(this);
public class WoodlandBellower extends CardImpl {
public WoodlandBellower(UUID ownerId) {
public WoodlandBellower(final WoodlandBellower card) {
public WoodlandBellower copy() {return new WoodlandBellower(this);
class WoodlandBellowerEffect extends OneShotEffect {
WoodlandBellowerEffect() {
WoodlandBellowerEffect(final WoodlandBellowerEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public WoodlandBellowerEffect copy() {return new WoodlandBellowerEffect(this);
public class ZendikarIncarnate extends CardImpl {
public ZendikarIncarnate(UUID ownerId) {
public ZendikarIncarnate(final ZendikarIncarnate card) {
public ZendikarIncarnate copy() {return new ZendikarIncarnate(this);
public class ZendikarsRoil extends CardImpl {
public ZendikarsRoil(UUID ownerId) {
public ZendikarsRoil(final ZendikarsRoil card) {
public ZendikarsRoil copy() {return new ZendikarsRoil(this);
class ZendikarsRoilElementalToken extends Token {
public ZendikarsRoilElementalToken() {
public class BaronSengir extends CardImpl {
public BaronSengir(UUID ownerId) {
public BaronSengir(final BaronSengir card) {
public BaronSengir copy() {return new BaronSengir(this);
public class CuombajjWitches extends CardImpl {
public CuombajjWitches(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public CuombajjWitches(final CuombajjWitches card) {
public CuombajjWitches copy() {return new CuombajjWitches(this);
public class EaterOfTheDead extends CardImpl {
public EaterOfTheDead(UUID ownerId) {
public EaterOfTheDead(final EaterOfTheDead card) {
public EaterOfTheDead copy() {return new EaterOfTheDead(this);
class EaterOfTheDeadEffect extends OneShotEffect {
EaterOfTheDeadEffect() {
EaterOfTheDeadEffect(final EaterOfTheDeadEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public EaterOfTheDeadEffect copy() {return new EaterOfTheDeadEffect(this);
public class Forcefield extends CardImpl {
public Forcefield(UUID ownerId) {
public Forcefield(final Forcefield card) {
public Forcefield copy() {return new Forcefield(this);
class ForcefieldEffect extends OneShotEffect {
ForcefieldEffect() {
ForcefieldEffect(final ForcefieldEffect effect) {
public ForcefieldEffect copy() {return new ForcefieldEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ForcefieldPreventionEffect extends PreventionEffectImpl {
ForcefieldPreventionEffect() {
ForcefieldPreventionEffect(ForcefieldPreventionEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {return super.applies(event, source, game)
public ForcefieldPreventionEffect copy() {return new ForcefieldPreventionEffect(this);
public class HandOfJustice extends CardImpl {
public HandOfJustice(UUID ownerId) {
public HandOfJustice(final HandOfJustice card) {
public HandOfJustice copy() {return new HandOfJustice(this);
public class HymnOfRebirth extends CardImpl {
public HymnOfRebirth(UUID ownerId) {
public HymnOfRebirth(final HymnOfRebirth card) {
public HymnOfRebirth copy() {return new HymnOfRebirth(this);return new IfhBiffEfreet(this);
public class IllusionaryForces extends CardImpl {
public IllusionaryForces(UUID ownerId) {
public IllusionaryForces(final IllusionaryForces card) {
public IllusionaryForces copy() {return new IllusionaryForces(this);
public class IllusionaryWall extends CardImpl {
public IllusionaryWall(UUID ownerId) {
public IllusionaryWall(final IllusionaryWall card) {
public IllusionaryWall copy() {return new IllusionaryWall(this);
public class KhabalGhoul extends CardImpl {
public KhabalGhoul(UUID ownerId) {
public KhabalGhoul(final KhabalGhoul card) {
public KhabalGhoul copy() {return new KhabalGhoul(this);
public class MindstabThrull extends CardImpl {
public MindstabThrull(UUID ownerId) {
public MindstabThrull(final MindstabThrull card) {
public MindstabThrull copy() {return new MindstabThrull(this);
public class Onulet extends CardImpl {
public Onulet(UUID ownerId) {
public Onulet(final Onulet card) {
public Onulet copy() {return new Onulet(this);
public class OrderOfLeitbur extends CardImpl {
public OrderOfLeitbur(UUID ownerId) {
public OrderOfLeitbur(final OrderOfLeitbur card) {
public OrderOfLeitbur copy() {return new OrderOfLeitbur(this);
public class OrderOfTheEbonHand extends CardImpl {
public OrderOfTheEbonHand(UUID ownerId) {
public OrderOfTheEbonHand(final OrderOfTheEbonHand card) {
public OrderOfTheEbonHand copy() {return new OrderOfTheEbonHand(this);
public class RainbowVale extends CardImpl {
public RainbowVale(UUID ownerId) {
public RainbowVale(final RainbowVale card) {
public RainbowVale copy() {return new RainbowVale(this);
class RainbowValeEffect extends OneShotEffect {
public RainbowValeEffect() {
public RainbowValeEffect(final RainbowValeEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public RainbowValeEffect copy() {return new RainbowValeEffect(this);
class OpponentGainControlEffect extends ContinuousEffectImpl {
public OpponentGainControlEffect() {
public OpponentGainControlEffect(final OpponentGainControlEffect effect) {
public void init(Ability source, Game game) {
public OpponentGainControlEffect copy() {return new OpponentGainControlEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class RiverMerfolk extends CardImpl {
public RiverMerfolk(UUID ownerId) {
public RiverMerfolk(final RiverMerfolk card) {
public RiverMerfolk copy() {return new RiverMerfolk(this);
public class ShamblingStrider extends CardImpl {
public ShamblingStrider(UUID ownerId) {
public ShamblingStrider(final ShamblingStrider card) {
public ShamblingStrider copy() {return new ShamblingStrider(this);
public class ShieldOfTheAges extends CardImpl {
public ShieldOfTheAges(UUID ownerId) {
public ShieldOfTheAges(final ShieldOfTheAges card) {
public ShieldOfTheAges copy() {return new ShieldOfTheAges(this);
class ShieldOfTheAgesEffect extends PreventionEffectImpl {
public ShieldOfTheAgesEffect() {
public ShieldOfTheAgesEffect(final ShieldOfTheAgesEffect effect) {
public ShieldOfTheAgesEffect copy() {return new ShieldOfTheAgesEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class StormSeeker extends CardImpl {
public StormSeeker(UUID ownerId) {
public StormSeeker(final StormSeeker card) {
public StormSeeker copy() {return new StormSeeker(this);
class TargetPlayerCardsInHandCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return targetPlayer.getHand().size();return 0;
public DynamicValue copy() {return new TargetPlayerCardsInHandCount();
public String toString() {return "1";
public String getMessage() {return "target player's cards in hand";
public class SunkenCity extends CardImpl {
public SunkenCity(UUID ownerId) {
public SunkenCity(final SunkenCity card) {
public SunkenCity copy() {return new SunkenCity(this);
public class UrzasBauble extends CardImpl {
public UrzasBauble(UUID ownerId) {
public UrzasBauble(final UrzasBauble card) {
public UrzasBauble copy() {return new UrzasBauble(this);return new LookAtRandomCardEffect(this);
public boolean apply(Game game, Ability source) {
{return true;return false;
public class WalkingWall extends CardImpl {
public WalkingWall(UUID ownerId) {
public WalkingWall(final WalkingWall card) {
public WalkingWall copy() {return new WalkingWall(this);
public class Aeolipile extends CardImpl {
public Aeolipile(UUID ownerId) {
public Aeolipile(final Aeolipile card) {
public Aeolipile copy() {return new Aeolipile(this);
public class ArmorOfFaith extends CardImpl {
public ArmorOfFaith(UUID ownerId) {
public ArmorOfFaith(final ArmorOfFaith card) {
public ArmorOfFaith copy() {return new ArmorOfFaith(this);
public class ArmorThrull extends CardImpl {
public ArmorThrull(UUID ownerId) {
public ArmorThrull(final ArmorThrull card) {
public ArmorThrull copy() {return new ArmorThrull(this);
public class AysenBureaucrats extends CardImpl {
public AysenBureaucrats(UUID ownerId) {
public AysenBureaucrats(final AysenBureaucrats card) {
public AysenBureaucrats copy() {return new AysenBureaucrats(this);
public class BindingGrasp extends CardImpl {
public BindingGrasp(UUID ownerId) {
public BindingGrasp(final BindingGrasp card) {
public BindingGrasp copy() {return new BindingGrasp(this);
public class BountyOfTheHunt extends CardImpl {
public BountyOfTheHunt(UUID ownerId) {
public class CombatMedic extends CardImpl {
public CombatMedic(UUID ownerId) {
public CombatMedic(final CombatMedic card) {
public CombatMedic copy() {return new CombatMedic(this);
public class DespoticScepter extends CardImpl {
public DespoticScepter(UUID ownerId) {
public DespoticScepter(final DespoticScepter card) {
public DespoticScepter copy() {return new DespoticScepter(this);
public class EbonPraetor extends CardImpl {
public EbonPraetor(UUID ownerId) {
public EbonPraetor(final EbonPraetor card) {
public EbonPraetor copy() {return new EbonPraetor(this);
class EbonPraetorAbility extends LimitedTimesPerTurnActivatedAbility {
public EbonPraetorAbility(Effect effect, Cost cost) {
public EbonPraetorAbility(final EbonPraetorAbility ability) {
public EbonPraetorAbility copy() {return new EbonPraetorAbility(this);
public boolean canActivate(UUID playerId, Game game) {return false;return super.canActivate(playerId, game);
public String getRule() {return sb.toString();
class EbonPraetorEffect extends OneShotEffect {
public EbonPraetorEffect() {
public EbonPraetorEffect(final EbonPraetorEffect effect) {
public EbonPraetorEffect copy() {return new EbonPraetorEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;
public class ElementalAugury extends CardImpl {
public ElementalAugury(UUID ownerId) {
public ElementalAugury(final ElementalAugury card) {
public ElementalAugury copy() {return new ElementalAugury(this);
class ElementalAuguryEffect extends OneShotEffect {
public ElementalAuguryEffect() {
public ElementalAuguryEffect(final ElementalAuguryEffect effect) {
public ElementalAuguryEffect copy() {return new ElementalAuguryEffect(this);
public boolean apply(Game game, Ability source) {
|| controller == null) {return false;return true;
public class ElvenLyre extends CardImpl {
public ElvenLyre(UUID ownerId) {
public ElvenLyre(final ElvenLyre card) {
public ElvenLyre copy() {return new ElvenLyre(this);
public class ElvishFarmer extends CardImpl {
public ElvishFarmer(UUID ownerId) {
public ElvishFarmer(final ElvishFarmer card) {
public ElvishFarmer copy() {return new ElvishFarmer(this);
public class ElvishHunter extends CardImpl {
public ElvishHunter(UUID ownerId) {
public ElvishHunter(final ElvishHunter card) {
public ElvishHunter copy() {return new ElvishHunter(this);
public class Enervate extends CardImpl {
public Enervate(UUID ownerId) {
public Enervate(final Enervate card) {
public Enervate copy() {return new Enervate(this);
public class ForgottenLore extends CardImpl {
public ForgottenLore(UUID ownerId) {
public ForgottenLore(final ForgottenLore card) {
public ForgottenLore copy() {return new ForgottenLore(this);
class ForgottenLoreEffect extends OneShotEffect {
public ForgottenLoreEffect() {
public ForgottenLoreEffect(final ForgottenLoreEffect effect) {
public ForgottenLoreEffect copy() {return new ForgottenLoreEffect(this);
public boolean apply(Game game, Ability source) {
{return true;return false;
public class FoulFamiliar extends CardImpl {
public FoulFamiliar(UUID ownerId) {
public FoulFamiliar(final FoulFamiliar card) {
public FoulFamiliar copy() {return new FoulFamiliar(this);
public class Fumarole extends CardImpl {
public Fumarole(UUID ownerId) {
public Fumarole(final Fumarole card) {
public Fumarole copy() {return new Fumarole(this);
public class GrandmotherSengir extends CardImpl {
public GrandmotherSengir(UUID ownerId) {
public GrandmotherSengir(final GrandmotherSengir card) {
public GrandmotherSengir copy() {return new GrandmotherSengir(this);
public class IcatianScout extends CardImpl {
public IcatianScout(UUID ownerId) {
public IcatianScout(final IcatianScout card) {
public IcatianScout copy() {return new IcatianScout(this);
public class Marjhan extends CardImpl {
public Marjhan(UUID ownerId) {
public Marjhan(final Marjhan card) {
public Marjhan copy() {return new Marjhan(this);
public class MesmericTrance extends CardImpl {
public MesmericTrance(UUID ownerId) {
public MesmericTrance(final MesmericTrance card) {
public MesmericTrance copy() {return new MesmericTrance(this);
public class OrcishCaptain extends CardImpl {
public OrcishCaptain(UUID ownerId) {
public OrcishCaptain(final OrcishCaptain card) {
public OrcishCaptain copy() {return new OrcishCaptain(this);
class OrcishCaptainEffect extends OneShotEffect {
public OrcishCaptainEffect() {
public OrcishCaptainEffect(OrcishCaptainEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public OrcishCaptainEffect copy() {return new OrcishCaptainEffect(this);
public class OrcishVeteran extends CardImpl {
public OrcishVeteran(UUID ownerId) {
public OrcishVeteran(final OrcishVeteran card) {
public OrcishVeteran copy() {return new OrcishVeteran(this);
public class Panic extends CardImpl {
public Panic(UUID ownerId) {
public Panic(final Panic card) {
public Panic copy() {return new Panic(this);return new RedCliffsArmada(this);return new Reinforcements(this);
public class RitualOfTheMachine extends CardImpl {
public RitualOfTheMachine(UUID ownerId) {
public RitualOfTheMachine(final RitualOfTheMachine card) {
public RitualOfTheMachine copy() {return new RitualOfTheMachine(this);
public class ScreechingDrake extends CardImpl {
public ScreechingDrake(UUID ownerId) {
public ScreechingDrake(final ScreechingDrake card) {
public ScreechingDrake copy() {return new ScreechingDrake(this);
public class SeaDrake extends CardImpl {
public SeaDrake(UUID ownerId) {
public SeaDrake(final SeaDrake card) {
public SeaDrake copy() {return new SeaDrake(this);
public class SeaSpirit extends CardImpl {
public SeaSpirit(UUID ownerId) {
public SeaSpirit(final SeaSpirit card) {
public SeaSpirit copy() {return new SeaSpirit(this);
public class SoldeviSimulacrum extends CardImpl {
public SoldeviSimulacrum(UUID ownerId) {
public SoldeviSimulacrum(final SoldeviSimulacrum card) {
public SoldeviSimulacrum copy() {return new SoldeviSimulacrum(this);
public class SoulKiss extends CardImpl {
public SoulKiss(UUID ownerId) {
public SoulKiss(final SoulKiss card) {
public SoulKiss copy() {return new SoulKiss(this);
public class Thermokarst extends CardImpl {
public Thermokarst(UUID ownerId) {
public Thermokarst(final Thermokarst card) {
public Thermokarst copy() {return new Thermokarst(this);
class ThermokarstEffect extends OneShotEffect {
public ThermokarstEffect() {
public ThermokarstEffect(final ThermokarstEffect effect) {
public ThermokarstEffect copy() {return new ThermokarstEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ThoughtLash extends CardImpl {
public ThoughtLash(UUID ownerId) {
public ThoughtLash(final ThoughtLash card) {
public ThoughtLash copy() {return new ThoughtLash(this);
class ThoughtLashTriggeredAbility extends TriggeredAbilityImpl {
ThoughtLashTriggeredAbility() {
ThoughtLashTriggeredAbility(final ThoughtLashTriggeredAbility ability) {
public ThoughtLashTriggeredAbility copy() {return new ThoughtLashTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DIDNT_PAY_CUMULATIVE_UPKEEP;
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId() != null && event.getSourceId().equals(this.getSourceId());
public String getRule() {return "When a player doesn't pay {this}'s cumulative upkeep, that player exiles all cards from his or her library.";
class ThoughtLashExileLibraryEffect extends OneShotEffect {
ThoughtLashExileLibraryEffect() {
ThoughtLashExileLibraryEffect(final ThoughtLashExileLibraryEffect effect) {
public ThoughtLashExileLibraryEffect copy() {return new ThoughtLashExileLibraryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ThoughtLashPreventionEffect extends PreventionEffectImpl {
ThoughtLashPreventionEffect() {
ThoughtLashPreventionEffect(final ThoughtLashPreventionEffect effect) {
public ThoughtLashPreventionEffect copy() {return new ThoughtLashPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return !this.used && super.applies(event, source, game) && event.getTargetId().equals(source.getControllerId());
public class TimeBomb extends CardImpl {
public TimeBomb(UUID ownerId) {
public TimeBomb(final TimeBomb card) {
public TimeBomb copy() {return new TimeBomb(this);
public class VisceridArmor extends CardImpl {
public VisceridArmor(UUID ownerId) {
public VisceridArmor(final VisceridArmor card) {
public VisceridArmor copy() {return new VisceridArmor(this);
public class Warning extends CardImpl {
public Warning(UUID ownerId) {
public Warning(final Warning card) {
public Warning copy() {return new Warning(this);
public class WingsOfAesthir extends CardImpl {
public WingsOfAesthir(UUID ownerId) {
public WingsOfAesthir(final WingsOfAesthir card) {
public WingsOfAesthir copy() {return new WingsOfAesthir(this);
public class WolfPack extends CardImpl {
public WolfPack(UUID ownerId) {
public WolfPack(final WolfPack card) {
public WolfPack copy() {return new WolfPack(this);
public class YavimayaAncients extends CardImpl {
public YavimayaAncients(UUID ownerId) {
public YavimayaAncients(final YavimayaAncients card) {
public YavimayaAncients copy() {return new YavimayaAncients(this);
public class ArcadesSabboth extends CardImpl {
public ArcadesSabboth(UUID ownerId) {
public ArcadesSabboth(final ArcadesSabboth card) {
public ArcadesSabboth copy() {return new ArcadesSabboth(this);
public class Astrolabe extends CardImpl {
public Astrolabe(UUID ownerId) {
public Astrolabe(final Astrolabe card) {
public Astrolabe copy() {return new Astrolabe(this);
public class BoneFlute extends CardImpl {
public BoneFlute(UUID ownerId) {
public BoneFlute(final BoneFlute card) {
public BoneFlute copy() {return new BoneFlute(this);
public class Chromium extends CardImpl {
public Chromium(UUID ownerId) {
public Chromium(final Chromium card) {
public Chromium copy() {return new Chromium(this);
public class CoalGolem extends CardImpl {
public CoalGolem(UUID ownerId) {
public CoalGolem(final CoalGolem card) {
public CoalGolem copy() {return new CoalGolem(this);
public class ConcordantCrossroads extends CardImpl {
public ConcordantCrossroads(UUID ownerId) {
public ConcordantCrossroads(final ConcordantCrossroads card) {
public ConcordantCrossroads copy() {return new ConcordantCrossroads(this);
public class CorruptEunuchs extends CardImpl {
public CorruptEunuchs(UUID ownerId) {
public CorruptEunuchs(final CorruptEunuchs card) {
public CorruptEunuchs copy() {return new CorruptEunuchs(this);
public class Exorcist extends CardImpl {
public Exorcist(UUID ownerId) {
public Exorcist(final Exorcist card) {
public Exorcist copy() {return new Exorcist(this);
public class FaerieNoble extends CardImpl {
public FaerieNoble(UUID ownerId) {
public FaerieNoble(final FaerieNoble card) {
public FaerieNoble copy() {return new FaerieNoble(this);
public class FalseDefeat extends CardImpl {
public FalseDefeat(UUID ownerId) {
public FalseDefeat(final FalseDefeat card) {
public FalseDefeat copy() {return new FalseDefeat(this);
public class GhostsOfTheDamned extends CardImpl {
public GhostsOfTheDamned(UUID ownerId) {
public GhostsOfTheDamned(final GhostsOfTheDamned card) {
public GhostsOfTheDamned copy() {return new GhostsOfTheDamned(this);
public class GuanYus1000LiMarch extends CardImpl {
public GuanYus1000LiMarch(UUID ownerId) {
public GuanYus1000LiMarch(final GuanYus1000LiMarch card) {
public GuanYus1000LiMarch copy() {return new GuanYus1000LiMarch(this);
public class GuanYuSaintedWarrior extends CardImpl {
public GuanYuSaintedWarrior(UUID ownerId) {
public GuanYuSaintedWarrior(final GuanYuSaintedWarrior card) {
public GuanYuSaintedWarrior copy() {return new GuanYuSaintedWarrior(this);
public class Hellfire extends CardImpl {
public Hellfire(UUID ownerId) {
public Hellfire(final Hellfire card) {
public Hellfire copy() {return new Hellfire(this);
class HellfireEffect extends OneShotEffect {
public HellfireEffect() {
public HellfireEffect(final HellfireEffect effect) {
public HellfireEffect copy() {return new HellfireEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class KeiTakahashi extends CardImpl {
public KeiTakahashi(UUID ownerId) {
public KeiTakahashi(final KeiTakahashi card) {
public KeiTakahashi copy() {return new KeiTakahashi(this);
public class KoboldDrillSergeant extends CardImpl {
public KoboldDrillSergeant(UUID ownerId) {
public KoboldDrillSergeant(final KoboldDrillSergeant card) {
public KoboldDrillSergeant copy() {return new KoboldDrillSergeant(this);
public class LadyCaleria extends CardImpl {
public LadyCaleria(UUID ownerId) {
public LadyCaleria(final LadyCaleria card) {
public LadyCaleria copy() {return new LadyCaleria(this);
public class LivonyaSilone extends CardImpl {
public LivonyaSilone(UUID ownerId) {
public LivonyaSilone(final LivonyaSilone card) {
public LivonyaSilone copy() {return new LivonyaSilone(this);
public class LuBuMasterAtArms extends CardImpl {
public LuBuMasterAtArms(UUID ownerId) {
public LuBuMasterAtArms(final LuBuMasterAtArms card) {
public LuBuMasterAtArms copy() {return new LuBuMasterAtArms(this);
public class ManaVortex extends CardImpl {
public ManaVortex(UUID ownerId) {
public ManaVortex(final ManaVortex card) {
public ManaVortex copy() {return new ManaVortex(this);
class CounterSourceEffect extends OneShotEffect {
public CounterSourceEffect() {
public CounterSourceEffect(final CounterSourceEffect effect) {
public CounterSourceEffect copy() {return new CounterSourceEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public String getText(Mode mode) {return staticText;return "counter it unless you sacrifice a land";
class ManaVortexStateTriggeredAbility extends StateTriggeredAbility {
public ManaVortexStateTriggeredAbility() {
public ManaVortexStateTriggeredAbility(final ManaVortexStateTriggeredAbility ability) {
public ManaVortexStateTriggeredAbility copy() {return new ManaVortexStateTriggeredAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return game.getBattlefield().count(ManaVortex.filter, this.getSourceId(), this.getControllerId(), game) == 0;
public String getRule() {return new StringBuilder("When there are no lands on the battlefield, ").append(super.getRule()).toString() ;
public class PalladiaMors extends CardImpl {
public PalladiaMors(UUID ownerId) {
public PalladiaMors(final PalladiaMors card) {
public PalladiaMors copy() {return new PalladiaMors(this);
public class PrincessLucrezia extends CardImpl {
public PrincessLucrezia(UUID ownerId) {
public PrincessLucrezia(final PrincessLucrezia card) {
public PrincessLucrezia copy() {return new PrincessLucrezia(this);
public class RamsesOverdark extends CardImpl {
public RamsesOverdark(UUID ownerId) {
public RamsesOverdark(final RamsesOverdark card) {
public RamsesOverdark copy() {return new RamsesOverdark(this);
public class RevekaWizardSavant extends CardImpl {
public RevekaWizardSavant(UUID ownerId) {
public RevekaWizardSavant(final RevekaWizardSavant card) {
public RevekaWizardSavant copy() {return new RevekaWizardSavant(this);
public class RidingTheDiluHorse extends CardImpl {
public RidingTheDiluHorse(UUID ownerId) {
public RidingTheDiluHorse(final RidingTheDiluHorse card) {
public RidingTheDiluHorse copy() {return new RidingTheDiluHorse(this);
public class ShuCavalry extends CardImpl {
public ShuCavalry(UUID ownerId) {
public ShuCavalry(final ShuCavalry card) {
public ShuCavalry copy() {return new ShuCavalry(this);
public class ShuEliteCompanions extends CardImpl {
public ShuEliteCompanions(UUID ownerId) {
public ShuEliteCompanions(final ShuEliteCompanions card) {
public ShuEliteCompanions copy() {return new ShuEliteCompanions(this);
public class StolenGrain extends CardImpl {
public StolenGrain(UUID ownerId) {
public StolenGrain(final StolenGrain card) {
public StolenGrain copy() {return new StolenGrain(this);
public class TripWire extends CardImpl {
public TripWire(UUID ownerId) {
public TripWire(final TripWire card) {
public TripWire copy() {return new TripWire(this);
public class TuknirDeathlock extends CardImpl {
public TuknirDeathlock(UUID ownerId) {
public TuknirDeathlock(final TuknirDeathlock card) {
public TuknirDeathlock copy() {return new TuknirDeathlock(this);
public class VaevictisAsmadi extends CardImpl {
public VaevictisAsmadi(UUID ownerId) {
public VaevictisAsmadi(final VaevictisAsmadi card) {
public VaevictisAsmadi copy() {return new VaevictisAsmadi(this);
public class WallOfLight extends CardImpl {
public WallOfLight(UUID ownerId) {
public WallOfLight(final WallOfLight card) {
public WallOfLight copy() {return new WallOfLight(this);
public class WanderingMage extends CardImpl {
public WanderingMage(UUID ownerId) {
public WanderingMage(final WanderingMage card) {
public WanderingMage copy() {return new WanderingMage(this);
class WanderingMageCost extends CostImpl {
public WanderingMageCost() {
public WanderingMageCost(WanderingMageCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public WanderingMageCost copy() {return new WanderingMageCost(this);
public class WeiEliteCompanions extends CardImpl {
public WeiEliteCompanions(UUID ownerId) {
public WeiEliteCompanions(final WeiEliteCompanions card) {
public WeiEliteCompanions copy() {return new WeiEliteCompanions(this);
public class WuWarship extends CardImpl {
public WuWarship(UUID ownerId) {
public WuWarship(final WuWarship card) {
public WuWarship copy() {return new WuWarship(this);
public class YoungWeiRecruits extends CardImpl {
public YoungWeiRecruits(UUID ownerId) {
public YoungWeiRecruits(final YoungWeiRecruits card) {
public YoungWeiRecruits copy() {return new YoungWeiRecruits(this);
public class ZhangFeiFierceWarrior extends CardImpl {
public ZhangFeiFierceWarrior(UUID ownerId) {
public ZhangFeiFierceWarrior(final ZhangFeiFierceWarrior card) {
public ZhangFeiFierceWarrior copy() {return new ZhangFeiFierceWarrior(this);
public class Aladdin extends CardImpl {
public Aladdin(UUID ownerId) {
public Aladdin(final Aladdin card) {
public Aladdin copy() {return new Aladdin(this);
public class AlchorsTomb extends CardImpl {
public AlchorsTomb(UUID ownerId) {
public AlchorsTomb(final AlchorsTomb card) {
public AlchorsTomb copy() {return new AlchorsTomb(this);
public class ClockworkGnomes extends CardImpl {
public ClockworkGnomes(UUID ownerId) {
public ClockworkGnomes(final ClockworkGnomes card) {
public ClockworkGnomes copy() {return new ClockworkGnomes(this);
public class CloudDragon extends CardImpl {
public CloudDragon(UUID ownerId) {
public CloudDragon(final CloudDragon card) {
public CloudDragon copy() {return new CloudDragon(this);
public class CoralHelm extends CardImpl {
public CoralHelm(UUID ownerId) {
public CoralHelm(final CoralHelm card) {
public CoralHelm copy() {return new CoralHelm(this);
public class Crumble extends CardImpl {
public Crumble(UUID ownerId) {
public Crumble(final Crumble card) {
public Crumble copy() {return new Crumble(this);
class CrumbleEffect extends OneShotEffect {
public CrumbleEffect() {
public CrumbleEffect(final CrumbleEffect effect) {
public CrumbleEffect copy() {return new CrumbleEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ElephantGraveyard extends CardImpl {
public ElephantGraveyard(UUID ownerId) {
public ElephantGraveyard(final ElephantGraveyard card) {
public ElephantGraveyard copy() {return new ElephantGraveyard(this);
public class FloodwaterDam extends CardImpl {
public FloodwaterDam(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public FloodwaterDam(final FloodwaterDam card) {
public FloodwaterDam copy() {return new FloodwaterDam(this);
public class FoulSpirit extends CardImpl {
public FoulSpirit(UUID ownerId) {
public FoulSpirit(final FoulSpirit card) {
public FoulSpirit copy() {return new FoulSpirit(this);
public class LastChance extends CardImpl {
public LastChance(UUID ownerId) {
public LastChance(final LastChance card) {
public LastChance copy() {return new LastChance(this);return new Lifeforce(this);
public class ManaMatrix extends CardImpl {
public ManaMatrix(UUID ownerId) {
public ManaMatrix(final ManaMatrix card) {
public ManaMatrix copy() {return new ManaMatrix(this);
public class MijaeDjinn extends CardImpl {
public MijaeDjinn(UUID ownerId) {
public MijaeDjinn(final MijaeDjinn card) {
public MijaeDjinn copy() {return new MijaeDjinn(this);
class MijaeDjinnEffect extends OneShotEffect {
public MijaeDjinnEffect() {
public MijaeDjinnEffect(MijaeDjinnEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public MijaeDjinnEffect copy() {return new MijaeDjinnEffect(this);
public class PlanarGate extends CardImpl {
public PlanarGate(UUID ownerId) {
public PlanarGate(final PlanarGate card) {
public PlanarGate copy() {return new PlanarGate(this);
public class ProwlingNightstalker extends CardImpl {
public ProwlingNightstalker(UUID ownerId) {
public ProwlingNightstalker(final ProwlingNightstalker card) {
public ProwlingNightstalker copy() {return new ProwlingNightstalker(this);
public class RingOfRenewal extends CardImpl {
public RingOfRenewal(UUID ownerId) {
public RingOfRenewal(final RingOfRenewal card) {
public RingOfRenewal copy() {return new RingOfRenewal(this);
public class SedgeTroll extends CardImpl {
public SedgeTroll(UUID ownerId) {
public SedgeTroll(final SedgeTroll card) {
public SedgeTroll copy() {return new SedgeTroll(this);
public class SoldeviMachinist extends CardImpl {
public SoldeviMachinist(UUID ownerId) {
public SoldeviMachinist(final SoldeviMachinist card) {
public SoldeviMachinist copy() {return new SoldeviMachinist(this);
class SoldeviMachinistManaBuilder extends ConditionalManaBuilder {return new ArtifactAbilityConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to activate abilities of artifacts";
public boolean apply(Game game, Ability source) {return true;return false;
public boolean apply(Game game, Ability source, UUID originalId, Cost costsToPay) {return apply(game, source);
public class SoulShred extends CardImpl {
public SoulShred(UUID ownerId) {
public SoulShred(final SoulShred card) {
public SoulShred copy() {return new SoulShred(this);
public class StaffOfZegon extends CardImpl {
public StaffOfZegon(UUID ownerId) {
public StaffOfZegon(final StaffOfZegon card) {
public StaffOfZegon copy() {return new StaffOfZegon(this);
public class ThingFromTheDeep extends CardImpl {
public ThingFromTheDeep(UUID ownerId) {
public ThingFromTheDeep(final ThingFromTheDeep card) {
public ThingFromTheDeep copy() {return new ThingFromTheDeep(this);
public class TwoHeadedGiantOfForiys extends CardImpl {
public TwoHeadedGiantOfForiys(UUID ownerId) {
public TwoHeadedGiantOfForiys(final TwoHeadedGiantOfForiys card) {
public TwoHeadedGiantOfForiys copy() {return new TwoHeadedGiantOfForiys(this);
public class WildAesthir extends CardImpl {
public WildAesthir(UUID ownerId) {
public WildAesthir(final WildAesthir card) {
public WildAesthir copy() {return new WildAesthir(this);
public class MagisterOfWorth extends CardImpl {
public MagisterOfWorth(UUID ownerId) {effect.setText("Will of the council - When Magister of Worth enters the battlefield, starting with you, each player votes for grace or condemnation. If grace gets more votes, each player returns each creature card from his or her graveyard to the battlefield. If condemnation gets more votes or the vote is tied, destroy all creatures other than Magister of Worth");
public MagisterOfWorth(final MagisterOfWorth card) {
public MagisterOfWorth copy() {return new MagisterOfWorth(this);
class MagisterOfWorthVoteEffect extends OneShotEffect {
MagisterOfWorthVoteEffect() {this.staticText = "<i>Will of the council</i> - When {this} enters the battlefield, starting with you, each player votes for grace or condemnation. If grace gets more votes, each player returns each creature card from his or her graveyard to the battlefield. If condemnation gets more votes or the vote is tied, destroy all creatures other than {this}.";
MagisterOfWorthVoteEffect(final MagisterOfWorthVoteEffect effect) {
public MagisterOfWorthVoteEffect copy() {return new MagisterOfWorthVoteEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MagisterOfWorthDestroyEffect extends OneShotEffect {
public MagisterOfWorthDestroyEffect() {
public MagisterOfWorthDestroyEffect(final MagisterOfWorthDestroyEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MagisterOfWorthDestroyEffect copy() {return new MagisterOfWorthDestroyEffect(this);
class MagisterOfWorthReturnFromGraveyardEffect extends OneShotEffect {
public MagisterOfWorthReturnFromGraveyardEffect() {staticText = "each player returns each creature card from his or her graveyard to the battlefield";
public MagisterOfWorthReturnFromGraveyardEffect(final MagisterOfWorthReturnFromGraveyardEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MagisterOfWorthReturnFromGraveyardEffect copy() {return new MagisterOfWorthReturnFromGraveyardEffect(this);
public class SilverDrake extends CardImpl {
public SilverDrake(UUID ownerId) {
public SilverDrake(final SilverDrake card) {
public SilverDrake copy() {return new SilverDrake(this);
public class VoidmageHusher extends CardImpl {
public VoidmageHusher(UUID ownerId) {
public VoidmageHusher(final VoidmageHusher card) {
public VoidmageHusher copy() {return new VoidmageHusher(this);
public class Warmonger extends CardImpl {
public Warmonger(UUID ownerId) {
public Warmonger(final Warmonger card) {
public Warmonger copy() {return new Warmonger(this);return new AlleyGrifters(this);return new AlleyGriftersDiscardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AncestralMask extends CardImpl {
public AncestralMask(UUID ownerId) {
public AncestralMask(final AncestralMask card) {
public AncestralMask copy() {return new AncestralMask(this);
public class BallistaSquad extends CardImpl {
public BallistaSquad(UUID ownerId) {
public BallistaSquad(final BallistaSquad card) {
public BallistaSquad copy() {return new BallistaSquad(this);
public class BalloonPeddler extends CardImpl {
public BalloonPeddler(UUID ownerId) {
public BalloonPeddler(final BalloonPeddler card) {
public BalloonPeddler copy() {return new BalloonPeddler(this);
public class BattleSquadron extends CardImpl {
public BattleSquadron(UUID ownerId) {
public BattleSquadron(final BattleSquadron card) {
public BattleSquadron copy() {return new BattleSquadron(this);
public class BlackMarket extends CardImpl {
public BlackMarket(UUID ownerId) {
public BlackMarket(final BlackMarket card) {
public BlackMarket copy() {return new BlackMarket(this);
class BlackMarketEffect extends OneShotEffect {
public BlackMarketEffect() {
public BlackMarketEffect(final BlackMarketEffect effect) {
public BlackMarketEffect copy() {return new BlackMarketEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BlasterMage extends CardImpl {
public BlasterMage(UUID ownerId) {
public BlasterMage(final BlasterMage card) {
public BlasterMage copy() {return new BlasterMage(this);
public class BogSmugglers extends CardImpl {
public BogSmugglers(UUID ownerId) {
public BogSmugglers(final BogSmugglers card) {
public BogSmugglers copy() {return new BogSmugglers(this);
public class BogWitch extends CardImpl {
public BogWitch(UUID ownerId) {
public BogWitch(final BogWitch card) {
public BogWitch copy() {return new BogWitch(this);
public class Bribery extends CardImpl {
public Bribery(UUID ownerId) {
public Bribery(final Bribery card) {
public Bribery copy() {return new Bribery(this);
class BriberyEffect extends OneShotEffect {
public BriberyEffect() {
public BriberyEffect(final BriberyEffect effect) {
public BriberyEffect copy() {return new BriberyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CacklingWitch extends CardImpl {
public CacklingWitch(UUID ownerId) {
public CacklingWitch(final CacklingWitch card) {
public CacklingWitch copy() {return new CacklingWitch(this);
public class CateranBrute extends CardImpl {
public CateranBrute(UUID ownerId) {
public CateranBrute(final CateranBrute card) {
public CateranBrute copy() {return new CateranBrute(this);return new CateranEnforcer(this);
public class CateranKidnappers extends CardImpl {
public CateranKidnappers(UUID ownerId) {
public CateranKidnappers(final CateranKidnappers card) {
public CateranKidnappers copy() {return new CateranKidnappers(this);
public class CateranOverlord extends CardImpl {
public CateranOverlord(UUID ownerId) {
public CateranOverlord(final CateranOverlord card) {
public CateranOverlord copy() {return new CateranOverlord(this);
public class CateranPersuader extends CardImpl {
public CateranPersuader(UUID ownerId) {
public CateranPersuader(final CateranPersuader card) {
public CateranPersuader copy() {return new CateranPersuader(this);
public class CateranSlaver extends CardImpl {
public CateranSlaver(UUID ownerId) {
public CateranSlaver(final CateranSlaver card) {
public CateranSlaver copy() {return new CateranSlaver(this);
public class CateranSummons extends CardImpl {
public CateranSummons(UUID ownerId) {
public CateranSummons(final CateranSummons card) {
public CateranSummons copy() {return new CateranSummons(this);
public class CavernCrawler extends CardImpl {
public CavernCrawler(UUID ownerId) {
public CavernCrawler(final CavernCrawler card) {
public CavernCrawler copy() {return new CavernCrawler(this);
public class CaveSense extends CardImpl {
public CaveSense(UUID ownerId) {
public CaveSense(final CaveSense card) {
public CaveSense copy() {return new CaveSense(this);
public class ChamberedNautilus extends CardImpl {
public ChamberedNautilus(UUID ownerId) {
public ChamberedNautilus(final ChamberedNautilus card) {
public ChamberedNautilus copy() {return new ChamberedNautilus(this);
public class ChoArrimAlchemist extends CardImpl {
public ChoArrimAlchemist(UUID ownerId) {
public ChoArrimAlchemist(final ChoArrimAlchemist card) {
public ChoArrimAlchemist copy() {return new ChoArrimAlchemist(this);
class ChoArrimAlchemistEffect extends PreventionEffectImpl {
public ChoArrimAlchemistEffect() {
public ChoArrimAlchemistEffect(final ChoArrimAlchemistEffect effect) {
public ChoArrimAlchemistEffect copy() {return new ChoArrimAlchemistEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {
public class ChoArrimBruiser extends CardImpl {
public ChoArrimBruiser(UUID ownerId) {
public ChoArrimBruiser(final ChoArrimBruiser card) {
public ChoArrimBruiser copy() {return new ChoArrimBruiser(this);
public class ChoArrimLegate extends CardImpl {
public ChoArrimLegate(UUID ownerId) {
public ChoArrimLegate(final ChoArrimLegate card) {
public ChoArrimLegate copy() {return new ChoArrimLegate(this);
public class ChoMannosBlessing extends CardImpl {
public ChoMannosBlessing(UUID ownerId) {
public ChoMannosBlessing(final ChoMannosBlessing card) {
public ChoMannosBlessing copy() {return new ChoMannosBlessing(this);
public class CloseQuarters extends CardImpl {
public CloseQuarters(UUID ownerId) {
public CloseQuarters(final CloseQuarters card) {
public CloseQuarters copy() {return new CloseQuarters(this);
public class CoastalPiracy extends CardImpl {
public CoastalPiracy(UUID ownerId) {
public CoastalPiracy(final CoastalPiracy card) {
public CoastalPiracy copy() {return new CoastalPiracy(this);
class CoastalPiracyTriggeredAbility extends TriggeredAbilityImpl {
public CoastalPiracyTriggeredAbility() {
public CoastalPiracyTriggeredAbility(final CoastalPiracyTriggeredAbility ability) {
public CoastalPiracyTriggeredAbility copy() {return new CoastalPiracyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control deals combat damage to an opponent, you may draw a card.";
public class CollectiveUnconscious extends CardImpl {
public CollectiveUnconscious(UUID ownerId) {
public CollectiveUnconscious(final CollectiveUnconscious card) {
public CollectiveUnconscious copy() {return new CollectiveUnconscious(this);
public class CorruptOfficial extends CardImpl {
public CorruptOfficial(UUID ownerId) {
public CorruptOfficial(final CorruptOfficial card) {
public CorruptOfficial copy() {return new CorruptOfficial(this);
class CorruptOfficialDiscardEffect extends OneShotEffect {
public CorruptOfficialDiscardEffect() {
public CorruptOfficialDiscardEffect(final CorruptOfficialDiscardEffect effect) {
public CorruptOfficialDiscardEffect copy() {return new CorruptOfficialDiscardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new Crackdown(this);
public class Crash extends CardImpl {
public Crash(UUID ownerId) {
public Crash(final Crash card) {
public Crash copy() {return new Crash(this);
public class CrenellatedWall extends CardImpl {
public CrenellatedWall(UUID ownerId) {
public CrenellatedWall(final CrenellatedWall card) {
public CrenellatedWall copy() {return new CrenellatedWall(this);
public class CrumblingSanctuary extends CardImpl {
public CrumblingSanctuary(UUID ownerId) {
public CrumblingSanctuary(final CrumblingSanctuary card) {
public CrumblingSanctuary copy() {return new CrumblingSanctuary(this);
class CrumblingSanctuaryEffect extends PreventionEffectImpl {
public CrumblingSanctuaryEffect() {
public CrumblingSanctuaryEffect(final CrumblingSanctuaryEffect effect) {
public CrumblingSanctuaryEffect copy() {return new CrumblingSanctuaryEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return super.applies(event, source, game) && (game.getPlayer(event.getTargetId()) != null);
public class DartingMerfolk extends CardImpl {
public DartingMerfolk(UUID ownerId) {
public DartingMerfolk(final DartingMerfolk card) {
public DartingMerfolk copy() {return new DartingMerfolk(this);
public class Dawnstrider extends CardImpl {
public Dawnstrider(UUID ownerId) {
public Dawnstrider(final Dawnstrider card) {
public Dawnstrider copy() {return new Dawnstrider(this);
public class DeadlyInsect extends CardImpl {
public DeadlyInsect(UUID ownerId) {
public DeadlyInsect(final DeadlyInsect card) {
public DeadlyInsect copy() {return new DeadlyInsect(this);
public class DeepwoodLegate extends CardImpl {
public DeepwoodLegate(UUID ownerId) {
public DeepwoodLegate(final DeepwoodLegate card) {
public DeepwoodLegate copy() {return new DeepwoodLegate(this);
public class DeepwoodTantiv extends CardImpl {
public DeepwoodTantiv(UUID ownerId) {
public DeepwoodTantiv(final DeepwoodTantiv card) {
public DeepwoodTantiv copy() {return new DeepwoodTantiv(this);
public class DeepwoodWolverine extends CardImpl {
public DeepwoodWolverine(UUID ownerId) {
public DeepwoodWolverine(final DeepwoodWolverine card) {
public DeepwoodWolverine copy() {return new DeepwoodWolverine(this);
public class DiplomaticEscort extends CardImpl {
public DiplomaticEscort(UUID ownerId) {
public DiplomaticEscort(final DiplomaticEscort card) {
public DiplomaticEscort copy() {return new DiplomaticEscort(this);
public class DiplomaticImmunity extends CardImpl {
public DiplomaticImmunity(UUID ownerId) {
public DiplomaticImmunity(final DiplomaticImmunity card) {
public DiplomaticImmunity copy() {return new DiplomaticImmunity(this);
public class DrakeHatchling extends CardImpl {
public DrakeHatchling(UUID ownerId) {
public DrakeHatchling(final DrakeHatchling card) {
public DrakeHatchling copy() {return new DrakeHatchling(this);
public class DustBowl extends CardImpl {
public DustBowl(UUID ownerId) {
public DustBowl(final DustBowl card) {
public DustBowl copy() {return new DustBowl(this);
public class Embargo extends CardImpl {
public Embargo(UUID ownerId) {
public Embargo(final Embargo card) {
public Embargo copy() {return new Embargo(this);
public class EyeOfRamos extends CardImpl {
public EyeOfRamos(UUID ownerId) {
public EyeOfRamos(final EyeOfRamos card) {
public EyeOfRamos copy() {return new EyeOfRamos(this);
public class FalseDemise extends CardImpl {
public FalseDemise(UUID ownerId) {
public FalseDemise(final FalseDemise card) {
public FalseDemise copy() {return new FalseDemise(this);
public class FlailingManticore extends CardImpl {
public FlailingManticore(UUID ownerId) {
public FlailingManticore(final FlailingManticore card) {
public FlailingManticore copy() {return new FlailingManticore(this);
public class FlailingOgre extends CardImpl {
public FlailingOgre(UUID ownerId) {
public FlailingOgre(final FlailingOgre card) {
public FlailingOgre copy() {return new FlailingOgre(this);
public class FlailingSoldier extends CardImpl {
public FlailingSoldier(UUID ownerId) {
public FlailingSoldier(final FlailingSoldier card) {
public FlailingSoldier copy() {return new FlailingSoldier(this);
public class FoodChain extends CardImpl {
public FoodChain(UUID ownerId) {
public FoodChain(final FoodChain card) {
public FoodChain copy() {return new FoodChain(this);
class FoodChainManaBuilder extends ConditionalManaBuilder {return new CreatureCastConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast creature spells";
class FoodChainManaEffect extends ManaEffect {
FoodChainManaEffect() {
FoodChainManaEffect(final FoodChainManaEffect effect) {
public FoodChainManaEffect copy() {return new FoodChainManaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public class ForcedMarch extends CardImpl {
public ForcedMarch(UUID ownerId) {
public ForcedMarch(final ForcedMarch card) {
public ForcedMarch copy() {return new ForcedMarch(this);
class ForcedMarchEffect extends OneShotEffect {
public ForcedMarchEffect() {
public ForcedMarchEffect(final ForcedMarchEffect effect) {
public ForcedMarchEffect copy() {return new ForcedMarchEffect(this);
public boolean apply(Game game, Ability source) {
game)) {return true;
public class FountainOfCho extends CardImpl {
public FountainOfCho(UUID ownerId) {
public FountainOfCho(final FountainOfCho card) {
public FountainOfCho copy() {return new FountainOfCho(this);
public class FreshVolunteers extends CardImpl {
public FreshVolunteers(UUID ownerId) {
public FreshVolunteers(final FreshVolunteers card) {
public FreshVolunteers copy() {return new FreshVolunteers(this);
public class GerrardsIrregulars extends CardImpl {
public GerrardsIrregulars(UUID ownerId) {
public GerrardsIrregulars(final GerrardsIrregulars card) {
public GerrardsIrregulars copy() {return new GerrardsIrregulars(this);
public class HauntedCrossroads extends CardImpl {
public HauntedCrossroads(UUID ownerId) {
public HauntedCrossroads(final HauntedCrossroads card) {
public HauntedCrossroads copy() {return new HauntedCrossroads(this);
public class HeartOfRamos extends CardImpl {
public HeartOfRamos(UUID ownerId) {
public HeartOfRamos(final HeartOfRamos card) {
public HeartOfRamos copy() {return new HeartOfRamos(this);
public class HengeGuardian extends CardImpl {
public HengeGuardian(UUID ownerId) {
public HengeGuardian(final HengeGuardian card) {
public HengeGuardian copy() {return new HengeGuardian(this);
public class HengeOfRamos extends CardImpl {
public HengeOfRamos(UUID ownerId) {
public HengeOfRamos(final HengeOfRamos card) {
public HengeOfRamos copy() {return new HengeOfRamos(this);
public class HickoryWoodlot extends CardImpl {
public HickoryWoodlot(UUID ownerId) {
public HickoryWoodlot(final HickoryWoodlot card) {
public HickoryWoodlot copy() {return new HickoryWoodlot(this);
public class HighMarket extends CardImpl {
public HighMarket(UUID ownerId) {
public HighMarket(final HighMarket card) {
public HighMarket copy() {return new HighMarket(this);
public class HighSeas extends CardImpl {
public HighSeas(UUID ownerId) {
public HighSeas(final HighSeas card) {
public HighSeas copy() {return new HighSeas(this);
public class Hoodwink extends CardImpl {
public Hoodwink(UUID ownerId) {
public Hoodwink(final Hoodwink card) {
public Hoodwink copy() {return new Hoodwink(this);
public class HornedTroll extends CardImpl {
public HornedTroll(UUID ownerId) {
public HornedTroll(final HornedTroll card) {
public HornedTroll copy() {return new HornedTroll(this);
public class HornOfPlenty extends CardImpl {
public HornOfPlenty(UUID ownerId) {
public HornOfPlenty(final HornOfPlenty card) {
public HornOfPlenty copy() {return new HornOfPlenty(this);
class HornOfPlentyEffect extends OneShotEffect {
public HornOfPlentyEffect() {
public HornOfPlentyEffect(final HornOfPlentyEffect effect) {
public HornOfPlentyEffect copy() {return new HornOfPlentyEffect(this);
public boolean apply(Game game, Ability source) {return new CreateDelayedTriggeredAbilityEffect(new AtTheBeginOfNextEndStepDelayedTriggeredAbility(effect, TargetController.ANY)).apply(game, source);return true;return false;
public class HornOfRamos extends CardImpl {
public HornOfRamos(UUID ownerId) {
public HornOfRamos(final HornOfRamos card) {
public HornOfRamos copy() {return new HornOfRamos(this);
public class HowlingWolf extends CardImpl {
public HowlingWolf(UUID ownerId) {
public HowlingWolf(final HowlingWolf card) {
public HowlingWolf copy() {return new HowlingWolf(this);
public class IgnobleSoldier extends CardImpl {
public IgnobleSoldier(UUID ownerId) {
public IgnobleSoldier(final IgnobleSoldier card) {
public IgnobleSoldier copy() {return new IgnobleSoldier(this);
public class Instigator extends CardImpl {
public Instigator(UUID ownerId) {
public Instigator(final Instigator card) {
public Instigator copy() {return new Instigator(this);
class InstigatorEffect extends OneShotEffect {
public InstigatorEffect() {
public InstigatorEffect(final InstigatorEffect effect) {
public InstigatorEffect copy() {return new InstigatorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JhovallQueen extends CardImpl {
public JhovallQueen(UUID ownerId) {
public JhovallQueen(final JhovallQueen card) {
public JhovallQueen copy() {return new JhovallQueen(this);
public class JhovallRider extends CardImpl {
public JhovallRider(UUID ownerId) {
public JhovallRider(final JhovallRider card) {
public JhovallRider copy() {return new JhovallRider(this);
public class KrisMage extends CardImpl {
public KrisMage(UUID ownerId) {
public KrisMage(final KrisMage card) {
public KrisMage copy() {return new KrisMage(this);
public class KyrenGlider extends CardImpl {
public KyrenGlider(UUID ownerId) {
public KyrenGlider(final KyrenGlider card) {
public KyrenGlider copy() {return new KyrenGlider(this);
public class KyrenToy extends CardImpl {
public KyrenToy(UUID ownerId) {
public KyrenToy(final KyrenToy card) {
public KyrenToy copy() {return new KyrenToy(this);
private class KyrenToyManaAbility extends BasicManaAbility {
KyrenToyManaAbility() {
KyrenToyManaAbility(final KyrenToyManaAbility ability) {
public KyrenToyManaAbility copy() {return new KyrenToyManaAbility(this);
private class KyrenToyManaEffect extends ManaEffect {
KyrenToyManaEffect() {
KyrenToyManaEffect(final KyrenToyManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public KyrenToyManaEffect copy() {return new KyrenToyManaEffect(this);
public class LandGrant extends CardImpl {
public LandGrant(UUID ownerId) {
public LandGrant(final LandGrant card) {
public LandGrant copy() {return new LandGrant(this);
class LandGrantCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public String toString() {return "If you have no land cards in hand";
class LandGrantReavealCost extends CostImpl {
public LandGrantReavealCost() {
public LandGrantReavealCost(LandGrantReavealCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;
public LandGrantReavealCost copy() {return new LandGrantReavealCost(this);
public class Larceny extends CardImpl {
public Larceny(UUID ownerId) {
public Larceny(final Larceny card) {
public Larceny copy() {return new Larceny(this);
class LarcenyTriggeredAbility extends TriggeredAbilityImpl {
public LarcenyTriggeredAbility() {
public LarcenyTriggeredAbility(final LarcenyTriggeredAbility ability) {
public LarcenyTriggeredAbility copy() {return new LarcenyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {
{return true;return false;
public String getRule() {return "Whenever a creature you control deals combat damage to a player, that player discards a card.";
public class LavaRunner extends CardImpl {
public LavaRunner(UUID ownerId) {
public LavaRunner(final LavaRunner card) {
public LavaRunner copy() {return new LavaRunner(this);
class LavaRunnerAbility extends TriggeredAbilityImpl {
public LavaRunnerAbility() {
public LavaRunnerAbility(final LavaRunnerAbility ability) {
public LavaRunnerAbility copy() {return new LavaRunnerAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} becomes the target of a spell or ability, that spell or ability's controller sacrifices a land.";
public class LightningHounds extends CardImpl {
public LightningHounds(UUID ownerId) {
public LightningHounds(final LightningHounds card) {
public LightningHounds copy() {return new LightningHounds(this);
public class Lithophage extends CardImpl {
public Lithophage(UUID ownerId) {
public Lithophage(final Lithophage card) {
public Lithophage copy() {return new Lithophage(this);
public class LumberingSatyr extends CardImpl {
public LumberingSatyr(UUID ownerId) {
public LumberingSatyr(final LumberingSatyr card) {
public LumberingSatyr copy() {return new LumberingSatyr(this);
public class Lunge extends CardImpl {
public Lunge(UUID ownerId) {
public Lunge(final Lunge card) {
public Lunge copy() {return new Lunge(this);
public class MagistratesScepter extends CardImpl {
public MagistratesScepter(UUID ownerId) {
public MagistratesScepter(final MagistratesScepter card) {
public MagistratesScepter copy() {return new MagistratesScepter(this);
public class MagistratesVeto extends CardImpl {
public MagistratesVeto(UUID ownerId) {
public MagistratesVeto(final MagistratesVeto card) {
public MagistratesVeto copy() {return new MagistratesVeto(this);
public class MercadianBazaar extends CardImpl {
public MercadianBazaar(UUID ownerId) {
public MercadianBazaar(final MercadianBazaar card) {
public MercadianBazaar copy() {return new MercadianBazaar(this);
public class MidnightRitual extends CardImpl {
public MidnightRitual(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public MidnightRitual(final MidnightRitual card) {
public MidnightRitual copy() {return new MidnightRitual(this);
class MidnightRitualEffect extends OneShotEffect {
public MidnightRitualEffect() {
public MidnightRitualEffect(final MidnightRitualEffect effect) {
public MidnightRitualEffect copy() {return new MidnightRitualEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Misdirection extends CardImpl {
public Misdirection(UUID ownerId) {
public Misdirection(final Misdirection card) {
public Misdirection copy() {return new Misdirection(this);
public class MisshapenFiend extends CardImpl {
public MisshapenFiend(UUID ownerId) {
public MisshapenFiend(final MisshapenFiend card) {
public MisshapenFiend copy() {return new MisshapenFiend(this);
public class MoltingHarpy extends CardImpl {
public MoltingHarpy(UUID ownerId) {
public MoltingHarpy(final MoltingHarpy card) {
public MoltingHarpy copy() {return new MoltingHarpy(this);
public class MonkeyCage extends CardImpl {
public MonkeyCage(UUID ownerId) {
public MonkeyCage(final MonkeyCage card) {
public MonkeyCage copy() {return new MonkeyCage(this);
class MonkeyCageEffect extends OneShotEffect {
public MonkeyCageEffect() {
public MonkeyCageEffect(final MonkeyCageEffect effect) {
public MonkeyCageEffect copy() {return new MonkeyCageEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new ApeToken(), cmc).apply(game, source);return false;
class ApeToken extends Token {
ApeToken() {
public class Muzzle extends CardImpl {
public Muzzle(UUID ownerId) {
public Muzzle(final Muzzle card) {
public Muzzle copy() {return new Muzzle(this);
public class NetherSpirit extends CardImpl {
public NetherSpirit(UUID ownerId) {this.addAbility(new ConditionalTriggeredAbility(ability, new NetherSpiritCondition(), "At the beginning of your upkeep, if {this} is the only creature card in your graveyard, you may return {this} to the battlefield."));
public NetherSpirit(final NetherSpirit card) {
public NetherSpirit copy() {return new NetherSpirit(this);
class NetherSpiritCondition implements Condition {
public boolean apply(Game game, Ability source) {return player.getGraveyard().contains(card.getId()) && player.getGraveyard().count(new FilterCreatureCard(), game) == 1;return false;
public class NotoriousAssassin extends CardImpl {
public NotoriousAssassin(UUID ownerId) {
public NotoriousAssassin(final NotoriousAssassin card) {
public NotoriousAssassin copy() {return new NotoriousAssassin(this);
public class Overtaker extends CardImpl {
public Overtaker(UUID ownerId) {
public Overtaker(final Overtaker card) {
public Overtaker copy() {return new Overtaker(this);
public class Pangosaur extends CardImpl {
public Pangosaur(UUID ownerId) {
public Pangosaur(final Pangosaur card) {
public Pangosaur copy() {return new Pangosaur(this);
class PangosaurTriggeredAbility extends TriggeredAbilityImpl {
PangosaurTriggeredAbility() {
PangosaurTriggeredAbility(PangosaurTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LAND_PLAYED;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public PangosaurTriggeredAbility copy() {return new PangosaurTriggeredAbility(this);
public String getRule() {return "Whenever a player plays a land, return {this} to its owner's hand.";
public class PeatBog extends CardImpl {
public PeatBog(UUID ownerId) {
public PeatBog(final PeatBog card) {
public PeatBog copy() {return new PeatBog(this);
public class PiousWarrior extends CardImpl {
public PiousWarrior(UUID ownerId) {
public PiousWarrior(final PiousWarrior card) {
public PiousWarrior copy() {return new PiousWarrior(this);
class PiousWarriorTriggeredAbility extends TriggeredAbilityImpl {
public PiousWarriorTriggeredAbility() {
public PiousWarriorTriggeredAbility(final PiousWarriorTriggeredAbility effect) {
public PiousWarriorTriggeredAbility copy() {return new PiousWarriorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt combat damage, " + super.getRule();return new PiousWarriorGainLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class PowerMatrix extends CardImpl {
public PowerMatrix(UUID ownerId) {
public PowerMatrix(final PowerMatrix card) {
public PowerMatrix copy() {return new PowerMatrix(this);
public class PrimevalShambler extends CardImpl {
public PrimevalShambler(UUID ownerId) {
public PrimevalShambler(final PrimevalShambler card) {
public PrimevalShambler copy() {return new PrimevalShambler(this);
public class Pulverize extends CardImpl {
public Pulverize(UUID ownerId) {
public Pulverize(final Pulverize card) {
public Pulverize copy() {return new Pulverize(this);
public class PuppetsVerdict extends CardImpl {
public PuppetsVerdict(UUID ownerId) {
public PuppetsVerdict(final PuppetsVerdict card) {
public PuppetsVerdict copy() {return new PuppetsVerdict(this);
class PuppetsVerdictEffect extends OneShotEffect {
public PuppetsVerdictEffect() {
public PuppetsVerdictEffect(PuppetsVerdictEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public PuppetsVerdictEffect copy() {return new PuppetsVerdictEffect(this);
public class QuagmireLamprey extends CardImpl {
public QuagmireLamprey(UUID ownerId) {
public QuagmireLamprey(final QuagmireLamprey card) {
public QuagmireLamprey copy() {return new QuagmireLamprey(this);
public class RamosianCaptain extends CardImpl {
public RamosianCaptain(UUID ownerId) {
public RamosianCaptain(final RamosianCaptain card) {
public RamosianCaptain copy() {return new RamosianCaptain(this);
public class RamosianCommander extends CardImpl {
public RamosianCommander(UUID ownerId) {
public RamosianCommander(final RamosianCommander card) {
public RamosianCommander copy() {return new RamosianCommander(this);
public class RamosianLieutenant extends CardImpl {
public RamosianLieutenant(UUID ownerId) {
public RamosianLieutenant(final RamosianLieutenant card) {
public RamosianLieutenant copy() {return new RamosianLieutenant(this);
public class RamosianSergeant extends CardImpl {
public RamosianSergeant(UUID ownerId) {
public RamosianSergeant(final RamosianSergeant card) {
public RamosianSergeant copy() {return new RamosianSergeant(this);
public class RamosianSkyMarshal extends CardImpl {
public RamosianSkyMarshal(UUID ownerId) {
public RamosianSkyMarshal(final RamosianSkyMarshal card) {
public RamosianSkyMarshal copy() {return new RamosianSkyMarshal(this);
public class RampartCrawler extends CardImpl {
public RampartCrawler(UUID ownerId) {
public RampartCrawler(final RampartCrawler card) {
public RampartCrawler copy() {return new RampartCrawler(this);
public class RappellingScouts extends CardImpl {
public RappellingScouts(UUID ownerId) {
public RappellingScouts(final RappellingScouts card) {
public RappellingScouts copy() {return new RappellingScouts(this);
public class RemoteFarm extends CardImpl {
public RemoteFarm(UUID ownerId) {
public RemoteFarm(final RemoteFarm card) {
public RemoteFarm copy() {return new RemoteFarm(this);
public class RushwoodGrove extends CardImpl {
public RushwoodGrove(UUID ownerId) {
public RushwoodGrove(final RushwoodGrove card) {
public RushwoodGrove copy() {return new RushwoodGrove(this);
public class RushwoodHerbalist extends CardImpl {
public RushwoodHerbalist(UUID ownerId) {
public RushwoodHerbalist(final RushwoodHerbalist card) {
public RushwoodHerbalist copy() {return new RushwoodHerbalist(this);
public class RushwoodLegate extends CardImpl {
public RushwoodLegate(UUID ownerId) {
public RushwoodLegate(final RushwoodLegate card) {
public RushwoodLegate copy() {return new RushwoodLegate(this);
public class SaberAnts extends CardImpl {
public SaberAnts(UUID ownerId) {
public SaberAnts(final SaberAnts card) {
public SaberAnts copy() {return new SaberAnts(this);
class SaberAntsEffect extends OneShotEffect {
public SaberAntsEffect() {
public SaberAntsEffect(final SaberAntsEffect effect) {
public SaberAntsEffect copy() {return new SaberAntsEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new InsectToken(), damage).apply(game, source);return false;
public class SacredPrey extends CardImpl {
public SacredPrey(UUID ownerId) {
public SacredPrey(final SacredPrey card) {
public SacredPrey copy() {return new SacredPrey(this);
public class SandSquid extends CardImpl {
public SandSquid(UUID ownerId) {
public SandSquid(final SandSquid card) {
public SandSquid copy() {return new SandSquid(this);
public class SandstoneNeedle extends CardImpl {
public SandstoneNeedle(UUID ownerId) {
public SandstoneNeedle(final SandstoneNeedle card) {
public SandstoneNeedle copy() {return new SandstoneNeedle(this);
public class SaprazzanCove extends CardImpl {
public SaprazzanCove(UUID ownerId) {
public SaprazzanCove(final SaprazzanCove card) {
public SaprazzanCove copy() {return new SaprazzanCove(this);
public class SaprazzanHeir extends CardImpl {
public SaprazzanHeir(UUID ownerId) {
public SaprazzanHeir(final SaprazzanHeir card) {
public SaprazzanHeir copy() {return new SaprazzanHeir(this);
public class SaprazzanLegate extends CardImpl {
public SaprazzanLegate(UUID ownerId) {
public SaprazzanLegate(final SaprazzanLegate card) {
public SaprazzanLegate copy() {return new SaprazzanLegate(this);
public class SaprazzanRaider extends CardImpl {
public SaprazzanRaider(UUID ownerId) {
public SaprazzanRaider(final SaprazzanRaider card) {
public SaprazzanRaider copy() {return new SaprazzanRaider(this);
public class SaprazzanSkerry extends CardImpl {
public SaprazzanSkerry(UUID ownerId) {
public SaprazzanSkerry(final SaprazzanSkerry card) {
public SaprazzanSkerry copy() {return new SaprazzanSkerry(this);
public class SeismicMage extends CardImpl {
public SeismicMage(UUID ownerId) {
public SeismicMage(final SeismicMage card) {
public SeismicMage copy() {return new SeismicMage(this);
public class SeverSoul extends CardImpl {
public SeverSoul(UUID ownerId) {
public SeverSoul(final SeverSoul card) {
public SeverSoul copy() {return new SeverSoul(this);
public boolean apply(Game game, Ability source) {return false;return new GainLifeEqualToToughnessEffect(this);
public class ShockTroops extends CardImpl {
public ShockTroops(UUID ownerId) {
public ShockTroops(final ShockTroops card) {
public ShockTroops copy() {return new ShockTroops(this);
public class SilvergladePathfinder extends CardImpl {
public SilvergladePathfinder(UUID ownerId) {
public SilvergladePathfinder(final SilvergladePathfinder card) {
public SilvergladePathfinder copy() {return new SilvergladePathfinder(this);
public class Sizzle extends CardImpl {
public Sizzle(UUID ownerId) {
public Sizzle(final Sizzle card) {
public Sizzle copy() {return new Sizzle(this);
public class SkulkingFugitive extends CardImpl {
public SkulkingFugitive(UUID ownerId) {
public SkulkingFugitive(final SkulkingFugitive card) {
public SkulkingFugitive copy() {return new SkulkingFugitive(this);
public class SnortingGahr extends CardImpl {
public SnortingGahr(UUID ownerId) {
public SnortingGahr(final SnortingGahr card) {
public SnortingGahr copy() {return new SnortingGahr(this);
public class SnuffOut extends CardImpl {
public SnuffOut(UUID ownerId) {
public SnuffOut(final SnuffOut card) {
public SnuffOut copy() {return new SnuffOut(this);
public class Soothsaying extends CardImpl {
public Soothsaying(UUID ownerId) {
public Soothsaying(final Soothsaying card) {
public Soothsaying copy() {return new Soothsaying(this);
public class SpectersWail extends CardImpl {
public SpectersWail(UUID ownerId) {
public SpectersWail(final SpectersWail card) {
public SpectersWail copy() {return new SpectersWail(this);
public class SpontaneousGeneration extends CardImpl {
public SpontaneousGeneration(UUID ownerId) {
public SpontaneousGeneration(final SpontaneousGeneration card) {
public SpontaneousGeneration copy() {return new SpontaneousGeneration(this);
public class Squeeze extends CardImpl {
public Squeeze(UUID ownerId) {
public Squeeze(final Squeeze card) {
public Squeeze copy() {return new Squeeze(this);
public class Statecraft extends CardImpl {
public Statecraft(UUID ownerId) {
public Statecraft(final Statecraft card) {
public Statecraft copy() {return new Statecraft(this);
class StatecraftPreventionEffect extends PreventionEffectImpl {
StatecraftPreventionEffect() {
StatecraftPreventionEffect(final StatecraftPreventionEffect effect) {
public StatecraftPreventionEffect copy() {return new StatecraftPreventionEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public class StingingBarrier extends CardImpl {
public StingingBarrier(UUID ownerId) {
public StingingBarrier(final StingingBarrier card) {
public StingingBarrier copy() {return new StingingBarrier(this);
public class StoryCircle extends CardImpl {
public StoryCircle(UUID ownerId) {
public StoryCircle(final StoryCircle card) {
public StoryCircle copy() {return new StoryCircle(this);
class StoryCircleEffect extends PreventNextDamageFromChosenSourceToYouEffect {
public StoryCircleEffect() {
public void init(Ability source, Game game) {
public StoryCircleEffect(StoryCircleEffect effect) {
public StoryCircleEffect copy() {return new StoryCircleEffect(this);
public class StrongarmThug extends CardImpl {
public StrongarmThug(UUID ownerId) {
public StrongarmThug(final StrongarmThug card) {
public StrongarmThug copy() {return new StrongarmThug(this);
public class SubterraneanHangar extends CardImpl {
public SubterraneanHangar(UUID ownerId) {
public SubterraneanHangar(final SubterraneanHangar card) {
public SubterraneanHangar copy() {return new SubterraneanHangar(this);
public class Sustenance extends CardImpl {
public Sustenance(UUID ownerId) {
public Sustenance(final Sustenance card) {
public Sustenance copy() {return new Sustenance(this);
public class TaskForce extends CardImpl {
public TaskForce(UUID ownerId) {
public TaskForce(final TaskForce card) {
public TaskForce copy() {return new TaskForce(this);
public class TectonicBreak extends CardImpl {
public TectonicBreak(UUID ownerId) {
public TectonicBreak(final TectonicBreak card) {
public TectonicBreak copy() {return new TectonicBreak(this);
public class TerritorialDispute extends CardImpl {
public TerritorialDispute(UUID ownerId) {
public TerritorialDispute(final TerritorialDispute card) {
public TerritorialDispute copy() {return new TerritorialDispute(this);
public TerritorialDisputeEffect() {
public TerritorialDisputeEffect(final TerritorialDisputeEffect effect) {
public TerritorialDisputeEffect copy() {return new TerritorialDisputeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.PLAY_LAND;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class ThermalGlider extends CardImpl {
public ThermalGlider(UUID ownerId) {
public ThermalGlider(final ThermalGlider card) {
public ThermalGlider copy() {return new ThermalGlider(this);
public class ThrashingWumpus extends CardImpl {
public ThrashingWumpus(UUID ownerId) {
public ThrashingWumpus(final ThrashingWumpus card) {
public ThrashingWumpus copy() {return new ThrashingWumpus(this);
public class Thwart extends CardImpl {
public Thwart(UUID ownerId) {
public Thwart(final Thwart card) {
public Thwart copy() {return new Thwart(this);
public class ToothOfRamos extends CardImpl {
public ToothOfRamos(UUID ownerId) {
public ToothOfRamos(final ToothOfRamos card) {
public ToothOfRamos copy() {return new ToothOfRamos(this);
public class TowerOfTheMagistrate extends CardImpl {
public TowerOfTheMagistrate(UUID ownerId) {
public TowerOfTheMagistrate(final TowerOfTheMagistrate card) {
public TowerOfTheMagistrate copy() {return new TowerOfTheMagistrate(this);
public class TwoHeadedDragon extends CardImpl {
public TwoHeadedDragon(UUID ownerId) {
public TwoHeadedDragon(final TwoHeadedDragon card) {
public TwoHeadedDragon copy() {return new TwoHeadedDragon(this);
public class Unmask extends CardImpl {
public Unmask(UUID ownerId) {
public Unmask(final Unmask card) {
public Unmask copy() {return new Unmask(this);
public class VineDryad extends CardImpl {
public VineDryad(UUID ownerId) {
public class VineTrellis extends CardImpl {
public VineTrellis(UUID ownerId) {
public VineTrellis(final VineTrellis card) {
public VineTrellis copy() {return new VineTrellis(this);
public class WaterfrontBouncer extends CardImpl {
public WaterfrontBouncer(UUID ownerId) {
public WaterfrontBouncer(final WaterfrontBouncer card) {
public WaterfrontBouncer copy() {return new WaterfrontBouncer(this);
public class WildJhovall extends CardImpl {
public WildJhovall(UUID ownerId) {
public WildJhovall(final WildJhovall card) {
public WildJhovall copy() {return new WildJhovall(this);
public class AbyssalHunter extends CardImpl {
public AbyssalHunter(UUID ownerId) {
public AbyssalHunter(final AbyssalHunter card) {
public AbyssalHunter copy() {return new AbyssalHunter(this);
class AbyssalHunterEffect extends OneShotEffect {
public AbyssalHunterEffect() {
public AbyssalHunterEffect(final AbyssalHunterEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AbyssalHunterEffect copy() {return new AbyssalHunterEffect(this);return new Afterlife(this);return new AfterlifeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Agility extends CardImpl {
public Agility(UUID ownerId) {
public Agility(final Agility card) {
public Agility copy() {return new Agility(this);
public class Alarum extends CardImpl {
public Alarum(UUID ownerId) {
public Alarum(final Alarum card) {
public Alarum copy() {return new Alarum(this);
public class Aleatory extends CardImpl {
public Aleatory(UUID ownerId) {
public Aleatory(final Aleatory card) {
public Aleatory copy() {return new Aleatory(this);
class AleatoryEffect extends OneShotEffect {
public AleatoryEffect() {
public AleatoryEffect(AleatoryEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AleatoryEffect copy() {return new AleatoryEffect(this);
public class AmberPrison extends CardImpl {
public AmberPrison(UUID ownerId) {
public AmberPrison(final AmberPrison card) {
public AmberPrison copy() {return new AmberPrison(this);
public class ArmorerGuildmage extends CardImpl {
public ArmorerGuildmage(UUID ownerId) {
public ArmorerGuildmage(final ArmorerGuildmage card) {
public ArmorerGuildmage copy() {return new ArmorerGuildmage(this);
public class ArmorOfThorns extends CardImpl {
public ArmorOfThorns(UUID ownerId) {
public ArmorOfThorns(final ArmorOfThorns card) {
public ArmorOfThorns copy() {return new ArmorOfThorns(this);
public class AshenPowder extends CardImpl {
public AshenPowder(UUID ownerId) {
public AshenPowder(final AshenPowder card) {
public AshenPowder copy() {return new AshenPowder(this);
public class AsmiraHolyAvenger extends CardImpl {
public AsmiraHolyAvenger(UUID ownerId) {
public AsmiraHolyAvenger(final AsmiraHolyAvenger card) {
public AsmiraHolyAvenger copy() {return new AsmiraHolyAvenger(this);
class AsmiraHolyAvengerWatcher extends Watcher {
public AsmiraHolyAvengerWatcher() {
public AsmiraHolyAvengerWatcher(final AsmiraHolyAvengerWatcher watcher) {
public AsmiraHolyAvengerWatcher copy() {return new AsmiraHolyAvengerWatcher(this);
public int getCreaturesCount() {return creaturesCount;
public void watch(GameEvent event, Game game) {
public void reset() {
class AsmiraHolyAvengerDynamicValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return watcher.getCreaturesCount();return 0;
public AsmiraHolyAvengerDynamicValue copy() {return new AsmiraHolyAvengerDynamicValue();
public String toString() {return "1";
public String getMessage() {return "creature put into your graveyard from the battlefield this turn";
public class BadRiver extends CardImpl {
public BadRiver(UUID ownerId) {
public BadRiver(final BadRiver card) {
public BadRiver copy() {return new BadRiver(this);
public class BarbedBackWurm extends CardImpl {
public BarbedBackWurm(UUID ownerId) {
public BarbedBackWurm(final BarbedBackWurm card) {
public BarbedBackWurm copy() {return new BarbedBackWurm(this);
public class BayFalcon extends CardImpl {
public BayFalcon(UUID ownerId) {
public BayFalcon(final BayFalcon card) {
public BayFalcon copy() {return new BayFalcon(this);
public class BenthicDjinn extends CardImpl {
public BenthicDjinn(UUID ownerId) {
public BenthicDjinn(final BenthicDjinn card) {
public BenthicDjinn copy() {return new BenthicDjinn(this);
public class BindingAgony extends CardImpl {
public BindingAgony(UUID ownerId) {
public BindingAgony(final BindingAgony card) {
public BindingAgony copy() {return new BindingAgony(this);
public class BlightedShaman extends CardImpl {
public BlightedShaman(UUID ownerId) {
public BlightedShaman(final BlightedShaman card) {
public BlightedShaman copy() {return new BlightedShaman(this);
public class BlindingLight extends CardImpl {
public BlindingLight(UUID ownerId) {
public BlindingLight(final BlindingLight card) {
public BlindingLight copy() {return new BlindingLight(this);
public class BlisteringBarrier extends CardImpl {
public BlisteringBarrier(UUID ownerId) {
public BlisteringBarrier(final BlisteringBarrier card) {
public BlisteringBarrier copy() {return new BlisteringBarrier(this);
public class BoneHarvest extends CardImpl {
public BoneHarvest(UUID ownerId) {
public BoneHarvest(final BoneHarvest card) {
public BoneHarvest copy() {return new BoneHarvest(this);
public class Breathstealer extends CardImpl {
public Breathstealer(UUID ownerId) {
public Breathstealer(final Breathstealer card) {
public Breathstealer copy() {return new Breathstealer(this);
public class Brushwagg extends CardImpl {
public Brushwagg(UUID ownerId) {
public Brushwagg(final Brushwagg card) {
public Brushwagg copy() {return new Brushwagg(this);
public class BurningShieldAskari extends CardImpl {
public BurningShieldAskari(UUID ownerId) {
public BurningShieldAskari(final BurningShieldAskari card) {
public BurningShieldAskari copy() {return new BurningShieldAskari(this);
public class CadaverousBloom extends CardImpl {
public CadaverousBloom(UUID ownerId) {
public CadaverousBloom(final CadaverousBloom card) {
public CadaverousBloom copy() {return new CadaverousBloom(this);
public class CanopyDragon extends CardImpl {
public CanopyDragon(UUID ownerId) {
public CanopyDragon(final CanopyDragon card) {
public CanopyDragon copy() {return new CanopyDragon(this);
public class CeruleanWyvern extends CardImpl {
public CeruleanWyvern(UUID ownerId) {
public CeruleanWyvern(final CeruleanWyvern card) {
public CeruleanWyvern copy() {return new CeruleanWyvern(this);
public class ChaosCharm extends CardImpl {
public ChaosCharm(UUID ownerId) {
public ChaosCharm(final ChaosCharm card) {
public ChaosCharm copy() {return new ChaosCharm(this);
public class CivicGuildmage extends CardImpl {
public CivicGuildmage(UUID ownerId) {
public CivicGuildmage(final CivicGuildmage card) {
public CivicGuildmage copy() {return new CivicGuildmage(this);
public class CloakOfInvisibility extends CardImpl {
public CloakOfInvisibility(UUID ownerId) {
public CloakOfInvisibility(final CloakOfInvisibility card) {
public CloakOfInvisibility copy() {return new CloakOfInvisibility(this);
class CantBeBlockedByWallsEffect extends RestrictionEffect {
public CantBeBlockedByWallsEffect() {
public CantBeBlockedByWallsEffect(final CantBeBlockedByWallsEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return true;
public CantBeBlockedByWallsEffect copy() {return new CantBeBlockedByWallsEffect(this);
public class CrystalGolem extends CardImpl {
public CrystalGolem(UUID ownerId) {
public CrystalGolem(final CrystalGolem card) {
public CrystalGolem copy() {return new CrystalGolem(this);
public class CrystalVein extends CardImpl {
public CrystalVein(UUID ownerId) {
public CrystalVein(final CrystalVein card) {
public CrystalVein copy() {return new CrystalVein(this);
public class CursedTotem extends CardImpl {
public CursedTotem(UUID ownerId) {
public CursedTotem(final CursedTotem card) {
public CursedTotem copy() {return new CursedTotem(this);
class CursedTotemCantActivateEffect extends RestrictionEffect {
public CursedTotemCantActivateEffect() {
public CursedTotemCantActivateEffect(final CursedTotemCantActivateEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getCardType().contains(CardType.CREATURE);
public boolean canUseActivatedAbilities(Permanent permanent, Ability source, Game game) {return false;
public CursedTotemCantActivateEffect copy() {return new CursedTotemCantActivateEffect(this);
public class DirtwaterWraith extends CardImpl {
public DirtwaterWraith(UUID ownerId) {
public DirtwaterWraith(final DirtwaterWraith card) {
public DirtwaterWraith copy() {return new DirtwaterWraith(this);
public class DwarvenMiner extends CardImpl {
public DwarvenMiner(UUID ownerId) {
public DwarvenMiner(final DwarvenMiner card) {
public DwarvenMiner copy() {return new DwarvenMiner(this);
public class DwarvenNomad extends CardImpl {
public DwarvenNomad(UUID ownerId) {
public DwarvenNomad(final DwarvenNomad card) {
public DwarvenNomad copy() {return new DwarvenNomad(this);
public class EbonyCharm extends CardImpl {
public EbonyCharm(UUID ownerId) {
public EbonyCharm(final EbonyCharm card) {
public EbonyCharm copy() {return new EbonyCharm(this);
class EbonyCharmDrainEffect extends OneShotEffect {
EbonyCharmDrainEffect() {
EbonyCharmDrainEffect(final EbonyCharmDrainEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public EbonyCharmDrainEffect copy() {return new EbonyCharmDrainEffect(this);
class EbonyCharmExileEffect extends OneShotEffect {
public EbonyCharmExileEffect() {
public EbonyCharmExileEffect(final EbonyCharmExileEffect effect) {
public EbonyCharmExileEffect copy() {return new EbonyCharmExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return new EkunduGriffin(this);
public class EnlightenedTutor extends CardImpl {
public EnlightenedTutor(UUID ownerId) {
public EnlightenedTutor(final EnlightenedTutor card) {
public EnlightenedTutor copy() {return new EnlightenedTutor(this);
public class EtherealChampion extends CardImpl {
public EtherealChampion(UUID ownerId) {
public EtherealChampion(final EtherealChampion card) {
public EtherealChampion copy() {return new EtherealChampion(this);
public class FallowEarth extends CardImpl {
public FallowEarth(UUID ownerId) {
public FallowEarth(final FallowEarth card) {
public FallowEarth copy() {return new FallowEarth(this);
public class FemerefHealer extends CardImpl {
public FemerefHealer(UUID ownerId) {
public FemerefHealer(final FemerefHealer card) {
public FemerefHealer copy() {return new FemerefHealer(this);
public class FemerefKnight extends CardImpl {
public FemerefKnight(UUID ownerId) {
public FemerefKnight(final FemerefKnight card) {
public FemerefKnight copy() {return new FemerefKnight(this);
public class FemerefScouts extends CardImpl {
public FemerefScouts(UUID ownerId) {
public FemerefScouts(final FemerefScouts card) {
public FemerefScouts copy() {return new FemerefScouts(this);return new FeralShadow(this);
public class Flash extends CardImpl {
public Flash(UUID ownerId) {
public Flash(final Flash card) {
public Flash copy() {return new Flash(this);
class FlashEffect extends OneShotEffect {
public FlashEffect() {
public FlashEffect(final FlashEffect effect) {
public FlashEffect copy() {return new FlashEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;return false;
public class Foratog extends CardImpl {
public Foratog(UUID ownerId) {
public Foratog(final Foratog card) {
public Foratog copy() {return new Foratog(this);
public class ForbiddenCrypt extends CardImpl {
public ForbiddenCrypt(UUID ownerId) {
public ForbiddenCrypt(final ForbiddenCrypt card) {
public ForbiddenCrypt copy() {return new ForbiddenCrypt(this);
class ForbiddenCryptDrawCardReplacementEffect extends ReplacementEffectImpl {
public ForbiddenCryptDrawCardReplacementEffect() {this.staticText = "If you would draw a card, return a card from your graveyard to your hand instead. If you can't, you lose the game";
public ForbiddenCryptDrawCardReplacementEffect(final ForbiddenCryptDrawCardReplacementEffect effect) {
public ForbiddenCryptDrawCardReplacementEffect copy() {return new ForbiddenCryptDrawCardReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {game.informPlayers(controller.getLogName() + " can't return a card from graveyard to hand.");return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
class ForbiddenCryptPutIntoYourGraveyardReplacementEffect extends ReplacementEffectImpl {
public ForbiddenCryptPutIntoYourGraveyardReplacementEffect() {
public ForbiddenCryptPutIntoYourGraveyardReplacementEffect(final ForbiddenCryptPutIntoYourGraveyardReplacementEffect effect) {
public ForbiddenCryptPutIntoYourGraveyardReplacementEffect copy() {return new ForbiddenCryptPutIntoYourGraveyardReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCardToExileWithInfo(permanent, null, "", source.getSourceId(), game, ((ZoneChangeEvent) event).getFromZone(), true);return controller.moveCardToExileWithInfo(card, null, "", source.getSourceId(), game, ((ZoneChangeEvent) event).getFromZone(), true);return false;return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class GiantMantis extends CardImpl {
public GiantMantis(UUID ownerId) {
public GiantMantis(final GiantMantis card) {
public GiantMantis copy() {return new GiantMantis(this);
public class GoblinScouts extends CardImpl {
public GoblinScouts(UUID ownerId) {
public GoblinScouts(final GoblinScouts card) {
public GoblinScouts copy() {return new GoblinScouts(this);
class GoblinScoutsToken extends Token {
public GoblinScoutsToken() {
public class GoblinSoothsayer extends CardImpl {
public GoblinSoothsayer(UUID ownerId) {
public GoblinSoothsayer(final GoblinSoothsayer card) {
public GoblinSoothsayer copy() {return new GoblinSoothsayer(this);
public class GoblinTinkerer extends CardImpl {
public GoblinTinkerer(UUID ownerId) {
public GoblinTinkerer(final GoblinTinkerer card) {
public GoblinTinkerer copy() {return new GoblinTinkerer(this);
class GoblinTinkererDamageEffect extends OneShotEffect {
public GoblinTinkererDamageEffect() {
public GoblinTinkererDamageEffect(final GoblinTinkererDamageEffect effect) {
public GoblinTinkererDamageEffect copy() {return new GoblinTinkererDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GrangerGuildmage extends CardImpl {
public GrangerGuildmage(UUID ownerId) {
public GrangerGuildmage(final GrangerGuildmage card) {
public GrangerGuildmage copy() {return new GrangerGuildmage(this);
public class GravebaneZombie extends CardImpl {
public GravebaneZombie(UUID ownerId) {
public GravebaneZombie(final GravebaneZombie card) {
public GravebaneZombie copy() {return new GravebaneZombie(this);
class GravebaneZombieEffect extends ReplacementEffectImpl {
GravebaneZombieEffect() {
GravebaneZombieEffect(final GravebaneZombieEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getSourceId()) && ((ZoneChangeEvent) event).isDiesEvent();
public GravebaneZombieEffect copy() {return new GravebaneZombieEffect(this);
public class GraveServitude extends CardImpl {
public GraveServitude(UUID ownerId) {
public GraveServitude(final GraveServitude card) {
public GraveServitude copy() {return new GraveServitude(this);
public class HammerOfBogardan extends CardImpl {
public HammerOfBogardan(UUID ownerId) {
public HammerOfBogardan(final HammerOfBogardan card) {
public HammerOfBogardan copy() {return new HammerOfBogardan(this);
public class HarbingerOfNight extends CardImpl {
public HarbingerOfNight(UUID ownerId) {
public HarbingerOfNight(final HarbingerOfNight card) {
public HarbingerOfNight copy() {return new HarbingerOfNight(this);
public class HarmattanEfreet extends CardImpl {
public HarmattanEfreet(UUID ownerId) {
public HarmattanEfreet(final HarmattanEfreet card) {
public HarmattanEfreet copy() {return new HarmattanEfreet(this);
public class HazeriderDrake extends CardImpl {
public HazeriderDrake(UUID ownerId) {
public HazeriderDrake(final HazeriderDrake card) {
public HazeriderDrake copy() {return new HazeriderDrake(this);
public class HorribleHordes extends CardImpl {
public HorribleHordes(UUID ownerId) {
public HorribleHordes(final HorribleHordes card) {
public HorribleHordes copy() {return new HorribleHordes(this);
public class IgneousGolem extends CardImpl {
public IgneousGolem(UUID ownerId) {
public IgneousGolem(final IgneousGolem card) {
public IgneousGolem copy() {return new IgneousGolem(this);
public class IllicitAuction extends CardImpl {
public IllicitAuction(UUID ownerId) {
public IllicitAuction(final IllicitAuction card) {
public IllicitAuction copy() {return new IllicitAuction(this);
class IllicitAuctionEffect extends GainControlTargetEffect {
public IllicitAuctionEffect() {
public IllicitAuctionEffect(final IllicitAuctionEffect effect) {
public IllicitAuctionEffect copy() {return new IllicitAuctionEffect(this);
public void init(Ability source, Game game) {
public class Illumination extends CardImpl {
public Illumination(UUID ownerId) {
public Illumination(final Illumination card) {
public Illumination copy() {return new Illumination(this);
class IlluminationEffect extends OneShotEffect {
public IlluminationEffect() {
public IlluminationEffect(final IlluminationEffect effect) {
public IlluminationEffect copy() {return new IlluminationEffect(this);
public boolean apply(Game game, Ability source) {return true;return countered;
public class IronTuskElephant extends CardImpl {
public IronTuskElephant(UUID ownerId) {
public IronTuskElephant(final IronTuskElephant card) {
public IronTuskElephant copy() {return new IronTuskElephant(this);
public class IvoryCharm extends CardImpl {
public IvoryCharm(UUID ownerId) {
public IvoryCharm(final IvoryCharm card) {
public IvoryCharm copy() {return new IvoryCharm(this);
public class JolraelsCentaur extends CardImpl {
public JolraelsCentaur(UUID ownerId) {
public JolraelsCentaur(final JolraelsCentaur card) {
public JolraelsCentaur copy() {return new JolraelsCentaur(this);
public class JungleTroll extends CardImpl {
public JungleTroll(UUID ownerId) {
public JungleTroll(final JungleTroll card) {
public JungleTroll copy() {return new JungleTroll(this);
public class JungleWurm extends CardImpl {
public JungleWurm(UUID ownerId) {
public JungleWurm(final JungleWurm card) {
public JungleWurm copy() {return new JungleWurm(this);
class JungleWurmAbility extends BecomesBlockedTriggeredAbility {
public JungleWurmAbility() {
public JungleWurmAbility(final JungleWurmAbility ability) {
public JungleWurmAbility copy() {return new JungleWurmAbility(this);
public String getRule() {return "Whenever {this} becomes blocked, it gets -1/-1 until end of turn for each creature blocking it beyond the first.";
class JungleWurmValue implements DynamicValue {
public JungleWurmValue copy() {return new JungleWurmValue();
public int calculate(Game game, Ability sourceAbility, Effect effect) {return blockers > 1 ? -(blockers - 1) : 0;return 0;
public String getMessage() {return "-1/-1 until end of turn for each creature blocking it beyond the first";
public class KarooMeerkat extends CardImpl {
public KarooMeerkat(UUID ownerId) {
public KarooMeerkat(final KarooMeerkat card) {
public KarooMeerkat copy() {return new KarooMeerkat(this);
public class KukemssaSerpent extends CardImpl {
public KukemssaSerpent(UUID ownerId) {
public KukemssaSerpent(final KukemssaSerpent card) {
public KukemssaSerpent copy() {return new KukemssaSerpent(this);
public class LeadGolem extends CardImpl {
public LeadGolem(UUID ownerId) {
public LeadGolem(final LeadGolem card) {
public LeadGolem copy() {return new LeadGolem(this);
public class LightningReflexes extends CardImpl {
public LightningReflexes(UUID ownerId) {
public LightningReflexes(final LightningReflexes card) {
public LightningReflexes copy() {return new LightningReflexes(this);
public class LionsEyeDiamond extends CardImpl {
public LionsEyeDiamond(UUID ownerId) {
public LionsEyeDiamond(final LionsEyeDiamond card) {
public LionsEyeDiamond copy() {return new LionsEyeDiamond(this);
class LionsEyeDiamondAbility extends ManaAbility {
public LionsEyeDiamondAbility() {
public LionsEyeDiamondAbility(Zone zone, Mana mana, Cost cost) {
public LionsEyeDiamondAbility(final LionsEyeDiamondAbility ability) {
public boolean canActivate(UUID playerId, Game game) {return super.canActivate(playerId, game);return false;
public LionsEyeDiamondAbility copy() {return new LionsEyeDiamondAbility(this);
public String getRule() {return super.getRule() + " Activate this ability only any time you could cast an instant.";
public class LocustSwarm extends CardImpl {
public LocustSwarm(UUID ownerId) {
public LocustSwarm(final LocustSwarm card) {
public LocustSwarm copy() {return new LocustSwarm(this);
public class ManaPrism extends CardImpl {
public ManaPrism(UUID ownerId) {
public ManaPrism(final ManaPrism card) {
public ManaPrism copy() {return new ManaPrism(this);
public class MelesseSpirit extends CardImpl {
public MelesseSpirit(UUID ownerId) {
public MelesseSpirit(final MelesseSpirit card) {
public MelesseSpirit copy() {return new MelesseSpirit(this);
public class MerfolkRaiders extends CardImpl {
public MerfolkRaiders(UUID ownerId) {
public MerfolkRaiders(final MerfolkRaiders card) {
public MerfolkRaiders copy() {return new MerfolkRaiders(this);
public class MerfolkSeer extends CardImpl {
public MerfolkSeer(UUID ownerId) {
public MerfolkSeer(final MerfolkSeer card) {
public MerfolkSeer copy() {return new MerfolkSeer(this);
public class MistDragon extends CardImpl {
public MistDragon(UUID ownerId) {
public MistDragon(final MistDragon card) {
public MistDragon copy() {return new MistDragon(this);
public class MountainValley extends CardImpl {
public MountainValley(UUID ownerId) {
public MountainValley(final MountainValley card) {
public MountainValley copy() {return new MountainValley(this);effect.setText("and return target Griffin card from your graveyard to your hand");return new MtendaGriffin(this);
public class MtendaHerder extends CardImpl {
public MtendaHerder(UUID ownerId) {
public MtendaHerder(final MtendaHerder card) {
public MtendaHerder copy() {return new MtendaHerder(this);
public class MysticalTutor extends CardImpl {
public MysticalTutor(UUID ownerId) {
public MysticalTutor(final MysticalTutor card) {
public MysticalTutor copy() {return new MysticalTutor(this);
public class NettletoothDjinn extends CardImpl {
public NettletoothDjinn(UUID ownerId) {
public NettletoothDjinn(final NettletoothDjinn card) {
public NettletoothDjinn copy() {return new NettletoothDjinn(this);
public class PaupersCage extends CardImpl {
public PaupersCage(UUID ownerId) {
public PaupersCage(final PaupersCage card) {
public PaupersCage copy() {return new PaupersCage(this);
public class PearlDragon extends CardImpl {
public PearlDragon(UUID ownerId) {
public PearlDragon(final PearlDragon card) {
public PearlDragon copy() {return new PearlDragon(this);
public class PhyrexianDreadnought extends CardImpl {
public PhyrexianDreadnought(UUID ownerId) {
public PhyrexianDreadnought(final PhyrexianDreadnought card) {
public PhyrexianDreadnought copy() {return new PhyrexianDreadnought(this);
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return sumPower >= 12;return new PhyrexianDreadnoughtSacrificeCost(this);
public class PhyrexianTribute extends CardImpl {
public PhyrexianTribute(UUID ownerId) {
public PhyrexianTribute(final PhyrexianTribute card) {
public PhyrexianTribute copy() {return new PhyrexianTribute(this);
public class PoliticalTrickery extends CardImpl {
public PoliticalTrickery(UUID ownerId) {
public PoliticalTrickery(final PoliticalTrickery card) {
public PoliticalTrickery copy() {return new PoliticalTrickery(this);
public class PsychicTransfer extends CardImpl {
public PsychicTransfer(UUID ownerId) {
public PsychicTransfer(final PsychicTransfer card) {
public PsychicTransfer copy() {return new PsychicTransfer(this);
public PsychicTransferEffect() {
public PsychicTransferEffect(final PsychicTransferEffect effect) {
public PsychicTransferEffect copy() {return new PsychicTransferEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return false;return false;return true;return false;
public class QuirionElves extends CardImpl {
public QuirionElves(UUID ownerId) {
public QuirionElves(final QuirionElves card) {
public QuirionElves copy() {return new QuirionElves(this);
class QuirionElvesManaEffect extends ManaEffect {
public QuirionElvesManaEffect() {
public QuirionElvesManaEffect(final QuirionElvesManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public Mana getMana(Game game, Ability source) {return new Mana(ColoredManaSymbol.lookup(color.toString().charAt(0)));return null;
public QuirionElvesManaEffect copy() {return new QuirionElvesManaEffect(this);
public class RadiantEssence extends CardImpl {
public RadiantEssence(UUID ownerId) {
public RadiantEssence(final RadiantEssence card) {
public RadiantEssence copy() {return new RadiantEssence(this);
public class RagingSpirit extends CardImpl {
public RagingSpirit(UUID ownerId) {
public RagingSpirit(final RagingSpirit card) {
public RagingSpirit copy() {return new RagingSpirit(this);
public class RashidaScalebane extends CardImpl {
public RashidaScalebane(UUID ownerId) {
public RashidaScalebane(final RashidaScalebane card) {
public RashidaScalebane copy() {return new RashidaScalebane(this);
public class RealityRipple extends CardImpl {
public RealityRipple(UUID ownerId) {
public RealityRipple(final RealityRipple card) {
public RealityRipple copy() {return new RealityRipple(this);
public class RestlessDead extends CardImpl {
public RestlessDead(UUID ownerId) {
public RestlessDead(final RestlessDead card) {
public RestlessDead copy() {return new RestlessDead(this);
public class RitualOfSteel extends CardImpl {
public RitualOfSteel(UUID ownerId) {
public RitualOfSteel(final RitualOfSteel card) {
public RitualOfSteel copy() {return new RitualOfSteel(this);
public class RockBasilisk extends CardImpl {
public RockBasilisk(UUID ownerId) {
public RockBasilisk(final RockBasilisk card) {
public RockBasilisk copy() {return new RockBasilisk(this);
public class RockyTarPit extends CardImpl {
public RockyTarPit(UUID ownerId) {
public RockyTarPit(final RockyTarPit card) {
public RockyTarPit copy() {return new RockyTarPit(this);
public class SabertoothCobra extends CardImpl {
public SabertoothCobra(UUID ownerId) {
public SabertoothCobra(final SabertoothCobra card) {
public SabertoothCobra copy() {return new SabertoothCobra(this);
public class SacredMesa extends CardImpl {
public SacredMesa(UUID ownerId) {
public SacredMesa(final SacredMesa card) {
public SacredMesa copy() {return new SacredMesa(this);
public class SandbarCrocodile extends CardImpl {
public SandbarCrocodile(UUID ownerId) {
public SandbarCrocodile(final SandbarCrocodile card) {
public SandbarCrocodile copy() {return new SandbarCrocodile(this);
public class SeaScryer extends CardImpl {
public SeaScryer(UUID ownerId) {
public SeaScryer(final SeaScryer card) {
public SeaScryer copy() {return new SeaScryer(this);
public class SeedlingCharm extends CardImpl {
public SeedlingCharm(UUID ownerId) {
public SeedlingCharm(final SeedlingCharm card) {
public SeedlingCharm copy() {return new SeedlingCharm(this);
public class SereneHeart extends CardImpl {
public SereneHeart(UUID ownerId) {
public SereneHeart(final SereneHeart card) {
public SereneHeart copy() {return new SereneHeart(this);
public class SewerRats extends CardImpl {
public SewerRats(UUID ownerId) {
public SewerRats(final SewerRats card) {
public SewerRats copy() {return new SewerRats(this);return new ShadowGuildmage(this);
public class ShallowGrave extends CardImpl {
public ShallowGrave(UUID ownerId) {
public ShallowGrave(final ShallowGrave card) {
public ShallowGrave copy() {return new ShallowGrave(this);
class ShallowGraveEffect extends OneShotEffect {
public ShallowGraveEffect() {
public ShallowGraveEffect(final ShallowGraveEffect effect) {
public ShallowGraveEffect copy() {return new ShallowGraveEffect(this);
public boolean apply(Game game, Ability source) {Permanent returnedCreature = game.getPermanent(lastCreatureCard.getId());if (returnedCreature != null) {FixedTarget fixedTarget = new FixedTarget(returnedCreature, game);return true;return false;
public class ShaperGuildmage extends CardImpl {
public ShaperGuildmage(UUID ownerId) {
public ShaperGuildmage(final ShaperGuildmage card) {
public ShaperGuildmage copy() {return new ShaperGuildmage(this);
public class Shimmer extends CardImpl {
public Shimmer(UUID ownerId) {
public Shimmer(final Shimmer card) {
public Shimmer copy() {return new Shimmer(this);
public class SidarJabari extends CardImpl {
public SidarJabari(UUID ownerId) {
public SidarJabari(final SidarJabari card) {
public void adjustTargets(Ability ability, Game game) {
public SidarJabari copy() {return new SidarJabari(this);
public class SkulkingGhost extends CardImpl {
public SkulkingGhost(UUID ownerId) {
public SkulkingGhost(final SkulkingGhost card) {
public SkulkingGhost copy() {return new SkulkingGhost(this);
public class Soar extends CardImpl {
public Soar(UUID ownerId) {
public Soar(final Soar card) {
public Soar copy() {return new Soar(this);
public class SoulRend extends CardImpl {
public SoulRend(UUID ownerId) {
public SoulRend(final SoulRend card) {
public SoulRend copy() {return new SoulRend(this);
class SoulRendEffect extends OneShotEffect {
SoulRendEffect() {
SoulRendEffect(final SoulRendEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public SoulRendEffect copy() {return new SoulRendEffect(this);
public class SpiritOfTheNight extends CardImpl {
public SpiritOfTheNight(UUID ownerId) {
public SpiritOfTheNight(final SpiritOfTheNight card) {
public SpiritOfTheNight copy() {return new SpiritOfTheNight(this);
public class TalruumMinotaur extends CardImpl {
public TalruumMinotaur(UUID ownerId) {
public TalruumMinotaur(final TalruumMinotaur card) {
public TalruumMinotaur copy() {return new TalruumMinotaur(this);
public class Taniwha extends CardImpl {
public Taniwha(UUID ownerId) {
public Taniwha(final Taniwha card) {
public Taniwha copy() {return new Taniwha(this);
class TaniwhaEffect extends OneShotEffect {
public TaniwhaEffect() {
public TaniwhaEffect(final TaniwhaEffect effect) {
public TaniwhaEffect copy() {return new TaniwhaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TeekasDragon extends CardImpl {
public TeekasDragon(UUID ownerId) {
public TeekasDragon(final TeekasDragon card) {
public TeekasDragon copy() {return new TeekasDragon(this);
public class TeferisCurse extends CardImpl {
public TeferisCurse(UUID ownerId) {
public TeferisCurse(final TeferisCurse card) {
public TeferisCurse copy() {return new TeferisCurse(this);
public class TeferisDrake extends CardImpl {
public TeferisDrake(UUID ownerId) {
public TeferisDrake(final TeferisDrake card) {
public TeferisDrake copy() {return new TeferisDrake(this);
public class Thirst extends CardImpl {
public Thirst(UUID ownerId) {
public Thirst(final Thirst card) {
public Thirst copy() {return new Thirst(this);
public class TidalWave extends CardImpl {
public TidalWave(UUID ownerId) {
public TidalWave(final TidalWave card) {
public TidalWave copy() {return new TidalWave(this);
class TidalWaveEffect extends OneShotEffect {
public TidalWaveEffect() {
public TidalWaveEffect(TidalWaveEffect effect) {
public TidalWaveEffect copy() {return new TidalWaveEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class WallToken extends Token {
WallToken() {
public class TranquilDomain extends CardImpl {
public TranquilDomain(UUID ownerId) {
public TranquilDomain(final TranquilDomain card) {
public TranquilDomain copy() {return new TranquilDomain(this);
public class UnfulfilledDesires extends CardImpl {
public UnfulfilledDesires(UUID ownerId) {
public UnfulfilledDesires(final UnfulfilledDesires card) {
public UnfulfilledDesires copy() {return new UnfulfilledDesires(this);
public class UnseenWalker extends CardImpl {
public UnseenWalker(UUID ownerId) {
public UnseenWalker(final UnseenWalker card) {
public UnseenWalker copy() {return new UnseenWalker(this);
public class UnyaroBeeSting extends CardImpl {
public UnyaroBeeSting(UUID ownerId) {
public UnyaroBeeSting(final UnyaroBeeSting card) {
public UnyaroBeeSting copy() {return new UnyaroBeeSting(this);return new UnyaroGriffin(this);
public class VaporousDjinn extends CardImpl {
public VaporousDjinn(UUID ownerId) {
public VaporousDjinn(final VaporousDjinn card) {
public VaporousDjinn copy() {return new VaporousDjinn(this);
class VaporousDjinnEffect extends OneShotEffect {
public VaporousDjinnEffect() {
public VaporousDjinnEffect(final VaporousDjinnEffect effect) {
public VaporousDjinnEffect copy() {return new VaporousDjinnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ViashinoWarrior extends CardImpl {
public ViashinoWarrior(UUID ownerId) {
public ViashinoWarrior(final ViashinoWarrior card) {
public ViashinoWarrior copy() {return new ViashinoWarrior(this);
public class VigilantMartyr extends CardImpl {
public VigilantMartyr(UUID ownerId) {
public VigilantMartyr(final VigilantMartyr card) {
public VigilantMartyr copy() {return new VigilantMartyr(this);
public class VillageElder extends CardImpl {
public VillageElder(UUID ownerId) {
public VillageElder(final VillageElder card) {
public VillageElder copy() {return new VillageElder(this);
public class VitalizingCascade extends CardImpl {
public VitalizingCascade(UUID ownerId) {
public VitalizingCascade(final VitalizingCascade card) {
public VitalizingCascade copy() {return new VitalizingCascade(this);
class VitalizingCascadeValue extends ManacostVariableValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return super.calculate(game, sourceAbility, effect) + 3;
public VitalizingCascadeValue copy() {return new VitalizingCascadeValue();
public String toString() {return "X plus 3";
public class WaitingInTheWeeds extends CardImpl {
public WaitingInTheWeeds(UUID ownerId) {
public WaitingInTheWeeds(final WaitingInTheWeeds card) {
public WaitingInTheWeeds copy() {return new WaitingInTheWeeds(this);
class WaitingInTheWeedsEffect extends OneShotEffect {
public WaitingInTheWeedsEffect() {
public WaitingInTheWeedsEffect(final WaitingInTheWeedsEffect effect) {
public WaitingInTheWeedsEffect copy() {return new WaitingInTheWeedsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class CatToken extends Token {
public CatToken() {
public class WardOfLights extends CardImpl {
public WardOfLights(UUID ownerId) {
public WardOfLights(final WardOfLights card) {
public WardOfLights copy() {return new WardOfLights(this);
public class WildElephant extends CardImpl {
public WildElephant(UUID ownerId) {
public WildElephant(final WildElephant card) {
public WildElephant copy() {return new WildElephant(this);
public class WildfireEmissary extends CardImpl {
public WildfireEmissary(UUID ownerId) {
public WildfireEmissary(final WildfireEmissary card) {
public WildfireEmissary copy() {return new WildfireEmissary(this);
public class WindreaperFalcon extends CardImpl {
public WindreaperFalcon(UUID ownerId) {
public WindreaperFalcon(final WindreaperFalcon card) {
public WindreaperFalcon copy() {return new WindreaperFalcon(this);
public class WitheringBoon extends CardImpl {
public WitheringBoon(UUID ownerId) {
public WitheringBoon(final WitheringBoon card) {
public WitheringBoon copy() {return new WitheringBoon(this);
public class ZhalfirinKnight extends CardImpl {
public ZhalfirinKnight(UUID ownerId) {
public ZhalfirinKnight(final ZhalfirinKnight card) {
public ZhalfirinKnight copy() {return new ZhalfirinKnight(this);
public class ZirilanOfTheClaw extends CardImpl {
public ZirilanOfTheClaw(UUID ownerId) {
public ZirilanOfTheClaw(final ZirilanOfTheClaw card) {
public ZirilanOfTheClaw copy() {return new ZirilanOfTheClaw(this);
class ZirilanOfTheClawEffect extends OneShotEffect {
public ZirilanOfTheClawEffect() {
public ZirilanOfTheClawEffect(final ZirilanOfTheClawEffect effect) {
public ZirilanOfTheClawEffect copy() {return new ZirilanOfTheClawEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ZuberiGoldenFeather extends CardImpl {
public ZuberiGoldenFeather(UUID ownerId) {
public ZuberiGoldenFeather(final ZuberiGoldenFeather card) {
public ZuberiGoldenFeather copy() {return new ZuberiGoldenFeather(this);
public class AlphaMyr extends CardImpl {
public AlphaMyr(UUID ownerId) {
public AlphaMyr(final AlphaMyr card) {
public AlphaMyr copy() {return new AlphaMyr(this);
public class AltarsLight extends CardImpl {
public AltarsLight(UUID ownerId) {
public AltarsLight(final AltarsLight card) {
public AltarsLight copy() {return new AltarsLight(this);
public class AncientDen extends CardImpl {
public AncientDen (UUID ownerId) {
public AncientDen (final AncientDen card) {
public AncientDen copy() {return new AncientDen(this);
public class Annul extends CardImpl {
public Annul(UUID ownerId) {
public Annul(final Annul card) {
public Annul copy() {return new Annul(this);
public class ArcSlogger extends CardImpl {
public ArcSlogger(UUID ownerId) {
public ArcSlogger(final ArcSlogger card) {
public ArcSlogger copy() {return new ArcSlogger(this);
public class Arrest extends CardImpl {
public Arrest (UUID ownerId) {
public Arrest (final Arrest card) {
public Arrest copy() {return new Arrest(this);
public class AssertAuthority extends CardImpl {
public AssertAuthority(UUID ownerId) {
public AssertAuthority(final AssertAuthority card) {
public AssertAuthority copy() {return new AssertAuthority(this);
public class Atog extends CardImpl {
public Atog(UUID ownerId) {
public Atog(final Atog card) {
public Atog copy() {return new Atog(this);
public class AuriokBladewarden extends CardImpl {
public AuriokBladewarden(UUID ownerId) {
public AuriokBladewarden(final AuriokBladewarden card) {
public AuriokBladewarden copy() {return new AuriokBladewarden(this);
public class AuriokSteelshaper extends CardImpl {
public AuriokSteelshaper(UUID ownerId) {
public AuriokSteelshaper(final AuriokSteelshaper card) {
public AuriokSteelshaper copy() {return new AuriokSteelshaper(this);
public AuriokSteelshaperCostReductionEffect() {
public AuriokSteelshaperCostReductionEffect(AuriokSteelshaperCostReductionEffect effect) {
public AuriokSteelshaperCostReductionEffect copy() {return new AuriokSteelshaperCostReductionEffect(this);return true;return abilityToModify.getControllerId().equals(source.getControllerId()) &&
public class AuriokTransfixer extends CardImpl {
public AuriokTransfixer(UUID ownerId) {
public AuriokTransfixer(final AuriokTransfixer card) {
public AuriokTransfixer copy() {return new AuriokTransfixer(this);
public class BansheesBlade extends CardImpl {
public BansheesBlade(UUID ownerId) {
public BansheesBlade(final BansheesBlade card) {
public BansheesBlade copy() {return new BansheesBlade(this);
class BansheesBladeAbility extends TriggeredAbilityImpl {
public BansheesBladeAbility() {
public BansheesBladeAbility(final BansheesBladeAbility ability) {
public BansheesBladeAbility copy() {return new BansheesBladeAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature deals combat damage, put a charge counter on {this}.";
public class Battlegrowth extends CardImpl {
public Battlegrowth(UUID ownerId) {
public Battlegrowth(final Battlegrowth card) {
public Battlegrowth copy() {return new Battlegrowth(this);
public class BetrayalOfFlesh extends CardImpl {
public BetrayalOfFlesh(UUID ownerId) {
public BetrayalOfFlesh(final BetrayalOfFlesh card) {
public BetrayalOfFlesh copy() {return new BetrayalOfFlesh(this);
public class BlinkmothUrn extends CardImpl {
public BlinkmothUrn(UUID ownerId) {
public BlinkmothUrn(final BlinkmothUrn card) {
public BlinkmothUrn copy() {return new BlinkmothUrn(this);
class BlinkmothUrnEffect extends OneShotEffect {
public BlinkmothUrnEffect() {
public BlinkmothUrnEffect(final BlinkmothUrnEffect effect) {
public BlinkmothUrnEffect copy() {return new BlinkmothUrnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Bonesplitter extends CardImpl {
public Bonesplitter(UUID ownerId) {
public Bonesplitter(final Bonesplitter card) {
public Bonesplitter copy() {return new Bonesplitter(this);
public class Cathodion extends CardImpl {
public Cathodion(UUID ownerId) {
public Cathodion(final Cathodion card) {
public Cathodion copy() {return new Cathodion(this);
public class ChaliceOfTheVoid extends CardImpl {
public ChaliceOfTheVoid(UUID ownerId) {
public ChaliceOfTheVoid(final ChaliceOfTheVoid card) {
public ChaliceOfTheVoid copy() {return new ChaliceOfTheVoid(this);
class ChaliceOfTheVoidTriggeredAbility extends TriggeredAbilityImpl {
public ChaliceOfTheVoidTriggeredAbility() {
public ChaliceOfTheVoidTriggeredAbility(final ChaliceOfTheVoidTriggeredAbility abiltity) {
public ChaliceOfTheVoidTriggeredAbility copy() {return new ChaliceOfTheVoidTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a spell with converted mana cost equal to the number of charge counters on {this}, counter that spell.";
class CounterEffect extends OneShotEffect {
public CounterEffect() {
public CounterEffect(final CounterEffect effect) {
public CounterEffect copy() {return new CounterEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(this.getTargetPointer().getFirst(game, source), source.getSourceId(), game);
public class ChromaticSphere extends CardImpl {
public ChromaticSphere(UUID ownerId) {
public ChromaticSphere(final ChromaticSphere card) {
public ChromaticSphere copy() {return new ChromaticSphere(this);
public class ChromeMox extends CardImpl {
public ChromeMox(UUID ownerId) {
public ChromeMox(final ChromeMox card) {
public ChromeMox copy() {return new ChromeMox(this);
class ChromeMoxEffect extends OneShotEffect {
public ChromeMoxEffect() {
public ChromeMoxEffect(ChromeMoxEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ChromeMoxEffect copy() {return new ChromeMoxEffect(this);
class ChromeMoxManaEffect extends ManaEffect {
ChromeMoxManaEffect() {
ChromeMoxManaEffect(ChromeMoxManaEffect effect) {
public ChromeMoxManaEffect copy() {return new ChromeMoxManaEffect(this);
public boolean apply(Game game, Ability source) {return true;
public Mana getMana(Game game, Ability source) {return null;
public class ClockworkBeetle extends CardImpl {
public ClockworkBeetle(UUID ownerId) {
public ClockworkBeetle(final ClockworkBeetle card) {
public ClockworkBeetle copy() {return new ClockworkBeetle(this);
class ClockworkBeetleEffect extends OneShotEffect {
ClockworkBeetleEffect() {
ClockworkBeetleEffect(final ClockworkBeetleEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public ClockworkBeetleEffect copy() {return new ClockworkBeetleEffect(this);return new ClockworkCondor(this);
public boolean apply(Game game, Ability source) {return false;return new ClockworkCondorEffect(this);
public class ClockworkDragon extends CardImpl {
public ClockworkDragon(UUID ownerId) {
public ClockworkDragon(final ClockworkDragon card) {
public ClockworkDragon copy() {return new ClockworkDragon(this);
class ClockworkDragonEffect extends OneShotEffect {
ClockworkDragonEffect() {
ClockworkDragonEffect(final ClockworkDragonEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public ClockworkDragonEffect copy() {return new ClockworkDragonEffect(this);
public class ClockworkVorrac extends CardImpl {
public ClockworkVorrac(UUID ownerId) {
public ClockworkVorrac(final ClockworkVorrac card) {
public ClockworkVorrac copy() {return new ClockworkVorrac(this);
class ClockworkVorracEffect extends OneShotEffect {
ClockworkVorracEffect() {
ClockworkVorracEffect(final ClockworkVorracEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public ClockworkVorracEffect copy() {return new ClockworkVorracEffect(this);
public class Cloudpost extends CardImpl {
public Cloudpost(UUID ownerId) {
public Cloudpost(final Cloudpost card) {
public Cloudpost copy() {return new Cloudpost(this);
public class CobaltGolem extends CardImpl {
public CobaltGolem(UUID ownerId) {
public CobaltGolem(final CobaltGolem card) {
public CobaltGolem copy() {return new CobaltGolem(this);
public class CopperhoofVorrac extends CardImpl {
public CopperhoofVorrac(UUID ownerId) {
public CopperhoofVorrac(final CopperhoofVorrac card) {
public CopperhoofVorrac copy() {return new CopperhoofVorrac(this);
public class CopperMyr extends CardImpl {
public CopperMyr (UUID ownerId) {
public CopperMyr (final CopperMyr card) {
public CopperMyr copy() {return new CopperMyr(this);
public class CrystalShard extends CardImpl {
public CrystalShard(UUID ownerId) {
public CrystalShard(final CrystalShard card) {
public CrystalShard copy() {return new CrystalShard(this);
class CrystalShardEffect extends OneShotEffect {
public CrystalShardEffect(Cost cost) {
public CrystalShardEffect(final CrystalShardEffect effect) {
public CrystalShardEffect copy() {return new CrystalShardEffect(this);
public boolean apply(Game game, Ability source) {final StringBuilder sb = new StringBuilder("Pay {1}? (Otherwise ").append(targetCreature.getName()).append(" will be returned to its owner's hand)");return true;return false;
public class DampingMatrix extends CardImpl {
public DampingMatrix(UUID ownerId) {
public DampingMatrix(final DampingMatrix card) {
public DampingMatrix copy() {return new DampingMatrix(this);
class DampingMatrixEffect extends ReplacementEffectImpl {
public DampingMatrixEffect() {
public DampingMatrixEffect(final DampingMatrixEffect effect) {
public DampingMatrixEffect copy() {return new DampingMatrixEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ACTIVATE_ABILITY;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class Deconstruct extends CardImpl {
public Deconstruct(UUID ownerId) {
public Deconstruct(final Deconstruct card) {
public Deconstruct copy() {return new Deconstruct(this);
public class DiscipleOfTheVault extends CardImpl {
public DiscipleOfTheVault(UUID ownerId) {
public DiscipleOfTheVault(final DiscipleOfTheVault card) {
public DiscipleOfTheVault copy() {return new DiscipleOfTheVault(this);
public class Domineer extends CardImpl {
public Domineer(UUID ownerId) {
public Domineer(final Domineer card) {
public Domineer copy() {return new Domineer(this);
public class DrossHarvester extends CardImpl {
public DrossHarvester(UUID ownerId) {
public DrossHarvester(final DrossHarvester card) {
public DrossHarvester copy() {return new DrossHarvester(this);
public class DrossProwler extends CardImpl {
public DrossProwler(UUID ownerId) {
public DrossProwler(final DrossProwler card) {
public DrossProwler copy() {return new DrossProwler(this);
public class DrossScorpion extends CardImpl {
public DrossScorpion(UUID ownerId) {
public DrossScorpion(final DrossScorpion card) {
public DrossScorpion copy() {return new DrossScorpion(this);
public class Duplicant extends CardImpl {
public Duplicant(UUID ownerId) {
public Duplicant(final Duplicant card) {
public Duplicant copy() {return new Duplicant(this);
class ExileTargetEffect extends OneShotEffect {
public ExileTargetEffect() {
public ExileTargetEffect(final ExileTargetEffect effect) {
public ExileTargetEffect copy() {return new ExileTargetEffect(this);
public boolean apply(Game game, Ability source) {return permanent.moveToExile(null, null, source.getSourceId(), game);return false;
public String getText(Mode mode) {return "you may exile target nontoken creature";
class DuplicantContinuousEffect extends ContinuousEffectImpl {
public DuplicantContinuousEffect() {
public DuplicantContinuousEffect(final DuplicantContinuousEffect effect) {
public DuplicantContinuousEffect copy() {return new DuplicantContinuousEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {
{return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.TypeChangingEffects_4;
public class Duskworker extends CardImpl {
public Duskworker(UUID ownerId) {
public Duskworker(final Duskworker card) {
public Duskworker copy() {return new Duskworker(this);return new ElectrostaticBolt(this);
public int calculate(Game game, Ability source, Effect effect) {return 4;return 2;return 0;return new ElectrostaticBoltDamageValue();
public String getMessage() {return "";
public class ElfReplica extends CardImpl {
public ElfReplica(UUID ownerId) {
public ElfReplica(final ElfReplica card) {
public ElfReplica copy() {return new ElfReplica(this);
public class EmpyrialPlate extends CardImpl {
public EmpyrialPlate(UUID ownerId) {
public EmpyrialPlate(final EmpyrialPlate card) {
public EmpyrialPlate copy() {return new EmpyrialPlate(this);
public class ExtraplanarLens extends CardImpl {
public ExtraplanarLens(UUID ownerId) {
public ExtraplanarLens(final ExtraplanarLens card) {
public ExtraplanarLens copy() {return new ExtraplanarLens(this);
class ExtraplanarLensImprintEffect extends OneShotEffect {
public ExtraplanarLensImprintEffect() {
public ExtraplanarLensImprintEffect(ExtraplanarLensImprintEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ExtraplanarLensImprintEffect copy() {return new ExtraplanarLensImprintEffect(this);
class ExtraplanarLensTriggeredAbility extends TriggeredManaAbility {
public ExtraplanarLensTriggeredAbility() {
public ExtraplanarLensTriggeredAbility(final ExtraplanarLensTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return new StringBuilder("Whenever a land with the same name as the exiled card is tapped for mana, ").append(super.getRule()).toString();
public ExtraplanarLensTriggeredAbility copy() {return new ExtraplanarLensTriggeredAbility(this);
public class FangrenHunter extends CardImpl {
public FangrenHunter(UUID ownerId) {
public FangrenHunter(final FangrenHunter card) {
public FangrenHunter copy() {return new FangrenHunter(this);
public class FarsightMask extends CardImpl {
public FarsightMask(UUID ownerId) {
public FarsightMask(final FarsightMask card) {
public FarsightMask copy() {return new FarsightMask(this);
class FarsightMaskTriggeredAbility extends TriggeredAbilityImpl {
public FarsightMaskTriggeredAbility() {
public FarsightMaskTriggeredAbility(final FarsightMaskTriggeredAbility ability) {
public FarsightMaskTriggeredAbility copy() {return new FarsightMaskTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGED_PLAYER);
public boolean checkInterveningIfClause(Game game) {return permanent != null && !permanent.isTapped();
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a source an opponent controls deals damage to you, if {this} is untapped, you may draw a card.";
public class Fatespinner extends CardImpl {
public Fatespinner(UUID ownerId) {
public Fatespinner(final Fatespinner card) {
public Fatespinner copy() {return new Fatespinner(this);
class FatespinnerChooseEffect extends OneShotEffect {
public FatespinnerChooseEffect() {
public FatespinnerChooseEffect(final FatespinnerChooseEffect effect) {
public FatespinnerChooseEffect copy() {return new FatespinnerChooseEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
class FatespinnerSkipEffect extends ReplacementEffectImpl {
public FatespinnerSkipEffect(String phase) {
public FatespinnerSkipEffect(final FatespinnerSkipEffect effect) {
public FatespinnerSkipEffect copy() {return new FatespinnerSkipEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return ((phase.equals("Draw step") && type == EventType.DRAW_STEP)
public boolean checksEventType(GameEvent event, Game game) {return (type == EventType.DRAW_STEP || type == EventType.PRECOMBAT_MAIN_PHASE
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class FieryGambit extends CardImpl {
public FieryGambit(UUID ownerId) {
public FieryGambit(final FieryGambit card) {
public FieryGambit copy() {return new FieryGambit(this);
class FieryGambitEffect extends OneShotEffect {
public FieryGambitEffect() {
public FieryGambitEffect(final FieryGambitEffect effect) {
public FieryGambitEffect copy() {return new FieryGambitEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ForgeArmor extends CardImpl {
public ForgeArmor(UUID ownerId) {
public ForgeArmor(final ForgeArmor card) {
public ForgeArmor copy() {return new ForgeArmor(this);
public class GalvanicKey extends CardImpl {
public GalvanicKey(UUID ownerId) {
public GalvanicKey(final GalvanicKey card) {
public GalvanicKey copy() {return new GalvanicKey(this);
public class Glimmervoid extends CardImpl {
public Glimmervoid(UUID ownerId) {
public Glimmervoid(final Glimmervoid card) {
public Glimmervoid copy() {return new Glimmervoid(this);
class GlimmervoidTriggeredAbility extends TriggeredAbilityImpl {
GlimmervoidTriggeredAbility() {
GlimmervoidTriggeredAbility(final GlimmervoidTriggeredAbility ability) {
public GlimmervoidTriggeredAbility copy() {return new GlimmervoidTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of the end step, if you control no artifacts, sacrifice {this}.";
public class GlissaSunseeker extends CardImpl {
public GlissaSunseeker(UUID ownerId) {
public GlissaSunseeker(final GlissaSunseeker card) {
public GlissaSunseeker copy() {return new GlissaSunseeker(this);
class GlissaSunseekerEffect extends OneShotEffect {
public GlissaSunseekerEffect() {
public GlissaSunseekerEffect(final GlissaSunseekerEffect effect) {
public GlissaSunseekerEffect copy() {return new GlissaSunseekerEffect(this);
public boolean apply(Game game, Ability source) {return permanent.destroy(source.getSourceId(), game, false);return false;
public class GoblinCharbelcher extends CardImpl {
public GoblinCharbelcher(UUID ownerId) {
public GoblinCharbelcher(final GoblinCharbelcher card) {
public GoblinCharbelcher copy() {return new GoblinCharbelcher(this);
class GoblinCharbelcherEffect extends OneShotEffect {
public GoblinCharbelcherEffect() {
public GoblinCharbelcherEffect(final GoblinCharbelcherEffect effect) {
public GoblinCharbelcherEffect copy() {return new GoblinCharbelcherEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class GoblinStriker extends CardImpl {
public GoblinStriker(UUID ownerId) {
public GoblinStriker(final GoblinStriker card) {
public GoblinStriker copy() {return new GoblinStriker(this);
public class GoblinWarWagon extends CardImpl {
public GoblinWarWagon(UUID ownerId) {
public GoblinWarWagon(final GoblinWarWagon card) {
public GoblinWarWagon copy() {return new GoblinWarWagon(this);
public class GoldMyr extends CardImpl {
public GoldMyr (UUID ownerId) {
public GoldMyr (final GoldMyr card) {
public GoldMyr copy() {return new GoldMyr(this);
public class GolemSkinGauntlets extends CardImpl {
public GolemSkinGauntlets(UUID ownerId) {
public GolemSkinGauntlets(final GolemSkinGauntlets card) {
public GolemSkinGauntlets copy() {return new GolemSkinGauntlets(this);
class GolemSkinGauntletsAttachedCount implements DynamicValue {
public GolemSkinGauntletsAttachedCount() {
public GolemSkinGauntletsAttachedCount(final GolemSkinGauntletsAttachedCount dynamicValue) {
public int calculate(Game game, Ability source, Effect effect) {return count;
public DynamicValue copy() {return new GolemSkinGauntletsAttachedCount(this);
public String toString() {return "1";
public String getMessage() {return "Equipment attached to it";
public class GrabTheReins extends CardImpl {
public GrabTheReins(UUID ownerId) {
public GrabTheReins(final GrabTheReins card) {
public GrabTheReins copy() {return new GrabTheReins(this);
class GrabTheReinsEffect extends OneShotEffect {
public GrabTheReinsEffect() {
public GrabTheReinsEffect(final GrabTheReinsEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;return true;return true;return true;return false;
public GrabTheReinsEffect copy() {return new GrabTheReinsEffect(this);
public class GraniteShard extends CardImpl {
public GraniteShard(UUID ownerId) {
public GraniteShard(final GraniteShard card) {
public GraniteShard copy() {return new GraniteShard(this);
public class GreatFurnace extends CardImpl {
public GreatFurnace (UUID ownerId) {
public GreatFurnace (final GreatFurnace card) {
public GreatFurnace copy() {return new GreatFurnace(this);
public class GridMonitor extends CardImpl {
public GridMonitor(UUID ownerId) {
public GridMonitor(final GridMonitor card) {
public GridMonitor copy() {return new GridMonitor(this);
public GridMonitorEffect() {
public GridMonitorEffect(final GridMonitorEffect effect) {
public GridMonitorEffect copy() {return new GridMonitorEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class Groffskithur extends CardImpl {
public Groffskithur(UUID ownerId) {
public Groffskithur(final Groffskithur card) {
public Groffskithur copy() {return new Groffskithur(this);
public class HeartwoodShard extends CardImpl {
public HeartwoodShard(UUID ownerId) {
public HeartwoodShard(final HeartwoodShard card) {
public HeartwoodShard copy() {return new HeartwoodShard(this);
public class HematiteGolem extends CardImpl {
public HematiteGolem(UUID ownerId) {
public HematiteGolem(final HematiteGolem card) {
public HematiteGolem copy() {return new HematiteGolem(this);
public class InciteWar extends CardImpl {
public InciteWar(UUID ownerId) {
public InciteWar(final InciteWar card) {
public InciteWar copy() {return new InciteWar(this);
class InciteWarMustAttackEffect extends OneShotEffect {
public InciteWarMustAttackEffect() {
public InciteWarMustAttackEffect(final InciteWarMustAttackEffect effect) {
public InciteWarMustAttackEffect copy() {return new InciteWarMustAttackEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class InertiaBubble extends CardImpl {
public InertiaBubble(UUID ownerId) {
public InertiaBubble(final InertiaBubble card) {
public InertiaBubble copy() {return new InertiaBubble(this);
public class IronMyr extends CardImpl {
public IronMyr (UUID ownerId) {
public IronMyr (final IronMyr card) {
public IronMyr copy() {return new IronMyr(this);
public class Irradiate extends CardImpl {
public Irradiate(UUID ownerId) {
public Irradiate(final Irradiate card) {
public Irradiate copy() {return new Irradiate(this);
public class IsochronScepter extends CardImpl {
public IsochronScepter(UUID ownerId) {
public IsochronScepter(final IsochronScepter card) {
public IsochronScepter copy() {return new IsochronScepter(this);
class IsochronScepterImprintEffect extends OneShotEffect {
public IsochronScepterImprintEffect() {
public IsochronScepterImprintEffect(IsochronScepterImprintEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public IsochronScepterImprintEffect copy() {return new IsochronScepterImprintEffect(this);
class IsochronScepterCopyEffect extends OneShotEffect {
public IsochronScepterCopyEffect() {
public IsochronScepterCopyEffect(final IsochronScepterCopyEffect effect) {
public IsochronScepterCopyEffect copy() {return new IsochronScepterCopyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JinxedChoker extends CardImpl {
public JinxedChoker(UUID ownerId) {
public JinxedChoker(final JinxedChoker card) {
public JinxedChoker copy() {return new JinxedChoker(this);
class JinxedChokerChangeControllerEffect extends ContinuousEffectImpl {
public JinxedChokerChangeControllerEffect() {
public JinxedChokerChangeControllerEffect(final JinxedChokerChangeControllerEffect effect) {
public JinxedChokerChangeControllerEffect copy() {return new JinxedChokerChangeControllerEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(source.getFirstTarget(), game);return false;
class JinxedChokerDynamicValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count;
public JinxedChokerDynamicValue copy() {return new JinxedChokerDynamicValue();
public String getMessage() {return "charge counter on it";
public String toString() {return "1";
class JinxedChokerCounterEffect extends OneShotEffect {
public JinxedChokerCounterEffect() {
public JinxedChokerCounterEffect(final JinxedChokerCounterEffect effect) {
public JinxedChokerCounterEffect copy() {return new JinxedChokerCounterEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.CHARGE.createInstance(), true).apply(game, source);return new RemoveCounterSourceEffect(CounterType.CHARGE.createInstance()).apply(game, source);return false;
public class JourneyOfDiscovery extends CardImpl {
public JourneyOfDiscovery(UUID ownerId) {
public JourneyOfDiscovery(final JourneyOfDiscovery card) {
public JourneyOfDiscovery copy() {return new JourneyOfDiscovery(this);
public class KrarksThumb extends CardImpl {
public KrarksThumb(UUID ownerId) {
public KrarksThumb(final KrarksThumb card) {
public KrarksThumb copy() {return new KrarksThumb(this);
class KrarksThumbEffect extends ReplacementEffectImpl {
KrarksThumbEffect() {
KrarksThumbEffect(final KrarksThumbEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.FLIP_COIN;
public boolean applies(GameEvent event, Ability source, Game game) {return source.getControllerId().equals(event.getPlayerId());
public boolean apply(Game game, Ability source) {return false;
public KrarksThumbEffect copy() {return new KrarksThumbEffect(this);
public class LeadenMyr extends CardImpl {
public LeadenMyr (UUID ownerId) {
public LeadenMyr (final LeadenMyr card) {
public LeadenMyr copy() {return new LeadenMyr(this);
public class LeoninAbunas extends CardImpl {
public LeoninAbunas(UUID ownerId) {
public LeoninAbunas(final LeoninAbunas card) {
public LeoninAbunas copy() {return new LeoninAbunas(this);
public class LeoninDenGuard extends CardImpl {
public LeoninDenGuard(UUID ownerId) {
public LeoninDenGuard(final LeoninDenGuard card) {
public LeoninDenGuard copy() {return new LeoninDenGuard(this);
public class LeoninElder extends CardImpl {
public LeoninElder(UUID ownerId) {
public LeoninElder(final LeoninElder card) {
public LeoninElder copy() {return new LeoninElder(this);
public class LeoninSkyhunter extends CardImpl {
public LeoninSkyhunter (UUID ownerId) {
public LeoninSkyhunter (final LeoninSkyhunter card) {
public LeoninSkyhunter copy() {return new LeoninSkyhunter(this);
public class LeoninSunStandard extends CardImpl {
public LeoninSunStandard(UUID ownerId) {
public LeoninSunStandard(final LeoninSunStandard card) {
public LeoninSunStandard copy() {return new LeoninSunStandard(this);
public class Leveler extends CardImpl {
public Leveler(UUID ownerId) {
public Leveler(final Leveler card) {
public Leveler copy() {return new Leveler(this);
class LevelerExileLibraryEffect extends OneShotEffect {
public LevelerExileLibraryEffect() {
public LevelerExileLibraryEffect copy() {return new LevelerExileLibraryEffect();
public boolean apply(Game game, Ability source) {return true;return false;return new LifesparkSpellbomb(this);
public class LightningGreaves extends CardImpl {
public LightningGreaves(UUID ownerId) {
public LightningGreaves(final LightningGreaves card) {
public LightningGreaves copy() {return new LightningGreaves(this);
public class LivingHive extends CardImpl {
public LivingHive(UUID ownerId) {
public LivingHive(final LivingHive card) {
public LivingHive copy() {return new LivingHive(this);
class LivingHiveEffect extends OneShotEffect {
public LivingHiveEffect() {
public LivingHiveEffect(final LivingHiveEffect effect) {
public LivingHiveEffect copy() {return new LivingHiveEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new InsectToken(), amount).apply(game, source);return true;return false;
public class LoomingHoverguard extends CardImpl {
public LoomingHoverguard(UUID ownerId) {
public LoomingHoverguard(final LoomingHoverguard card) {
public LoomingHoverguard copy() {return new LoomingHoverguard(this);return new LoxodonMender(this);return new LoxodonPunisher(this);
public class LumengridSentinel extends CardImpl {
public LumengridSentinel(UUID ownerId) {
public LumengridSentinel(final LumengridSentinel card) {
public LumengridSentinel copy() {return new LumengridSentinel(this);
public class LuminousAngel extends CardImpl {
public LuminousAngel(UUID ownerId) {
public LuminousAngel(final LuminousAngel card) {
public LuminousAngel copy() {return new LuminousAngel(this);
public class MalachiteGolem extends CardImpl {
public MalachiteGolem(UUID ownerId) {
public MalachiteGolem(final MalachiteGolem card) {
public MalachiteGolem copy() {return new MalachiteGolem(this);
public class MassHysteria extends CardImpl {
public MassHysteria(UUID ownerId) {
public MassHysteria(final MassHysteria card) {
public MassHysteria copy() {return new MassHysteria(this);
public class MindsEye extends CardImpl {
public MindsEye(UUID ownerId) {
public MindsEye(final MindsEye card) {
public MindsEye copy() {return new MindsEye(this);
public class MolderSlug extends CardImpl {
public MolderSlug(UUID ownerId) {
public MolderSlug(final MolderSlug card) {
public MolderSlug copy() {return new MolderSlug(this);
public class MoltenRain extends CardImpl {
public MoltenRain(UUID ownerId) {
public MoltenRain(final MoltenRain card) {
public MoltenRain copy() {return new MoltenRain(this);
class MoltenRainEffect extends OneShotEffect {
public MoltenRainEffect() {
public MoltenRainEffect(final MoltenRainEffect effect) {
public MoltenRainEffect copy() {return new MoltenRainEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MoriokScavenger extends CardImpl {
public MoriokScavenger(UUID ownerId) {
public MoriokScavenger(final MoriokScavenger card) {
public MoriokScavenger copy() {return new MoriokScavenger(this);
public class MyrAdapter extends CardImpl {
public MyrAdapter(UUID ownerId) {
public MyrAdapter(final MyrAdapter card) {
public MyrAdapter copy() {return new MyrAdapter(this);
public class MyrMindservant extends CardImpl {
public MyrMindservant(UUID ownerId) {
public MyrMindservant(final MyrMindservant card) {
public MyrMindservant copy() {return new MyrMindservant(this);
public class NecrogenMists extends CardImpl {
public NecrogenMists(UUID ownerId) {
public NecrogenMists(final NecrogenMists card) {
public NecrogenMists copy() {return new NecrogenMists(this);
public class NecrogenSpellbomb extends CardImpl {
public NecrogenSpellbomb(UUID ownerId) {
public NecrogenSpellbomb(final NecrogenSpellbomb card) {
public NecrogenSpellbomb copy() {return new NecrogenSpellbomb(this);
public class Needlebug extends CardImpl {
public Needlebug(UUID ownerId) {
public Needlebug(final Needlebug card) {
public Needlebug copy() {return new Needlebug(this);
public class NeurokFamiliar extends CardImpl {
public NeurokFamiliar(UUID ownerId) {
public NeurokFamiliar(final NeurokFamiliar card) {
public NeurokFamiliar copy() {return new NeurokFamiliar(this);
class NeurokFamiliarEffect extends OneShotEffect {
public NeurokFamiliarEffect() {
public NeurokFamiliarEffect(final NeurokFamiliarEffect effect) {
public NeurokFamiliarEffect copy() {return new NeurokFamiliarEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class NeurokHoversail extends CardImpl {
public NeurokHoversail(UUID ownerId) {
public NeurokHoversail(final NeurokHoversail card) {
public NeurokHoversail copy() {return new NeurokHoversail(this);
public class NeurokSpy extends CardImpl {
public NeurokSpy(UUID ownerId) {
public NeurokSpy(final NeurokSpy card) {
public NeurokSpy copy() {return new NeurokSpy(this);
public class NightmareLash extends CardImpl {
public NightmareLash(UUID ownerId) {
public NightmareLash(final NightmareLash card) {
public NightmareLash copy() {return new NightmareLash(this);
public class NimDevourer extends CardImpl {
public NimDevourer(UUID ownerId) {
public NimDevourer(final NimDevourer card) {
public NimDevourer copy() {return new NimDevourer(this);
class NimDevourerEffect extends OneShotEffect {
public NimDevourerEffect() {
public NimDevourerEffect(final NimDevourerEffect effect) {
public NimDevourerEffect copy() {return new NimDevourerEffect(this);
public boolean apply(Game game, Ability source) {return permanent.sacrifice(source.getSourceId(), game);return false;
public class NimLasher extends CardImpl {
public NimLasher(UUID ownerId) {
public NimLasher(final NimLasher card) {
public NimLasher copy() {return new NimLasher(this);
public class NimReplica extends CardImpl {
public NimReplica(UUID ownerId) {
public NimReplica(final NimReplica card) {
public NimReplica copy() {return new NimReplica(this);
public class NimShambler extends CardImpl {
public NimShambler(UUID ownerId) {
public NimShambler(final NimShambler card) {
public NimShambler copy() {return new NimShambler(this);
public class NimShrieker extends CardImpl {
public NimShrieker(UUID ownerId) {
public NimShrieker(final NimShrieker card) {
public NimShrieker copy() {return new NimShrieker(this);
 extends CardImpl {
(UUID ownerId) {
 card) {
 copy() {return new 
Effect extends OneShotEffect {
Effect() {
Effect effect) {
Effect copy() {return new 
public boolean apply(Game game, Ability source) {return game.getStack().counter(source.getFirstTarget(), source.getSourceId(), game);return true;return false;
public String getText(Mode mode) {return "Counter target spell unless its controller pays {1} for each artifact you control";
public class PearlShard extends CardImpl {
public PearlShard(UUID ownerId) {
public PearlShard(final PearlShard card) {
public PearlShard copy() {return new PearlShard(this);
public class PewterGolem extends CardImpl {
public PewterGolem(UUID ownerId) {
public PewterGolem(final PewterGolem card) {
public PewterGolem copy() {return new PewterGolem(this);
public class PlatedSlagwurm extends CardImpl {
public PlatedSlagwurm(UUID ownerId) {
public PlatedSlagwurm(final PlatedSlagwurm card) {
public PlatedSlagwurm copy() {return new PlatedSlagwurm(this);
public class PowerConduit extends CardImpl {
public PowerConduit(UUID ownerId) {
public PowerConduit(final PowerConduit card) {
public PowerConduit copy() {return new PowerConduit(this);
public class PredatorsStrike extends CardImpl {
public PredatorsStrike(UUID ownerId) {
public PredatorsStrike(final PredatorsStrike card) {
public PredatorsStrike copy() {return new PredatorsStrike(this);
public class ProteusStaff extends CardImpl {
public ProteusStaff(UUID ownerId) {
public ProteusStaff(final ProteusStaff card) {
public ProteusStaff copy() {return new ProteusStaff(this);
class ProteusStaffEffect extends OneShotEffect {
ProteusStaffEffect() {
ProteusStaffEffect(final ProteusStaffEffect effect) {
public ProteusStaffEffect copy() {return new ProteusStaffEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PsychicMembrane extends CardImpl {
public PsychicMembrane(UUID ownerId) {
public PsychicMembrane(final PsychicMembrane card) {
public PsychicMembrane copy() {return new PsychicMembrane(this);
public class PsychogenicProbe extends CardImpl {
public PsychogenicProbe(UUID ownerId) {
public PsychogenicProbe(final PsychogenicProbe card) {
public PsychogenicProbe copy() {return new PsychogenicProbe(this);
class PsychogenicProbeTriggeredAbility extends TriggeredAbilityImpl {
PsychogenicProbeTriggeredAbility() {
PsychogenicProbeTriggeredAbility(final PsychogenicProbeTriggeredAbility ability) {
public PsychogenicProbeTriggeredAbility copy() {return new PsychogenicProbeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(EventType.LIBRARY_SHUFFLED);
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "Whenever a spell or ability causes a player to shuffle his or her library, Psychogenic Probe deals 2 damage to him or her.";
public class PyriteSpellbomb extends CardImpl {
public PyriteSpellbomb(UUID ownerId) {
public PyriteSpellbomb(final PyriteSpellbomb card) {
public PyriteSpellbomb copy() {return new PyriteSpellbomb(this);
public class RaiseTheAlarm extends CardImpl {
public RaiseTheAlarm (UUID ownerId) {
public RaiseTheAlarm (final RaiseTheAlarm card) {
public RaiseTheAlarm copy() {return new RaiseTheAlarm(this);
public class Regress extends CardImpl {
public Regress (UUID ownerId) {
public Regress (final Regress card) {
public Regress copy() {return new Regress(this);
public class RelicBane extends CardImpl {
public RelicBane(UUID ownerId) {
public RelicBane(final RelicBane card) {
public RelicBane copy() {return new RelicBane(this);
public class RoarOfTheKha extends CardImpl {
public RoarOfTheKha(UUID ownerId) {
public RoarOfTheKha(final RoarOfTheKha card) {
public RoarOfTheKha copy() {return new RoarOfTheKha(this);
public class RustElemental extends CardImpl {
public RustElemental(UUID ownerId) {
public RustElemental(final RustElemental card) {
public RustElemental copy() {return new RustElemental(this);
class RustElementalEffect extends OneShotEffect {
public RustElementalEffect() {
public RustElementalEffect(final RustElementalEffect effect) {
public RustElementalEffect copy() {return new RustElementalEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RustmouthOgre extends CardImpl {
public RustmouthOgre(UUID ownerId) {
public RustmouthOgre(final RustmouthOgre card) {
public RustmouthOgre copy() {return new RustmouthOgre(this);
class RustmouthOgreTriggeredAbility extends TriggeredAbilityImpl {
RustmouthOgreTriggeredAbility() {
RustmouthOgreTriggeredAbility(final RustmouthOgreTriggeredAbility ability) {
public RustmouthOgreTriggeredAbility copy() {return new RustmouthOgreTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, you may destroy target artifact that player controls.";
public class RustsporeRam extends CardImpl {
public RustsporeRam(UUID ownerId) {
public RustsporeRam(final RustsporeRam card) {
public RustsporeRam copy() {return new RustsporeRam(this);
public class ScaleOfChissGoria extends CardImpl {
public ScaleOfChissGoria(UUID ownerId) {
public ScaleOfChissGoria(final ScaleOfChissGoria card) {
public ScaleOfChissGoria copy() {return new ScaleOfChissGoria(this);
public class SeatOfTheSynod extends CardImpl {
public SeatOfTheSynod (UUID ownerId) {
public SeatOfTheSynod (final SeatOfTheSynod card) {
public SeatOfTheSynod copy() {return new SeatOfTheSynod(this);
public class SecondSunrise extends CardImpl {
public SecondSunrise(UUID ownerId) {
public SecondSunrise(final SecondSunrise card) {
public SecondSunrise copy() {return new SecondSunrise(this);
class SecondSunriseEffect extends OneShotEffect {
SecondSunriseEffect() {staticText = "Each player returns to the battlefield all artifact, creature, enchantment, and land cards in his or her graveyard that were put there from the battlefield this turn";
SecondSunriseEffect(final SecondSunriseEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SecondSunriseEffect copy() {return new SecondSunriseEffect(this);
class SecondSunriseWatcher extends Watcher {
public SecondSunriseWatcher() {
public SecondSunriseWatcher(final SecondSunriseWatcher watcher) {
public void watch(GameEvent event, Game game) {
public SecondSunriseWatcher copy() {return new SecondSunriseWatcher(this);
public void reset() {
public class SeethingSong extends CardImpl {
public SeethingSong(UUID ownerId) {
public SeethingSong(final SeethingSong card) {
public SeethingSong copy() {return new SeethingSong(this);
public class Shatter extends CardImpl {
public Shatter (UUID ownerId) {
public Shatter (final Shatter card) {
public Shatter copy() {return new Shatter(this);
public class ShrapnelBlast extends CardImpl {
public ShrapnelBlast(UUID ownerId) {
public ShrapnelBlast(final ShrapnelBlast card) {
public ShrapnelBlast copy() {return new ShrapnelBlast(this);
public class SilverMyr extends CardImpl {
public SilverMyr (UUID ownerId) {
public SilverMyr (final SilverMyr card) {
public SilverMyr copy() {return new SilverMyr(this);
public class SlagwurmArmor extends CardImpl {
public SlagwurmArmor(UUID ownerId) {
public SlagwurmArmor(final SlagwurmArmor card) {
public SlagwurmArmor copy() {return new SlagwurmArmor(this);
public class SlithAscendant extends CardImpl {
public SlithAscendant(UUID ownerId) {
public SlithAscendant(final SlithAscendant card) {
public SlithAscendant copy() {return new SlithAscendant(this);
public class SlithBloodletter extends CardImpl {
public SlithBloodletter(UUID ownerId) {
public SlithBloodletter(final SlithBloodletter card) {
public SlithBloodletter copy() {return new SlithBloodletter(this);
public class SlithFirewalker extends CardImpl {
public SlithFirewalker(UUID ownerId) {
public SlithFirewalker(final SlithFirewalker card) {
public SlithFirewalker copy() {return new SlithFirewalker(this);
public class SlithPredator extends CardImpl {
public SlithPredator(UUID ownerId) {
public SlithPredator(final SlithPredator card) {
public SlithPredator copy() {return new SlithPredator(this);
public class SlithStrider extends CardImpl {
public SlithStrider(UUID ownerId) {
public SlithStrider(final SlithStrider card) {
public SlithStrider copy() {return new SlithStrider(this);
public class SolarTide extends CardImpl {
public SolarTide(UUID ownerId) {
public SolarTide(final SolarTide card) {
public SolarTide copy() {return new SolarTide(this);
public class SoldierReplica extends CardImpl {
public SoldierReplica(UUID ownerId) {
public SoldierReplica(final SoldierReplica card) {
public SoldierReplica copy() {return new SoldierReplica(this);
public class SomberHoverguard extends CardImpl {
public SomberHoverguard(UUID ownerId) {
public SomberHoverguard(final SomberHoverguard card) {
public SomberHoverguard copy() {return new SomberHoverguard(this);
public class SoulFoundry extends CardImpl {
public SoulFoundry(UUID ownerId) {
public SoulFoundry(final SoulFoundry card) {
public void adjustCosts(Ability ability, Game game) {
public SoulFoundry copy() {return new SoulFoundry(this);
class SoulFoundryImprintEffect extends OneShotEffect {
public SoulFoundryImprintEffect() {
public SoulFoundryImprintEffect(SoulFoundryImprintEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SoulFoundryImprintEffect copy() {return new SoulFoundryImprintEffect(this);
class SoulFoundryEffect extends OneShotEffect {
public SoulFoundryEffect() {
public SoulFoundryEffect(final SoulFoundryEffect effect) {
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return false;
public SoulFoundryEffect copy() {return new SoulFoundryEffect(this);
public class SpellweaverHelix extends CardImpl {
public SpellweaverHelix(UUID ownerId) {
public SpellweaverHelix(final SpellweaverHelix card) {
public SpellweaverHelix copy() {return new SpellweaverHelix(this);
class SpellweaverHelixImprintEffect extends OneShotEffect {
SpellweaverHelixImprintEffect() {
SpellweaverHelixImprintEffect(final SpellweaverHelixImprintEffect effect) {
public SpellweaverHelixImprintEffect copy() {return new SpellweaverHelixImprintEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class SpellweaverHelixTriggeredAbility extends TriggeredAbilityImpl {
SpellweaverHelixTriggeredAbility() {
SpellweaverHelixTriggeredAbility(final SpellweaverHelixTriggeredAbility ability) {
public SpellweaverHelixTriggeredAbility copy() {return new SpellweaverHelixTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public boolean checkInterveningIfClause(Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a card, if it has the same name as one of the cards exiled with Spellweaver Helix, you may copy the other. If you do, you may cast the copy without paying its mana cost.";
class SpellweaverHelixCastEffect extends OneShotEffect {
SpellweaverHelixCastEffect() {
SpellweaverHelixCastEffect(final SpellweaverHelixCastEffect effect) {
public SpellweaverHelixCastEffect copy() {return new SpellweaverHelixCastEffect(this);
public void setSpellName(String spellName) {
public boolean apply(Game game, Ability source) {return true;return false;
public class SpikeshotGoblin extends CardImpl {
public SpikeshotGoblin(UUID ownerId) {
public SpikeshotGoblin(final SpikeshotGoblin card) {
public SpikeshotGoblin copy() {return new SpikeshotGoblin(this);
class SpikeshotGoblinEffect extends OneShotEffect {
public SpikeshotGoblinEffect() {
public SpikeshotGoblinEffect(final SpikeshotGoblinEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return true;return false;
public SpikeshotGoblinEffect copy() {return new SpikeshotGoblinEffect(this);
public class SunbeamSpellbomb extends CardImpl {
public SunbeamSpellbomb(UUID ownerId) {
public SunbeamSpellbomb(final SunbeamSpellbomb card) {
public SunbeamSpellbomb copy() {return new SunbeamSpellbomb(this);
public class SwordOfKaldra extends CardImpl {
public SwordOfKaldra(UUID ownerId) {
public SwordOfKaldra(final SwordOfKaldra card) {
public SwordOfKaldra copy() {return new SwordOfKaldra(this);
class SwordOfKaldraTriggeredAbility extends TriggeredAbilityImpl {
public SwordOfKaldraTriggeredAbility() {
public SwordOfKaldraTriggeredAbility(final SwordOfKaldraTriggeredAbility ability) {
public SwordOfKaldraTriggeredAbility copy() {return new SwordOfKaldraTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature deals damage to a creature, " + super.getRule();
public class TajNarSwordsmith extends CardImpl {
public TajNarSwordsmith(UUID ownerId) {
public TajNarSwordsmith(final TajNarSwordsmith card) {
public TajNarSwordsmith copy() {return new TajNarSwordsmith(this);
class TajNarSwordsmithEffect extends OneShotEffect {
TajNarSwordsmithEffect() {
TajNarSwordsmithEffect(final TajNarSwordsmithEffect effect) {
public TajNarSwordsmithEffect copy() {return new TajNarSwordsmithEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TalismanOfDominance extends CardImpl {
public TalismanOfDominance(UUID ownerId) {
public TalismanOfDominance(final TalismanOfDominance card) {
public TalismanOfDominance copy() {return new TalismanOfDominance(this);
public class TalismanOfImpulse extends CardImpl {
public TalismanOfImpulse(UUID ownerId) {
public TalismanOfImpulse(final TalismanOfImpulse card) {
public TalismanOfImpulse copy() {return new TalismanOfImpulse(this);
public class TalismanOfIndulgence extends CardImpl {
public TalismanOfIndulgence(UUID ownerId) {
public TalismanOfIndulgence(final TalismanOfIndulgence card) {
public TalismanOfIndulgence copy() {return new TalismanOfIndulgence(this);
public class TalismanOfProgress extends CardImpl {
public TalismanOfProgress(UUID ownerId) {
public TalismanOfProgress(final TalismanOfProgress card) {
public TalismanOfProgress copy() {return new TalismanOfProgress(this);
public class TalismanOfUnity extends CardImpl {
public TalismanOfUnity(UUID ownerId) {
public TalismanOfUnity(final TalismanOfUnity card) {
public TalismanOfUnity copy() {return new TalismanOfUnity(this);
public class Tanglebloom extends CardImpl {
public Tanglebloom(UUID ownerId) {
public Tanglebloom(final Tanglebloom card) {
public Tanglebloom copy() {return new Tanglebloom(this);
public class TelJiladArchers extends CardImpl {
public TelJiladArchers(UUID ownerId) {
public TelJiladArchers(final TelJiladArchers card) {
public TelJiladArchers copy() {return new TelJiladArchers(this);
public class TelJiladChosen extends CardImpl {
public TelJiladChosen(UUID ownerId) {
public TelJiladChosen(final TelJiladChosen card) {
public TelJiladChosen copy() {return new TelJiladChosen(this);
public class TelJiladExile extends CardImpl {
public TelJiladExile(UUID ownerId) {
public TelJiladExile(final TelJiladExile card) {
public TelJiladExile copy() {return new TelJiladExile(this);
public class TelJiladStylus extends CardImpl {
public TelJiladStylus(UUID ownerId) {
public TelJiladStylus(final TelJiladStylus card) {
public TelJiladStylus copy() {return new TelJiladStylus(this);
public class TemporalCascade extends CardImpl {
public TemporalCascade(UUID ownerId) {
public TemporalCascade(final TemporalCascade card) {
public TemporalCascade copy() {return new TemporalCascade(this);
class TemporalCascadeShuffleEffect extends OneShotEffect {
public TemporalCascadeShuffleEffect() {
public TemporalCascadeShuffleEffect(final TemporalCascadeShuffleEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TemporalCascadeShuffleEffect copy() {return new TemporalCascadeShuffleEffect(this);
class TemporalCascadeDrawEffect extends OneShotEffect {
public TemporalCascadeDrawEffect() {
public TemporalCascadeDrawEffect(final TemporalCascadeDrawEffect effect) {
public boolean apply(Game game, Ability source) {
public class TitaniumGolem extends CardImpl {
public TitaniumGolem(UUID ownerId) {
public TitaniumGolem(final TitaniumGolem card) {
public TitaniumGolem copy() {return new TitaniumGolem(this);
public class ToothOfChissGoria extends CardImpl {
public ToothOfChissGoria(UUID ownerId) {
public ToothOfChissGoria(final ToothOfChissGoria card) {
public ToothOfChissGoria copy() {return new ToothOfChissGoria(this);
public class TowerOfChampions extends CardImpl {
public TowerOfChampions (UUID ownerId) {
public TowerOfChampions (final TowerOfChampions card) {
public TowerOfChampions copy() {return new TowerOfChampions(this);
public class TowerOfEons extends CardImpl {
public TowerOfEons (UUID ownerId) {
public TowerOfEons (final TowerOfEons card) {
public TowerOfEons copy() {return new TowerOfEons(this);
public class TrashForTreasure extends CardImpl {
public TrashForTreasure(UUID ownerId) {
public TrashForTreasure(final TrashForTreasure card) {
public TrashForTreasure copy() {return new TrashForTreasure(this);
public class TreeOfTales extends CardImpl {
public TreeOfTales (UUID ownerId) {
public TreeOfTales (final TreeOfTales card) {
public TreeOfTales copy() {return new TreeOfTales(this);
public class TrollAscetic extends CardImpl {
public TrollAscetic (UUID ownerId) {
public TrollAscetic (final TrollAscetic card) {
public TrollAscetic copy() {return new TrollAscetic(this);
public class TrollsOfTelJilad extends CardImpl {
public TrollsOfTelJilad(UUID ownerId) {
public TrollsOfTelJilad(final TrollsOfTelJilad card) {
public TrollsOfTelJilad copy() {return new TrollsOfTelJilad(this);
public class TurnToDust extends CardImpl {
public TurnToDust(UUID ownerId) {
public TurnToDust(final TurnToDust card) {
public TurnToDust copy() {return new TurnToDust(this);
public class VaultOfWhispers extends CardImpl {
public VaultOfWhispers (UUID ownerId) {
public VaultOfWhispers (final VaultOfWhispers card) {
public VaultOfWhispers copy() {return new VaultOfWhispers(this);
public class VedalkenArchmage extends CardImpl {
public VedalkenArchmage(UUID ownerId) {
public VedalkenArchmage(final VedalkenArchmage card) {
public VedalkenArchmage copy() {return new VedalkenArchmage(this);
public class Vermiculos extends CardImpl {
public Vermiculos(UUID ownerId) {
public Vermiculos(final Vermiculos card) {
public Vermiculos copy() {return new Vermiculos(this);
public class ViridianJoiner extends CardImpl {
public ViridianJoiner(UUID ownerId) {
public ViridianJoiner(final ViridianJoiner card) {
public ViridianJoiner copy() {return new ViridianJoiner(this);
public class ViridianLongbow extends CardImpl {
public ViridianLongbow(UUID ownerId) {
public ViridianLongbow(final ViridianLongbow card) {
public ViridianLongbow copy() {return new ViridianLongbow(this);
public class VorracBattlehorns extends CardImpl {
public VorracBattlehorns(UUID ownerId) {
public VorracBattlehorns(final VorracBattlehorns card) {
public VorracBattlehorns copy() {return new VorracBattlehorns(this);
class CantBeBlockedByMoreThanOneAttachedEffect extends ContinuousEffectImpl {
public CantBeBlockedByMoreThanOneAttachedEffect(AttachmentType attachmentType, int amount) {
public CantBeBlockedByMoreThanOneAttachedEffect(AttachmentType attachmentType, int amount, Duration duration) {
public CantBeBlockedByMoreThanOneAttachedEffect(final CantBeBlockedByMoreThanOneAttachedEffect effect) {
public CantBeBlockedByMoreThanOneAttachedEffect copy() {return new CantBeBlockedByMoreThanOneAttachedEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class VulshokBattlegear extends CardImpl {
public VulshokBattlegear (UUID ownerId) {
public VulshokBattlegear (final VulshokBattlegear card) {
public VulshokBattlegear copy() {return new VulshokBattlegear(this);
public class VulshokGauntlets extends CardImpl {
public VulshokGauntlets(UUID ownerId) {
public VulshokGauntlets(final VulshokGauntlets card) {
public VulshokGauntlets copy() {return new VulshokGauntlets(this);
class VulshokGauntletsEffect extends ReplacementEffectImpl {
public VulshokGauntletsEffect() {
public VulshokGauntletsEffect(final VulshokGauntletsEffect effect) {
public VulshokGauntletsEffect copy() {return new VulshokGauntletsEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.UNTAP;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class WailOfTheNim extends CardImpl {
public WailOfTheNim(UUID ownerId) {
public WailOfTheNim(final WailOfTheNim card) {
public WailOfTheNim copy() {return new WailOfTheNim(this);
public class WallOfBlood extends CardImpl {
public WallOfBlood(UUID ownerId) {
public WallOfBlood(final WallOfBlood card) {
public WallOfBlood copy() {return new WallOfBlood(this);
public class WeldingJar extends CardImpl {
public WeldingJar (UUID ownerId) {
public WeldingJar (final WeldingJar card) {
public WeldingJar copy() {return new WeldingJar(this);
public class Woebearer extends CardImpl {
public Woebearer(UUID ownerId) {
public Woebearer(final Woebearer card) {
public Woebearer copy() {return new Woebearer(this);
public class WrenchMind extends CardImpl {
public WrenchMind(UUID ownerId) {
public WrenchMind(final WrenchMind card) {
public WrenchMind copy() {return new WrenchMind(this);
class WrenchMindEffect extends OneShotEffect {
public WrenchMindEffect() {
public WrenchMindEffect(final WrenchMindEffect effect) {
public WrenchMindEffect copy() {return new WrenchMindEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AccorderPaladin extends CardImpl {
public AccorderPaladin (UUID ownerId) {
public AccorderPaladin (final AccorderPaladin card) {
public AccorderPaladin copy() {return new AccorderPaladin(this);
public class ArdentRecruit extends CardImpl {
public ArdentRecruit(UUID ownerId) {
public ArdentRecruit(final ArdentRecruit card) {
public ArdentRecruit copy() {return new ArdentRecruit(this);
public class BanishmentDecree extends CardImpl {
public BanishmentDecree (UUID ownerId) {
public BanishmentDecree (final BanishmentDecree card) {
public BanishmentDecree copy() {return new BanishmentDecree(this);
public class BlackSunsZenith extends CardImpl {
public BlackSunsZenith (UUID ownerId) {
public BlackSunsZenith (final BlackSunsZenith card) {
public BlackSunsZenith copy() {return new BlackSunsZenith(this);
class BlackSunsZenithEffect extends OneShotEffect {
BlackSunsZenithEffect() {
BlackSunsZenithEffect(final BlackSunsZenithEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public BlackSunsZenithEffect copy() {return new BlackSunsZenithEffect(this);
public class BladedSentinel extends CardImpl {
public BladedSentinel (UUID ownerId) {
public BladedSentinel (final BladedSentinel card) {
public BladedSentinel copy() {return new BladedSentinel(this);
public class BlightsteelColossus extends CardImpl {
public BlightsteelColossus(UUID ownerId) {
public BlightsteelColossus(final BlightsteelColossus card) {
public BlightsteelColossus copy() {return new BlightsteelColossus(this);return new Blightwidow(this);
public class BlisterstickShaman extends CardImpl {
public BlisterstickShaman (UUID ownerId) {
public BlisterstickShaman (final BlisterstickShaman card) {
public BlisterstickShaman copy() {return new BlisterstickShaman(this);
public class BlueSunsZenith extends CardImpl {
public BlueSunsZenith (UUID ownerId) {
public BlueSunsZenith (final BlueSunsZenith card) {
public BlueSunsZenith copy() {return new BlueSunsZenith(this);
public class Bonehoard extends CardImpl {
public Bonehoard(UUID ownerId) {
public Bonehoard(final Bonehoard card) {
public Bonehoard copy() {return new Bonehoard(this);
public class BrassSquire extends CardImpl {
public BrassSquire(UUID ownerId) {
public BrassSquire(final BrassSquire card) {
public BrassSquire copy() {return new BrassSquire(this);
class EquipEffect extends OneShotEffect {
public EquipEffect() {
public EquipEffect(final EquipEffect effect) {
public EquipEffect copy() {return new EquipEffect(this);
public boolean apply(Game game, Ability source) {return creature.addAttachment(equipment.getId(), game);return false;
public class BurntheImpure extends CardImpl {
public BurntheImpure(UUID ownerId) {
public BurntheImpure(final BurntheImpure card) {
public BurntheImpure copy() {return new BurntheImpure(this);
class BurntheImpureEffect extends OneShotEffect {
public BurntheImpureEffect() {
public BurntheImpureEffect(final BurntheImpureEffect effect) {
public BurntheImpureEffect copy() {return new BurntheImpureEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CausticHound extends CardImpl {
public CausticHound (UUID ownerId) {
public CausticHound (final CausticHound card) {
public CausticHound copy() {return new CausticHound(this);
public class ChokingFumes extends CardImpl {
public ChokingFumes(UUID ownerId) {
public ChokingFumes(final ChokingFumes card) {
public ChokingFumes copy() {return new ChokingFumes(this);
public class ConcussiveBolt extends CardImpl {
public ConcussiveBolt(UUID ownerId) {
public ConcussiveBolt(final ConcussiveBolt card) {
public ConcussiveBolt copy() {return new ConcussiveBolt(this);
class ConcussiveBoltEffect extends OneShotEffect {
public ConcussiveBoltEffect() {
public ConcussiveBoltEffect(final ConcussiveBoltEffect effect) {
public ConcussiveBoltEffect copy() {return new ConcussiveBoltEffect(this);
public boolean apply(Game game, Ability source) {return true;
class ConcussiveBoltRestrictionEffect extends RestrictionEffect {
public ConcussiveBoltRestrictionEffect() {
public ConcussiveBoltRestrictionEffect(final ConcussiveBoltRestrictionEffect effect) {
public ConcussiveBoltRestrictionEffect copy() {return new ConcussiveBoltRestrictionEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public class ConsecratedSphinx extends CardImpl {
public ConsecratedSphinx(UUID ownerId) {
public ConsecratedSphinx(final ConsecratedSphinx card) {
public ConsecratedSphinx copy() {return new ConsecratedSphinx(this);
class ConsecratedSphinxTriggeredAbility extends TriggeredAbilityImpl {
ConsecratedSphinxTriggeredAbility() {
ConsecratedSphinxTriggeredAbility(final ConsecratedSphinxTriggeredAbility ability) {
public ConsecratedSphinxTriggeredAbility copy() {return new ConsecratedSphinxTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DREW_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(this.getControllerId()).contains(event.getPlayerId());
public String getRule() {return "Whenever an opponent draws a card, you may draw two cards.";
public class ContestedWarZone extends CardImpl {
public ContestedWarZone(UUID ownerId) {
public ContestedWarZone(final ContestedWarZone card) {
public ContestedWarZone copy() {return new ContestedWarZone(this);
class ContestedWarZoneAbility extends TriggeredAbilityImpl {
public ContestedWarZoneAbility() {
public ContestedWarZoneAbility(final ContestedWarZoneAbility ability) {
public ContestedWarZoneAbility copy() {return new ContestedWarZoneAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature deals combat damage to you, that creature's controller gains control of {this}";
class ContestedWarZoneEffect extends ContinuousEffectImpl {
public ContestedWarZoneEffect() {
public ContestedWarZoneEffect(final ContestedWarZoneEffect effect) {
public ContestedWarZoneEffect copy() {return new ContestedWarZoneEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(controllerId, game);return false;
public String getText(Mode mode) {return "Gain control of {this}";
public class CopperCarapace extends CardImpl {
public CopperCarapace(UUID ownerId) {
public CopperCarapace(final CopperCarapace card) {
public CopperCarapace copy() {return new CopperCarapace(this);
public class CreepingCorrosion extends CardImpl {
public CreepingCorrosion(UUID ownerId) {
public CreepingCorrosion(final CreepingCorrosion card) {
public CreepingCorrosion copy() {return new CreepingCorrosion(this);
public class Crush extends CardImpl {
public Crush(UUID ownerId) {
public Crush(final Crush card) {
public Crush copy() {return new Crush(this);
public class Cryptoplasm extends CardImpl {
public Cryptoplasm(UUID ownerId) {
public Cryptoplasm(final Cryptoplasm card) {
public Cryptoplasm copy() {return new Cryptoplasm(this);
class CryptoplasmEffect extends OneShotEffect {
public CryptoplasmEffect() {
public CryptoplasmEffect(final CryptoplasmEffect effect) {
public CryptoplasmEffect copy() {return new CryptoplasmEffect(this);
public boolean apply(Game game, final Ability source) {
ApplyToPermanent applier = new ApplyToPermanent() {
public Boolean apply(Game game, Permanent permanent) {return true;
public Boolean apply(Game game, MageObject mageObject) {return true;return true;
public class DarksteelPlate extends CardImpl {
public DarksteelPlate (UUID ownerId) {
public DarksteelPlate (final DarksteelPlate card) {
public DarksteelPlate copy() {return new DarksteelPlate(this);
public class DecimatorWeb extends CardImpl {
public DecimatorWeb (UUID ownerId) {
public DecimatorWeb (final DecimatorWeb card) {
public DecimatorWeb copy() {return new DecimatorWeb(this);
public class DistantMemories extends CardImpl {
public DistantMemories(UUID ownerId) {
public DistantMemories(final DistantMemories card) {
public DistantMemories copy() {return new DistantMemories(this);
class DistantMemoriesEffect extends OneShotEffect {
public DistantMemoriesEffect() {
public DistantMemoriesEffect(final DistantMemoriesEffect effect) {
public DistantMemoriesEffect copy() {return new DistantMemoriesEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class DivineOffering extends CardImpl {
public DivineOffering(UUID ownerId) {
public DivineOffering(final DivineOffering card) {
public DivineOffering copy() {return new DivineOffering(this);
public class DrossRipper extends CardImpl {
public DrossRipper (UUID ownerId) {
public DrossRipper (final DrossRipper card) {
public DrossRipper copy() {return new DrossRipper(this);
public class FangrenMarauder extends CardImpl {
public FangrenMarauder(UUID ownerId) {
public FangrenMarauder(final FangrenMarauder card) {
public FangrenMarauder copy() {return new FangrenMarauder(this);
public class FlayerHusk extends CardImpl {
public FlayerHusk(UUID ownerId) {
public FlayerHusk(final FlayerHusk card) {
public FlayerHusk copy() {return new FlayerHusk(this);
public class Flensermite extends CardImpl {
public Flensermite (UUID ownerId) {
public Flensermite (final Flensermite card) {
public Flensermite copy() {return new Flensermite(this);
public class FleshEaterImp extends CardImpl {
public FleshEaterImp (UUID ownerId) {
public FleshEaterImp (final FleshEaterImp card) {
public FleshEaterImp copy() {return new FleshEaterImp(this);
public class FranticSalvage extends CardImpl {
public FranticSalvage(UUID ownerId) {
public FranticSalvage(final FranticSalvage card) {
public FranticSalvage copy() {return new FranticSalvage(this);
public class FuelForTheCause extends CardImpl {
public FuelForTheCause (UUID ownerId) {
public FuelForTheCause (final FuelForTheCause card) {
public FuelForTheCause copy() {return new FuelForTheCause(this);
public class Galvanoth extends CardImpl {
public Galvanoth(UUID ownerId) {
public Galvanoth(final Galvanoth card) {
public Galvanoth copy() {return new Galvanoth(this);
class GalvanothEffect extends OneShotEffect {
public GalvanothEffect() {
public GalvanothEffect(final GalvanothEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GalvanothEffect copy() {return new GalvanothEffect(this);
public class GlissasCourier extends CardImpl {
public GlissasCourier (UUID ownerId) {
public GlissasCourier (final GlissasCourier card) {
public GlissasCourier copy() {return new GlissasCourier(this);
public class GlissaTheTraitor extends CardImpl {
public GlissaTheTraitor (UUID ownerId) {
public GlissaTheTraitor (final GlissaTheTraitor card) {
public GlissaTheTraitor copy() {return new GlissaTheTraitor(this);
class GlissaTheTraitorTriggeredAbility extends TriggeredAbilityImpl {
GlissaTheTraitorTriggeredAbility() {
GlissaTheTraitorTriggeredAbility(final GlissaTheTraitorTriggeredAbility ability) {
public GlissaTheTraitorTriggeredAbility copy() {return new GlissaTheTraitorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature an opponent controls is put into a graveyard from the battlefield, you may " + super.getRule();
public class Gnathosaur extends CardImpl {
public Gnathosaur(UUID ownerId) {
public Gnathosaur(final Gnathosaur card) {
public Gnathosaur copy() {return new Gnathosaur(this);
public class GoreVassal extends CardImpl {
public GoreVassal(UUID ownerId) {
public GoreVassal(final GoreVassal card) {
public GoreVassal copy() {return new GoreVassal(this);
public class GreenSunsZenith extends CardImpl {
public GreenSunsZenith(UUID ownerId) {
public GreenSunsZenith(final GreenSunsZenith card) {
public GreenSunsZenith copy() {return new GreenSunsZenith(this);
class GreenSunsZenithSearchEffect extends OneShotEffect {
GreenSunsZenithSearchEffect() {
GreenSunsZenithSearchEffect(final GreenSunsZenithSearchEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public GreenSunsZenithSearchEffect copy() {return new GreenSunsZenithSearchEffect(this);
public class GruesomeEncore extends CardImpl {
public GruesomeEncore(UUID ownerId) {
public GruesomeEncore(final GruesomeEncore card) {
public GruesomeEncore copy() {return new GruesomeEncore(this);
class GruesomeEncoreEffect extends OneShotEffect {
public GruesomeEncoreEffect() {
public GruesomeEncoreEffect(final GruesomeEncoreEffect effect) {
public GruesomeEncoreEffect copy() {return new GruesomeEncoreEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class GruesomeEncoreReplacementEffect extends ReplacementEffectImpl {
GruesomeEncoreReplacementEffect() {
GruesomeEncoreReplacementEffect(final GruesomeEncoreReplacementEffect effect) {
public GruesomeEncoreReplacementEffect copy() {return new GruesomeEncoreReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getFirstTarget())
public boolean apply(Game game, Ability source) {return false;
public class GustSkimmer extends CardImpl {
public GustSkimmer (UUID ownerId) {
public GustSkimmer (final GustSkimmer card) {
public GustSkimmer copy() {return new GustSkimmer(this);
public class HellkiteIgniter extends CardImpl {
public HellkiteIgniter (UUID ownerId) {
public HellkiteIgniter (final HellkiteIgniter card) {
public HellkiteIgniter copy() {return new HellkiteIgniter(this);
public class HeroOfBladehold extends CardImpl {
public HeroOfBladehold(UUID ownerId) {
public HeroOfBladehold(final HeroOfBladehold card) {
public HeroOfBladehold copy() {return new HeroOfBladehold(this);
public class HeroOfOxidRidge extends CardImpl {
public HeroOfOxidRidge(UUID ownerId) {
public HeroOfOxidRidge(final HeroOfOxidRidge card) {
public HeroOfOxidRidge copy() {return new HeroOfOxidRidge(this);
class HeroOfOxidRidgeEffect extends RestrictionEffect {
public HeroOfOxidRidgeEffect() {
public HeroOfOxidRidgeEffect(final HeroOfOxidRidgeEffect effect) {
public HeroOfOxidRidgeEffect copy() {return new HeroOfOxidRidgeEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getPower().getValue() <= 1;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public class HexplateGolem extends CardImpl {
public HexplateGolem (UUID ownerId) {
public HexplateGolem (final HexplateGolem card) {
public HexplateGolem copy() {return new HexplateGolem(this);return new HorrifyingRevelation(this);
public class IchorWellspring extends CardImpl {
public IchorWellspring(UUID ownerId) {
public IchorWellspring(final IchorWellspring card) {
public IchorWellspring copy() {return new IchorWellspring(this);
public class InkmothNexus extends CardImpl {
public InkmothNexus (UUID ownerId) {
public InkmothNexus (final InkmothNexus card) {
public InkmothNexus copy() {return new InkmothNexus(this);
class InkmothNexusToken extends Token {
public InkmothNexusToken() {
public class IntoTheCore extends CardImpl {
public IntoTheCore(UUID ownerId) {
public IntoTheCore(final IntoTheCore card) {
public IntoTheCore copy() {return new IntoTheCore(this);
public class KembasLegion extends CardImpl {
public KembasLegion(UUID ownerId) {
public KembasLegion(final KembasLegion card) {
public KembasLegion copy() {return new KembasLegion(this);
class KembasLegionEffect extends ContinuousEffectImpl {
public KembasLegionEffect() {
public KembasLegionEffect(final KembasLegionEffect effect) {
public KembasLegionEffect copy() {return new KembasLegionEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class KnowledgePool extends CardImpl {
public KnowledgePool(UUID ownerId) {
public KnowledgePool(final KnowledgePool card) {
public KnowledgePool copy() {return new KnowledgePool(this);
class KnowledgePoolEffect1 extends OneShotEffect {
public KnowledgePoolEffect1() {
public KnowledgePoolEffect1(final KnowledgePoolEffect1 effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public KnowledgePoolEffect1 copy() {return new KnowledgePoolEffect1(this);
class KnowledgePoolAbility extends TriggeredAbilityImpl {
public KnowledgePoolAbility() {
public KnowledgePoolAbility(final KnowledgePoolAbility ability) {
public KnowledgePoolAbility copy() {return new KnowledgePoolAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
class KnowledgePoolEffect2 extends OneShotEffect {
public KnowledgePoolEffect2() {
public KnowledgePoolEffect2(final KnowledgePoolEffect2 effect) {
public boolean apply(Game game, Ability source) {return player.cast(card.getSpellAbility(), game, true);return true;return false;
public KnowledgePoolEffect2 copy() {return new KnowledgePoolEffect2(this);
public class KothsCourier extends CardImpl {
public KothsCourier (UUID ownerId) {
public KothsCourier (final KothsCourier card) {
public KothsCourier copy() {return new KothsCourier(this);return new KuldothaFlamefiend(this);return new KuldothaRingleader(this);
public class LeadTheStampede extends CardImpl {
public LeadTheStampede(UUID ownerId) {
public LeadTheStampede(final LeadTheStampede card) {
public LeadTheStampede copy() {return new LeadTheStampede(this);
public class LumengridGargoyle extends CardImpl {
public LumengridGargoyle (UUID ownerId) {
public LumengridGargoyle (final LumengridGargoyle card) {
public LumengridGargoyle copy() {return new LumengridGargoyle(this);
public class MagneticMine extends CardImpl {
public MagneticMine(UUID ownerId) {
public MagneticMine(final MagneticMine card) {
public MagneticMine copy() {return new MagneticMine(this);
class MagneticMineTriggeredAbility extends TriggeredAbilityImpl {
public MagneticMineTriggeredAbility(Effect effect) {
public MagneticMineTriggeredAbility(final MagneticMineTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever another artifact is put into a graveyard from the battlefield, {this} deals 2 damage to that artifact's controller";
public MagneticMineTriggeredAbility copy() {return new MagneticMineTriggeredAbility(this);
public class MassacreWurm extends CardImpl {
public MassacreWurm (UUID ownerId) {
public MassacreWurm (final MassacreWurm card) {
public MassacreWurm copy() {return new MassacreWurm(this);
class MassacreWurmTriggeredAbility extends TriggeredAbilityImpl {
MassacreWurmTriggeredAbility() {
MassacreWurmTriggeredAbility(final MassacreWurmTriggeredAbility ability) {
public MassacreWurmTriggeredAbility copy() {return new MassacreWurmTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature an opponent controls is put into a graveyard from the battlefield, " + super.getRule();
public class MastersCall extends CardImpl {
public MastersCall (UUID ownerId) {
public MastersCall (final MastersCall card) {
public MastersCall copy() {return new MastersCall(this);
public class MelirasKeepers extends CardImpl {
public MelirasKeepers(UUID ownerId) {
public MelirasKeepers(final MelirasKeepers card) {
public MelirasKeepers copy() {return new MelirasKeepers(this);
public MelirasKeepersEffect() {
public MelirasKeepersEffect(final MelirasKeepersEffect effect) {
public MelirasKeepersEffect copy() {return new MelirasKeepersEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ADD_COUNTER;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getSourceId());
public class MetallicMastery extends CardImpl {
public MetallicMastery(UUID ownerId) {
public MetallicMastery(final MetallicMastery card) {
public MetallicMastery copy() {return new MetallicMastery(this);
public class MirranCrusader extends CardImpl {
public MirranCrusader (UUID ownerId) {
public MirranCrusader (final MirranCrusader card) {
public MirranCrusader copy() {return new MirranCrusader(this);
public class MirranMettle extends CardImpl {
public MirranMettle(UUID ownerId) {
public MirranMettle(final MirranMettle card) {
public MirranMettle copy() {return new MirranMettle(this);
public class MirranSpy extends CardImpl {
public MirranSpy(UUID ownerId) {
public MirranSpy(final MirranSpy card) {
public MirranSpy copy() {return new MirranSpy(this);
public class Mirrorworks extends CardImpl {
public Mirrorworks(UUID ownerId) {
public Mirrorworks(final Mirrorworks card) {
public Mirrorworks copy() {return new Mirrorworks(this);
public class MitoticManipulation extends CardImpl {
public MitoticManipulation(UUID ownerId) {
public MitoticManipulation(final MitoticManipulation card) {
public MitoticManipulation copy() {return new MitoticManipulation(this);
class MitoticManipulationEffect extends OneShotEffect {
public MitoticManipulationEffect() {
public MitoticManipulationEffect(final MitoticManipulationEffect effect) {
public MitoticManipulationEffect copy() {return new MitoticManipulationEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class MorbidPlunder extends CardImpl {
public MorbidPlunder(UUID ownerId) {
public MorbidPlunder(final MorbidPlunder card) {
public MorbidPlunder copy() {return new MorbidPlunder(this);
public class Mortarpod extends CardImpl {
public Mortarpod(UUID ownerId) {
public Mortarpod(final Mortarpod card) {
public Mortarpod copy() {return new Mortarpod(this);
public class MyrSire extends CardImpl {
public MyrSire (UUID ownerId) {
public MyrSire (final MyrSire card) {
public MyrSire copy() {return new MyrSire(this);
public class MyrTurbine extends CardImpl {
public MyrTurbine(UUID ownerId) {
public MyrTurbine(final MyrTurbine card) {
public MyrTurbine copy() {return new MyrTurbine(this);
public class MyrWelder extends CardImpl {
public MyrWelder(UUID ownerId) {
public MyrWelder(final MyrWelder card) {
public MyrWelder copy() {return new MyrWelder(this);
class MyrWelderEffect extends OneShotEffect {
public MyrWelderEffect() {
public MyrWelderEffect(MyrWelderEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MyrWelderEffect copy() {return new MyrWelderEffect(this);
class MyrWelderContinuousEffect extends ContinuousEffectImpl {
public MyrWelderContinuousEffect() {
public MyrWelderContinuousEffect(final MyrWelderContinuousEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MyrWelderContinuousEffect copy() {return new MyrWelderContinuousEffect(this);
public class NestedGhoul extends CardImpl {
public NestedGhoul(UUID ownerId) {
public NestedGhoul(final NestedGhoul card) {
public NestedGhoul copy() {return new NestedGhoul(this);
class NestedGhoulTriggeredAbility extends TriggeredAbilityImpl {
NestedGhoulTriggeredAbility() {
NestedGhoulTriggeredAbility(final NestedGhoulTriggeredAbility ability) {
public NestedGhoulTriggeredAbility copy() {return new NestedGhoulTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getTargetId().equals(this.sourceId);
public String getRule() {return "Whenever a source deals damage to {this}, put a 2/2 black Zombie creature token onto the battlefield.";return new NeurokCommando(this);
public class PeaceStrider extends CardImpl {
public PeaceStrider (UUID ownerId) {
public PeaceStrider (final PeaceStrider card) {
public PeaceStrider copy() {return new PeaceStrider(this);
public class Phyresis extends CardImpl {
public Phyresis (UUID ownerId) {
public Phyresis (final Phyresis card) {
public Phyresis copy() {return new Phyresis(this);
public class PhyrexianCrusader extends CardImpl {
public PhyrexianCrusader (UUID ownerId) {
public PhyrexianCrusader (final PhyrexianCrusader card) {
public PhyrexianCrusader copy() {return new PhyrexianCrusader(this);
public class PhyrexianDigester extends CardImpl {
public PhyrexianDigester (UUID ownerId) {
public PhyrexianDigester (final PhyrexianDigester card) {
public PhyrexianDigester copy() {return new PhyrexianDigester(this);
public class PhyrexianHydra extends CardImpl {
public PhyrexianHydra(UUID ownerId) {
public PhyrexianHydra(final PhyrexianHydra card) {
public PhyrexianHydra copy() {return new PhyrexianHydra(this);
class PhyrexianHydraEffect extends PreventionEffectImpl {
public PhyrexianHydraEffect() {
public PhyrexianHydraEffect(final PhyrexianHydraEffect effect) {
public PhyrexianHydraEffect copy() {return new PhyrexianHydraEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return retValue;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PhyrexianJuggernaut extends CardImpl {
public PhyrexianJuggernaut (UUID ownerId) {
public PhyrexianJuggernaut (final PhyrexianJuggernaut card) {
public PhyrexianJuggernaut copy() {return new PhyrexianJuggernaut(this);
public class PhyrexianRebirth extends CardImpl {
public PhyrexianRebirth(UUID ownerId) {
public PhyrexianRebirth(final PhyrexianRebirth card) {
public PhyrexianRebirth copy() {return new PhyrexianRebirth(this);
class PhyrexianRebirthEffect extends OneShotEffect {
public PhyrexianRebirthEffect() {
public PhyrexianRebirthEffect(PhyrexianRebirthEffect ability) {
public boolean apply(Game game, Ability source) {return true;
public PhyrexianRebirthEffect copy() {return new PhyrexianRebirthEffect(this);
class HorrorToken extends Token {
public HorrorToken() {
public class PhyrexianRevoker extends CardImpl {
public PhyrexianRevoker(UUID ownerId) {
public PhyrexianRevoker(final PhyrexianRevoker card) {
public PhyrexianRevoker copy() {return new PhyrexianRevoker(this);
public PhyrexianRevokerEffect2() {
public PhyrexianRevokerEffect2(final PhyrexianRevokerEffect2 effect) {
public boolean apply(Game game, Ability source) {return true;
public PhyrexianRevokerEffect2 copy() {return new PhyrexianRevokerEffect2(this);
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't activate abilities of sources with that name (" + mageObject.getLogName() + " in play).";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PhyrexianVatmother extends CardImpl {
public PhyrexianVatmother (UUID ownerId) {
public PhyrexianVatmother (final PhyrexianVatmother card) {
public PhyrexianVatmother copy() {return new PhyrexianVatmother(this);
class PoisonControllerEffect extends OneShotEffect {
public PoisonControllerEffect() {
public PoisonControllerEffect(final PoisonControllerEffect effect) {
public PoisonControllerEffect copy() {return new PoisonControllerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PierceStrider extends CardImpl {
public PierceStrider (UUID ownerId) {
public PierceStrider (final PierceStrider card) {
public PierceStrider copy() {return new PierceStrider(this);
public class PistonSledge extends CardImpl {
public PistonSledge (UUID ownerId) {
public PistonSledge (final PistonSledge card) {
public PistonSledge copy() {return new PistonSledge(this);
public class PistusStrike extends CardImpl {
public PistusStrike(UUID ownerId) {
public PistusStrike(final PistusStrike card) {
public PistusStrike copy() {return new PistusStrike(this);
class PoisonControllerTargetCreatureEffect extends OneShotEffect {
public PoisonControllerTargetCreatureEffect() {
public PoisonControllerTargetCreatureEffect(final PoisonControllerTargetCreatureEffect effect) {
public PoisonControllerTargetCreatureEffect copy() {return new PoisonControllerTargetCreatureEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PlaguemawBeast extends CardImpl {
public PlaguemawBeast (UUID ownerId) {
public PlaguemawBeast (final PlaguemawBeast card) {
public PlaguemawBeast copy() {return new PlaguemawBeast(this);
public class PlagueMyr extends CardImpl {
public PlagueMyr (UUID ownerId) {
public PlagueMyr (final PlagueMyr card) {
public PlagueMyr copy() {return new PlagueMyr(this);
public class PraetorsCounsel extends CardImpl {
public PraetorsCounsel(UUID ownerId) {
public PraetorsCounsel(final PraetorsCounsel card) {
public PraetorsCounsel copy() {return new PraetorsCounsel(this);
class PraetorsCounselEffect extends OneShotEffect {
public PraetorsCounselEffect() {
public PraetorsCounselEffect(final PraetorsCounselEffect effect) {
public PraetorsCounselEffect copy() {return new PraetorsCounselEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class PriestsOfNorn extends CardImpl {
public PriestsOfNorn (UUID ownerId) {
public PriestsOfNorn (final PriestsOfNorn card) {
public PriestsOfNorn copy() {return new PriestsOfNorn(this);
public class PsychosisCrawler extends CardImpl {
public PsychosisCrawler(UUID ownerId) {
public PsychosisCrawler(final PsychosisCrawler card) {
public PsychosisCrawler copy() {return new PsychosisCrawler(this);return new LoseLifeOpponentsEffect(this);
public boolean apply(Game game, Ability source) {return applied;
public class QuicksilverGeyser extends CardImpl {
public QuicksilverGeyser(UUID ownerId) {
public QuicksilverGeyser(final QuicksilverGeyser card) {
public QuicksilverGeyser copy() {return new QuicksilverGeyser(this);
public class RazorfieldRhino extends CardImpl {
public RazorfieldRhino (UUID ownerId) {
public RazorfieldRhino (final RazorfieldRhino card) {
public RazorfieldRhino copy() {return new RazorfieldRhino(this);
public class RedSunsZenith extends CardImpl {
public RedSunsZenith(UUID ownerId) {
public RedSunsZenith(final RedSunsZenith card) {
public RedSunsZenith copy() {return new RedSunsZenith(this);
public class RotWolf extends CardImpl {
public RotWolf(UUID ownerId) {
public RotWolf(final RotWolf card) {
public RotWolf copy() {return new RotWolf(this);
public class RustedSlasher extends CardImpl {
public RustedSlasher (UUID ownerId) {
public RustedSlasher (final RustedSlasher card) {
public RustedSlasher copy() {return new RustedSlasher(this);
public class Sangromancer extends CardImpl {
public Sangromancer (UUID ownerId) {
public Sangromancer (final Sangromancer card) {
public Sangromancer copy() {return new Sangromancer(this);
class SangromancerFirstTriggeredAbility extends TriggeredAbilityImpl {
SangromancerFirstTriggeredAbility() {
SangromancerFirstTriggeredAbility(final SangromancerFirstTriggeredAbility ability) {
public SangromancerFirstTriggeredAbility copy() {return new SangromancerFirstTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature an opponent controls is put into a graveyard from the battlefield, " + super.getRule();
class SangromancerSecondTriggeredAbility extends TriggeredAbilityImpl {
SangromancerSecondTriggeredAbility() {
SangromancerSecondTriggeredAbility(final SangromancerSecondTriggeredAbility ability) {
public SangromancerSecondTriggeredAbility copy() {return new SangromancerSecondTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(this.getControllerId()).contains(event.getPlayerId());
public String getRule() {return "Whenever an opponent discards a card, " + super.getRule();
public class ScourgeServant extends CardImpl {
public ScourgeServant (UUID ownerId) {
public ScourgeServant (final ScourgeServant card) {
public ScourgeServant copy() {return new ScourgeServant(this);
public class SepticRats extends CardImpl {
public SepticRats(UUID ownerId) {
public SepticRats(final SepticRats card) {
public SepticRats copy() {return new SepticRats(this);
class SepticRatsTriggeredAbility extends TriggeredAbilityImpl {
SepticRatsTriggeredAbility() {
SepticRatsTriggeredAbility(final SepticRatsTriggeredAbility ability) {
public SepticRatsTriggeredAbility copy() {return new SepticRatsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks, if defending player is poisoned, it gets +1/+1 until end of turn.";
public class SerumRaker extends CardImpl {
public SerumRaker (UUID ownerId) {
public SerumRaker (final SerumRaker card) {
public SerumRaker copy() {return new SerumRaker(this);
public class ShimmerMyr extends CardImpl {
public ShimmerMyr (UUID ownerId) {
public ShimmerMyr (final ShimmerMyr card) {
public ShimmerMyr copy() {return new ShimmerMyr(this);
public class Shriekhorn extends CardImpl {
public Shriekhorn (UUID ownerId) {
public Shriekhorn (final Shriekhorn card) {
public Shriekhorn copy() {return new Shriekhorn(this);
public class SignalPest extends CardImpl {
public SignalPest(UUID ownerId) {
public SignalPest(final SignalPest card) {
public SignalPest copy() {return new SignalPest(this);
public class SilverskinArmor extends CardImpl {
public SilverskinArmor(UUID ownerId) {
public SilverskinArmor(final SilverskinArmor card) {
public SilverskinArmor copy() {return new SilverskinArmor(this);
public class Skinwing extends CardImpl {
public Skinwing(UUID ownerId) {
public Skinwing(final Skinwing card) {
public Skinwing copy() {return new Skinwing(this);
public class Slagstorm extends CardImpl {
public Slagstorm (UUID ownerId) {
public Slagstorm (final Slagstorm card) {
public Slagstorm copy() {return new Slagstorm(this);
public class SphereOfTheSuns extends CardImpl {
public SphereOfTheSuns(UUID ownerId) {
public SphereOfTheSuns(final SphereOfTheSuns card) {
public SphereOfTheSuns copy() {return new SphereOfTheSuns(this);
public class SpinEngine extends CardImpl {
public SpinEngine(UUID ownerId) {
public SpinEngine(final SpinEngine card) {
public SpinEngine copy() {return new SpinEngine(this);
class SpinEngineEffect extends RestrictionEffect {
public SpinEngineEffect() {
public SpinEngineEffect(final SpinEngineEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return true;
public SpinEngineEffect copy() {return new SpinEngineEffect(this);
public class SpineOfIshSah extends CardImpl {
public SpineOfIshSah(UUID ownerId) {
public SpineOfIshSah(final SpineOfIshSah card) {
public SpineOfIshSah copy() {return new SpineOfIshSah(this);
public class SpiralingDuelist extends CardImpl {
public SpiralingDuelist(UUID ownerId) {
public SpiralingDuelist(final SpiralingDuelist card) {
public SpiralingDuelist copy() {return new SpiralingDuelist(this);
public class SteelSabotage extends CardImpl {
public SteelSabotage(UUID ownerId) {
public SteelSabotage(final SteelSabotage card) {
public SteelSabotage copy() {return new SteelSabotage(this);
public class Strandwalker extends CardImpl {
public Strandwalker(UUID ownerId) {
public Strandwalker(final Strandwalker card) {
public Strandwalker copy() {return new Strandwalker(this);
public class SwordOfFeastAndFamine extends CardImpl {
public SwordOfFeastAndFamine (UUID ownerId) {
public SwordOfFeastAndFamine (final SwordOfFeastAndFamine card) {
public SwordOfFeastAndFamine copy() {return new SwordOfFeastAndFamine(this);
class SwordOfFeastAndFamineAbility extends TriggeredAbilityImpl {
public SwordOfFeastAndFamineAbility() {
public SwordOfFeastAndFamineAbility(final SwordOfFeastAndFamineAbility ability) {
public SwordOfFeastAndFamineAbility copy() {return new SwordOfFeastAndFamineAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature deals combat damage to a player, that player discards a card and you untap all lands you control.";
public class TangleHulk extends CardImpl {
public TangleHulk (UUID ownerId) {
public TangleHulk (final TangleHulk card) {
public TangleHulk copy() {return new TangleHulk(this);
public class TangleMantis extends CardImpl {
public TangleMantis (UUID ownerId) {
public TangleMantis (final TangleMantis card) {
public TangleMantis copy() {return new TangleMantis(this);
public class TezzeretAgentOfBolas extends CardImpl {
public TezzeretAgentOfBolas(UUID ownerId) {
public TezzeretAgentOfBolas(final TezzeretAgentOfBolas card) {
public TezzeretAgentOfBolas copy() {return new TezzeretAgentOfBolas(this);
class TezzeretAgentOfBolasEffect2 extends OneShotEffect {
public TezzeretAgentOfBolasEffect2() {
public TezzeretAgentOfBolasEffect2(final TezzeretAgentOfBolasEffect2 effect) {
public TezzeretAgentOfBolasEffect2 copy() {return new TezzeretAgentOfBolasEffect2(this);
public boolean apply(Game game, Ability source) {return true;
public class ThopterAssembly extends CardImpl {
public ThopterAssembly(UUID ownerId) {
public ThopterAssembly(final ThopterAssembly card) {
public ThopterAssembly copy() {return new ThopterAssembly(this);
class ThopterAssemblyTriggeredAbility extends TriggeredAbilityImpl {
ThopterAssemblyTriggeredAbility() {
ThopterAssemblyTriggeredAbility(final ThopterAssemblyTriggeredAbility ability) {
public ThopterAssemblyTriggeredAbility copy() {return new ThopterAssemblyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of your upkeep, if you control no Thopters other than {this}, return {this} to its owner's hand and put five 1/1 colorless Thopter artifact creature tokens with flying onto the battlefield";
public class ThrunTheLastTroll extends CardImpl {
public ThrunTheLastTroll(UUID ownerId) {
public ThrunTheLastTroll(final ThrunTheLastTroll card) {
public ThrunTheLastTroll copy() {return new ThrunTheLastTroll(this);
public class TineShrike extends CardImpl {
public TineShrike (UUID ownerId) {
public TineShrike (final TineShrike card) {
public TineShrike copy() {return new TineShrike(this);
public class TitanForge extends CardImpl {
public TitanForge (UUID ownerId) {
public TitanForge (final TitanForge card) {
public TitanForge copy() {return new TitanForge(this);
class TitanForgeGolemToken extends Token {
TitanForgeGolemToken() {
public class TrainingDrone extends CardImpl {
public TrainingDrone(UUID ownerId) {
public TrainingDrone(final TrainingDrone card) {
public TrainingDrone copy() {return new TrainingDrone(this);
class TrainingDroneEffect extends RestrictionEffect {
public TrainingDroneEffect() {
public TrainingDroneEffect(final TrainingDroneEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return false;return true;return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public boolean canAttack(Game game) {return false;
public TrainingDroneEffect copy() {return new TrainingDroneEffect(this);
public class TreasureMage extends CardImpl {
public TreasureMage (UUID ownerId) {
public TreasureMage (final TreasureMage card) {
public TreasureMage copy() {return new TreasureMage(this);
public class TurnTheTide extends CardImpl {
public TurnTheTide (UUID ownerId) {
public TurnTheTide (final TurnTheTide card) {
public TurnTheTide copy() {return new TurnTheTide(this);
public class UnnaturalPredation extends CardImpl {
public UnnaturalPredation (UUID ownerId) {
public UnnaturalPredation (final UnnaturalPredation card) {
public UnnaturalPredation copy() {return new UnnaturalPredation(this);
public class VedalkenAnatomist extends CardImpl {
public VedalkenAnatomist(UUID ownerId) {
public VedalkenAnatomist(final VedalkenAnatomist card) {
public VedalkenAnatomist copy() {return new VedalkenAnatomist(this);
public class VedalkenInfuser extends CardImpl {
public VedalkenInfuser (UUID ownerId) {
public VedalkenInfuser (final VedalkenInfuser card) {
public VedalkenInfuser copy() {return new VedalkenInfuser(this);
public class VictorysHerald extends CardImpl {
public VictorysHerald (UUID ownerId) {
public VictorysHerald (final VictorysHerald card) {
public VictorysHerald copy() {return new VictorysHerald(this);
public class ViridianClaw extends CardImpl {
public ViridianClaw (UUID ownerId) {
public ViridianClaw (final ViridianClaw card) {
public ViridianClaw copy() {return new ViridianClaw(this);
public class VirulentWound extends CardImpl {
public VirulentWound(UUID ownerId) {
public VirulentWound(final VirulentWound card) {
public VirulentWound copy() {return new VirulentWound(this);
class VirulentWoundEffect extends OneShotEffect {
public VirulentWoundEffect() {
public VirulentWoundEffect(final VirulentWoundEffect effect) {
public VirulentWoundEffect copy() {return new VirulentWoundEffect(this);
public boolean apply(Game game, Ability source) {return true;
class VirulentWoundDelayedTriggeredAbility extends DelayedTriggeredAbility {
public VirulentWoundDelayedTriggeredAbility(UUID target) {
public VirulentWoundDelayedTriggeredAbility(VirulentWoundDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public VirulentWoundDelayedTriggeredAbility copy() {return new VirulentWoundDelayedTriggeredAbility(this);
public String getRule() {return "When that creature dies this turn, its controller gets a poison counter.";
class VirulentWoundDelayedEffect extends OneShotEffect {
public VirulentWoundDelayedEffect(UUID target) {
public VirulentWoundDelayedEffect(final VirulentWoundDelayedEffect effect) {
public VirulentWoundDelayedEffect copy() {return new VirulentWoundDelayedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Vivisection extends CardImpl {
public Vivisection (UUID ownerId) {
public Vivisection (final Vivisection card) {
public Vivisection copy() {return new Vivisection(this);
public class WhiteSunsZenith extends CardImpl {
public WhiteSunsZenith (UUID ownerId) {
public WhiteSunsZenith (final WhiteSunsZenith card) {
public WhiteSunsZenith copy() {return new WhiteSunsZenith(this);
public class ArcboundWanderer extends CardImpl {
public ArcboundWanderer(UUID ownerId) {
public ArcboundWanderer(final ArcboundWanderer card) {
public ArcboundWanderer copy() {return new ArcboundWanderer(this);
public class AuntiesSnitch extends CardImpl {
public AuntiesSnitch(UUID ownerId) {
public AuntiesSnitch(final AuntiesSnitch card) {
public AuntiesSnitch copy() {return new AuntiesSnitch(this);
class AuntiesSnitchTriggeredAbility extends TriggeredAbilityImpl {
public AuntiesSnitchTriggeredAbility() {
public AuntiesSnitchTriggeredAbility(final AuntiesSnitchTriggeredAbility ability) {
public AuntiesSnitchTriggeredAbility copy() {return new AuntiesSnitchTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return damageEvent.isCombatDamage() && p != null && filter.match(p, getSourceId(), getControllerId(), game);
public String getRule() {return "Whenever a Goblin or Rogue you control deals combat damage to a player, if {this} is in your graveyard, you may return {this} to your hand.";
public class AuriokSalvagers extends CardImpl {
public AuriokSalvagers(UUID ownerId) {
public AuriokSalvagers(final AuriokSalvagers card) {
public AuriokSalvagers copy() {return new AuriokSalvagers(this);
public class BlindSpotGiant extends CardImpl {
public BlindSpotGiant(UUID ownerId) {
public BlindSpotGiant(final BlindSpotGiant card) {
public BlindSpotGiant copy() {return new BlindSpotGiant(this);
class BlindSpotGiantEffect extends RestrictionEffect {
public BlindSpotGiantEffect() {
public BlindSpotGiantEffect(final BlindSpotGiantEffect effect) {
public BlindSpotGiantEffect copy() {return new BlindSpotGiantEffect(this);
public boolean canAttack(Game game) {return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return false;return true;
public class BoundInSilence extends CardImpl {
public BoundInSilence(UUID ownerId) {
public BoundInSilence(final BoundInSilence card) {
public BoundInSilence copy() {return new BoundInSilence(this);
public class CrushUnderfoot extends CardImpl {
public CrushUnderfoot(UUID ownerId) {
public CrushUnderfoot(final CrushUnderfoot card) {
public CrushUnderfoot copy() {return new CrushUnderfoot(this);
class CrushUnderfootEffect extends OneShotEffect {
public CrushUnderfootEffect() {
public CrushUnderfootEffect(final CrushUnderfootEffect effect) {
public CrushUnderfootEffect copy() {return new CrushUnderfootEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DampenThought extends CardImpl {
public DampenThought(UUID ownerId) {
public DampenThought(final DampenThought card) {
public DampenThought copy() {return new DampenThought(this);
public class DeathCloud extends CardImpl {
public DeathCloud(UUID ownerId) {
public DeathCloud(final DeathCloud card) {
public DeathCloud copy() {return new DeathCloud(this);
public class DeathRattle extends CardImpl {
public DeathRattle(UUID ownerId) {
public DeathRattle(final DeathRattle card) {
public DeathRattle copy() {return new DeathRattle(this);
public class DeepcavernImp extends CardImpl {
public DeepcavernImp(UUID ownerId) {
public DeepcavernImp(final DeepcavernImp card) {
public DeepcavernImp copy() {return new DeepcavernImp(this);
public class DesperateRitual extends CardImpl {
public DesperateRitual(UUID ownerId) {
public DesperateRitual(final DesperateRitual card) {
public DesperateRitual copy() {return new DesperateRitual(this);
public class DoublingSeason extends CardImpl {
public DoublingSeason(UUID ownerId) {
public DoublingSeason(final DoublingSeason card) {
public DoublingSeason copy() {return new DoublingSeason(this);
class DoublingSeasonTokenEffect extends ReplacementEffectImpl {
public DoublingSeasonTokenEffect() {
public DoublingSeasonTokenEffect(final DoublingSeasonTokenEffect effect) {
public DoublingSeasonTokenEffect copy() {return new DoublingSeasonTokenEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.CREATE_TOKEN);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
class DoublingSeasonCounterEffect extends ReplacementEffectImpl {
DoublingSeasonCounterEffect() {
DoublingSeasonCounterEffect(final DoublingSeasonCounterEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ADD_COUNTERS;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public DoublingSeasonCounterEffect copy() {return new DoublingSeasonCounterEffect(this);
public class DreamspoilerWitches extends CardImpl {
public DreamspoilerWitches(UUID ownerId) {
public DreamspoilerWitches(final DreamspoilerWitches card) {
public DreamspoilerWitches copy() {return new DreamspoilerWitches(this);
class DreamspoilerWitchesTriggeredAbility extends TriggeredAbilityImpl {
DreamspoilerWitchesTriggeredAbility() {
DreamspoilerWitchesTriggeredAbility(final DreamspoilerWitchesTriggeredAbility ability) {
public DreamspoilerWitchesTriggeredAbility copy() {return new DreamspoilerWitchesTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId)
public String getRule() {return "Whenever you cast a spell during an opponent's turn, " + super.getRule();
public class EarwigSquad extends CardImpl {
public EarwigSquad(UUID ownerId) {
public EarwigSquad(final EarwigSquad card) {
public EarwigSquad copy() {return new EarwigSquad(this);
class EarwigSquadEffect extends OneShotEffect {
public EarwigSquadEffect() {
public EarwigSquadEffect(final EarwigSquadEffect effect) {
public EarwigSquadEffect copy() {return new EarwigSquadEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EchoingCourage extends CardImpl {
public EchoingCourage(UUID ownerId) {
public EchoingCourage(final EchoingCourage card) {
public EchoingCourage copy() {return new EchoingCourage(this);
class EchoingCourageEffect extends OneShotEffect {
public EchoingCourageEffect() {
public EchoingCourageEffect(final EchoingCourageEffect effect) {
public EchoingCourageEffect copy() {return new EchoingCourageEffect(this);
public boolean apply(Game game, Ability source) {
public class GlacialRay extends CardImpl {
public GlacialRay(UUID ownerId) {
public GlacialRay(final GlacialRay card) {
public GlacialRay copy() {return new GlacialRay(this);
public class GrandArbiterAugustinIV extends CardImpl {
public GrandArbiterAugustinIV(UUID ownerId) {
public GrandArbiterAugustinIV(final GrandArbiterAugustinIV card) {
public GrandArbiterAugustinIV copy() {return new GrandArbiterAugustinIV(this);
GrandArbiterAugustinIVCostIncreaseEffect() {
GrandArbiterAugustinIVCostIncreaseEffect(GrandArbiterAugustinIVCostIncreaseEffect effect) {return true;return true;return false;
public GrandArbiterAugustinIVCostIncreaseEffect copy() {return new GrandArbiterAugustinIVCostIncreaseEffect(this);
public class GrinningIgnus extends CardImpl {
public GrinningIgnus(UUID ownerId) {
public GrinningIgnus(final GrinningIgnus card) {
public GrinningIgnus copy() {return new GrinningIgnus(this);
public class Imperiosaur extends CardImpl {
public Imperiosaur(UUID ownerId) {
public Imperiosaur(final Imperiosaur card) {
public Imperiosaur copy() {return new Imperiosaur(this);
class ImperiosaurStaticAbility extends StaticAbility {
public ImperiosaurStaticAbility() {
public ImperiosaurStaticAbility(ImperiosaurStaticAbility ability) {
public ImperiosaurStaticAbility copy() {return new ImperiosaurStaticAbility(this);
public String getRule() {return "Spend only mana produced by basic lands to cast {this}.";
public class IncrementalGrowth extends CardImpl {
public IncrementalGrowth(UUID ownerId) {
public IncrementalGrowth(final IncrementalGrowth card) {
public IncrementalGrowth copy() {return new IncrementalGrowth(this);
class IncrementalGrowthEffect extends OneShotEffect {
public IncrementalGrowthEffect() {
public IncrementalGrowthEffect(final IncrementalGrowthEffect effect) {
public IncrementalGrowthEffect copy() {return new IncrementalGrowthEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class JhoiraOfTheGhitu extends CardImpl {
public JhoiraOfTheGhitu(UUID ownerId) {
public JhoiraOfTheGhitu(final JhoiraOfTheGhitu card) {
public JhoiraOfTheGhitu copy() {return new JhoiraOfTheGhitu(this);
class JhoiraOfTheGhituSuspendEffect extends OneShotEffect {
public JhoiraOfTheGhituSuspendEffect() {
public JhoiraOfTheGhituSuspendEffect(final JhoiraOfTheGhituSuspendEffect effect) {
public JhoiraOfTheGhituSuspendEffect copy() {return new JhoiraOfTheGhituSuspendEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class KithkinGreatheart extends CardImpl {
public KithkinGreatheart(UUID ownerId) {
public KithkinGreatheart(final KithkinGreatheart card) {
public KithkinGreatheart copy() {return new KithkinGreatheart(this);
public class LatchkeyFaerie extends CardImpl {
public LatchkeyFaerie(UUID ownerId) {
public LatchkeyFaerie(final LatchkeyFaerie card) {
public LatchkeyFaerie copy() {return new LatchkeyFaerie(this);
public class LogicKnot extends CardImpl {
public LogicKnot(UUID ownerId) {
public LogicKnot(final LogicKnot card) {
public LogicKnot copy() {return new LogicKnot(this);
public class MarshFlitter extends CardImpl {
public MarshFlitter(UUID ownerId) {
public MarshFlitter(final MarshFlitter card) {
public MarshFlitter copy() {return new MarshFlitter(this);
public class MaskedAdmirers extends CardImpl {
public MaskedAdmirers(UUID ownerId) {effect.setText("return {this} from your graveyard to your hand");
public MaskedAdmirers(final MaskedAdmirers card) {
public MaskedAdmirers copy() {return new MaskedAdmirers(this);
public class MoltenDisaster extends CardImpl {
public MoltenDisaster(UUID ownerId) {
public MoltenDisaster(final MoltenDisaster card) {
public MoltenDisaster copy() {return new MoltenDisaster(this);
MoltenDisasterSplitSecondEffect() {
MoltenDisasterSplitSecondEffect(final MoltenDisasterSplitSecondEffect effect) {
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast spells or activate abilities that aren't mana abilities (Split second).";
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL || event.getType() == GameEvent.EventType.ACTIVATE_ABILITY;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public boolean apply(Game game, Ability source) {return false;
public MoltenDisasterSplitSecondEffect copy() {return new MoltenDisasterSplitSecondEffect(this);
class MoltenDisasterEffect extends OneShotEffect {
public MoltenDisasterEffect() {
public MoltenDisasterEffect(final MoltenDisasterEffect effect) {
public MoltenDisasterEffect copy() {return new MoltenDisasterEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class MyrRetriever extends CardImpl {
public MyrRetriever(UUID ownerId) {effect.setText("return another target artifact card from your graveyard to your hand");
public MyrRetriever(final MyrRetriever card) {
public MyrRetriever copy() {return new MyrRetriever(this);
public class Peppersmoke extends CardImpl {
public Peppersmoke(UUID ownerId) {
public Peppersmoke(final Peppersmoke card) {
public Peppersmoke copy() {return new Peppersmoke(this);
public class PetalsOfInsight extends CardImpl {
public PetalsOfInsight(UUID ownerId) {
public PetalsOfInsight(final PetalsOfInsight card) {
public PetalsOfInsight copy() {return new PetalsOfInsight(this);
class PetalsOfInsightEffect extends OneShotEffect {
PetalsOfInsightEffect() {this.staticText = "Look at the top three cards of your library. You may put those cards on the bottom of your library in any order. If you do, return {this} to its owner's hand. Otherwise, draw three cards";
PetalsOfInsightEffect(final PetalsOfInsightEffect effect) {
public PetalsOfInsightEffect copy() {return new PetalsOfInsightEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class PyromancersSwath extends CardImpl {
public PyromancersSwath(UUID ownerId) {
public PyromancersSwath(final PyromancersSwath card) {
public PyromancersSwath copy() {return new PyromancersSwath(this);
class PyromancersSwathReplacementEffect extends ReplacementEffectImpl {
PyromancersSwathReplacementEffect() {
PyromancersSwathReplacementEffect(final PyromancersSwathReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return object != null && (object.getCardType().contains(CardType.INSTANT) || object.getCardType().contains(CardType.SORCERY));return false;
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public PyromancersSwathReplacementEffect copy() {return new PyromancersSwathReplacementEffect(this);
public class ReachOfBranches extends CardImpl {
public ReachOfBranches(UUID ownerId) {
public ReachOfBranches(final ReachOfBranches card) {
public ReachOfBranches copy() {return new ReachOfBranches(this);
class TreefolkShamanToken extends Token {
TreefolkShamanToken() {
public void adjustCosts(Ability ability, Game game) {return new RiftElemental(this);
class RemoveCounterFromCardCost extends CostImpl {
public RemoveCounterFromCardCost(TargetCard target) {
public RemoveCounterFromCardCost(TargetCard target, CounterType counterTypeToRemove) {
public RemoveCounterFromCardCost(final RemoveCounterFromCardCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return target.canChoose(controllerId, game);
private String setText() {return "Remove a time counter from a permanent you control or suspended card you own";
public RemoveCounterFromCardCost copy() {return new RemoveCounterFromCardCost(this);
public class RunedStalactite extends CardImpl {
public RunedStalactite(UUID ownerId) {
public RunedStalactite(final RunedStalactite card) {
public RunedStalactite copy() {return new RunedStalactite(this);
public class SporolothAncient extends CardImpl {
public SporolothAncient(UUID ownerId) {
public SporolothAncient(final SporolothAncient card) {
public SporolothAncient copy() {return new SporolothAncient(this);
public class StirThePride extends CardImpl {
public StirThePride(UUID ownerId) {
public StirThePride(final StirThePride card) {
public StirThePride copy() {return new StirThePride(this);
public class StonehewerGiant extends CardImpl {
public StonehewerGiant(UUID ownerId) {
public StonehewerGiant(final StonehewerGiant card) {
public StonehewerGiant copy() {return new StonehewerGiant(this);
class StonehewerGiantEffect extends OneShotEffect {
public StonehewerGiantEffect() {
public StonehewerGiantEffect(final StonehewerGiantEffect effect) {
public StonehewerGiantEffect copy() {return new StonehewerGiantEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class TakePossession extends CardImpl {
public TakePossession(UUID ownerId) {
public TakePossession(final TakePossession card) {
public TakePossession copy() {return new TakePossession(this);
public class TestOfFaith extends CardImpl {
public TestOfFaith(UUID ownerId) {
public TestOfFaith(final TestOfFaith card) {
public TestOfFaith copy() {return new TestOfFaith(this);
class TestOfFaithPreventDamageTargetEffect extends PreventionEffectImpl {
public TestOfFaithPreventDamageTargetEffect(Duration duration) {
public TestOfFaithPreventDamageTargetEffect(final TestOfFaithPreventDamageTargetEffect effect) {
public TestOfFaithPreventDamageTargetEffect copy() {return new TestOfFaithPreventDamageTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class ThievingSprite extends CardImpl {
public ThievingSprite(UUID ownerId) {
public ThievingSprite(final ThievingSprite card) {
public ThievingSprite copy() {return new ThievingSprite(this);
class ThievingSpriteEffect extends OneShotEffect {
public ThievingSpriteEffect() {
public ThievingSpriteEffect(final ThievingSpriteEffect effect) {
public ThievingSpriteEffect copy() {return new ThievingSpriteEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class ThundercloudShaman extends CardImpl {
public ThundercloudShaman(UUID ownerId) {
public ThundercloudShaman(final ThundercloudShaman card) {
public ThundercloudShaman copy() {return new ThundercloudShaman(this);
public class Tombstalker extends CardImpl {
public Tombstalker(UUID ownerId) {
public Tombstalker(final Tombstalker card) {
public Tombstalker copy() {return new Tombstalker(this);
public class ToothAndNail extends CardImpl {
public ToothAndNail(UUID ownerId) {
public ToothAndNail(final ToothAndNail card) {
public ToothAndNail copy() {return new ToothAndNail(this);
class ToothAndNailPutCreatureOnBattlefieldEffect extends OneShotEffect {
public ToothAndNailPutCreatureOnBattlefieldEffect() {
public ToothAndNailPutCreatureOnBattlefieldEffect(final ToothAndNailPutCreatureOnBattlefieldEffect effect) {
public ToothAndNailPutCreatureOnBattlefieldEffect copy() {return new ToothAndNailPutCreatureOnBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return false;return controller.moveCards(new CardsImpl(target.getTargets()).getCards(game),return false;
public class TrygonPredator extends CardImpl {
public TrygonPredator(UUID ownerId) {
public TrygonPredator(final TrygonPredator card) {
public TrygonPredator copy() {return new TrygonPredator(this);
class TrygonPredatorTriggeredAbility extends TriggeredAbilityImpl {
public TrygonPredatorTriggeredAbility() {
public TrygonPredatorTriggeredAbility(final TrygonPredatorTriggeredAbility ability) {
public TrygonPredatorTriggeredAbility copy() {return new TrygonPredatorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, you may destroy target artifact or enchantment that player controls.";
public class VedalkenShackles extends CardImpl {
public VedalkenShackles(UUID ownerId) {
public VedalkenShackles(final VedalkenShackles card) {
public VedalkenShackles copy() {return new VedalkenShackles(this);
class PowerIslandPredicate implements ObjectPlayerPredicate<ObjectPlayer<Permanent>> {
public boolean apply(ObjectPlayer<Permanent> input, Game game) {return true;return false;
public String toString() {return "creature with power less than or equal to the number of Islands you control";
public class WarrenPilferers extends CardImpl {
public WarrenPilferers(UUID ownerId) {
public WarrenPilferers(final WarrenPilferers card) {
public WarrenPilferers copy() {return new WarrenPilferers(this);
class WarrenPilferersReturnEffect extends OneShotEffect {
public WarrenPilferersReturnEffect() {staticText = "return target creature card from your graveyard to your hand. If that card is a Goblin card, Warren Pilferers gains haste until end of turn";
public WarrenPilferersReturnEffect(final WarrenPilferersReturnEffect effect) {
public WarrenPilferersReturnEffect copy() {return new WarrenPilferersReturnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WarrenWeirding extends CardImpl {
public WarrenWeirding(UUID ownerId) {
public WarrenWeirding(final WarrenWeirding card) {
public WarrenWeirding copy() {return new WarrenWeirding(this);
class WarrenWeirdingEffect extends OneShotEffect {
WarrenWeirdingEffect ( ) {
WarrenWeirdingEffect ( WarrenWeirdingEffect effect ) {
public boolean apply(Game game, Ability source) {return true;return false;
public WarrenWeirdingEffect copy() {return new WarrenWeirdingEffect(this);
public class AllSunsDawn extends CardImpl {
public AllSunsDawn(UUID ownerId) {
public AllSunsDawn(final AllSunsDawn card) {
public AllSunsDawn copy() {return new AllSunsDawn(this);
class AllSunsDawnEffect extends OneShotEffect {
public AllSunsDawnEffect() {this.staticText = "For each color, return up to one target card of that color from your graveyard to your hand. Exile {this}";
public AllSunsDawnEffect(final AllSunsDawnEffect effect) {
public AllSunsDawnEffect copy() {return new AllSunsDawnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class KarplusanStrider extends CardImpl {
public KarplusanStrider(UUID ownerId) {
public KarplusanStrider(final KarplusanStrider card) {
public KarplusanStrider copy() {return new KarplusanStrider(this);
KarplusanStriderEffect() {
KarplusanStriderEffect(final KarplusanStriderEffect effect) {
public KarplusanStriderEffect copy() {return new KarplusanStriderEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return sourcePermanent.getLogName() + " can't be the target of blue or black spells";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TARGET;
public boolean applies(GameEvent event, Ability source, Game game) {return sourceSpell.getColor(game).isBlue() || sourceSpell.getColor(game).isBlack();return false;
public class WorldheartPhoenix extends CardImpl {
public WorldheartPhoenix(UUID ownerId) {
public WorldheartPhoenix(final WorldheartPhoenix card) {
public WorldheartPhoenix copy() {return new WorldheartPhoenix(this);
class WorldheartPhoenixPlayEffect extends AsThoughEffectImpl {
public WorldheartPhoenixPlayEffect() {
public WorldheartPhoenixPlayEffect(final WorldheartPhoenixPlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public WorldheartPhoenixPlayEffect copy() {return new WorldheartPhoenixPlayEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
class WorldheartPhoenixEntersBattlefieldEffect extends OneShotEffect {
public WorldheartPhoenixEntersBattlefieldEffect() {
public WorldheartPhoenixEntersBattlefieldEffect(final WorldheartPhoenixEntersBattlefieldEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public WorldheartPhoenixEntersBattlefieldEffect copy() {return new WorldheartPhoenixEntersBattlefieldEffect(this);return new AmbassadorOak(this);
public class BlightsoilDruid extends CardImpl {
public BlightsoilDruid(UUID ownerId) {
public BlightsoilDruid(final BlightsoilDruid card) {
public BlightsoilDruid copy() {return new BlightsoilDruid(this);
public class BoldwyrIntimidator extends CardImpl {
public BoldwyrIntimidator(UUID ownerId) {
public BoldwyrIntimidator(final BoldwyrIntimidator card) {
public BoldwyrIntimidator copy() {return new BoldwyrIntimidator(this);
class BoldwyrIntimidatorEffect extends RestrictionEffect {
BoldwyrIntimidatorEffect() {
BoldwyrIntimidatorEffect(final BoldwyrIntimidatorEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return !blocker.getSubtype().contains("Coward");return true;
public BoldwyrIntimidatorEffect copy() {return new BoldwyrIntimidatorEffect(this);
public class BoskBanneret extends CardImpl {
public BoskBanneret(UUID ownerId) {
public BoskBanneret(final BoskBanneret card) {
public BoskBanneret copy() {return new BoskBanneret(this);
public class BramblewoodParagon extends CardImpl {
public BramblewoodParagon(UUID ownerId) {
public BramblewoodParagon(final BramblewoodParagon card) {
public BramblewoodParagon copy() {return new BramblewoodParagon(this);
class BramblewoodParagonReplacementEffect extends ReplacementEffectImpl {
BramblewoodParagonReplacementEffect() {
BramblewoodParagonReplacementEffect(BramblewoodParagonReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return creature != null && creature.getControllerId().equals(source.getControllerId())
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public BramblewoodParagonReplacementEffect copy() {return new BramblewoodParagonReplacementEffect(this);
public class BrighthearthBanneret extends CardImpl {
public BrighthearthBanneret(UUID ownerId) {
public BrighthearthBanneret(final BrighthearthBanneret card) {
public BrighthearthBanneret copy() {return new BrighthearthBanneret(this);
public class BurrentonShieldBearers extends CardImpl {
public BurrentonShieldBearers(UUID ownerId) {
public BurrentonShieldBearers(final BurrentonShieldBearers card) {
public BurrentonShieldBearers copy() {return new BurrentonShieldBearers(this);
public class CennsTactician extends CardImpl {
public CennsTactician(UUID ownerId) {
public CennsTactician(final CennsTactician card) {
public CennsTactician copy() {return new CennsTactician(this);
public class ChameleonColossus extends CardImpl {
public ChameleonColossus(UUID ownerId) {
public ChameleonColossus(final ChameleonColossus card) {
public ChameleonColossus copy() {return new ChameleonColossus(this);
public class ChangelingSentinel extends CardImpl {
public ChangelingSentinel(UUID ownerId) {
public ChangelingSentinel(final ChangelingSentinel card) {
public ChangelingSentinel copy() {return new ChangelingSentinel(this);
public class CloakAndDagger extends CardImpl {
public CloakAndDagger(UUID ownerId) {
public CloakAndDagger(final CloakAndDagger card) {
public CloakAndDagger copy() {return new CloakAndDagger(this);
public class CountrysideCrusher extends CardImpl {
public CountrysideCrusher(UUID ownerId) {
public CountrysideCrusher(final CountrysideCrusher card) {
public CountrysideCrusher copy() {return new CountrysideCrusher(this);
class CountrysideCrusherEffect extends OneShotEffect {
public CountrysideCrusherEffect() {
public CountrysideCrusherEffect(final CountrysideCrusherEffect effect) {
public CountrysideCrusherEffect copy() {return new CountrysideCrusherEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CreamOfTheCrop extends CardImpl {
public CreamOfTheCrop(UUID ownerId) {
public CreamOfTheCrop(final CreamOfTheCrop card) {
public CreamOfTheCrop copy() {return new CreamOfTheCrop(this);
class CreamOfTheCropEffect extends OneShotEffect {
CreamOfTheCropEffect() {
CreamOfTheCropEffect(final CreamOfTheCropEffect effect) {
public CreamOfTheCropEffect copy() {return new CreamOfTheCropEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DailyRegimen extends CardImpl {
public DailyRegimen(UUID ownerId) {
public DailyRegimen(final DailyRegimen card) {
public DailyRegimen copy() {return new DailyRegimen(this);
public class DeclarationOfNaught extends CardImpl {
public DeclarationOfNaught(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public DeclarationOfNaught(final DeclarationOfNaught card) {
public DeclarationOfNaught copy() {return new DeclarationOfNaught(this);
public class Deglamer extends CardImpl {
public Deglamer(UUID ownerId) {
public Deglamer(final Deglamer card) {
public Deglamer copy() {return new Deglamer(this);
class DeglamerShuffleIntoLibraryEffect extends OneShotEffect {
public DeglamerShuffleIntoLibraryEffect() {
public DeglamerShuffleIntoLibraryEffect(final DeglamerShuffleIntoLibraryEffect effect) {
public DeglamerShuffleIntoLibraryEffect copy() {return new DeglamerShuffleIntoLibraryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DewdropSpy extends CardImpl {
public DewdropSpy(UUID ownerId) {
public DewdropSpy(final DewdropSpy card) {
public DewdropSpy copy() {return new DewdropSpy(this);
public class DistantMelody extends CardImpl {
public DistantMelody(UUID ownerId) {
public DistantMelody(final DistantMelody card) {
public DistantMelody copy() {return new DistantMelody(this);
class DistantMelodyEffect extends OneShotEffect {
DistantMelodyEffect() {
DistantMelodyEffect(final DistantMelodyEffect effect) {
public DistantMelodyEffect copy() {return new DistantMelodyEffect(this);
public boolean apply(Game game, Ability source) {return false;return new DrawCardSourceControllerEffect(new PermanentsOnBattlefieldCount(filter)).apply(game, source);return false;
public class DivinersWand extends CardImpl {
public DivinersWand(UUID ownerId) {
public DivinersWand(final DivinersWand card) {
public DivinersWand copy() {return new DivinersWand(this);
public class EverbarkShaman extends CardImpl {
public EverbarkShaman(UUID ownerId) {
public EverbarkShaman(final EverbarkShaman card) {
public EverbarkShaman copy() {return new EverbarkShaman(this);
public class FencerClique extends CardImpl {
public FencerClique(UUID ownerId) {
public FencerClique(final FencerClique card) {
public FencerClique copy() {return new FencerClique(this);
public class FendeepSummoner extends CardImpl {
public FendeepSummoner(UUID ownerId) {
public FendeepSummoner(final FendeepSummoner card) {
public FendeepSummoner copy() {return new FendeepSummoner(this);
class FendeepSummonerToken extends Token {
public FendeepSummonerToken() {
public class Festercreep extends CardImpl {
public Festercreep(UUID ownerId) {
public Festercreep(final Festercreep card) {
public Festercreep copy() {return new Festercreep(this);
public class FinalStingFaerie extends CardImpl {
public FinalStingFaerie(UUID ownerId) {
public FinalStingFaerie(final FinalStingFaerie card) {
public FinalStingFaerie copy() {return new FinalStingFaerie(this);
public class FireJuggler extends CardImpl {
public FireJuggler(UUID ownerId) {
public FireJuggler(final FireJuggler card) {
public FireJuggler copy() {return new FireJuggler(this);
public class Floodchaser extends CardImpl {
public Floodchaser(UUID ownerId) {
public Floodchaser(final Floodchaser card) {
public Floodchaser copy() {return new Floodchaser(this);
public class Forfend extends CardImpl {
public Forfend(UUID ownerId) {
public Forfend(final Forfend card) {
public Forfend copy() {return new Forfend(this);
public class FrogtosserBanneret extends CardImpl {
public FrogtosserBanneret(UUID ownerId) {
public FrogtosserBanneret(final FrogtosserBanneret card) {
public FrogtosserBanneret copy() {return new FrogtosserBanneret(this);
public class GameTrailChangeling extends CardImpl {
public GameTrailChangeling(UUID ownerId) {
public GameTrailChangeling(final GameTrailChangeling card) {
public GameTrailChangeling copy() {return new GameTrailChangeling(this);
public class GiltLeafArchdruid extends CardImpl {
public GiltLeafArchdruid(UUID ownerId) {
public GiltLeafArchdruid(final GiltLeafArchdruid card) {
public GiltLeafArchdruid copy() {return new GiltLeafArchdruid(this);
class GainControlAllLandsEffect extends ContinuousEffectImpl {
public GainControlAllLandsEffect(Duration duration) {
public GainControlAllLandsEffect(final GainControlAllLandsEffect effect) {
public GainControlAllLandsEffect copy() {return new GainControlAllLandsEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getText(Mode mode) {return "Gain control of all lands target player controls";
public class GreatbowDoyen extends CardImpl {
public GreatbowDoyen(UUID ownerId) {
public GreatbowDoyen(final GreatbowDoyen card) {
public GreatbowDoyen copy() {return new GreatbowDoyen(this);
class GreatbowDoyenTriggeredAbility extends TriggeredAbilityImpl {
public GreatbowDoyenTriggeredAbility() {
public GreatbowDoyenTriggeredAbility(final GreatbowDoyenTriggeredAbility ability) {
public GreatbowDoyenTriggeredAbility copy() {return new GreatbowDoyenTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an Archer you control deals damage to a creature, " + super.getRule();
class GreatbowDoyenEffect extends OneShotEffect {
public GreatbowDoyenEffect() {
public GreatbowDoyenEffect(final GreatbowDoyenEffect effect) {
public GreatbowDoyenEffect copy() {return new GreatbowDoyenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GrimoireThief extends CardImpl {
public GrimoireThief(UUID ownerId) {
public GrimoireThief(final GrimoireThief card) {
public GrimoireThief copy() {return new GrimoireThief(this);
class GrimoireThiefExileEffect extends OneShotEffect {
public GrimoireThiefExileEffect() {
public GrimoireThiefExileEffect(final GrimoireThiefExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GrimoireThiefExileEffect copy() {return new GrimoireThiefExileEffect(this);
class GrimoireThiefLookEffect extends AsThoughEffectImpl {
public GrimoireThiefLookEffect() {
public GrimoireThiefLookEffect(final GrimoireThiefLookEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public GrimoireThiefLookEffect copy() {return new GrimoireThiefLookEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return false;return true;return false;
class GrimoireThiefCounterspellEffect extends OneShotEffect {
public GrimoireThiefCounterspellEffect() {
public GrimoireThiefCounterspellEffect(final GrimoireThiefCounterspellEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GrimoireThiefCounterspellEffect copy() {return new GrimoireThiefCounterspellEffect(this);
public class HeritageDruid extends CardImpl {
public HeritageDruid(UUID ownerId) {
public HeritageDruid(final HeritageDruid card) {
public HeritageDruid copy() {return new HeritageDruid(this);
public class HuntingTriad extends CardImpl {
public HuntingTriad(UUID ownerId) {
public HuntingTriad(final HuntingTriad card) {
public HuntingTriad copy() {return new HuntingTriad(this);
public class IdyllicTutor extends CardImpl {
public IdyllicTutor(UUID ownerId) {
public IdyllicTutor(final IdyllicTutor card) {
public IdyllicTutor copy() {return new IdyllicTutor(this);return new IndomitableAncients(this);
public class InkDissolver extends CardImpl {
public InkDissolver(UUID ownerId) {
public InkDissolver(final InkDissolver card) {
public InkDissolver copy() {return new InkDissolver(this);
public class KinsbaileCavalier extends CardImpl {
public KinsbaileCavalier(UUID ownerId) {
public KinsbaileCavalier(final KinsbaileCavalier card) {
public KinsbaileCavalier copy() {return new KinsbaileCavalier(this);
public class KithkinZephyrnaut extends CardImpl {
public KithkinZephyrnaut(UUID ownerId) {
public KithkinZephyrnaut(final KithkinZephyrnaut card) {
public KithkinZephyrnaut copy() {return new KithkinZephyrnaut(this);
public class KnowledgeExploitation extends CardImpl {
public KnowledgeExploitation(UUID ownerId) {
public KnowledgeExploitation(final KnowledgeExploitation card) {
public KnowledgeExploitation copy() {return new KnowledgeExploitation(this);
class KnowledgeExploitationEffect extends OneShotEffect {
KnowledgeExploitationEffect() {
KnowledgeExploitationEffect(final KnowledgeExploitationEffect effect) {
public KnowledgeExploitationEffect copy() {return new KnowledgeExploitationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LeafCrownedElder extends CardImpl {
public LeafCrownedElder(UUID ownerId) {
public LeafCrownedElder(final LeafCrownedElder card) {
public LeafCrownedElder copy() {return new LeafCrownedElder(this);
class LeafCrownedElderPlayEffect extends OneShotEffect {
public LeafCrownedElderPlayEffect() {
public LeafCrownedElderPlayEffect(final LeafCrownedElderPlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public LeafCrownedElderPlayEffect copy() {return new LeafCrownedElderPlayEffect(this);
public class LightningCrafter extends CardImpl {
public LightningCrafter(UUID ownerId) {
public LightningCrafter(final LightningCrafter card) {
public LightningCrafter copy() {return new LightningCrafter(this);
public class LuminescentRain extends CardImpl {
public LuminescentRain(UUID ownerId) {
public LuminescentRain(final LuminescentRain card) {
public LuminescentRain copy() {return new LuminescentRain(this);
class LuminescentRainEffect extends OneShotEffect {
LuminescentRainEffect() {
LuminescentRainEffect(final LuminescentRainEffect effect) {
public LuminescentRainEffect copy() {return new LuminescentRainEffect(this);
 public boolean apply(Game game, Ability source) {return false;return new GainLifeEffect(new PermanentsOnBattlefieldCount(filter, 2)).apply(game, source);return false;
public class LunkErrant extends CardImpl {
public LunkErrant(UUID ownerId) {
public LunkErrant(final LunkErrant card) {
public LunkErrant copy() {return new LunkErrant(this);
public class LysAlanaBowmaster extends CardImpl {
public LysAlanaBowmaster(UUID ownerId) {
public LysAlanaBowmaster(final LysAlanaBowmaster card) {
public LysAlanaBowmaster copy() {return new LysAlanaBowmaster(this);
public class MaralenOfTheMornsong extends CardImpl {
public MaralenOfTheMornsong(UUID ownerId) {
public MaralenOfTheMornsong(final MaralenOfTheMornsong card) {
public MaralenOfTheMornsong copy() {return new MaralenOfTheMornsong(this);
public MaralenOfTheMornsongEffect() {
public MaralenOfTheMornsongEffect(final MaralenOfTheMornsongEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MaralenOfTheMornsongEffect copy() {return new MaralenOfTheMornsongEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
class MaralenOfTheMornsongEffect2 extends OneShotEffect {
public MaralenOfTheMornsongEffect2() {
public MaralenOfTheMornsongEffect2(final MaralenOfTheMornsongEffect2 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MaralenOfTheMornsongEffect2 copy() {return new MaralenOfTheMornsongEffect2(this);return new Meadowboon(this);
public boolean apply(Game game, Ability source) {return true;return false;return new MeadowboonEffect(this);
public class MerrowWitsniper extends CardImpl {
public MerrowWitsniper(UUID ownerId) {
public MerrowWitsniper(final MerrowWitsniper card) {
public MerrowWitsniper copy() {return new MerrowWitsniper(this);
public class MoongloveChangeling extends CardImpl {
public MoongloveChangeling(UUID ownerId) {
public MoongloveChangeling(final MoongloveChangeling card) {
public MoongloveChangeling copy() {return new MoongloveChangeling(this);
public class MorselTheft extends CardImpl {
public MorselTheft(UUID ownerId) {
public MorselTheft(final MorselTheft card) {
public MorselTheft copy() {return new MorselTheft(this);
public class MothdustChangeling extends CardImpl {
public MothdustChangeling(UUID ownerId) {
public MothdustChangeling(final MothdustChangeling card) {
public MothdustChangeling copy() {return new MothdustChangeling(this);
public class MudbuttonClanger extends CardImpl {
public MudbuttonClanger(UUID ownerId) {
public MudbuttonClanger(final MudbuttonClanger card) {
public MudbuttonClanger copy() {return new MudbuttonClanger(this);
public class MurmuringBosk extends CardImpl {
public MurmuringBosk(UUID ownerId) {
public MurmuringBosk(final MurmuringBosk card) {
public MurmuringBosk copy() {return new MurmuringBosk(this);
public class Mutavault extends CardImpl {
public Mutavault(UUID ownerId) {
public Mutavault(final Mutavault card) {
public Mutavault copy() {return new Mutavault(this);
class MutavaultToken extends Token {
public MutavaultToken() {
public class Nevermaker extends CardImpl {
public Nevermaker(UUID ownerId) {
public Nevermaker(final Nevermaker card) {
public Nevermaker copy() {return new Nevermaker(this);
public class NotoriousThrong extends CardImpl {
public NotoriousThrong(UUID ownerId) {
public NotoriousThrong(final NotoriousThrong card) {
public NotoriousThrong copy() {return new NotoriousThrong(this);
class NotoriousThrongEffect extends OneShotEffect {
public NotoriousThrongEffect() {
public NotoriousThrongEffect(NotoriousThrongEffect effect) {
public NotoriousThrongEffect copy() {return new NotoriousThrongEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ObsidianBattleAxe extends CardImpl {
public ObsidianBattleAxe(UUID ownerId) {
public ObsidianBattleAxe(final ObsidianBattleAxe card) {
public ObsidianBattleAxe copy() {return new ObsidianBattleAxe(this);
public class Offalsnout extends CardImpl {
public Offalsnout(UUID ownerId) {
public Offalsnout(final Offalsnout card) {
public Offalsnout copy() {return new Offalsnout(this);
public class OonasBlackguard extends CardImpl {
public OonasBlackguard(UUID ownerId) {
public OonasBlackguard(final OonasBlackguard card) {
public OonasBlackguard copy() {return new OonasBlackguard(this);
class OonasBlackguardReplacementEffect extends ReplacementEffectImpl {
OonasBlackguardReplacementEffect() {
OonasBlackguardReplacementEffect(OonasBlackguardReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public OonasBlackguardReplacementEffect copy() {return new OonasBlackguardReplacementEffect(this);
class OonasBlackguardTriggeredAbility extends TriggeredAbilityImpl {
public OonasBlackguardTriggeredAbility() {
public OonasBlackguardTriggeredAbility(final OonasBlackguardTriggeredAbility ability) {
public OonasBlackguardTriggeredAbility copy() {return new OonasBlackguardTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control with a +1/+1 counter on it deals combat damage to a player, that player discards a card.";
public class OrchardWarden extends CardImpl {
public OrchardWarden(UUID ownerId) {
public OrchardWarden(final OrchardWarden card) {
public OrchardWarden copy() {return new OrchardWarden(this);
class OrchardWardenffect extends OneShotEffect {
public OrchardWardenffect() {
public OrchardWardenffect(final OrchardWardenffect effect) {
public OrchardWardenffect copy() {return new OrchardWardenffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OrderOfTheGoldenCricket extends CardImpl {
public OrderOfTheGoldenCricket(UUID ownerId) {
public OrderOfTheGoldenCricket(final OrderOfTheGoldenCricket card) {
public OrderOfTheGoldenCricket copy() {return new OrderOfTheGoldenCricket(this);
public class PreeminentCaptain extends CardImpl {
public PreeminentCaptain(UUID ownerId) {
public PreeminentCaptain(final PreeminentCaptain card) {
public PreeminentCaptain copy() {return new PreeminentCaptain(this);
class PreeminentCaptainEffect extends OneShotEffect {
public PreeminentCaptainEffect() {
public PreeminentCaptainEffect(final PreeminentCaptainEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PreeminentCaptainEffect copy() {return new PreeminentCaptainEffect(this);
public class PricklyBoggart extends CardImpl {
public PricklyBoggart(UUID ownerId) {
public PricklyBoggart(final PricklyBoggart card) {
public PricklyBoggart copy() {return new PricklyBoggart(this);
public class PrimalBeyond extends CardImpl {
public PrimalBeyond(UUID ownerId) {
public PrimalBeyond(final PrimalBeyond card) {
public PrimalBeyond copy() {return new PrimalBeyond(this);
class PrimalBeyondManaBuilder extends ConditionalManaBuilder {return new PrimalBeyondConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast Elemental spells or activate abilities of Elementals";
class PrimalBeyondConditionalMana extends ConditionalMana {
public PrimalBeyondConditionalMana(Mana mana) {
class PrimalBeyondManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return object != null && object.hasSubtype("Elemental");
public class PyroclastConsul extends CardImpl {
public PyroclastConsul(UUID ownerId) {
public PyroclastConsul(final PyroclastConsul card) {
public PyroclastConsul copy() {return new PyroclastConsul(this);
public class RageForger extends CardImpl {
public RageForger(UUID ownerId) {
public RageForger(final RageForger card) {
public RageForger copy() {return new RageForger(this);
class RageForgerDamageEffect extends OneShotEffect {
public RageForgerDamageEffect() {
public RageForgerDamageEffect(final RageForgerDamageEffect effect) {
public RageForgerDamageEffect copy() {return new RageForgerDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RecrossThePaths extends CardImpl {
public RecrossThePaths(UUID ownerId) {
public RecrossThePaths(final RecrossThePaths card) {
public RecrossThePaths copy() {return new RecrossThePaths(this);
class RecrossThePathsEffect extends OneShotEffect {
public RecrossThePathsEffect() {
public RecrossThePathsEffect(final RecrossThePathsEffect effect) {
public RecrossThePathsEffect copy() {return new RecrossThePathsEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class RedeemTheLost extends CardImpl {
public RedeemTheLost(UUID ownerId) {
public RedeemTheLost(final RedeemTheLost card) {
public RedeemTheLost copy() {return new RedeemTheLost(this);
public class ReleaseTheAnts extends CardImpl {
public ReleaseTheAnts(UUID ownerId) {
public ReleaseTheAnts(final ReleaseTheAnts card) {
public ReleaseTheAnts copy() {return new ReleaseTheAnts(this);
public class ResearchTheDeep extends CardImpl {
public ResearchTheDeep(UUID ownerId) {
public ResearchTheDeep(final ResearchTheDeep card) {
public ResearchTheDeep copy() {return new ResearchTheDeep(this);
public class Reveillark extends CardImpl {
public Reveillark(UUID ownerId) {
public Reveillark(final Reveillark card) {
public Reveillark copy() {return new Reveillark(this);
public class ReviveTheFallen extends CardImpl {
public ReviveTheFallen(UUID ownerId) {
public ReviveTheFallen(final ReviveTheFallen card) {
public ReviveTheFallen copy() {return new ReviveTheFallen(this);
public class RhysTheExiled extends CardImpl {
public RhysTheExiled(UUID ownerId) {
public RhysTheExiled(final RhysTheExiled card) {
public RhysTheExiled copy() {return new RhysTheExiled(this);
public class SagesDousing extends CardImpl {
public SagesDousing(UUID ownerId) {
public SagesDousing(final SagesDousing card) {
public SagesDousing copy() {return new SagesDousing(this);return new Scapeshift(this);return new ScapeshiftEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class ScarbladeElite extends CardImpl {
public ScarbladeElite(UUID ownerId) {
public ScarbladeElite(final ScarbladeElite card) {
public ScarbladeElite copy() {return new ScarbladeElite(this);
public class SeethingPathblazer extends CardImpl {
public SeethingPathblazer(UUID ownerId) {
public SeethingPathblazer(final SeethingPathblazer card) {
public SeethingPathblazer copy() {return new SeethingPathblazer(this);
public class SensationGorger extends CardImpl {
public SensationGorger(UUID ownerId) {
public SensationGorger(final SensationGorger card) {
public SensationGorger copy() {return new SensationGorger(this);
public class ShardVolley extends CardImpl {
public ShardVolley(UUID ownerId) {
public ShardVolley(final ShardVolley card) {
public ShardVolley copy() {return new ShardVolley(this);
public class SharedAnimosity extends CardImpl {
public SharedAnimosity(UUID ownerId) {
public SharedAnimosity(final SharedAnimosity card) {
public SharedAnimosity copy() {return new SharedAnimosity(this);
class SharedAnimosityEffect extends ContinuousEffectImpl {
public SharedAnimosityEffect() {
public SharedAnimosityEffect(final SharedAnimosityEffect effect) {
public SharedAnimosityEffect copy() {return new SharedAnimosityEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;return false;
public String getText(Mode mode) {return "it gets +1/+0 until end of turn for each other attacking creature that shares a creature type with it";
public class Shinewend extends CardImpl {
public Shinewend(UUID ownerId) {
public Shinewend(final Shinewend card) {
public Shinewend copy() {return new Shinewend(this);
public class SigilTracer extends CardImpl {
public SigilTracer(UUID ownerId) {
public SigilTracer(final SigilTracer card) {
public SigilTracer copy() {return new SigilTracer(this);
public class Slithermuse extends CardImpl {
public Slithermuse(UUID ownerId) {
public Slithermuse(final Slithermuse card) {
public Slithermuse copy() {return new Slithermuse(this);
class SlithermuseEffect extends OneShotEffect {
public SlithermuseEffect() {
public SlithermuseEffect(final SlithermuseEffect effect) {
public SlithermuseEffect copy() {return new SlithermuseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SqueakingPieGrubfellows extends CardImpl {
public SqueakingPieGrubfellows(UUID ownerId) {
public SqueakingPieGrubfellows(final SqueakingPieGrubfellows card) {
public SqueakingPieGrubfellows copy() {return new SqueakingPieGrubfellows(this);
public class Stingmoggie extends CardImpl {
public Stingmoggie(UUID ownerId) {
public Stingmoggie(final Stingmoggie card) {
public Stingmoggie copy() {return new Stingmoggie(this);
public class StinkdrinkerBandit extends CardImpl {
public StinkdrinkerBandit(UUID ownerId) {
public StinkdrinkerBandit(final StinkdrinkerBandit card) {
public StinkdrinkerBandit copy() {return new StinkdrinkerBandit(this);
class StinkdrinkerBanditTriggeredAbility extends TriggeredAbilityImpl {
public StinkdrinkerBanditTriggeredAbility() {
public StinkdrinkerBanditTriggeredAbility(final StinkdrinkerBanditTriggeredAbility ability) {
public StinkdrinkerBanditTriggeredAbility copy() {return new StinkdrinkerBanditTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(EventType.UNBLOCKED_ATTACKER);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Rogue you control attacks and isn't blocked, it gets +2/+1 until end of turn.";
public class StompingSlabs extends CardImpl {
public StompingSlabs(UUID ownerId) {
public StompingSlabs(final StompingSlabs card) {
public StompingSlabs copy() {return new StompingSlabs(this);
class StompingSlabsEffect extends OneShotEffect {
StompingSlabsEffect() {
StompingSlabsEffect(final StompingSlabsEffect effect) {
public StompingSlabsEffect copy() {return new StompingSlabsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class StonybrookBanneret extends CardImpl {
public StonybrookBanneret(UUID ownerId) {
public StonybrookBanneret(final StonybrookBanneret card) {
public StonybrookBanneret copy() {return new StonybrookBanneret(this);
public class StonybrookSchoolmaster extends CardImpl {
public StonybrookSchoolmaster(UUID ownerId) {
public StonybrookSchoolmaster(final StonybrookSchoolmaster card) {
public StonybrookSchoolmaster copy() {return new StonybrookSchoolmaster(this);
public class StreamOfUnconsciousness extends CardImpl {
public StreamOfUnconsciousness(UUID ownerId) {
public StreamOfUnconsciousness(final StreamOfUnconsciousness card) {
public StreamOfUnconsciousness copy() {return new StreamOfUnconsciousness(this);
public class SupremeExemplar extends CardImpl {
public SupremeExemplar(UUID ownerId) {
public SupremeExemplar(final SupremeExemplar card) {
public SupremeExemplar copy() {return new SupremeExemplar(this);
public class TitansRevenge extends CardImpl {
public TitansRevenge(UUID ownerId) {
public TitansRevenge(final TitansRevenge card) {
public TitansRevenge copy() {return new TitansRevenge(this);
public class UnstoppableAsh extends CardImpl {
public UnstoppableAsh(UUID ownerId) {
public UnstoppableAsh(final UnstoppableAsh card) {
public UnstoppableAsh copy() {return new UnstoppableAsh(this);
public class VendilionClique extends CardImpl {
public VendilionClique(UUID ownerId) {
public VendilionClique(final VendilionClique card) {
public VendilionClique copy() {return new VendilionClique(this);
class VendilionCliqueEffect extends OneShotEffect {
VendilionCliqueEffect() {
VendilionCliqueEffect(final VendilionCliqueEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public VendilionCliqueEffect copy() {return new VendilionCliqueEffect(this);
public class VengefulFirebrand extends CardImpl {
public VengefulFirebrand(UUID ownerId) {
public VengefulFirebrand(final VengefulFirebrand card) {
public VengefulFirebrand copy() {return new VengefulFirebrand(this);
class VengefulFirebrandCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return player != null && player.getGraveyard().count(filter, game) > 0;
public class VeteransArmaments extends CardImpl {
public VeteransArmaments(UUID ownerId) {
public VeteransArmaments(final VeteransArmaments card) {
public VeteransArmaments copy() {return new VeteransArmaments(this);
public class VioletPall extends CardImpl {
public VioletPall(UUID ownerId) {
public VioletPall(final VioletPall card) {
public VioletPall copy() {return new VioletPall(this);
public class WalkerOfTheGrove extends CardImpl {
public WalkerOfTheGrove(UUID ownerId) {
public WalkerOfTheGrove(final WalkerOfTheGrove card) {
public WalkerOfTheGrove copy() {return new WalkerOfTheGrove(this);
class WalkerOfTheGroveToken extends Token {
public WalkerOfTheGroveToken() {
public class WanderingGraybeard extends CardImpl {
public WanderingGraybeard(UUID ownerId) {
public WanderingGraybeard(final WanderingGraybeard card) {
public WanderingGraybeard copy() {return new WanderingGraybeard(this);
public class WarSpikeChangeling extends CardImpl {
public WarSpikeChangeling(UUID ownerId) {
public WarSpikeChangeling(final WarSpikeChangeling card) {
public WarSpikeChangeling copy() {return new WarSpikeChangeling(this);
public class WaterspoutWeavers extends CardImpl {
public WaterspoutWeavers(UUID ownerId) {
public WaterspoutWeavers(final WaterspoutWeavers card) {
public WaterspoutWeavers copy() {return new WaterspoutWeavers(this);
public class WeedPrunerPoplar extends CardImpl {
public WeedPrunerPoplar(UUID ownerId) {
public WeedPrunerPoplar(final WeedPrunerPoplar card) {
public WeedPrunerPoplar copy() {return new WeedPrunerPoplar(this);
public class WeirdingShaman extends CardImpl {
public WeirdingShaman(UUID ownerId) {
public WeirdingShaman(final WeirdingShaman card) {
public WeirdingShaman copy() {return new WeirdingShaman(this);
public class WinnowerPatrol extends CardImpl {
public WinnowerPatrol(UUID ownerId) {
public WinnowerPatrol(final WinnowerPatrol card) {
public WinnowerPatrol copy() {return new WinnowerPatrol(this);
public class WolfSkullShaman extends CardImpl {
public WolfSkullShaman(UUID ownerId) {
public WolfSkullShaman(final WolfSkullShaman card) {
public WolfSkullShaman copy() {return new WolfSkullShaman(this);
public class AccumulatedKnowledge extends CardImpl {
public AccumulatedKnowledge(UUID ownerId) {
public AccumulatedKnowledge(final AccumulatedKnowledge card) {
public AccumulatedKnowledge copy() {return new AccumulatedKnowledge(this);
public class AncientHydra extends CardImpl {
public AncientHydra(UUID ownerId) {
public AncientHydra(final AncientHydra card) {
public AncientHydra copy() {return new AncientHydra(this);
public class AnimateLand extends CardImpl {
public AnimateLand(UUID ownerId) {
public AnimateLand(final AnimateLand card) {
public AnimateLand copy() {return new AnimateLand(this);
class AnimatedLand extends Token {
public AnimatedLand() {
public class ArcMage extends CardImpl {
public ArcMage(UUID ownerId) {
public ArcMage(final ArcMage card) {
public ArcMage copy() {return new ArcMage(this);
public class BelbesPercher extends CardImpl {
public BelbesPercher(UUID ownerId) {
public BelbesPercher(final BelbesPercher card) {
public BelbesPercher copy() {return new BelbesPercher(this);
public class BelbesPortal extends CardImpl {
public BelbesPortal(UUID ownerId) {
public BelbesPortal(final BelbesPortal card) {
public BelbesPortal copy() {return new BelbesPortal(this);
public class Blastoderm extends CardImpl {
public Blastoderm(UUID ownerId) {
public Blastoderm(final Blastoderm card) {
public Blastoderm copy() {return new Blastoderm(this);
public class BlindingAngel extends CardImpl {
public BlindingAngel(UUID ownerId) {
public BlindingAngel(final BlindingAngel card) {
public BlindingAngel copy() {return new BlindingAngel(this);
class SkipNextCombatEffect extends OneShotEffect {
public SkipNextCombatEffect() {
public SkipNextCombatEffect(final SkipNextCombatEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SkipNextCombatEffect copy() {return new SkipNextCombatEffect(this);
public class CarrionWall extends CardImpl {
public CarrionWall(UUID ownerId) {
public CarrionWall(final CarrionWall card) {
public CarrionWall copy() {return new CarrionWall(this);
public class Cloudskate extends CardImpl {
public Cloudskate(UUID ownerId) {
public Cloudskate(final Cloudskate card) {
public Cloudskate copy() {return new Cloudskate(this);
public class Daze extends CardImpl {
public Daze(UUID ownerId) {
public Daze(final Daze card) {
public Daze copy() {return new Daze(this);
public class DeathPitOffering extends CardImpl {
public DeathPitOffering(UUID ownerId) {
public DeathPitOffering(final DeathPitOffering card) {
public DeathPitOffering copy() {return new DeathPitOffering(this);
class DeathPitOfferingEffect extends OneShotEffect {
public DeathPitOfferingEffect() {
public DeathPitOfferingEffect(final DeathPitOfferingEffect effect) {
public DeathPitOfferingEffect copy() {return new DeathPitOfferingEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class DefenderEnVec extends CardImpl {
public DefenderEnVec(UUID ownerId) {
public DefenderEnVec(final DefenderEnVec card) {
public DefenderEnVec copy() {return new DefenderEnVec(this);
public class DefiantFalcon extends CardImpl {
public DefiantFalcon(UUID ownerId) {
public DefiantFalcon(final DefiantFalcon card) {
public DefiantFalcon copy() {return new DefiantFalcon(this);
public class Dominate extends CardImpl {
public Dominate(UUID ownerId) {
public Dominate(final Dominate card) {
public void adjustTargets(Ability ability, Game game) {
public Dominate copy() {return new Dominate(this);
public class DownhillCharge extends CardImpl {
public DownhillCharge(UUID ownerId) {
public DownhillCharge(final DownhillCharge card) {
public DownhillCharge copy() {return new DownhillCharge(this);
public class Ensnare extends CardImpl {
public Ensnare(UUID ownerId) {
public Ensnare(final Ensnare card) {
public Ensnare copy() {return new Ensnare(this);return new FlameRift(this);
public class FlowstoneArmor extends CardImpl {
public FlowstoneArmor(UUID ownerId) {
public FlowstoneArmor(final FlowstoneArmor card) {
public FlowstoneArmor copy() {return new FlowstoneArmor(this);
public class FlowstoneOverseer extends CardImpl {
public FlowstoneOverseer(UUID ownerId) {
public FlowstoneOverseer(final FlowstoneOverseer card) {
public FlowstoneOverseer copy() {return new FlowstoneOverseer(this);
public class FlowstoneWall extends CardImpl {
public FlowstoneWall(UUID ownerId) {
public FlowstoneWall(final FlowstoneWall card) {
public FlowstoneWall copy() {return new FlowstoneWall(this);
public class Infiltrate extends CardImpl {
public Infiltrate(UUID ownerId) {
public Infiltrate(final Infiltrate card) {
public Infiltrate copy() {return new Infiltrate(this);
public class Lawbringer extends CardImpl {
public Lawbringer(UUID ownerId) {
public Lawbringer(final Lawbringer card) {
public Lawbringer copy() {return new Lawbringer(this);
public class Lightbringer extends CardImpl {
public Lightbringer(UUID ownerId) {
public Lightbringer(final Lightbringer card) {
public Lightbringer copy() {return new Lightbringer(this);
public class LinSivviDefiantHero extends CardImpl {
public LinSivviDefiantHero(UUID ownerId) {
public LinSivviDefiantHero(final LinSivviDefiantHero card) {
public LinSivviDefiantHero copy() {return new LinSivviDefiantHero(this);
class LinSivviDefiantHeroEffect extends OneShotEffect {
public LinSivviDefiantHeroEffect() {
public LinSivviDefiantHeroEffect(final LinSivviDefiantHeroEffect effect) {
public LinSivviDefiantHeroEffect copy() {return new LinSivviDefiantHeroEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class Massacre extends CardImpl {
public Massacre(UUID ownerId) {
public Massacre(final Massacre card) {
public Massacre copy() {return new Massacre(this);
public class MindSlash extends CardImpl {
public MindSlash(UUID ownerId) {
public MindSlash(final MindSlash card) {
public MindSlash copy() {return new MindSlash(this);
public class MoggAlarm extends CardImpl {
public MoggAlarm(UUID ownerId) {
public MoggAlarm(final MoggAlarm card) {
public MoggAlarm copy() {return new MoggAlarm(this);
public class Moggcatcher extends CardImpl {
public Moggcatcher(UUID ownerId) {
public Moggcatcher(final Moggcatcher card) {
public Moggcatcher copy() {return new Moggcatcher(this);
public class MoggSalvage extends CardImpl {
public MoggSalvage(UUID ownerId) {
public MoggSalvage(final MoggSalvage card) {
public MoggSalvage copy() {return new MoggSalvage(this);
public class OffBalance extends CardImpl {
public OffBalance(UUID ownerId) {
public OffBalance(final OffBalance card) {
public OffBalance copy() {return new OffBalance(this);
public class OraclesAttendants extends CardImpl {
public OraclesAttendants(UUID ownerId) {
public OraclesAttendants(final OraclesAttendants card) {
public OraclesAttendants copy() {return new OraclesAttendants(this);
class OraclesAttendantsReplacementEffect extends ReplacementEffectImpl {
public OraclesAttendantsReplacementEffect() {
public OraclesAttendantsReplacementEffect(final OraclesAttendantsReplacementEffect effect) {
public OraclesAttendantsReplacementEffect copy() {return new OraclesAttendantsReplacementEffect(this);
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGE_CREATURE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getFirstTarget())
public class Oraxid extends CardImpl {
public Oraxid(UUID ownerId) {
public Oraxid(final Oraxid card) {
public Oraxid copy() {return new Oraxid(this);
public class OverlaidTerrain extends CardImpl {
public OverlaidTerrain(UUID ownerId) {
public OverlaidTerrain(final OverlaidTerrain card) {
public OverlaidTerrain copy() {return new OverlaidTerrain(this);
public boolean apply(Game game, Ability source) {return true;return false;return new SacrificeAllLandEffect(this);
public class ParallaxDementia extends CardImpl {
public ParallaxDementia(UUID ownerId) {
public ParallaxDementia(final ParallaxDementia card) {
public ParallaxDementia copy() {return new ParallaxDementia(this);
public class ParallaxInhibitor extends CardImpl {
public ParallaxInhibitor(UUID ownerId) {
public ParallaxInhibitor(final ParallaxInhibitor card) {
public ParallaxInhibitor copy() {return new ParallaxInhibitor(this);
public class ParallaxTide extends CardImpl {
public ParallaxTide(UUID ownerId) {
public ParallaxTide(final ParallaxTide card) {
public ParallaxTide copy() {return new ParallaxTide(this);
public class ParallaxWave extends CardImpl {
public ParallaxWave(UUID ownerId) {
public ParallaxWave(final ParallaxWave card) {
public ParallaxWave copy() {return new ParallaxWave(this);
class ParallaxWaveEffect extends OneShotEffect {
public ParallaxWaveEffect() {this.staticText = "each player returns to the battlefield all cards he or she owns exiled with {this}";
public ParallaxWaveEffect(final ParallaxWaveEffect effect) {
public ParallaxWaveEffect copy() {return new ParallaxWaveEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(exileZone.getCards(game), Zone.BATTLEFIELD, source, game, false, false, true, null);return true;return false;
public class PhyrexianDriver extends CardImpl {
public PhyrexianDriver(UUID ownerId) {
public PhyrexianDriver(final PhyrexianDriver card) {
public PhyrexianDriver copy() {return new PhyrexianDriver(this);
public class PhyrexianProwler extends CardImpl {
public PhyrexianProwler(UUID ownerId) {
public PhyrexianProwler(final PhyrexianProwler card) {
public PhyrexianProwler copy() {return new PhyrexianProwler(this);
public class RathiFiend extends CardImpl {
public RathiFiend(UUID ownerId) {
public RathiFiend(final RathiFiend card) {
public RathiFiend copy() {return new RathiFiend(this);
public class RathiIntimidator extends CardImpl {
public RathiIntimidator(UUID ownerId) {
public RathiIntimidator(final RathiIntimidator card) {
public RathiIntimidator copy() {return new RathiIntimidator(this);
public class RathsEdge extends CardImpl {
public RathsEdge(UUID ownerId) {
public RathsEdge(final RathsEdge card) {
public RathsEdge copy() {return new RathsEdge(this);
public class RefreshingRain extends CardImpl {
public RefreshingRain(UUID ownerId) {
public RefreshingRain(final RefreshingRain card) {
public RefreshingRain copy() {return new RefreshingRain(this);
public class RejuvenationChamber extends CardImpl {
public RejuvenationChamber(UUID ownerId) {
public RejuvenationChamber(final RejuvenationChamber card) {
public RejuvenationChamber copy() {return new RejuvenationChamber(this);
public class ReverentSilence extends CardImpl {
public ReverentSilence(UUID ownerId) {
public ReverentSilence(final ReverentSilence card) {
public ReverentSilence copy() {return new ReverentSilence(this);
public class RisingWaters extends CardImpl {
public RisingWaters(UUID ownerId) {
public RisingWaters(final RisingWaters card) {
public RisingWaters copy() {return new RisingWaters(this);
class RisingWatersUntapEffect extends OneShotEffect {
public RisingWatersUntapEffect() {
public RisingWatersUntapEffect(final RisingWatersUntapEffect effect) {
public RisingWatersUntapEffect copy() {return new RisingWatersUntapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RootwaterThief extends CardImpl {
public RootwaterThief(UUID ownerId) {
public RootwaterThief(final RootwaterThief card) {
public RootwaterThief copy() {return new RootwaterThief(this);
class RootwaterThiefEffect extends OneShotEffect {
RootwaterThiefEffect() {
RootwaterThiefEffect(final RootwaterThiefEffect effect) {
public boolean apply(Game game, Ability source) {return false;
{return true;return false;
public RootwaterThiefEffect copy() {return new RootwaterThiefEffect(this);
public class RustingGolem extends CardImpl {
public RustingGolem(UUID ownerId) {
public RustingGolem(final RustingGolem card) {
public RustingGolem copy() {return new RustingGolem(this);
public class SaprolingCluster extends CardImpl {
public SaprolingCluster(UUID ownerId) {
public SaprolingCluster(final SaprolingCluster card) {
public SaprolingCluster copy() {return new SaprolingCluster(this);
public class Seahunter extends CardImpl {
public Seahunter(UUID ownerId) {
public Seahunter(final Seahunter card) {
public Seahunter copy() {return new Seahunter(this);
public class SealOfCleansing extends CardImpl {
public SealOfCleansing(UUID ownerId) {
public SealOfCleansing(final SealOfCleansing card) {
public SealOfCleansing copy() {return new SealOfCleansing(this);
public class SealOfFire extends CardImpl {
public SealOfFire(UUID ownerId) {
public SealOfFire(final SealOfFire card) {
public SealOfFire copy() {return new SealOfFire(this);
public class SealOfRemoval extends CardImpl {
public SealOfRemoval(UUID ownerId) {
public SealOfRemoval(final SealOfRemoval card) {
public SealOfRemoval copy() {return new SealOfRemoval(this);
public class SealOfStrength extends CardImpl {
public SealOfStrength(UUID ownerId) {
public SealOfStrength(final SealOfStrength card) {
public SealOfStrength copy() {return new SealOfStrength(this);
public class ShriekingMogg extends CardImpl {
public ShriekingMogg(UUID ownerId) {
public ShriekingMogg(final ShriekingMogg card) {
public ShriekingMogg copy() {return new ShriekingMogg(this);
public class SilkenfistFighter extends CardImpl {
public SilkenfistFighter(UUID ownerId) {
public SilkenfistFighter(final SilkenfistFighter card) {
public SilkenfistFighter copy() {return new SilkenfistFighter(this);
public class SilkenfistOrder extends CardImpl {
public SilkenfistOrder(UUID ownerId) {
public SilkenfistOrder(final SilkenfistOrder card) {
public SilkenfistOrder copy() {return new SilkenfistOrder(this);
public class SkyshroudClaim extends CardImpl {
public SkyshroudClaim(UUID ownerId) {
public SkyshroudClaim(final SkyshroudClaim card) {
public SkyshroudClaim copy() {return new SkyshroudClaim(this);
public class SkyshroudCutter extends CardImpl {
public SkyshroudCutter(UUID ownerId) {
public SkyshroudCutter(final SkyshroudCutter card) {
public SkyshroudCutter copy() {return new SkyshroudCutter(this);
public class SkyshroudPoacher extends CardImpl {
public SkyshroudPoacher(UUID ownerId) {
public SkyshroudPoacher(final SkyshroudPoacher card) {
public SkyshroudPoacher copy() {return new SkyshroudPoacher(this);
public class SkyshroudRidgeback extends CardImpl {
public SkyshroudRidgeback(UUID ownerId) {
public SkyshroudRidgeback(final SkyshroudRidgeback card) {
public SkyshroudRidgeback copy() {return new SkyshroudRidgeback(this);
public class SneakyHomunculus extends CardImpl {
public SneakyHomunculus(UUID ownerId) {
public SneakyHomunculus(final SneakyHomunculus card) {
public SneakyHomunculus copy() {return new SneakyHomunculus(this);
public class StampedeDriver extends CardImpl {
public StampedeDriver(UUID ownerId) {
public StampedeDriver(final StampedeDriver card) {
public StampedeDriver copy() {return new StampedeDriver(this);
public class StrongholdGambit extends CardImpl {
public StrongholdGambit(UUID ownerId) {
public StrongholdGambit(final StrongholdGambit card) {
public StrongholdGambit copy() {return new StrongholdGambit(this);
class StrongholdGambitEffect extends OneShotEffect {
public StrongholdGambitEffect() {
public StrongholdGambitEffect(final StrongholdGambitEffect effect) {
public StrongholdGambitEffect copy() {return new StrongholdGambitEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class StrongholdZeppelin extends CardImpl {
public StrongholdZeppelin(UUID ownerId) {
public StrongholdZeppelin(final StrongholdZeppelin card) {
public StrongholdZeppelin copy() {return new StrongholdZeppelin(this);
public class Submerge extends CardImpl {
public Submerge(UUID ownerId) {
public Submerge(final Submerge card) {
public Submerge copy() {return new Submerge(this);
public class TangleWire extends CardImpl {
public TangleWire(UUID ownerId) {
public TangleWire(final TangleWire card) {
public TangleWire copy() {return new TangleWire(this);
class TangleWireEffect extends OneShotEffect {
TangleWireEffect() {
TangleWireEffect(final TangleWireEffect effect) {
public boolean apply(Game game, Ability source) {return false;return abilityApplied;return false;
public TangleWireEffect copy() {return new TangleWireEffect(this);
public class TreetopBracers extends CardImpl {
public TreetopBracers(UUID ownerId) {
public TreetopBracers(final TreetopBracers card) {
public TreetopBracers copy() {return new TreetopBracers(this);
class TreetopBracersRestrictEffect extends RestrictionEffect {
public TreetopBracersRestrictEffect() {
public TreetopBracersRestrictEffect(final TreetopBracersRestrictEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return blocker.getAbilities().contains(FlyingAbility.getInstance()) || blocker.getAbilities().contains(ReachAbility.getInstance());
public TreetopBracersRestrictEffect copy() {return new TreetopBracersRestrictEffect(this);
public class TricksterMage extends CardImpl {
public TricksterMage(UUID ownerId) {
public TricksterMage(final TricksterMage card) {
public TricksterMage copy() {return new TricksterMage(this);
public class ViciousHunger extends CardImpl {
public ViciousHunger(UUID ownerId) {
public ViciousHunger(final ViciousHunger card) {
public ViciousHunger copy() {return new ViciousHunger(this);
public class Viseling extends CardImpl {
public Viseling(UUID ownerId) {
public Viseling(final Viseling card) {
public Viseling copy() {return new Viseling(this);
class ViselingEffect extends OneShotEffect {
public ViselingEffect() {
public ViselingEffect(final ViselingEffect effect) {
public ViselingEffect copy() {return new ViselingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VoiceOfTruth extends CardImpl {
public VoiceOfTruth(UUID ownerId) {
public VoiceOfTruth(final VoiceOfTruth card) {
public VoiceOfTruth copy() {return new VoiceOfTruth(this);
public class WanderingEye extends CardImpl {
public WanderingEye(UUID ownerId) {
public WanderingEye(final WanderingEye card) {
public WanderingEye copy() {return new WanderingEye(this);
public class Woodripper extends CardImpl {
public Woodripper(UUID ownerId) {
public Woodripper(final Woodripper card) {
public Woodripper copy() {return new Woodripper(this);
public class ActOfAggression extends CardImpl {
public ActOfAggression(UUID ownerId) {
public ActOfAggression(final ActOfAggression card) {
public ActOfAggression copy() {return new ActOfAggression(this);
public class ArgentMutation extends CardImpl {
public ArgentMutation(UUID ownerId) {
public ArgentMutation(final ArgentMutation card) {
public ArgentMutation copy() {return new ArgentMutation(this);
public class ArmWithAEther extends CardImpl {
public ArmWithAEther(UUID ownerId) {effect.setText("Until end of turn, creatures you control gain \"Whenever this creature deals damage to an opponent, you may return target creature that player controls to its owner's hand.\"");
public ArmWithAEther(final ArmWithAEther card) {
public ArmWithAEther copy() {return new ArmWithAEther(this);
class ArmWithAEtherTriggeredAbility extends TriggeredAbilityImpl {
public ArmWithAEtherTriggeredAbility() {
public ArmWithAEtherTriggeredAbility(final ArmWithAEtherTriggeredAbility ability) {
public ArmWithAEtherTriggeredAbility copy() {return new ArmWithAEtherTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever this creature deals damage to an opponent, you may return target creature that player controls to its owner's hand.";
public class Artillerize extends CardImpl {
public Artillerize(UUID ownerId) {
public Artillerize(final Artillerize card) {
public Artillerize copy() {return new Artillerize(this);
public class AuriokSurvivors extends CardImpl {
public AuriokSurvivors(UUID ownerId) {
public AuriokSurvivors(final AuriokSurvivors card) {
public AuriokSurvivors copy() {return new AuriokSurvivors(this);
class AuriokSurvivorsEffect extends OneShotEffect {
AuriokSurvivorsEffect() {
AuriokSurvivorsEffect(final AuriokSurvivorsEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AuriokSurvivorsEffect copy() {return new AuriokSurvivorsEffect(this);
public class Batterskull extends CardImpl {
public Batterskull (UUID ownerId) {
public Batterskull (final Batterskull card) {
public Batterskull copy() {return new Batterskull(this);
public class BeastWithin extends CardImpl {
public BeastWithin(UUID ownerId) {
public BeastWithin(final BeastWithin card) {
public BeastWithin copy() {return new BeastWithin(this);
class BeastWithinEffect extends OneShotEffect {
public BeastWithinEffect() {
public BeastWithinEffect(final BeastWithinEffect effect) {
public BeastWithinEffect copy() {return new BeastWithinEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class BirthingPod extends CardImpl {
public BirthingPod(UUID ownerId) {
public BirthingPod(final BirthingPod card) {
public BirthingPod copy() {return new BirthingPod(this);
class BirthingPodEffect extends OneShotEffect {
BirthingPodEffect() {
BirthingPodEffect(final BirthingPodEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BirthingPodEffect copy() {return new BirthingPodEffect(this);
public class BladeSplicer extends CardImpl {
public BladeSplicer (UUID ownerId) {
public BladeSplicer (final BladeSplicer card) {
public BladeSplicer copy() {return new BladeSplicer(this);
public class BlightedAgent extends CardImpl {
public BlightedAgent(UUID ownerId) {
public BlightedAgent(final BlightedAgent card) {
public BlightedAgent copy() {return new BlightedAgent(this);
public class BlindingSouleater extends CardImpl {
public BlindingSouleater(UUID ownerId) {
public BlindingSouleater(final BlindingSouleater card) {
public BlindingSouleater copy() {return new BlindingSouleater(this);
public class BlindZealot extends CardImpl {
public BlindZealot(UUID ownerId) {
public BlindZealot(final BlindZealot card) {
public BlindZealot copy() {return new BlindZealot(this);
class BlindZealotTriggeredAbility extends TriggeredAbilityImpl {
public BlindZealotTriggeredAbility() {
public BlindZealotTriggeredAbility(final BlindZealotTriggeredAbility ability) {
public BlindZealotTriggeredAbility copy() {return new BlindZealotTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever Blind Zealot deals combat damage to a player, you may sacrifice it. If you do, destroy target creature that player controls.";
class BlindZealotEffect extends OneShotEffect {
public BlindZealotEffect() {
public BlindZealotEffect(final BlindZealotEffect effect) {
public BlindZealotEffect copy() {return new BlindZealotEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class BludgeonBrawl extends CardImpl {
public BludgeonBrawl(UUID ownerId) {
public BludgeonBrawl(final BludgeonBrawl card) {
public BludgeonBrawl copy() {return new BludgeonBrawl(this);
class BludgeonBrawlAbility extends StaticAbility {
public BludgeonBrawlAbility() {
public BludgeonBrawlAbility(BludgeonBrawlAbility ability) {
public BludgeonBrawlAbility copy() {return new BludgeonBrawlAbility(this);
public String getRule() {return "Each noncreature, non-Equipment artifact is an Equipment with equip {X} and \"Equipped creature gets +X/+0,\" where X is that artifact's converted mana cost.";
class BludgeonBrawlAddSubtypeEffect extends ContinuousEffectImpl {
public BludgeonBrawlAddSubtypeEffect() {
public BludgeonBrawlAddSubtypeEffect(final BludgeonBrawlAddSubtypeEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public BludgeonBrawlAddSubtypeEffect copy() {return new BludgeonBrawlAddSubtypeEffect(this);
class BludgeonBrawlGainAbilityEffect extends ContinuousEffectImpl {
public BludgeonBrawlGainAbilityEffect() {
public BludgeonBrawlGainAbilityEffect(final BludgeonBrawlGainAbilityEffect effect) {
public BludgeonBrawlGainAbilityEffect copy() {return new BludgeonBrawlGainAbilityEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BrutalizerExarch extends CardImpl {
public BrutalizerExarch(UUID ownerId) {
public BrutalizerExarch(final BrutalizerExarch card) {
public BrutalizerExarch copy() {return new BrutalizerExarch(this);
class BrutalizerExarchEffect2 extends OneShotEffect {
public BrutalizerExarchEffect2() {
public BrutalizerExarchEffect2(final BrutalizerExarchEffect2 effect) {
public BrutalizerExarchEffect2 copy() {return new BrutalizerExarchEffect2(this);
public boolean apply(Game game, Ability source) {return false;return permanent.moveToZone(Zone.LIBRARY, source.getSourceId(), game, false);return false;
public class CagedSun extends CardImpl {
public CagedSun(UUID ownerId) {
public CagedSun(final CagedSun card) {
public CagedSun copy() {return new CagedSun(this);
class CagedSunEffect2 extends ContinuousEffectImpl {
public CagedSunEffect2() {
public CagedSunEffect2(final CagedSunEffect2 effect) {
public CagedSunEffect2 copy() {return new CagedSunEffect2(this);
public boolean apply(Game game, Ability source) {return true;
class CagedSunTriggeredAbility extends TriggeredManaAbility {
public CagedSunTriggeredAbility() {
public CagedSunTriggeredAbility(CagedSunTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.MANA_ADDED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public CagedSunTriggeredAbility copy() {return new CagedSunTriggeredAbility(this);
public String getRule() {return staticText;
class CagedSunEffect extends ManaEffect {
public CagedSunEffect() {
public CagedSunEffect(final CagedSunEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public Mana getMana(Game game, Ability source) {return new Mana(ColoredManaSymbol.lookup(color.toString().charAt(0)));return null;
public CagedSunEffect copy() {return new CagedSunEffect(this);
public class CaressOfPhyrexia extends CardImpl {
public CaressOfPhyrexia(UUID ownerId) {
public CaressOfPhyrexia(final CaressOfPhyrexia card) {
public CaressOfPhyrexia copy() {return new CaressOfPhyrexia(this);
public class CathedralMembrane extends CardImpl {
public CathedralMembrane(UUID ownerId) {
public CathedralMembrane(final CathedralMembrane card) {
public CathedralMembrane copy() {return new CathedralMembrane(this);
class CathedralMembraneAbility extends ZoneChangeTriggeredAbility {
public CathedralMembraneAbility() {
public CathedralMembraneAbility(CathedralMembraneAbility ability) {
public CathedralMembraneAbility copy() {return new CathedralMembraneAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
class CathedralMembraneEffect extends OneShotEffect {
public CathedralMembraneEffect() {
public CathedralMembraneEffect(final CathedralMembraneEffect effect) {
public CathedralMembraneEffect copy() {return new CathedralMembraneEffect(this);
public boolean apply(Game game, Ability source) {return true;
class CathedralMembraneWatcher extends Watcher {
public CathedralMembraneWatcher() {
public CathedralMembraneWatcher(final CathedralMembraneWatcher watcher) {
public CathedralMembraneWatcher copy() {return new CathedralMembraneWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
public class ChainedThroatseeker extends CardImpl {
public ChainedThroatseeker(UUID ownerId) {
public ChainedThroatseeker(final ChainedThroatseeker card) {
public ChainedThroatseeker copy() {return new ChainedThroatseeker(this);
class ChainedThroatseekerCantAttackEffect extends RestrictionEffect {
public ChainedThroatseekerCantAttackEffect() {
public ChainedThroatseekerCantAttackEffect(final ChainedThroatseekerCantAttackEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getId().equals(source.getSourceId());
public boolean canAttack(UUID defenderId, Ability source, Game game) {return true;return false;
public ChainedThroatseekerCantAttackEffect copy() {return new ChainedThroatseekerCantAttackEffect(this);
public class ChancellorOfTheAnnex extends CardImpl {
public ChancellorOfTheAnnex(UUID ownerId) {
public ChancellorOfTheAnnex(final ChancellorOfTheAnnex card) {
public ChancellorOfTheAnnex copy() {return new ChancellorOfTheAnnex(this);
class ChancellorOfTheAnnexEffect extends OneShotEffect {
public ChancellorOfTheAnnexEffect() {
public ChancellorOfTheAnnexEffect(ChancellorOfTheAnnexEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ChancellorOfTheAnnexEffect copy() {return new ChancellorOfTheAnnexEffect(this);
class ChancellorOfTheAnnexDelayedTriggeredAbility extends DelayedTriggeredAbility {
ChancellorOfTheAnnexDelayedTriggeredAbility(UUID playerId) {
ChancellorOfTheAnnexDelayedTriggeredAbility(final ChancellorOfTheAnnexDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public ChancellorOfTheAnnexDelayedTriggeredAbility copy() {return new ChancellorOfTheAnnexDelayedTriggeredAbility(this);
public class ChancellorOfTheSpires extends CardImpl {
public ChancellorOfTheSpires(UUID ownerId) {
public ChancellorOfTheSpires(final ChancellorOfTheSpires card) {
public ChancellorOfTheSpires copy() {return new ChancellorOfTheSpires(this);
class ChancellorOfTheSpiresDelayedTriggeredAbility extends DelayedTriggeredAbility {
ChancellorOfTheSpiresDelayedTriggeredAbility () {
ChancellorOfTheSpiresDelayedTriggeredAbility(ChancellorOfTheSpiresDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public ChancellorOfTheSpiresDelayedTriggeredAbility copy() {return new ChancellorOfTheSpiresDelayedTriggeredAbility(this);
class ChancellorOfTheSpiresEffect extends OneShotEffect {
ChancellorOfTheSpiresEffect () {
ChancellorOfTheSpiresEffect(ChancellorOfTheSpiresEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ChancellorOfTheSpiresEffect copy() {return new ChancellorOfTheSpiresEffect(this);
public class ChancellorOfTheTangle extends CardImpl {
public ChancellorOfTheTangle(UUID ownerId) {
public ChancellorOfTheTangle(final ChancellorOfTheTangle card) {
public ChancellorOfTheTangle copy() {return new ChancellorOfTheTangle(this);
class ChancellorOfTheTangleDelayedTriggeredAbility extends DelayedTriggeredAbility {
ChancellorOfTheTangleDelayedTriggeredAbility () {
ChancellorOfTheTangleDelayedTriggeredAbility(ChancellorOfTheTangleDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.PRECOMBAT_MAIN_PHASE_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return game.getActivePlayerId().equals(controllerId);
public ChancellorOfTheTangleDelayedTriggeredAbility copy() {return new ChancellorOfTheTangleDelayedTriggeredAbility(this);
public class ConversionChamber extends CardImpl {
public ConversionChamber (UUID ownerId) {
public ConversionChamber (final ConversionChamber card) {
public ConversionChamber copy() {return new ConversionChamber(this);
public class CorrosiveGale extends CardImpl {
public CorrosiveGale(UUID ownerId) {
public CorrosiveGale(final CorrosiveGale card) {
public CorrosiveGale copy() {return new CorrosiveGale(this);
public class CorruptedResolve extends CardImpl {
public CorruptedResolve(UUID ownerId) {
public CorruptedResolve(final CorruptedResolve card) {
public CorruptedResolve copy() {return new CorruptedResolve(this);
class CorruptedResolveEffect extends OneShotEffect {
CorruptedResolveEffect() {
CorruptedResolveEffect(final CorruptedResolveEffect effect) {
public boolean apply(Game game, Ability source) {return game.getStack().counter(targetPointer.getFirst(game, source), source.getSourceId(), game);return false;
public CorruptedResolveEffect copy() {return new CorruptedResolveEffect(this);
public class DarksteelRelic extends CardImpl {
public DarksteelRelic(UUID ownerId) {
public DarksteelRelic(final DarksteelRelic card) {
public DarksteelRelic copy() {return new DarksteelRelic(this);
public class DeathHoodCobra extends CardImpl {
public DeathHoodCobra(UUID ownerId) {
public DeathHoodCobra(final DeathHoodCobra card) {
public DeathHoodCobra copy() {return new DeathHoodCobra(this);
public class DeceiverExarch extends CardImpl {
public DeceiverExarch(UUID ownerId) {
public DeceiverExarch(final DeceiverExarch card) {
public DeceiverExarch copy() {return new DeceiverExarch(this);
public class DefensiveStance extends CardImpl {
public DefensiveStance(UUID ownerId) {
public DefensiveStance(final DefensiveStance card) {
public DefensiveStance copy() {return new DefensiveStance(this);
public class DementiaBat extends CardImpl {
public DementiaBat(UUID ownerId) {
public DementiaBat(final DementiaBat card) {
public DementiaBat copy() {return new DementiaBat(this);
public class Despise extends CardImpl {
public Despise(UUID ownerId) {
public Despise(final Despise card) {
public Despise copy() {return new Despise(this);
public class Dismember extends CardImpl {
public Dismember (UUID ownerId) {
public Dismember (final Dismember card) {
public Dismember copy() {return new Dismember(this);
public class Dispatch extends CardImpl {
public Dispatch (UUID ownerId) {
public Dispatch (final Dispatch card) {
public Dispatch copy() {return new Dispatch(this);
public class DueRespect extends CardImpl {
public DueRespect(UUID ownerId) {
public DueRespect(final DueRespect card) {
public DueRespect copy() {return new DueRespect(this);
class DueRespectEffect extends ReplacementEffectImpl {
DueRespectEffect() {
DueRespectEffect(final DueRespectEffect effect) {
public DueRespectEffect copy() {return new DueRespectEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class EleshNornGrandCenobite extends CardImpl {
public EleshNornGrandCenobite (UUID ownerId) {
public EleshNornGrandCenobite (final EleshNornGrandCenobite card) {
public EleshNornGrandCenobite copy() {return new EleshNornGrandCenobite(this);
public class Enslave extends CardImpl {
public Enslave(UUID ownerId) {
public Enslave(final Enslave card) {
public Enslave copy() {return new Enslave(this);
class EnslaveEffect extends OneShotEffect {
EnslaveEffect() {
EnslaveEffect(final EnslaveEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public EnslaveEffect copy() {return new EnslaveEffect(this);
public class EntomberExarch extends CardImpl {
public EntomberExarch(UUID ownerId) {
public EntomberExarch(final EntomberExarch card) {
public EntomberExarch copy() {return new EntomberExarch(this);
class EntomberExarchEffect extends OneShotEffect {
EntomberExarchEffect() {
EntomberExarchEffect(final EntomberExarchEffect effect) {
public boolean apply(Game game, Ability source) {return player.discard(card, source, game);return false;
public EntomberExarchEffect copy() {return new EntomberExarchEffect(this);
public class EtchedMonstrosity extends CardImpl {
public EtchedMonstrosity (UUID ownerId) {
public EtchedMonstrosity (final EtchedMonstrosity card) {
public EtchedMonstrosity copy() {return new EtchedMonstrosity(this);
public class FallenFerromancer extends CardImpl {
public FallenFerromancer(UUID ownerId) {
public FallenFerromancer(final FallenFerromancer card) {
public FallenFerromancer copy() {return new FallenFerromancer(this);
public class FlamebornViron extends CardImpl {
public FlamebornViron(UUID ownerId) {
public FlamebornViron(final FlamebornViron card) {
public FlamebornViron copy() {return new FlamebornViron(this);
public class ForcedWorship extends CardImpl {
public ForcedWorship (UUID ownerId) {
public ForcedWorship (final ForcedWorship card) {
public ForcedWorship copy() {return new ForcedWorship(this);
public class FreshMeat extends CardImpl {
public FreshMeat(UUID ownerId) {
public FreshMeat(final FreshMeat card) {
public FreshMeat copy() {return new FreshMeat(this);
class FreshMeatWatcher extends Watcher {
public FreshMeatWatcher() {
public FreshMeatWatcher(final FreshMeatWatcher watcher) {
public FreshMeatWatcher copy() {return new FreshMeatWatcher(this);
public int getCreaturesCount() {return creaturesCount;
public void watch(GameEvent event, Game game) {
public void reset() {
class FreshMeatDynamicValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return watcher.getCreaturesCount();return 0;
public FreshMeatDynamicValue copy() {return new FreshMeatDynamicValue();
public String toString() {return "1";
public String getMessage() {return "creature put into your graveyard from the battlefield this turn";
public class FurnaceScamp extends CardImpl {
public FurnaceScamp(UUID ownerId) {
public FurnaceScamp(final FurnaceScamp card) {
public FurnaceScamp copy() {return new FurnaceScamp(this);
public class Geosurge extends CardImpl {
public Geosurge(UUID ownerId) {
public Geosurge(final Geosurge card) {
public Geosurge copy() {return new Geosurge(this);
class GeosurgeConditionalMana extends ConditionalMana {
public GeosurgeConditionalMana() {
class GeosurgeManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class GethsVerdict extends CardImpl {
public GethsVerdict (UUID ownerId) {
public GethsVerdict (final GethsVerdict card) {
public GethsVerdict copy() {return new GethsVerdict(this);
public class GitaxianProbe extends CardImpl {
public GitaxianProbe(UUID ownerId) {
public GitaxianProbe(final GitaxianProbe card) {
public GitaxianProbe copy() {return new GitaxianProbe(this);
public class GlissasScorn extends CardImpl {
public GlissasScorn(UUID ownerId) {
public GlissasScorn(final GlissasScorn card) {
public GlissasScorn copy() {return new GlissasScorn(this);
public class GlistenerElf extends CardImpl {
public GlistenerElf(UUID ownerId) {
public GlistenerElf(final GlistenerElf card) {
public GlistenerElf copy() {return new GlistenerElf(this);
public class GlisteningOil extends CardImpl {
public GlisteningOil(UUID ownerId) {
public GlisteningOil(final GlisteningOil card) {
public GlisteningOil copy() {return new GlisteningOil(this);
class GlisteningOilEffect extends OneShotEffect {
GlisteningOilEffect() {
GlisteningOilEffect(final GlisteningOilEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public GlisteningOilEffect copy() {return new GlisteningOilEffect(this);
public class GreenhiltTrainee extends CardImpl {
public GreenhiltTrainee (UUID ownerId) {
public GreenhiltTrainee (final GreenhiltTrainee card) {
public GreenhiltTrainee copy() {return new GreenhiltTrainee(this);
class GreenhiltTraineeCost extends CostImpl {
public GreenhiltTraineeCost() {
public GreenhiltTraineeCost(final GreenhiltTraineeCost cost) {
public GreenhiltTraineeCost copy() {return new GreenhiltTraineeCost(this);
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;return false;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public class GremlinMine extends CardImpl {
public GremlinMine(UUID ownerId) {
public GremlinMine(final GremlinMine card) {
public GremlinMine copy() {return new GremlinMine(this);
class GremlinMineEffect extends OneShotEffect {
public GremlinMineEffect() {
public GremlinMineEffect(GremlinMineEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GremlinMineEffect copy() {return new GremlinMineEffect(this);
public class GrimAffliction extends CardImpl {
public GrimAffliction(UUID ownerId) {
public GrimAffliction(final GrimAffliction card) {
public GrimAffliction copy() {return new GrimAffliction(this);
public class GutShot extends CardImpl {
public GutShot(UUID ownerId) {
public GutShot(final GutShot card) {
public GutShot copy() {return new GutShot(this);
public class HexParasite extends CardImpl {
public HexParasite(UUID ownerId) {
public HexParasite(final HexParasite card) {
public HexParasite copy() {return new HexParasite(this);
class HexParasiteEffect extends OneShotEffect {
HexParasiteEffect() {
HexParasiteEffect(HexParasiteEffect effect) {
public HexParasiteEffect copy() {return new HexParasiteEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Hovermyr extends CardImpl {
public Hovermyr (UUID ownerId) {
public Hovermyr (final Hovermyr card) {
public Hovermyr copy() {return new Hovermyr(this);
public class IchorExplosion extends CardImpl {
public IchorExplosion(UUID ownerId) {
public IchorExplosion(final IchorExplosion card) {
public IchorExplosion copy() {return new IchorExplosion(this);
class IchorExplosionDynamicValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return -1 * p.getPower().getValue();return 0;
public DynamicValue copy() {return this;
public String getMessage() {return ", where X is the sacrificed creature's power";
public String toString() {return "-X";
public class InquisitorExarch extends CardImpl {
public InquisitorExarch(UUID ownerId) {
public InquisitorExarch(final InquisitorExarch card) {
public InquisitorExarch copy() {return new InquisitorExarch(this);
public class InsatiableSouleater extends CardImpl {
public InsatiableSouleater(UUID ownerId) {
public InsatiableSouleater(final InsatiableSouleater card) {
public InsatiableSouleater copy() {return new InsatiableSouleater(this);
public class InvaderParasite extends CardImpl {
public InvaderParasite(UUID ownerId) {
public InvaderParasite(final InvaderParasite card) {
public InvaderParasite copy() {return new InvaderParasite(this);
class InvaderParasiteImprintEffect extends OneShotEffect {
InvaderParasiteImprintEffect() {
InvaderParasiteImprintEffect(final InvaderParasiteImprintEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public InvaderParasiteImprintEffect copy() {return new InvaderParasiteImprintEffect(this);
class InvaderParasiteTriggeredAbility extends TriggeredAbilityImpl {
InvaderParasiteTriggeredAbility() {
InvaderParasiteTriggeredAbility(final InvaderParasiteTriggeredAbility ability) {
public InvaderParasiteTriggeredAbility copy() {return new InvaderParasiteTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a land with the same name as the exiled card enters the battlefield under an opponent's control, {this} deals 2 damage to that player";
public class IsolationCell extends CardImpl {
public IsolationCell(UUID ownerId) {
public IsolationCell(final IsolationCell card) {
public IsolationCell copy() {return new IsolationCell(this);
class IsolationCellTriggeredAbility extends TriggeredAbilityImpl {
public IsolationCellTriggeredAbility() {
public IsolationCellTriggeredAbility(final IsolationCellTriggeredAbility ability) {
public IsolationCellTriggeredAbility copy() {return new IsolationCellTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent casts a creature spell, that player loses 2 life unless he or she pays {2}.";
class IsolationCellEffect extends OneShotEffect {
public IsolationCellEffect() {
public IsolationCellEffect(final IsolationCellEffect effect) {
public IsolationCellEffect copy() {return new IsolationCellEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JinGitaxiasCoreAugur extends CardImpl {
public JinGitaxiasCoreAugur(UUID ownerId) {
public JinGitaxiasCoreAugur(final JinGitaxiasCoreAugur card) {
public JinGitaxiasCoreAugur copy() {return new JinGitaxiasCoreAugur(this);
public class JorKadeenThePrevailer extends CardImpl {
public JorKadeenThePrevailer(UUID ownerId) {
public JorKadeenThePrevailer(final JorKadeenThePrevailer card) {
public JorKadeenThePrevailer copy() {return new JorKadeenThePrevailer(this);
public class KarnLiberated extends CardImpl {
public KarnLiberated(UUID ownerId) {
public KarnLiberated(final KarnLiberated card) {
public KarnLiberated copy() {return new KarnLiberated(this);
class KarnLiberatedEffect extends OneShotEffect {
public KarnLiberatedEffect(UUID exileId) {
public KarnLiberatedEffect(final KarnLiberatedEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public class KilnWalker extends CardImpl {
public KilnWalker(UUID ownerId) {
public KilnWalker(final KilnWalker card) {
public KilnWalker copy() {return new KilnWalker(this);
public class Lashwrithe extends CardImpl {
public Lashwrithe(UUID ownerId) {
public Lashwrithe(final Lashwrithe card) {
public Lashwrithe copy() {return new Lashwrithe(this);
public class LeechingBite extends CardImpl {
public LeechingBite(UUID ownerId) {
public LeechingBite(final LeechingBite card) {
public LeechingBite copy() {return new LeechingBite(this);
class LeechingBiteEffect extends ContinuousEffectImpl {
public LeechingBiteEffect() {
public LeechingBiteEffect(final LeechingBiteEffect effect) {
public LeechingBiteEffect copy() {return new LeechingBiteEffect(this);
public boolean apply(Game game, Ability source) {return true;return new LifesFinale(this);return new LifesFinaleEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LostLeonin extends CardImpl {
public LostLeonin (UUID ownerId) {
public LostLeonin (final LostLeonin card) {
public LostLeonin copy() {return new LostLeonin(this);return new LoxodonConvert(this);
public class MarrowShards extends CardImpl {
public MarrowShards(UUID ownerId) {
public MarrowShards(final MarrowShards card) {
public MarrowShards copy() {return new MarrowShards(this);
public class MasterSplicer extends CardImpl {
public MasterSplicer(UUID ownerId) {
public MasterSplicer(final MasterSplicer card) {
public MasterSplicer copy() {return new MasterSplicer(this);
public class MaulSplicer extends CardImpl {
public MaulSplicer(UUID ownerId) {
public MaulSplicer(final MaulSplicer card) {
public MaulSplicer copy() {return new MaulSplicer(this);
public class MeliraSylvokOutcast extends CardImpl {
public MeliraSylvokOutcast(UUID ownerId) {
public MeliraSylvokOutcast(final MeliraSylvokOutcast card) {
public MeliraSylvokOutcast copy() {return new MeliraSylvokOutcast(this);
class MeliraSylvokOutcastEffect extends ReplacementEffectImpl {
public MeliraSylvokOutcastEffect() {
public MeliraSylvokOutcastEffect(final MeliraSylvokOutcastEffect effect) {
public MeliraSylvokOutcastEffect copy() {return new MeliraSylvokOutcastEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ADD_COUNTER;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getData().equals(CounterType.POISON.getName()) && event.getTargetId().equals(source.getControllerId());
class MeliraSylvokOutcastEffect2 extends ReplacementEffectImpl {
public MeliraSylvokOutcastEffect2() {
public MeliraSylvokOutcastEffect2(final MeliraSylvokOutcastEffect2 effect) {
public MeliraSylvokOutcastEffect2 copy() {return new MeliraSylvokOutcastEffect2(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ADD_COUNTER;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
class MeliraSylvokOutcastEffect3 extends ContinuousEffectImpl {
public MeliraSylvokOutcastEffect3() {
public MeliraSylvokOutcastEffect3(final MeliraSylvokOutcastEffect3 effect) {
public MeliraSylvokOutcastEffect3 copy() {return new MeliraSylvokOutcastEffect3(this);
public boolean apply(Game game, Ability source) {return true;
public class MentalMisstep extends CardImpl {
public MentalMisstep (UUID ownerId) {
public MentalMisstep (final MentalMisstep card) {
public MentalMisstep copy() {return new MentalMisstep(this);
public class MoltensteelDragon extends CardImpl {
public MoltensteelDragon(UUID ownerId) {
public MoltensteelDragon(final MoltensteelDragon card) {
public MoltensteelDragon copy() {return new MoltensteelDragon(this);
public class MortisDogs extends CardImpl {
public MortisDogs(UUID ownerId) {
public MortisDogs(final MortisDogs card) {
public MortisDogs copy() {return new MortisDogs(this);
class MortisDogsEffect extends OneShotEffect {
public MortisDogsEffect() {
public MortisDogsEffect copy() {return new MortisDogsEffect();
public boolean apply(Game game, Ability source) {return true;return false;
public class MutagenicGrowth extends CardImpl {
public MutagenicGrowth (UUID ownerId) {
public MutagenicGrowth (final MutagenicGrowth card) {
public MutagenicGrowth copy() {return new MutagenicGrowth(this);
public class MycosynthFiend extends CardImpl {
public MycosynthFiend(UUID ownerId) {
public MycosynthFiend(final MycosynthFiend card) {
public MycosynthFiend copy() {return new MycosynthFiend(this);
public class MycosynthWellspring extends CardImpl {
public MycosynthWellspring(UUID ownerId) {
public MycosynthWellspring(final MycosynthWellspring card) {
public MycosynthWellspring copy() {return new MycosynthWellspring(this);
public class MyrSuperion extends CardImpl {
public MyrSuperion(UUID ownerId) {
public MyrSuperion(final MyrSuperion card) {
public MyrSuperion copy() {return new MyrSuperion(this);
public class Necropouncer extends CardImpl {
public Necropouncer(UUID ownerId) {
public Necropouncer(final Necropouncer card) {
public Necropouncer copy() {return new Necropouncer(this);
public class NornsAnnex extends CardImpl {
public NornsAnnex(UUID ownerId) {
public NornsAnnex(final NornsAnnex card) {
public NornsAnnex copy() {return new NornsAnnex(this);
public class NoxiousRevival extends CardImpl {
public NoxiousRevival (UUID ownerId) {
public NoxiousRevival (final NoxiousRevival card) {
public NoxiousRevival copy() {return new NoxiousRevival(this);
public class NumbingDose extends CardImpl {
public NumbingDose(UUID ownerId) {
public NumbingDose(final NumbingDose card) {
public NumbingDose copy() {return new NumbingDose(this);
class NumbingDoseTriggeredAbility extends TriggeredAbilityImpl {
public NumbingDoseTriggeredAbility() {
public NumbingDoseTriggeredAbility(final NumbingDoseTriggeredAbility ability) {
public NumbingDoseTriggeredAbility copy() {return new NumbingDoseTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of the upkeep of enchanted permanent's controller, that player loses 1 life.";
public class OgreMenial extends CardImpl {
public OgreMenial(UUID ownerId) {
public OgreMenial(final OgreMenial card) {
public OgreMenial copy() {return new OgreMenial(this);
public class OmenMachine extends CardImpl {
public OmenMachine(UUID ownerId) {
public OmenMachine(final OmenMachine card) {
public OmenMachine copy() {return new OmenMachine(this);
public OmenMachineEffect() {
public OmenMachineEffect(final OmenMachineEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public OmenMachineEffect copy() {return new OmenMachineEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
class OmenMachineEffect2 extends OneShotEffect {
public OmenMachineEffect2() {
public OmenMachineEffect2(final OmenMachineEffect2 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public OmenMachineEffect2 copy() {return new OmenMachineEffect2(this);
public class ParasiticImplant extends CardImpl {
public ParasiticImplant(UUID ownerId) {
public ParasiticImplant(final ParasiticImplant card) {
public ParasiticImplant copy() {return new ParasiticImplant(this);
class ParasiticImplantEffect extends OneShotEffect {
ParasiticImplantEffect() {
ParasiticImplantEffect(final ParasiticImplantEffect effect) {
public boolean apply(Game game, Ability source) {return creature.sacrifice(source.getSourceId(), game);return false;
public ParasiticImplantEffect copy() {return new ParasiticImplantEffect(this);
public class PestilentSouleater extends CardImpl {
public PestilentSouleater(UUID ownerId) {
public PestilentSouleater(final PestilentSouleater card) {
public PestilentSouleater copy() {return new PestilentSouleater(this);
public class PhyrexianHulk extends CardImpl {
public PhyrexianHulk(UUID ownerId) {
public PhyrexianHulk(final PhyrexianHulk card) {
public PhyrexianHulk copy() {return new PhyrexianHulk(this);
public class PhyrexianIngester extends CardImpl {
public PhyrexianIngester(UUID ownerId) {
public PhyrexianIngester(final PhyrexianIngester card) {
public PhyrexianIngester copy() {return new PhyrexianIngester(this);
class PhyrexianIngesterImprintEffect extends OneShotEffect {
public PhyrexianIngesterImprintEffect() {
public PhyrexianIngesterImprintEffect(final PhyrexianIngesterImprintEffect effect) {
public PhyrexianIngesterImprintEffect copy() {return new PhyrexianIngesterImprintEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class PhyrexianIngesterBoostEffect extends ContinuousEffectImpl {
public PhyrexianIngesterBoostEffect() {
public PhyrexianIngesterBoostEffect(final PhyrexianIngesterBoostEffect effect) {
public PhyrexianIngesterBoostEffect copy() {return new PhyrexianIngesterBoostEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class PhyrexianMetamorph extends CardImpl {
public PhyrexianMetamorph(UUID ownerId) {
ApplyToPermanent phyrexianMetamorphApplier = new ApplyToPermanent() {
public Boolean apply(Game game, Permanent permanent) {return apply(game, (MageObject) permanent);
public Boolean apply(Game game, MageObject mageObject) {return true;
public PhyrexianMetamorph(final PhyrexianMetamorph card) {
public PhyrexianMetamorph copy() {return new PhyrexianMetamorph(this);
public class PhyrexianObliterator extends CardImpl {
public PhyrexianObliterator(UUID ownerId) {
public PhyrexianObliterator(final PhyrexianObliterator card) {
public PhyrexianObliterator copy() {return new PhyrexianObliterator(this);
class PhyrexianObliteratorTriggeredAbility extends TriggeredAbilityImpl {
PhyrexianObliteratorTriggeredAbility() {
PhyrexianObliteratorTriggeredAbility(final PhyrexianObliteratorTriggeredAbility ability) {
public PhyrexianObliteratorTriggeredAbility copy() {return new PhyrexianObliteratorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a source deals damage to {this}, that source's controller sacrifices that many permanents";
public class PhyrexiasCore extends CardImpl {
public PhyrexiasCore(UUID ownerId) {
public PhyrexiasCore(final PhyrexiasCore card) {
public PhyrexiasCore copy() {return new PhyrexiasCore(this);
public class PithDriller extends CardImpl {
public PithDriller(UUID ownerId) {
public PithDriller(final PithDriller card) {
public PithDriller copy() {return new PithDriller(this);
public class PorcelainLegionnaire extends CardImpl {
public PorcelainLegionnaire(UUID ownerId) {
public PorcelainLegionnaire(final PorcelainLegionnaire card) {
public PorcelainLegionnaire copy() {return new PorcelainLegionnaire(this);
public class PostmortemLunge extends CardImpl {
public PostmortemLunge(UUID ownerId) {
public PostmortemLunge(final PostmortemLunge card) {
public PostmortemLunge copy() {return new PostmortemLunge(this);
public void adjustTargets(Ability ability, Game game) {
class PostmortemLungeEffect extends OneShotEffect {
public PostmortemLungeEffect() {
public PostmortemLungeEffect(final PostmortemLungeEffect effect) {
public PostmortemLungeEffect copy() {return new PostmortemLungeEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class PraetorsGrasp extends CardImpl {
public PraetorsGrasp(UUID ownerId) {
public PraetorsGrasp(final PraetorsGrasp card) {
public PraetorsGrasp copy() {return new PraetorsGrasp(this);
class PraetorsGraspEffect extends OneShotEffect {
public PraetorsGraspEffect() {
public PraetorsGraspEffect(final PraetorsGraspEffect effect) {
public PraetorsGraspEffect copy() {return new PraetorsGraspEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class PraetorsGraspPlayEffect extends AsThoughEffectImpl {
public PraetorsGraspPlayEffect(UUID cardId) {
public PraetorsGraspPlayEffect(final PraetorsGraspPlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public PraetorsGraspPlayEffect copy() {return new PraetorsGraspPlayEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
class PraetorsGraspRevealEffect extends AsThoughEffectImpl {
public PraetorsGraspRevealEffect(UUID cardId) {
public PraetorsGraspRevealEffect(final PraetorsGraspRevealEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public PraetorsGraspRevealEffect copy() {return new PraetorsGraspRevealEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class PriestOfUrabrask extends CardImpl {
public PriestOfUrabrask(UUID ownerId) {
public PriestOfUrabrask(final PriestOfUrabrask card) {
public PriestOfUrabrask copy() {return new PriestOfUrabrask(this);
public class PristineTalisman extends CardImpl {
public PristineTalisman(UUID ownerId) {
public PristineTalisman(final PristineTalisman card) {
public PristineTalisman copy() {return new PristineTalisman(this);
public class PsychicBarrier extends CardImpl {
public PsychicBarrier(UUID ownerId) {
public PsychicBarrier(final PsychicBarrier card) {
public PsychicBarrier copy() {return new PsychicBarrier(this);
public class PsychicSurgery extends CardImpl {
public PsychicSurgery(UUID ownerId) {
public PsychicSurgery(final PsychicSurgery card) {
public PsychicSurgery copy() {return new PsychicSurgery(this);
class PsychicSurgeryTriggeredAbility extends TriggeredAbilityImpl {
public PsychicSurgeryTriggeredAbility() {
public PsychicSurgeryTriggeredAbility(final PsychicSurgeryTriggeredAbility ability) {
public PsychicSurgeryTriggeredAbility copy() {return new PsychicSurgeryTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LIBRARY_SHUFFLED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent shuffles his or her library, you may look at the top two cards of that library. You may exile one of those cards. Then put the rest on top of that library in any order.";
class PsychicSurgeryEffect extends OneShotEffect {
public PsychicSurgeryEffect() {
public PsychicSurgeryEffect(final PsychicSurgeryEffect effect) {
public PsychicSurgeryEffect copy() {return new PsychicSurgeryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PuresteelPaladin extends CardImpl {
public PuresteelPaladin(UUID ownerId) {
public PuresteelPaladin(final PuresteelPaladin card) {
public PuresteelPaladin copy() {return new PuresteelPaladin(this);
public class RageExtractor extends CardImpl {
public RageExtractor(UUID ownerId) {
public RageExtractor(final RageExtractor card) {
public RageExtractor copy() {return new RageExtractor(this);
class RageExtractorTriggeredAbility extends TriggeredAbilityImpl {
RageExtractorTriggeredAbility() {
RageExtractorTriggeredAbility(final RageExtractorTriggeredAbility ability) {
public RageExtractorTriggeredAbility copy() {return new RageExtractorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast a spell with p in its mana cost, {this} deals damage equal to that spell's converted mana cost to target creature or player.";
public class RazorSwine extends CardImpl {
public RazorSwine(UUID ownerId) {
public RazorSwine(final RazorSwine card) {
public RazorSwine copy() {return new RazorSwine(this);
public class ReaperOfSheoldred extends CardImpl {
public ReaperOfSheoldred(UUID ownerId) {
public ReaperOfSheoldred(final ReaperOfSheoldred card) {
public ReaperOfSheoldred copy() {return new ReaperOfSheoldred(this);
class ReaperOfSheoldredTriggeredAbility extends TriggeredAbilityImpl {
ReaperOfSheoldredTriggeredAbility() {
ReaperOfSheoldredTriggeredAbility(final ReaperOfSheoldredTriggeredAbility ability) {
public ReaperOfSheoldredTriggeredAbility copy() {return new ReaperOfSheoldredTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a source deals damage to {this}, that source's controller gets a poison counter.";
public class RememberTheFallen extends CardImpl {
public RememberTheFallen(UUID ownerId) {
public RememberTheFallen(final RememberTheFallen card) {
public RememberTheFallen copy() {return new RememberTheFallen(this);
class RememberTheFallenEffect extends OneShotEffect {
public RememberTheFallenEffect() {
public RememberTheFallenEffect(final RememberTheFallenEffect effect) {
public RememberTheFallenEffect copy() {return new RememberTheFallenEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class RottedHystrix extends CardImpl {
public RottedHystrix(UUID ownerId) {
public RottedHystrix(final RottedHystrix card) {
public RottedHystrix copy() {return new RottedHystrix(this);
public class RuthlessInvasion extends CardImpl {
public RuthlessInvasion (UUID ownerId) {
public RuthlessInvasion (final RuthlessInvasion card) {
public RuthlessInvasion copy() {return new RuthlessInvasion(this);
class RuthlessInvasionEffect extends RestrictionEffect {
RuthlessInvasionEffect() {
RuthlessInvasionEffect(final RuthlessInvasionEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public RuthlessInvasionEffect copy() {return new RuthlessInvasionEffect(this);
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public class ScrapyardSalvo extends CardImpl {
public ScrapyardSalvo(UUID ownerId) {
public ScrapyardSalvo(final ScrapyardSalvo card) {
public ScrapyardSalvo copy() {return new ScrapyardSalvo(this);
public class SensorSplicer extends CardImpl {
public SensorSplicer(UUID ownerId) {
public SensorSplicer(final SensorSplicer card) {
public SensorSplicer copy() {return new SensorSplicer(this);
public class ShriekRaptor extends CardImpl {
public ShriekRaptor(UUID ownerId) {
public ShriekRaptor(final ShriekRaptor card) {
public ShriekRaptor copy() {return new ShriekRaptor(this);
public class ShrineOfBoundlessGrowth extends CardImpl {
public ShrineOfBoundlessGrowth (UUID ownerId) {
public ShrineOfBoundlessGrowth (final ShrineOfBoundlessGrowth card) {
public ShrineOfBoundlessGrowth copy() {return new ShrineOfBoundlessGrowth(this);
public class ShrineOfBurningRage extends CardImpl {
public ShrineOfBurningRage (UUID ownerId) {
public ShrineOfBurningRage (final ShrineOfBurningRage card) {
public ShrineOfBurningRage copy() {return new ShrineOfBurningRage(this);
public class ShrineOfLimitlessPower extends CardImpl {
public ShrineOfLimitlessPower(UUID ownerId) {
public ShrineOfLimitlessPower(final ShrineOfLimitlessPower card) {
public ShrineOfLimitlessPower copy() {return new ShrineOfLimitlessPower(this);
public class ShrineOfLoyalLegions extends CardImpl {
public ShrineOfLoyalLegions(UUID ownerId) {
public ShrineOfLoyalLegions(final ShrineOfLoyalLegions card) {
public ShrineOfLoyalLegions copy() {return new ShrineOfLoyalLegions(this);
public class ShrineOfPiercingVision extends CardImpl {
public ShrineOfPiercingVision(UUID ownerId) {
public ShrineOfPiercingVision(final ShrineOfPiercingVision card) {
public ShrineOfPiercingVision copy() {return new ShrineOfPiercingVision(this);
class ShrineOfPiercingVisionEffect extends OneShotEffect {
public ShrineOfPiercingVisionEffect() {
public ShrineOfPiercingVisionEffect(final ShrineOfPiercingVisionEffect effect) {
public ShrineOfPiercingVisionEffect copy() {return new ShrineOfPiercingVisionEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class Sickleslicer extends CardImpl {
public Sickleslicer (UUID ownerId) {
public Sickleslicer (final Sickleslicer card) {
public Sickleslicer copy() {return new Sickleslicer(this);
public class SlagFiend extends CardImpl {
public SlagFiend(UUID ownerId) {
public SlagFiend(final SlagFiend card) {
public SlagFiend copy() {return new SlagFiend(this);
public class SlashPanther extends CardImpl {
public SlashPanther(UUID ownerId) {
public SlashPanther(final SlashPanther card) {
public SlashPanther copy() {return new SlashPanther(this);
public class SoulConduit extends CardImpl {
public SoulConduit(UUID ownerId) {
public SoulConduit(final SoulConduit card) {
public SoulConduit copy() {return new SoulConduit(this);
class SoulConduitEffect extends OneShotEffect {
public SoulConduitEffect() {
public SoulConduitEffect(final SoulConduitEffect effect) {
public SoulConduitEffect copy() {return new SoulConduitEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return false;return false;return true;return false;
public class Spellskite extends CardImpl {
public Spellskite(UUID ownerId) {
public Spellskite(final Spellskite card) {
public Spellskite copy() {return new Spellskite(this);
public class Spinebiter extends CardImpl {
public Spinebiter(UUID ownerId) {
public Spinebiter(final Spinebiter card) {
public Spinebiter copy() {return new Spinebiter(this);
public class SpinedThopter extends CardImpl {
public SpinedThopter(UUID ownerId) {
public SpinedThopter(final SpinedThopter card) {
public SpinedThopter copy() {return new SpinedThopter(this);
public class SpireMonitor extends CardImpl {
public SpireMonitor(UUID ownerId) {
public SpireMonitor(final SpireMonitor card) {
public SpireMonitor copy() {return new SpireMonitor(this);
public class SurgeNode extends CardImpl {
public SurgeNode (UUID ownerId) {
public SurgeNode (final SurgeNode card) {
public SurgeNode copy() {return new SurgeNode(this);
public class SurgicalExtraction extends CardImpl {
public SurgicalExtraction(UUID ownerId) {
public SurgicalExtraction(final SurgicalExtraction card) {
public SurgicalExtraction copy() {return new SurgicalExtraction(this);
class SurgicalExtractionEffect extends OneShotEffect {
public SurgicalExtractionEffect() {
public SurgicalExtractionEffect(final SurgicalExtractionEffect effect) {
public SurgicalExtractionEffect copy() {return new SurgicalExtractionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SuturePriest extends CardImpl {
public SuturePriest (UUID ownerId) {
public SuturePriest (final SuturePriest card) {
public SuturePriest copy() {return new SuturePriest(this);
class SuturePriestSecondTriggeredAbility extends TriggeredAbilityImpl {
SuturePriestSecondTriggeredAbility() {
SuturePriestSecondTriggeredAbility(final SuturePriestSecondTriggeredAbility ability) {
public SuturePriestSecondTriggeredAbility copy() {return new SuturePriestSecondTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature enters the battlefield under an opponent's control, you may have that player lose 1 life.";
public class SwordOfWarAndPeace extends CardImpl {
public SwordOfWarAndPeace (UUID ownerId) {
public SwordOfWarAndPeace (final SwordOfWarAndPeace card) {
public SwordOfWarAndPeace copy() {return new SwordOfWarAndPeace(this);
class SwordOfWarAndPeaceAbility extends TriggeredAbilityImpl {
public SwordOfWarAndPeaceAbility() {
public SwordOfWarAndPeaceAbility(final SwordOfWarAndPeaceAbility ability) {
public SwordOfWarAndPeaceAbility copy() {return new SwordOfWarAndPeaceAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature deals combat damage to a player, {this} deals damage to that player equal to the number of cards in his or her hand and you gain 1 life for each card in your hand.";
class SwordOfWarAndPeaceDamageEffect extends OneShotEffect {
SwordOfWarAndPeaceDamageEffect() {
SwordOfWarAndPeaceDamageEffect(final SwordOfWarAndPeaceDamageEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public SwordOfWarAndPeaceDamageEffect copy() {return new SwordOfWarAndPeaceDamageEffect(this);
public class TormentorExarch extends CardImpl {
public TormentorExarch(UUID ownerId) {
public TormentorExarch(final TormentorExarch card) {
public TormentorExarch copy() {return new TormentorExarch(this);
public class TorporOrb extends CardImpl {
public TorporOrb(UUID ownerId) {
public TorporOrb(final TorporOrb card) {
public TorporOrb copy() {return new TorporOrb(this);
TorporOrbEffect() {
TorporOrbEffect(final TorporOrbEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return sourceObject.getLogName() + " prevented ability of " + mageObject.getLogName() + " to trigger";return null;
public TorporOrbEffect copy() {return new TorporOrbEffect(this);
public class ToxicNim extends CardImpl {
public ToxicNim(UUID ownerId) {
public ToxicNim(final ToxicNim card) {
public ToxicNim copy() {return new ToxicNim(this);
public class TrespassingSouleater extends CardImpl {
public TrespassingSouleater(UUID ownerId) {
public TrespassingSouleater(final TrespassingSouleater card) {
public TrespassingSouleater copy() {return new TrespassingSouleater(this);
public class TriumphOfTheHordes extends CardImpl {
public TriumphOfTheHordes(UUID ownerId) {
public TriumphOfTheHordes(final TriumphOfTheHordes card) {
public TriumphOfTheHordes copy() {return new TriumphOfTheHordes(this);
public class UnwindingClock extends CardImpl {
public UnwindingClock(UUID ownerId) {
public UnwindingClock(final UnwindingClock card) {
public UnwindingClock copy() {return new UnwindingClock(this);
class UnwindingClockEffect extends ContinuousEffectImpl {
public UnwindingClockEffect() {
public UnwindingClockEffect(final UnwindingClockEffect effect) {
public UnwindingClockEffect copy() {return new UnwindingClockEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class UrabraskTheHidden extends CardImpl {
public UrabraskTheHidden(UUID ownerId) {
public UrabraskTheHidden(final UrabraskTheHidden card) {
public UrabraskTheHidden copy() {return new UrabraskTheHidden(this);
class UrabraskTheHiddenEffect extends ReplacementEffectImpl {
UrabraskTheHiddenEffect() {
UrabraskTheHiddenEffect(final UrabraskTheHiddenEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public UrabraskTheHiddenEffect copy() {return new UrabraskTheHiddenEffect(this);
public class VaporSnag extends CardImpl {
public VaporSnag (UUID ownerId) {
public VaporSnag (final VaporSnag card) {
public VaporSnag copy() {return new VaporSnag(this);
public class VaultSkirge extends CardImpl {
public VaultSkirge(UUID ownerId) {
public VaultSkirge(final VaultSkirge card) {
public VaultSkirge copy() {return new VaultSkirge(this);
public class VictoriousDestruction extends CardImpl {
public VictoriousDestruction(UUID ownerId) {
public VictoriousDestruction(final VictoriousDestruction card) {
public VictoriousDestruction copy() {return new VictoriousDestruction(this);
public class ViralDrake extends CardImpl {
public ViralDrake(UUID ownerId) {
public ViralDrake(final ViralDrake card) {
public ViralDrake copy() {return new ViralDrake(this);
public class ViridianBetrayers extends CardImpl {
public ViridianBetrayers(UUID ownerId) {
public ViridianBetrayers(final ViridianBetrayers card) {
public ViridianBetrayers copy() {return new ViridianBetrayers(this);
class PoisonedCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return true;return false;
public class ViridianHarvest extends CardImpl {
public ViridianHarvest(UUID ownerId) {
public ViridianHarvest(final ViridianHarvest card) {
public ViridianHarvest copy() {return new ViridianHarvest(this);
public class VitalSplicer extends CardImpl {
public VitalSplicer(UUID ownerId) {
public VitalSplicer(final VitalSplicer card) {
public VitalSplicer copy() {return new VitalSplicer(this);
public class VoltCharge extends CardImpl {
public VoltCharge(UUID ownerId) {
public VoltCharge(final VoltCharge card) {
public VoltCharge copy() {return new VoltCharge(this);
public class VorinclexVoiceOfHunger extends CardImpl {
public VorinclexVoiceOfHunger(UUID ownerId) {
public VorinclexVoiceOfHunger(final VorinclexVoiceOfHunger card) {
public VorinclexVoiceOfHunger copy() {return new VorinclexVoiceOfHunger(this);
class VorinclexTriggeredAbility2 extends TriggeredAbilityImpl {
public VorinclexTriggeredAbility2() {
public VorinclexTriggeredAbility2(VorinclexTriggeredAbility2 ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public VorinclexTriggeredAbility2 copy() {return new VorinclexTriggeredAbility2(this);
public String getRule() {return staticText;
public class VulshokRefugee extends CardImpl {
public VulshokRefugee(UUID ownerId) {
public VulshokRefugee(final VulshokRefugee card) {
public VulshokRefugee copy() {return new VulshokRefugee(this);
public class WarReport extends CardImpl {
public WarReport(UUID ownerId) {
public WarReport(final WarReport card) {
public WarReport copy() {return new WarReport(this);
class WarReportEffect extends OneShotEffect {
public WarReportEffect() {
public WarReportEffect(final WarReportEffect effect) {
public WarReportEffect copy() {return new WarReportEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class WingSplicer extends CardImpl {
public WingSplicer(UUID ownerId) {
public WingSplicer(final WingSplicer card) {
public WingSplicer copy() {return new WingSplicer(this);
public class Xenograft extends CardImpl {
public Xenograft(UUID ownerId) {
public Xenograft(final Xenograft card) {
public Xenograft copy() {return new Xenograft(this);
class XenograftAddSubtypeEffect extends ContinuousEffectImpl {
public XenograftAddSubtypeEffect() {
public XenograftAddSubtypeEffect(final XenograftAddSubtypeEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public XenograftAddSubtypeEffect copy() {return new XenograftAddSubtypeEffect(this);
public class AnabaShaman extends CardImpl {
public AnabaShaman(UUID ownerId) {
public AnabaShaman(final AnabaShaman card) {
public AnabaShaman copy() {return new AnabaShaman(this);
public class Anarchist extends CardImpl {
public Anarchist(UUID ownerId) {
public Anarchist(final Anarchist card) {
public Anarchist copy() {return new Anarchist(this);
public class AvenFlock extends CardImpl {
public AvenFlock(UUID ownerId) {
public AvenFlock(final AvenFlock card) {
public AvenFlock copy() {return new AvenFlock(this);
public class AvenWindreader extends CardImpl {
public AvenWindreader(UUID ownerId) {
public AvenWindreader(final AvenWindreader card) {
public AvenWindreader copy() {return new AvenWindreader(this);
public class BalduvianBarbarians extends CardImpl {
public BalduvianBarbarians(UUID ownerId) {
public BalduvianBarbarians(final BalduvianBarbarians card) {
public BalduvianBarbarians copy() {return new BalduvianBarbarians(this);
public class BalefulStare extends CardImpl {
public BalefulStare(UUID ownerId) {
public BalefulStare(final BalefulStare card) {
public BalefulStare copy() {return new BalefulStare(this);
class BalefulStareEffect extends OneShotEffect {
public BalefulStareEffect() {
public boolean apply(Game game, Ability source) {return true;return false;
public BalefulStareEffect(final BalefulStareEffect effect) {
public BalefulStareEffect copy() {return new BalefulStareEffect(this);
public class BattleOfWits extends CardImpl {
public BattleOfWits(UUID ownerId) {
public BattleOfWits(final BattleOfWits card) {
public BattleOfWits copy() {return new BattleOfWits(this);
class BattleOfWitsCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class BeastOfBurden extends CardImpl {
public BeastOfBurden(UUID ownerId) {
public BeastOfBurden(final BeastOfBurden card) {
public BeastOfBurden copy() {return new BeastOfBurden(this);
public class BlessedOrator extends CardImpl {
public BlessedOrator(UUID ownerId) {
public BlessedOrator(final BlessedOrator card) {
public BlessedOrator copy() {return new BlessedOrator(this);
public class BlinkingSpirit extends CardImpl {
public BlinkingSpirit(UUID ownerId) {
public BlinkingSpirit(final BlinkingSpirit card) {
public BlinkingSpirit copy() {return new BlinkingSpirit(this);
public class BloodMoon extends CardImpl {
public BloodMoon(UUID ownerId) {
public BloodMoon(final BloodMoon card) {
public BloodMoon copy() {return new BloodMoon(this);
class BloodMoonEffect extends ContinuousEffectImpl {
BloodMoonEffect() {
BloodMoonEffect(final BloodMoonEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public BloodMoonEffect copy() {return new BloodMoonEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class BoilingSeas extends CardImpl {
public BoilingSeas(UUID ownerId) {
public BoilingSeas(final BoilingSeas card) {
public BoilingSeas copy() {return new BoilingSeas(this);
public class Chastise extends CardImpl {
public Chastise(UUID ownerId) {
public Chastise(final Chastise card) {
public Chastise copy() {return new Chastise(this);
class ChastiseEffect extends OneShotEffect {
public ChastiseEffect() {
public ChastiseEffect(final ChastiseEffect effect) {
public ChastiseEffect copy() {return new ChastiseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public String getText(Mode mode) {return "You gain life equal to its power";
public class ContaminatedBond extends CardImpl {
public ContaminatedBond(UUID ownerId) {
public ContaminatedBond(final ContaminatedBond card) {
public ContaminatedBond copy() {return new ContaminatedBond(this);
public class Cowardice extends CardImpl {
public Cowardice(UUID ownerId) {
public Cowardice(final Cowardice card) {
public Cowardice copy() {return new Cowardice(this);
class CowardiceTriggeredAbility extends TriggeredAbilityImpl {
public CowardiceTriggeredAbility() {
public CowardiceTriggeredAbility(CowardiceTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature becomes the target of a spell or ability, return that creature to its owner's hand";
public CowardiceTriggeredAbility copy() {return new CowardiceTriggeredAbility(this);
public class CrossbowInfantry extends CardImpl {
public CrossbowInfantry(UUID ownerId) {
public CrossbowInfantry(final CrossbowInfantry card) {
public CrossbowInfantry copy() {return new CrossbowInfantry(this);
public class Deathgazer extends CardImpl {
public Deathgazer(UUID ownerId) {
public Deathgazer(final Deathgazer card) {
public Deathgazer copy() {return new Deathgazer(this);
public class DefenseGrid extends CardImpl {
public DefenseGrid(UUID ownerId) {
public DefenseGrid(final DefenseGrid card) {
public DefenseGrid copy() {return new DefenseGrid(this);return true;return true;return false;return new DefenseGridCostModificationEffect(this);
public class EarlyHarvest extends CardImpl {
public EarlyHarvest(UUID ownerId) {
public EarlyHarvest(final EarlyHarvest card) {
public EarlyHarvest copy() {return new EarlyHarvest(this);
class UntapAllLandsTargetEffect extends OneShotEffect {
public UntapAllLandsTargetEffect() {
public UntapAllLandsTargetEffect(final UntapAllLandsTargetEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public UntapAllLandsTargetEffect copy() {return new UntapAllLandsTargetEffect(this);
public class ElvishBard extends CardImpl {
public ElvishBard(UUID ownerId) {
public ElvishBard(final ElvishBard card) {
public ElvishBard copy() {return new ElvishBard(this);
public class ElvishBerserker extends CardImpl {
public ElvishBerserker(UUID ownerId) {
public ElvishBerserker(final ElvishBerserker card) {
public ElvishBerserker copy() {return new ElvishBerserker(this);
class ElvishBerserkerAbility extends BecomesBlockedTriggeredAbility {
public ElvishBerserkerAbility() {
public ElvishBerserkerAbility(final ElvishBerserkerAbility ability) {
public ElvishBerserkerAbility copy() {return new ElvishBerserkerAbility(this);
public String getRule() {return "Whenever {this} becomes blocked, it gets +1/+1 until end of turn for each creature blocking it.";
class ElvishBerserkerValue implements DynamicValue {
public ElvishBerserkerValue copy() {return new ElvishBerserkerValue();
public int calculate(Game game, Ability sourceAbility, Effect effect) {return blockers > 1 ? (blockers) : 0;return 0;
public String getMessage() {return "+1/+1 until end of turn for each creature blocking it";
public class EmperorCrocodile extends CardImpl {
public EmperorCrocodile(UUID ownerId) {
public EmperorCrocodile(final EmperorCrocodile card) {
public EmperorCrocodile copy() {return new EmperorCrocodile(this);
class EmperorCrocodileStateTriggeredAbility extends StateTriggeredAbility {
public EmperorCrocodileStateTriggeredAbility() {
public EmperorCrocodileStateTriggeredAbility(final EmperorCrocodileStateTriggeredAbility ability) {
public EmperorCrocodileStateTriggeredAbility copy() {return new EmperorCrocodileStateTriggeredAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;
public String getRule() {return "When you control no other creatures, sacrifice {this}.";
public class Enrage extends CardImpl {
public Enrage(UUID ownerId) {
public Enrage(final Enrage card) {
public Enrage copy() {return new Enrage(this);
public class Execute extends CardImpl {
public Execute(UUID ownerId) {
public Execute(final Execute card) {
public Execute copy() {return new Execute(this);
public class FellwarStone extends CardImpl {
public FellwarStone(UUID ownerId) {
public FellwarStone(final FellwarStone card) {
public FellwarStone copy() {return new FellwarStone(this);
public class FlameWave extends CardImpl {
public FlameWave(UUID ownerId) {
public FlameWave(final FlameWave card) {
public FlameWave copy() {return new FlameWave(this);
public class FleetingImage extends CardImpl {
public FleetingImage(UUID ownerId) {
public FleetingImage(final FleetingImage card) {
public FleetingImage copy() {return new FleetingImage(this);
public class FlowstoneCrusher extends CardImpl {
public FlowstoneCrusher(UUID ownerId) {
public FlowstoneCrusher(final FlowstoneCrusher card) {
public FlowstoneCrusher copy() {return new FlowstoneCrusher(this);
public class FlowstoneShambler extends CardImpl {
public FlowstoneShambler(UUID ownerId) {
public FlowstoneShambler(final FlowstoneShambler card) {
public FlowstoneShambler copy() {return new FlowstoneShambler(this);
public class FootSoldiers extends CardImpl {
public FootSoldiers(UUID ownerId) {
public FootSoldiers(final FootSoldiers card) {
public FootSoldiers copy() {return new FootSoldiers(this);
public class GiantCockroach extends CardImpl {
public GiantCockroach(UUID ownerId) {
public GiantCockroach(final GiantCockroach card) {
public GiantCockroach copy() {return new GiantCockroach(this);
public class GoblinBrigand extends CardImpl {
public GoblinBrigand(UUID ownerId) {
public GoblinBrigand(final GoblinBrigand card) {
public GoblinBrigand copy() {return new GoblinBrigand(this);
public class GoblinChariot extends CardImpl {
public GoblinChariot(UUID ownerId) {
public GoblinChariot(final GoblinChariot card) {
public GoblinChariot copy() {return new GoblinChariot(this);
public class GravePact extends CardImpl {
public GravePact(UUID ownerId) {
public GravePact(final GravePact card) {
public GravePact copy() {return new GravePact(this);
class GravePactTriggeredAbility extends TriggeredAbilityImpl {
public GravePactTriggeredAbility() {
public GravePactTriggeredAbility(final GravePactTriggeredAbility ability) {
public GravePactTriggeredAbility copy() {return new GravePactTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control dies, " + super.getRule();
class GravePactEffect extends OneShotEffect {
public GravePactEffect() {
public GravePactEffect(final GravePactEffect effect) {
public GravePactEffect copy() {return new GravePactEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GuerrillaTactics extends CardImpl {
public GuerrillaTactics(UUID ownerId) {
public GuerrillaTactics(final GuerrillaTactics card) {
public GuerrillaTactics copy() {return new GuerrillaTactics(this);
class GuerrillaTacticsTriggeredAbility extends TriggeredAbilityImpl {
GuerrillaTacticsTriggeredAbility() {
GuerrillaTacticsTriggeredAbility(final GuerrillaTacticsTriggeredAbility ability) {
public GuerrillaTacticsTriggeredAbility copy() {return new GuerrillaTacticsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(this.getControllerId()).contains(stackObject.getControllerId());return false;
public String getRule() {return "When a spell or ability an opponent controls causes you to discard {this}, " + super.getRule();
public class HellsCaretaker extends CardImpl {
public HellsCaretaker(UUID ownerId) {
public HellsCaretaker(final HellsCaretaker card) {
public HellsCaretaker copy() {return new HellsCaretaker(this);
public class HuntedWumpus extends CardImpl {
public HuntedWumpus(UUID ownerId) {
public HuntedWumpus(final HuntedWumpus card) {
public HuntedWumpus copy() {return new HuntedWumpus(this);
class HuntedWumpusEffect extends OneShotEffect {
public HuntedWumpusEffect() {
public HuntedWumpusEffect(final HuntedWumpusEffect effect) {
public HuntedWumpusEffect copy() {return new HuntedWumpusEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class IvoryMask extends CardImpl {
public IvoryMask(UUID ownerId) {
public IvoryMask(final IvoryMask card) {
public IvoryMask copy() {return new IvoryMask(this);
public class KingCheetah extends CardImpl {
public KingCheetah(UUID ownerId) {
public KingCheetah(final KingCheetah card) {
public KingCheetah copy() {return new KingCheetah(this);
public class KirdApe extends CardImpl {
public KirdApe(UUID ownerId) {
public KirdApe(final KirdApe card) {
public KirdApe copy() {return new KirdApe(this);
public class LlanowarBehemoth extends CardImpl {
public LlanowarBehemoth(UUID ownerId) {
public LlanowarBehemoth(final LlanowarBehemoth card) {
public LlanowarBehemoth copy() {return new LlanowarBehemoth(this);
public class Magnivore extends CardImpl {
public Magnivore(UUID ownerId) {
public Magnivore(final Magnivore card) {
public Magnivore copy() {return new Magnivore(this);
public class Maro extends CardImpl {
public Maro(UUID ownerId) {
public Maro(final Maro card) {
public Maro copy() {return new Maro(this);
public class MasterHealer extends CardImpl {
public MasterHealer(UUID ownerId) {
public MasterHealer(final MasterHealer card) {
public MasterHealer copy() {return new MasterHealer(this);
public class Mindslicer extends CardImpl {
public Mindslicer(UUID ownerId) {
public Mindslicer(final Mindslicer card) {
public Mindslicer copy() {return new Mindslicer(this);
public class MoggSentry extends CardImpl {
public MoggSentry(UUID ownerId) {
public MoggSentry(final MoggSentry card) {
public MoggSentry copy() {return new MoggSentry(this);
public class NaturalAffinity extends CardImpl {
public NaturalAffinity(UUID ownerId) {
public NaturalAffinity(final NaturalAffinity card) {
public NaturalAffinity copy() {return new NaturalAffinity(this);
class BecomesCreatureAllEffect extends ContinuousEffectImpl {
public BecomesCreatureAllEffect() {
public BecomesCreatureAllEffect(final BecomesCreatureAllEffect effect) {
public BecomesCreatureAllEffect copy() {return new BecomesCreatureAllEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.ColorChangingEffects_5 || layer == Layer.TypeChangingEffects_4;
public class Nekrataal extends CardImpl {
public Nekrataal(UUID ownerId) {
public Nekrataal(final Nekrataal card) {
public Nekrataal copy() {return new Nekrataal(this);
public class NorwoodRanger extends CardImpl {
public NorwoodRanger(UUID ownerId) {
public NorwoodRanger(final NorwoodRanger card) {
public NorwoodRanger copy() {return new NorwoodRanger(this);
public class OgreTaskmaster extends CardImpl {
public OgreTaskmaster(UUID ownerId) {
public OgreTaskmaster(final OgreTaskmaster card) {
public OgreTaskmaster copy() {return new OgreTaskmaster(this);
public class PaladinEnVec extends CardImpl {
public PaladinEnVec(UUID ownerId) {
public PaladinEnVec(final PaladinEnVec card) {
public PaladinEnVec copy() {return new PaladinEnVec(this);
public class PeaceOfMind extends CardImpl {
public PeaceOfMind(UUID ownerId) {
public PeaceOfMind(final PeaceOfMind card) {
public PeaceOfMind copy() {return new PeaceOfMind(this);
public class RazortoothRats extends CardImpl {
public RazortoothRats(UUID ownerId) {
public RazortoothRats(final RazortoothRats card) {
public RazortoothRats copy() {return new RazortoothRats(this);
public class RiverBear extends CardImpl {
public RiverBear(UUID ownerId) {
public RiverBear(final RiverBear card) {
public RiverBear copy() {return new RiverBear(this);
public class RogueKavu extends CardImpl {
public RogueKavu(UUID ownerId) {
public RogueKavu(final RogueKavu card) {
public RogueKavu copy() {return new RogueKavu(this);
public class SacredNectar extends CardImpl {
public SacredNectar(UUID ownerId) {
public SacredNectar(final SacredNectar card) {
public SacredNectar copy() {return new SacredNectar(this);
public class SageAven extends CardImpl {
public SageAven(UUID ownerId) {
public SageAven(final SageAven card) {
public SageAven copy() {return new SageAven(this);
public class SanctumGuardian extends CardImpl {
public SanctumGuardian(UUID ownerId) {
public SanctumGuardian(final SanctumGuardian card) {
public SanctumGuardian copy() {return new SanctumGuardian(this);
public class ScaledWurm extends CardImpl {
public ScaledWurm(UUID ownerId) {
public ScaledWurm(final ScaledWurm card) {
public ScaledWurm copy() {return new ScaledWurm(this);
public class SeedbornMuse extends CardImpl {
public SeedbornMuse(UUID ownerId) {
public SeedbornMuse(final SeedbornMuse card) {
public SeedbornMuse copy() {return new SeedbornMuse(this);
public class SerrasBlessing extends CardImpl {
public SerrasBlessing(UUID ownerId) {
public SerrasBlessing(final SerrasBlessing card) {
public SerrasBlessing copy() {return new SerrasBlessing(this);
public class Slay extends CardImpl {
public Slay(UUID ownerId) {
public Slay(final Slay card) {
public Slay copy() {return new Slay(this);
public class SleightOfHand extends CardImpl {
public SleightOfHand(UUID ownerId) {
public SleightOfHand(final SleightOfHand card) {
public SleightOfHand copy() {return new SleightOfHand(this);
public class StorageMatrix extends CardImpl {
public StorageMatrix(UUID ownerId) {
public StorageMatrix(final StorageMatrix card) {
public StorageMatrix copy() {return new StorageMatrix(this);
class StorageMatrixRestrictionEffect extends RestrictionEffect {
public StorageMatrixRestrictionEffect() {
public StorageMatrixRestrictionEffect(final StorageMatrixRestrictionEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return false;return !permanent.getCardType().contains(type);return false;
public boolean canBeUntapped(Permanent permanent, Ability source, Game game) {return false;
public StorageMatrixRestrictionEffect copy() {return new StorageMatrixRestrictionEffect(this);
public class StormCrow extends CardImpl {
public StormCrow(UUID ownerId) {
public StormCrow(final StormCrow card) {
public StormCrow copy() {return new StormCrow(this);
public class SummerBloom extends CardImpl {
public SummerBloom(UUID ownerId) {
public SummerBloom(final SummerBloom card) {
public SummerBloom copy() {return new SummerBloom(this);
public class SwarmOfRats extends CardImpl {
public SwarmOfRats(UUID ownerId) {
public SwarmOfRats(final SwarmOfRats card) {
public SwarmOfRats copy() {return new SwarmOfRats(this);
public class TeferisPuzzleBox extends CardImpl {
public TeferisPuzzleBox(UUID ownerId) {
public void build() {
public TeferisPuzzleBox(final TeferisPuzzleBox card) {
public TeferisPuzzleBox copy() {return new TeferisPuzzleBox(this);
class TeferisPuzzleBoxEffect extends OneShotEffect {
public TeferisPuzzleBoxEffect() {
public TeferisPuzzleBoxEffect(final TeferisPuzzleBoxEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TeferisPuzzleBoxEffect copy() {return new TeferisPuzzleBoxEffect(this);
public class TemporalAdept extends CardImpl {
public TemporalAdept(UUID ownerId) {
public TemporalAdept(final TemporalAdept card) {
public TemporalAdept copy() {return new TemporalAdept(this);
public class ThievingMagpie extends CardImpl {
public ThievingMagpie(UUID ownerId) {
public ThievingMagpie(final ThievingMagpie card) {
public ThievingMagpie copy() {return new ThievingMagpie(this);
public class TradeRoutes extends CardImpl {
public TradeRoutes(UUID ownerId) {Effect returnToHand = new ReturnToHandTargetEffect();Ability returnLandToHand = new SimpleActivatedAbility(Zone.BATTLEFIELD, returnToHand, new GenericManaCost(1));returnLandToHand.addTarget(targetLandYouControl);this.addAbility(returnLandToHand);
public TradeRoutes(final TradeRoutes card) {
public TradeRoutes copy() {return new TradeRoutes(this);
public class TreasureTrove extends CardImpl {
public TreasureTrove(UUID ownerId) {
public TreasureTrove(final TreasureTrove card) {
public TreasureTrove copy() {return new TreasureTrove(this);
public class TreeMonkey extends CardImpl {
public TreeMonkey(UUID ownerId) {
public TreeMonkey(final TreeMonkey card) {
public TreeMonkey copy() {return new TreeMonkey(this);
public class VeteranCavalier extends CardImpl {
public VeteranCavalier(UUID ownerId) {
public VeteranCavalier(final VeteranCavalier card) {
public VeteranCavalier copy() {return new VeteranCavalier(this);
public class ViashinoSandstalker extends CardImpl {
public ViashinoSandstalker(UUID ownerId) {
public ViashinoSandstalker(final ViashinoSandstalker card) {
public ViashinoSandstalker copy() {return new ViashinoSandstalker(this);
public class VolcanicHammer extends CardImpl {
public VolcanicHammer(UUID ownerId) {
public VolcanicHammer(final VolcanicHammer card) {
public VolcanicHammer copy() {return new VolcanicHammer(this);
public class WanderguardSentry extends CardImpl {
public WanderguardSentry(UUID ownerId) {
public WanderguardSentry(final WanderguardSentry card) {
public WanderguardSentry copy() {return new WanderguardSentry(this);
public class WoodElves extends CardImpl {
public WoodElves(UUID ownerId) {
public WoodElves(final WoodElves card) {
public WoodElves copy() {return new WoodElves(this);
public class ZealousInquisitor extends CardImpl {
public ZealousInquisitor(UUID ownerId) {
public ZealousInquisitor(final ZealousInquisitor card) {
public ZealousInquisitor copy() {return new ZealousInquisitor(this);
public class ZodiacMonkey extends CardImpl {
public ZodiacMonkey(UUID ownerId) {
public ZodiacMonkey(final ZodiacMonkey card) {
public ZodiacMonkey copy() {return new ZodiacMonkey(this);return new Zombify(this);
public class AbstruseInterference extends CardImpl {
public AbstruseInterference(UUID ownerId) {
public AbstruseInterference(final AbstruseInterference card) {
public AbstruseInterference copy() {return new AbstruseInterference(this);
public class AffaProtector extends CardImpl {
public AffaProtector(UUID ownerId) {
public AffaProtector(final AffaProtector card) {
public AffaProtector copy() {return new AffaProtector(this);
public class AkoumFlameseeker extends CardImpl {
public AkoumFlameseeker(UUID ownerId) {
public AkoumFlameseeker(final AkoumFlameseeker card) {
public AkoumFlameseeker copy() {return new AkoumFlameseeker(this);
class AkoumFlameseekerEffect extends OneShotEffect {
public AkoumFlameseekerEffect() {
public AkoumFlameseekerEffect(final AkoumFlameseekerEffect effect) {
public AkoumFlameseekerEffect copy() {return new AkoumFlameseekerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new AlliedReinforcements(this);
class KnightAllyToken extends Token {
public KnightAllyToken() {
public class AncientCrab extends CardImpl {
public AncientCrab(UUID ownerId) {
public AncientCrab(final AncientCrab card) {
public AncientCrab copy() {return new AncientCrab(this);
public class AyliEternalPilgrim extends CardImpl {
public AyliEternalPilgrim(UUID ownerId) {
public AyliEternalPilgrim(final AyliEternalPilgrim card) {
public AyliEternalPilgrim copy() {return new AyliEternalPilgrim(this);
class AyliEternalPilgrimCondition implements Condition {
public boolean apply(Game game, Ability source) {return player.getLife() >= game.getLife() + 10;
public class BalothNull extends CardImpl {
public BalothNull(UUID ownerId) {
public BalothNull(final BalothNull card) {
public BalothNull copy() {return new BalothNull(this);
public class BirthingHulk extends CardImpl {
public BirthingHulk(UUID ownerId) {
public BirthingHulk(final BirthingHulk card) {
public BirthingHulk copy() {return new BirthingHulk(this);
public class BlindingDrone extends CardImpl {
public BlindingDrone(UUID ownerId) {
public BlindingDrone(final BlindingDrone card) {
public BlindingDrone copy() {return new BlindingDrone(this);
public class BondsOfMortality extends CardImpl {
public BondsOfMortality(UUID ownerId) {
public BondsOfMortality(final BondsOfMortality card) {
public BondsOfMortality copy() {return new BondsOfMortality(this);
public class BoulderSalvo extends CardImpl {
public BoulderSalvo(UUID ownerId) {
public BoulderSalvo(final BoulderSalvo card) {
public BoulderSalvo copy() {return new BoulderSalvo(this);
public class BruteStrength extends CardImpl {
public BruteStrength(UUID ownerId) {
public BruteStrength(final BruteStrength card) {
public BruteStrength copy() {return new BruteStrength(this);
public class CallTheGatewatch extends CardImpl {
public CallTheGatewatch(UUID ownerId) {
public CallTheGatewatch(final CallTheGatewatch card) {
public CallTheGatewatch copy() {return new CallTheGatewatch(this);
public class CanopyGorger extends CardImpl {
public CanopyGorger(UUID ownerId) {
public CanopyGorger(final CanopyGorger card) {
public CanopyGorger copy() {return new CanopyGorger(this);
public class CaptainsClaws extends CardImpl {
public CaptainsClaws(UUID ownerId) {
public CaptainsClaws(final CaptainsClaws card) {
public CaptainsClaws copy() {return new CaptainsClaws(this);
class KorAllyToken extends Token {
public KorAllyToken() {
public class ChandraFlamecaller extends CardImpl {
public ChandraFlamecaller(UUID ownerId) {
public ChandraFlamecaller(final ChandraFlamecaller card) {
public ChandraFlamecaller copy() {return new ChandraFlamecaller(this);
class ChandraElementalEffect extends OneShotEffect {
public ChandraElementalEffect() {
public ChandraElementalEffect(final ChandraElementalEffect effect) {
public ChandraElementalEffect copy() {return new ChandraElementalEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ChandraElementalElementalToken extends Token {
public ChandraElementalElementalToken() {
class ChandraDrawEffect extends OneShotEffect {
ChandraDrawEffect() {
ChandraDrawEffect(final ChandraDrawEffect effect) {
public ChandraDrawEffect copy() {return new ChandraDrawEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ChandraXValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return ((PayVariableLoyaltyCost) cost).getAmount();return 0;
public DynamicValue copy() {return defaultValue;
public String getMessage() {return "";
public String toString() {return "X";return defaultValue;
public class ChitinousCloak extends CardImpl {
public ChitinousCloak(UUID ownerId) {
public ChitinousCloak(final ChitinousCloak card) {
public ChitinousCloak copy() {return new ChitinousCloak(this);
public class CinderBarrens extends CardImpl {
public CinderBarrens(UUID ownerId) {
public CinderBarrens(final CinderBarrens card) {
public CinderBarrens copy() {return new CinderBarrens(this);
public class CinderHellion extends CardImpl {
public CinderHellion(UUID ownerId) {
public CinderHellion(final CinderHellion card) {
public CinderHellion copy() {return new CinderHellion(this);return new CliffhavenVampire(this);
public class ComparativeAnalysis extends CardImpl {
public ComparativeAnalysis(UUID ownerId) {
public ComparativeAnalysis(final ComparativeAnalysis card) {
public ComparativeAnalysis copy() {return new ComparativeAnalysis(this);
public class ConsumingSinkhole extends CardImpl {
public ConsumingSinkhole(UUID ownerId) {
public ConsumingSinkhole(final ConsumingSinkhole card) {
public ConsumingSinkhole copy() {return new ConsumingSinkhole(this);
public class ContainmentMembrane extends CardImpl {
public ContainmentMembrane(UUID ownerId) {
public ContainmentMembrane(final ContainmentMembrane card) {
public ContainmentMembrane copy() {return new ContainmentMembrane(this);
public class CorpseChurn extends CardImpl {
public CorpseChurn(UUID ownerId) {
public CorpseChurn(final CorpseChurn card) {
public CorpseChurn copy() {return new CorpseChurn(this);
class CorpseChurnEffect extends OneShotEffect {
public CorpseChurnEffect() {this.staticText = ", then you may return a creature card from your graveyard to your hand";
public CorpseChurnEffect(final CorpseChurnEffect effect) {
public CorpseChurnEffect copy() {return new CorpseChurnEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class CorruptedCrossroads extends CardImpl {
public CorruptedCrossroads(UUID ownerId) {
public CorruptedCrossroads(final CorruptedCrossroads card) {
public CorruptedCrossroads copy() {return new CorruptedCrossroads(this);
class BlightedCrossroadsManaBuilder extends ConditionalManaBuilder {return new BlightedCrossroadsConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast a spell with devoid";
class BlightedCrossroadsConditionalMana extends ConditionalMana {
public BlightedCrossroadsConditionalMana(Mana mana) {
class BlightedCrossroadsManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class CultivatorDrone extends CardImpl {
public CultivatorDrone(UUID ownerId) {
public CultivatorDrone(final CultivatorDrone card) {
public CultivatorDrone copy() {return new CultivatorDrone(this);
class CultivatorDroneManaBuilder extends ConditionalManaBuilder {return new CultivatorDroneConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast a colorless spell, activate an ability of a colorless permanent, or pay a cost that contains {C}";
class CultivatorDroneConditionalMana extends ConditionalMana {
public CultivatorDroneConditionalMana(Mana mana) {
class CultivatorDroneManaCondition extends ManaCondition implements Condition {
public boolean apply(Game game, Ability source, UUID originalId, Cost costToPay) {return true;return true;return ((ManaCost) costToPay).getText().contains("{C}");return false;
public class CycloneSire extends CardImpl {
public CycloneSire(UUID ownerId) {
public CycloneSire(final CycloneSire card) {
public CycloneSire copy() {return new CycloneSire(this);
public class DazzlingReflection extends CardImpl {
public DazzlingReflection(UUID ownerId) {
public DazzlingReflection(final DazzlingReflection card) {
public DazzlingReflection copy() {return new DazzlingReflection(this);
class DazzlingReflectionEffect extends OneShotEffect {
public DazzlingReflectionEffect() {
public DazzlingReflectionEffect(final DazzlingReflectionEffect effect) {
public DazzlingReflectionEffect copy() {return new DazzlingReflectionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DazzlingReflectionPreventEffect extends PreventionEffectImpl {
public DazzlingReflectionPreventEffect() {
public DazzlingReflectionPreventEffect(final DazzlingReflectionPreventEffect effect) {
public DazzlingReflectionPreventEffect copy() {return new DazzlingReflectionPreventEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class DeceiverOfForm extends CardImpl {
public DeceiverOfForm(UUID ownerId) {
public DeceiverOfForm(final DeceiverOfForm card) {
public DeceiverOfForm copy() {return new DeceiverOfForm(this);
class DeceiverOfFormEffect extends OneShotEffect {
public DeceiverOfFormEffect() {
public DeceiverOfFormEffect(final DeceiverOfFormEffect effect) {
public DeceiverOfFormEffect copy() {return new DeceiverOfFormEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DeceiverOfFormCopyEffect extends ContinuousEffectImpl {
public DeceiverOfFormCopyEffect(Card card) {
public DeceiverOfFormCopyEffect(final DeceiverOfFormCopyEffect effect) {
public DeceiverOfFormCopyEffect copy() {return new DeceiverOfFormCopyEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class DeepfathomSkulker extends CardImpl {
public DeepfathomSkulker(UUID ownerId) {
public DeepfathomSkulker(final DeepfathomSkulker card) {
public DeepfathomSkulker copy() {return new DeepfathomSkulker(this);
class DeepfathomSkulkerTriggeredAbility extends TriggeredAbilityImpl {
public DeepfathomSkulkerTriggeredAbility() {
public DeepfathomSkulkerTriggeredAbility(final DeepfathomSkulkerTriggeredAbility ability) {
public DeepfathomSkulkerTriggeredAbility copy() {return new DeepfathomSkulkerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return " Whenever a creature you control deals combat damage to a player, you may draw a card.";
public class DevourInFlames extends CardImpl {
public DevourInFlames(UUID ownerId) {
public DevourInFlames(final DevourInFlames card) {
public DevourInFlames copy() {return new DevourInFlames(this);
public class DimensionalInfiltrator extends CardImpl {
public DimensionalInfiltrator(UUID ownerId) {
public DimensionalInfiltrator(final DimensionalInfiltrator card) {
public DimensionalInfiltrator copy() {return new DimensionalInfiltrator(this);
class DimensionalInfiltratorEffect extends OneShotEffect {
public DimensionalInfiltratorEffect() {this.staticText = "Exile the top card of target opponent's library. If it's a land card, you may return Dimensional Infiltrator to its owner's hand";
public DimensionalInfiltratorEffect(final DimensionalInfiltratorEffect effect) {
public DimensionalInfiltratorEffect copy() {return new DimensionalInfiltratorEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class DranasChosen extends CardImpl {
public DranasChosen(UUID ownerId) {
public DranasChosen(final DranasChosen card) {
public DranasChosen copy() {return new DranasChosen(this);
public class DreadDefiler extends CardImpl {
public DreadDefiler(UUID ownerId) {
public DreadDefiler(final DreadDefiler card) {
public DreadDefiler copy() {return new DreadDefiler(this);
class DreadDefilerEffect extends OneShotEffect {
public DreadDefilerEffect() {
public DreadDefilerEffect(final DreadDefilerEffect effect) {
public DreadDefilerEffect copy() {return new DreadDefilerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EldraziAggressor extends CardImpl {
public EldraziAggressor(UUID ownerId) {
public EldraziAggressor(final EldraziAggressor card) {
public EldraziAggressor copy() {return new EldraziAggressor(this);
public class EldraziDisplacer extends CardImpl {
public EldraziDisplacer(UUID ownerId) {effect.setText(", then return it to the battlefield tapped under its owner's control");
public EldraziDisplacer(final EldraziDisplacer card) {
public EldraziDisplacer copy() {return new EldraziDisplacer(this);
public class EldraziMimic extends CardImpl {
public EldraziMimic(UUID ownerId) {
public EldraziMimic(final EldraziMimic card) {
public EldraziMimic copy() {return new EldraziMimic(this);
class EldraziMimicEffect extends OneShotEffect {
public EldraziMimicEffect() {
public EldraziMimicEffect(final EldraziMimicEffect effect) {
public EldraziMimicEffect copy() {return new EldraziMimicEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EldraziObligator extends CardImpl {
public EldraziObligator(UUID ownerId) {
public EldraziObligator(final EldraziObligator card) {
public EldraziObligator copy() {return new EldraziObligator(this);
public class ElementalUprising extends CardImpl {
public ElementalUprising(UUID ownerId) {
public ElementalUprising(final ElementalUprising card) {
public ElementalUprising copy() {return new ElementalUprising(this);
class ElementalUprisingToken extends Token {
public ElementalUprisingToken() {
public class EmbodimentOfFury extends CardImpl {
public EmbodimentOfFury(UUID ownerId) {
public EmbodimentOfFury(final EmbodimentOfFury card) {
public EmbodimentOfFury copy() {return new EmbodimentOfFury(this);
class EmbodimentOfFuryToken extends Token {
public EmbodimentOfFuryToken() {
public class EmbodimentOfInsight extends CardImpl {
public EmbodimentOfInsight(UUID ownerId) {
public EmbodimentOfInsight(final EmbodimentOfInsight card) {
public EmbodimentOfInsight copy() {return new EmbodimentOfInsight(this);
class EmbodimentOfInsightToken extends Token {
public EmbodimentOfInsightToken() {
public class Endbringer extends CardImpl {
public Endbringer(UUID ownerId) {
public Endbringer(final Endbringer card) {
public Endbringer copy() {return new Endbringer(this);
public class EssenceDepleter extends CardImpl {
public EssenceDepleter(UUID ownerId) {
public EssenceDepleter(final EssenceDepleter card) {
public EssenceDepleter copy() {return new EssenceDepleter(this);
public class FallOfTheTitans extends CardImpl {
public FallOfTheTitans(UUID ownerId) {
public FallOfTheTitans(final FallOfTheTitans card) {
public FallOfTheTitans copy() {return new FallOfTheTitans(this);
public class FlayerDrone extends CardImpl {
public FlayerDrone(UUID ownerId) {
public FlayerDrone(final FlayerDrone card) {
public FlayerDrone copy() {return new FlayerDrone(this);
public class FlayingTendrils extends CardImpl {
public FlayingTendrils(UUID ownerId) {
public FlayingTendrils(final FlayingTendrils card) {
public FlayingTendrils copy() {return new FlayingTendrils(this);
class FlayingTendrilsReplacementEffect extends ReplacementEffectImpl {
public FlayingTendrilsReplacementEffect() {
public FlayingTendrilsReplacementEffect(final FlayingTendrilsReplacementEffect effect) {
public FlayingTendrilsReplacementEffect copy() {return new FlayingTendrilsReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCards((Card) permanent, Zone.EXILED, source, game);return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return zce.isDiesEvent() && zce.getTarget().getCardType().contains(CardType.CREATURE);
public class GeneralTazri extends CardImpl {
public GeneralTazri(UUID ownerId) {
public GeneralTazri(final GeneralTazri card) {
public GeneralTazri copy() {return new GeneralTazri(this);
class GeneralTazriColorCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count;
public GeneralTazriColorCount copy() {return new GeneralTazriColorCount();
public String getMessage() {return "the number of colors among those creatures";
public String toString() {return "X";return new GiftOfTusks(this);
public class GladehartCavalry extends CardImpl {
public GladehartCavalry(UUID ownerId) {
public GladehartCavalry(final GladehartCavalry card) {
public GladehartCavalry copy() {return new GladehartCavalry(this);
class GladehartCavalryTriggeredAbility extends TriggeredAbilityImpl {
public GladehartCavalryTriggeredAbility() {
public GladehartCavalryTriggeredAbility(final GladehartCavalryTriggeredAbility ability) {
public GladehartCavalryTriggeredAbility copy() {return new GladehartCavalryTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control with a +1/+1 counter on it dies, " + super.getRule();
public class GoblinDarkDwellers extends CardImpl {
public GoblinDarkDwellers(UUID ownerId) {
public GoblinDarkDwellers(final GoblinDarkDwellers card) {
public GoblinDarkDwellers copy() {return new GoblinDarkDwellers(this);
class GoblinDarkDwellersEffect extends OneShotEffect {
GoblinDarkDwellersEffect() {
GoblinDarkDwellersEffect(final GoblinDarkDwellersEffect effect) {
public GoblinDarkDwellersEffect copy() {return new GoblinDarkDwellersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class GoblinDarkDwellersReplacementEffect extends ReplacementEffectImpl {
GoblinDarkDwellersReplacementEffect(UUID cardId) {
GoblinDarkDwellersReplacementEffect(final GoblinDarkDwellersReplacementEffect effect) {
public GoblinDarkDwellersReplacementEffect copy() {return new GoblinDarkDwellersReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return zEvent.getToZone() == Zone.GRAVEYARD
public class GoblinFreerunner extends CardImpl {
public GoblinFreerunner(UUID ownerId) {
public GoblinFreerunner(final GoblinFreerunner card) {
public GoblinFreerunner copy() {return new GoblinFreerunner(this);
public class GravityNegator extends CardImpl {
public GravityNegator(UUID ownerId) {
public GravityNegator(final GravityNegator card) {
public GravityNegator copy() {return new GravityNegator(this);
public class GripOfTheRoil extends CardImpl {
public GripOfTheRoil(UUID ownerId) {
public GripOfTheRoil(final GripOfTheRoil card) {
public GripOfTheRoil copy() {return new GripOfTheRoil(this);
public class HarvesterTroll extends CardImpl {
public HarvesterTroll(UUID ownerId) {
public HarvesterTroll(final HarvesterTroll card) {
public HarvesterTroll copy() {return new HarvesterTroll(this);
public class HavocSower extends CardImpl {
public HavocSower(UUID ownerId) {
public HavocSower(final HavocSower card) {
public HavocSower copy() {return new HavocSower(this);
public class HedronAlignment extends CardImpl {
public HedronAlignment(UUID ownerId) {
public HedronAlignment(final HedronAlignment card) {
public HedronAlignment copy() {return new HedronAlignment(this);
class HedronAlignmentEffect extends OneShotEffect {
public HedronAlignmentEffect() {
public HedronAlignmentEffect(final HedronAlignmentEffect effect) {
public HedronAlignmentEffect copy() {return new HedronAlignmentEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return true;return true;return true;return false;
public class HedronCrawler extends CardImpl {
public HedronCrawler(UUID ownerId) {
public HedronCrawler(final HedronCrawler card) {
public HedronCrawler copy() {return new HedronCrawler(this);
public class HissingQuagmire extends CardImpl {
public HissingQuagmire(UUID ownerId) {
public HissingQuagmire(final HissingQuagmire card) {
public HissingQuagmire copy() {return new HissingQuagmire(this);
class HissingQuagmireToken extends Token {
public HissingQuagmireToken() {return new HoldoutSettlement(this);
public class ImmobilizerEldrazi extends CardImpl {
public ImmobilizerEldrazi(UUID ownerId) {
public ImmobilizerEldrazi(final ImmobilizerEldrazi card) {
public ImmobilizerEldrazi copy() {return new ImmobilizerEldrazi(this);
class ImmobilizerEldraziPredicate implements Predicate<MageObject> {
public boolean apply(MageObject input, Game game) {return input.getToughness().getValue() > input.getPower().getValue();
public String toString() {return "toughness greater than its power";
public class ImmolatingGlare extends CardImpl {
public ImmolatingGlare(UUID ownerId) {
public ImmolatingGlare(final ImmolatingGlare card) {
public ImmolatingGlare copy() {return new ImmolatingGlare(this);
public class IsolationZone extends CardImpl {
public IsolationZone(UUID ownerId) {
public IsolationZone(final IsolationZone card) {
public IsolationZone copy() {return new IsolationZone(this);
class IsolationZoneExileEffect extends OneShotEffect {
public IsolationZoneExileEffect() {
public IsolationZoneExileEffect(final IsolationZoneExileEffect effect) {
public IsolationZoneExileEffect copy() {return new IsolationZoneExileEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), permanent.getIdName()).apply(game, source);return false;
public class JoragaAuxiliary extends CardImpl {
public JoragaAuxiliary(UUID ownerId) {
public JoragaAuxiliary(final JoragaAuxiliary card) {
public JoragaAuxiliary copy() {return new JoragaAuxiliary(this);
public class JoriEnRuinDiver extends CardImpl {
public JoriEnRuinDiver(UUID ownerId) {
public JoriEnRuinDiver(final JoriEnRuinDiver card) {
public JoriEnRuinDiver copy() {return new JoriEnRuinDiver(this);
class JoriEnTriggeredAbility extends TriggeredAbilityImpl {
public JoriEnTriggeredAbility() {
public JoriEnTriggeredAbility(final JoriEnTriggeredAbility ability) {
public JoriEnTriggeredAbility copy() {return new JoriEnTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast your second spell each turn, draw a card.";
public class JwarIsleAvenger extends CardImpl {
public JwarIsleAvenger(UUID ownerId) {
public JwarIsleAvenger(final JwarIsleAvenger card) {
public JwarIsleAvenger copy() {return new JwarIsleAvenger(this);
public class KalitasTraitorOfGhet extends CardImpl {
public KalitasTraitorOfGhet(UUID ownerId) {
public KalitasTraitorOfGhet(final KalitasTraitorOfGhet card) {
public KalitasTraitorOfGhet copy() {return new KalitasTraitorOfGhet(this);
class KalitasTraitorOfGhetEffect extends ReplacementEffectImpl {
public KalitasTraitorOfGhetEffect() {
public KalitasTraitorOfGhetEffect(final KalitasTraitorOfGhetEffect effect) {
public KalitasTraitorOfGhetEffect copy() {return new KalitasTraitorOfGhetEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.ZONE_CHANGE);
public boolean applies(GameEvent event, Ability source, Game game) {
public class KazuulsTollCollector extends CardImpl {
public KazuulsTollCollector(UUID ownerId) {
public KazuulsTollCollector(final KazuulsTollCollector card) {
public KazuulsTollCollector copy() {return new KazuulsTollCollector(this);
class KazuulsTollCollectorEffect extends OneShotEffect {
public KazuulsTollCollectorEffect() {
public KazuulsTollCollectorEffect(final KazuulsTollCollectorEffect effect) {
public KazuulsTollCollectorEffect copy() {return new KazuulsTollCollectorEffect(this);
public boolean apply(Game game, Ability source) {return permanent.addAttachment(equipment.getId(), game);return false;
public class KorScythemaster extends CardImpl {
public KorScythemaster(UUID ownerId) {
public KorScythemaster(final KorScythemaster card) {
public KorScythemaster copy() {return new KorScythemaster(this);
public class KorSkyClimber extends CardImpl {
public KorSkyClimber(UUID ownerId) {
public KorSkyClimber(final KorSkyClimber card) {
public KorSkyClimber copy() {return new KorSkyClimber(this);
public class KozileksPathfinder extends CardImpl {
public KozileksPathfinder(UUID ownerId) {
public KozileksPathfinder(final KozileksPathfinder card) {
public KozileksPathfinder copy() {return new KozileksPathfinder(this);
public class KozileksReturn extends CardImpl {
public KozileksReturn(UUID ownerId) {
public KozileksReturn(final KozileksReturn card) {
public KozileksReturn copy() {return new KozileksReturn(this);
public class KozileksShrieker extends CardImpl {
public KozileksShrieker(UUID ownerId) {
public KozileksShrieker(final KozileksShrieker card) {
public KozileksShrieker copy() {return new KozileksShrieker(this);
public class KozileksTranslator extends CardImpl {
public KozileksTranslator(UUID ownerId) {
public KozileksTranslator(final KozileksTranslator card) {
public KozileksTranslator copy() {return new KozileksTranslator(this);
public class KozilekTheGreatDistortion extends CardImpl {
public KozilekTheGreatDistortion(UUID ownerId) {
public KozilekTheGreatDistortion(final KozilekTheGreatDistortion card) {
public KozilekTheGreatDistortion copy() {return new KozilekTheGreatDistortion(this);
class KozilekDrawEffect extends OneShotEffect {
public KozilekDrawEffect() {
public KozilekDrawEffect(final KozilekDrawEffect effect) {
public KozilekDrawEffect copy() {return new KozilekDrawEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class KozilekDiscardCost extends CostImpl {
public KozilekDiscardCost() {
public KozilekDiscardCost(final KozilekDiscardCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return false;return false;return false;return paid;
public void clearPaid() {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return false;return true;return false;
public KozilekDiscardCost copy() {return new KozilekDiscardCost(this);
public class LeadByExample extends CardImpl {
public LeadByExample(UUID ownerId) {
public LeadByExample(final LeadByExample card) {
public LeadByExample copy() {return new LeadByExample(this);
public class LinvalaThePreserver extends CardImpl {
public LinvalaThePreserver(UUID ownerId) {
public LinvalaThePreserver(final LinvalaThePreserver card) {
public LinvalaThePreserver copy() {return new LinvalaThePreserver(this);
class LinvalaAngelToken extends Token {
public LinvalaAngelToken() {
public class LoamLarva extends CardImpl {
public LoamLarva(UUID ownerId) {
public LoamLarva(final LoamLarva card) {
public LoamLarva copy() {return new LoamLarva(this);
public class MakeAStand extends CardImpl {
public MakeAStand(UUID ownerId) {
public MakeAStand(final MakeAStand card) {
public MakeAStand copy() {return new MakeAStand(this);
public class MakindiAeronaut extends CardImpl {
public MakindiAeronaut(UUID ownerId) {
public MakindiAeronaut(final MakindiAeronaut card) {
public MakindiAeronaut copy() {return new MakindiAeronaut(this);
public class MawOfKozilek extends CardImpl {
public MawOfKozilek(UUID ownerId) {
public MawOfKozilek(final MawOfKozilek card) {
public MawOfKozilek copy() {return new MawOfKozilek(this);
public class MeanderingRiver extends CardImpl {
public MeanderingRiver(UUID ownerId) {
public MeanderingRiver(final MeanderingRiver card) {
public MeanderingRiver copy() {return new MeanderingRiver(this);
public class MinaAndDennWildborn extends CardImpl {
public MinaAndDennWildborn(UUID ownerId) {
public MinaAndDennWildborn(final MinaAndDennWildborn card) {
public MinaAndDennWildborn copy() {return new MinaAndDennWildborn(this);
public class Mindmelter extends CardImpl {
public Mindmelter(UUID ownerId) {
public Mindmelter(final Mindmelter card) {
public Mindmelter copy() {return new Mindmelter(this);
public class Mirrorpool extends CardImpl {
public Mirrorpool(UUID ownerId) {
public Mirrorpool(final Mirrorpool card) {
public Mirrorpool copy() {return new Mirrorpool(this);
public class MundasVanguard extends CardImpl {
public MundasVanguard(UUID ownerId) {
public MundasVanguard(final MundasVanguard card) {
public MundasVanguard copy() {return new MundasVanguard(this);
public class NaturalState extends CardImpl {
public NaturalState(UUID ownerId) {
public NaturalState(final NaturalState card) {
public NaturalState copy() {return new NaturalState(this);
public class NeedleSpires extends CardImpl {
public NeedleSpires(UUID ownerId) {
public NeedleSpires(final NeedleSpires card) {
public NeedleSpires copy() {return new NeedleSpires(this);
class NeedleSpiresToken extends Token {
public NeedleSpiresToken() {
public class NissasJudgment extends CardImpl {
public NissasJudgment(UUID ownerId) {
public class NissaVoiceOfZendikar extends CardImpl {
public NissaVoiceOfZendikar(UUID ownerId) {
public NissaVoiceOfZendikar(final NissaVoiceOfZendikar card) {
public NissaVoiceOfZendikar copy() {return new NissaVoiceOfZendikar(this);
public class NullCaller extends CardImpl {
public NullCaller(UUID ownerId) {
public NullCaller(final NullCaller card) {
public NullCaller copy() {return new NullCaller(this);
public class OathOfChandra extends CardImpl {
public OathOfChandra(UUID ownerId) {
public OathOfChandra(final OathOfChandra card) {
public OathOfChandra copy() {return new OathOfChandra(this);
class OathOfChandraCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return watcher != null && watcher.enteredPlaneswalkerForPlayer(source.getControllerId());
public String toString() {return "if a planeswalker entered the battlefield under your control this turn";
class OathOfChandraWatcher extends Watcher {
public OathOfChandraWatcher() {
public OathOfChandraWatcher(final OathOfChandraWatcher watcher) {
public void watch(GameEvent event, Game game) {
public void reset() {
public boolean enteredPlaneswalkerForPlayer(UUID playerId) {return players.contains(playerId);
public OathOfChandraWatcher copy() {return new OathOfChandraWatcher(this);
public class OathOfGideon extends CardImpl {
public OathOfGideon(UUID ownerId) {
public OathOfGideon(final OathOfGideon card) {
public OathOfGideon copy() {return new OathOfGideon(this);
class OathOfGideonReplacementEffect extends ReplacementEffectImpl {
OathOfGideonReplacementEffect() {
OathOfGideonReplacementEffect(OathOfGideonReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return creature != null && creature.getControllerId().equals(source.getControllerId())
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public OathOfGideonReplacementEffect copy() {return new OathOfGideonReplacementEffect(this);
public class OathOfJace extends CardImpl {
public OathOfJace(UUID ownerId) {
public OathOfJace(final OathOfJace card) {
public OathOfJace copy() {return new OathOfJace(this);
class OathOfJaceEffect extends OneShotEffect {
public OathOfJaceEffect() {
public OathOfJaceEffect(final OathOfJaceEffect effect) {
public OathOfJaceEffect copy() {return new OathOfJaceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OathOfNissa extends CardImpl {
public OathOfNissa(UUID ownerId) {
public OathOfNissa(final OathOfNissa card) {
public OathOfNissa copy() {return new OathOfNissa(this);
class OathOfNissaEffect extends OneShotEffect {
public OathOfNissaEffect() {
public OathOfNissaEffect(final OathOfNissaEffect effect) {
public OathOfNissaEffect copy() {return new OathOfNissaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class OathOfNissaSpendAnyManaEffect extends AsThoughEffectImpl implements AsThoughManaEffect {
public OathOfNissaSpendAnyManaEffect() {
public OathOfNissaSpendAnyManaEffect(final OathOfNissaSpendAnyManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public OathOfNissaSpendAnyManaEffect copy() {return new OathOfNissaSpendAnyManaEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public ManaType getAsThoughManaType(ManaType manaType, ManaPoolItem mana, UUID affectedControllerId, Ability source, Game game) {return mana.getFirstAvailable();
public class OblivionStrike extends CardImpl {
public OblivionStrike(UUID ownerId) {
public OblivionStrike(final OblivionStrike card) {
public OblivionStrike copy() {return new OblivionStrike(this);
public class OnduWarCleric extends CardImpl {
public OnduWarCleric(UUID ownerId) {
public OnduWarCleric(final OnduWarCleric card) {
public OnduWarCleric copy() {return new OnduWarCleric(this);
public class OverwhelmingDenial extends CardImpl {
public OverwhelmingDenial(UUID ownerId) {
public OverwhelmingDenial(final OverwhelmingDenial card) {
public OverwhelmingDenial copy() {return new OverwhelmingDenial(this);
public class PulseOfMurasa extends CardImpl {
public PulseOfMurasa(UUID ownerId) {
public PulseOfMurasa(final PulseOfMurasa card) {
public PulseOfMurasa copy() {return new PulseOfMurasa(this);
public class PyromancersAssault extends CardImpl {
public PyromancersAssault(UUID ownerId) {
public PyromancersAssault(final PyromancersAssault card) {
public PyromancersAssault copy() {return new PyromancersAssault(this);
class PyromancersAssaultTriggeredAbility extends TriggeredAbilityImpl {
public PyromancersAssaultTriggeredAbility() {
public PyromancersAssaultTriggeredAbility(final PyromancersAssaultTriggeredAbility ability) {
public PyromancersAssaultTriggeredAbility copy() {return new PyromancersAssaultTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast your second spell each turn, {this} deals 2 damage to target creature or player.";
public class RealityHemorrhage extends CardImpl {
public RealityHemorrhage(UUID ownerId) {
public RealityHemorrhage(final RealityHemorrhage card) {
public RealityHemorrhage copy() {return new RealityHemorrhage(this);
public class RealitySmasher extends CardImpl {
public RealitySmasher(UUID ownerId) {
public RealitySmasher(final RealitySmasher card) {
public RealitySmasher copy() {return new RealitySmasher(this);
class RealitySmasherTriggeredAbility extends TriggeredAbilityImpl {
public RealitySmasherTriggeredAbility() {
public RealitySmasherTriggeredAbility(final RealitySmasherTriggeredAbility ability) {
public RealitySmasherTriggeredAbility copy() {return new RealitySmasherTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;return false;
public String getRule() {return "Whenever {this} becomes the target of a spell an opponent controls, counter that spell unless its controller discards a card.";
public class ReaverDrone extends CardImpl {
public ReaverDrone(UUID ownerId) {
public ReaverDrone(final ReaverDrone card) {
public ReaverDrone copy() {return new ReaverDrone(this);
public class RecklessBushwhacker extends CardImpl {
public RecklessBushwhacker(UUID ownerId) {
public RecklessBushwhacker(final RecklessBushwhacker card) {
public RecklessBushwhacker copy() {return new RecklessBushwhacker(this);
public class ReflectorMage extends CardImpl {
public ReflectorMage(UUID ownerId) {
public ReflectorMage(final ReflectorMage card) {
public ReflectorMage copy() {return new ReflectorMage(this);
class ReflectorMageEffect extends OneShotEffect {
public ReflectorMageEffect() {this.staticText = "return target creature an opponent controls to its owner's hand. That creature's owner can't cast spells with the same name as that creature until your next turn";
public ReflectorMageEffect(final ReflectorMageEffect effect) {
public ReflectorMageEffect copy() {return new ReflectorMageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
ExclusionRitualReplacementEffect(String creatureName, UUID ownerId) {
ExclusionRitualReplacementEffect(final ExclusionRitualReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return card.getName().equals(creatureName);return false;
public boolean isInactive(Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public ExclusionRitualReplacementEffect copy() {return new ExclusionRitualReplacementEffect(this);
public class RelentlessHunter extends CardImpl {
public RelentlessHunter(UUID ownerId) {
public RelentlessHunter(final RelentlessHunter card) {
public RelentlessHunter copy() {return new RelentlessHunter(this);
public class ReliefCaptain extends CardImpl {
public ReliefCaptain(UUID ownerId) {
public ReliefCaptain(final ReliefCaptain card) {
public ReliefCaptain copy() {return new ReliefCaptain(this);
public class RemorselessPunishment extends CardImpl {
public RemorselessPunishment(UUID ownerId) {
public RemorselessPunishment(final RemorselessPunishment card) {
public RemorselessPunishment copy() {return new RemorselessPunishment(this);
class RemorselessPunishmentEffect extends OneShotEffect {
public RemorselessPunishmentEffect() {
public RemorselessPunishmentEffect(final RemorselessPunishmentEffect effect) {
public RemorselessPunishmentEffect copy() {return new RemorselessPunishmentEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private void handleBaseEffect(Game game, Ability source, Player opponent, int iteration) {return;return;
public class RoilingWaters extends CardImpl {
public RoilingWaters(UUID ownerId) {
public RoilingWaters(final RoilingWaters card) {
public RoilingWaters copy() {return new RoilingWaters(this);
public class RuinInTheirWake extends CardImpl {
public RuinInTheirWake(UUID ownerId) {
public RuinInTheirWake(final RuinInTheirWake card) {
public RuinInTheirWake copy() {return new RuinInTheirWake(this);
class RuinInTheirWakeEffect extends OneShotEffect {
public RuinInTheirWakeEffect() {
public RuinInTheirWakeEffect(final RuinInTheirWakeEffect effect) {
public RuinInTheirWakeEffect copy() {return new RuinInTheirWakeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RuinsOfOranRief extends CardImpl {
public RuinsOfOranRief(UUID ownerId) {
public RuinsOfOranRief(final RuinsOfOranRief card) {
public RuinsOfOranRief copy() {return new RuinsOfOranRief(this);
public class SaddlebackLagac extends CardImpl {
public SaddlebackLagac(UUID ownerId) {
public SaddlebackLagac(final SaddlebackLagac card) {
public SaddlebackLagac copy() {return new SaddlebackLagac(this);
public class ScionSummoner extends CardImpl {
public ScionSummoner(UUID ownerId) {
public ScionSummoner(final ScionSummoner card) {
public ScionSummoner copy() {return new ScionSummoner(this);
public class SeaGateWreckage extends CardImpl {
public SeaGateWreckage(UUID ownerId) {
public SeaGateWreckage(final SeaGateWreckage card) {
public SeaGateWreckage copy() {return new SeaGateWreckage(this);
public class SearingLight extends CardImpl {
public SearingLight(UUID ownerId) {
public SearingLight(final SearingLight card) {
public SearingLight copy() {return new SearingLight(this);
public class SeedGuardian extends CardImpl {
public SeedGuardian(UUID ownerId) {
public SeedGuardian(final SeedGuardian card) {
public SeedGuardian copy() {return new SeedGuardian(this);
class SeedGuardianEffect extends OneShotEffect {
public SeedGuardianEffect() {
public SeedGuardianEffect(final SeedGuardianEffect effect) {
public SeedGuardianEffect copy() {return new SeedGuardianEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new SeedGuardianToken(creaturesInGraveyard)).apply(game, source);return false;
class SeedGuardianToken extends Token {
public SeedGuardianToken(int xValue) {return new SifterOfSkulls(this);
public class SkyScourer extends CardImpl {
public SkyScourer(UUID ownerId) {
public SkyScourer(final SkyScourer card) {
public SkyScourer copy() {return new SkyScourer(this);
public class SlaughterDrone extends CardImpl {
public SlaughterDrone(UUID ownerId) {
public SlaughterDrone(final SlaughterDrone card) {
public SlaughterDrone copy() {return new SlaughterDrone(this);
public class SlipThroughSpace extends CardImpl {
public SlipThroughSpace(UUID ownerId) {
public SlipThroughSpace(final SlipThroughSpace card) {
public SlipThroughSpace copy() {return new SlipThroughSpace(this);
public class SparkmagesGambit extends CardImpl {
public SparkmagesGambit(UUID ownerId) {
public SparkmagesGambit(final SparkmagesGambit card) {
public SparkmagesGambit copy() {return new SparkmagesGambit(this);
public class SpatialContortion extends CardImpl {
public SpatialContortion(UUID ownerId) {
public SpatialContortion(final SpatialContortion card) {
public SpatialContortion copy() {return new SpatialContortion(this);
public class SpawnbinderMage extends CardImpl {
public SpawnbinderMage(UUID ownerId) {
public SpawnbinderMage(final SpawnbinderMage card) {
public SpawnbinderMage copy() {return new SpawnbinderMage(this);
public class SphinxOfTheFinalWord extends CardImpl {
public SphinxOfTheFinalWord(UUID ownerId) {
public SphinxOfTheFinalWord(final SphinxOfTheFinalWord card) {
public SphinxOfTheFinalWord copy() {return new SphinxOfTheFinalWord(this);
public class StalkingDrone extends CardImpl {
public StalkingDrone(UUID ownerId) {
public StalkingDrone(final StalkingDrone card) {
public StalkingDrone copy() {return new StalkingDrone(this);
public class SteppeGlider extends CardImpl {
public SteppeGlider(UUID ownerId) {
public SteppeGlider(final SteppeGlider card) {
public SteppeGlider copy() {return new SteppeGlider(this);return new StoneforgeAcolyte(this);return new StoneforgeMasterwork(this);
public int calculate(Game game, Ability sourceAbility, Effect effect) {return xValue;return new StoneforgeMasterworkDynamicValue();
public String toString() {return "X";
public String getMessage() {return "other creature you control that shares a creature type with it";
public class StoneHavenOutfitter extends CardImpl {
public StoneHavenOutfitter(UUID ownerId) {
public StoneHavenOutfitter(final StoneHavenOutfitter card) {
public StoneHavenOutfitter copy() {return new StoneHavenOutfitter(this);
public class StormchaserMage extends CardImpl {
public StormchaserMage(UUID ownerId) {
public StormchaserMage(final StormchaserMage card) {
public StormchaserMage copy() {return new StormchaserMage(this);
public class SubmergedBoneyard extends CardImpl {
public SubmergedBoneyard(UUID ownerId) {
public SubmergedBoneyard(final SubmergedBoneyard card) {
public SubmergedBoneyard copy() {return new SubmergedBoneyard(this);
public class SweepAway extends CardImpl {
public SweepAway(UUID ownerId) {
public SweepAway(final SweepAway card) {
public SweepAway copy() {return new SweepAway(this);
class SweepAwayEffect extends OneShotEffect {
public SweepAwayEffect() {
public SweepAwayEffect(final SweepAwayEffect effect) {
public boolean apply(Game game, Ability source) {if (controller.chooseUse(Outcome.Neutral, "Put " + permanent.getIdName() + " on top of its owner's library (otherwise return to hand)?", source, game)) {return true;return false;
public SweepAwayEffect copy() {return new SweepAwayEffect(this);
public class SylvanAdvocate extends CardImpl {
public SylvanAdvocate(UUID ownerId) {
public SylvanAdvocate(final SylvanAdvocate card) {
public SylvanAdvocate copy() {return new SylvanAdvocate(this);
public class TajuruPathwarden extends CardImpl {
public TajuruPathwarden(UUID ownerId) {
public TajuruPathwarden(final TajuruPathwarden card) {
public TajuruPathwarden copy() {return new TajuruPathwarden(this);
public class ThoughtHarvester extends CardImpl {
public ThoughtHarvester(UUID ownerId) {
public ThoughtHarvester(final ThoughtHarvester card) {
public ThoughtHarvester copy() {return new ThoughtHarvester(this);
public class ThoughtKnotSeer extends CardImpl {
public ThoughtKnotSeer(UUID ownerId) {
public ThoughtKnotSeer(final ThoughtKnotSeer card) {
public ThoughtKnotSeer copy() {return new ThoughtKnotSeer(this);
public class TimberGorge extends CardImpl {
public TimberGorge(UUID ownerId) {
public TimberGorge(final TimberGorge card) {
public TimberGorge copy() {return new TimberGorge(this);
public class TranquilExpanse extends CardImpl {
public TranquilExpanse(UUID ownerId) {
public TranquilExpanse(final TranquilExpanse card) {
public TranquilExpanse copy() {return new TranquilExpanse(this);
public class TyrantOfValakut extends CardImpl {
public TyrantOfValakut(UUID ownerId) {
public TyrantOfValakut(final TyrantOfValakut card) {
public TyrantOfValakut copy() {return new TyrantOfValakut(this);
public class UmaraEntangler extends CardImpl {
public UmaraEntangler(UUID ownerId) {
public UmaraEntangler(final UmaraEntangler card) {
public UmaraEntangler copy() {return new UmaraEntangler(this);
public class UnityOfPurpose extends CardImpl {
public UnityOfPurpose(UUID ownerId) {
public UnityOfPurpose(final UnityOfPurpose card) {
public UnityOfPurpose copy() {return new UnityOfPurpose(this);
public class UnnaturalEndurance extends CardImpl {
public UnnaturalEndurance(UUID ownerId) {
public UnnaturalEndurance(final UnnaturalEndurance card) {
public UnnaturalEndurance copy() {return new UnnaturalEndurance(this);
public class UntamedHunger extends CardImpl {
public UntamedHunger(UUID ownerId) {
public UntamedHunger(final UntamedHunger card) {
public UntamedHunger copy() {return new UntamedHunger(this);
public class VampireEnvoy extends CardImpl {
public VampireEnvoy(UUID ownerId) {
public VampireEnvoy(final VampireEnvoy card) {
public VampireEnvoy copy() {return new VampireEnvoy(this);
public class VileRedeemer extends CardImpl {
public VileRedeemer(UUID ownerId) {
public VileRedeemer(final VileRedeemer card) {
public VileRedeemer copy() {return new VileRedeemer(this);
class VileRedeemerEffect extends OneShotEffect {
public VileRedeemerEffect() {
public VileRedeemerEffect(final VileRedeemerEffect effect) {
public VileRedeemerEffect copy() {return new VileRedeemerEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new EldraziScionToken(), amount).apply(game, source);return true;return false;
class VileRedeemerNonTokenCreaturesDiedWatcher extends Watcher {
public VileRedeemerNonTokenCreaturesDiedWatcher() {
public VileRedeemerNonTokenCreaturesDiedWatcher(final VileRedeemerNonTokenCreaturesDiedWatcher watcher) {
public void watch(GameEvent event, Game game) {
public void reset() {
public int getAmountOfNontokenCreatureDiedThisTurn(UUID playerId) {return amountOfCreaturesThatDied.containsKey(playerId) ? amountOfCreaturesThatDied.get(playerId) : 0;
public VileRedeemerNonTokenCreaturesDiedWatcher copy() {return new VileRedeemerNonTokenCreaturesDiedWatcher(this);
public class VinesOfTheRecluse extends CardImpl {
public VinesOfTheRecluse(UUID ownerId) {
public VinesOfTheRecluse(final VinesOfTheRecluse card) {
public VinesOfTheRecluse copy() {return new VinesOfTheRecluse(this);
public class VisionsOfBrutality extends CardImpl {
public VisionsOfBrutality(UUID ownerId) {
public VisionsOfBrutality(final VisionsOfBrutality card) {
public VisionsOfBrutality copy() {return new VisionsOfBrutality(this);
class VisionsOfBrutalityEffect extends OneShotEffect {
public VisionsOfBrutalityEffect() {
public VisionsOfBrutalityEffect(final VisionsOfBrutalityEffect effect) {
public VisionsOfBrutalityEffect copy() {return new VisionsOfBrutalityEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VoidGrafter extends CardImpl {
public VoidGrafter(UUID ownerId) {
public VoidGrafter(final VoidGrafter card) {
public VoidGrafter copy() {return new VoidGrafter(this);
public class VoidShatter extends CardImpl {
public VoidShatter(UUID ownerId) {
public VoidShatter(final VoidShatter card) {
public VoidShatter copy() {return new VoidShatter(this);
public class WalkerOfTheWastes extends CardImpl {
public WalkerOfTheWastes(UUID ownerId) {
public WalkerOfTheWastes(final WalkerOfTheWastes card) {
public WalkerOfTheWastes copy() {return new WalkerOfTheWastes(this);
public class WallOfResurgence extends CardImpl {
public WallOfResurgence(UUID ownerId) {
public WallOfResurgence(final WallOfResurgence card) {
public WallOfResurgence copy() {return new WallOfResurgence(this);
class WallOfResurgenceToken extends Token {
public WallOfResurgenceToken() {
public class WanderingFumarole extends CardImpl {
public WanderingFumarole(UUID ownerId) {
public WanderingFumarole(final WanderingFumarole card) {
public WanderingFumarole copy() {return new WanderingFumarole(this);
class WanderingFumaroleToken extends Token {
public WanderingFumaroleToken() {
public class Wastes1 extends CardImpl {
public Wastes1(UUID ownerId) {
public Wastes1(final Wastes1 card) {
public Wastes1 copy() {return new Wastes1(this);
public class WeaponsTrainer extends CardImpl {
public WeaponsTrainer(UUID ownerId) {
public WeaponsTrainer(final WeaponsTrainer card) {
public WeaponsTrainer copy() {return new WeaponsTrainer(this);
public class WitnessTheEnd extends CardImpl {
public WitnessTheEnd(UUID ownerId) {
public WitnessTheEnd(final WitnessTheEnd card) {
public WitnessTheEnd copy() {return new WitnessTheEnd(this);
public class WorldBreaker extends CardImpl {
public WorldBreaker(UUID ownerId) {
public WorldBreaker(final WorldBreaker card) {
public WorldBreaker copy() {return new WorldBreaker(this);return new ZadasCommando(this);
public class ZendikarResurgent extends CardImpl {
public ZendikarResurgent(UUID ownerId) {
public ZendikarResurgent(final ZendikarResurgent card) {
public ZendikarResurgent copy() {return new ZendikarResurgent(this);
public class ZulaportChainmage extends CardImpl {
public ZulaportChainmage(UUID ownerId) {
public ZulaportChainmage(final ZulaportChainmage card) {
public ZulaportChainmage copy() {return new ZulaportChainmage(this);return new AbandonedOutpost(this);
public class AboshanCephalidEmperor extends CardImpl {
public AboshanCephalidEmperor(UUID ownerId) {
public AboshanCephalidEmperor(final AboshanCephalidEmperor card) {
public AboshanCephalidEmperor copy() {return new AboshanCephalidEmperor(this);
public class AboshansDesire extends CardImpl {
public AboshansDesire(UUID ownerId) {
public AboshansDesire(final AboshansDesire card) {
public AboshansDesire copy() {return new AboshansDesire(this);
public class AcceptableLosses extends CardImpl {
public AcceptableLosses(UUID ownerId) {
public AcceptableLosses(final AcceptableLosses card) {
public AcceptableLosses copy() {return new AcceptableLosses(this);
public class AegisOfHonor extends CardImpl {
public AegisOfHonor(UUID ownerId) {
public AegisOfHonor(final AegisOfHonor card) {
public AegisOfHonor copy() {return new AegisOfHonor(this);
class AegisOfHonorEffect extends RedirectionEffect {
public AegisOfHonorEffect() {
public AegisOfHonorEffect(final AegisOfHonorEffect card) {
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {
public class AEtherBurst extends CardImpl {
public AEtherBurst(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public AEtherBurst(final AEtherBurst card) {
public AEtherBurst copy() {return new AEtherBurst(this);
class DynamicTargetCreaturePermanent extends TargetPermanent {
public DynamicTargetCreaturePermanent() {
public DynamicTargetCreaturePermanent(final DynamicTargetCreaturePermanent target) {
public void setMaxNumberOfTargets(int maxNumberOfTargets) {
public DynamicTargetCreaturePermanent copy() {return new DynamicTargetCreaturePermanent(this);
class DynamicReturnToHandTargetEffect extends ReturnToHandTargetEffect {
public DynamicReturnToHandTargetEffect() {
public DynamicReturnToHandTargetEffect(final DynamicReturnToHandTargetEffect effect) {
public DynamicReturnToHandTargetEffect copy() {return new DynamicReturnToHandTargetEffect(this);
public String getText(Mode mode) {return "Return up to X target creatures to their owners' hands, where X is one plus the number of cards named AEther Burst in all graveyards as you cast AEther Burst";
public class Amugaba extends CardImpl {
public Amugaba(UUID ownerId) {
public Amugaba(final Amugaba card) {
public Amugaba copy() {return new Amugaba(this);
public class AncestralTribute extends CardImpl {
public AncestralTribute(UUID ownerId) {
public AncestralTribute(final AncestralTribute card) {
public AncestralTribute copy() {return new AncestralTribute(this);
public class AnimalBoneyard extends CardImpl {
public AnimalBoneyard(UUID ownerId) {
public AnimalBoneyard(final AnimalBoneyard card) {
public AnimalBoneyard copy() {return new AnimalBoneyard(this);
class AnimalBoneyardEffect extends OneShotEffect {
public AnimalBoneyardEffect() {
public AnimalBoneyardEffect(final AnimalBoneyardEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AnimalBoneyardEffect copy() {return new AnimalBoneyardEffect(this);
public class AshenFirebeast extends CardImpl {
public AshenFirebeast(UUID ownerId) {
public AshenFirebeast(final AshenFirebeast card) {
public AshenFirebeast copy() {return new AshenFirebeast(this);
public class Atogatog extends CardImpl {
public Atogatog(UUID ownerId) {
public Atogatog(final Atogatog card) {
public Atogatog copy() {return new Atogatog(this);
public class BalancingAct extends CardImpl {
public BalancingAct(UUID ownerId) {
public BalancingAct(final BalancingAct card) {
public BalancingAct copy() {return new BalancingAct(this);
class BalancingActEffect extends OneShotEffect {
public BalancingActEffect() {return new mage.sets.odyssey.BalancingActEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BalshanBeguiler extends CardImpl {
public BalshanBeguiler(UUID ownerId) {
public BalshanBeguiler(final BalshanBeguiler card) {
public BalshanBeguiler copy() {return new BalshanBeguiler(this);
class BalshanBeguilerEffect extends OneShotEffect {
public BalshanBeguilerEffect() {
public BalshanBeguilerEffect(final BalshanBeguilerEffect effect) {
public BalshanBeguilerEffect copy() {return new BalshanBeguilerEffect(this);
public boolean apply(Game game, Ability source) {return false;return new BalshanGriffin(this);
public class BarbarianLunatic extends CardImpl {
public BarbarianLunatic(UUID ownerId) {
public BarbarianLunatic(final BarbarianLunatic card) {
public BarbarianLunatic copy() {return new BarbarianLunatic(this);
public class BarbarianRing extends CardImpl {
public BarbarianRing(UUID ownerId) {
public BarbarianRing(final BarbarianRing card) {
public BarbarianRing copy() {return new BarbarianRing(this);
public class BashToBits extends CardImpl {
public BashToBits(UUID ownerId) {
public BashToBits(final BashToBits card) {
public BashToBits copy() {return new BashToBits(this);
public class BattleStrain extends CardImpl {
public BattleStrain(UUID ownerId) {
public BattleStrain(final BattleStrain card) {
public BattleStrain copy() {return new BattleStrain(this);
class BattleStrainTriggeredAbility extends TriggeredAbilityImpl {
public BattleStrainTriggeredAbility() {
public BattleStrainTriggeredAbility(final BattleStrainTriggeredAbility ability) {
public BattleStrainTriggeredAbility copy() {return new BattleStrainTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.BLOCKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature blocks, {this} deals 1 damage to that creature's controller.";
public class Bearscape extends CardImpl {
public Bearscape(UUID ownerId) {
public Bearscape(final Bearscape card) {
public Bearscape copy() {return new Bearscape(this);
public class BeastAttack extends CardImpl {
public BeastAttack(UUID ownerId) {
public BeastAttack(final BeastAttack card) {
public BeastAttack copy() {return new BeastAttack(this);
public class BelovedChaplain extends CardImpl {
public BelovedChaplain(UUID ownerId) {
public BelovedChaplain(final BelovedChaplain card) {
public BelovedChaplain copy() {return new BelovedChaplain(this);
public class BlazingSalvo extends CardImpl {
public BlazingSalvo(UUID ownerId) {
public BlazingSalvo(final BlazingSalvo card) {
public BlazingSalvo copy() {return new BlazingSalvo(this);
class BlazingSalvoEffect extends OneShotEffect {
public BlazingSalvoEffect() {
public BlazingSalvoEffect(final BlazingSalvoEffect effect) {
public BlazingSalvoEffect copy() {return new BlazingSalvoEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Bloodcurdler extends CardImpl {
public Bloodcurdler(UUID ownerId) {
public Bloodcurdler(final Bloodcurdler card) {
public Bloodcurdler copy() {return new Bloodcurdler(this);
public class BogWreckage extends CardImpl {
public BogWreckage(UUID ownerId) {
public BogWreckage(final BogWreckage card) {
public BogWreckage copy() {return new BogWreckage(this);
public class BombSquad extends CardImpl {
public BombSquad(UUID ownerId) {
public BombSquad(final BombSquad card) {
public BombSquad copy() {return new BombSquad(this);
class BombSquadTriggeredAbility extends TriggeredAbilityImpl {
public BombSquadTriggeredAbility() {
public BombSquadTriggeredAbility(final BombSquadTriggeredAbility ability) {
public BombSquadTriggeredAbility copy() {return new BombSquadTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER_ADDED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature has four or more fuse counters on it, " + super.getRule();
class BombSquadDamgeEffect extends OneShotEffect {
public BombSquadDamgeEffect() {
public BombSquadDamgeEffect(final BombSquadDamgeEffect effect) {
public BombSquadDamgeEffect copy() {return new BombSquadDamgeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class BombSquadBeginningEffect extends OneShotEffect {
public BombSquadBeginningEffect() {
public BombSquadBeginningEffect(final BombSquadBeginningEffect effect) {
public BombSquadBeginningEffect copy() {return new BombSquadBeginningEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class BraidsCabalMinion extends CardImpl {
public BraidsCabalMinion(UUID ownerId) {
public BraidsCabalMinion(final BraidsCabalMinion card) {
public BraidsCabalMinion copy() {return new BraidsCabalMinion(this);
public class BurningSands extends CardImpl {
public BurningSands(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public BurningSands(final BurningSands card) {
public BurningSands copy() {return new BurningSands(this);
public class CabalInquisitor extends CardImpl {
public CabalInquisitor(UUID ownerId) {
public CabalInquisitor(final CabalInquisitor card) {
public CabalInquisitor copy() {return new CabalInquisitor(this);
class ActivateAsSorceryConditionalActivatedAbility extends ActivatedAbilityImpl {
public ActivateAsSorceryConditionalActivatedAbility(Zone zone, Effect effect, ManaCosts cost, Condition condition) {
public ActivateAsSorceryConditionalActivatedAbility(final ActivateAsSorceryConditionalActivatedAbility ability) {
public Effects getEffects(Game game, EffectType effectType) {return emptyEffects;return super.getEffects(game, effectType);
public boolean canActivate(UUID playerId, Game game) {return false;return super.canActivate(playerId, game);
public ActivateAsSorceryConditionalActivatedAbility copy() {return new ActivateAsSorceryConditionalActivatedAbility(this);
public String getRule() {return super.getRule() + " Activate this ability only any time you could cast a sorcery, and only if seven or more cards are in your graveyard.";
public class CabalPatriarch extends CardImpl {
public CabalPatriarch(UUID ownerId) {
public CabalPatriarch(final CabalPatriarch card) {
public CabalPatriarch copy() {return new CabalPatriarch(this);
public class CarefulStudy extends CardImpl {
public CarefulStudy(UUID ownerId) {
public CarefulStudy(final CarefulStudy card) {
public CarefulStudy copy() {return new CarefulStudy(this);
public class CausticTar extends CardImpl {
public CausticTar(UUID ownerId) {
public CausticTar(final CausticTar card) {
public CausticTar copy() {return new CausticTar(this);
public class CeaseFire extends CardImpl {
public CeaseFire(UUID ownerId) {
public CeaseFire(final CeaseFire card) {
public CeaseFire copy() {return new CeaseFire(this);
public CeaseFireEffect() {
public CeaseFireEffect(final CeaseFireEffect effect) {
public CeaseFireEffect copy() {return new CeaseFireEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast creature spells this turn (" + mageObject.getIdName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class CentaurGarden extends CardImpl {
public CentaurGarden(UUID ownerId) {
public CentaurGarden(final CentaurGarden card) {
public CentaurGarden copy() {return new CentaurGarden(this);
public class CephalidBroker extends CardImpl {
public CephalidBroker(UUID ownerId) {
public CephalidBroker(final CephalidBroker card) {
public CephalidBroker copy() {return new CephalidBroker(this);
public class CephalidColiseum extends CardImpl {
public CephalidColiseum(UUID ownerId) {
public CephalidColiseum(final CephalidColiseum card) {
public CephalidColiseum copy() {return new CephalidColiseum(this);
public class CephalidLooter extends CardImpl {
public CephalidLooter(UUID ownerId) {
public CephalidLooter(final CephalidLooter card) {
public CephalidLooter copy() {return new CephalidLooter(this);
public class CephalidRetainer extends CardImpl {
public CephalidRetainer(UUID ownerId) {
public CephalidRetainer(final CephalidRetainer card) {
public CephalidRetainer copy() {return new CephalidRetainer(this);
public class CephalidScout extends CardImpl {
public CephalidScout(UUID ownerId) {
public CephalidScout(final CephalidScout card) {
public CephalidScout copy() {return new CephalidScout(this);
public class Chainflinger extends CardImpl {
public Chainflinger(UUID ownerId) {
public Chainflinger(final Chainflinger card) {
public Chainflinger copy() {return new Chainflinger(this);
public class ChamberOfManipulation extends CardImpl {
public ChamberOfManipulation(UUID ownerId) {
public ChamberOfManipulation(final ChamberOfManipulation card) {
public ChamberOfManipulation copy() {return new ChamberOfManipulation(this);
public class ChanceEncounter extends CardImpl {
public ChanceEncounter(UUID ownerId) {
public ChanceEncounter(final ChanceEncounter card) {
public ChanceEncounter copy() {return new ChanceEncounter(this);
class ChanceEncounterTriggeredAbility extends TriggeredAbilityImpl {
public ChanceEncounterTriggeredAbility() {
public ChanceEncounterTriggeredAbility(final ChanceEncounterTriggeredAbility ability) {
public ChanceEncounterTriggeredAbility copy() {return new ChanceEncounterTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.COIN_FLIPPED;
public boolean checkTrigger(GameEvent event, Game game) {return this.getControllerId().equals(event.getPlayerId()) && event.getFlag();
public String getRule() {return "Whenever you win a coin flip, " + super.getRule();
public class ChatterOfTheSquirrel extends CardImpl {
public ChatterOfTheSquirrel(UUID ownerId) {
public ChatterOfTheSquirrel(final ChatterOfTheSquirrel card) {
public ChatterOfTheSquirrel copy() {return new ChatterOfTheSquirrel(this);
public class ChildhoodHorror extends CardImpl {
public ChildhoodHorror(UUID ownerId) {
public ChildhoodHorror(final ChildhoodHorror card) {
public ChildhoodHorror copy() {return new ChildhoodHorror(this);
public class Chlorophant extends CardImpl {
public Chlorophant(UUID ownerId) {
public Chlorophant(final Chlorophant card) {
public Chlorophant copy() {return new Chlorophant(this);
public class CoffinPurge extends CardImpl {
public CoffinPurge(UUID ownerId) {
public CoffinPurge(final CoffinPurge card) {
public CoffinPurge copy() {return new CoffinPurge(this);
public class Cognivore extends CardImpl {
public Cognivore(UUID ownerId) {
public Cognivore(final Cognivore card) {
public Cognivore copy() {return new Cognivore(this);
public class Concentrate extends CardImpl {
public Concentrate(UUID ownerId) {
public Concentrate(final Concentrate card) {
public Concentrate copy() {return new Concentrate(this);
public class CrystalQuarry extends CardImpl {
public CrystalQuarry(UUID ownerId) {
public CrystalQuarry(final CrystalQuarry card) {
public CrystalQuarry copy() {return new CrystalQuarry(this);
public class CursedMonstrosity extends CardImpl {
public CursedMonstrosity(UUID ownerId) {
public CursedMonstrosity(final CursedMonstrosity card) {
public CursedMonstrosity copy() {return new CursedMonstrosity(this);
public class DarkwaterCatacombs extends CardImpl {
public DarkwaterCatacombs(UUID ownerId) {
public DarkwaterCatacombs(final DarkwaterCatacombs card) {
public DarkwaterCatacombs copy() {return new DarkwaterCatacombs(this);
public class DarkwaterEgg extends CardImpl {
public DarkwaterEgg(UUID ownerId) {
public DarkwaterEgg(final DarkwaterEgg card) {
public DarkwaterEgg copy() {return new DarkwaterEgg(this);
public class DecayingSoil extends CardImpl {
public DecayingSoil(UUID ownerId) {"As long as seven or more cards are in your graveyard, {this} has \"Whenever a nontoken creature is put into your graveyard from the battlefield, you may pay {1}. If you do, return that card to your hand.\""));
public DecayingSoil(final DecayingSoil card) {
public DecayingSoil copy() {return new DecayingSoil(this);
class DecayingSoilTriggeredAbility extends TriggeredAbilityImpl {
public DecayingSoilTriggeredAbility(Effect effect, FilterCreaturePermanent filter) {
public DecayingSoilTriggeredAbility(DecayingSoilTriggeredAbility ability) {
public DecayingSoilTriggeredAbility copy() {return new DecayingSoilTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public boolean checkInterveningIfClause(Game game) {return controller != null && controller.getGraveyard().contains(this.getSourceId());
public String getRule() {return new StringBuilder("Whenever a ").append(filter.getMessage()).append(" is put into your graveyard from the battlefield, ").append(super.getRule()).toString();
class DecayingSoilEffect extends OneShotEffect {
public DecayingSoilEffect() {staticText = "you may pay {1}. If you do, return that card to your hand";
public DecayingSoilEffect(final DecayingSoilEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DecayingSoilEffect copy() {return new DecayingSoilEffect(this);
public class Decimate extends CardImpl {
public Decimate(UUID ownerId) {
public Decimate(final Decimate card) {
public Decimate copy() {return new Decimate(this);
public class Decompose extends CardImpl {
public Decompose(UUID ownerId) {
public Decompose(final Decompose card) {
public Decompose copy() {return new Decompose(this);
public class DedicatedMartyr extends CardImpl {
public DedicatedMartyr(UUID ownerId) {
public DedicatedMartyr(final DedicatedMartyr card) {
public DedicatedMartyr copy() {return new DedicatedMartyr(this);
public class DeepReconnaissance extends CardImpl {
public DeepReconnaissance(UUID ownerId) {
public DeepReconnaissance(final DeepReconnaissance card) {
public DeepReconnaissance copy() {return new DeepReconnaissance(this);
public class DelayingShield extends CardImpl {
public DelayingShield(UUID ownerId) {
public DelayingShield(final DelayingShield card) {
public DelayingShield copy() {return new DelayingShield(this);
class DelayingShieldReplacementEffect extends ReplacementEffectImpl {
DelayingShieldReplacementEffect() {
DelayingShieldReplacementEffect(final DelayingShieldReplacementEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getControllerId());
public DelayingShieldReplacementEffect copy() {return new DelayingShieldReplacementEffect(this);
class DelayingShieldUpkeepEffect extends OneShotEffect {
DelayingShieldUpkeepEffect() {
DelayingShieldUpkeepEffect(final DelayingShieldUpkeepEffect effect) {
public DelayingShieldUpkeepEffect copy() {return new DelayingShieldUpkeepEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Dematerialize extends CardImpl {
public Dematerialize(UUID ownerId) {
public Dematerialize(final Dematerialize card) {
public Dematerialize copy() {return new Dematerialize(this);
public class Demoralize extends CardImpl {
public Demoralize(UUID ownerId) {
public Demoralize(final Demoralize card) {
public Demoralize copy() {return new Demoralize(this);
public class DesertedTemple extends CardImpl {
public DesertedTemple(UUID ownerId) {
public DesertedTemple(final DesertedTemple card) {
public DesertedTemple copy() {return new DesertedTemple(this);
public class DevotedCaretaker extends CardImpl {
public DevotedCaretaker(UUID ownerId) {
public DevotedCaretaker(final DevotedCaretaker card) {
public DevotedCaretaker copy() {return new DevotedCaretaker(this);
public class DiligentFarmhand extends CardImpl {
public DiligentFarmhand(UUID ownerId) {
public DiligentFarmhand(final DiligentFarmhand card) {
public DiligentFarmhand copy() {return new DiligentFarmhand(this);
public class DirtyWererat extends CardImpl {
public DirtyWererat(UUID ownerId) {
public DirtyWererat(final DirtyWererat card) {
public DirtyWererat copy() {return new DirtyWererat(this);
public class Divert extends CardImpl {
public Divert(UUID ownerId) {
public Divert(final Divert card) {
public Divert copy() {return new Divert(this);
class DivertEffect extends OneShotEffect {
public DivertEffect() {
public DivertEffect(final DivertEffect effect) {
public DivertEffect copy() {return new DivertEffect(this);
public boolean apply(Game game, Ability source) {return spell.chooseNewTargets(game, source.getControllerId(), true, true, null);return false;
public class DivineSacrament extends CardImpl {
public DivineSacrament(UUID ownerId) {
public DivineSacrament(final DivineSacrament card) {
public DivineSacrament copy() {return new DivineSacrament(this);
public class DruidLyrist extends CardImpl {
public DruidLyrist(UUID ownerId) {
public DruidLyrist(final DruidLyrist card) {
public DruidLyrist copy() {return new DruidLyrist(this);
public class DruidsCall extends CardImpl {
public DruidsCall(UUID ownerId) {
public DruidsCall(final DruidsCall card) {
public DruidsCall copy() {return new DruidsCall(this);
public class DwarvenGrunt extends CardImpl {
public DwarvenGrunt(UUID ownerId) {
public DwarvenGrunt(final DwarvenGrunt card) {
public DwarvenGrunt copy() {return new DwarvenGrunt(this);
public class DwarvenRecruiter extends CardImpl {
public DwarvenRecruiter(UUID ownerId) {
public DwarvenRecruiter(final DwarvenRecruiter card) {
public DwarvenRecruiter copy() {return new DwarvenRecruiter(this);
public class DwarvenStrikeForce extends CardImpl {
public DwarvenStrikeForce(UUID ownerId) {
public DwarvenStrikeForce(final DwarvenStrikeForce card) {
public DwarvenStrikeForce copy() {return new DwarvenStrikeForce(this);
public class EarnestFellowship extends CardImpl {
public EarnestFellowship(UUID ownerId) {
public EarnestFellowship(final EarnestFellowship card) {
public EarnestFellowship copy() {return new EarnestFellowship(this);
class EarnestFellowshipEffect extends ContinuousEffectImpl {
public EarnestFellowshipEffect() {
public EarnestFellowshipEffect(final EarnestFellowshipEffect effect) {
public EarnestFellowshipEffect copy() {return new EarnestFellowshipEffect(this);
public boolean apply(Game game, Ability source) {return true;return new EarthRift(this);
public class ElephantAmbush extends CardImpl {
public ElephantAmbush(UUID ownerId) {
public ElephantAmbush(final ElephantAmbush card) {
public ElephantAmbush copy() {return new ElephantAmbush(this);
public class EngulfingFlames extends CardImpl {
public EngulfingFlames(UUID ownerId) {
public EngulfingFlames(final EngulfingFlames card) {
public EngulfingFlames copy() {return new EngulfingFlames(this);
public class Entomb extends CardImpl {
public Entomb(UUID ownerId) {
public Entomb(final Entomb card) {
public Entomb copy() {return new Entomb(this);
class SearchLibraryPutInGraveyard extends SearchEffect {
public SearchLibraryPutInGraveyard() {
public SearchLibraryPutInGraveyard(final SearchLibraryPutInGraveyard effect) {
public SearchLibraryPutInGraveyard copy() {return new SearchLibraryPutInGraveyard(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class EscapeArtist extends CardImpl {
public EscapeArtist(UUID ownerId) {
public EscapeArtist(final EscapeArtist card) {
public EscapeArtist copy() {return new EscapeArtist(this);
public class Extract extends CardImpl {
public Extract(UUID ownerId) {
public Extract(final Extract card) {
public Extract copy() {return new Extract(this);
class ExtractEffect extends OneShotEffect {
public ExtractEffect() {
public ExtractEffect(final ExtractEffect effect) {
public ExtractEffect copy() {return new ExtractEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FaceOfFear extends CardImpl {
public FaceOfFear(UUID ownerId) {
public FaceOfFear(final FaceOfFear card) {
public FaceOfFear copy() {return new FaceOfFear(this);
public class FamishedGhoul extends CardImpl {
public FamishedGhoul(UUID ownerId) {
public FamishedGhoul(final FamishedGhoul card) {
public FamishedGhoul copy() {return new FamishedGhoul(this);
public class FerventDenial extends CardImpl {
public FerventDenial(UUID ownerId) {
public FerventDenial(final FerventDenial card) {
public FerventDenial copy() {return new FerventDenial(this);
public class FilthyCur extends CardImpl {
public FilthyCur(UUID ownerId) {
public FilthyCur(final FilthyCur card) {
public FilthyCur copy() {return new FilthyCur(this);return new DealtDamageLoseLifeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt damage, you lose that much life.";
public class Firebolt extends CardImpl {
public Firebolt(UUID ownerId) {
public Firebolt(final Firebolt card) {
public Firebolt copy() {return new Firebolt(this);
public class FlameBurst extends CardImpl {
public FlameBurst(UUID ownerId) {
public FlameBurst(final FlameBurst card) {
public FlameBurst copy() {return new FlameBurst(this);return new CountAsFlameBurstAbility();
class FlameBurstCount extends CardsInAllGraveyardsCount {
public FlameBurstCount(FilterCard filter) {
public FlameBurstCount(FlameBurstCount value) {
public FlameBurstCount copy() {return new FlameBurstCount(this);
public int calculate(Game game, Ability source, Effect effect) {return super.calculate(game, source, effect) + 2;
class CountAsFlameBurstAbility extends SimpleStaticAbility {
public CountAsFlameBurstAbility() {
public CountAsFlameBurstAbility(CountAsFlameBurstAbility ability) {
public CountAsFlameBurstAbility copy() {return new CountAsFlameBurstAbility(this);
public class Frightcrawler extends CardImpl {
public Frightcrawler(UUID ownerId) {
public Frightcrawler(final Frightcrawler card) {
public Frightcrawler copy() {return new Frightcrawler(this);
public class GhastlyDemise extends CardImpl {
public GhastlyDemise(UUID ownerId) {
public GhastlyDemise(final GhastlyDemise card) {
public GhastlyDemise copy() {return new GhastlyDemise(this);
class GhastlyDemiseEffect extends OneShotEffect {
public GhastlyDemiseEffect(boolean noRegen) {
public GhastlyDemiseEffect(final GhastlyDemiseEffect effect) {
public GhastlyDemiseEffect copy() {return new GhastlyDemiseEffect(this);
public boolean apply(Game game, Ability source) {
public class GorillaTitan extends CardImpl {
public GorillaTitan(UUID ownerId) {
public GorillaTitan(final GorillaTitan card) {
public GorillaTitan copy() {return new GorillaTitan(this);
class GorillaTitanCondition implements Condition {
public boolean apply(Game game, Ability source) {
{return p.getGraveyard().size() == 0;return false;
public class GracefulAntelope extends CardImpl {
public GracefulAntelope(UUID ownerId) {
public GracefulAntelope(final GracefulAntelope card) {
public GracefulAntelope copy() {return new GracefulAntelope(this);
public class Halberdier extends CardImpl {
public Halberdier(UUID ownerId) {
public Halberdier(final Halberdier card) {
public Halberdier copy() {return new Halberdier(this);
public class HallowedHealer extends CardImpl {
public HallowedHealer(UUID ownerId) {
public HallowedHealer(final HallowedHealer card) {
public HallowedHealer copy() {return new HallowedHealer(this);
public class HowlingGale extends CardImpl {
public HowlingGale(UUID ownerId) {
public HowlingGale(final HowlingGale card) {
public HowlingGale copy() {return new HowlingGale(this);
public class ImmobilizingInk extends CardImpl {
public ImmobilizingInk(UUID ownerId) {
public ImmobilizingInk(final ImmobilizingInk card) {
public ImmobilizingInk copy() {return new ImmobilizingInk(this);
public class InfectedVermin extends CardImpl {
public InfectedVermin(UUID ownerId) {
public InfectedVermin(final InfectedVermin card) {
public InfectedVermin copy() {return new InfectedVermin(this);
public class IridescentAngel extends CardImpl {
public IridescentAngel(UUID ownerId) {
public IridescentAngel(final IridescentAngel card) {
public IridescentAngel copy() {return new IridescentAngel(this);
public class KamahlsDesire extends CardImpl {
public KamahlsDesire(UUID ownerId) {
public KamahlsDesire(final KamahlsDesire card) {
public KamahlsDesire copy() {return new KamahlsDesire(this);
public class KarmicJustice extends CardImpl {
public KarmicJustice(UUID ownerId) {
public KarmicJustice(final KarmicJustice card) {
public KarmicJustice copy() {return new KarmicJustice(this);
class KarmicJusticeTriggeredAbility extends TriggeredAbilityImpl {
KarmicJusticeTriggeredAbility() {
KarmicJusticeTriggeredAbility(final KarmicJusticeTriggeredAbility ability) {
public KarmicJusticeTriggeredAbility copy() {return new KarmicJusticeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DESTROYED_PERMANENT;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a spell or ability an opponent controls destroys a noncreature permanent you control, you may destroy target permanent that opponent controls";
public class KrosanArcher extends CardImpl {
public KrosanArcher(UUID ownerId) {
public KrosanArcher(final KrosanArcher card) {
public KrosanArcher copy() {return new KrosanArcher(this);
public class KrosanAvenger extends CardImpl {
public KrosanAvenger(UUID ownerId) {
public KrosanAvenger(final KrosanAvenger card) {
public KrosanAvenger copy() {return new KrosanAvenger(this);
public class KrosanBeast extends CardImpl {
public KrosanBeast(UUID ownerId) {
public KrosanBeast(final KrosanBeast card) {
public KrosanBeast copy() {return new KrosanBeast(this);
public class LaquatussCreativity extends CardImpl {
public LaquatussCreativity(UUID ownerId) {
public LaquatussCreativity(final LaquatussCreativity card) {
public LaquatussCreativity copy() {return new LaquatussCreativity(this);
class LaquatussCreativityEffect extends OneShotEffect {
public LaquatussCreativityEffect() {
public LaquatussCreativityEffect(final LaquatussCreativityEffect effect) {
public LaquatussCreativityEffect copy() {return new LaquatussCreativityEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class LeafDancer extends CardImpl {
public LeafDancer(UUID ownerId) {
public LeafDancer(final LeafDancer card) {
public LeafDancer copy() {return new LeafDancer(this);
public class LieutenantKirtar extends CardImpl {
public LieutenantKirtar(UUID ownerId) {
public LieutenantKirtar(final LieutenantKirtar card) {
public LieutenantKirtar copy() {return new LieutenantKirtar(this);
public class MagmaVein extends CardImpl {
public MagmaVein(UUID ownerId) {
public MagmaVein(final MagmaVein card) {
public MagmaVein copy() {return new MagmaVein(this);
public class MalevolentAwakening extends CardImpl {
public MalevolentAwakening(UUID ownerId) {
public MalevolentAwakening(final MalevolentAwakening card) {
public MalevolentAwakening copy() {return new MalevolentAwakening(this);
public class MasterApothecary extends CardImpl {
public MasterApothecary(UUID ownerId) {
public MasterApothecary(final MasterApothecary card) {
public MasterApothecary copy() {return new MasterApothecary(this);
public class MetamorphicWurm extends CardImpl {
public MetamorphicWurm(UUID ownerId) {
public MetamorphicWurm(final MetamorphicWurm card) {
public MetamorphicWurm copy() {return new MetamorphicWurm(this);
public class MinotaurExplorer extends CardImpl {
public MinotaurExplorer(UUID ownerId) {
public MinotaurExplorer(final MinotaurExplorer card) {
public MinotaurExplorer copy() {return new MinotaurExplorer(this);
public class MoltenInfluence extends CardImpl {
public MoltenInfluence(UUID ownerId) {
public MoltenInfluence(final MoltenInfluence card) {
public MoltenInfluence copy() {return new MoltenInfluence(this);
class MoltenInfluenceEffect extends OneShotEffect {
public MoltenInfluenceEffect() {
public MoltenInfluenceEffect(final MoltenInfluenceEffect effect) {
public MoltenInfluenceEffect copy() {return new MoltenInfluenceEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class MomentsPeace extends CardImpl {
public MomentsPeace(UUID ownerId) {
public MomentsPeace(final MomentsPeace card) {
public MomentsPeace copy() {return new MomentsPeace(this);
public class MorbidHunger extends CardImpl {
public MorbidHunger(UUID ownerId) {
public MorbidHunger(final MorbidHunger card) {
public MorbidHunger copy() {return new MorbidHunger(this);
public class MorgueTheft extends CardImpl {
public MorgueTheft(UUID ownerId) {
public MorgueTheft(final MorgueTheft card) {
public MorgueTheft copy() {return new MorgueTheft(this);
public class MossfireEgg extends CardImpl {
public MossfireEgg(UUID ownerId) {
public MossfireEgg(final MossfireEgg card) {
public MossfireEgg copy() {return new MossfireEgg(this);
public class MossfireValley extends CardImpl {
public MossfireValley(UUID ownerId) {
public MossfireValley(final MossfireValley card) {
public MossfireValley copy() {return new MossfireValley(this);
public class Mudhole extends CardImpl {
public Mudhole(UUID ownerId) {
public Mudhole(final Mudhole card) {
public Mudhole copy() {return new Mudhole(this);
class MudholeEffect extends OneShotEffect {
public MudholeEffect() {
public MudholeEffect(final MudholeEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MudholeEffect copy() {return new MudholeEffect(this);
public class MuscleBurst extends CardImpl {
public MuscleBurst(UUID ownerId) {
public MuscleBurst(final MuscleBurst card) {
public MuscleBurst copy() {return new MuscleBurst(this);return new CountAsMuscleBurstAbility();
class MuscleBurstCount extends CardsInAllGraveyardsCount {
public MuscleBurstCount(FilterCard filter) {
public MuscleBurstCount(MuscleBurstCount value) {
public MuscleBurstCount copy() {return new MuscleBurstCount(this);
public int calculate(Game game, Ability source, Effect effect) {return super.calculate(game, source, effect) + 3;
class CountAsMuscleBurstAbility extends SimpleStaticAbility {
public CountAsMuscleBurstAbility() {
public CountAsMuscleBurstAbility(CountAsMuscleBurstAbility ability) {
public CountAsMuscleBurstAbility copy() {return new CountAsMuscleBurstAbility(this);
public class MysticCrusader extends CardImpl {
public MysticCrusader(UUID ownerId) {
public MysticCrusader(final MysticCrusader card) {
public MysticCrusader copy() {return new MysticCrusader(this);
public class MysticPenitent extends CardImpl {
public MysticPenitent(UUID ownerId) {
public MysticPenitent(final MysticPenitent card) {
public MysticPenitent copy() {return new MysticPenitent(this);
public class MysticVisionary extends CardImpl {
public MysticVisionary(UUID ownerId) {
public MysticVisionary(final MysticVisionary card) {
public MysticVisionary copy() {return new MysticVisionary(this);
public class MysticZealot extends CardImpl {
public MysticZealot(UUID ownerId) {
public MysticZealot(final MysticZealot card) {
public MysticZealot copy() {return new MysticZealot(this);
public class NantukoDisciple extends CardImpl {
public NantukoDisciple(UUID ownerId) {
public NantukoDisciple(final NantukoDisciple card) {
public NantukoDisciple copy() {return new NantukoDisciple(this);
public class NeedForSpeed extends CardImpl {
public NeedForSpeed(UUID ownerId) {
public NeedForSpeed(final NeedForSpeed card) {
public NeedForSpeed copy() {return new NeedForSpeed(this);
public class NimbleMongoose extends CardImpl {
public NimbleMongoose(UUID ownerId) {
public NimbleMongoose(final NimbleMongoose card) {
public NimbleMongoose copy() {return new NimbleMongoose(this);
public class NomadDecoy extends CardImpl {
public NomadDecoy(UUID ownerId) {
public NomadDecoy(final NomadDecoy card) {
public NomadDecoy copy() {return new NomadDecoy(this);
public class NomadStadium extends CardImpl {
public NomadStadium(UUID ownerId) {
public NomadStadium(final NomadStadium card) {
public NomadStadium copy() {return new NomadStadium(this);
public class NutCollector extends CardImpl {
public NutCollector(UUID ownerId) {
public NutCollector(final NutCollector card) {
public NutCollector copy() {return new NutCollector(this);
public class ObstinateFamiliar extends CardImpl {
public ObstinateFamiliar(UUID ownerId) {
public ObstinateFamiliar(final ObstinateFamiliar card) {
public ObstinateFamiliar copy() {return new ObstinateFamiliar(this);
class ObstinateFamiliarReplacementEffect extends ReplacementEffectImpl {
public ObstinateFamiliarReplacementEffect() {
public ObstinateFamiliarReplacementEffect(final ObstinateFamiliarReplacementEffect effect) {
public ObstinateFamiliarReplacementEffect copy() {return new ObstinateFamiliarReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class OvereagerApprentice extends CardImpl {
public OvereagerApprentice(UUID ownerId) {
public OvereagerApprentice(final OvereagerApprentice card) {
public OvereagerApprentice copy() {return new OvereagerApprentice(this);
public class PardicFirecat extends CardImpl {
public PardicFirecat(UUID ownerId) {
public PardicFirecat(final PardicFirecat card) {
public PardicFirecat copy() {return new PardicFirecat(this);
public class PardicMiner extends CardImpl {
public PardicMiner(UUID ownerId) {
public PardicMiner(final PardicMiner card) {
public PardicMiner copy() {return new PardicMiner(this);
public PardicMinerEffect() {
public PardicMinerEffect(final PardicMinerEffect effect) {
public PardicMinerEffect copy() {return new PardicMinerEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't play lands this turn (" + mageObject.getIdName() + ").";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PardicSwordsmith extends CardImpl {
public PardicSwordsmith(UUID ownerId) {
public PardicSwordsmith(final PardicSwordsmith card) {
public PardicSwordsmith copy() {return new PardicSwordsmith(this);
public class PatriarchsDesire extends CardImpl {
public PatriarchsDesire(UUID ownerId) {
public PatriarchsDesire(final PatriarchsDesire card) {
public PatriarchsDesire copy() {return new PatriarchsDesire(this);
public class PatrolHound extends CardImpl {
public PatrolHound(UUID ownerId) {
public PatrolHound(final PatrolHound card) {
public PatrolHound copy() {return new PatrolHound(this);
public class PatronWizard extends CardImpl {
public PatronWizard(UUID ownerId) {
public PatronWizard(final PatronWizard card) {
public PatronWizard copy() {return new PatronWizard(this);return new PetrifiedField(this);
public class Phantatog extends CardImpl {
public Phantatog(UUID ownerId) {
public Phantatog(final Phantatog card) {
public Phantatog copy() {return new Phantatog(this);
public class PiannaNomadCaptain extends CardImpl {
public PiannaNomadCaptain(UUID ownerId) {
public PiannaNomadCaptain(final PiannaNomadCaptain card) {
public PiannaNomadCaptain copy() {return new PiannaNomadCaptain(this);
public class PilgrimOfJustice extends CardImpl {
public PilgrimOfJustice(UUID ownerId) {
public PilgrimOfJustice(final PilgrimOfJustice card) {
public PilgrimOfJustice copy() {return new PilgrimOfJustice(this);
class PilgrimOfJusticeEffect extends PreventionEffectImpl {
public PilgrimOfJusticeEffect() {
public PilgrimOfJusticeEffect(final PilgrimOfJusticeEffect effect) {
public PilgrimOfJusticeEffect copy() {return new PilgrimOfJusticeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
private void preventDamage(GameEvent event, Ability source, UUID target, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PilgrimOfVirtue extends CardImpl {
public PilgrimOfVirtue(UUID ownerId) {
public PilgrimOfVirtue(final PilgrimOfVirtue card) {
public PilgrimOfVirtue copy() {return new PilgrimOfVirtue(this);
class PilgrimOfVirtueEffect extends PreventionEffectImpl {
public PilgrimOfVirtueEffect() {
public PilgrimOfVirtueEffect(final PilgrimOfVirtueEffect effect) {
public PilgrimOfVirtueEffect copy() {return new PilgrimOfVirtueEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
private void preventDamage(GameEvent event, Ability source, UUID target, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PrimalFrenzy extends CardImpl {
public PrimalFrenzy(UUID ownerId) {
public PrimalFrenzy(final PrimalFrenzy card) {
public PrimalFrenzy copy() {return new PrimalFrenzy(this);return new PsionicGift(this);
public class PulsatingIllusion extends CardImpl {
public PulsatingIllusion(UUID ownerId) {
public PulsatingIllusion(final PulsatingIllusion card) {
public PulsatingIllusion copy() {return new PulsatingIllusion(this);
public class RabidElephant extends CardImpl {
public RabidElephant(UUID ownerId) {
public RabidElephant(final RabidElephant card) {
public RabidElephant copy() {return new RabidElephant(this);
class RabidElephantAbility extends BecomesBlockedTriggeredAbility {
public RabidElephantAbility() {
public RabidElephantAbility(final RabidElephantAbility ability) {
public RabidElephantAbility copy() {return new RabidElephantAbility(this);
public String getRule() {return "Whenever {this} becomes blocked, it gets +2/+2 until end of turn for each creature blocking it.";
class RabidElephantValue implements DynamicValue {
public RabidElephantValue copy() {return new RabidElephantValue();
public int calculate(Game game, Ability sourceAbility, Effect effect) {return blockers > 1 ? (blockers) * 2 : 0;return 0;
public String getMessage() {return "+2/+2 until end of turn for each creature blocking it";
public class RavagedHighlands extends CardImpl {
public RavagedHighlands(UUID ownerId) {
public RavagedHighlands(final RavagedHighlands card) {
public RavagedHighlands copy() {return new RavagedHighlands(this);
public class RayOfDistortion extends CardImpl {
public RayOfDistortion(UUID ownerId) {
public RayOfDistortion(final RayOfDistortion card) {
public RayOfDistortion copy() {return new RayOfDistortion(this);
public class Recoup extends CardImpl {
public Recoup(UUID ownerId) {
public Recoup(final Recoup card) {
public Recoup copy() {return new Recoup(this);
class RecoupEffect extends ContinuousEffectImpl {
public RecoupEffect() {
public RecoupEffect(final RecoupEffect effect) {
public RecoupEffect copy() {return new RecoupEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Refresh extends CardImpl {
public Refresh(UUID ownerId) {
public Refresh(final Refresh card) {
public Refresh copy() {return new Refresh(this);
public class Repel extends CardImpl {
public Repel(UUID ownerId) {
public Repel(final Repel card) {
public Repel copy() {return new Repel(this);
public class RepentantVampire extends CardImpl {
public RepentantVampire(UUID ownerId) {
public RepentantVampire(final RepentantVampire card) {
public RepentantVampire copy() {return new RepentantVampire(this);
public class ResilientWanderer extends CardImpl {
public ResilientWanderer(UUID ownerId) {
public ResilientWanderer(final ResilientWanderer card) {
public ResilientWanderer copy() {return new ResilientWanderer(this);
public class RitesOfInitiation extends CardImpl {
public RitesOfInitiation(UUID ownerId) {
public RitesOfInitiation(final RitesOfInitiation card) {
public RitesOfInitiation copy() {return new RitesOfInitiation(this);
class RitesOfInitiationEffect extends OneShotEffect {
RitesOfInitiationEffect() {
RitesOfInitiationEffect(final RitesOfInitiationEffect effect) {
public RitesOfInitiationEffect copy() {return new RitesOfInitiationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RoarOfTheWurm extends CardImpl {
public RoarOfTheWurm(UUID ownerId) {
public RoarOfTheWurm(final RoarOfTheWurm card) {
public RoarOfTheWurm copy() {return new RoarOfTheWurm(this);
public class RottingGiant extends CardImpl {
public RottingGiant(UUID ownerId) {
public RottingGiant(final RottingGiant card) {
public RottingGiant copy() {return new RottingGiant(this);
public class SacredRites extends CardImpl {
public SacredRites(UUID ownerId) {
public SacredRites(final SacredRites card) {
public SacredRites copy() {return new SacredRites(this);
class SacredRitesEffect extends OneShotEffect {
SacredRitesEffect() {
SacredRitesEffect(final SacredRitesEffect effect) {
public SacredRitesEffect copy() {return new SacredRitesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SadisticHypnotist extends CardImpl {
public SadisticHypnotist(UUID ownerId) {
public SadisticHypnotist(final SadisticHypnotist card) {
public SadisticHypnotist copy() {return new SadisticHypnotist(this);
public class SandstoneDeadfall extends CardImpl {
public SandstoneDeadfall(UUID ownerId) {
public SandstoneDeadfall(final SandstoneDeadfall card) {
public SandstoneDeadfall copy() {return new SandstoneDeadfall(this);
public class Sarcatog extends CardImpl {
public Sarcatog(UUID ownerId) {
public Sarcatog(final Sarcatog card) {
public Sarcatog copy() {return new Sarcatog(this);
public class SeafloorDebris extends CardImpl {
public SeafloorDebris(UUID ownerId) {
public SeafloorDebris(final SeafloorDebris card) {
public SeafloorDebris copy() {return new SeafloorDebris(this);
public class SecondThoughts extends CardImpl {
public SecondThoughts(UUID ownerId) {
public SecondThoughts(final SecondThoughts card) {
public SecondThoughts copy() {return new SecondThoughts(this);
public class SetonKrosanProtector extends CardImpl {
public SetonKrosanProtector(UUID ownerId) {
public SetonKrosanProtector(final SetonKrosanProtector card) {
public SetonKrosanProtector copy() {return new SetonKrosanProtector(this);return new ShadowbloodEgg(this);return new ShadowbloodRidge(this);
public class Shelter extends CardImpl {
public Shelter(UUID ownerId) {
public Shelter(final Shelter card) {
public Shelter copy() {return new Shelter(this);
public class ShowerOfCoals extends CardImpl {
public ShowerOfCoals(UUID ownerId) {
public ShowerOfCoals(final ShowerOfCoals card) {
public ShowerOfCoals copy() {return new ShowerOfCoals(this);return new Simplify(this);
public class SkeletalScrying extends CardImpl {
public SkeletalScrying(UUID ownerId) {
public SkeletalScrying(final SkeletalScrying card) {
public void adjustCosts(Ability ability, Game game) {
public SkeletalScrying copy() {return new SkeletalScrying(this);
class SkeletalScryingRuleEffect extends OneShotEffect {
public SkeletalScryingRuleEffect() {
public SkeletalScryingRuleEffect(final SkeletalScryingRuleEffect effect) {
public SkeletalScryingRuleEffect copy() {return new SkeletalScryingRuleEffect(this);
public boolean apply(Game game, Ability source) {return true;
class SkeletalScryingEffect extends OneShotEffect {
public SkeletalScryingEffect(int amount) {
public SkeletalScryingEffect(DynamicValue amount) {
public SkeletalScryingEffect(final SkeletalScryingEffect effect) {
public SkeletalScryingEffect copy() {return new SkeletalScryingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SkullFracture extends CardImpl {
public SkullFracture(UUID ownerId) {
public SkullFracture(final SkullFracture card) {
public SkullFracture copy() {return new SkullFracture(this);
public class SkycloudEgg extends CardImpl {
public SkycloudEgg(UUID ownerId) {
public SkycloudEgg(final SkycloudEgg card) {
public SkycloudEgg copy() {return new SkycloudEgg(this);
public class SkycloudExpanse extends CardImpl {
public SkycloudExpanse(UUID ownerId) {
public SkycloudExpanse(final SkycloudExpanse card) {
public SkycloudExpanse copy() {return new SkycloudExpanse(this);
public class Skyshooter extends CardImpl {
public Skyshooter(UUID ownerId) {
public Skyshooter(final Skyshooter card) {
public Skyshooter copy() {return new Skyshooter(this);
public class Soulcatcher extends CardImpl {
public Soulcatcher(UUID ownerId) {
public Soulcatcher(final Soulcatcher card) {
public Soulcatcher copy() {return new Soulcatcher(this);
public class SparkMage extends CardImpl {
public SparkMage(UUID ownerId) {
public SparkMage(final SparkMage card) {
public SparkMage copy() {return new SparkMage(this);
class SparkMageTriggeredAbility extends TriggeredAbilityImpl {
public SparkMageTriggeredAbility() {
public SparkMageTriggeredAbility(final SparkMageTriggeredAbility ability) {
public SparkMageTriggeredAbility copy() {return new SparkMageTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, you may have {this} deal 1 damage to target creature that player controls.";
public class Spiritualize extends CardImpl {
public Spiritualize(UUID ownerId) {
public Spiritualize(final Spiritualize card) {
public Spiritualize copy() {return new Spiritualize(this);
class SpiritualizeTriggeredAbility extends DelayedTriggeredAbility {
public SpiritualizeTriggeredAbility() {
public SpiritualizeTriggeredAbility(final SpiritualizeTriggeredAbility ability) {
public SpiritualizeTriggeredAbility copy() {return new SpiritualizeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever target creature deals damage, " + super.getRule();
class SpiritualizeEffect extends OneShotEffect {
public SpiritualizeEffect() {
public SpiritualizeEffect(final SpiritualizeEffect effect) {
public SpiritualizeEffect copy() {return new SpiritualizeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SpringingTiger extends CardImpl {
public SpringingTiger(UUID ownerId) {
public SpringingTiger(final SpringingTiger card) {
public SpringingTiger copy() {return new SpringingTiger(this);
public class SquirrelMob extends CardImpl {
public SquirrelMob(UUID ownerId) {
public SquirrelMob(final SquirrelMob card) {
public SquirrelMob copy() {return new SquirrelMob(this);return new StillLife(this);
public class SungrassEgg extends CardImpl {
public SungrassEgg(UUID ownerId) {
public SungrassEgg(final SungrassEgg card) {
public SungrassEgg copy() {return new SungrassEgg(this);
public class SungrassPrairie extends CardImpl {
public SungrassPrairie(UUID ownerId) {
public SungrassPrairie(final SungrassPrairie card) {
public SungrassPrairie copy() {return new SungrassPrairie(this);
public class SylvanMight extends CardImpl {
public SylvanMight(UUID ownerId) {
public SylvanMight(final SylvanMight card) {
public SylvanMight copy() {return new SylvanMight(this);
public class TaintedPact extends CardImpl {
public TaintedPact(UUID ownerId) {
public TaintedPact(final TaintedPact card) {
public TaintedPact copy() {return new TaintedPact(this);
class TaintedPactEffect extends OneShotEffect{
public TaintedPactEffect() {
public TaintedPactEffect(final TaintedPactEffect effect) {
public TaintedPactEffect copy() {return new TaintedPactEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class TarnishedCitadel extends CardImpl {
public TarnishedCitadel(UUID ownerId) {
public TarnishedCitadel(final TarnishedCitadel card) {
public TarnishedCitadel copy() {return new TarnishedCitadel(this);
public class Terravore extends CardImpl {
public Terravore(UUID ownerId) {
public Terravore(final Terravore card) {
public Terravore copy() {return new Terravore(this);
public class TestamentOfFaith extends CardImpl {
public TestamentOfFaith(UUID ownerId) {
public TestamentOfFaith(final TestamentOfFaith card) {
public TestamentOfFaith copy() {return new TestamentOfFaith(this);
class TestamentOfFaithBecomesCreatureSourceEffect extends ContinuousEffectImpl implements SourceEffect {
public TestamentOfFaithBecomesCreatureSourceEffect(Token token, String type, Duration duration) {
public TestamentOfFaithBecomesCreatureSourceEffect(final TestamentOfFaithBecomesCreatureSourceEffect effect) {
public TestamentOfFaithBecomesCreatureSourceEffect copy() {return new TestamentOfFaithBecomesCreatureSourceEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
private void setText() {
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.ColorChangingEffects_5 || layer == Layer.TypeChangingEffects_4;
class TestamentOfFaithToken extends Token {
TestamentOfFaithToken() {
public class Thaumatog extends CardImpl {
public Thaumatog(UUID ownerId) {
public Thaumatog(final Thaumatog card) {
public Thaumatog copy() {return new Thaumatog(this);
public class ThermalBlast extends CardImpl {
public ThermalBlast(UUID ownerId) {
public ThermalBlast(final ThermalBlast card) {
public ThermalBlast copy() {return new ThermalBlast(this);
public class ThinkTank extends CardImpl {
public ThinkTank(UUID ownerId) {
public ThinkTank(final ThinkTank card) {
public ThinkTank copy() {return new ThinkTank(this);
class ThinkTankLookLibraryEffect extends OneShotEffect {
public ThinkTankLookLibraryEffect() {
public ThinkTankLookLibraryEffect(final ThinkTankLookLibraryEffect effect) {
public ThinkTankLookLibraryEffect copy() {return new ThinkTankLookLibraryEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(card, Zone.LIBRARY, Zone.GRAVEYARD, source, game);return true;return false;
public class ThoughtDevourer extends CardImpl {
public ThoughtDevourer(UUID ownerId) {
public ThoughtDevourer(final ThoughtDevourer card) {
public ThoughtDevourer copy() {return new ThoughtDevourer(this);
public class ThoughtEater extends CardImpl {
public ThoughtEater(UUID ownerId) {
public ThoughtEater(final ThoughtEater card) {
public ThoughtEater copy() {return new ThoughtEater(this);
public class ThoughtNibbler extends CardImpl {
public ThoughtNibbler(UUID ownerId) {
public ThoughtNibbler(final ThoughtNibbler card) {
public ThoughtNibbler copy() {return new ThoughtNibbler(this);
public class TimberlandRuins extends CardImpl {
public TimberlandRuins(UUID ownerId) {
public TimberlandRuins(final TimberlandRuins card) {
public TimberlandRuins copy() {return new TimberlandRuins(this);
public class TirelessTribe extends CardImpl {
public TirelessTribe(UUID ownerId) {
public TirelessTribe(final TirelessTribe card) {
public TirelessTribe copy() {return new TirelessTribe(this);
public class Tombfire extends CardImpl {
public Tombfire(UUID ownerId) {
public Tombfire(final Tombfire card) {
public Tombfire copy() {return new Tombfire(this);
class TombfireEffect extends OneShotEffect {
public TombfireEffect() {
public TombfireEffect(final TombfireEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public TombfireEffect copy() {return new TombfireEffect(this);
public class TouchOfInvisibility extends CardImpl {
public TouchOfInvisibility(UUID ownerId) {
public TouchOfInvisibility(final TouchOfInvisibility card) {
public TouchOfInvisibility copy() {return new TouchOfInvisibility(this);return new UnifyingTheory(this);return new UnifyingTheoryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Upheaval extends CardImpl {
public Upheaval(UUID ownerId) {
public Upheaval(final Upheaval card) {
public Upheaval copy() {return new Upheaval(this);return new Vivify(this);
class AnimatedLand extends Token {
public AnimatedLand() {
public class VolcanicSpray extends CardImpl {
public VolcanicSpray(UUID ownerId) {
public VolcanicSpray(final VolcanicSpray card) {
public VolcanicSpray copy() {return new VolcanicSpray(this);
public class VolleyOfBoulders extends CardImpl {
public VolleyOfBoulders(UUID ownerId) {
public VolleyOfBoulders(final VolleyOfBoulders card) {
public VolleyOfBoulders copy() {return new VolleyOfBoulders(this);
public class WaywardAngel extends CardImpl {
public WaywardAngel(UUID ownerId) {
public WaywardAngel(final WaywardAngel card) {
public WaywardAngel copy() {return new WaywardAngel(this);
public class Werebear extends CardImpl {
public Werebear(UUID ownerId) {
public Werebear(final Werebear card) {
public Werebear copy() {return new Werebear(this);
public class Whipkeeper extends CardImpl {
public Whipkeeper(UUID ownerId) {
public Whipkeeper(final Whipkeeper card) {
public Whipkeeper copy() {return new Whipkeeper(this);
class WhipkeeperEffect extends OneShotEffect {
public WhipkeeperEffect() {
public WhipkeeperEffect(final WhipkeeperEffect effect) {
public WhipkeeperEffect copy() {return new WhipkeeperEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WhisperingShade extends CardImpl {
public WhisperingShade(UUID ownerId) {
public WhisperingShade(final WhisperingShade card) {
public WhisperingShade copy() {return new WhisperingShade(this);
public class WildMongrel extends CardImpl {
public WildMongrel(UUID ownerId) {
public WildMongrel(final WildMongrel card) {
public WildMongrel copy() {return new WildMongrel(this);
public class WoodlandDruid extends CardImpl {
public WoodlandDruid(UUID ownerId) {
public WoodlandDruid(final WoodlandDruid card) {
public WoodlandDruid copy() {return new WoodlandDruid(this);return new WordsOfWisdom(this);return new WordsOfWisdomEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class ZombieAssassin extends CardImpl {
public ZombieAssassin(UUID ownerId) {
public ZombieAssassin(final ZombieAssassin card) {
public ZombieAssassin copy() {return new ZombieAssassin(this);
public class ZombieCannibal extends CardImpl {
public ZombieCannibal(UUID ownerId) {
public ZombieCannibal(final ZombieCannibal card) {
public ZombieCannibal copy() {return new ZombieCannibal(this);
class ZombieCannibalEffect extends OneShotEffect {
public ZombieCannibalEffect() {
public ZombieCannibalEffect(final ZombieCannibalEffect effect) {
public ZombieCannibalEffect copy() {return new ZombieCannibalEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class Zoologist extends CardImpl {
public Zoologist(UUID ownerId) {
public Zoologist(final Zoologist card) {
public Zoologist copy() {return new Zoologist(this);
class ZoologistEffect extends OneShotEffect {
public ZoologistEffect() {
public ZoologistEffect(final ZoologistEffect effect) {
public ZoologistEffect copy() {return new ZoologistEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class AccursedCentaur extends CardImpl {
public AccursedCentaur(UUID ownerId) {
public AccursedCentaur(final AccursedCentaur card) {
public AccursedCentaur copy() {return new AccursedCentaur(this);
public class AggravatedAssault extends CardImpl {
public AggravatedAssault(UUID ownerId) {
public AggravatedAssault(final AggravatedAssault card) {
public AggravatedAssault copy() {return new AggravatedAssault(this);
class AdditionalCombatPhaseEffect extends OneShotEffect {
AdditionalCombatPhaseEffect() {
AdditionalCombatPhaseEffect(final AdditionalCombatPhaseEffect effect) {
public AdditionalCombatPhaseEffect copy() {return new AdditionalCombatPhaseEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class AirborneAid extends CardImpl {
public AirborneAid(UUID ownerId) {
public AirborneAid(final AirborneAid card) {
public AirborneAid copy() {return new AirborneAid(this);
public class Annex extends CardImpl {
public Annex(UUID ownerId) {
public Annex(final Annex card) {
public Annex copy() {return new Annex(this);
public class AnuridMurkdiver extends CardImpl {
public AnuridMurkdiver(UUID ownerId) {
public AnuridMurkdiver(final AnuridMurkdiver card) {
public AnuridMurkdiver copy() {return new AnuridMurkdiver(this);
public class AphettoAlchemist extends CardImpl {
public AphettoAlchemist(UUID ownerId) {
public AphettoAlchemist(final AphettoAlchemist card) {
public AphettoAlchemist copy() {return new AphettoAlchemist(this);return new AphettoGrifter(this);
public class AscendingAven extends CardImpl {
public AscendingAven(UUID ownerId) {
public AscendingAven(final AscendingAven card) {
public AscendingAven copy() {return new AscendingAven(this);
public class AstralSlide extends CardImpl {
public AstralSlide(UUID ownerId) {
public AstralSlide(final AstralSlide card) {
public AstralSlide copy() {return new AstralSlide(this);
class AstralSlideEffect extends OneShotEffect {
public AstralSlideEffect() {
public AstralSlideEffect(final AstralSlideEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AstralSlideEffect copy() {return new AstralSlideEffect(this);return new Aurification(this);
public class AddGoldCountersAbility extends TriggeredAbilityImpl {
public AddGoldCountersAbility() {
public AddGoldCountersAbility(final AddGoldCountersAbility ability) {
public AddGoldCountersAbility copy() {return new AddGoldCountersAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature deals damage to you, put a gold counter on it.";
public class RemoveAllGoldCountersEffect extends OneShotEffect {
public RemoveAllGoldCountersEffect() {
public RemoveAllGoldCountersEffect(final RemoveAllGoldCountersEffect effect) {
public RemoveAllGoldCountersEffect copy() {return new RemoveAllGoldCountersEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Avarax extends CardImpl {
public Avarax(UUID ownerId) {
public Avarax(final Avarax card) {
public Avarax copy() {return new Avarax(this);
public class AvenBrigadier extends CardImpl {
public AvenBrigadier(UUID ownerId) {
public AvenBrigadier(final AvenBrigadier card) {
public AvenBrigadier copy() {return new AvenBrigadier(this);
public class AvenFateshaper extends CardImpl {
public AvenFateshaper(UUID ownerId) {
public AvenFateshaper(final AvenFateshaper card) {
public AvenFateshaper copy() {return new AvenFateshaper(this);
public class AvenSoulgazer extends CardImpl {
public AvenSoulgazer(UUID ownerId) {
public AvenSoulgazer(final AvenSoulgazer card) {
public AvenSoulgazer copy() {return new AvenSoulgazer(this);
class AvenSoulgazerLookFaceDownEffect extends OneShotEffect {
public AvenSoulgazerLookFaceDownEffect() {
public AvenSoulgazerLookFaceDownEffect(final AvenSoulgazerLookFaceDownEffect effect) {
public AvenSoulgazerLookFaceDownEffect copy() {return new AvenSoulgazerLookFaceDownEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class BarkhideMauler extends CardImpl {
public BarkhideMauler(UUID ownerId) {
public BarkhideMauler(final BarkhideMauler card) {
public BarkhideMauler copy() {return new BarkhideMauler(this);
public class BarrenMoor extends CardImpl {
public BarrenMoor(UUID ownerId) {
public BarrenMoor(final BarrenMoor card) {
public BarrenMoor copy() {return new BarrenMoor(this);
public class Biorhythm extends CardImpl {
public Biorhythm(UUID ownerId) {
public Biorhythm(final Biorhythm card) {
public Biorhythm copy() {return new Biorhythm(this);
class BiorhythmEffect extends OneShotEffect {
public BiorhythmEffect() {
public BiorhythmEffect(final BiorhythmEffect effect) {
public BiorhythmEffect copy() {return new BiorhythmEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class BirchloreRangers extends CardImpl {
public BirchloreRangers(UUID ownerId) {
public BirchloreRangers(final BirchloreRangers card) {
public BirchloreRangers copy() {return new BirchloreRangers(this);
public class Blackmail extends CardImpl {
public Blackmail(UUID ownerId) {
public Blackmail(final Blackmail card) {
public Blackmail copy() {return new Blackmail(this);
public class BlatantThievery extends CardImpl {
public BlatantThievery(UUID ownerId) {
public BlatantThievery(final BlatantThievery card) {
public void adjustTargets(Ability ability, Game game) {
public BlatantThievery copy() {return new BlatantThievery(this);
class BlatantThieveryEffect extends OneShotEffect {
BlatantThieveryEffect() {
BlatantThieveryEffect(final BlatantThieveryEffect effect) {
public BlatantThieveryEffect copy() {return new BlatantThieveryEffect(this);
public boolean apply(Game game, Ability source) {return true;
class BlatantThieveryTarget extends TargetPermanent {
public BlatantThieveryTarget(int opponents) {
public BlatantThieveryTarget(final BlatantThieveryTarget target) {
public boolean canTarget(UUID controllerId, UUID objectId, Ability source, Game game) {return false;return false;return false;return super.canTarget(controllerId, objectId, source, game);
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;return possibleTargets;
public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {return false;return true;
public void addTarget(UUID objectId, int amount, Ability source, Game game, boolean skipEvent) {
public void remove(UUID id) {
public BlatantThieveryTarget copy() {return new BlatantThieveryTarget(this);
public class BlisteringFirecat extends CardImpl {
public BlisteringFirecat(UUID ownerId) {
public BlisteringFirecat(final BlisteringFirecat card) {
public BlisteringFirecat copy() {return new BlisteringFirecat(this);
public class BrightstoneRitual extends CardImpl {
public BrightstoneRitual(UUID ownerId) {
public BrightstoneRitual(final BrightstoneRitual card) {
public BrightstoneRitual copy() {return new BrightstoneRitual(this);
public class BroodhatchNantuko extends CardImpl {
public BroodhatchNantuko(UUID ownerId) {
public BroodhatchNantuko(final BroodhatchNantuko card) {
public BroodhatchNantuko copy() {return new BroodhatchNantuko(this);
class BroodhatchNantukoDealDamageEffect extends OneShotEffect {
public BroodhatchNantukoDealDamageEffect() {
public BroodhatchNantukoDealDamageEffect(final BroodhatchNantukoDealDamageEffect effect) {
public BroodhatchNantukoDealDamageEffect copy() {return new BroodhatchNantukoDealDamageEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new InsectToken(), amount).apply(game, source);return false;
public class CabalArchon extends CardImpl {
public CabalArchon(UUID ownerId) {
public CabalArchon(final CabalArchon card) {
public CabalArchon copy() {return new CabalArchon(this);
public class CabalExecutioner extends CardImpl {
public CabalExecutioner(UUID ownerId) {
public CabalExecutioner(final CabalExecutioner card) {
public CabalExecutioner copy() {return new CabalExecutioner(this);
class CabalExecutionerAbility extends TriggeredAbilityImpl {
public CabalExecutionerAbility() {
public CabalExecutionerAbility(final CabalExecutionerAbility ability) {
public CabalExecutionerAbility copy() {return new CabalExecutionerAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return EventType.DAMAGED_PLAYER.equals(event.getType());
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, that player sacrifices a creature.";
public class CabalSlaver extends CardImpl {
public CabalSlaver(UUID ownerId) {
public CabalSlaver(final CabalSlaver card) {
public CabalSlaver copy() {return new CabalSlaver(this);
public class CatapultMaster extends CardImpl {
public CatapultMaster(UUID ownerId) {
public CatapultMaster(final CatapultMaster card) {
public CatapultMaster copy() {return new CatapultMaster(this);
public class CatapultSquad extends CardImpl {
public CatapultSquad(UUID ownerId) {
public CatapultSquad(final CatapultSquad card) {
public CatapultSquad copy() {return new CatapultSquad(this);
public class CentaurGlade extends CardImpl {
public CentaurGlade(UUID ownerId) {
public CentaurGlade(final CentaurGlade card) {
public CentaurGlade copy() {return new CentaurGlade(this);
public class ChainOfVapor extends CardImpl {
public ChainOfVapor(UUID ownerId) {
public ChainOfVapor(final ChainOfVapor card) {
public ChainOfVapor copy() {return new ChainOfVapor(this);
class ChainOfVaporEffect extends OneShotEffect {
public ChainOfVaporEffect() {
public ChainOfVaporEffect(final ChainOfVaporEffect effect) {
public ChainOfVaporEffect copy() {return new ChainOfVaporEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public String getText(Mode mode) {return "Return target nonland permanent to its owner's hand. Then that permanent's controller may sacrifice a land. If the player does, he or she may copy this spell and may choose a new target for that copy";
public class ChargingSlateback extends CardImpl {
public ChargingSlateback(UUID ownerId) {
public ChargingSlateback(final ChargingSlateback card) {
public ChargingSlateback copy() {return new ChargingSlateback(this);
public class ChokingTethers extends CardImpl {
public ChokingTethers(UUID ownerId) {
public ChokingTethers(final ChokingTethers card) {
public ChokingTethers copy() {return new ChokingTethers(this);
public class Complicate extends CardImpl {
public Complicate(UUID ownerId) {
public Complicate(final Complicate card) {
public Complicate copy() {return new Complicate(this);return new ContestedCliffs(this);
public class ConvalescentCare extends CardImpl {
public ConvalescentCare(UUID ownerId) {
public ConvalescentCare(final ConvalescentCare card) {
public ConvalescentCare copy() {return new ConvalescentCare(this);
public boolean apply(Game game, Ability source) {return game.getPlayer(source.getControllerId()).getLife() <= 5;
public class CoverOfDarkness extends CardImpl {
public CoverOfDarkness(UUID ownerId) {
public CoverOfDarkness(final CoverOfDarkness card) {
public CoverOfDarkness copy() {return new CoverOfDarkness(this);
class FilterCoverOfDarkness extends FilterCreaturePermanent {
public FilterCoverOfDarkness() {
public FilterCoverOfDarkness(final FilterCoverOfDarkness filter) {
public FilterCoverOfDarkness copy() {return new FilterCoverOfDarkness(this);
public boolean match(Permanent permanent, UUID sourceId, UUID playerId, Game game) {return true;return false;
public class CrowdFavorites extends CardImpl {
public CrowdFavorites(UUID ownerId) {
public CrowdFavorites(final CrowdFavorites card) {
public CrowdFavorites copy() {return new CrowdFavorites(this);
public class CrudeRampart extends CardImpl {
public CrudeRampart(UUID ownerId) {
public CrudeRampart(final CrudeRampart card) {
public CrudeRampart copy() {return new CrudeRampart(this);
public class CruelRevival extends CardImpl {
public CruelRevival(UUID ownerId) {
public CruelRevival(final CruelRevival card) {
public CruelRevival copy() {return new CruelRevival(this);
class CruelRevivalEffect extends OneShotEffect {
public CruelRevivalEffect() {
public CruelRevivalEffect(final CruelRevivalEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CruelRevivalEffect copy() {return new CruelRevivalEffect(this);
public class DeathMatch extends CardImpl {
public DeathMatch(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public DeathMatch(final DeathMatch card) {
public DeathMatch copy() {return new DeathMatch(this);
class DeathMatchEffect extends OneShotEffect {
public DeathMatchEffect() {
public boolean apply(Game game, Ability source) {return true;return false;
public DeathMatchEffect(final DeathMatchEffect effect) {
public DeathMatchEffect copy() {return new DeathMatchEffect(this);
public class DeathPulse extends CardImpl {
public DeathPulse(UUID ownerId) {
public DeathPulse(final DeathPulse card) {
public DeathPulse copy() {return new DeathPulse(this);
public class DirgeOfDread extends CardImpl {
public DirgeOfDread(UUID ownerId) {
public DirgeOfDread(final DirgeOfDread card) {
public DirgeOfDread copy() {return new DirgeOfDread(this);
public class DiscipleOfMalice extends CardImpl {
public DiscipleOfMalice(UUID ownerId) {
public DiscipleOfMalice(final DiscipleOfMalice card) {
public DiscipleOfMalice copy() {return new DiscipleOfMalice(this);
public class DisruptivePitmage extends CardImpl {
public DisruptivePitmage(UUID ownerId) {
public DisruptivePitmage(final DisruptivePitmage card) {
public DisruptivePitmage copy() {return new DisruptivePitmage(this);
public class DiveBomber extends CardImpl {
public DiveBomber(UUID ownerId) {
public DiveBomber(final DiveBomber card) {
public DiveBomber copy() {return new DiveBomber(this);
public class DoubtlessOne extends CardImpl {
public DoubtlessOne(UUID ownerId) {
public DoubtlessOne(final DoubtlessOne card) {
public DoubtlessOne copy() {return new DoubtlessOne(this);
public class DreamChisel extends CardImpl {
public DreamChisel(UUID ownerId) {
public DreamChisel(final DreamChisel card) {
public DreamChisel copy() {return new DreamChisel(this);
public class DwarvenBlastminer extends CardImpl {
public DwarvenBlastminer(UUID ownerId) {
public DwarvenBlastminer(final DwarvenBlastminer card) {
public DwarvenBlastminer copy() {return new DwarvenBlastminer(this);
public class EbonbladeReaper extends CardImpl {
public EbonbladeReaper(UUID ownerId) {
public EbonbladeReaper(final EbonbladeReaper card) {
public Card copy() {return new EbonbladeReaper(this);
class EbonbladeReaperEffect extends OneShotEffect {
public EbonbladeReaperEffect() {
public EbonbladeReaperEffect(final EbonbladeReaperEffect effect) {
public Effect copy() {return new EbonbladeReaperEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ElvenRiders extends CardImpl {
public ElvenRiders(UUID ownerId) {
public ElvenRiders(final ElvenRiders card) {
public ElvenRiders copy() {return new ElvenRiders(this);
public class ElvishPathcutter extends CardImpl {
public ElvishPathcutter(UUID ownerId) {
public ElvishPathcutter(final ElvishPathcutter card) {
public ElvishPathcutter copy() {return new ElvishPathcutter(this);
public class ElvishPioneer extends CardImpl {
public ElvishPioneer(UUID ownerId) {
public ElvishPioneer(final ElvishPioneer card) {
public ElvishPioneer copy() {return new ElvishPioneer(this);
class PutLandOnBattlefieldEffect extends OneShotEffect {
public PutLandOnBattlefieldEffect() {
public PutLandOnBattlefieldEffect(final PutLandOnBattlefieldEffect effect) {
public PutLandOnBattlefieldEffect copy() {return new PutLandOnBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class ElvishScrapper extends CardImpl {
public ElvishScrapper(UUID ownerId) {
public ElvishScrapper(final ElvishScrapper card) {
public ElvishScrapper copy() {return new ElvishScrapper(this);
public class ElvishVanguard extends CardImpl {
public ElvishVanguard(UUID ownerId) {
public ElvishVanguard(final ElvishVanguard card) {
public ElvishVanguard copy() {return new ElvishVanguard(this);
public class EmbermageGoblin extends CardImpl {
public EmbermageGoblin(UUID ownerId) {
public EmbermageGoblin(final EmbermageGoblin card) {
public EmbermageGoblin copy() {return new EmbermageGoblin(this);
public class EnchantresssPresence extends CardImpl {
public EnchantresssPresence(UUID ownerId) {
public EnchantresssPresence(final EnchantresssPresence card) {
public EnchantresssPresence copy() {return new EnchantresssPresence(this);
public class EssenceFracture extends CardImpl {
public EssenceFracture(UUID ownerId) {
public EssenceFracture(final EssenceFracture card) {
public EssenceFracture copy() {return new EssenceFracture(this);
public class FallenCleric extends CardImpl {
public FallenCleric(UUID ownerId) {
public FallenCleric(final FallenCleric card) {
public FallenCleric copy() {return new FallenCleric(this);
public class FalseCure extends CardImpl {
public FalseCure(UUID ownerId) {
public FalseCure(final FalseCure card) {
public FalseCure copy() {return new FalseCure(this);
class FalseCureTriggeredAbility extends DelayedTriggeredAbility {
FalseCureTriggeredAbility() {
FalseCureTriggeredAbility(final FalseCureTriggeredAbility ability) {
public FalseCureTriggeredAbility copy() {return new FalseCureTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.GAINED_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "Until end of turn, whenever a player gains life, that player loses 2 life for each 1 life he or she gained.";
public class FeedingFrenzy extends CardImpl {
public FeedingFrenzy(UUID ownerId) {
public FeedingFrenzy(final FeedingFrenzy card) {
public FeedingFrenzy copy() {return new FeedingFrenzy(this);
public class FeverCharm extends CardImpl {
public FeverCharm(UUID ownerId) {
public FeverCharm(final FeverCharm card) {
public FeverCharm copy() {return new FeverCharm(this);
public class FlamestickCourier extends CardImpl {
public FlamestickCourier(UUID ownerId) {
public FlamestickCourier(final FlamestickCourier card) {
public FlamestickCourier copy() {return new FlamestickCourier(this);
public class FloodedStrand extends CardImpl {
public FloodedStrand(UUID ownerId) {
public FloodedStrand(final FloodedStrand card) {
public FloodedStrand copy() {return new FloodedStrand(this);
public class FoothillGuide extends CardImpl {
public FoothillGuide(UUID ownerId) {
public FoothillGuide(final FoothillGuide card) {
public FoothillGuide copy() {return new FoothillGuide(this);
public class ForgottenCave extends CardImpl {
public ForgottenCave(UUID ownerId) {
public ForgottenCave(final ForgottenCave card) {
public ForgottenCave copy() {return new ForgottenCave(this);
public class FrightshroudCourier extends CardImpl {
public FrightshroudCourier(UUID ownerId) {
public FrightshroudCourier(final FrightshroudCourier card) {
public FrightshroudCourier copy() {return new FrightshroudCourier(this);
public class FutureSight extends CardImpl {
public FutureSight(UUID ownerId) {
public FutureSight(final FutureSight card) {
public FutureSight copy() {return new FutureSight(this);
public class GangrenousGoliath extends CardImpl {
public GangrenousGoliath(UUID ownerId) {
public GangrenousGoliath(final GangrenousGoliath card) {
public GangrenousGoliath copy() {return new GangrenousGoliath(this);
public class GhosthelmCourier extends CardImpl {
public GhosthelmCourier(UUID ownerId) {
public GhosthelmCourier(final GhosthelmCourier card) {
public GhosthelmCourier copy() {return new GhosthelmCourier(this);
public class Gigapede extends CardImpl {
public Gigapede(UUID ownerId) {
public Gigapede(final Gigapede card) {
public Gigapede copy() {return new Gigapede(this);
class GigapedeTriggerdAbility extends BeginningOfUpkeepTriggeredAbility{
public GigapedeTriggerdAbility(){
public GigapedeTriggerdAbility(GigapedeTriggerdAbility ability) {
public BeginningOfUpkeepTriggeredAbility copy() {return new GigapedeTriggerdAbility(this);
public boolean checkInterveningIfClause(Game game) {return super.checkInterveningIfClause(game);return false;
public String getRule() {return "At the beginning of your upkeep, if {source} is in your graveyard, you may discard a card. If you do, return {source} to your hand";
public class GluttonousZombie extends CardImpl {
public GluttonousZombie(UUID ownerId) {
public GluttonousZombie(final GluttonousZombie card) {
public GluttonousZombie copy() {return new GluttonousZombie(this);
public class GoblinBurrows extends CardImpl {
public GoblinBurrows(UUID ownerId) {
public GoblinBurrows(final GoblinBurrows card) {
public GoblinBurrows copy() {return new GoblinBurrows(this);
public class GoblinPiledriver extends CardImpl {
public GoblinPiledriver(UUID ownerId) {
public GoblinPiledriver(final GoblinPiledriver card) {
public GoblinPiledriver copy() {return new GoblinPiledriver(this);
public class GoblinPyromancer extends CardImpl {
public GoblinPyromancer(UUID ownerId) {
public GoblinPyromancer(final GoblinPyromancer card) {
public GoblinPyromancer copy() {return new GoblinPyromancer(this);
public class GoblinSharpshooter extends CardImpl {
public GoblinSharpshooter(UUID ownerId) {
public GoblinSharpshooter(final GoblinSharpshooter card) {
public GoblinSharpshooter copy() {return new GoblinSharpshooter(this);
public class GrandColiseum extends CardImpl {
public GrandColiseum(UUID ownerId) {
public GrandColiseum(final GrandColiseum card) {
public GrandColiseum copy() {return new GrandColiseum(this);
public class GrasslandCrusader extends CardImpl {
public GrasslandCrusader(UUID ownerId) {
public GrasslandCrusader(final GrasslandCrusader card) {
public GrasslandCrusader copy() {return new GrasslandCrusader(this);
public class GratuitousViolence extends CardImpl {
public GratuitousViolence(UUID ownerId) {
public GratuitousViolence(final GratuitousViolence card) {
public GratuitousViolence copy() {return new GratuitousViolence(this);
class GratuitousViolenceReplacementEffect extends ReplacementEffectImpl {
GratuitousViolenceReplacementEffect() {
GratuitousViolenceReplacementEffect(final GratuitousViolenceReplacementEffect effect) {
public GratuitousViolenceReplacementEffect copy() {return new GratuitousViolenceReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return permanent != null && permanent.getControllerId().equals(source.getControllerId());
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class GravelSlinger extends CardImpl {
public GravelSlinger(UUID ownerId) {
public GravelSlinger(final GravelSlinger card) {
public GravelSlinger copy() {return new GravelSlinger(this);
public class GrinningDemon extends CardImpl {
public GrinningDemon(UUID ownerId) {
public GrinningDemon(final GrinningDemon card) {
public GrinningDemon copy() {return new GrinningDemon(this);
public class GustcloakRunner extends CardImpl {
public GustcloakRunner(UUID ownerId) {
public GustcloakRunner(final GustcloakRunner card) {
public GustcloakRunner copy() {return new GustcloakRunner(this);
public class GustcloakSavior extends CardImpl {
public GustcloakSavior(UUID ownerId) {
public GustcloakSavior(final GustcloakSavior card) {
public GustcloakSavior copy() {return new GustcloakSavior(this);
public class GustcloakSentinel extends CardImpl {
public GustcloakSentinel(UUID ownerId) {
public GustcloakSentinel(final GustcloakSentinel card) {
public GustcloakSentinel copy() {return new GustcloakSentinel(this);
public class GustcloakSkirmisher extends CardImpl {
public GustcloakSkirmisher(UUID ownerId) {
public GustcloakSkirmisher(final GustcloakSkirmisher card) {
public GustcloakSkirmisher copy() {return new GustcloakSkirmisher(this);
public class HarshMercy extends CardImpl {
public HarshMercy(UUID ownerId) {
public HarshMercy(final HarshMercy card) {
public HarshMercy copy() {return new HarshMercy(this);
class HarshMercyEffect extends OneShotEffect {
public HarshMercyEffect() {
public HarshMercyEffect(final HarshMercyEffect effect) {
public HarshMercyEffect copy() {return new HarshMercyEffect(this);
public boolean apply(Game game, Ability source) {return new DestroyAllEffect(filter, true).apply(game, source);return false;
public class HauntedCadaver extends CardImpl {
public HauntedCadaver(UUID ownerId) {
public HauntedCadaver(final HauntedCadaver card) {
public HauntedCadaver copy() {return new HauntedCadaver(this);
public class Headhunter extends CardImpl {
public Headhunter(UUID ownerId) {
public Headhunter(final Headhunter card) {
public Headhunter copy() {return new Headhunter(this);
public class HeedlessOne extends CardImpl {
public HeedlessOne(UUID ownerId) {
public HeedlessOne(final HeedlessOne card) {
public HeedlessOne copy() {return new HeedlessOne(this);return new Hystrodon(this);
public class Imagecrafter extends CardImpl {
public Imagecrafter(UUID ownerId) {
public Imagecrafter(final Imagecrafter card) {
public Imagecrafter copy() {return new Imagecrafter(this);
public class ImprovisedArmor extends CardImpl {
public ImprovisedArmor(UUID ownerId) {
public ImprovisedArmor(final ImprovisedArmor card) {
public ImprovisedArmor copy() {return new ImprovisedArmor(this);return new InformationDealer(this);
public class Inspirit extends CardImpl {
public Inspirit(UUID ownerId) {
public Inspirit(final Inspirit card) {
public Inspirit copy() {return new Inspirit(this);
public class JarethLeonineTitan extends CardImpl {
public JarethLeonineTitan(UUID ownerId) {
public JarethLeonineTitan(final JarethLeonineTitan card) {
public JarethLeonineTitan copy() {return new JarethLeonineTitan(this);
public class KamahlFistOfKrosa extends CardImpl {
public KamahlFistOfKrosa(UUID ownerId) {
public KamahlFistOfKrosa(final KamahlFistOfKrosa card) {
public KamahlFistOfKrosa copy() {return new KamahlFistOfKrosa(this);
class KamahlFistOfKrosaLandToken extends Token {
public KamahlFistOfKrosaLandToken() {
public class KrosanColossus extends CardImpl {
public KrosanColossus(UUID ownerId) {
public KrosanColossus(final KrosanColossus card) {
public KrosanColossus copy() {return new KrosanColossus(this);
public class KrosanGroundshaker extends CardImpl {
public KrosanGroundshaker(UUID ownerId) {
public KrosanGroundshaker(final KrosanGroundshaker card) {
public KrosanGroundshaker copy() {return new KrosanGroundshaker(this);
public class LeeryFogbeast extends CardImpl {
public LeeryFogbeast(UUID ownerId) {
public LeeryFogbeast(final LeeryFogbeast card) {
public LeeryFogbeast copy() {return new LeeryFogbeast(this);return new LightningRift(this);
public class LonelySandbar extends CardImpl {
public LonelySandbar(UUID ownerId) {
public LonelySandbar(final LonelySandbar card) {
public LonelySandbar copy() {return new LonelySandbar(this);
public class MagesGuile extends CardImpl {
public MagesGuile(UUID ownerId) {
public MagesGuile(final MagesGuile card) {
public MagesGuile copy() {return new MagesGuile(this);
public class ManaEchoes extends CardImpl {
public ManaEchoes(UUID ownerId) {
public ManaEchoes(final ManaEchoes card) {
public ManaEchoes copy() {return new ManaEchoes(this);
class ManaEchoesEffect extends OneShotEffect {
public ManaEchoesEffect() {
public ManaEchoesEffect(final ManaEchoesEffect effect) {
public ManaEchoesEffect copy() {return new ManaEchoesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MiseryCharm extends CardImpl {
public MiseryCharm(UUID ownerId) {
public MiseryCharm(final MiseryCharm card) {
public MiseryCharm copy() {return new MiseryCharm(this);return new MistformMutant(this);
public class MythicProportions extends CardImpl {
public MythicProportions(UUID ownerId) {
public MythicProportions(final MythicProportions card) {
public MythicProportions copy() {return new MythicProportions(this);
public class NamelessOne extends CardImpl {
public NamelessOne(UUID ownerId) {
public NamelessOne(final NamelessOne card) {
public NamelessOne copy() {return new NamelessOne(this);
public class NosyGoblin extends CardImpl {
public NosyGoblin(UUID ownerId) {
public NosyGoblin(final NosyGoblin card) {
public NosyGoblin copy() {return new NosyGoblin(this);
public class Oblation extends CardImpl {
public Oblation(UUID ownerId) {
public Oblation(final Oblation card) {
public Oblation copy() {return new Oblation(this);
class OblationEffect extends OneShotEffect {
OblationEffect() {
OblationEffect(final OblationEffect effect) {
public OblationEffect copy() {return new OblationEffect(this);
public boolean apply(Game game, Ability source) {
public class OversoldCemetery extends CardImpl {
public OversoldCemetery(UUID ownerId) {this.addAbility(new ConditionalTriggeredAbility(ability, condition, "At the beginning of your upkeep, if you have four or more creature cards in your graveyard, you may return target creature card from your graveyard to your hand."));
public OversoldCemetery(final OversoldCemetery card) {
public OversoldCemetery copy() {return new OversoldCemetery(this);
public class PatriarchsBidding extends CardImpl {
public PatriarchsBidding(UUID ownerId) {
public PatriarchsBidding(final PatriarchsBidding card) {
public PatriarchsBidding copy() {return new PatriarchsBidding(this);
class PatriarchsBiddingEffect extends OneShotEffect {
public PatriarchsBiddingEffect() {this.staticText = "each player chooses a creature type. Each player returns all creature cards of a type chosen this way from his or her graveyard to the battlefield";
public PatriarchsBiddingEffect(final PatriarchsBiddingEffect effect) {
public PatriarchsBiddingEffect copy() {return new PatriarchsBiddingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PearlspearCourier extends CardImpl {
public PearlspearCourier(UUID ownerId) {
public PearlspearCourier(final PearlspearCourier card) {
public PearlspearCourier copy() {return new PearlspearCourier(this);
public class PinpointAvalanche extends CardImpl {
public PinpointAvalanche(UUID ownerId) {
public PinpointAvalanche(final PinpointAvalanche card) {
public PinpointAvalanche copy() {return new PinpointAvalanche(this);
public class PollutedDelta extends CardImpl {
public PollutedDelta(UUID ownerId) {
public PollutedDelta(final PollutedDelta card) {
public PollutedDelta copy() {return new PollutedDelta(this);
public class PrimalBoost extends CardImpl {
public PrimalBoost(UUID ownerId) {
public PrimalBoost(final PrimalBoost card) {
public PrimalBoost copy() {return new PrimalBoost(this);
public class RavenousBaloth extends CardImpl {
public RavenousBaloth(UUID ownerId) {
public RavenousBaloth(final RavenousBaloth card) {
public RavenousBaloth copy() {return new RavenousBaloth(this);
public class ReadTheRunes extends CardImpl {
public ReadTheRunes(UUID ownerId) {
public ReadTheRunes(final ReadTheRunes card) {
public ReadTheRunes copy() {return new ReadTheRunes(this);
class ReadTheRunesEffect extends OneShotEffect {
ReadTheRunesEffect() {
ReadTheRunesEffect(final ReadTheRunesEffect effect) {
public ReadTheRunesEffect copy() {return new ReadTheRunesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RecklessOne extends CardImpl {
public RecklessOne(UUID ownerId) {
public RecklessOne(final RecklessOne card) {
public RecklessOne copy() {return new RecklessOne(this);
public class Reminisce extends CardImpl {
public Reminisce(UUID ownerId) {
public Reminisce(final Reminisce card) {
public Reminisce copy() {return new Reminisce(this);
class ReminisceEffect extends OneShotEffect {
ReminisceEffect() {
ReminisceEffect(final ReminisceEffect effect) {
public ReminisceEffect copy() {return new ReminisceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RenewedFaith extends CardImpl {
public RenewedFaith(UUID ownerId) {
public RenewedFaith(final RenewedFaith card) {
public RenewedFaith copy() {return new RenewedFaith(this);
public class RiptideBiologist extends CardImpl {
public RiptideBiologist(UUID ownerId) {
public RiptideBiologist(final RiptideBiologist card) {
public RiptideBiologist copy() {return new RiptideBiologist(this);
public class RiptideChronologist extends CardImpl {
public RiptideChronologist(UUID ownerId) {
public RiptideChronologist(final RiptideChronologist card) {
public RiptideChronologist copy() {return new RiptideChronologist(this);
class RiptideChronologistEffect extends OneShotEffect {
public RiptideChronologistEffect() {
public RiptideChronologistEffect(final RiptideChronologistEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public RiptideChronologistEffect copy() {return new RiptideChronologistEffect(this);
public class RiptideLaboratory extends CardImpl {
public RiptideLaboratory(UUID ownerId) {
public RiptideLaboratory(final RiptideLaboratory card) {
public RiptideLaboratory copy() {return new RiptideLaboratory(this);return new RiptideShapeshifter(this);return new RiptideShapeshifterEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class RotlungReanimator extends CardImpl {
public RotlungReanimator(UUID ownerId) {
public RotlungReanimator(final RotlungReanimator card) {
public RotlungReanimator copy() {return new RotlungReanimator(this);
public class SearingFlesh extends CardImpl {
public SearingFlesh(UUID ownerId) {
public SearingFlesh(final SearingFlesh card) {
public SearingFlesh copy() {return new SearingFlesh(this);
public class SeasClaim extends CardImpl {
public SeasClaim(UUID ownerId) {
public SeasClaim(final SeasClaim card) {
public SeasClaim copy() {return new SeasClaim(this);
public class SeasideHaven extends CardImpl {
public SeasideHaven(UUID ownerId) {
public SeasideHaven(final SeasideHaven card) {
public SeasideHaven copy() {return new SeasideHaven(this);
public class SecludedSteppe extends CardImpl {
public SecludedSteppe(UUID ownerId) {
public SecludedSteppe(final SecludedSteppe card) {
public SecludedSteppe copy() {return new SecludedSteppe(this);
public class SharedTriumph extends CardImpl {
public SharedTriumph(UUID ownerId) {
public SharedTriumph(final SharedTriumph card) {
public SharedTriumph copy() {return new SharedTriumph(this);
public class SilklashSpider extends CardImpl {
public SilklashSpider(UUID ownerId) {
public SilklashSpider(final SilklashSpider card) {
public SilklashSpider copy() {return new SilklashSpider(this);
public class SilvosRogueElemental extends CardImpl {
public SilvosRogueElemental(UUID ownerId) {
public SilvosRogueElemental(final SilvosRogueElemental card) {
public SilvosRogueElemental copy() {return new SilvosRogueElemental(this);
public class SkirkFireMarshal extends CardImpl {
public SkirkFireMarshal(UUID ownerId) {
public SkirkFireMarshal(final SkirkFireMarshal card) {
public SkirkFireMarshal copy() {return new SkirkFireMarshal(this);
public class SkirkProspector extends CardImpl {
public SkirkProspector(UUID ownerId) {
public SkirkProspector(final SkirkProspector card) {
public SkirkProspector copy() {return new SkirkProspector(this);
public class SlateOfAncestry extends CardImpl {
public SlateOfAncestry(UUID ownerId) {
public SlateOfAncestry(final SlateOfAncestry card) {
public SlateOfAncestry copy() {return new SlateOfAncestry(this);
public class SliceAndDice extends CardImpl {
public SliceAndDice(UUID ownerId) {
public SliceAndDice(final SliceAndDice card) {
public SliceAndDice copy() {return new SliceAndDice(this);
public class SlipstreamEel extends CardImpl {
public SlipstreamEel(UUID ownerId) {
public SlipstreamEel(final SlipstreamEel card) {
public SlipstreamEel copy() {return new SlipstreamEel(this);return new SnarlingUndorak(this);
public class SolarBlast extends CardImpl {
public SolarBlast(UUID ownerId) {
public SolarBlast(final SolarBlast card) {
public SolarBlast copy() {return new SolarBlast(this);
public class SoullessOne extends CardImpl {
public SoullessOne(UUID ownerId) {
public SoullessOne(final SoullessOne card) {
public SoullessOne copy() {return new SoullessOne(this);
class SoullessOneDynamicCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count;
public DynamicValue copy() {return new SoullessOneDynamicCount();
public String getMessage() {return "Zombies on the battlefield plus the number of Zombie cards in all graveyards";
public String toString() {return "1";
public class Sparksmith extends CardImpl {
public Sparksmith(UUID ownerId) {
public Sparksmith(final Sparksmith card) {
public Sparksmith copy() {return new Sparksmith(this);
public class SpinedBasher extends CardImpl {
public SpinedBasher(UUID ownerId) {
public SpinedBasher(final SpinedBasher card) {
public SpinedBasher copy() {return new SpinedBasher(this);
public class SpittingGourna extends CardImpl {
public SpittingGourna(UUID ownerId) {
public SpittingGourna(final SpittingGourna card) {
public SpittingGourna copy() {return new SpittingGourna(this);
public class SpurredWolverine extends CardImpl {
public SpurredWolverine(UUID ownerId) {
public SpurredWolverine(final SpurredWolverine card) {
public SpurredWolverine copy() {return new SpurredWolverine(this);
public class StagBeetle extends CardImpl {
public StagBeetle(UUID ownerId) {
public StagBeetle(final StagBeetle card) {
public StagBeetle copy() {return new StagBeetle(this);
public class Standardize extends CardImpl {
public Standardize(UUID ownerId) {
public Standardize(final Standardize card) {
public Standardize copy() {return new Standardize(this);
class StandardizeEffect extends OneShotEffect {
public StandardizeEffect() {
public StandardizeEffect(final StandardizeEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public Effect copy() {return new StandardizeEffect(this);
public class StarlitSanctum extends CardImpl {
public StarlitSanctum(UUID ownerId) {
public StarlitSanctum(final StarlitSanctum card) {
public StarlitSanctum copy() {return new StarlitSanctum(this);
class StarlitSanctumWhiteEffect extends OneShotEffect {
public StarlitSanctumWhiteEffect() {
public StarlitSanctumWhiteEffect(final StarlitSanctumWhiteEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public StarlitSanctumWhiteEffect copy() {return new StarlitSanctumWhiteEffect(this);
class StarlitSanctumBlackEffect extends OneShotEffect {
public StarlitSanctumBlackEffect() {
public StarlitSanctumBlackEffect(final StarlitSanctumBlackEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public StarlitSanctumBlackEffect copy() {return new StarlitSanctumBlackEffect(this);
public class Starstorm extends CardImpl {
public Starstorm(UUID ownerId) {
public Starstorm(final Starstorm card) {
public Starstorm copy() {return new Starstorm(this);
public class SupremeInquisitor extends CardImpl {
public SupremeInquisitor(UUID ownerId) {
public SupremeInquisitor(final SupremeInquisitor card) {
public SupremeInquisitor copy() {return new SupremeInquisitor(this);
class SupremeInquisitorEffect extends OneShotEffect {
public SupremeInquisitorEffect() {
public SupremeInquisitorEffect(final SupremeInquisitorEffect effect) {
public SupremeInquisitorEffect copy() {return new SupremeInquisitorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Swat extends CardImpl {
public Swat(UUID ownerId) {
public Swat(final Swat card) {
public Swat copy() {return new Swat(this);
public class SymbioticBeast extends CardImpl {
public SymbioticBeast(UUID ownerId) {
public SymbioticBeast(final SymbioticBeast card) {
public SymbioticBeast copy() {return new SymbioticBeast(this);
public class SymbioticElf extends CardImpl {
public SymbioticElf(UUID ownerId) {
public SymbioticElf(final SymbioticElf card) {
public SymbioticElf copy() {return new SymbioticElf(this);
public class SymbioticWurm extends CardImpl {
public SymbioticWurm(UUID ownerId) {
public SymbioticWurm(final SymbioticWurm card) {
public SymbioticWurm copy() {return new SymbioticWurm(this);
public class SyphonMind extends CardImpl {
public SyphonMind(UUID ownerId) {
public SyphonMind(final SyphonMind card) {
public SyphonMind copy() {return new SyphonMind(this);
class SyphonMindEffect extends OneShotEffect {
public SyphonMindEffect() {
public SyphonMindEffect(final SyphonMindEffect effect) {
public SyphonMindEffect copy() {return new SyphonMindEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class TauntingElf extends CardImpl {
public TauntingElf(UUID ownerId) {
public TauntingElf(final TauntingElf card) {
public TauntingElf copy() {return new TauntingElf(this);
public class ThunderOfHooves extends CardImpl {
public ThunderOfHooves(UUID ownerId) {
public ThunderOfHooves(final ThunderOfHooves card) {
public ThunderOfHooves copy() {return new ThunderOfHooves(this);
public class ToweringBaloth extends CardImpl {
public ToweringBaloth(UUID ownerId) {
public ToweringBaloth(final ToweringBaloth card) {
public ToweringBaloth copy() {return new ToweringBaloth(this);
public class TranquilThicket extends CardImpl {
public TranquilThicket(UUID ownerId) {
public TranquilThicket(final TranquilThicket card) {
public TranquilThicket copy() {return new TranquilThicket(this);
public class TreespringLorian extends CardImpl {
public TreespringLorian(UUID ownerId) {
public TreespringLorian(final TreespringLorian card) {
public TreespringLorian copy() {return new TreespringLorian(this);
public class TrickeryCharm extends CardImpl {
public TrickeryCharm(UUID ownerId) {
public TrickeryCharm(final TrickeryCharm card) {
public TrickeryCharm copy() {return new TrickeryCharm(this);
public class TrueBeliever extends CardImpl {
public TrueBeliever(UUID ownerId) {
public TrueBeliever(final TrueBeliever card) {
public TrueBeliever copy() {return new TrueBeliever(this);
public class UndeadGladiator extends CardImpl {
public UndeadGladiator(UUID ownerId) {
public UndeadGladiator(final UndeadGladiator card) {
public UndeadGladiator copy() {return new UndeadGladiator(this);
public class UnholyGrotto extends CardImpl {
public UnholyGrotto(UUID ownerId) {
public UnholyGrotto(final UnholyGrotto card) {
public UnholyGrotto copy() {return new UnholyGrotto(this);
public class VisaraTheDreadful extends CardImpl {
public VisaraTheDreadful(UUID ownerId) {
public VisaraTheDreadful(final VisaraTheDreadful card) {
public VisaraTheDreadful copy() {return new VisaraTheDreadful(this);
public class VitalityCharm extends CardImpl {
public VitalityCharm(UUID ownerId) {
public VitalityCharm(final VitalityCharm card) {
public VitalityCharm copy() {return new VitalityCharm(this);
public class VoiceOfTheWoods extends CardImpl {
public VoiceOfTheWoods(UUID ownerId) {
public VoiceOfTheWoods(final VoiceOfTheWoods card) {
public VoiceOfTheWoods copy() {return new VoiceOfTheWoods(this);
class VoiceOfTheWoodsElementalToken extends Token {
VoiceOfTheWoodsElementalToken() {
public class WallOfMulch extends CardImpl {
public WallOfMulch(UUID ownerId) {
public WallOfMulch(final WallOfMulch card) {
public WallOfMulch copy() {return new WallOfMulch(this);
public void adjustTargets(Ability ability, Game game) {return new WaveOfIndifference(this);
public class WeatheredWayfarer extends CardImpl {
public WeatheredWayfarer(UUID ownerId) {
public WeatheredWayfarer(final WeatheredWayfarer card) {
public WeatheredWayfarer copy() {return new WeatheredWayfarer(this);
public class WeirdHarvest extends CardImpl {
public WeirdHarvest(UUID ownerId) {
public WeirdHarvest(final WeirdHarvest card) {
public WeirdHarvest copy() {return new WeirdHarvest(this);
class WeirdHarvestEffect extends OneShotEffect {
public WeirdHarvestEffect() {
public WeirdHarvestEffect(final WeirdHarvestEffect effect) {
public WeirdHarvestEffect copy() {return new WeirdHarvestEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private void chooseAndSearchLibrary(List<Player> usingPlayers, Player player, int xValue, Ability source, MageObject sourceObject, Game game) {
public class Wellwisher extends CardImpl {
public Wellwisher(UUID ownerId) {
public Wellwisher(final Wellwisher card) {
public Wellwisher copy() {return new Wellwisher(this);
public class WheelAndDeal extends CardImpl {
public WheelAndDeal(UUID ownerId) {
public WheelAndDeal(final WheelAndDeal card) {
public WheelAndDeal copy() {return new WheelAndDeal(this);
public class Whipcorder extends CardImpl {
public Whipcorder(UUID ownerId) {
public Whipcorder(final Whipcorder card) {
public Whipcorder copy() {return new Whipcorder(this);
public class WindsweptHeath extends CardImpl {
public WindsweptHeath(UUID ownerId) {
public WindsweptHeath(final WindsweptHeath card) {
public WindsweptHeath copy() {return new WindsweptHeath(this);
public class WirewoodElf extends CardImpl {
public WirewoodElf(UUID ownerId) {
public WirewoodElf(final WirewoodElf card) {
public WirewoodElf copy() {return new WirewoodElf(this);
public class WirewoodHerald extends CardImpl {
public WirewoodHerald(UUID ownerId) {
public WirewoodHerald(final WirewoodHerald card) {
public WirewoodHerald copy() {return new WirewoodHerald(this);
public class WirewoodLodge extends CardImpl {
public WirewoodLodge(UUID ownerId) {
public WirewoodLodge(final WirewoodLodge card) {
public WirewoodLodge copy() {return new WirewoodLodge(this);
public class WirewoodSavage extends CardImpl {
public WirewoodSavage(UUID ownerId) {
public WirewoodSavage(final WirewoodSavage card) {
public WirewoodSavage copy() {return new WirewoodSavage(this);
public class WoodedFoothills extends CardImpl {
public WoodedFoothills(UUID ownerId) {
public WoodedFoothills(final WoodedFoothills card) {
public WoodedFoothills copy() {return new WoodedFoothills(this);
public class WordsOfWar extends CardImpl {
public WordsOfWar(UUID ownerId) {
public WordsOfWar(final WordsOfWar card) {
public WordsOfWar copy() {return new WordsOfWar(this);
class WordsOfWarEffect extends ReplacementEffectImpl {
WordsOfWarEffect() {
WordsOfWarEffect(final WordsOfWarEffect effect) {
public WordsOfWarEffect copy() {return new WordsOfWarEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return source.getControllerId().equals(event.getPlayerId());
public class WordsOfWind extends CardImpl {
public WordsOfWind(UUID ownerId) {
public WordsOfWind(final WordsOfWind card) {
public WordsOfWind copy() {return new WordsOfWind(this);
class WordsOfWindEffect extends ReplacementEffectImpl {
public WordsOfWindEffect() {staticText = "The next time you would draw a card this turn, each player returns a permanent he or she controls to its owner's hand instead";
public WordsOfWindEffect(final WordsOfWindEffect effect) {
public WordsOfWindEffect copy() {return new WordsOfWindEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {game.informPlayers("Each player returns a permanent he or she controls to its owner's hand instead");return false;return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return source.getControllerId().equals(event.getPlayerId());
public class WretchedAnurid extends CardImpl {
public WretchedAnurid(UUID ownerId) {
public WretchedAnurid(final WretchedAnurid card) {
public WretchedAnurid copy() {return new WretchedAnurid(this);
public class SickeningDreams extends CardImpl {
public SickeningDreams(UUID ownerId) {
public SickeningDreams(final SickeningDreams card) {
public SickeningDreams copy() {return new SickeningDreams(this);
class SickeningDreamsAdditionalCost extends VariableCostImpl {
SickeningDreamsAdditionalCost() {
SickeningDreamsAdditionalCost(final SickeningDreamsAdditionalCost cost) {
public SickeningDreamsAdditionalCost copy() {return new SickeningDreamsAdditionalCost(this);
public int getMaxValue(Ability source, Game game) {return controller.getHand().size();return 0;
public Cost getFixedCostsFromAnnouncedValue(int xValue) {return new DiscardTargetCost(target);
public class DarigaazTheIgniter extends CardImpl {
public DarigaazTheIgniter(UUID ownerId) {
public DarigaazTheIgniter(final DarigaazTheIgniter card) {
public DarigaazTheIgniter copy() {return new DarigaazTheIgniter(this);
class DarigaazTheIgniterEffect extends OneShotEffect {
public DarigaazTheIgniterEffect() {
public DarigaazTheIgniterEffect(final DarigaazTheIgniterEffect effect) {
public DarigaazTheIgniterEffect copy() {return new DarigaazTheIgniterEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class HornetCannon extends CardImpl {
public HornetCannon(UUID ownerId) {
public HornetCannon(final HornetCannon card) {
public HornetCannon copy() {return new HornetCannon(this);
class HornetCannonEffect extends OneShotEffect {
public HornetCannonEffect() {
public HornetCannonEffect(final HornetCannonEffect effect) {
public HornetCannonEffect copy() {return new HornetCannonEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class PhyrexianBattleflies extends CardImpl {
public PhyrexianBattleflies(UUID ownerId) {
public PhyrexianBattleflies(final PhyrexianBattleflies card) {
public PhyrexianBattleflies copy() {return new PhyrexianBattleflies(this);
public class PhyrexianTotem extends CardImpl {
public PhyrexianTotem(UUID ownerId) {
public PhyrexianTotem(final PhyrexianTotem card) {
public PhyrexianTotem copy() {return new PhyrexianTotem(this);
private class PhyrexianTotemToken extends Token {
PhyrexianTotemToken() {
class PhyrexianTotemTriggeredAbility extends TriggeredAbilityImpl {
public PhyrexianTotemTriggeredAbility() {
public PhyrexianTotemTriggeredAbility(final PhyrexianTotemTriggeredAbility ability) {
public PhyrexianTotemTriggeredAbility copy() {return new PhyrexianTotemTriggeredAbility(this);
public boolean checkInterveningIfClause(Game game) {return permanent.getCardType().contains(CardType.CREATURE);return false;
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt damage, if it's a creature, sacrifice that many permanents.";
public class ThornscapeApprentice extends CardImpl {
public ThornscapeApprentice(UUID ownerId) {
public ThornscapeApprentice(final ThornscapeApprentice card) {
public ThornscapeApprentice copy() {return new ThornscapeApprentice(this);
public class ThornscapeBattlemage extends CardImpl {
public ThornscapeBattlemage(UUID ownerId) {
public ThornscapeBattlemage(final ThornscapeBattlemage card) {
public ThornscapeBattlemage copy() {return new ThornscapeBattlemage(this);
public class ThunderscapeBattlemage extends CardImpl {
public ThunderscapeBattlemage(UUID ownerId) {
public ThunderscapeBattlemage(final ThunderscapeBattlemage card) {
public ThunderscapeBattlemage copy() {return new ThunderscapeBattlemage(this);
public class UrzasRage extends CardImpl {
public UrzasRage(UUID ownerId) {
public UrzasRage(final UrzasRage card) {
public UrzasRage copy() {return new UrzasRage(this);
public class VerduranEmissary extends CardImpl {
public VerduranEmissary(UUID ownerId) {
public VerduranEmissary(final VerduranEmissary card) {
public VerduranEmissary copy() {return new VerduranEmissary(this);
public class AnaBattlemage extends CardImpl {
public AnaBattlemage(UUID ownerId) {
public AnaBattlemage(final AnaBattlemage card) {
public AnaBattlemage copy() {return new AnaBattlemage(this);
class AnaBattlemageKickerEffect extends OneShotEffect {
public AnaBattlemageKickerEffect() {
public AnaBattlemageKickerEffect(final AnaBattlemageKickerEffect effect) {
public AnaBattlemageKickerEffect copy() {return new AnaBattlemageKickerEffect(this);
public boolean apply(Game game, Ability source) {return applied;return new AvenRiftwatcher(this);
public class BatteringSliver extends CardImpl {
public BatteringSliver(UUID ownerId) {
public BatteringSliver(final BatteringSliver card) {
public BatteringSliver copy() {return new BatteringSliver(this);
public class BenalishCommander extends CardImpl {
public BenalishCommander(UUID ownerId) {
public BenalishCommander(final BenalishCommander card) {
public BenalishCommander copy() {return new BenalishCommander(this);
class BenalishCommanderTriggeredAbility extends TriggeredAbilityImpl {
public BenalishCommanderTriggeredAbility() {
public BenalishCommanderTriggeredAbility(final BenalishCommanderTriggeredAbility ability) {
public BenalishCommanderTriggeredAbility copy() {return new BenalishCommanderTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER_REMOVED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getData().equals(CounterType.TIME.getName()) && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever a time counter is removed from {this} while it's exiled, " + super.getRule();
public class BigGameHunter extends CardImpl {
public BigGameHunter(UUID ownerId) {
public BigGameHunter(final BigGameHunter card) {
public BigGameHunter copy() {return new BigGameHunter(this);
public class Blightspeaker extends CardImpl {
public Blightspeaker(UUID ownerId) {
public Blightspeaker(final Blightspeaker card) {
public Blightspeaker copy() {return new Blightspeaker(this);
public class BloodKnight extends CardImpl {
public BloodKnight(UUID ownerId) {
public BloodKnight(final BloodKnight card) {
public BloodKnight copy() {return new BloodKnight(this);
public class BogSerpent extends CardImpl {
public BogSerpent(UUID ownerId) {
public BogSerpent(final BogSerpent card) {
public BogSerpent copy() {return new BogSerpent(this);
public class BraidsConjurerAdept extends CardImpl {
public BraidsConjurerAdept(UUID ownerId) {
public BraidsConjurerAdept(final BraidsConjurerAdept card) {
public BraidsConjurerAdept copy() {return new BraidsConjurerAdept(this);
public class BrainGorgers extends CardImpl {
public BrainGorgers(UUID ownerId) {
public BrainGorgers(final BrainGorgers card) {
public BrainGorgers copy() {return new BrainGorgers(this);
class BrainGorgersCounterSourceEffect extends OneShotEffect {
public BrainGorgersCounterSourceEffect() {
public BrainGorgersCounterSourceEffect(final BrainGorgersCounterSourceEffect effect) {
public BrainGorgersCounterSourceEffect copy() {return new BrainGorgersCounterSourceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CauterySliver extends CardImpl {
public CauterySliver(UUID ownerId) {
public CauterySliver(final CauterySliver card) {
public CauterySliver copy() {return new CauterySliver(this);
class TargetSliverCreatureOrPlayer extends TargetCreatureOrPlayer {
public TargetSliverCreatureOrPlayer(){
class FilterCreatureOrPlayerByType extends FilterCreatureOrPlayer {
public FilterCreatureOrPlayerByType (String type, String name) {
public class Chronozoa extends CardImpl {
public Chronozoa(UUID ownerId) {
public Chronozoa(final Chronozoa card) {
public Chronozoa copy() {return new Chronozoa(this);
public class CitanulWoodreaders extends CardImpl {
public CitanulWoodreaders(UUID ownerId) {
public CitanulWoodreaders(final CitanulWoodreaders card) {
public CitanulWoodreaders copy() {return new CitanulWoodreaders(this);
public class CrovaxAscendantHero extends CardImpl {
public CrovaxAscendantHero(UUID ownerId) {
public CrovaxAscendantHero(final CrovaxAscendantHero card) {
public CrovaxAscendantHero copy() {return new CrovaxAscendantHero(this);
public class Damnation extends CardImpl {
public Damnation(UUID ownerId) {
public Damnation(final Damnation card) {
public Damnation copy() {return new Damnation(this);
public class DarkheartSliver extends CardImpl {
public DarkheartSliver(UUID ownerId) {
public DarkheartSliver(final DarkheartSliver card) {
public DarkheartSliver copy() {return new DarkheartSliver(this);
public class DashHopes extends CardImpl {
public DashHopes(UUID ownerId) {
public DashHopes(final DashHopes card) {
public DashHopes copy() {return new DashHopes(this);
class DashHopesCounterSourceEffect extends OneShotEffect {
public DashHopesCounterSourceEffect() {
public DashHopesCounterSourceEffect(final DashHopesCounterSourceEffect effect) {
public DashHopesCounterSourceEffect copy() {return new DashHopesCounterSourceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DawnCharm extends CardImpl {
public DawnCharm(UUID ownerId) {
public DawnCharm(final DawnCharm card) {
public DawnCharm copy() {return new DawnCharm(this);
class DawnCharmPredicate implements ObjectPlayerPredicate<ObjectPlayer<StackObject>> {
public boolean apply(ObjectPlayer<StackObject> input, Game game) {return false;return true;return false;
public String toString() {return "spell that targets you";
public class DeadlyGrub extends CardImpl {
public DeadlyGrub(UUID ownerId) {
public DeadlyGrub(final DeadlyGrub card) {
public DeadlyGrub copy() {return new DeadlyGrub(this);
class DeadlyGrubToken extends Token {
DeadlyGrubToken() {
public class Detritivore extends CardImpl {
public Detritivore(UUID ownerId) {
public Detritivore(final Detritivore card) {
public Detritivore copy() {return new Detritivore(this);
class DetritivoreTriggeredAbility extends TriggeredAbilityImpl {
public DetritivoreTriggeredAbility() {
public DetritivoreTriggeredAbility(final DetritivoreTriggeredAbility ability) {
public DetritivoreTriggeredAbility copy() {return new DetritivoreTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER_REMOVED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getData().equals(CounterType.TIME.getName()) && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever a time counter is removed from {this} while it's exiled, " + super.getRule();
class NonBasicLandsInOpponentsGraveyards implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amount;
public DynamicValue copy() {return this;
public String toString() {return "1";
public String getMessage() {return "the number of nonbasic land cards in your opponents' graveyards";
public class DismalFailure extends CardImpl {
public DismalFailure(UUID ownerId) {
public DismalFailure(final DismalFailure card) {
public DismalFailure copy() {return new DismalFailure(this);
class DismalFailureEffect extends OneShotEffect {
public DismalFailureEffect() {
public DismalFailureEffect(final DismalFailureEffect effect) {
public DismalFailureEffect copy() {return new DismalFailureEffect(this);
public boolean apply(Game game, Ability source) {return countered;
public class DormantSliver extends CardImpl {
public DormantSliver(UUID ownerId) {
public DormantSliver(final DormantSliver card) {
public DormantSliver copy() {return new DormantSliver(this);
public class DreamscapeArtist extends CardImpl {
public DreamscapeArtist(UUID ownerId) {
public DreamscapeArtist(final DreamscapeArtist card) {
public DreamscapeArtist copy() {return new DreamscapeArtist(this);
public class DuneriderOutlaw extends CardImpl {
public DuneriderOutlaw(UUID ownerId) {
public DuneriderOutlaw(final DuneriderOutlaw card) {
public DuneriderOutlaw copy() {return new DuneriderOutlaw(this);
public class DustCorona extends CardImpl {
public DustCorona(UUID ownerId) {
public DustCorona(final DustCorona card) {
public DustCorona copy() {return new DustCorona(this);
public class DustElemental extends CardImpl {
public DustElemental(UUID ownerId) {
public DustElemental(final DustElemental card) {
public DustElemental copy() {return new DustElemental(this);
public class ErraticMutation extends CardImpl {
public ErraticMutation(UUID ownerId) {
public ErraticMutation(final ErraticMutation card) {
public ErraticMutation copy() {return new ErraticMutation(this);
class ErraticMutationEffect extends OneShotEffect {
public ErraticMutationEffect() {
public ErraticMutationEffect(final ErraticMutationEffect effect) {
public ErraticMutationEffect copy() {return new ErraticMutationEffect(this);
public boolean apply(Game game, Ability source) {return controller.putCardsOnBottomOfLibrary(toReveal, game, source, true);return false;
public class EssenceWarden extends CardImpl {
public EssenceWarden(UUID ownerId) {
public EssenceWarden(final EssenceWarden card) {
public EssenceWarden copy() {return new EssenceWarden(this);
public class FaadiyahSeer extends CardImpl {
public FaadiyahSeer(UUID ownerId) {
public FaadiyahSeer(final FaadiyahSeer card) {
public FaadiyahSeer copy() {return new FaadiyahSeer(this);
class FaadiyahSeerEffect extends OneShotEffect {
public FaadiyahSeerEffect() {
public FaadiyahSeerEffect(final FaadiyahSeerEffect effect) {
public FaadiyahSeerEffect copy() {return new FaadiyahSeerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FatalFrenzy extends CardImpl {
public FatalFrenzy(UUID ownerId) {
public FatalFrenzy(final FatalFrenzy card) {
public FatalFrenzy copy() {return new FatalFrenzy(this);
class FatalFrenzyEffect extends OneShotEffect {
public FatalFrenzyEffect() {
public FatalFrenzyEffect(final FatalFrenzyEffect effect) {
public FatalFrenzyEffect copy() {return new FatalFrenzyEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class FirefrightMage extends CardImpl {
public FirefrightMage(UUID ownerId) {
public FirefrightMage(final FirefrightMage card) {
public FirefrightMage copy() {return new FirefrightMage(this);
public class FreneticSliver extends CardImpl {
public FreneticSliver(UUID ownerId) {new FreneticSliverEffect(), new ManaCostsImpl("{0}"), SourceOnBattlefieldCondition.getInstance(), "{0}: If this permanent is on the battlefield, flip a coin. If you win the flip, exile this permanent and return it to the battlefield under its owner's control at the beginning of the next end step. If you lose the flip, sacrifice it.");new GainAbilityAllEffect(ability, Duration.WhileOnBattlefield, filter, "All Slivers have \"{0}: If this permanent is on the battlefield, flip a coin. If you win the flip, exile this permanent and return it to the battlefield under its owner's control at the beginning of the next end step. If you lose the flip, sacrifice it.\"")));
public FreneticSliver(final FreneticSliver card) {
public FreneticSliver copy() {return new FreneticSliver(this);
class FreneticSliverEffect extends OneShotEffect {
public FreneticSliverEffect() {staticText = "Flip a coin. If you win the flip, exile this permanent and return it to the battlefield under its owner's control at the beginning of the next end step. If you lose the flip, sacrifice it";
public FreneticSliverEffect(final FreneticSliverEffect effect) {
public boolean apply(Game game, Ability source) {return new ExileReturnBattlefieldOwnerNextEndStepSourceEffect(true).apply(game, source);return true;return false;
public FreneticSliverEffect copy() {return new FreneticSliverEffect(this);
public class FrozenAEther extends CardImpl {
public FrozenAEther(UUID ownerId) {
public FrozenAEther(final FrozenAEther card) {
public FrozenAEther copy() {return new FrozenAEther(this);
class FrozenAEtherTapEffect extends ReplacementEffectImpl {
FrozenAEtherTapEffect() {
FrozenAEtherTapEffect(final FrozenAEtherTapEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public FrozenAEtherTapEffect copy() {return new FrozenAEtherTapEffect(this);
public class FungalBehemoth extends CardImpl {
public FungalBehemoth(UUID ownerId) {
public FungalBehemoth(final FungalBehemoth card) {
public FungalBehemoth copy() {return new FungalBehemoth(this);
class FungalBehemothTriggeredAbility extends TriggeredAbilityImpl {
public FungalBehemothTriggeredAbility() {
public FungalBehemothTriggeredAbility(final FungalBehemothTriggeredAbility ability) {
public FungalBehemothTriggeredAbility copy() {return new FungalBehemothTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER_REMOVED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getData().equals(CounterType.TIME.getName()) && event.getTargetId().equals(this.getSourceId());
public String getRule() {return "Whenever a time counter is removed from {this} while it's exiled, " + super.getRule();
class P1P1CountersOnControlledCreaturesCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count;
public P1P1CountersOnControlledCreaturesCount copy() {return new P1P1CountersOnControlledCreaturesCount();
public String toString() {return "X";
public String getMessage() {return "the number of +1/+1 counters on creatures you control";
public class FuryCharm extends CardImpl {
public FuryCharm(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public FuryCharm(final FuryCharm card) {
public FuryCharm copy() {return new FuryCharm(this);
class FuryCharmRemoveCounterEffect extends OneShotEffect {
public FuryCharmRemoveCounterEffect() {
public FuryCharmRemoveCounterEffect(final FuryCharmRemoveCounterEffect effect) {
public FuryCharmRemoveCounterEffect copy() {return new FuryCharmRemoveCounterEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class GaeasAnthem extends CardImpl {
public GaeasAnthem(UUID ownerId) {
public GaeasAnthem(final GaeasAnthem card) {
public GaeasAnthem copy() {return new GaeasAnthem(this);
public class GhostTactician extends CardImpl {
public GhostTactician(UUID ownerId) {
public GhostTactician(final GhostTactician card) {
public GhostTactician copy() {return new GhostTactician(this);
public class GiantDustwasp extends CardImpl {
public GiantDustwasp(UUID ownerId) {
public GiantDustwasp(final GiantDustwasp card) {
public GiantDustwasp copy() {return new GiantDustwasp(this);
public class GossamerPhantasm extends CardImpl {
public GossamerPhantasm(UUID ownerId) {
public GossamerPhantasm(final GossamerPhantasm card) {
public GossamerPhantasm copy() {return new GossamerPhantasm(this);
public class Groundbreaker extends CardImpl {
public Groundbreaker(UUID ownerId) {
public Groundbreaker(final Groundbreaker card) {
public Groundbreaker copy() {return new Groundbreaker(this);
public class HammerheimDeadeye extends CardImpl {
public HammerheimDeadeye(UUID ownerId) {
public HammerheimDeadeye(final HammerheimDeadeye card) {
public HammerheimDeadeye copy() {return new HammerheimDeadeye(this);
public class Harmonize extends CardImpl {
public Harmonize(UUID ownerId) {
public Harmonize(final Harmonize card) {
public Harmonize copy() {return new Harmonize(this);
public class HealingLeaves extends CardImpl {
public HealingLeaves(UUID ownerId) {
public HealingLeaves(final HealingLeaves card) {
public HealingLeaves copy() {return new HealingLeaves(this);
public class HedgeTroll extends CardImpl {
public HedgeTroll(UUID ownerId) {
public HedgeTroll(final HedgeTroll card) {
public HedgeTroll copy() {return new HedgeTroll(this);
public class HeroesRemembered extends CardImpl{
public HeroesRemembered(UUID ownerId){
public HeroesRemembered(final HeroesRemembered card) {
public Card copy() {return new HeroesRemembered(this);
public class HuntingWilds extends CardImpl {
public HuntingWilds(UUID ownerId) {
public HuntingWilds(final HuntingWilds card) {
public HuntingWilds copy() {return new HuntingWilds(this);
class HuntingWildsEffect extends OneShotEffect {
public HuntingWildsEffect() {
public HuntingWildsEffect(final HuntingWildsEffect effect) {
public HuntingWildsEffect copy() {return new HuntingWildsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class HuntingWildsToken extends Token {
public HuntingWildsToken() {
public class JeditOjanenOfEfrava extends CardImpl {
public JeditOjanenOfEfrava(UUID ownerId) {
public JeditOjanenOfEfrava(final JeditOjanenOfEfrava card) {
public JeditOjanenOfEfrava copy() {return new JeditOjanenOfEfrava(this);
class CatWarriorToken extends Token {
CatWarriorToken() {
public class KeenSense extends CardImpl {
public KeenSense(UUID ownerId) {
public KeenSense(final KeenSense card) {
public KeenSense copy() {return new KeenSense(this);return new KeldonMarauders(this);
public class LavacoreElemental extends CardImpl {
public LavacoreElemental(UUID ownerId) {
public LavacoreElemental(final LavacoreElemental card) {
public LavacoreElemental copy() {return new LavacoreElemental(this);return new LifeAndLimb(this);return new LifeAndLimbEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.TypeChangingEffects_4
public class MagusOfTheBazaar extends CardImpl {
public MagusOfTheBazaar(UUID ownerId) {
public MagusOfTheBazaar(final MagusOfTheBazaar card) {
public MagusOfTheBazaar copy() {return new MagusOfTheBazaar(this);
public class MagusOfTheLibrary extends CardImpl {
public MagusOfTheLibrary(UUID ownerId) {
public MagusOfTheLibrary(final MagusOfTheLibrary card) {
public MagusOfTheLibrary copy() {return new MagusOfTheLibrary(this);
public class MagusOfTheTabernacle extends CardImpl {
public MagusOfTheTabernacle(UUID ownerId) {
public MagusOfTheTabernacle(final MagusOfTheTabernacle card) {
public MagusOfTheTabernacle copy() {return new MagusOfTheTabernacle(this);
public class MalachOfTheDawn extends CardImpl {
public MalachOfTheDawn(UUID ownerId) {
public MalachOfTheDawn(final MalachOfTheDawn card) {
public MalachOfTheDawn copy() {return new MalachOfTheDawn(this);
public class ManaTithe extends CardImpl {
public ManaTithe(UUID ownerId) {
public ManaTithe(final ManaTithe card) {
public ManaTithe copy() {return new ManaTithe(this);
public class Melancholy extends CardImpl {
public Melancholy(UUID ownerId) {
public Melancholy(final Melancholy card) {
public Melancholy copy() {return new Melancholy(this);
public class MerfolkThaumaturgist extends CardImpl {
public MerfolkThaumaturgist(UUID ownerId) {
public MerfolkThaumaturgist(final MerfolkThaumaturgist card) {
public MerfolkThaumaturgist copy() {return new MerfolkThaumaturgist(this);
public class MidnightCharm extends CardImpl {
public MidnightCharm(UUID ownerId) {
public MidnightCharm(final MidnightCharm card) {
public MidnightCharm copy() {return new MidnightCharm(this);
public class MireBoa extends CardImpl {
public MireBoa(UUID ownerId) {
public MireBoa(final MireBoa card) {
public MireBoa copy() {return new MireBoa(this);
public class MirriTheCursed extends CardImpl {
public MirriTheCursed(UUID ownerId) {
public MirriTheCursed(final MirriTheCursed card) {
public MirriTheCursed copy() {return new MirriTheCursed(this);
public class Mycologist extends CardImpl {
public Mycologist(UUID ownerId) {
public Mycologist(final Mycologist card) {
public Mycologist copy() {return new Mycologist(this);
public class NecroticSliver extends CardImpl {
public NecroticSliver(UUID ownerId) {
public NecroticSliver(final NecroticSliver card) {
public NecroticSliver copy() {return new NecroticSliver(this);
public class NeedlepeakSpider extends CardImpl {
public NeedlepeakSpider(UUID ownerId) {
public NeedlepeakSpider(final NeedlepeakSpider card) {
public NeedlepeakSpider copy() {return new NeedlepeakSpider(this);
public class PallidMycoderm extends CardImpl {
public PallidMycoderm(UUID ownerId) {
public PallidMycoderm(final PallidMycoderm card) {
public PallidMycoderm copy() {return new PallidMycoderm(this);
public class Phantasmagorian extends CardImpl {
public Phantasmagorian(UUID ownerId) {
public Phantasmagorian(final Phantasmagorian card) {
public Phantasmagorian copy() {return new Phantasmagorian(this);
class CounterSourceEffect extends OneShotEffect {
public CounterSourceEffect() {
public CounterSourceEffect(final CounterSourceEffect effect) {
public CounterSourceEffect copy() {return new CounterSourceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public String getText(Mode mode) {return staticText;return "any player may discard three cards. If a player does, counter {source}";
public class PiracyCharm extends CardImpl {
public PiracyCharm(UUID ownerId) {
public PiracyCharm(final PiracyCharm card) {
public PiracyCharm copy() {return new PiracyCharm(this);return new Pongify(this);return new PongifyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ApeToken extends Token {
public ApeToken() {
public class PorphyryNodes extends CardImpl {
public PorphyryNodes(UUID ownerId) {
public PorphyryNodes(final PorphyryNodes card) {
public PorphyryNodes copy() {return new PorphyryNodes(this);
class PorphyryNodesEffect extends OneShotEffect {
public PorphyryNodesEffect() {
public PorphyryNodesEffect(final PorphyryNodesEffect effect) {
public PorphyryNodesEffect copy() {return new PorphyryNodesEffect(this);
public boolean apply(Game game, Ability source) {return permanentToDestroy.destroy(source.getSourceId(), game, true);return true;return false;
class PorphyryNodesStateTriggeredAbility extends StateTriggeredAbility {
public PorphyryNodesStateTriggeredAbility() {
public PorphyryNodesStateTriggeredAbility(final PorphyryNodesStateTriggeredAbility ability) {
public PorphyryNodesStateTriggeredAbility copy() {return new PorphyryNodesStateTriggeredAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return game.getBattlefield().count(PorphyryNodes.filter, this.getSourceId(), this.getControllerId(), game) == 0;
public String getRule() {return new StringBuilder("When there are no creatures on the battlefield, ").append(super.getRule()).toString() ;
public class PoulticeSliver extends CardImpl {
public PoulticeSliver(UUID ownerId) {
public PoulticeSliver(final PoulticeSliver card) {
public PoulticeSliver copy() {return new PoulticeSliver(this);
public class PouncingWurm extends CardImpl {
public PouncingWurm(UUID ownerId) {
public PouncingWurm(final PouncingWurm card) {
public PouncingWurm copy() {return new PouncingWurm(this);
public class PsychotropeThallid extends CardImpl {
public PsychotropeThallid(UUID ownerId) {
public PsychotropeThallid(final PsychotropeThallid card) {
public PsychotropeThallid copy() {return new PsychotropeThallid(this);
public class Pyrohemia extends CardImpl {
public Pyrohemia(UUID ownerId) {
public Pyrohemia(final Pyrohemia card) {
public Pyrohemia copy() {return new Pyrohemia(this);
public class RadhaHeirToKeld extends CardImpl {
public RadhaHeirToKeld(UUID ownerId) {
public RadhaHeirToKeld(final RadhaHeirToKeld card) {
public RadhaHeirToKeld copy() {return new RadhaHeirToKeld(this);
public class RathiTrapper extends CardImpl {
public RathiTrapper(UUID ownerId) {
public RathiTrapper(final RathiTrapper card) {
public RathiTrapper copy() {return new RathiTrapper(this);
public class RealityAcid extends CardImpl {
public RealityAcid(UUID ownerId) {
public RealityAcid(final RealityAcid card) {
public RealityAcid copy() {return new RealityAcid(this);
class RealityAcidTriggeredAbility extends ZoneChangeTriggeredAbility {
public RealityAcidTriggeredAbility(Effect effect, boolean optional) {
public RealityAcidTriggeredAbility(RealityAcidTriggeredAbility ability) {
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public RealityAcidTriggeredAbility copy() {return new RealityAcidTriggeredAbility(this);
public class RebuffTheWicked extends CardImpl {
public RebuffTheWicked(UUID ownerId) {
public RebuffTheWicked(final RebuffTheWicked card) {
public RebuffTheWicked copy() {return new RebuffTheWicked(this);
public class RecklessWurm extends CardImpl {
public RecklessWurm(UUID ownerId) {
public RecklessWurm(final RecklessWurm card) {
public RecklessWurm copy() {return new RecklessWurm(this);
public class ReflexSliver extends CardImpl {
public ReflexSliver(UUID ownerId) {
public ReflexSliver(final ReflexSliver card) {
public ReflexSliver copy() {return new ReflexSliver(this);
public class ReveredDead extends CardImpl {
public ReveredDead(UUID ownerId) {
public ReveredDead(final ReveredDead card) {
public ReveredDead copy() {return new ReveredDead(this);
public class RidgedKusite extends CardImpl {
public RidgedKusite(UUID ownerId) {
public RidgedKusite(final RidgedKusite card) {
public RidgedKusite copy() {return new RidgedKusite(this);
public class RiptidePilferer extends CardImpl {
public RiptidePilferer(UUID ownerId) {
public class SaltfieldRecluse extends CardImpl {
public SaltfieldRecluse(UUID ownerId) {
public SaltfieldRecluse(final SaltfieldRecluse card) {
public SaltfieldRecluse copy() {return new SaltfieldRecluse(this);
public class SealOfPrimordium extends CardImpl {
public SealOfPrimordium(UUID ownerId) {
public SealOfPrimordium(final SealOfPrimordium card) {
public SealOfPrimordium copy() {return new SealOfPrimordium(this);
public class SerendibSorcerer extends CardImpl {
public SerendibSorcerer(UUID ownerId) {
public SerendibSorcerer(final SerendibSorcerer card) {
public SerendibSorcerer copy() {return new SerendibSorcerer(this);
public class SerraSphinx extends CardImpl {
public SerraSphinx(UUID ownerId) {
public SerraSphinx(final SerraSphinx card) {
public SerraSphinx copy() {return new SerraSphinx(this);
public class ShadeOfTrokair extends CardImpl {
public ShadeOfTrokair(UUID ownerId) {
public ShadeOfTrokair(final ShadeOfTrokair card) {
public ShadeOfTrokair copy() {return new ShadeOfTrokair(this);
public class ShivanMeteor extends CardImpl {
public ShivanMeteor(UUID ownerId) {
public ShivanMeteor(final ShivanMeteor card) {
public ShivanMeteor copy() {return new ShivanMeteor(this);
public class ShivanWumpus extends CardImpl {
public ShivanWumpus(UUID ownerId) {
public ShivanWumpus(final ShivanWumpus card) {
public ShivanWumpus copy() {return new ShivanWumpus(this);
class ShivanWumpusEffect extends PutOnLibrarySourceEffect {
ShivanWumpusEffect() {
ShivanWumpusEffect(final ShivanWumpusEffect effect) {
public ShivanWumpusEffect copy() {return new ShivanWumpusEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShroudedLore extends CardImpl {
public ShroudedLore(UUID ownerId) {
public ShroudedLore(final ShroudedLore card) {
public ShroudedLore copy() {return new ShroudedLore(this);
class ShroudedLoreEffect extends OneShotEffect {
public ShroudedLoreEffect() {
public ShroudedLoreEffect(final ShroudedLoreEffect effect) {
public ShroudedLoreEffect copy() {return new ShroudedLoreEffect(this);
public boolean apply(Game game, Ability source) {
{return true;return false;
public class SimianSpiritGuide extends CardImpl {
public SimianSpiritGuide(UUID ownerId) {
public SimianSpiritGuide(final SimianSpiritGuide card) {
public SimianSpiritGuide copy() {return new SimianSpiritGuide(this);
class ExileSourceFromHandCost extends CostImpl {
public ExileSourceFromHandCost() {
public ExileSourceFromHandCost(ExileSourceFromHandCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;return false;
public ExileSourceFromHandCost copy() {return new ExileSourceFromHandCost(this);
public class SinewSliver extends CardImpl {
public SinewSliver(UUID ownerId) {
public SinewSliver(final SinewSliver card) {
public SinewSliver copy() {return new SinewSliver(this);
public class SophicCentaur extends CardImpl {
public SophicCentaur(UUID ownerId) {
public SophicCentaur(final SophicCentaur card) {
public SophicCentaur copy() {return new SophicCentaur(this);
public class SpittingSliver extends CardImpl {
public SpittingSliver(UUID ownerId) {
public SpittingSliver(final SpittingSliver card) {
public SpittingSliver copy() {return new SpittingSliver(this);
public class Stingscourger extends CardImpl {
public Stingscourger(UUID ownerId) {
public Stingscourger(final Stingscourger card) {
public Stingscourger copy() {return new Stingscourger(this);
public class StormfrontRiders extends CardImpl {
public StormfrontRiders(UUID ownerId) {filter,"Whenever {this} or another creature is returned to your hand from the battlefield, ", false));
public StormfrontRiders(final StormfrontRiders card) {
public StormfrontRiders copy() {return new StormfrontRiders(this);
public class SulfurElemental extends CardImpl {
public SulfurElemental(UUID ownerId) {
public SulfurElemental(final SulfurElemental card) {
public SulfurElemental copy() {return new SulfurElemental(this);
public class Sunlance extends CardImpl {
public Sunlance(UUID ownerId) {
public Sunlance(final Sunlance card) {
public Sunlance copy() {return new Sunlance(this);
public class SynchronousSliver extends CardImpl {
public SynchronousSliver(UUID ownerId) {
public SynchronousSliver(final SynchronousSliver card) {
public SynchronousSliver copy() {return new SynchronousSliver(this);
public class TemporalExtortion extends CardImpl {
public TemporalExtortion(UUID ownerId) {
public TemporalExtortion(final TemporalExtortion card) {
public TemporalExtortion copy() {return new TemporalExtortion(this);
class TemporalExtortionCounterSourceEffect extends OneShotEffect {
public TemporalExtortionCounterSourceEffect() {
public TemporalExtortionCounterSourceEffect(final TemporalExtortionCounterSourceEffect effect) {
public TemporalExtortionCounterSourceEffect copy() {return new TemporalExtortionCounterSourceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class UktabiDrake extends CardImpl {
public UktabiDrake(UUID ownerId) {
public UktabiDrake(final UktabiDrake card) {
public UktabiDrake copy() {return new UktabiDrake(this);
public class UrborgTombOfYawgmoth extends CardImpl {
public UrborgTombOfYawgmoth(UUID ownerId) {
public UrborgTombOfYawgmoth(final UrborgTombOfYawgmoth card) {
public UrborgTombOfYawgmoth copy() {return new UrborgTombOfYawgmoth(this);
class AddCardSubtypeAllEffect extends ContinuousEffectImpl {
public AddCardSubtypeAllEffect() {
public AddCardSubtypeAllEffect(final AddCardSubtypeAllEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public AddCardSubtypeAllEffect copy() {return new AddCardSubtypeAllEffect(this);
public class UtopiaVow extends CardImpl {
public UtopiaVow(UUID ownerId) {
public UtopiaVow(final UtopiaVow card) {
public UtopiaVow copy() {return new UtopiaVow(this);
public class VampiricLink extends CardImpl {
public VampiricLink(UUID ownerId) {
public VampiricLink(final VampiricLink card) {
public VampiricLink copy() {return new VampiricLink(this);
public class VitasporeThallid extends CardImpl {
public VitasporeThallid(UUID ownerId) {
public VitasporeThallid(final VitasporeThallid card) {
public VitasporeThallid copy() {return new VitasporeThallid(this);
public class VoidstoneGargoyle extends CardImpl {
public VoidstoneGargoyle(UUID ownerId) {
public VoidstoneGargoyle(final VoidstoneGargoyle card) {
public VoidstoneGargoyle copy() {return new VoidstoneGargoyle(this);
class VoidstoneGargoyleChooseCardEffect extends OneShotEffect {
public VoidstoneGargoyleChooseCardEffect() {
public VoidstoneGargoyleChooseCardEffect(final VoidstoneGargoyleChooseCardEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public VoidstoneGargoyleChooseCardEffect copy() {return new VoidstoneGargoyleChooseCardEffect(this);
public VoidstoneGargoyleReplacementEffect1() {
public VoidstoneGargoyleReplacementEffect1(final VoidstoneGargoyleReplacementEffect1 effect) {
public boolean apply(Game game, Ability source) {return true;
public VoidstoneGargoyleReplacementEffect1 copy() {return new VoidstoneGargoyleReplacementEffect1(this);
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast a card with that name (" + mageObject.getIdName() + ").";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;return new VoidstoneGargoyleRuleModifyingEffect2(this);
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't activate abilities of sources with that name (" + mageObject.getLogName() + " in play).";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class WaningWurm extends CardImpl {
public WaningWurm(UUID ownerId) {
public WaningWurm(final WaningWurm card) {
public WaningWurm copy() {return new WaningWurm(this);
public class WistfulThinking extends CardImpl {
public WistfulThinking(UUID ownerId) {
public WistfulThinking(final WistfulThinking card) {
public WistfulThinking copy() {return new WistfulThinking(this);
public class AkromasVengeance extends CardImpl {
public AkromasVengeance(UUID ownerId) {
public AkromasVengeance(final AkromasVengeance card) {
public AkromasVengeance copy() {return new AkromasVengeance(this);
class AkromasVengeanceEffect extends OneShotEffect {
public AkromasVengeanceEffect() {
public AkromasVengeanceEffect(final AkromasVengeanceEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public AkromasVengeanceEffect copy() {return new AkromasVengeanceEffect(this);
public class ArcboundCrusher extends CardImpl {
public ArcboundCrusher(UUID ownerId) {
public ArcboundCrusher(final ArcboundCrusher card) {
public ArcboundCrusher copy() {return new ArcboundCrusher(this);
public class ArcboundSlith extends CardImpl {
public ArcboundSlith(UUID ownerId) {
public ArcboundSlith(final ArcboundSlith card) {
public ArcboundSlith copy() {return new ArcboundSlith(this);
public class AscendantEvincar extends CardImpl {
public AscendantEvincar(UUID ownerId) {
public AscendantEvincar(final AscendantEvincar card) {
public AscendantEvincar copy() {return new AscendantEvincar(this);
public class BeaconOfUnrest extends CardImpl {
public BeaconOfUnrest(UUID ownerId) {
public BeaconOfUnrest(final BeaconOfUnrest card) {
public BeaconOfUnrest copy() {return new BeaconOfUnrest(this);
public class Blaze extends CardImpl {
public Blaze(UUID ownerId) {
public Blaze(final Blaze card) {
public Blaze copy() {return new Blaze(this);
public class BogardanFirefiend extends CardImpl {
public BogardanFirefiend(UUID ownerId) {
public BogardanFirefiend(final BogardanFirefiend card) {
public BogardanFirefiend copy() {return new BogardanFirefiend(this);
public class BogardanRager extends CardImpl {
public BogardanRager(UUID ownerId) {
public BogardanRager(final BogardanRager card) {
public BogardanRager copy() {return new BogardanRager(this);
public class BorosGarrison extends CardImpl {
public BorosGarrison(UUID ownerId) {
public BorosGarrison(final BorosGarrison card) {
public BorosGarrison copy() {return new BorosGarrison(this);return new BorosSwiftblade(this);
public class Broodstar extends CardImpl {
public Broodstar(UUID ownerId) {
public Broodstar(final Broodstar card) {
public Broodstar copy() {return new Broodstar(this);
public class CabalCoffers extends CardImpl {
public CabalCoffers(UUID ownerId) {
public CabalCoffers(final CabalCoffers card) {
public CabalCoffers copy() {return new CabalCoffers(this);
public class CadaverousKnight extends CardImpl {
public CadaverousKnight(UUID ownerId) {
public CadaverousKnight(final CadaverousKnight card) {
public CadaverousKnight copy() {return new CadaverousKnight(this);
public class CorpseHarvester extends CardImpl {
public CorpseHarvester(UUID ownerId) {
public CorpseHarvester(final CorpseHarvester card) {
public CorpseHarvester copy() {return new CorpseHarvester(this);
class CorpseHarvesterEffect extends OneShotEffect {
CorpseHarvesterEffect() {
CorpseHarvesterEffect(final CorpseHarvesterEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
private void searchCard(Player player, Ability source, Game game, Cards cards, String subtype) {
public CorpseHarvesterEffect copy() {return new CorpseHarvesterEffect(this);
public class CranialPlating extends CardImpl {
public CranialPlating(UUID ownerId) {
public CranialPlating(final CranialPlating card) {
public CranialPlating copy() {return new CranialPlating(this);
public class DarkRitual extends CardImpl {
public DarkRitual(UUID ownerId) {
public DarkRitual(final DarkRitual card) {
public DarkRitual copy() {return new DarkRitual(this);
public class DoorToNothingness extends CardImpl {
public DoorToNothingness(UUID ownerId) {
public DoorToNothingness(final DoorToNothingness card) {
public DoorToNothingness copy() {return new DoorToNothingness(this);
class DoorToNothingnessEffect extends OneShotEffect {
public DoorToNothingnessEffect() {
public DoorToNothingnessEffect(final DoorToNothingnessEffect effect) {
public DoorToNothingnessEffect copy() {return new DoorToNothingnessEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EtchedOracle extends CardImpl {
public EtchedOracle(UUID ownerId) {
public EtchedOracle(final EtchedOracle card) {
public EtchedOracle copy() {return new EtchedOracle(this);
public class ExplosiveVegetation extends CardImpl {
public ExplosiveVegetation(UUID ownerId) {
public ExplosiveVegetation(final ExplosiveVegetation card) {
public ExplosiveVegetation copy() {return new ExplosiveVegetation(this);
public class FesteringGoblin extends CardImpl {
public FesteringGoblin(UUID ownerId) {
public FesteringGoblin(final FesteringGoblin card) {
public FesteringGoblin copy() {return new FesteringGoblin(this);
public class FiresOfYavimaya extends CardImpl {
public FiresOfYavimaya(UUID ownerId) {
public FiresOfYavimaya(final FiresOfYavimaya card) {
public FiresOfYavimaya copy() {return new FiresOfYavimaya(this);
public class FlamekinHarbinger extends CardImpl {
public FlamekinHarbinger(UUID ownerId) {
public FlamekinHarbinger(final FlamekinHarbinger card) {
public FlamekinHarbinger copy() {return new FlamekinHarbinger(this);
public class FlametongueKavu extends CardImpl {
public FlametongueKavu(UUID ownerId) {
public FlametongueKavu(final FlametongueKavu card) {
public FlametongueKavu copy() {return new FlametongueKavu(this);
public class GruulTurf extends CardImpl {
public GruulTurf(UUID ownerId) {
public GruulTurf(final GruulTurf card) {
public GruulTurf copy() {return new GruulTurf(this);return new Helldozer(this);return new HelldozerEffect(this);
public boolean apply(Game game, Ability source) {return helldozer.untap(game);return false;
public class InnocentBlood extends CardImpl {
public InnocentBlood(UUID ownerId) {
public InnocentBlood(final InnocentBlood card) {
public InnocentBlood copy() {return new InnocentBlood(this);
public class IvyElemental extends CardImpl {
public IvyElemental(UUID ownerId) {
public IvyElemental(final IvyElemental card) {
public IvyElemental copy() {return new IvyElemental(this);return new KeldonChampion(this);
public class MaskOfMemory extends CardImpl {
public MaskOfMemory(UUID ownerId) {
public MaskOfMemory(final MaskOfMemory card) {
public MaskOfMemory copy() {return new MaskOfMemory(this);return new MyrEnforcer(this);
public class Nefashu extends CardImpl {
public Nefashu(UUID ownerId) {
public Nefashu(final Nefashu card) {
public Nefashu copy() {return new Nefashu(this);
public class NoxiousGhoul extends CardImpl {
public NoxiousGhoul(UUID ownerId) {
public NoxiousGhoul(final NoxiousGhoul card) {
public NoxiousGhoul copy() {return new NoxiousGhoul(this);
public class NuisanceEngine extends CardImpl {
public NuisanceEngine(UUID ownerId) {
public NuisanceEngine(final NuisanceEngine card) {
public NuisanceEngine copy() {return new NuisanceEngine(this);
class PestToken extends Token {
public PestToken() {
public class PentadPrism extends CardImpl {
public PentadPrism(UUID ownerId) {
public PentadPrism(final PentadPrism card) {
public PentadPrism copy() {return new PentadPrism(this);
public class PhyrexianGhoul extends CardImpl {
public PhyrexianGhoul(UUID ownerId) {
public PhyrexianGhoul(final PhyrexianGhoul card) {
public PhyrexianGhoul copy() {return new PhyrexianGhoul(this);
public class RaziaBorosArchangel extends CardImpl {
public RaziaBorosArchangel(UUID ownerId) {
public RaziaBorosArchangel(final RaziaBorosArchangel card) {
public RaziaBorosArchangel copy() {return new RaziaBorosArchangel(this);
class RaziaBorosArchangelEffect extends RedirectionEffect {
public RaziaBorosArchangelEffect(Duration duration, int amount) {
public RaziaBorosArchangelEffect(final RaziaBorosArchangelEffect effect) {
public RaziaBorosArchangelEffect copy() {return new RaziaBorosArchangelEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class RecklessCharge extends CardImpl {
public RecklessCharge(UUID ownerId) {
public RecklessCharge(final RecklessCharge card) {
public RecklessCharge copy() {return new RecklessCharge(this);
public class RorixBladewing extends CardImpl {
public RorixBladewing(UUID ownerId) {
public RorixBladewing(final RorixBladewing card) {
public RorixBladewing copy() {return new RorixBladewing(this);
public class SarcomiteMyr extends CardImpl {
public SarcomiteMyr(UUID ownerId) {
public SarcomiteMyr(final SarcomiteMyr card) {
public SarcomiteMyr copy() {return new SarcomiteMyr(this);
public class ShivanOasis extends CardImpl {
public ShivanOasis(UUID ownerId) {
public ShivanOasis(final ShivanOasis card) {
public ShivanOasis copy() {return new ShivanOasis(this);
public class SilvergladeElemental extends CardImpl {
public SilvergladeElemental(UUID ownerId) {
public SilvergladeElemental(final SilvergladeElemental card) {
public SilvergladeElemental copy() {return new SilvergladeElemental(this);
public class SkeletonShard extends CardImpl {
public SkeletonShard(UUID ownerId) {
public SkeletonShard(final SkeletonShard card) {
public SkeletonShard copy() {return new SkeletonShard(this);
public class Smokebraider extends CardImpl {
public Smokebraider(UUID ownerId) {
public Smokebraider(final Smokebraider card) {
public Smokebraider copy() {return new Smokebraider(this);
class SmokebraiderManaBuilder extends ConditionalManaBuilder {return new SmokebraiderConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast Elemental spells or activate abilities of Elementals";
class SmokebraiderConditionalMana extends ConditionalMana {
public SmokebraiderConditionalMana(Mana mana) {
class SmokebraiderManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class SunhomeFortressOfTheLegion extends CardImpl {
public SunhomeFortressOfTheLegion(UUID ownerId) {
public SunhomeFortressOfTheLegion(final SunhomeFortressOfTheLegion card) {
public SunhomeFortressOfTheLegion copy() {return new SunhomeFortressOfTheLegion(this);
public class SuntouchedMyr extends CardImpl {
public SuntouchedMyr(UUID ownerId) {
public SuntouchedMyr(final SuntouchedMyr card) {
public SuntouchedMyr copy() {return new SuntouchedMyr(this);
public class SyphonSoul extends CardImpl {
public SyphonSoul(UUID ownerId) {
public SyphonSoul(final SyphonSoul card) {
public SyphonSoul copy() {return new SyphonSoul(this);
class SyphonSoulEffect extends OneShotEffect {
public SyphonSoulEffect() {
public SyphonSoulEffect(final SyphonSoulEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SyphonSoulEffect copy() {return new SyphonSoulEffect(this);
public class UndeadWarchief extends CardImpl {
public UndeadWarchief(UUID ownerId) {
public UndeadWarchief(final UndeadWarchief card) {
public UndeadWarchief copy() {return new UndeadWarchief(this);
public class VedalkenEngineer extends CardImpl {
public VedalkenEngineer(UUID ownerId) {
public VedalkenEngineer(final VedalkenEngineer card) {
public VedalkenEngineer copy() {return new VedalkenEngineer(this);
class VedalkenEngineerManaBuilder extends ConditionalManaBuilder {return new VedalkenEngineerConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast artifact spells or activate abilities of artifacts";
class VedalkenEngineerConditionalMana extends ConditionalMana {
public VedalkenEngineerConditionalMana(Mana mana) {
class VedalkenEngineerManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
class VedalkenEngineerAbility extends ManaAbility {
public VedalkenEngineerAbility(Cost cost, int amount, ConditionalManaBuilder manaBuilder) {
public VedalkenEngineerAbility(final VedalkenEngineerAbility ability) {
public VedalkenEngineerAbility copy() {return new VedalkenEngineerAbility(this);
class VedalkenEngineerEffect extends ManaEffect {
public VedalkenEngineerEffect(int amount, ConditionalManaBuilder manaBuilder) {
public VedalkenEngineerEffect(final VedalkenEngineerEffect effect) {
public VedalkenEngineerEffect copy() {return new VedalkenEngineerEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public Mana getMana(Game game, Ability source) {return null;
public class WitheredWretch extends CardImpl {
public WitheredWretch(UUID ownerId) {
public WitheredWretch(final WitheredWretch card) {
public WitheredWretch copy() {return new WitheredWretch(this);
public class WizardReplica extends CardImpl {
public WizardReplica(UUID ownerId) {
public WizardReplica(final WizardReplica card) {
public WizardReplica copy() {return new WizardReplica(this);return new ArmoredGriffin(this);
public class BalefulStrix extends CardImpl {
public BalefulStrix(UUID ownerId) {
public BalefulStrix(final BalefulStrix card) {
public BalefulStrix copy() {return new BalefulStrix(this);
public class BeetlebackChief extends CardImpl {
public BeetlebackChief(UUID ownerId) {
public BeetlebackChief(final BeetlebackChief card) {
public BeetlebackChief copy() {return new BeetlebackChief(this);
public class BrindleShoat extends CardImpl {
public BrindleShoat(UUID ownerId) {
public BrindleShoat(final BrindleShoat card) {
public BrindleShoat copy() {return new BrindleShoat(this);
class BoarToken extends Token {
BoarToken() {
public class DragonlairSpider extends CardImpl {
public DragonlairSpider(UUID ownerId) {
public DragonlairSpider(final DragonlairSpider card) {
public DragonlairSpider copy() {return new DragonlairSpider(this);
public class DreampodDruid extends CardImpl {
public DreampodDruid(UUID ownerId) {
public DreampodDruid(final DreampodDruid card) {
public DreampodDruid copy() {return new DreampodDruid(this);
public class ElderwoodScion extends CardImpl {
public ElderwoodScion(UUID ownerId) {
public ElderwoodScion(final ElderwoodScion card) {
public ElderwoodScion copy() {return new ElderwoodScion(this);
ElderwoodScionCostReductionEffect() {
ElderwoodScionCostReductionEffect(ElderwoodScionCostReductionEffect effect) {return true;return true;return false;
public ElderwoodScionCostReductionEffect copy() {return new ElderwoodScionCostReductionEffect(this);
ElderwoodScionCostReductionEffect2() {
ElderwoodScionCostReductionEffect2(ElderwoodScionCostReductionEffect2 effect) {return true;return true;return false;
public ElderwoodScionCostReductionEffect2 copy() {return new ElderwoodScionCostReductionEffect2(this);
public class ErraticExplosion extends CardImpl {
public ErraticExplosion(UUID ownerId) {
public ErraticExplosion(final ErraticExplosion card) {
public ErraticExplosion copy() {return new ErraticExplosion(this);
class ErraticExplosionEffect extends OneShotEffect {
public ErraticExplosionEffect() {
public ErraticExplosionEffect(ErraticExplosionEffect effect) {
public ErraticExplosionEffect copy() {return new ErraticExplosionEffect(this);
public boolean apply(Game game, Ability source) {return controller.putCardsOnBottomOfLibrary(toReveal, game, source, true);return false;
public class EtheriumHornSorcerer extends CardImpl {
public EtheriumHornSorcerer(UUID ownerId) {
public EtheriumHornSorcerer(final EtheriumHornSorcerer card) {
public EtheriumHornSorcerer copy() {return new EtheriumHornSorcerer(this);
public class FelidarUmbra extends CardImpl {
public FelidarUmbra(UUID ownerId) {
public FelidarUmbra(final FelidarUmbra card) {
public FelidarUmbra copy() {return new FelidarUmbra(this);
public class IllusoryAngel extends CardImpl {
public IllusoryAngel(UUID ownerId) {
public IllusoryAngel(final IllusoryAngel card) {
public IllusoryAngel copy() {return new IllusoryAngel(this);
public class IndrikUmbra extends CardImpl {
public IndrikUmbra(UUID ownerId) {
public IndrikUmbra(final IndrikUmbra card) {
public IndrikUmbra copy() {return new IndrikUmbra(this);
public class InkfathomWitch extends CardImpl {
public InkfathomWitch(UUID ownerId) {
public InkfathomWitch(final InkfathomWitch card) {
public InkfathomWitch copy() {return new InkfathomWitch(this);
public class KrondTheDawnClad extends CardImpl {
public KrondTheDawnClad(UUID ownerId) {
public KrondTheDawnClad(final KrondTheDawnClad card) {
public KrondTheDawnClad copy() {return new KrondTheDawnClad(this);
public class MaelstromWanderer extends CardImpl {
public MaelstromWanderer(UUID ownerId) {
public MaelstromWanderer(final MaelstromWanderer card) {
public MaelstromWanderer copy() {return new MaelstromWanderer(this);
public class MassMutiny extends CardImpl {
public MassMutiny(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public MassMutiny(final MassMutiny card) {
public MassMutiny copy() {return new MassMutiny(this);
class MassMutinyEffect extends OneShotEffect {
public MassMutinyEffect() {
public MassMutinyEffect(final MassMutinyEffect effect) {
public MassMutinyEffect copy() {return new MassMutinyEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class NoggleRansacker extends CardImpl {
public NoggleRansacker(UUID ownerId) {
public NoggleRansacker(final NoggleRansacker card) {
public NoggleRansacker copy() {return new NoggleRansacker(this);
public class NullmageAdvocate extends CardImpl {
public NullmageAdvocate(UUID ownerId) {
public NullmageAdvocate(final NullmageAdvocate card) {
public NullmageAdvocate copy() {return new NullmageAdvocate(this);
public class PenumbraSpider extends CardImpl {
public PenumbraSpider(UUID ownerId) {
public PenumbraSpider(final PenumbraSpider card) {
public PenumbraSpider copy() {return new PenumbraSpider(this);
class SpiderToken extends Token {
public SpiderToken() {
public class PollenbrightWings extends CardImpl {
public PollenbrightWings(UUID ownerId) {
public PollenbrightWings(final PollenbrightWings card) {
public PollenbrightWings copy() {return new PollenbrightWings(this);
class PollenbrightWingsAbility extends TriggeredAbilityImpl {
public PollenbrightWingsAbility() {
public PollenbrightWingsAbility(final PollenbrightWingsAbility ability) {
public PollenbrightWingsAbility copy() {return new PollenbrightWingsAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever enchanted creature deals combat damage to a player, put that many 1/1 green Saproling creature tokens onto the battlefield.";
class PollenbrightWingsEffect extends OneShotEffect {
public PollenbrightWingsEffect() {
public PollenbrightWingsEffect(final PollenbrightWingsEffect effect) {
public PollenbrightWingsEffect copy() {return new PollenbrightWingsEffect(this);
public boolean apply(Game game, Ability source) {return (new CreateTokenEffect(new SaprolingToken(), damage.intValue()).apply(game, source));return false;
public class PreyseizerDragon extends CardImpl {
public PreyseizerDragon(UUID ownerId) {
public PreyseizerDragon(final PreyseizerDragon card) {
public PreyseizerDragon copy() {return new PreyseizerDragon(this);
public class PrimalPlasma extends CardImpl {
public PrimalPlasma(UUID ownerId) {
public PrimalPlasma(final PrimalPlasma card) {
public PrimalPlasma copy() {return new PrimalPlasma(this);
class PrimalPlasmaReplacementEffect extends ReplacementEffectImpl {
public PrimalPlasmaReplacementEffect() {
public PrimalPlasmaReplacementEffect(PrimalPlasmaReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(EventType.ENTERS_THE_BATTLEFIELD);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return false;
public PrimalPlasmaReplacementEffect copy() {return new PrimalPlasmaReplacementEffect(this);
public class QuietDisrepair extends CardImpl {
public QuietDisrepair(UUID ownerId) {
public QuietDisrepair(final QuietDisrepair card) {
public QuietDisrepair copy() {return new QuietDisrepair(this);
public class RivalsDuel extends CardImpl {
public RivalsDuel(UUID ownerId) {
public RivalsDuel(final RivalsDuel card) {
public RivalsDuel copy() {return new RivalsDuel(this);return new TargetCreaturePermanentWithDifferentTypes(this);
public boolean canTarget(UUID id, Game game) {return false;return true;return false;
class RivalsDuelFightTargetsEffect extends OneShotEffect {
public RivalsDuelFightTargetsEffect() {
public RivalsDuelFightTargetsEffect(final RivalsDuelFightTargetsEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public RivalsDuelFightTargetsEffect copy() {return new RivalsDuelFightTargetsEffect(this);
public class SaiOfTheShinobi extends CardImpl {
public SaiOfTheShinobi(UUID ownerId) {
public SaiOfTheShinobi(final SaiOfTheShinobi card) {
public SaiOfTheShinobi copy() {return new SaiOfTheShinobi(this);
public class SakashimasStudent extends CardImpl {
public SakashimasStudent(UUID ownerId) {
public SakashimasStudent(final SakashimasStudent card) {
public SakashimasStudent copy() {return new SakashimasStudent(this);
public class ShardlessAgent extends CardImpl {
public ShardlessAgent(UUID ownerId) {
public ShardlessAgent(final ShardlessAgent card) {
public ShardlessAgent copy() {return new ShardlessAgent(this);
public class SilentBladeOni extends CardImpl {
public SilentBladeOni(UUID ownerId) {
public SilentBladeOni(final SilentBladeOni card) {
public SilentBladeOni copy() {return new SilentBladeOni(this);
class SilentBladeOniEffect extends OneShotEffect {
public SilentBladeOniEffect() {
public SilentBladeOniEffect(final SilentBladeOniEffect effect) {
public SilentBladeOniEffect copy() {return new SilentBladeOniEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TaintedIsle extends CardImpl {
public TaintedIsle(UUID ownerId) {
public TaintedIsle(final TaintedIsle card) {
public TaintedIsle copy() {return new TaintedIsle(this);
public class ThreeDreams extends CardImpl {
public ThreeDreams(UUID ownerId) {
public ThreeDreams(final ThreeDreams card) {
public ThreeDreams copy() {return new ThreeDreams(this);
class ThreeDreamsTarget extends TargetCardInLibrary {
public ThreeDreamsTarget() {
public ThreeDreamsTarget(final ThreeDreamsTarget target) {
public ThreeDreamsTarget copy() {return new ThreeDreamsTarget(this);
public boolean canTarget(UUID id, Cards cards, Game game) {return false;return filter.match(card, game);return false;
public class ThromokTheInsatiable extends CardImpl {
public ThromokTheInsatiable(UUID ownerId) {
public ThromokTheInsatiable(final ThromokTheInsatiable card) {
public ThromokTheInsatiable copy() {return new ThromokTheInsatiable(this);
public class VelaTheNightClad extends CardImpl {
public VelaTheNightClad(UUID ownerId) {
public VelaTheNightClad(final VelaTheNightClad card) {
public VelaTheNightClad copy() {return new VelaTheNightClad(this);
public class AlphaKavu extends CardImpl {
public AlphaKavu(UUID ownerId) {
public AlphaKavu(final AlphaKavu card) {
public AlphaKavu copy() {return new AlphaKavu(this);
public class AncientSpider extends CardImpl {
public AncientSpider(UUID ownerId) {
public AncientSpider(final AncientSpider card) {
public AncientSpider copy() {return new AncientSpider(this);
public class ArcticMerfolk extends CardImpl {
public ArcticMerfolk(UUID ownerId) {
public ArcticMerfolk(final ArcticMerfolk card) {
public ArcticMerfolk copy() {return new ArcticMerfolk(this);
public class AuraBlast extends CardImpl {
public AuraBlast(UUID ownerId) {
public AuraBlast(final AuraBlast card) {
public AuraBlast copy() {return new AuraBlast(this);return new AuroraGriffin(this);
public class BogDown extends CardImpl {
public BogDown(UUID ownerId) {
public BogDown(final BogDown card) {
public BogDown copy() {return new BogDown(this);
public class CalderaKavu extends CardImpl {
public CalderaKavu(UUID ownerId) {
public CalderaKavu(final CalderaKavu card) {
public CalderaKavu copy() {return new CalderaKavu(this);
public class CavernHarpy extends CardImpl {
public CavernHarpy(UUID ownerId) {
public CavernHarpy(final CavernHarpy card) {
public CavernHarpy copy() {return new CavernHarpy(this);
public class CloudCover extends CardImpl {
public CloudCover(UUID ownerId) {
public CloudCover(final CloudCover card) {
public CloudCover copy() {return new CloudCover(this);
class CloudCoverAbility extends TriggeredAbilityImpl {
public CloudCoverAbility() {
public CloudCoverAbility(final CloudCoverAbility ability) {
public CloudCoverAbility copy() {return new CloudCoverAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever another permanent you control becomes the target of a spell or ability an opponent controls, you may return that permanent to its owner's hand.";
public class Confound extends CardImpl {
public Confound(UUID ownerId) {
public Confound(final Confound card) {
public Confound copy() {return new Confound(this);
public class CrosissCatacombs extends CardImpl {
public CrosissCatacombs(UUID ownerId) {
public CrosissCatacombs(final CrosissCatacombs card) {
public CrosissCatacombs copy() {return new CrosissCatacombs(this);
public class DarigaazsCaldera extends CardImpl {
public DarigaazsCaldera(UUID ownerId) {
public DarigaazsCaldera(final DarigaazsCaldera card) {
public DarigaazsCaldera copy() {return new DarigaazsCaldera(this);
public class DarigaazsCharm extends CardImpl {
public DarigaazsCharm(UUID ownerId) {
public DarigaazsCharm(final DarigaazsCharm card) {
public DarigaazsCharm copy() {return new DarigaazsCharm(this);
public class DaringLeap extends CardImpl {
public DaringLeap(UUID ownerId) {
public DaringLeap(final DaringLeap card) {
public DaringLeap copy() {return new DaringLeap(this);
public class Deadapult extends CardImpl {
public Deadapult(UUID ownerId) {
public Deadapult(final Deadapult card) {
public Deadapult copy() {return new Deadapult(this);
public class DeathBomb extends CardImpl {
public DeathBomb(UUID ownerId) {
public DeathBomb(final DeathBomb card) {
public DeathBomb copy() {return new DeathBomb(this);
public class DestructiveFlow extends CardImpl {
public DestructiveFlow(UUID ownerId) {
public DestructiveFlow(final DestructiveFlow card) {
public DestructiveFlow copy() {return new DestructiveFlow(this);
public class DiabolicIntent extends CardImpl {
public DiabolicIntent(UUID ownerId) {
public DiabolicIntent(final DiabolicIntent card) {
public DiabolicIntent copy() {return new DiabolicIntent(this);
public class DralnusPet extends CardImpl {
public DralnusPet(UUID ownerId) {
public DralnusPet(final DralnusPet card) {
public DralnusPet copy() {return new DralnusPet(this);
class DralnusPetEffect extends OneShotEffect {
public DralnusPetEffect() {
public DralnusPetEffect(final DralnusPetEffect effect) {
public DralnusPetEffect copy() {return new DralnusPetEffect(this);
public boolean apply(Game game, Ability source) {return new AddCountersSourceEffect(CounterType.P1P1.createInstance(cmc), true).apply(game, source);return true;return false;
public class DromarsCavern extends CardImpl {
public DromarsCavern(UUID ownerId) {
public DromarsCavern(final DromarsCavern card) {
public DromarsCavern copy() {return new DromarsCavern(this);
public class EladamrisCall extends CardImpl {
public EladamrisCall(UUID ownerId) {
public EladamrisCall(final EladamrisCall card) {
public EladamrisCall copy() {return new EladamrisCall(this);
public class ErtaisTrickery extends CardImpl {
public ErtaisTrickery(UUID ownerId) {
public ErtaisTrickery(final ErtaisTrickery card) {
public ErtaisTrickery copy() {return new ErtaisTrickery(this);
class ErtaisTrickeryEffect extends CounterTargetEffect {
public ErtaisTrickeryEffect() {
public ErtaisTrickeryEffect(final CounterTargetEffect effect) {
public ErtaisTrickeryEffect copy() {return new ErtaisTrickeryEffect(this);
public boolean apply(Game game, Ability source) {return super.apply(game, source);return false;
public class ErtaiTheCorrupted extends CardImpl {
public ErtaiTheCorrupted(UUID ownerId) {
public ErtaiTheCorrupted(final ErtaiTheCorrupted card) {
public ErtaiTheCorrupted copy() {return new ErtaiTheCorrupted(this);
public class EscapeRoutes extends CardImpl {
public EscapeRoutes(UUID ownerId) {
public EscapeRoutes(final EscapeRoutes card) {
public EscapeRoutes copy() {return new EscapeRoutes(this);
public class ExoticDisease extends CardImpl {
public ExoticDisease(UUID ownerId) {
public ExoticDisease(final ExoticDisease card) {
public ExoticDisease copy() {return new ExoticDisease(this);
public class FallingTimber extends CardImpl {
public FallingTimber(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public FallingTimber(final FallingTimber card) {
public FallingTimber copy() {return new FallingTimber(this);
public class FleetfootPanther extends CardImpl {
public FleetfootPanther(UUID ownerId) {
public FleetfootPanther(final FleetfootPanther card) {
public FleetfootPanther copy() {return new FleetfootPanther(this);
public class ForsakenCity extends CardImpl {
public ForsakenCity(UUID ownerId) {
public ForsakenCity(final ForsakenCity card) {
public ForsakenCity copy() {return new ForsakenCity(this);
public class GaeasMight extends CardImpl {
public GaeasMight(UUID ownerId) {
public GaeasMight(final GaeasMight card) {
public GaeasMight copy() {return new GaeasMight(this);
public class Hobble extends CardImpl {
public Hobble(UUID ownerId) {
public Hobble(final Hobble card) {
public Hobble copy() {return new Hobble(this);
public class HonorableScout extends CardImpl {
public HonorableScout(UUID ownerId) {
public HonorableScout(final HonorableScout card) {
public HonorableScout copy() {return new HonorableScout(this);
public class HornedKavu extends CardImpl {
public HornedKavu(UUID ownerId) {
public HornedKavu(final HornedKavu card) {
public HornedKavu copy() {return new HornedKavu(this);
public class HuntingDrake extends CardImpl {
public HuntingDrake(UUID ownerId) {
public HuntingDrake(final HuntingDrake card) {
public HuntingDrake copy() {return new HuntingDrake(this);
public class Implode extends CardImpl {
public Implode(UUID ownerId) {
public Implode(final Implode card) {
public Implode copy() {return new Implode(this);
public class Insolence extends CardImpl {
public Insolence(UUID ownerId) {
public Insolence(final Insolence card) {
public Insolence copy() {return new Insolence(this);
public class KavuRecluse extends CardImpl {
public KavuRecluse(UUID ownerId) {
public KavuRecluse(final KavuRecluse card) {
public KavuRecluse copy() {return new KavuRecluse(this);
public class LavaZombie extends CardImpl {
public LavaZombie(UUID ownerId) {
public LavaZombie(final LavaZombie card) {
public LavaZombie copy() {return new LavaZombie(this);
public class MaggotCarrier extends CardImpl {
public MaggotCarrier(UUID ownerId) {
public MaggotCarrier(final MaggotCarrier card) {
public MaggotCarrier copy() {return new MaggotCarrier(this);
public class MagmaBurst extends CardImpl {
public MagmaBurst(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public MagmaBurst(final MagmaBurst card) {
public MagmaBurst copy() {return new MagmaBurst(this);
public class MagnigothTreefolk extends CardImpl {
public MagnigothTreefolk(UUID ownerId) {
public MagnigothTreefolk(final MagnigothTreefolk card) {
public MagnigothTreefolk copy() {return new MagnigothTreefolk(this);
public class MaliciousAdvice extends CardImpl {
public MaliciousAdvice(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public MaliciousAdvice(final MaliciousAdvice card) {
public MaliciousAdvice copy() {return new MaliciousAdvice(this);
public class MarchOfSouls extends CardImpl {
public MarchOfSouls(UUID ownerId) {
public MarchOfSouls(final MarchOfSouls card) {
public MarchOfSouls copy() {return new MarchOfSouls(this);
class MarchOfSoulsEffect extends OneShotEffect {
public MarchOfSoulsEffect() {
public MarchOfSoulsEffect(final MarchOfSoulsEffect effect) {
public MarchOfSoulsEffect copy() {return new MarchOfSoulsEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class MarshCrocodile extends CardImpl {
public MarshCrocodile(UUID ownerId) {
public MarshCrocodile(final MarshCrocodile card) {
public MarshCrocodile copy() {return new MarshCrocodile(this);
public class MeteorCrater extends CardImpl {
public MeteorCrater(UUID ownerId) {
public MeteorCrater(final MeteorCrater card) {
public MeteorCrater copy() {return new MeteorCrater(this);
class MeteorCraterEffect extends ManaEffect {
public MeteorCraterEffect() {
public MeteorCraterEffect(final MeteorCraterEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;return true;
public List<Mana> getNetMana(Game game, Ability source) {return netManas;
private Mana getManaTypes(Game game, Ability source) {return types;
public Mana getMana(Game game, Ability source) {return null;
public MeteorCraterEffect copy() {return new MeteorCraterEffect(this);
public class MireKavu extends CardImpl {
public MireKavu(UUID ownerId) {
public MireKavu(final MireKavu card) {
public MireKavu copy() {return new MireKavu(this);
public class MoggJailer extends CardImpl {
public MoggJailer(UUID ownerId) {
public MoggJailer(final MoggJailer card) {
public MoggJailer copy() {return new MoggJailer(this);
public class MorgueToad extends CardImpl {
public MorgueToad(UUID ownerId) {
public MorgueToad(final MorgueToad card) {
public MorgueToad copy() {return new MorgueToad(this);
public class MultanisHarmony extends CardImpl {
public MultanisHarmony(UUID ownerId) {
public MultanisHarmony(final MultanisHarmony card) {
public MultanisHarmony copy() {return new MultanisHarmony(this);
public class NaturalEmergence extends CardImpl {
public NaturalEmergence(UUID ownerId) {effect.setText("return a red or green enchantment you control to its owner's hand");
public NaturalEmergence(final NaturalEmergence card) {
public NaturalEmergence copy() {return new NaturalEmergence(this);
class NaturalEmergenceToken extends Token {
public NaturalEmergenceToken() {
public class NemataGroveGuardian extends CardImpl {
public NemataGroveGuardian(UUID ownerId) {
public NemataGroveGuardian(final NemataGroveGuardian card) {
public NemataGroveGuardian copy() {return new NemataGroveGuardian(this);
public class NightscapeBattlemage extends CardImpl {
public NightscapeBattlemage(UUID ownerId) {"When {this} enters the battlefield, if it was kicked with its {2}{U} kicker, return up to two target nonblack creatures to their owners' hands."));
public NightscapeBattlemage(final NightscapeBattlemage card) {
public NightscapeBattlemage copy() {return new NightscapeBattlemage(this);
public class NightscapeFamiliar extends CardImpl {
public NightscapeFamiliar(UUID ownerId) {
public NightscapeFamiliar(final NightscapeFamiliar card) {
public NightscapeFamiliar copy() {return new NightscapeFamiliar(this);
public class OrimsChant extends CardImpl {
public OrimsChant(UUID ownerId) {
public OrimsChant(final OrimsChant card) {
public OrimsChant copy() {return new OrimsChant(this);
public OrimsChantCantCastEffect() {
public OrimsChantCantCastEffect(final OrimsChantCantCastEffect effect) {
public OrimsChantCantCastEffect copy() {return new OrimsChantCantCastEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return GameEvent.EventType.CAST_SPELL.equals(event.getType());
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(getTargetPointer().getFirst(game, source));
class OrimsChantEffect extends OneShotEffect {
public OrimsChantEffect() {
public OrimsChantEffect(final OrimsChantEffect effect) {
public OrimsChantEffect copy() {return new OrimsChantEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PhyrexianBloodstock extends CardImpl {
public PhyrexianBloodstock(UUID ownerId) {
public PhyrexianBloodstock(final PhyrexianBloodstock card) {
public PhyrexianBloodstock copy() {return new PhyrexianBloodstock(this);
public class PlaneswalkersFavor extends CardImpl {
public PlaneswalkersFavor(UUID ownerId) {
public PlaneswalkersFavor(final PlaneswalkersFavor card) {
public PlaneswalkersFavor copy() {return new PlaneswalkersFavor(this);
class PlaneswalkersFavorEffect extends OneShotEffect {
public PlaneswalkersFavorEffect() {
public PlaneswalkersFavorEffect(final PlaneswalkersFavorEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PlaneswalkersFavorEffect copy() {return new PlaneswalkersFavorEffect(this);
public class PlaneswalkersFury extends CardImpl {
public PlaneswalkersFury(UUID ownerId) {
public PlaneswalkersFury(final PlaneswalkersFury card) {
public PlaneswalkersFury copy() {return new PlaneswalkersFury(this);
class PlaneswalkersFuryEffect extends OneShotEffect {
public PlaneswalkersFuryEffect() {
public PlaneswalkersFuryEffect(final PlaneswalkersFuryEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PlaneswalkersFuryEffect copy() {return new PlaneswalkersFuryEffect(this);
public class PlaneswalkersMirth extends CardImpl {
public PlaneswalkersMirth(UUID ownerId) {
public PlaneswalkersMirth(final PlaneswalkersMirth card) {
public PlaneswalkersMirth copy() {return new PlaneswalkersMirth(this);
class PlaneswalkersMirthEffect extends OneShotEffect {
public PlaneswalkersMirthEffect() {
public PlaneswalkersMirthEffect(final PlaneswalkersMirthEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PlaneswalkersMirthEffect copy() {return new PlaneswalkersMirthEffect(this);
public class PlaneswalkersScorn extends CardImpl {
public PlaneswalkersScorn(UUID ownerId) {
public PlaneswalkersScorn(final PlaneswalkersScorn card) {
public PlaneswalkersScorn copy() {return new PlaneswalkersScorn(this);
class PlaneswalkersScornEffect extends OneShotEffect {
public PlaneswalkersScornEffect() {
public PlaneswalkersScornEffect(final PlaneswalkersScornEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PlaneswalkersScornEffect copy() {return new PlaneswalkersScornEffect(this);
public class PollenRemedy extends CardImpl {
public PollenRemedy(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public PollenRemedy(final PollenRemedy card) {
public PollenRemedy copy() {return new PollenRemedy(this);
public class PrimalGrowth extends CardImpl {
public PrimalGrowth(UUID ownerId) {
public PrimalGrowth(final PrimalGrowth card) {
public PrimalGrowth copy() {return new PrimalGrowth(this);
public class PygmyKavu extends CardImpl {
public PygmyKavu(UUID ownerId) {
public PygmyKavu(final PygmyKavu card) {
public PygmyKavu copy() {return new PygmyKavu(this);
public class QuirionExplorer extends CardImpl {
public QuirionExplorer(UUID ownerId) {
public QuirionExplorer(final QuirionExplorer card) {
public QuirionExplorer copy() {return new QuirionExplorer(this);
public class RadiantKavu extends CardImpl {
public RadiantKavu(UUID ownerId) {
public RadiantKavu(final RadiantKavu card) {
public RadiantKavu copy() {return new RadiantKavu(this);
public class RazingSnidd extends CardImpl {
public RazingSnidd(UUID ownerId) {
public RazingSnidd(final RazingSnidd card) {
public RazingSnidd copy() {return new RazingSnidd(this);
public class RithsCharm extends CardImpl {
public RithsCharm(UUID ownerId) {
public RithsCharm(final RithsCharm card) {
public RithsCharm copy() {return new RithsCharm(this);
public class RithsGrove extends CardImpl {
public RithsGrove(UUID ownerId) {
public RithsGrove(final RithsGrove card) {
public RithsGrove copy() {return new RithsGrove(this);
public class RushingRiver extends CardImpl {
public RushingRiver(UUID ownerId) {"If {this} was kicked, return another target nonland permanent to its owner's hand");
public void adjustTargets(Ability ability, Game game) {
public RushingRiver(final RushingRiver card) {
public RushingRiver copy() {return new RushingRiver(this);
class TargetOtherNonlandPermanent extends TargetNonlandPermanent {
public TargetOtherNonlandPermanent(FilterNonlandPermanent filter) {
public TargetOtherNonlandPermanent(final TargetOtherNonlandPermanent target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return false;return super.canTarget(controllerId, id, source, game);
public TargetOtherNonlandPermanent copy() {return new TargetOtherNonlandPermanent(this);
public class SamiteElder extends CardImpl {
public SamiteElder(UUID ownerId) {
public SamiteElder(final SamiteElder card) {
public SamiteElder copy() {return new SamiteElder(this);
class SamiteElderEffect extends OneShotEffect {
public SamiteElderEffect() {
public SamiteElderEffect(final SamiteElderEffect effect) {
public SamiteElderEffect copy() {return new SamiteElderEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SamitePilgrim extends CardImpl {
public SamitePilgrim(UUID ownerId) {
public SamitePilgrim(final SamitePilgrim card) {
public SamitePilgrim copy() {return new SamitePilgrim(this);
class SamitePilgrimPreventDamageToTargetEffect extends PreventionEffectImpl {
public SamitePilgrimPreventDamageToTargetEffect() {
public SamitePilgrimPreventDamageToTargetEffect(final SamitePilgrimPreventDamageToTargetEffect effect) {
public SamitePilgrimPreventDamageToTargetEffect copy() {return new SamitePilgrimPreventDamageToTargetEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return !this.used && super.applies(event, source, game) && event.getTargetId().equals(source.getFirstTarget());
public class SeaSnidd extends CardImpl {
public SeaSnidd(UUID ownerId) {
public SeaSnidd(final SeaSnidd card) {
public SeaSnidd copy() {return new SeaSnidd(this);return new ShiftingSky(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;return new ShiftingSkyEffect(this);
public class ShriekOfDread extends CardImpl {
public ShriekOfDread(UUID ownerId) {
public ShriekOfDread(final ShriekOfDread card) {
public ShriekOfDread copy() {return new ShriekOfDread(this);
public class SisaysIngenuity extends CardImpl {
public SisaysIngenuity(UUID ownerId) {
public SisaysIngenuity(final SisaysIngenuity card) {
public SisaysIngenuity copy() {return new SisaysIngenuity(this);
public class SkyshipWeatherlight extends CardImpl {
public SkyshipWeatherlight(UUID ownerId) {
public SkyshipWeatherlight(final SkyshipWeatherlight card) {
public SkyshipWeatherlight copy() {return new SkyshipWeatherlight(this);
class SkyshipWeatherlightEffect extends SearchEffect {
public SkyshipWeatherlightEffect() {
public SkyshipWeatherlightEffect(final SkyshipWeatherlightEffect effect) {
public SkyshipWeatherlightEffect copy() {return new SkyshipWeatherlightEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class SkyshipWeatherlightEffect2 extends OneShotEffect {
public SkyshipWeatherlightEffect2() {
public SkyshipWeatherlightEffect2(final SkyshipWeatherlightEffect2 effect) {
public SkyshipWeatherlightEffect2 copy() {return new SkyshipWeatherlightEffect2(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SkyshroudBlessing extends CardImpl {
public SkyshroudBlessing(UUID ownerId) {
public SkyshroudBlessing(final SkyshroudBlessing card) {
public SkyshroudBlessing copy() {return new SkyshroudBlessing(this);
public class SleepingPotion extends CardImpl {
public SleepingPotion(UUID ownerId) {
public SleepingPotion(final SleepingPotion card) {
public SleepingPotion copy() {return new SleepingPotion(this);
public class SlingshotGoblin extends CardImpl {
public SlingshotGoblin(UUID ownerId) {
public SlingshotGoblin(final SlingshotGoblin card) {
public SlingshotGoblin copy() {return new SlingshotGoblin(this);
public class Sparkcaster extends CardImpl {
public Sparkcaster(UUID ownerId) {
public Sparkcaster(final Sparkcaster card) {
public Sparkcaster copy() {return new Sparkcaster(this);
public class SteelLeafPaladin extends CardImpl {
public SteelLeafPaladin(UUID ownerId) {
public SteelLeafPaladin(final SteelLeafPaladin card) {
public SteelLeafPaladin copy() {return new SteelLeafPaladin(this);
public class StoneKavu extends CardImpl {
public StoneKavu(UUID ownerId) {
public StoneKavu(final StoneKavu card) {
public StoneKavu copy() {return new StoneKavu(this);
public class Strafe extends CardImpl {
public Strafe(UUID ownerId) {
public Strafe(final Strafe card) {
public Strafe copy() {return new Strafe(this);return new Stratadon(this);return true;return abilityToModify.getSourceId().equals(source.getSourceId());return new StratadonCostReductionEffect(this);
public class SunkenHope extends CardImpl {
public SunkenHope(UUID ownerId) {
public SunkenHope(final SunkenHope card) {
public SunkenHope copy() {return new SunkenHope(this);
class ReturnToHandEffect extends OneShotEffect {
public ReturnToHandEffect() {staticText = "that player returns a creature he or she controls to its owner's hand";
public ReturnToHandEffect(final ReturnToHandEffect effect) {
public ReturnToHandEffect copy() {return new ReturnToHandEffect(this);
public boolean apply(Game game, Ability source) {return false;return result;
public class SunscapeBattlemage extends CardImpl {
public SunscapeBattlemage(UUID ownerId) {
public SunscapeBattlemage(final SunscapeBattlemage card) {
public SunscapeBattlemage copy() {return new SunscapeBattlemage(this);
public class SunscapeFamiliar extends CardImpl {
public SunscapeFamiliar(UUID ownerId) {
public SunscapeFamiliar(final SunscapeFamiliar card) {
public SunscapeFamiliar copy() {return new SunscapeFamiliar(this);
public class TahngarthTalruumHero extends CardImpl {
public TahngarthTalruumHero(UUID ownerId) {
public TahngarthTalruumHero(final TahngarthTalruumHero card) {
public TahngarthTalruumHero copy() {return new TahngarthTalruumHero(this);
public class TerminalMoraine extends CardImpl {
public TerminalMoraine(UUID ownerId) {
public TerminalMoraine(final TerminalMoraine card) {
public TerminalMoraine copy() {return new TerminalMoraine(this);
public class ThornscapeFamiliar extends CardImpl {
public ThornscapeFamiliar(UUID ownerId) {
public ThornscapeFamiliar(final ThornscapeFamiliar card) {
public ThornscapeFamiliar copy() {return new ThornscapeFamiliar(this);
public class ThunderscapeFamiliar extends CardImpl {
public ThunderscapeFamiliar(UUID ownerId) {
public ThunderscapeFamiliar(final ThunderscapeFamiliar card) {
public ThunderscapeFamiliar copy() {return new ThunderscapeFamiliar(this);
public class TrevasCharm extends CardImpl {
public TrevasCharm(UUID ownerId) {
public TrevasCharm(final TrevasCharm card) {
public TrevasCharm copy() {return new TrevasCharm(this);
public class VoiceOfAll extends CardImpl {
public VoiceOfAll(UUID ownerId) {
public VoiceOfAll(final VoiceOfAll card) {
public VoiceOfAll copy() {return new VoiceOfAll(this);
public class VolcanoImp extends CardImpl {
public VolcanoImp(UUID ownerId) {
public VolcanoImp(final VolcanoImp card) {
public VolcanoImp copy() {return new VolcanoImp(this);
public class WaterspoutElemental extends CardImpl {
public WaterspoutElemental(UUID ownerId) {"When {this} enters the battlefield, if it was kicked, return all other creatures to their owners' hands and you skip your next turn"));
public WaterspoutElemental(final WaterspoutElemental card) {
public WaterspoutElemental copy() {return new WaterspoutElemental(this);
public class AlabasterDragon extends CardImpl {
public AlabasterDragon(UUID ownerId) {
public AlabasterDragon(final AlabasterDragon card) {
public AlabasterDragon copy() {return new AlabasterDragon(this);
public class AlluringScent extends CardImpl {
public AlluringScent(UUID ownerId) {
public AlluringScent(final AlluringScent card) {
public AlluringScent copy() {return new AlluringScent(this);
public class ArrogantVampire extends CardImpl {
public ArrogantVampire(UUID ownerId) {
public ArrogantVampire(final ArrogantVampire card) {
public ArrogantVampire copy() {return new ArrogantVampire(this);
public class BeeSting extends CardImpl {
public BeeSting(UUID ownerId) {
public BeeSting(final BeeSting card) {
public BeeSting copy() {return new BeeSting(this);
public class BorderGuard extends CardImpl {
public BorderGuard(UUID ownerId) {
public BorderGuard(final BorderGuard card) {
public BorderGuard copy() {return new BorderGuard(this);
public class BurningCloak extends CardImpl {
public BurningCloak(UUID ownerId) {
public BurningCloak(final BurningCloak card) {
public BurningCloak copy() {return new BurningCloak(this);
public class CapriciousSorcerer extends CardImpl {
public CapriciousSorcerer(UUID ownerId) {
public CapriciousSorcerer(final CapriciousSorcerer card) {
public CapriciousSorcerer copy() {return new CapriciousSorcerer(this);
public class ChargingBandits extends CardImpl {
public ChargingBandits(UUID ownerId) {
public ChargingBandits(final ChargingBandits card) {
public ChargingBandits copy() {return new ChargingBandits(this);
public class CloakOfFeathers extends CardImpl {
public CloakOfFeathers(UUID ownerId) {
public CloakOfFeathers(final CloakOfFeathers card) {
public CloakOfFeathers copy() {return new CloakOfFeathers(this);
public class CloudPirates extends CardImpl {
public CloudPirates(UUID ownerId) {
public CloudPirates(final CloudPirates card) {
public CloudPirates copy() {return new CloudPirates(this);
public class CravenKnight extends CardImpl {
public CravenKnight(UUID ownerId) {
public CravenKnight(final CravenKnight card) {
public CravenKnight copy() {return new CravenKnight(this);
public class CruelTutor extends CardImpl {
public CruelTutor(UUID ownerId) {
public CruelTutor(final CruelTutor card) {
public CruelTutor copy() {return new CruelTutor(this);
public class DeepSeaSerpent extends CardImpl {
public DeepSeaSerpent(UUID ownerId) {
public DeepSeaSerpent(final DeepSeaSerpent card) {
public DeepSeaSerpent copy() {return new DeepSeaSerpent(this);
public class DejaVu extends CardImpl {
public DejaVu(UUID ownerId) {
public DejaVu(final DejaVu card) {
public DejaVu copy() {return new DejaVu(this);
public class DesertDrake extends CardImpl {
public DesertDrake(UUID ownerId) {
public DesertDrake(final DesertDrake card) {
public DesertDrake copy() {return new DesertDrake(this);
public class DjinnOfTheLamp extends CardImpl {
public DjinnOfTheLamp(UUID ownerId) {
public DjinnOfTheLamp(final DjinnOfTheLamp card) {
public DjinnOfTheLamp copy() {return new DjinnOfTheLamp(this);
public class EliteCatWarrior1 extends CardImpl {
public EliteCatWarrior1(UUID ownerId) {
public EliteCatWarrior1(final EliteCatWarrior1 card) {
public EliteCatWarrior1 copy() {return new EliteCatWarrior1(this);
public class ElvishRanger extends CardImpl {
public ElvishRanger(UUID ownerId) {
public ElvishRanger(final ElvishRanger card) {
public ElvishRanger copy() {return new ElvishRanger(this);
public class FinalStrike extends CardImpl {
public FinalStrike(UUID ownerId) {
public FinalStrike(final FinalStrike card) {
public FinalStrike copy() {return new FinalStrike(this);
public class FireDragon extends CardImpl {
public FireDragon(UUID ownerId) {
public FireDragon(final FireDragon card) {
public FireDragon copy() {return new FireDragon(this);
public class FireImp extends CardImpl {
public FireImp(UUID ownerId) {
public FireImp(final FireImp card) {
public FireImp copy() {return new FireImp(this);
public class FireSnake extends CardImpl {
public FireSnake(UUID ownerId) {
public FireSnake(final FireSnake card) {
public FireSnake copy() {return new FireSnake(this);
public class FireTempest extends CardImpl {
public FireTempest(UUID ownerId) {
public FireTempest(final FireTempest card) {
public FireTempest copy() {return new FireTempest(this);
public class FleetFootedMonk extends CardImpl {
public FleetFootedMonk(UUID ownerId) {
public FleetFootedMonk(final FleetFootedMonk card) {
public FleetFootedMonk copy() {return new FleetFootedMonk(this);
public class Fruition extends CardImpl {
public Fruition(UUID ownerId) {
public Fruition(final Fruition card) {
public Fruition copy() {return new Fruition(this);
public class GoblinBully extends CardImpl {
public GoblinBully(UUID ownerId) {
public GoblinBully(final GoblinBully card) {
public GoblinBully copy() {return new GoblinBully(this);
public class HighlandGiant extends CardImpl {
public HighlandGiant(UUID ownerId) {
public HighlandGiant(final HighlandGiant card) {
public HighlandGiant copy() {return new HighlandGiant(this);
public class IngeniousThief extends CardImpl {
public IngeniousThief(UUID ownerId) {
public IngeniousThief(final IngeniousThief card) {
public IngeniousThief copy() {return new IngeniousThief(this);
public class JungleLion extends CardImpl {
public JungleLion(UUID ownerId) {
public JungleLion(final JungleLion card) {
public JungleLion copy() {return new JungleLion(this);
public class KeenEyedArchers extends CardImpl {
public KeenEyedArchers(UUID ownerId) {
public KeenEyedArchers(final KeenEyedArchers card) {
public KeenEyedArchers copy() {return new KeenEyedArchers(this);
public class KingsAssassin extends CardImpl {
public KingsAssassin(UUID ownerId) {
public KingsAssassin(final KingsAssassin card) {
public KingsAssassin copy() {return new KingsAssassin(this);
public class LavaFlow extends CardImpl {
public LavaFlow(UUID ownerId) {
public LavaFlow(final LavaFlow card) {
public LavaFlow copy() {return new LavaFlow(this);
public class LizardWarrior extends CardImpl {
public LizardWarrior(UUID ownerId) {
public LizardWarrior(final LizardWarrior card) {
public LizardWarrior copy() {return new LizardWarrior(this);
public class MinotaurWarrior extends CardImpl {
public MinotaurWarrior(UUID ownerId) {
public MinotaurWarrior(final MinotaurWarrior card) {
public MinotaurWarrior copy() {return new MinotaurWarrior(this);
public class Mobilize extends CardImpl {
public Mobilize(UUID ownerId) {
public Mobilize(final Mobilize card) {
public Mobilize copy() {return new Mobilize(this);
public class MoonSprite extends CardImpl {
public MoonSprite(UUID ownerId) {
public MoonSprite(final MoonSprite card) {
public MoonSprite copy() {return new MoonSprite(this);
public class MysticDenial extends CardImpl {
public MysticDenial(UUID ownerId) {
public MysticDenial(final MysticDenial card) {
public MysticDenial copy() {return new MysticDenial(this);
public class NoxiousToad extends CardImpl {
public NoxiousToad(UUID ownerId) {
public NoxiousToad(final NoxiousToad card) {
public NoxiousToad copy() {return new NoxiousToad(this);
public class Omen extends CardImpl {
public Omen(UUID ownerId) {
public Omen(final Omen card) {
public Omen copy() {return new Omen(this);
public class OwlFamiliar extends CardImpl {
public OwlFamiliar(UUID ownerId) {
public OwlFamiliar(final OwlFamiliar card) {
public OwlFamiliar copy() {return new OwlFamiliar(this);
public class PersonalTutor extends CardImpl {
public PersonalTutor(UUID ownerId) {
public PersonalTutor(final PersonalTutor card) {
public PersonalTutor copy() {return new PersonalTutor(this);
public class PlantElemental extends CardImpl {
public PlantElemental(UUID ownerId) {
public PlantElemental(final PlantElemental card) {
public PlantElemental copy() {return new PlantElemental(this);
public class RagingCougar extends CardImpl {
public RagingCougar(UUID ownerId) {
public RagingCougar(final RagingCougar card) {
public RagingCougar copy() {return new RagingCougar(this);
public class RagingMinotaur extends CardImpl {
public RagingMinotaur(UUID ownerId) {
public RagingMinotaur(final RagingMinotaur card) {
public RagingMinotaur copy() {return new RagingMinotaur(this);
public class RenewingDawn extends CardImpl {
public RenewingDawn(UUID ownerId) {
public RenewingDawn(final RenewingDawn card) {
public RenewingDawn copy() {return new RenewingDawn(this);
public class RowanTreefolk extends CardImpl {
public RowanTreefolk(UUID ownerId) {
public RowanTreefolk(final RowanTreefolk card) {
public RowanTreefolk copy() {return new RowanTreefolk(this);
public class SacredKnight extends CardImpl {
public SacredKnight(UUID ownerId) {
public SacredKnight(final SacredKnight card) {
public SacredKnight copy() {return new SacredKnight(this);
public class SerpentAssassin extends CardImpl {
public SerpentAssassin(UUID ownerId) {
public SerpentAssassin(final SerpentAssassin card) {
public SerpentAssassin copy() {return new SerpentAssassin(this);
public class SkeletalCrocodile extends CardImpl {
public SkeletalCrocodile(UUID ownerId) {
public SkeletalCrocodile(final SkeletalCrocodile card) {
public SkeletalCrocodile copy() {return new SkeletalCrocodile(this);
public class SkeletalSnake extends CardImpl {
public SkeletalSnake(UUID ownerId) {
public SkeletalSnake(final SkeletalSnake card) {
public SkeletalSnake copy() {return new SkeletalSnake(this);
public class SorcerousSight extends CardImpl {
public SorcerousSight(UUID ownerId) {
public SorcerousSight(final SorcerousSight card) {
public SorcerousSight copy() {return new SorcerousSight(this);
public class StarlitAngel extends CardImpl {
public StarlitAngel(UUID ownerId) {
public StarlitAngel(final StarlitAngel card) {
public StarlitAngel copy() {return new StarlitAngel(this);
public class SternMarshal extends CardImpl {
public SternMarshal(UUID ownerId) {
public SternMarshal(final SternMarshal card) {
public SternMarshal copy() {return new SternMarshal(this);
public class SylvanTutor extends CardImpl {
public SylvanTutor(UUID ownerId) {
public SylvanTutor(final SylvanTutor card) {
public SylvanTutor copy() {return new SylvanTutor(this);
public class SymbolOfUnsummoning extends CardImpl {
public SymbolOfUnsummoning(UUID ownerId) {
public SymbolOfUnsummoning(final SymbolOfUnsummoning card) {
public SymbolOfUnsummoning copy() {return new SymbolOfUnsummoning(this);
public class Taunt extends CardImpl {
public Taunt(UUID ownerId) {
public Taunt(final Taunt card) {
public Taunt copy() {return new Taunt(this);
class TauntEffect extends RequirementEffect {
TauntEffect() {
TauntEffect(final TauntEffect effect) {
public TauntEffect copy() {return new TauntEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getControllerId().equals(this.getTargetPointer().getFirst(game, source));
public boolean isInactive(Ability source, Game game) {return startingTurn != game.getTurnNum() &&
public UUID mustAttackDefender(Ability source, Game game) {return source.getControllerId();
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public class ThunderingWurm extends CardImpl {
public ThunderingWurm(UUID ownerId) {
public ThunderingWurm(final ThunderingWurm card) {
public ThunderingWurm copy() {return new ThunderingWurm(this);
public class Thundermare extends CardImpl {
public Thundermare(UUID ownerId) {
public Thundermare(final Thundermare card) {
public Thundermare copy() {return new Thundermare(this);
public class UndyingBeast extends CardImpl {
public UndyingBeast(UUID ownerId) {
public UndyingBeast(final UndyingBeast card) {
public UndyingBeast copy() {return new UndyingBeast(this);
class UndyingBeastEffect extends OneShotEffect {
public UndyingBeastEffect() {
public UndyingBeastEffect(final UndyingBeastEffect effect) {
public UndyingBeastEffect copy() {return new UndyingBeastEffect(this);
public boolean apply(Game game, Ability source) {return card.moveToZone(Zone.LIBRARY, source.getSourceId(), game, true);return true;
public class ValorousCharge extends CardImpl {
public ValorousCharge(UUID ownerId) {
public ValorousCharge(final ValorousCharge card) {
public ValorousCharge copy() {return new ValorousCharge(this);
public class VampiricFeast extends CardImpl {
public VampiricFeast(UUID ownerId) {
public VampiricFeast(final VampiricFeast card) {
public VampiricFeast copy() {return new VampiricFeast(this);
public class VampiricTouch extends CardImpl {
public VampiricTouch(UUID ownerId) {
public VampiricTouch(final VampiricTouch card) {
public VampiricTouch copy() {return new VampiricTouch(this);
public class VirtuesRuin extends CardImpl {
public VirtuesRuin(UUID ownerId) {
public VirtuesRuin(final VirtuesRuin card) {
public VirtuesRuin copy() {return new VirtuesRuin(this);
public class WallOfGranite extends CardImpl {
public WallOfGranite(UUID ownerId) {
public WallOfGranite(final WallOfGranite card) {
public WallOfGranite copy() {return new WallOfGranite(this);
public class WarriorsCharge1 extends CardImpl {
public WarriorsCharge1(UUID ownerId) {
public WarriorsCharge1(final WarriorsCharge1 card) {
public WarriorsCharge1 copy() {return new WarriorsCharge1(this);
public class WhiptailWurm extends CardImpl {
public WhiptailWurm(UUID ownerId) {
public WhiptailWurm(final WhiptailWurm card) {
public WhiptailWurm copy() {return new WhiptailWurm(this);
public class WickedPact extends CardImpl {
public WickedPact(UUID ownerId) {
public WickedPact(final WickedPact card) {
public WickedPact copy() {return new WickedPact(this);
public class WillowDryad extends CardImpl {
public WillowDryad(UUID ownerId) {
public WillowDryad(final WillowDryad card) {
public WillowDryad copy() {return new WillowDryad(this);
public class WitheringGaze extends CardImpl {
public WitheringGaze(UUID ownerId) {
public WitheringGaze(final WitheringGaze card) {
public WitheringGaze copy() {return new WitheringGaze(this);
class WitheringGazeEffect extends OneShotEffect {
public WitheringGazeEffect() {
public boolean apply(Game game, Ability source) {return true;return false;
public WitheringGazeEffect(final WitheringGazeEffect effect) {
public WitheringGazeEffect copy() {return new WitheringGazeEffect(this);
public class AlabornGrenadier extends CardImpl {
public AlabornGrenadier(UUID ownerId) {
public AlabornGrenadier(final AlabornGrenadier card) {
public AlabornGrenadier copy() {return new AlabornGrenadier(this);
public class AlabornMusketeer extends CardImpl {
public AlabornMusketeer(UUID ownerId) {
public AlabornMusketeer(final AlabornMusketeer card) {
public AlabornMusketeer copy() {return new AlabornMusketeer(this);
public class AlabornTrooper extends CardImpl {
public AlabornTrooper(UUID ownerId) {
public AlabornTrooper(final AlabornTrooper card) {
public AlabornTrooper copy() {return new AlabornTrooper(this);
public class AlabornVeteran extends CardImpl {
public AlabornVeteran(UUID ownerId) {
public AlabornVeteran(final AlabornVeteran card) {
public AlabornVeteran copy() {return new AlabornVeteran(this);
public class AngelOfFury extends CardImpl {
public AngelOfFury(UUID ownerId) {
public AngelOfFury(final AngelOfFury card) {
public AngelOfFury copy() {return new AngelOfFury(this);
public class ApprenticeSorcerer extends CardImpl {
public ApprenticeSorcerer(UUID ownerId) {
public ApprenticeSorcerer(final ApprenticeSorcerer card) {
public ApprenticeSorcerer copy() {return new ApprenticeSorcerer(this);
public class ArmoredGalleon extends CardImpl {
public ArmoredGalleon(UUID ownerId) {
public ArmoredGalleon(final ArmoredGalleon card) {
public ArmoredGalleon copy() {return new ArmoredGalleon(this);
public class BarbtoothWurm extends CardImpl {
public BarbtoothWurm(UUID ownerId) {
public BarbtoothWurm(final BarbtoothWurm card) {
public BarbtoothWurm copy() {return new BarbtoothWurm(this);
public class BearCub extends CardImpl {
public BearCub(UUID ownerId) {
public BearCub(final BearCub card) {
public BearCub copy() {return new BearCub(this);
public class BloodcurdlingScream extends CardImpl {
public BloodcurdlingScream(UUID ownerId) {
public BloodcurdlingScream(final BloodcurdlingScream card) {
public BloodcurdlingScream copy() {return new BloodcurdlingScream(this);
public class BrimstoneDragon extends CardImpl {
public BrimstoneDragon(UUID ownerId) {
public BrimstoneDragon(final BrimstoneDragon card) {
public BrimstoneDragon copy() {return new BrimstoneDragon(this);
public class BrutalNightstalker extends CardImpl {
public BrutalNightstalker(UUID ownerId) {
public BrutalNightstalker(final BrutalNightstalker card) {
public BrutalNightstalker copy() {return new BrutalNightstalker(this);
public class ChorusOfWoe extends CardImpl {
public ChorusOfWoe(UUID ownerId) {
public ChorusOfWoe(final ChorusOfWoe card) {
public ChorusOfWoe copy() {return new ChorusOfWoe(this);
public class CoastalWizard extends CardImpl {
public CoastalWizard(UUID ownerId) {
public CoastalWizard(final CoastalWizard card) {
public CoastalWizard copy() {return new CoastalWizard(this);
public class DakmorBat extends CardImpl {
public DakmorBat(UUID ownerId) {
public DakmorBat(final DakmorBat card) {
public DakmorBat copy() {return new DakmorBat(this);
public class DakmorScorpion extends CardImpl {
public DakmorScorpion(UUID ownerId) {
public DakmorScorpion(final DakmorScorpion card) {
public DakmorScorpion copy() {return new DakmorScorpion(this);
public class DarkOffering extends CardImpl {
public DarkOffering(UUID ownerId) {
public DarkOffering(final DarkOffering card) {
public DarkOffering copy() {return new DarkOffering(this);
public class DeathcoilWurm extends CardImpl {
public DeathcoilWurm(UUID ownerId) {
public DeathcoilWurm(final DeathcoilWurm card) {
public DeathcoilWurm copy() {return new DeathcoilWurm(this);
public class FestivalOfTrokin extends CardImpl {
public FestivalOfTrokin(UUID ownerId) {
public FestivalOfTrokin(final FestivalOfTrokin card) {
public FestivalOfTrokin copy() {return new FestivalOfTrokin(this);
public class GoblinCavaliers extends CardImpl {
public GoblinCavaliers(UUID ownerId) {
public GoblinCavaliers(final GoblinCavaliers card) {
public GoblinCavaliers copy() {return new GoblinCavaliers(this);
public class GoblinFirestarter extends CardImpl {
public GoblinFirestarter(UUID ownerId) {
public GoblinFirestarter(final GoblinFirestarter card) {
public GoblinFirestarter copy() {return new GoblinFirestarter(this);
public class GoldenBear extends CardImpl {
public GoldenBear(UUID ownerId) {
public GoldenBear(final GoldenBear card) {
public GoldenBear copy() {return new GoldenBear(this);
public class HarmonyOfNature extends CardImpl {
public HarmonyOfNature(UUID ownerId) {
public HarmonyOfNature(final HarmonyOfNature card) {
public HarmonyOfNature copy() {return new HarmonyOfNature(this);
class HarmonyOfNatureEffect extends OneShotEffect {
public HarmonyOfNatureEffect() {
public HarmonyOfNatureEffect(HarmonyOfNatureEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public HarmonyOfNatureEffect copy() {return new HarmonyOfNatureEffect(this);
public class IronhoofOx extends CardImpl {
public IronhoofOx(UUID ownerId) {
public IronhoofOx(final IronhoofOx card) {
public IronhoofOx copy() {return new IronhoofOx(this);
public class KissOfDeath extends CardImpl {
public KissOfDeath(UUID ownerId) {
public KissOfDeath(final KissOfDeath card) {
public KissOfDeath copy() {return new KissOfDeath(this);
public class LurkingNightstalker extends CardImpl {
public LurkingNightstalker(UUID ownerId) {
public LurkingNightstalker(final LurkingNightstalker card) {
public LurkingNightstalker copy() {return new LurkingNightstalker(this);
public class Lynx extends CardImpl {
public Lynx(UUID ownerId) {
public Lynx(final Lynx card) {
public Lynx copy() {return new Lynx(this);
public class MagmaGiant extends CardImpl {
public MagmaGiant(UUID ownerId) {
public MagmaGiant(final MagmaGiant card) {
public MagmaGiant copy() {return new MagmaGiant(this);
public class MoaningSpirit extends CardImpl {
public MoaningSpirit(UUID ownerId) {
public MoaningSpirit(final MoaningSpirit card) {
public MoaningSpirit copy() {return new MoaningSpirit(this);
public class MuckRats extends CardImpl {
public MuckRats(UUID ownerId) {
public MuckRats(final MuckRats card) {
public MuckRats copy() {return new MuckRats(this);
public class NightstalkerEngine extends CardImpl {
public NightstalkerEngine(UUID ownerId) {
public NightstalkerEngine(final NightstalkerEngine card) {
public NightstalkerEngine copy() {return new NightstalkerEngine(this);
public class NorwoodArchers extends CardImpl {
public NorwoodArchers(UUID ownerId) {
public NorwoodArchers(final NorwoodArchers card) {
public NorwoodArchers copy() {return new NorwoodArchers(this);
public class NorwoodRiders extends CardImpl {
public NorwoodRiders(UUID ownerId) {
public NorwoodRiders(final NorwoodRiders card) {
public NorwoodRiders copy() {return new NorwoodRiders(this);
public class NorwoodWarrior extends CardImpl {
public NorwoodWarrior(UUID ownerId) {
public NorwoodWarrior(final NorwoodWarrior card) {
public NorwoodWarrior copy() {return new NorwoodWarrior(this);
public class ObsidianGiant extends CardImpl {
public ObsidianGiant(UUID ownerId) {
public ObsidianGiant(final ObsidianGiant card) {
public ObsidianGiant copy() {return new ObsidianGiant(this);
public class OgreArsonist extends CardImpl {
public OgreArsonist(UUID ownerId) {
public OgreArsonist(final OgreArsonist card) {
public OgreArsonist copy() {return new OgreArsonist(this);
public class PlatedWurm extends CardImpl {
public PlatedWurm(UUID ownerId) {
public PlatedWurm(final PlatedWurm card) {
public PlatedWurm copy() {return new PlatedWurm(this);
public class RaidingNightstalker extends CardImpl {
public RaidingNightstalker(UUID ownerId) {
public RaidingNightstalker(final RaidingNightstalker card) {
public RaidingNightstalker copy() {return new RaidingNightstalker(this);
public class RainOfDaggers extends CardImpl {
public RainOfDaggers(UUID ownerId) {
public RainOfDaggers(final RainOfDaggers card) {
public RainOfDaggers copy() {return new RainOfDaggers(this);
class RainOfDaggersEffect extends OneShotEffect {
public RainOfDaggersEffect() {
public RainOfDaggersEffect(final RainOfDaggersEffect effect) {
public RainOfDaggersEffect copy() {return new RainOfDaggersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RazorclawBear extends CardImpl {
public RazorclawBear(UUID ownerId) {
public RazorclawBear(final RazorclawBear card) {
public RazorclawBear copy() {return new RazorclawBear(this);
public class Salvage extends CardImpl {
public Salvage(UUID ownerId) {
public Salvage(final Salvage card) {
public Salvage copy() {return new Salvage(this);
public class SteamCatapult extends CardImpl {
public SteamCatapult(UUID ownerId) {
public SteamCatapult(final SteamCatapult card) {
public SteamCatapult copy() {return new SteamCatapult(this);
public class SteamFrigate extends CardImpl {
public SteamFrigate(UUID ownerId) {
public SteamFrigate(final SteamFrigate card) {
public SteamFrigate copy() {return new SteamFrigate(this);
public class SylvanBasilisk extends CardImpl {
public SylvanBasilisk(UUID ownerId) {
public SylvanBasilisk(final SylvanBasilisk card) {
public SylvanBasilisk copy() {return new SylvanBasilisk(this);
public class TalasAirShip extends CardImpl {
public TalasAirShip(UUID ownerId) {
public TalasAirShip(final TalasAirShip card) {
public TalasAirShip copy() {return new TalasAirShip(this);
public class TalasExplorer extends CardImpl {
public TalasExplorer(UUID ownerId) {
public TalasExplorer(final TalasExplorer card) {
public TalasExplorer copy() {return new TalasExplorer(this);
public class TalasMerchant extends CardImpl {
public TalasMerchant(UUID ownerId) {
public TalasMerchant(final TalasMerchant card) {
public TalasMerchant copy() {return new TalasMerchant(this);
public class TalasResearcher extends CardImpl {
public TalasResearcher(UUID ownerId) {
public TalasResearcher(final TalasResearcher card) {
public TalasResearcher copy() {return new TalasResearcher(this);
public class TalasScout extends CardImpl {
public TalasScout(UUID ownerId) {
public TalasScout(final TalasScout card) {
public TalasScout copy() {return new TalasScout(this);
public class TalasWarrior extends CardImpl {
public TalasWarrior(UUID ownerId) {
public TalasWarrior(final TalasWarrior card) {
public TalasWarrior copy() {return new TalasWarrior(this);
public class TempleElder extends CardImpl {
public TempleElder(UUID ownerId) {
public TempleElder(final TempleElder card) {
public TempleElder copy() {return new TempleElder(this);
public class TemporalManipulation extends CardImpl {
public TemporalManipulation(UUID ownerId) {
public TemporalManipulation(final TemporalManipulation card) {
public TemporalManipulation copy() {return new TemporalManipulation(this);
public class TouchOfBrilliance extends CardImpl {
public TouchOfBrilliance(UUID ownerId) {
public TouchOfBrilliance(final TouchOfBrilliance card) {
public TouchOfBrilliance copy() {return new TouchOfBrilliance(this);
public class TownSentry extends CardImpl {
public TownSentry(UUID ownerId) {
public TownSentry(final TownSentry card) {
public TownSentry copy() {return new TownSentry(this);
public class AlertShuInfantry extends CardImpl {
public AlertShuInfantry(UUID ownerId) {
public AlertShuInfantry(final AlertShuInfantry card) {
public AlertShuInfantry copy() {return new AlertShuInfantry(this);
public class BarbarianGeneral extends CardImpl {
public BarbarianGeneral(UUID ownerId) {
public BarbarianGeneral(final BarbarianGeneral card) {
public BarbarianGeneral copy() {return new BarbarianGeneral(this);
public class BarbarianHorde extends CardImpl {
public BarbarianHorde(UUID ownerId) {
public BarbarianHorde(final BarbarianHorde card) {
public BarbarianHorde copy() {return new BarbarianHorde(this);
public class BorrowingTheEastWind extends CardImpl {
public BorrowingTheEastWind(UUID ownerId) {
public BorrowingTheEastWind(final BorrowingTheEastWind card) {
public BorrowingTheEastWind copy() {return new BorrowingTheEastWind(this);
public class BrokenDam extends CardImpl {
public BrokenDam(UUID ownerId) {
public BrokenDam(final BrokenDam card) {
public BrokenDam copy() {return new BrokenDam(this);
public class BurningFields extends CardImpl {
public BurningFields(UUID ownerId) {
public BurningFields(final BurningFields card) {
public BurningFields copy() {return new BurningFields(this);
public class BurningOfXinye extends CardImpl {
public BurningOfXinye(UUID ownerId) {
public BurningOfXinye(final BurningOfXinye card) {
public BurningOfXinye copy() {return new BurningOfXinye(this);
class BurningOfXinyeEffect extends OneShotEffect{
public BurningOfXinyeEffect() {
public BurningOfXinyeEffect ( BurningOfXinyeEffect effect ) {
public boolean apply(Game game, Ability source) {return abilityApplied;
public boolean playerDestroys(Game game, Ability source,Player player){return abilityApplied;
public BurningOfXinyeEffect copy() {return new BurningOfXinyeEffect(this);
public class CaoCaoLordOfWei extends CardImpl {
public CaoCaoLordOfWei(UUID ownerId) {
public CaoCaoLordOfWei(final CaoCaoLordOfWei card) {
public CaoCaoLordOfWei copy() {return new CaoCaoLordOfWei(this);
public class CaoRenWeiCommander extends CardImpl {
public CaoRenWeiCommander(UUID ownerId) {
public CaoRenWeiCommander(final CaoRenWeiCommander card) {
public CaoRenWeiCommander copy() {return new CaoRenWeiCommander(this);
public class CaptureOfJingzhou extends CardImpl {
public CaptureOfJingzhou(UUID ownerId) {
public CaptureOfJingzhou(final CaptureOfJingzhou card) {
public CaptureOfJingzhou copy() {return new CaptureOfJingzhou(this);
public class ControlOfTheCourt extends CardImpl {
public ControlOfTheCourt(UUID ownerId) {
public ControlOfTheCourt(final ControlOfTheCourt card) {
public ControlOfTheCourt copy() {return new ControlOfTheCourt(this);
public class CorruptCourtOfficial extends CardImpl {
public CorruptCourtOfficial(UUID ownerId) {
public CorruptCourtOfficial(final CorruptCourtOfficial card) {
public CorruptCourtOfficial copy() {return new CorruptCourtOfficial(this);
public class CouncilOfAdvisors extends CardImpl {
public CouncilOfAdvisors(UUID ownerId) {
public CouncilOfAdvisors(final CouncilOfAdvisors card) {
public CouncilOfAdvisors copy() {return new CouncilOfAdvisors(this);
public class Counterintelligence extends CardImpl {
public Counterintelligence(UUID ownerId) {
public Counterintelligence(final Counterintelligence card) {
public Counterintelligence copy() {return new Counterintelligence(this);
public class CunningAdvisor extends CardImpl {
public CunningAdvisor(UUID ownerId) {
public CunningAdvisor(final CunningAdvisor card) {
public CunningAdvisor copy() {return new CunningAdvisor(this);
public class Deception extends CardImpl {
public Deception(UUID ownerId) {
public Deception(final Deception card) {
public Deception copy() {return new Deception(this);
public class DesertSandstorm extends CardImpl {
public DesertSandstorm(UUID ownerId) {
public DesertSandstorm(final DesertSandstorm card) {
public DesertSandstorm copy() {return new DesertSandstorm(this);
public class DesperateCharge extends CardImpl {
public DesperateCharge(UUID ownerId) {
public DesperateCharge(final DesperateCharge card) {
public DesperateCharge copy() {return new DesperateCharge(this);
public class Exhaustion extends CardImpl {
public Exhaustion(UUID ownerId) {
public Exhaustion(final Exhaustion card) {
public Exhaustion copy() {return new Exhaustion(this);
class ExhaustionEffect extends OneShotEffect {
ExhaustionEffect() {
ExhaustionEffect(final ExhaustionEffect effect) {
public ExhaustionEffect copy() {return new ExhaustionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FalseMourning extends CardImpl {
public FalseMourning(UUID ownerId) {
public FalseMourning(final FalseMourning card) {
public FalseMourning copy() {return new FalseMourning(this);
public class FireAmbush extends CardImpl {
public FireAmbush(UUID ownerId) {
public FireAmbush(final FireAmbush card) {
public FireAmbush copy() {return new FireAmbush(this);
public class FireBowman extends CardImpl {
public FireBowman(UUID ownerId) {
public FireBowman(final FireBowman card) {
public FireBowman copy() {return new FireBowman(this);
public class FlankingTroops extends CardImpl {
public FlankingTroops(UUID ownerId) {
public FlankingTroops(final FlankingTroops card) {
public FlankingTroops copy() {return new FlankingTroops(this);
public class ForestBear extends CardImpl {
public ForestBear(UUID ownerId) {
public ForestBear(final ForestBear card) {
public ForestBear copy() {return new ForestBear(this);
public class GhostlyVisit extends CardImpl {
public GhostlyVisit(UUID ownerId) {
public GhostlyVisit(final GhostlyVisit card) {
public GhostlyVisit copy() {return new GhostlyVisit(this);
public class HuangZhongShuGeneral extends CardImpl {
public HuangZhongShuGeneral(UUID ownerId) {
public HuangZhongShuGeneral(final HuangZhongShuGeneral card) {
public HuangZhongShuGeneral copy() {return new HuangZhongShuGeneral(this);
public class HuntingCheetah extends CardImpl {
public HuntingCheetah(UUID ownerId) {
public HuntingCheetah(final HuntingCheetah card) {
public HuntingCheetah copy() {return new HuntingCheetah(this);
public class ImperialRecruiter extends CardImpl {
public ImperialRecruiter(UUID ownerId) {
public ImperialRecruiter(final ImperialRecruiter card) {
public ImperialRecruiter copy() {return new ImperialRecruiter(this);
public class ImperialSeal extends CardImpl {
public ImperialSeal(UUID ownerId) {
public ImperialSeal(final ImperialSeal card) {
public ImperialSeal copy() {return new ImperialSeal(this);
public class IndependentTroops extends CardImpl {
public IndependentTroops(UUID ownerId) {
public IndependentTroops(final IndependentTroops card) {
public IndependentTroops copy() {return new IndependentTroops(this);
public class LadySun extends CardImpl {
public LadySun(UUID ownerId) {
public LadySun(final LadySun card) {
public LadySun copy() {return new LadySun(this);
public class LadyZhurongWarriorQueen extends CardImpl {
public LadyZhurongWarriorQueen(UUID ownerId) {
public LadyZhurongWarriorQueen(final LadyZhurongWarriorQueen card) {
public LadyZhurongWarriorQueen copy() {return new LadyZhurongWarriorQueen(this);
public class LiuBeiLordOfShu extends CardImpl {
public LiuBeiLordOfShu(UUID ownerId) {
public LiuBeiLordOfShu(final LiuBeiLordOfShu card) {
public LiuBeiLordOfShu copy() {return new LiuBeiLordOfShu(this);
public class LoyalRetainers extends CardImpl {
public LoyalRetainers(UUID ownerId) {
public LoyalRetainers(final LoyalRetainers card) {
public LoyalRetainers copy() {return new LoyalRetainers(this);
public class LuMengWuGeneral extends CardImpl {
public LuMengWuGeneral(UUID ownerId) {
public LuMengWuGeneral(final LuMengWuGeneral card) {
public LuMengWuGeneral copy() {return new LuMengWuGeneral(this);
public class LuSuWuAdvisor extends CardImpl {
public LuSuWuAdvisor(UUID ownerId) {
public LuSuWuAdvisor(final LuSuWuAdvisor card) {
public LuSuWuAdvisor copy() {return new LuSuWuAdvisor(this);
public class MengHuoBarbarianKing extends CardImpl {
public MengHuoBarbarianKing(UUID ownerId) {
public MengHuoBarbarianKing(final MengHuoBarbarianKing card) {
public MengHuoBarbarianKing copy() {return new MengHuoBarbarianKing(this);
public class MengHuosHorde extends CardImpl {
public MengHuosHorde(UUID ownerId) {
public MengHuosHorde(final MengHuosHorde card) {
public MengHuosHorde copy() {return new MengHuosHorde(this);
public class MountainBandit extends CardImpl {
public MountainBandit(UUID ownerId) {
public MountainBandit(final MountainBandit card) {
public MountainBandit copy() {return new MountainBandit(this);
public class OverwhelmingForces extends CardImpl {
public OverwhelmingForces(UUID ownerId) {
public OverwhelmingForces(final OverwhelmingForces card) {
public OverwhelmingForces copy() {return new OverwhelmingForces(this);
class OverwhelmingForcesEffect extends OneShotEffect {
public OverwhelmingForcesEffect() {
public OverwhelmingForcesEffect(final OverwhelmingForcesEffect effect) {
public OverwhelmingForcesEffect copy() {return new OverwhelmingForcesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PangTongYoungPhoenix extends CardImpl {
public PangTongYoungPhoenix(UUID ownerId) {
public PangTongYoungPhoenix(final PangTongYoungPhoenix card) {
public PangTongYoungPhoenix copy() {return new PangTongYoungPhoenix(this);
public class PoisonArrow extends CardImpl {
public PoisonArrow(UUID ownerId) {
public PoisonArrow(final PoisonArrow card) {
public PoisonArrow copy() {return new PoisonArrow(this);
public class PreemptiveStrike extends CardImpl {
public PreemptiveStrike(UUID ownerId) {
public PreemptiveStrike(final PreemptiveStrike card) {
public PreemptiveStrike copy() {return new PreemptiveStrike(this);
public class RavagesOfWar extends CardImpl {
public RavagesOfWar(UUID ownerId) {
public RavagesOfWar(final RavagesOfWar card) {
public RavagesOfWar copy() {return new RavagesOfWar(this);
public class RavagingHorde extends CardImpl {
public RavagingHorde(UUID ownerId) {
public RavagingHorde(final RavagingHorde card) {
public RavagingHorde copy() {return new RavagingHorde(this);
public class RenegadeTroops extends CardImpl {
public RenegadeTroops(UUID ownerId) {
public RenegadeTroops(final RenegadeTroops card) {
public RenegadeTroops copy() {return new RenegadeTroops(this);
public class ReturnToBattle extends CardImpl {
public ReturnToBattle(UUID ownerId) {
public ReturnToBattle(final ReturnToBattle card) {
public ReturnToBattle copy() {return new ReturnToBattle(this);
public class RidingRedHare extends CardImpl {
public RidingRedHare(UUID ownerId) {
public RidingRedHare(final RidingRedHare card) {
public RidingRedHare copy() {return new RidingRedHare(this);
public class RockslideAmbush extends CardImpl {
public RockslideAmbush(UUID ownerId) {
public RockslideAmbush(final RockslideAmbush card) {
public RockslideAmbush copy() {return new RockslideAmbush(this);
public class RollingEarthquake extends CardImpl {
public RollingEarthquake(UUID ownerId) {
public RollingEarthquake(final RollingEarthquake card) {
public RollingEarthquake copy() {return new RollingEarthquake(this);
public class SagesKnowledge extends CardImpl {
public SagesKnowledge(UUID ownerId) {
public SagesKnowledge(final SagesKnowledge card) {
public SagesKnowledge copy() {return new SagesKnowledge(this);
public class ShuDefender extends CardImpl {
public ShuDefender(UUID ownerId) {
public ShuDefender(final ShuDefender card) {
public ShuDefender copy() {return new ShuDefender(this);
public class ShuEliteInfantry extends CardImpl {
public ShuEliteInfantry(UUID ownerId) {
public ShuEliteInfantry(final ShuEliteInfantry card) {
public ShuEliteInfantry copy() {return new ShuEliteInfantry(this);
public class ShuFarmer extends CardImpl {
public ShuFarmer(UUID ownerId) {
public ShuFarmer(final ShuFarmer card) {
public ShuFarmer copy() {return new ShuFarmer(this);
public class ShuGrainCaravan extends CardImpl {
public ShuGrainCaravan(UUID ownerId) {
public ShuGrainCaravan(final ShuGrainCaravan card) {
public ShuGrainCaravan copy() {return new ShuGrainCaravan(this);
public class ShuSoldierFarmers extends CardImpl {
public ShuSoldierFarmers(UUID ownerId) {
public ShuSoldierFarmers(final ShuSoldierFarmers card) {
public ShuSoldierFarmers copy() {return new ShuSoldierFarmers(this);
public class SimaYiWeiFieldMarshal extends CardImpl {
public SimaYiWeiFieldMarshal(UUID ownerId) {
public SimaYiWeiFieldMarshal(final SimaYiWeiFieldMarshal card) {
public SimaYiWeiFieldMarshal copy() {return new SimaYiWeiFieldMarshal(this);
public class SlashingTiger extends CardImpl {
public SlashingTiger(UUID ownerId) {
public SlashingTiger(final SlashingTiger card) {
public SlashingTiger copy() {return new SlashingTiger(this);
public class SouthernElephant extends CardImpl {
public SouthernElephant(UUID ownerId) {
public SouthernElephant(final SouthernElephant card) {
public SouthernElephant copy() {return new SouthernElephant(this);
public class SpringOfEternalPeace extends CardImpl {
public SpringOfEternalPeace(UUID ownerId) {
public SpringOfEternalPeace(final SpringOfEternalPeace card) {
public SpringOfEternalPeace copy() {return new SpringOfEternalPeace(this);
public class StoneCatapult extends CardImpl {
public StoneCatapult(UUID ownerId) {
public StoneCatapult(final StoneCatapult card) {
public StoneCatapult copy() {return new StoneCatapult(this);
public class StrawSoldiers extends CardImpl {
public StrawSoldiers(UUID ownerId) {
public StrawSoldiers(final StrawSoldiers card) {
public StrawSoldiers copy() {return new StrawSoldiers(this);
public class SunQuanLordOfWu extends CardImpl {
public SunQuanLordOfWu(UUID ownerId) {
public SunQuanLordOfWu(final SunQuanLordOfWu card) {
public SunQuanLordOfWu copy() {return new SunQuanLordOfWu(this);
public class TaoistHermit extends CardImpl {
public TaoistHermit(UUID ownerId) {
public TaoistHermit(final TaoistHermit card) {
public TaoistHermit copy() {return new TaoistHermit(this);
public class TaoistMystic extends CardImpl {
public TaoistMystic(UUID ownerId) {
public TaoistMystic(final TaoistMystic card) {
public TaoistMystic copy() {return new TaoistMystic(this);
public class TauntingChallenge extends CardImpl {
public TauntingChallenge(UUID ownerId) {
public TauntingChallenge(final TauntingChallenge card) {
public TauntingChallenge copy() {return new TauntingChallenge(this);
public class ThreeVisits extends CardImpl {
public ThreeVisits(UUID ownerId) {
public ThreeVisits(final ThreeVisits card) {
public ThreeVisits copy() {return new ThreeVisits(this);
public class TrainedCheetah extends CardImpl {
public TrainedCheetah(UUID ownerId) {
public TrainedCheetah(final TrainedCheetah card) {
public TrainedCheetah copy() {return new TrainedCheetah(this);
public class TrainedJackal extends CardImpl {
public TrainedJackal(UUID ownerId) {
public TrainedJackal(final TrainedJackal card) {
public TrainedJackal copy() {return new TrainedJackal(this);
public class VirtuousCharge extends CardImpl {
public VirtuousCharge(UUID ownerId) {
public VirtuousCharge(final VirtuousCharge card) {
public VirtuousCharge copy() {return new VirtuousCharge(this);
public class VolunteerMilitia extends CardImpl {
public VolunteerMilitia(UUID ownerId) {
public VolunteerMilitia(final VolunteerMilitia card) {
public VolunteerMilitia copy() {return new VolunteerMilitia(this);
public class WarriorsOath extends CardImpl {
public WarriorsOath(UUID ownerId) {
public WarriorsOath(final WarriorsOath card) {
public WarriorsOath copy() {return new WarriorsOath(this);
public class WeiNightRaiders extends CardImpl {
public WeiNightRaiders(UUID ownerId) {
public WeiNightRaiders(final WeiNightRaiders card) {
public WeiNightRaiders copy() {return new WeiNightRaiders(this);
public class WeiScout extends CardImpl {
public WeiScout(UUID ownerId) {
public WeiScout(final WeiScout card) {
public WeiScout copy() {return new WeiScout(this);
public class WeiStrikeForce extends CardImpl {
public WeiStrikeForce(UUID ownerId) {
public WeiStrikeForce(final WeiStrikeForce card) {
public WeiStrikeForce copy() {return new WeiStrikeForce(this);
public class WieldingTheGreenDragon extends CardImpl {
public WieldingTheGreenDragon(UUID ownerId) {
public WieldingTheGreenDragon(final WieldingTheGreenDragon card) {
public WieldingTheGreenDragon copy() {return new WieldingTheGreenDragon(this);
public class WuAdmiral extends CardImpl {
public WuAdmiral(UUID ownerId) {
public WuAdmiral(final WuAdmiral card) {
public WuAdmiral copy() {return new WuAdmiral(this);
public class WuEliteCavalry extends CardImpl {
public WuEliteCavalry(UUID ownerId) {
public WuEliteCavalry(final WuEliteCavalry card) {
public WuEliteCavalry copy() {return new WuEliteCavalry(this);
public class WuInfantry extends CardImpl {
public WuInfantry(UUID ownerId) {
public WuInfantry(final WuInfantry card) {
public WuInfantry copy() {return new WuInfantry(this);
public class WuLightCavalry extends CardImpl {
public WuLightCavalry(UUID ownerId) {
public WuLightCavalry(final WuLightCavalry card) {
public WuLightCavalry copy() {return new WuLightCavalry(this);
public class WuLongbowman extends CardImpl {
public WuLongbowman(UUID ownerId) {
public WuLongbowman(final WuLongbowman card) {
public WuLongbowman copy() {return new WuLongbowman(this);
public class WuScout extends CardImpl {
public WuScout(UUID ownerId) {
public WuScout(final WuScout card) {
public WuScout copy() {return new WuScout(this);
public class XiahouDunTheOneEyed extends CardImpl {
public XiahouDunTheOneEyed(UUID ownerId) {
public XiahouDunTheOneEyed(final XiahouDunTheOneEyed card) {
public XiahouDunTheOneEyed copy() {return new XiahouDunTheOneEyed(this);
public class XunYuWeiAdvisor extends CardImpl {
public XunYuWeiAdvisor(UUID ownerId) {
public XunYuWeiAdvisor(final XunYuWeiAdvisor card) {
public XunYuWeiAdvisor copy() {return new XunYuWeiAdvisor(this);
public class YellowScarvesCavalry extends CardImpl {
public YellowScarvesCavalry(UUID ownerId) {
public YellowScarvesCavalry(final YellowScarvesCavalry card) {
public YellowScarvesCavalry copy() {return new YellowScarvesCavalry(this);
public class YellowScarvesGeneral extends CardImpl {
public YellowScarvesGeneral(UUID ownerId) {
public YellowScarvesGeneral(final YellowScarvesGeneral card) {
public YellowScarvesGeneral copy() {return new YellowScarvesGeneral(this);
public class YellowScarvesTroops extends CardImpl {
public YellowScarvesTroops(UUID ownerId) {
public YellowScarvesTroops(final YellowScarvesTroops card) {
public YellowScarvesTroops copy() {return new YellowScarvesTroops(this);
public class YuanShaosInfantry extends CardImpl {
public YuanShaosInfantry(UUID ownerId) {
public YuanShaosInfantry(final YuanShaosInfantry card) {
public YuanShaosInfantry copy() {return new YuanShaosInfantry(this);
public class YuanShaoTheIndecisive extends CardImpl {
public YuanShaoTheIndecisive(UUID ownerId) {
public YuanShaoTheIndecisive(final YuanShaoTheIndecisive card) {
public YuanShaoTheIndecisive copy() {return new YuanShaoTheIndecisive(this);
public class ZhangHeWeiGeneral extends CardImpl {
public ZhangHeWeiGeneral(UUID ownerId) {
public ZhangHeWeiGeneral(final ZhangHeWeiGeneral card) {
public ZhangHeWeiGeneral copy() {return new ZhangHeWeiGeneral(this);
public class ZhouYuChiefCommander extends CardImpl {
public ZhouYuChiefCommander(UUID ownerId) {
public ZhouYuChiefCommander(final ZhouYuChiefCommander card) {
public ZhouYuChiefCommander copy() {return new ZhouYuChiefCommander(this);
public class ZhugeJinWuStrategist extends CardImpl {
public ZhugeJinWuStrategist(UUID ownerId) {
public ZhugeJinWuStrategist(final ZhugeJinWuStrategist card) {
public ZhugeJinWuStrategist copy() {return new ZhugeJinWuStrategist(this);
public class ZodiacDog extends CardImpl {
public ZodiacDog(UUID ownerId) {
public ZodiacDog(final ZodiacDog card) {
public ZodiacDog copy() {return new ZodiacDog(this);
public class ZodiacDragon extends CardImpl {
public ZodiacDragon(UUID ownerId) {
public ZodiacDragon(final ZodiacDragon card) {
public ZodiacDragon copy() {return new ZodiacDragon(this);
public class ZodiacGoat extends CardImpl {
public ZodiacGoat(UUID ownerId) {
public ZodiacGoat(final ZodiacGoat card) {
public ZodiacGoat copy() {return new ZodiacGoat(this);
public class ZodiacHorse extends CardImpl {
public ZodiacHorse(UUID ownerId) {
public ZodiacHorse(final ZodiacHorse card) {
public ZodiacHorse copy() {return new ZodiacHorse(this);
public class ZodiacOx extends CardImpl {
public ZodiacOx(UUID ownerId) {
public ZodiacOx(final ZodiacOx card) {
public ZodiacOx copy() {return new ZodiacOx(this);
public class ZodiacPig extends CardImpl {
public ZodiacPig(UUID ownerId) {
public ZodiacPig(final ZodiacPig card) {
public ZodiacPig copy() {return new ZodiacPig(this);
public class ZodiacRabbit extends CardImpl {
public ZodiacRabbit(UUID ownerId) {
public ZodiacRabbit(final ZodiacRabbit card) {
public ZodiacRabbit copy() {return new ZodiacRabbit(this);
public class ZodiacRat extends CardImpl {
public ZodiacRat(UUID ownerId) {
public ZodiacRat(final ZodiacRat card) {
public ZodiacRat copy() {return new ZodiacRat(this);
public class ZodiacRooster extends CardImpl {
public ZodiacRooster(UUID ownerId) {
public ZodiacRooster(final ZodiacRooster card) {
public ZodiacRooster copy() {return new ZodiacRooster(this);
public class ZodiacSnake extends CardImpl {
public ZodiacSnake(UUID ownerId) {
public ZodiacSnake(final ZodiacSnake card) {
public ZodiacSnake copy() {return new ZodiacSnake(this);
public class ZodiacTiger extends CardImpl {
public ZodiacTiger(UUID ownerId) {
public ZodiacTiger(final ZodiacTiger card) {
public ZodiacTiger copy() {return new ZodiacTiger(this);
public class ZuoCiTheMockingSage extends CardImpl {
public ZuoCiTheMockingSage(UUID ownerId) {
public ZuoCiTheMockingSage(final ZuoCiTheMockingSage card) {
public ZuoCiTheMockingSage copy() {return new ZuoCiTheMockingSage(this);
public class DirtcowlWurm extends CardImpl {
public DirtcowlWurm(UUID ownerId) {
public DirtcowlWurm(final DirtcowlWurm card) {
public DirtcowlWurm copy() {return new DirtcowlWurm(this);
class DirtcowlWurmTriggeredAbility extends TriggeredAbilityImpl {
DirtcowlWurmTriggeredAbility() {
DirtcowlWurmTriggeredAbility(DirtcowlWurmTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LAND_PLAYED;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(controllerId).contains(land.getControllerId());
public DirtcowlWurmTriggeredAbility copy() {return new DirtcowlWurmTriggeredAbility(this);
public String getRule() {return "Whenever an opponent plays a land, put a +1/+1 counter on {this}.";
public class DjinnIlluminatus extends CardImpl {
public DjinnIlluminatus(UUID ownerId) {
public DjinnIlluminatus(final DjinnIlluminatus card) {
public DjinnIlluminatus copy() {return new DjinnIlluminatus(this);
class DjinnIlluminatusGainReplicateEffect extends ContinuousEffectImpl {
public DjinnIlluminatusGainReplicateEffect() {
public DjinnIlluminatusGainReplicateEffect(final DjinnIlluminatusGainReplicateEffect effect) {
public DjinnIlluminatusGainReplicateEffect copy() {return new DjinnIlluminatusGainReplicateEffect(this);
public boolean apply(Game game, Ability source) {
public class FeralThrowback extends CardImpl {
public FeralThrowback(UUID ownerId) {
public FeralThrowback(final FeralThrowback card) {
public FeralThrowback copy() {return new FeralThrowback(this);
public class Gleancrawler extends CardImpl {
public Gleancrawler(UUID ownerId) {
public Gleancrawler(final Gleancrawler card) {
public Gleancrawler copy() {return new Gleancrawler(this);
class GleancrawlerEffect extends OneShotEffect {
public GleancrawlerEffect() {this.staticText = "return to your hand all creature cards in your graveyard that were put there from the battlefield this turn";
public GleancrawlerEffect(final GleancrawlerEffect effect) {
public GleancrawlerEffect copy() {return new GleancrawlerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Abolish extends CardImpl {
public Abolish(UUID ownerId) {
public Abolish(final Abolish card) {
public Abolish copy() {return new Abolish(this);
public class AgentOfShauku extends CardImpl {
public AgentOfShauku(UUID ownerId) {
public AgentOfShauku(final AgentOfShauku card) {
public AgentOfShauku copy() {return new AgentOfShauku(this);
public class AlexisCloak extends CardImpl {
public AlexisCloak(UUID ownerId) {
public AlexisCloak(final AlexisCloak card) {
public AlexisCloak copy() {return new AlexisCloak(this);
public class AuraFracture extends CardImpl {
public AuraFracture(UUID ownerId) {
public AuraFracture(final AuraFracture card) {
public AuraFracture copy() {return new AuraFracture(this);
public class AvatarOfFury extends CardImpl {
public AvatarOfFury(UUID ownerId) {
public AvatarOfFury(final AvatarOfFury card) {
public AvatarOfFury copy() {return new AvatarOfFury(this);
class AvatarOfFuryAdjustingCostsAbility extends SimpleStaticAbility implements AdjustingSourceCosts {
public AvatarOfFuryAdjustingCostsAbility() {
public AvatarOfFuryAdjustingCostsAbility(final AvatarOfFuryAdjustingCostsAbility ability) {
public SimpleStaticAbility copy() {return new AvatarOfFuryAdjustingCostsAbility(this);
public String getRule() {return "If an opponent controls seven or more lands, Avatar of Fury costs {6} less to cast";
public void adjustCosts(Ability ability, Game game) {
public class AvatarOfHope extends CardImpl {
public AvatarOfHope(UUID ownerId) {
public AvatarOfHope(final AvatarOfHope card) {
public AvatarOfHope copy() {return new AvatarOfHope(this);
class AdjustingCostsAbility extends SimpleStaticAbility implements AdjustingSourceCosts {
public AdjustingCostsAbility() {
public AdjustingCostsAbility(final AdjustingCostsAbility ability) {
public SimpleStaticAbility copy() {return new AdjustingCostsAbility(this);
public String getRule() {return "If you have 3 or less life, Avatar of Hope costs {6} less to cast";
public void adjustCosts(Ability ability, Game game) {
public AdjustingCostsEffect() {
public AdjustingCostsEffect(final AdjustingCostsEffect effect) {return true;return false;return true;return false;
public AdjustingCostsEffect copy() {return new AdjustingCostsEffect(this);
public class AvatarOfMight extends CardImpl {
public AvatarOfMight(UUID ownerId) {
public AvatarOfMight(final AvatarOfMight card) {
public AvatarOfMight copy() {return new AvatarOfMight(this);
AvatarOfMightCostReductionEffect() {
AvatarOfMightCostReductionEffect(final AvatarOfMightCostReductionEffect effect) {return true;return false;return true;return false;
public AvatarOfMightCostReductionEffect copy() {return new AvatarOfMightCostReductionEffect(this);
public class AvatarOfWill extends CardImpl {
public AvatarOfWill(UUID ownerId) {
public AvatarOfWill(final AvatarOfWill card) {
public AvatarOfWill copy() {return new AvatarOfWill(this);
AvatarOfWillCostReductionEffect() {
AvatarOfWillCostReductionEffect(final AvatarOfWillCostReductionEffect effect) {return true;return false;return true;return false;
public AvatarOfWillCostReductionEffect copy() {return new AvatarOfWillCostReductionEffect(this);
public class BarbedField extends CardImpl {
public BarbedField(UUID ownerId) {
public BarbedField(final BarbedField card) {
public BarbedField copy() {return new BarbedField(this);
public class BogElemental extends CardImpl {
public BogElemental(UUID ownerId) {
public BogElemental(final BogElemental card) {
public BogElemental copy() {return new BogElemental(this);
public class BogGlider extends CardImpl {
public BogGlider(UUID ownerId) {
public BogGlider(final BogGlider card) {
public BogGlider copy() {return new BogGlider(this);
public class ChillingApparition extends CardImpl {
public ChillingApparition(UUID ownerId) {
public ChillingApparition(final ChillingApparition card) {
public ChillingApparition copy() {return new ChillingApparition(this);return new ChimericIdol(this);
public class CoastalHornclaw extends CardImpl {
public CoastalHornclaw(UUID ownerId) {
public CoastalHornclaw(final CoastalHornclaw card) {
public CoastalHornclaw copy() {return new CoastalHornclaw(this);
public class Darba extends CardImpl {
public Darba(UUID ownerId) {
public Darba(final Darba card) {
public Darba copy() {return new Darba(this);
public class Despoil extends CardImpl {
public Despoil(UUID ownerId) {
public Despoil(final Despoil card) {
public Despoil copy() {return new Despoil(this);
public class Devastate extends CardImpl {
public Devastate(UUID ownerId) {
public Devastate(final Devastate card) {
public Devastate copy() {return new Devastate(this);
public class Excavation extends CardImpl {
public Excavation(UUID ownerId) {
public Excavation(final Excavation card) {
public Excavation copy() {return new Excavation(this);
public class Flameshot extends CardImpl {
public Flameshot(UUID ownerId) {
public Flameshot(final Flameshot card) {
public Flameshot copy() {return new Flameshot(this);
public class FloweringField extends CardImpl {
public FloweringField(UUID ownerId) {
public FloweringField(final FloweringField card) {
public FloweringField copy() {return new FloweringField(this);
public class Foil extends CardImpl {
public Foil(UUID ownerId) {
public Foil(final Foil card) {
public Foil copy() {return new Foil(this);
public class GreelsCaress extends CardImpl {
public GreelsCaress(UUID ownerId) {
public GreelsCaress(final GreelsCaress card) {
public GreelsCaress copy() {return new GreelsCaress(this);
public class GulfSquid extends CardImpl {
public GulfSquid(UUID ownerId) {
public GulfSquid(final GulfSquid card) {
public GulfSquid copy() {return new GulfSquid(this);
public class HazyHomunculus extends CardImpl {
public HazyHomunculus(UUID ownerId) {
public HazyHomunculus(final HazyHomunculus card) {
public HazyHomunculus copy() {return new HazyHomunculus(this);
public class HeightenedAwareness extends CardImpl {
public HeightenedAwareness(UUID ownerId) {
public HeightenedAwareness(final HeightenedAwareness card) {
public HeightenedAwareness copy() {return new HeightenedAwareness(this);
public class InfernalGenesis extends CardImpl {
public InfernalGenesis(UUID ownerId) {
public InfernalGenesis(final InfernalGenesis card) {
public InfernalGenesis copy() {return new InfernalGenesis(this);
class InfernalGenesisEffect extends OneShotEffect {
InfernalGenesisEffect() {
InfernalGenesisEffect(final InfernalGenesisEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public InfernalGenesisEffect copy() {return new InfernalGenesisEffect(this);
class MinionToken extends Token {
public MinionToken() {
public class JeweledSpirit extends CardImpl {
public JeweledSpirit(UUID ownerId) {
public JeweledSpirit(final JeweledSpirit card) {
public JeweledSpirit copy() {return new JeweledSpirit(this);
class JeweledSpiritEffect extends OneShotEffect {
public JeweledSpiritEffect() {
public JeweledSpiritEffect(final JeweledSpiritEffect effect) {
public JeweledSpiritEffect copy() {return new JeweledSpiritEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class JolraelEmpressOfBeasts extends CardImpl {
public JolraelEmpressOfBeasts(UUID ownerId) {
public JolraelEmpressOfBeasts(final JolraelEmpressOfBeasts card) {
public JolraelEmpressOfBeasts copy() {return new JolraelEmpressOfBeasts(this);
class JolraelEmpressOfBeastsEffect extends OneShotEffect {
public JolraelEmpressOfBeastsEffect() {
public JolraelEmpressOfBeastsEffect(final JolraelEmpressOfBeastsEffect effect) {
public JolraelEmpressOfBeastsEffect copy() {return new JolraelEmpressOfBeastsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class JolraelLandsToken extends Token {
public JolraelLandsToken() {
public class JolraelsFavor extends CardImpl {
public JolraelsFavor(UUID ownerId) {
public JolraelsFavor(final JolraelsFavor card) {
public JolraelsFavor copy() {return new JolraelsFavor(this);return new KeldonArsonist(this);return new LatullaKeldonOverseer(this);return new LesserGargadon(this);
public class LivingTerrain extends CardImpl {
public LivingTerrain(UUID ownerId) {
public LivingTerrain(final LivingTerrain card) {
public LivingTerrain copy() {return new LivingTerrain(this);
class TreefolkToken extends Token {
TreefolkToken() {
public class MagetasBoon extends CardImpl {
public MagetasBoon(UUID ownerId) {
public MagetasBoon(final MagetasBoon card) {
public MagetasBoon copy() {return new MagetasBoon(this);
public class MagetaTheLion extends CardImpl {
public MagetaTheLion(UUID ownerId) {
public MagetaTheLion(final MagetaTheLion card) {
public MagetaTheLion copy() {return new MagetaTheLion(this);
public class MarshBoa extends CardImpl {
public MarshBoa(UUID ownerId) {
public MarshBoa(final MarshBoa card) {
public MarshBoa copy() {return new MarshBoa(this);
public class MunghaWurm extends CardImpl {
public MunghaWurm(UUID ownerId) {
public MunghaWurm(final MunghaWurm card) {
public MunghaWurm copy() {return new MunghaWurm(this);
class MunghaWurmEffect extends RestrictionUntapNotMoreThanEffect {
public MunghaWurmEffect() {
public MunghaWurmEffect(final MunghaWurmEffect effect) {
public boolean applies(Player player, Ability source, Game game) {return true;
public MunghaWurmEffect copy() {return new MunghaWurmEffect(this);
public class NakayaShade extends CardImpl {
public NakayaShade(UUID ownerId) {
public NakayaShade(final NakayaShade card) {
public NakayaShade copy() {return new NakayaShade(this);
public class NoxiousField extends CardImpl {
public NoxiousField(UUID ownerId) {
public NoxiousField(final NoxiousField card) {
public NoxiousField copy() {return new NoxiousField(this);
public class Outbreak extends CardImpl {
public Outbreak(UUID ownerId) {
public Outbreak(final Outbreak card) {
public Outbreak copy() {return new Outbreak(this);
class OutbreakEffect extends OneShotEffect {
public OutbreakEffect() {
public OutbreakEffect(final OutbreakEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;
public OutbreakEffect copy() {return new OutbreakEffect(this);
public class PitRaptor extends CardImpl {
public PitRaptor(UUID ownerId) {
public PitRaptor(final PitRaptor card) {
public PitRaptor copy() {return new PitRaptor(this);
public class PlagueWind extends CardImpl {
public PlagueWind(UUID ownerId) {
public PlagueWind(final PlagueWind card) {
public PlagueWind copy() {return new PlagueWind(this);
public class PygmyRazorback extends CardImpl {
public PygmyRazorback(UUID ownerId) {
public PygmyRazorback(final PygmyRazorback card) {
public PygmyRazorback copy() {return new PygmyRazorback(this);
public class QuicksilverWall extends CardImpl {
public QuicksilverWall(UUID ownerId) {
public QuicksilverWall(final QuicksilverWall card) {
public QuicksilverWall copy() {return new QuicksilverWall(this);return new RebelInformer(this);
public class Rethink extends CardImpl {
public Rethink(UUID ownerId) {
public Rethink(final Rethink card) {
public Rethink copy() {return new Rethink(this);
class RethinkEffect extends OneShotEffect {
RethinkEffect() {
RethinkEffect(final RethinkEffect effect) {
public RethinkEffect copy() {return new RethinkEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RhysticStudy extends CardImpl {
public RhysticStudy(UUID ownerId) {
public RhysticStudy(final RhysticStudy card) {
public RhysticStudy copy() {return new RhysticStudy(this);
class RhysticStudyDrawEffect extends OneShotEffect {
public RhysticStudyDrawEffect() {
public RhysticStudyDrawEffect(final RhysticStudyDrawEffect effect) {
public RhysticStudyDrawEffect copy() {return new RhysticStudyDrawEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RhysticTutor extends CardImpl {
public RhysticTutor(UUID ownerId) {
public RhysticTutor(final RhysticTutor card) {
public RhysticTutor copy() {return new RhysticTutor(this);
public class RibbonSnake extends CardImpl {
public RibbonSnake(UUID ownerId) {
public RibbonSnake(final RibbonSnake card) {
public RibbonSnake copy() {return new RibbonSnake(this);
public class RibCageSpider extends CardImpl {
public RibCageSpider(UUID ownerId) {
public RibCageSpider(final RibCageSpider card) {
public RibCageSpider copy() {return new RibCageSpider(this);
public class RidgelineRager extends CardImpl {
public RidgelineRager(UUID ownerId) {
public RidgelineRager(final RidgelineRager card) {
public RidgelineRager copy() {return new RidgelineRager(this);
public class RootCage extends CardImpl {
public RootCage(UUID ownerId) {
public RootCage(final RootCage card) {
public RootCage copy() {return new RootCage(this);
public class ScoriaCat extends CardImpl {
public ScoriaCat(UUID ownerId) {
public ScoriaCat(final ScoriaCat card) {
public ScoriaCat copy() {return new ScoriaCat(this);
public class SearingWind extends CardImpl {
public SearingWind(UUID ownerId) {
public SearingWind(final SearingWind card) {
public SearingWind copy() {return new SearingWind(this);
public class SpiketailDrake extends CardImpl {
public SpiketailDrake(UUID ownerId) {
public SpiketailDrake(final SpiketailDrake card) {
public SpiketailDrake copy() {return new SpiketailDrake(this);
public class SpittingSpider extends CardImpl {
public SpittingSpider(UUID ownerId) {
public SpittingSpider(final SpittingSpider card) {
public SpittingSpider copy() {return new SpittingSpider(this);
public class SporeFrog extends CardImpl {
public SporeFrog(UUID ownerId) {
public SporeFrog(final SporeFrog card) {
public SporeFrog copy() {return new SporeFrog(this);
public class SpurGrappler extends CardImpl {
public SpurGrappler(UUID ownerId) {
public SpurGrappler(final SpurGrappler card) {
public SpurGrappler copy() {return new SpurGrappler(this);
public class SquirrelWrangler extends CardImpl {
public SquirrelWrangler(UUID ownerId) {
public SquirrelWrangler(final SquirrelWrangler card) {
public SquirrelWrangler copy() {return new SquirrelWrangler(this);
public class StealStrength extends CardImpl {
public StealStrength(UUID ownerId) {
public StealStrength(final StealStrength card) {
public StealStrength copy() {return new StealStrength(this);
class StealStrengthEffect extends ContinuousEffectImpl {
public StealStrengthEffect() {
public StealStrengthEffect(final StealStrengthEffect effect) {
public StealStrengthEffect copy() {return new StealStrengthEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class StormwatchEagle extends CardImpl {
public StormwatchEagle(UUID ownerId) {
public StormwatchEagle(final StormwatchEagle card) {
public StormwatchEagle copy() {return new StormwatchEagle(this);
public class SunkenField extends CardImpl {
public SunkenField(UUID ownerId) {
public SunkenField(final SunkenField card) {
public SunkenField copy() {return new SunkenField(this);
public class SwordDancer extends CardImpl {
public SwordDancer(UUID ownerId) {
public SwordDancer(final SwordDancer card) {
public SwordDancer copy() {return new SwordDancer(this);
public class Thrive extends CardImpl {
public Thrive(UUID ownerId) {
public Thrive(final Thrive card) {
public Thrive copy() {return new Thrive(this);
public void adjustTargets(Ability ability, Game game) {
public class TrenchingSteed extends CardImpl {
public TrenchingSteed(UUID ownerId) {
public TrenchingSteed(final TrenchingSteed card) {
public TrenchingSteed copy() {return new TrenchingSteed(this);
public class TroubledHealer extends CardImpl {
public TroubledHealer(UUID ownerId) {
public TroubledHealer(final TroubledHealer card) {
public TroubledHealer copy() {return new TroubledHealer(this);
public class TroublesomeSpirit extends CardImpl {
public TroublesomeSpirit(UUID ownerId) {
public TroublesomeSpirit(final TroublesomeSpirit card) {
public TroublesomeSpirit copy() {return new TroublesomeSpirit(this);
public class VerdantField extends CardImpl {
public VerdantField(UUID ownerId) {
public VerdantField(final VerdantField card) {
public VerdantField copy() {return new VerdantField(this);
public class VintaraElephant extends CardImpl {
public VintaraElephant(UUID ownerId) {
public VintaraElephant(final VintaraElephant card) {
public VintaraElephant copy() {return new VintaraElephant(this);
public class VintaraSnapper extends CardImpl {
public VintaraSnapper(UUID ownerId) {
public VintaraSnapper(final VintaraSnapper card) {
public VintaraSnapper copy() {return new VintaraSnapper(this);
public class WellOfDiscovery extends CardImpl {
public WellOfDiscovery(UUID ownerId) {
public WellOfDiscovery(final WellOfDiscovery card) {
public WellOfDiscovery copy() {return new WellOfDiscovery(this);return new WellOfLife(this);
public class WildMight extends CardImpl {
public WildMight(UUID ownerId) {
public WildMight(final WildMight card) {
public WildMight copy() {return new WildMight(this);
public class WintermoonMesa extends CardImpl {
public WintermoonMesa(UUID ownerId) {
public WintermoonMesa(final WintermoonMesa card) {
public WintermoonMesa copy() {return new WintermoonMesa(this);
public class ZerapaMinotaur extends CardImpl {
public ZerapaMinotaur(UUID ownerId) {
public ZerapaMinotaur(final ZerapaMinotaur card) {
public ZerapaMinotaur copy() {return new ZerapaMinotaur(this);
public class AgrusKosWojekVeteran extends CardImpl {
public AgrusKosWojekVeteran(UUID ownerId) {
public AgrusKosWojekVeteran(final AgrusKosWojekVeteran card) {
public AgrusKosWojekVeteran copy() {return new AgrusKosWojekVeteran(this);
public class AutochthonWurm extends CardImpl {
public AutochthonWurm(UUID ownerId) {
public AutochthonWurm(final AutochthonWurm card) {
public AutochthonWurm copy() {return new AutochthonWurm(this);return new BarbarianRiftcutter(this);
public class BelltowerSphinx extends CardImpl {
public BelltowerSphinx(UUID ownerId) {
public BelltowerSphinx(final BelltowerSphinx card) {
public BelltowerSphinx copy() {return new BelltowerSphinx(this);
class BelltowerSphinxEffect extends TriggeredAbilityImpl {
public BelltowerSphinxEffect() {
public BelltowerSphinxEffect(BelltowerSphinxEffect effect) {
public BelltowerSphinxEffect copy() {return new BelltowerSphinxEffect(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a source deals damage to {this}, that source's controller puts that many cards from the top of his or her library into his or her graveyard.";
public class BenevolentAncestor extends CardImpl {
public BenevolentAncestor(UUID ownerId) {
public BenevolentAncestor(final BenevolentAncestor card) {
public BenevolentAncestor copy() {return new BenevolentAncestor(this);
public class BlazingArchon extends CardImpl {
public BlazingArchon(UUID ownerId) {
public BlazingArchon(final BlazingArchon card) {
public BlazingArchon copy() {return new BlazingArchon(this);
public class Blockbuster extends CardImpl {
public Blockbuster(UUID ownerId) {
public Blockbuster(final Blockbuster card) {
public Blockbuster copy() {return new Blockbuster(this);
public class BloodFunnel extends CardImpl {
public BloodFunnel(UUID ownerId) {
public BloodFunnel(final BloodFunnel card) {
public BloodFunnel copy() {return new BloodFunnel(this);
public class BorosGuildmage extends CardImpl {
public BorosGuildmage (UUID ownerId) {
public BorosGuildmage (final BorosGuildmage card) {
public BorosGuildmage copy() {return new BorosGuildmage(this);
public class BorosRecruit extends CardImpl {
public BorosRecruit(UUID ownerId) {
public BorosRecruit(final BorosRecruit card) {
public BorosRecruit copy() {return new BorosRecruit(this);
public class BorosSignet extends CardImpl {
public BorosSignet (UUID ownerId) {
public BorosSignet (final BorosSignet card) {
public BorosSignet copy() {return new BorosSignet(this);
public class BottledCloister extends CardImpl {
public BottledCloister(UUID ownerId) {
public BottledCloister(final BottledCloister card) {
public BottledCloister copy() {return new BottledCloister(this);
class BottledCloisterExileEffect extends OneShotEffect {
public BottledCloisterExileEffect() {
public BottledCloisterExileEffect(final BottledCloisterExileEffect effect) {
public BottledCloisterExileEffect copy() {return new BottledCloisterExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class BottledCloisterReturnEffect extends OneShotEffect {
public BottledCloisterReturnEffect() {this.staticText = "return all cards you own exiled with {this} to your hand";
public BottledCloisterReturnEffect(final BottledCloisterReturnEffect effect) {
public BottledCloisterReturnEffect copy() {return new BottledCloisterReturnEffect(this);
public boolean apply(Game game, Ability source) {game.informPlayers(sourcePermanent.getLogName() + ": " + controller.getLogName() + " returns "+ numberOfCards + " card" + (numberOfCards > 1 ?"s":"") + " from exile to hand");return true;return false;
public class Brainspoil extends CardImpl {
public Brainspoil(UUID ownerId) {
public Brainspoil(final Brainspoil card) {
public Brainspoil copy() {return new Brainspoil(this);
public class BrambleElemental extends CardImpl {
public BrambleElemental(UUID ownerId) {
public BrambleElemental(final BrambleElemental card) {
public BrambleElemental copy() {return new BrambleElemental(this);
public class BreathOfFury extends CardImpl {
public BreathOfFury(UUID ownerId) {
public BreathOfFury(final BreathOfFury card) {
public BreathOfFury copy() {return new BreathOfFury(this);
class BreathOfFuryAbility extends TriggeredAbilityImpl {
public BreathOfFuryAbility() {
public BreathOfFuryAbility(final BreathOfFuryAbility ability) {
public BreathOfFuryAbility copy() {return new BreathOfFuryAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When enchanted creature deals combat damage to a player, " + super.getRule();
class BreathOfFuryEffect extends OneShotEffect {
public BreathOfFuryEffect() {
public BreathOfFuryEffect(final BreathOfFuryEffect effect) {
public BreathOfFuryEffect copy() {return new BreathOfFuryEffect(this);
public boolean apply(Game game, Ability source){return false;return true;return false;
public class CarvenCaryatid extends CardImpl {
public CarvenCaryatid(UUID ownerId) {
public CarvenCaryatid(final CarvenCaryatid card) {
public CarvenCaryatid copy() {return new CarvenCaryatid(this);
public class CentaurSafeguard extends CardImpl {
public CentaurSafeguard(UUID ownerId) {
public CentaurSafeguard(final CentaurSafeguard card) {
public CentaurSafeguard copy() {return new CentaurSafeguard(this);
public class CeruleanSphinx extends CardImpl {
public CeruleanSphinx(UUID ownerId) {
public CeruleanSphinx(final CeruleanSphinx card) {
public CeruleanSphinx copy() {return new CeruleanSphinx(this);
public class Char extends CardImpl {
public Char(UUID ownerId) {
public Char(final Char card) {
public Char copy() {return new Char(this);
public class ChordOfCalling extends CardImpl {
public ChordOfCalling(UUID ownerId) {
public ChordOfCalling(final ChordOfCalling card) {
public ChordOfCalling copy() {return new ChordOfCalling(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;return new ChordofCallingSearchEffect(this);
public class ClingingDarkness extends CardImpl {
public ClingingDarkness(UUID ownerId) {
public ClingingDarkness(final ClingingDarkness card) {
public ClingingDarkness copy() {return new ClingingDarkness(this);
public class CloudstoneCurio extends CardImpl {
public CloudstoneCurio(UUID ownerId) {
public CloudstoneCurio(final CloudstoneCurio card) {
public CloudstoneCurio copy() {return new CloudstoneCurio(this);
class CloudstoneCurioEffect extends OneShotEffect {
public CloudstoneCurioEffect() {this.staticText = "you may return another permanent you control that shares a card type with it to its owner's hand";
public CloudstoneCurioEffect(final CloudstoneCurioEffect effect) {
public CloudstoneCurioEffect copy() {return new CloudstoneCurioEffect(this);
public boolean apply(Game game, Ability source) {Permanent returningCreature = game.getPermanent(target.getFirstTarget());if (returningCreature != null) {controller.moveCards(returningCreature, null, Zone.HAND, source, game);return true;return false;
public class ClutchOfTheUndercity extends CardImpl {
public ClutchOfTheUndercity(UUID ownerId) {
public ClutchOfTheUndercity(final ClutchOfTheUndercity card) {
public ClutchOfTheUndercity copy() {return new ClutchOfTheUndercity(this);
public class CompulsiveResearch extends CardImpl {
public CompulsiveResearch(UUID ownerId) {
public CompulsiveResearch(final CompulsiveResearch card) {
public CompulsiveResearch copy() {return new CompulsiveResearch(this);
class CompulsiveResearchDiscardEffect extends OneShotEffect {
public CompulsiveResearchDiscardEffect() {
public CompulsiveResearchDiscardEffect(final CompulsiveResearchDiscardEffect effect) {
public CompulsiveResearchDiscardEffect copy() {return new CompulsiveResearchDiscardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new ConcertedEffort(this);return new ConcertedEffortEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class CongregationAtDawn extends CardImpl {
public CongregationAtDawn(UUID ownerId) {
public CongregationAtDawn(final CongregationAtDawn card) {
public CongregationAtDawn copy() {return new CongregationAtDawn(this);
class CongregationAtDawnEffect extends OneShotEffect {
public CongregationAtDawnEffect() {
public CongregationAtDawnEffect(final CongregationAtDawnEffect effect) {
public CongregationAtDawnEffect copy() {return new CongregationAtDawnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ConsultTheNecrosages extends CardImpl {
public ConsultTheNecrosages(UUID ownerId) {
public ConsultTheNecrosages(final ConsultTheNecrosages card) {
public ConsultTheNecrosages copy() {return new ConsultTheNecrosages(this);
public class Convolute extends CardImpl {
public Convolute(UUID ownerId) {
public Convolute(final Convolute card) {
public Convolute copy() {return new Convolute(this);
public class CopyEnchantment extends CardImpl {
public CopyEnchantment(UUID ownerId) {
public CopyEnchantment(final CopyEnchantment card) {
public CopyEnchantment copy() {return new CopyEnchantment(this);
class CopyEnchantmentEffect extends CopyPermanentEffect {
public CopyEnchantmentEffect(FilterPermanent filter) {
public CopyEnchantmentEffect(final CopyEnchantmentEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public CopyEnchantmentEffect copy() {return new CopyEnchantmentEffect(this);
public class CourierHawk extends CardImpl {
public CourierHawk(UUID ownerId) {
public CourierHawk(final CourierHawk card) {
public CourierHawk copy() {return new CourierHawk(this);
public class CrownOfConvergence extends CardImpl {
public CrownOfConvergence(UUID ownerId) {
public CrownOfConvergence(final CrownOfConvergence card) {
public CrownOfConvergence copy() {return new CrownOfConvergence(this);
class CrownOfConvergenceColorBoostEffect extends BoostAllEffect {
CrownOfConvergenceColorBoostEffect() {
CrownOfConvergenceColorBoostEffect(CrownOfConvergenceColorBoostEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CrownOfConvergenceColorBoostEffect copy() {return new CrownOfConvergenceColorBoostEffect(this);
class CrownOfConvergenceEffect extends OneShotEffect {
public CrownOfConvergenceEffect() {
public CrownOfConvergenceEffect(final CrownOfConvergenceEffect effect) {
public CrownOfConvergenceEffect copy() {return new CrownOfConvergenceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CyclopeanSnare extends CardImpl {
public CyclopeanSnare(UUID ownerId) {
public CyclopeanSnare(final CyclopeanSnare card) {
public CyclopeanSnare copy() {return new CyclopeanSnare(this);
public class Darkblast extends CardImpl {
public Darkblast(UUID ownerId) {
public Darkblast(final Darkblast card) {
public Darkblast copy() {return new Darkblast(this);
public class DevouringLight extends CardImpl {
public DevouringLight(UUID ownerId) {
public DevouringLight(final DevouringLight card) {
public DevouringLight copy() {return new DevouringLight(this);
public class DimirAqueduct extends CardImpl {
public DimirAqueduct(UUID ownerId) {
public DimirAqueduct(final DimirAqueduct card) {
public DimirAqueduct copy() {return new DimirAqueduct(this);
public class DimirCutpurse extends CardImpl {
public DimirCutpurse(UUID ownerId) {
public DimirCutpurse(final DimirCutpurse card) {
public DimirCutpurse copy() {return new DimirCutpurse(this);
class DimirCutpurseEffect extends OneShotEffect {
DimirCutpurseEffect() {
DimirCutpurseEffect(final DimirCutpurseEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public DimirCutpurseEffect copy() {return new DimirCutpurseEffect(this);
public class DimirDoppelganger extends CardImpl {
public DimirDoppelganger(UUID ownerId) {
public DimirDoppelganger(final DimirDoppelganger card) {
public DimirDoppelganger copy() {return new DimirDoppelganger(this);
class DimirDoppelgangerEffect extends ContinuousEffectImpl {
public DimirDoppelgangerEffect() {
public DimirDoppelgangerEffect(final DimirDoppelgangerEffect effect) {
public DimirDoppelgangerEffect copy() {return new DimirDoppelgangerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class DimirGuildmage extends CardImpl {
public DimirGuildmage(UUID ownerId) {
public DimirGuildmage(final DimirGuildmage card) {
public DimirGuildmage copy() {return new DimirGuildmage(this);
public class DimirHouseGuard extends CardImpl {
public DimirHouseGuard(UUID ownerId) {
public DimirHouseGuard(final DimirHouseGuard card) {
public DimirHouseGuard copy() {return new DimirHouseGuard(this);
public class DimirInfiltrator extends CardImpl {
public DimirInfiltrator(UUID ownerId) {
public DimirInfiltrator(final DimirInfiltrator card) {
public DimirInfiltrator copy() {return new DimirInfiltrator(this);
public class DimirMachinations extends CardImpl {
public DimirMachinations(UUID ownerId) {
public DimirMachinations(final DimirMachinations card) {
public DimirMachinations copy() {return new DimirMachinations(this);
class DimirMachinationsEffect extends OneShotEffect {
DimirMachinationsEffect() {
DimirMachinationsEffect(final DimirMachinationsEffect effect) {
public DimirMachinationsEffect copy() {return new DimirMachinationsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DimirSignet extends CardImpl {
public DimirSignet (UUID ownerId) {
public DimirSignet (final DimirSignet card) {
public DimirSignet copy() {return new DimirSignet(this);
public class Disembowel extends CardImpl {
public Disembowel(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public Disembowel(final Disembowel card) {
public Disembowel copy() {return new Disembowel(this);return new DivebomberGriffin(this);
public class DizzySpell extends CardImpl {
public DizzySpell(UUID ownerId) {
public DizzySpell(final DizzySpell card) {
public DizzySpell copy() {return new DizzySpell(this);
public class DowsingShaman extends CardImpl {
public DowsingShaman(UUID ownerId) {
public DowsingShaman(final DowsingShaman card) {
public DowsingShaman copy() {return new DowsingShaman(this);return new DriftOfPhantasms(this);
public class DryadsCaress extends CardImpl {
public DryadsCaress(UUID ownerId) {
public DryadsCaress(final DryadsCaress card) {
public DryadsCaress copy() {return new DryadsCaress(this);return new DuskmantleHouseOfShadow(this);return new ElvesOfDeepShadow(this);
public class ElvishSkysweeper extends CardImpl {
public ElvishSkysweeper(UUID ownerId) {
public ElvishSkysweeper(final ElvishSkysweeper card) {
public ElvishSkysweeper copy() {return new ElvishSkysweeper(this);
public class FieryConclusion extends CardImpl {
public FieryConclusion(UUID ownerId) {
public FieryConclusion(final FieryConclusion card) {
public FieryConclusion copy() {return new FieryConclusion(this);
public class FiremaneAngel extends CardImpl {
public FiremaneAngel(UUID ownerId) {
public FiremaneAngel(final FiremaneAngel card) {
public FiremaneAngel copy() {return new FiremaneAngel(this);
class SourceOnBattelfieldOrGraveyardCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return (game.getState().getZone(source.getSourceId()).equals(Zone.GRAVEYARD)
public String toString() {return "if {this} is in your graveyard or on the battlefield";
public class FistsOfIronwood extends CardImpl {
public FistsOfIronwood(UUID ownerId) {
public FistsOfIronwood(final FistsOfIronwood card) {
public FistsOfIronwood copy() {return new FistsOfIronwood(this);
public class FlameFusillade extends CardImpl {
public FlameFusillade(UUID ownerId) {
public FlameFusillade(final FlameFusillade card) {
public FlameFusillade copy() {return new FlameFusillade(this);
public class FlameKinZealot extends CardImpl {
public FlameKinZealot(UUID ownerId) {
public FlameKinZealot(final FlameKinZealot card) {
public FlameKinZealot copy() {return new FlameKinZealot(this);
public class FlightOfFancy extends CardImpl {
public FlightOfFancy(UUID ownerId) {
public FlightOfFancy(final FlightOfFancy card) {
public FlightOfFancy copy() {return new FlightOfFancy(this);
public class FollowedFootsteps extends CardImpl {
public FollowedFootsteps(UUID ownerId) {
public FollowedFootsteps(final FollowedFootsteps card) {
public FollowedFootsteps copy() {return new FollowedFootsteps(this);
class FollowedFootstepsEffect extends OneShotEffect {
public FollowedFootstepsEffect() {
public FollowedFootstepsEffect(final FollowedFootstepsEffect effect) {
public FollowedFootstepsEffect copy() {return new FollowedFootstepsEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return false;
public class FrenziedGoblin extends CardImpl {
public FrenziedGoblin(UUID ownerId) {
public FrenziedGoblin(final FrenziedGoblin card) {
public FrenziedGoblin copy() {return new FrenziedGoblin(this);
public class GalvanicArc extends CardImpl {
public GalvanicArc(UUID ownerId) {
public GalvanicArc(final GalvanicArc card) {
public GalvanicArc copy() {return new GalvanicArc(this);
public class GateHound extends CardImpl {
public GateHound(UUID ownerId) {
public GateHound(final GateHound card) {
public GateHound copy() {return new GateHound(this);
public class GatherCourage extends CardImpl {
public GatherCourage(UUID ownerId) {
public GatherCourage(final GatherCourage card) {
public GatherCourage copy() {return new GatherCourage(this);
public class GlareOfSubdual extends CardImpl {
public GlareOfSubdual(UUID ownerId) {
public GlareOfSubdual(final GlareOfSubdual card) {
public GlareOfSubdual copy() {return new GlareOfSubdual(this);
public class GlassGolem extends CardImpl {
public GlassGolem (UUID ownerId) {
public GlassGolem (final GlassGolem card) {
public GlassGolem copy() {return new GlassGolem(this);
public class GlimpseTheUnthinkable extends CardImpl {
public GlimpseTheUnthinkable(UUID ownerId) {
public GlimpseTheUnthinkable(final GlimpseTheUnthinkable card) {
public GlimpseTheUnthinkable copy() {return new GlimpseTheUnthinkable(this);
public class GoblinFireFiend extends CardImpl {
public GoblinFireFiend(UUID ownerId) {
public GoblinFireFiend(final GoblinFireFiend card) {
public GoblinFireFiend copy() {return new GoblinFireFiend(this);
public class GoblinSpelunkers extends CardImpl {
public GoblinSpelunkers(UUID ownerId) {
public GoblinSpelunkers(final GoblinSpelunkers card) {
public GoblinSpelunkers copy() {return new GoblinSpelunkers(this);
public class GolgariBrownscale extends CardImpl {
public GolgariBrownscale(UUID ownerId) {
public GolgariBrownscale(final GolgariBrownscale card) {
public GolgariBrownscale copy() {return new GolgariBrownscale(this);
public class GolgariGermination extends CardImpl {
public GolgariGermination(UUID ownerId) {
public GolgariGermination(final GolgariGermination card) {
public GolgariGermination copy() {return new GolgariGermination(this);
public class GolgariRotFarm extends CardImpl {
public GolgariRotFarm(UUID ownerId) {
public GolgariRotFarm(final GolgariRotFarm card) {
public GolgariRotFarm copy() {return new GolgariRotFarm(this);
public class GolgariRotwurm extends CardImpl {
public GolgariRotwurm(UUID ownerId) {
public GolgariRotwurm(final GolgariRotwurm card) {
public GolgariRotwurm copy() {return new GolgariRotwurm(this);
public class GolgariSignet extends CardImpl {
public GolgariSignet (UUID ownerId) {
public GolgariSignet (final GolgariSignet card) {
public GolgariSignet copy() {return new GolgariSignet(this);
public class GolgariThug extends CardImpl {
public GolgariThug(UUID ownerId) {
public GolgariThug(final GolgariThug card) {
public GolgariThug copy() {return new GolgariThug(this);
public class GoliathSpider extends CardImpl {
public GoliathSpider(UUID ownerId) {
public GoliathSpider(final GoliathSpider card) {
public GoliathSpider copy() {return new GoliathSpider(this);
public class GraveShellScarab extends CardImpl {
public GraveShellScarab(UUID ownerId) {
public GraveShellScarab(final GraveShellScarab card) {
public GraveShellScarab copy() {return new GraveShellScarab(this);
public class GrayscaledGharial extends CardImpl {
public GrayscaledGharial (UUID ownerId) {
public GrayscaledGharial (final GrayscaledGharial card) {
public GrayscaledGharial copy() {return new GrayscaledGharial(this);
public class GreaterForgeling extends CardImpl {
public GreaterForgeling(UUID ownerId) {
public GreaterForgeling(final GreaterForgeling card) {
public GreaterForgeling copy() {return new GreaterForgeling(this);return new GreaterMossdog(this);
public class Grozoth extends CardImpl {
public Grozoth(UUID ownerId) {
public Grozoth(final Grozoth card) {
public Grozoth copy() {return new Grozoth(this);
class GrozothEffect extends SearchEffect {
public GrozothEffect() {
public GrozothEffect(final GrozothEffect effect) {
public GrozothEffect copy() {return new GrozothEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GuardianOfVituGhazi extends CardImpl {
public GuardianOfVituGhazi(UUID ownerId) {
public GuardianOfVituGhazi(final GuardianOfVituGhazi card) {
public GuardianOfVituGhazi copy() {return new GuardianOfVituGhazi(this);
public class HalcyonGlaze extends CardImpl {
public HalcyonGlaze(UUID ownerId) {
public HalcyonGlaze(final HalcyonGlaze card) {
public HalcyonGlaze copy() {return new HalcyonGlaze(this);
class HalcyonGlazeToken extends Token {
HalcyonGlazeToken() {
public class HammerfistGiant extends CardImpl {
public HammerfistGiant(UUID ownerId) {
public HammerfistGiant(final HammerfistGiant card) {
public HammerfistGiant copy() {return new HammerfistGiant(this);
public class Hex extends CardImpl {
public Hex(UUID ownerId) {
public Hex(final Hex card) {
public Hex copy() {return new Hex(this);
public class HourOfReckoning extends CardImpl {
public HourOfReckoning(UUID ownerId) {
public HourOfReckoning(final HourOfReckoning card) {
public HourOfReckoning copy() {return new HourOfReckoning(this);
public class HuntedDragon extends CardImpl {
public HuntedDragon(UUID ownerId) {
public HuntedDragon(final HuntedDragon card) {
public HuntedDragon copy() {return new HuntedDragon(this);
class KnightToken extends Token {
KnightToken() {
public class HuntedHorror extends CardImpl {
public HuntedHorror(UUID ownerId) {
public HuntedHorror(final HuntedHorror card) {
public HuntedHorror copy() {return new HuntedHorror(this);
class CentaurToken extends Token {
CentaurToken() {
public class HuntedLammasu extends CardImpl {
public HuntedLammasu(UUID ownerId) {
public HuntedLammasu(final HuntedLammasu card) {
public HuntedLammasu copy() {return new HuntedLammasu(this);
class HorrorToken extends Token {
HorrorToken() {
public class InfectiousHost extends CardImpl {
public InfectiousHost(UUID ownerId) {
public InfectiousHost(final InfectiousHost card) {
public InfectiousHost copy() {return new InfectiousHost(this);
public class IvyDancer extends CardImpl {
public IvyDancer(UUID ownerId) {
public IvyDancer(final IvyDancer card) {
public IvyDancer copy() {return new IvyDancer(this);
public class Junktroller extends CardImpl {
public Junktroller(UUID ownerId) {
public Junktroller(final Junktroller card) {
public Junktroller copy() {return new Junktroller(this);
public class KeeningBanshee extends CardImpl {
public KeeningBanshee(UUID ownerId) {
public KeeningBanshee(final KeeningBanshee card) {
public KeeningBanshee copy() {return new KeeningBanshee(this);
public class LastGasp extends CardImpl {
public LastGasp(UUID ownerId) {
public LastGasp(final LastGasp card) {
public LastGasp copy() {return new LastGasp(this);
public class LeaveNoTrace extends CardImpl {
public LeaveNoTrace(UUID ownerId) {
public LeaveNoTrace(final LeaveNoTrace card) {
public LeaveNoTrace copy() {return new LeaveNoTrace(this);
class LeaveNoTraceEffect extends OneShotEffect {
LeaveNoTraceEffect() {
LeaveNoTraceEffect(final LeaveNoTraceEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public LeaveNoTraceEffect copy() {return new LeaveNoTraceEffect(this);return new LifeFromTheLoam(this);
public class LightningHelix extends CardImpl {
public LightningHelix (UUID ownerId) {
public LightningHelix (final LightningHelix card) {
public LightningHelix copy() {return new LightningHelix(this);
public class LoreBroker extends CardImpl {
public LoreBroker(UUID ownerId) {
public LoreBroker(final LoreBroker card) {
public LoreBroker copy() {return new LoreBroker(this);return new LoxodonGatekeeper(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;return new LoxodonGatekeeperTapEffect(this);return new LoxodonHierarch(this);return new LurkingInformant(this);return new LurkingInformantEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MindleechMass extends CardImpl {
public MindleechMass(UUID ownerId) {
public MindleechMass(final MindleechMass card) {
public MindleechMass copy() {return new MindleechMass(this);
class MindleechMassEffect extends OneShotEffect {
public MindleechMassEffect() {
public MindleechMassEffect(final MindleechMassEffect effect) {
public MindleechMassEffect copy() {return new MindleechMassEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Mindmoil extends CardImpl {
public Mindmoil(UUID ownerId) {
public Mindmoil(final Mindmoil card) {
public Mindmoil copy() {return new Mindmoil(this);
class MindmoilEffect extends OneShotEffect {
public MindmoilEffect() {
public MindmoilEffect(final MindmoilEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MindmoilEffect copy() {return new MindmoilEffect(this);
public class MnemonicNexus extends CardImpl {
public MnemonicNexus(UUID ownerId) {
public MnemonicNexus(final MnemonicNexus card) {
public MnemonicNexus copy() {return new MnemonicNexus(this);
class MnemonicNexusEffect extends OneShotEffect {
public MnemonicNexusEffect() {
public MnemonicNexusEffect(final MnemonicNexusEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MnemonicNexusEffect copy() {return new MnemonicNexusEffect(this);
public class MoldervineCloak extends CardImpl {
public MoldervineCloak(UUID ownerId) {
public MoldervineCloak(final MoldervineCloak card) {
public MoldervineCloak copy() {return new MoldervineCloak(this);
public class MoltenSentry extends CardImpl {
public MoltenSentry(UUID ownerId) {
public MoltenSentry(final MoltenSentry card) {
public MoltenSentry copy() {return new MoltenSentry(this);
class MoltenSentryEffect extends OneShotEffect {
public MoltenSentryEffect() {
public MoltenSentryEffect(MoltenSentryEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public MoltenSentryEffect copy() {return new MoltenSentryEffect(this);
public class Moroii extends CardImpl {
public Moroii(UUID ownerId) {
public Moroii(final Moroii card) {
public Moroii copy() {return new Moroii(this);
public class Necroplasm extends CardImpl {
public Necroplasm(UUID ownerId) {
public Necroplasm(final Necroplasm card) {
public Necroplasm copy() {return new Necroplasm(this);
class NecroplasmEffect extends OneShotEffect {
NecroplasmEffect() {
NecroplasmEffect(final NecroplasmEffect effect) {
public NecroplasmEffect copy() {return new NecroplasmEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NetherbornPhalanx extends CardImpl {
public NetherbornPhalanx(UUID ownerId) {
public NetherbornPhalanx(final NetherbornPhalanx card) {
public NetherbornPhalanx copy() {return new NetherbornPhalanx(this);
class NetherbornPhalanxEffect extends OneShotEffect {
NetherbornPhalanxEffect() {
NetherbornPhalanxEffect(final NetherbornPhalanxEffect effect) {
public NetherbornPhalanxEffect copy() {return new NetherbornPhalanxEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NightguardPatrol extends CardImpl {
public NightguardPatrol (UUID ownerId) {
public NightguardPatrol (final NightguardPatrol card) {
public NightguardPatrol copy() {return new NightguardPatrol(this);
public class NightmareVoid extends CardImpl {
public NightmareVoid(UUID ownerId) {
public NightmareVoid(final NightmareVoid card) {
public NightmareVoid copy() {return new NightmareVoid(this);
public class NullmageShepherd extends CardImpl {
public NullmageShepherd(UUID ownerId) {
public NullmageShepherd(final NullmageShepherd card) {
public NullmageShepherd copy() {return new NullmageShepherd(this);
public class OathswornGiant extends CardImpl {
public OathswornGiant(UUID ownerId) {
public OathswornGiant(final OathswornGiant card) {
public OathswornGiant copy() {return new OathswornGiant(this);
public class OvergrownTomb extends CardImpl {
public OvergrownTomb (UUID ownerId) {
public OvergrownTomb (final OvergrownTomb card) {
public OvergrownTomb copy() {return new OvergrownTomb(this);
public class Overwhelm extends CardImpl {
public Overwhelm(UUID ownerId) {
public Overwhelm(final Overwhelm card) {
public Overwhelm copy() {return new Overwhelm(this);
public class PeregrineMask extends CardImpl {
public PeregrineMask(UUID ownerId) {
public PeregrineMask(final PeregrineMask card) {
public PeregrineMask copy() {return new PeregrineMask(this);
public class PerilousForays extends CardImpl {
public PerilousForays(UUID ownerId) {
public PerilousForays(final PerilousForays card) {
public PerilousForays copy() {return new PerilousForays(this);
public class Perplex extends CardImpl {
public Perplex(UUID ownerId) {
public Perplex(final Perplex card) {
public Perplex copy() {return new Perplex(this);
public class Phytohydra extends CardImpl {
public Phytohydra(UUID ownerId) {
public Phytohydra(final Phytohydra card) {
public Phytohydra copy() {return new Phytohydra(this);
class PhytohydraEffect extends ReplacementEffectImpl {
PhytohydraEffect() {
PhytohydraEffect(final PhytohydraEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGE_CREATURE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getSourceId());
public boolean apply(Game game, Ability source) {return true;
public PhytohydraEffect copy() {return new PhytohydraEffect(this);
public class PrimordialSage extends CardImpl {
public PrimordialSage(UUID ownerId) {
public PrimordialSage(final PrimordialSage card) {
public PrimordialSage copy() {return new PrimordialSage(this);
public class PrivilegedPosition extends CardImpl {
public PrivilegedPosition(UUID ownerId) {
public PrivilegedPosition(final PrivilegedPosition card) {
public PrivilegedPosition copy() {return new PrivilegedPosition(this);
public class PsychicDrain extends CardImpl {
public PsychicDrain(UUID ownerId) {
public PsychicDrain(final PsychicDrain card) {
public PsychicDrain copy() {return new PsychicDrain(this);
public class Putrefy extends CardImpl {
public Putrefy (UUID ownerId) {
public Putrefy (final Putrefy card) {
public Putrefy copy() {return new Putrefy(this);
public class RainOfEmbers extends CardImpl {
public RainOfEmbers(UUID ownerId) {
public RainOfEmbers(final RainOfEmbers card) {
public RainOfEmbers copy() {return new RainOfEmbers(this);
public class RallyTheRighteous extends CardImpl {
public RallyTheRighteous(UUID ownerId) {
public RallyTheRighteous(final RallyTheRighteous card) {
public RallyTheRighteous copy() {return new RallyTheRighteous(this);
class RallyTheRighteousUntapEffect extends OneShotEffect {
public RallyTheRighteousUntapEffect() {
public RallyTheRighteousUntapEffect(final RallyTheRighteousUntapEffect effect) {
public RallyTheRighteousUntapEffect copy() {return new RallyTheRighteousUntapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class RallyTheRighteousBoostEffect extends ContinuousEffectImpl {
public RallyTheRighteousBoostEffect() {
public RallyTheRighteousBoostEffect(final RallyTheRighteousBoostEffect effect) {
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public RallyTheRighteousBoostEffect copy() {return new RallyTheRighteousBoostEffect(this);
public class RollingSpoil extends CardImpl {
public RollingSpoil(UUID ownerId) {
public RollingSpoil(final RollingSpoil card) {
public RollingSpoil copy() {return new RollingSpoil(this);
public class RoofstalkerWight extends CardImpl {
public RoofstalkerWight (UUID ownerId) {
public RoofstalkerWight (final RoofstalkerWight card) {
public RoofstalkerWight copy() {return new RoofstalkerWight(this);
public class RootKinAlly extends CardImpl {
public RootKinAlly(UUID ownerId) {
public RootKinAlly(final RootKinAlly card) {
public RootKinAlly copy() {return new RootKinAlly(this);
public class SacredFoundry extends CardImpl {
public SacredFoundry (UUID ownerId) {
public SacredFoundry (final SacredFoundry card) {
public SacredFoundry copy() {return new SacredFoundry(this);
public class Sandsower extends CardImpl {
public Sandsower(UUID ownerId) {
public Sandsower(final Sandsower card) {
public Sandsower copy() {return new Sandsower(this);
public class SavraQueenOfTheGolgari extends CardImpl {
public SavraQueenOfTheGolgari(UUID ownerId) {
public SavraQueenOfTheGolgari(final SavraQueenOfTheGolgari card) {
public SavraQueenOfTheGolgari copy() {return new SavraQueenOfTheGolgari(this);return new SavraSacrificeBlackCreatureAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SACRIFICED_PERMANENT;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.getControllerId())
public String getRule() {return "Whenever you sacrifice a black creature, " + super.getRule();return new SavraSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new SavraSacrificeGreenCreatureAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SACRIFICED_PERMANENT;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.getControllerId())
public String getRule() {return "Whenever you sacrifice a green creature, " + super.getRule();
public class ScatterTheSeeds extends CardImpl {
public ScatterTheSeeds(UUID ownerId) {
public ScatterTheSeeds(final ScatterTheSeeds card) {
public ScatterTheSeeds copy() {return new ScatterTheSeeds(this);
public class SearingMeditation extends CardImpl {
public SearingMeditation(UUID ownerId) {
public SearingMeditation(final SearingMeditation card) {
public SearingMeditation copy() {return new SearingMeditation(this);
public class SeedSpark extends CardImpl {
public SeedSpark(UUID ownerId) {
public SeedSpark(final SeedSpark card) {
public SeedSpark copy() {return new SeedSpark(this);
public class SeismicSpike extends CardImpl {
public SeismicSpike(UUID ownerId) {
public SeismicSpike(final SeismicSpike card) {
public SeismicSpike copy() {return new SeismicSpike(this);
public class SelesnyaEvangel extends CardImpl {
public SelesnyaEvangel(UUID ownerId) {
public SelesnyaEvangel(final SelesnyaEvangel card) {
public SelesnyaEvangel copy() {return new SelesnyaEvangel(this);
public class SelesnyaGuildmage extends CardImpl {
public SelesnyaGuildmage (UUID ownerId) {
public SelesnyaGuildmage (final SelesnyaGuildmage card) {
public SelesnyaGuildmage copy() {return new SelesnyaGuildmage(this);
public class SelesnyaSagittars extends CardImpl {
public SelesnyaSagittars(UUID ownerId) {
public SelesnyaSagittars(final SelesnyaSagittars card) {
public SelesnyaSagittars copy() {return new SelesnyaSagittars(this);
public class SelesnyaSanctuary extends CardImpl {
public SelesnyaSanctuary(UUID ownerId) {
public SelesnyaSanctuary(final SelesnyaSanctuary card) {
public SelesnyaSanctuary copy() {return new SelesnyaSanctuary(this);
public class SelesnyaSignet extends CardImpl {
public SelesnyaSignet (UUID ownerId) {
public SelesnyaSignet (final SelesnyaSignet card) {
public SelesnyaSignet copy() {return new SelesnyaSignet(this);
public class SellSwordBrute extends CardImpl {
public SellSwordBrute(UUID ownerId) {
public SellSwordBrute(final SellSwordBrute card) {
public SellSwordBrute copy() {return new SellSwordBrute(this);
public class Sewerdreg extends CardImpl {
public Sewerdreg(UUID ownerId) {
public Sewerdreg(final Sewerdreg card) {
public Sewerdreg copy() {return new Sewerdreg(this);return new ShadowOfDoubt(this);
public LibrariesCantBeSearchedEffect() {
public LibrariesCantBeSearchedEffect(final LibrariesCantBeSearchedEffect effect) {
public LibrariesCantBeSearchedEffect copy() {return new LibrariesCantBeSearchedEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getType() == GameEvent.EventType.SEARCH_LIBRARY;
public class SiegeWurm extends CardImpl {
public SiegeWurm(UUID ownerId) {
public SiegeWurm(final SiegeWurm card) {
public SiegeWurm copy() {return new SiegeWurm(this);
public class SinsOfThePast extends CardImpl {
public SinsOfThePast(UUID ownerId) {
public SinsOfThePast(final SinsOfThePast card) {
public SinsOfThePast copy() {return new SinsOfThePast(this);
class SinsOfThePastEffect extends OneShotEffect {
SinsOfThePastEffect() {
SinsOfThePastEffect(final SinsOfThePastEffect effect) {
public SinsOfThePastEffect copy() {return new SinsOfThePastEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class SinsOfThePastCastFromGraveyardEffect extends AsThoughEffectImpl {
SinsOfThePastCastFromGraveyardEffect() {
SinsOfThePastCastFromGraveyardEffect(final SinsOfThePastCastFromGraveyardEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SinsOfThePastCastFromGraveyardEffect copy() {return new SinsOfThePastCastFromGraveyardEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
class SinsOfThePastReplacementEffect extends ReplacementEffectImpl {
SinsOfThePastReplacementEffect(UUID cardId) {
SinsOfThePastReplacementEffect(final SinsOfThePastReplacementEffect effect) {
public SinsOfThePastReplacementEffect copy() {return new SinsOfThePastReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return zEvent.getToZone() == Zone.GRAVEYARD
public class SistersOfStoneDeath extends CardImpl {
public SistersOfStoneDeath(UUID ownerId) {
public SistersOfStoneDeath(final SistersOfStoneDeath card) {
public SistersOfStoneDeath copy() {return new SistersOfStoneDeath(this);
class SistersOfStoneDeathEffect extends OneShotEffect {
public SistersOfStoneDeathEffect(UUID exileId) {
public SistersOfStoneDeathEffect(final SistersOfStoneDeathEffect effect) {
public boolean apply(Game game, Ability source) {return controller.moveCards(chosenCard, Zone.BATTLEFIELD, source, game);return false;
public SistersOfStoneDeathEffect copy() {return new SistersOfStoneDeathEffect(this);
public class SkyknightLegionnaire extends CardImpl {
public SkyknightLegionnaire (UUID ownerId) {
public SkyknightLegionnaire (final SkyknightLegionnaire card) {
public SkyknightLegionnaire copy() {return new SkyknightLegionnaire(this);
public class SnappingDrake extends CardImpl {
public SnappingDrake (UUID ownerId) {
public SnappingDrake (final SnappingDrake card) {
public SnappingDrake copy() {return new SnappingDrake(this);
public class StasisCell extends CardImpl {
public StasisCell(UUID ownerId) {
public StasisCell(final StasisCell card) {
public StasisCell copy() {return new StasisCell(this);
public class StinkweedImp extends CardImpl {
public StinkweedImp(UUID ownerId) {
public StinkweedImp(final StinkweedImp card) {
public StinkweedImp copy() {return new StinkweedImp(this);
public class StoneSeederHierophant extends CardImpl {
public StoneSeederHierophant(UUID ownerId) {
public StoneSeederHierophant(final StoneSeederHierophant card) {
public StoneSeederHierophant copy() {return new StoneSeederHierophant(this);
public class StoneshakerShaman extends CardImpl {
public StoneshakerShaman(UUID ownerId) {
public StoneshakerShaman(final StoneshakerShaman card) {
public StoneshakerShaman copy() {return new StoneshakerShaman(this);
public class StrandsOfUndeath extends CardImpl {
public StrandsOfUndeath(UUID ownerId) {
public StrandsOfUndeath(final StrandsOfUndeath card) {
public StrandsOfUndeath copy() {return new StrandsOfUndeath(this);
public class SunderingVitae extends CardImpl {
public SunderingVitae(UUID ownerId) {
public SunderingVitae(final SunderingVitae card) {
public SunderingVitae copy() {return new SunderingVitae(this);return new Sunforger(this);return new SunforgerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class UnattachSourceCost extends CostImpl {
public UnattachSourceCost() {
public UnattachSourceCost(UnattachSourceCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return attachment.getAttachedTo() != null;return false;
public UnattachSourceCost copy() {return new UnattachSourceCost(this);return new SunhomeEnforcer(this);return new SunhomeEnforcerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage, you gain that much life.";
public class SuppressionField extends CardImpl {
public SuppressionField(UUID ownerId) {
public SuppressionField(final SuppressionField card) {
public SuppressionField copy() {return new SuppressionField(this);
SuppressionFieldCostReductionEffect() {
SuppressionFieldCostReductionEffect(SuppressionFieldCostReductionEffect effect) {return true;return abilityToModify.getAbilityType().equals(AbilityType.ACTIVATED);
public SuppressionFieldCostReductionEffect copy() {return new SuppressionFieldCostReductionEffect(this);
public class SurveillingSprite extends CardImpl {
public SurveillingSprite(UUID ownerId) {
public SurveillingSprite(final SurveillingSprite card) {
public SurveillingSprite copy() {return new SurveillingSprite(this);
public class TatteredDrake extends CardImpl {
public TatteredDrake (UUID ownerId) {
public TatteredDrake (final TatteredDrake card) {
public TatteredDrake copy() {return new TatteredDrake(this);
public class TempleGarden extends CardImpl {
public TempleGarden (UUID ownerId) {
public TempleGarden (final TempleGarden card) {
public TempleGarden copy() {return new TempleGarden(this);return new Terraformer(this);return new TerraformerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new TerraformerContinuousEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class ThundersongTrumpeter extends CardImpl {
public ThundersongTrumpeter(UUID ownerId) {
public ThundersongTrumpeter(final ThundersongTrumpeter card) {
public ThundersongTrumpeter copy() {return new ThundersongTrumpeter(this);
public class TidewaterMinion extends CardImpl {
public TidewaterMinion(UUID ownerId) {
public TidewaterMinion(final TidewaterMinion card) {
public TidewaterMinion copy() {return new TidewaterMinion(this);
public class TolsimirWolfblood extends CardImpl {
public TolsimirWolfblood(UUID ownerId) {
public TolsimirWolfblood(final TolsimirWolfblood card) {
public TolsimirWolfblood copy() {return new TolsimirWolfblood(this);
class VojaToken extends Token{
public VojaToken(){
public class TorpidMoloch extends CardImpl {
public TorpidMoloch(UUID ownerId) {
public TorpidMoloch(final TorpidMoloch card) {
public TorpidMoloch copy() {return new TorpidMoloch(this);
public class Transluminant extends CardImpl {
public Transluminant(UUID ownerId) {
public Transluminant(final Transluminant card) {
public Transluminant copy() {return new Transluminant(this);
public class TwilightDrover extends CardImpl {
public TwilightDrover(UUID ownerId) {
public TwilightDrover(final TwilightDrover card) {
public TwilightDrover copy() {return new TwilightDrover(this);
class TwilightDroverTriggeredAbility extends TriggeredAbilityImpl {
TwilightDroverTriggeredAbility() {
TwilightDroverTriggeredAbility(final TwilightDroverTriggeredAbility ability) {
public TwilightDroverTriggeredAbility copy() {return new TwilightDroverTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return permanent.getCardType().contains(CardType.CREATURE) && permanent instanceof PermanentToken;return false;
public String getRule() {return "Whenever a creature token leaves the battlefield, put a +1/+1 counter on {this}";
public class UndercityShade extends CardImpl {
public UndercityShade(UUID ownerId) {
public UndercityShade(final UndercityShade card) {
public UndercityShade copy() {return new UndercityShade(this);
public class Ursapine extends CardImpl {
public Ursapine(UUID ownerId) {
public Ursapine(final Ursapine card) {
public Ursapine copy() {return new Ursapine(this);
public class VedalkenDismisser extends CardImpl {
public VedalkenDismisser(UUID ownerId) {
public VedalkenDismisser(final VedalkenDismisser card) {
public VedalkenDismisser copy() {return new VedalkenDismisser(this);
public class VedalkenEntrancer extends CardImpl {
public VedalkenEntrancer(UUID ownerId) {
public VedalkenEntrancer(final VedalkenEntrancer card) {
public VedalkenEntrancer copy() {return new VedalkenEntrancer(this);
public class VeteranArmorer extends CardImpl {
public VeteranArmorer(UUID ownerId) {
public VeteranArmorer(final VeteranArmorer card) {
public VeteranArmorer copy() {return new VeteranArmorer(this);
public class ViashinoFangtail extends CardImpl {
public ViashinoFangtail(UUID ownerId) {
public ViashinoFangtail(final ViashinoFangtail card) {
public ViashinoFangtail copy() {return new ViashinoFangtail(this);
public class ViashinoSlasher extends CardImpl {
public ViashinoSlasher(UUID ownerId) {
public ViashinoSlasher(final ViashinoSlasher card) {
public ViashinoSlasher copy() {return new ViashinoSlasher(this);
public class VigorMortis extends CardImpl {
public VigorMortis(UUID ownerId) {
public VigorMortis(final VigorMortis card) {
public VigorMortis copy() {return new VigorMortis(this);
class VigorMortisAddCounterEffect extends OneShotEffect {
VigorMortisAddCounterEffect() {
VigorMortisAddCounterEffect(final VigorMortisAddCounterEffect effect) {
public VigorMortisAddCounterEffect copy() {return new VigorMortisAddCounterEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class VindictiveMob extends CardImpl {
public VindictiveMob(UUID ownerId) {
public VindictiveMob(final VindictiveMob card) {
public VindictiveMob copy() {return new VindictiveMob(this);
public class VinelasherKudzu extends CardImpl {
public VinelasherKudzu(UUID ownerId) {
public VinelasherKudzu(final VinelasherKudzu card) {
public VinelasherKudzu copy() {return new VinelasherKudzu(this);
class VinelasherKudzuAbility extends LandfallAbility {
VinelasherKudzuAbility() {
public VinelasherKudzuAbility(final VinelasherKudzuAbility ability) {
public String getRule() {return "Whenever a land enters the battlefield under your control, put a +1/+1 counter on {this}.";
public LandfallAbility copy() {return new VinelasherKudzuAbility(this);
public class VituGhaziTheCityTree extends CardImpl {
public VituGhaziTheCityTree(UUID ownerId) {
public VituGhaziTheCityTree(final VituGhaziTheCityTree card) {
public VituGhaziTheCityTree copy() {return new VituGhaziTheCityTree(this);
public class VotaryOfTheConclave extends CardImpl {
public VotaryOfTheConclave (UUID ownerId) {
public VotaryOfTheConclave (final VotaryOfTheConclave card) {
public VotaryOfTheConclave copy() {return new VotaryOfTheConclave(this);
public class Watchwolf extends CardImpl {
public Watchwolf (UUID ownerId) {
public Watchwolf (final Watchwolf card) {
public Watchwolf copy() {return new Watchwolf(this);
public class WateryGrave extends CardImpl {
public WateryGrave(UUID ownerId) {
public WateryGrave(final WateryGrave card) {
public WateryGrave copy() {return new WateryGrave(this);
public class WizenedSnitches extends CardImpl {
public WizenedSnitches(UUID ownerId) {
public WizenedSnitches(final WizenedSnitches card) {
public WizenedSnitches copy() {return new WizenedSnitches(this);
public class AbruptDecay extends CardImpl {
public AbruptDecay(UUID ownerId) {
public AbruptDecay(final AbruptDecay card) {
public AbruptDecay copy() {return new AbruptDecay(this);
public class AerialPredation extends CardImpl {
public AerialPredation(UUID ownerId) {
public AerialPredation(final AerialPredation card) {
public AerialPredation copy() {return new AerialPredation(this);
public class AngelOfSerenity extends CardImpl {
public AngelOfSerenity(UUID ownerId) {
public AngelOfSerenity(final AngelOfSerenity card) {
public AngelOfSerenity copy() {return new AngelOfSerenity(this);
class AngelOfSerenityTriggeredAbility extends ZoneChangeTriggeredAbility {
public AngelOfSerenityTriggeredAbility() {
public AngelOfSerenityTriggeredAbility(AngelOfSerenityTriggeredAbility ability) {
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public AngelOfSerenityTriggeredAbility copy() {return new AngelOfSerenityTriggeredAbility(this);
class AngelOfSerenityEnterEffect extends OneShotEffect {
public AngelOfSerenityEnterEffect() {
public AngelOfSerenityEnterEffect(final AngelOfSerenityEnterEffect effect) {
public AngelOfSerenityEnterEffect copy() {return new AngelOfSerenityEnterEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class AnnihilatingFire extends CardImpl {
public AnnihilatingFire(UUID ownerId) {
public AnnihilatingFire(final AnnihilatingFire card) {
public AnnihilatingFire copy() {return new AnnihilatingFire(this);
public class AquusSteed extends CardImpl {
public AquusSteed(UUID ownerId) {
public AquusSteed(final AquusSteed card) {
public AquusSteed copy() {return new AquusSteed(this);
public class ArchonOfTheTriumvirate extends CardImpl {
public ArchonOfTheTriumvirate(UUID ownerId) {
public ArchonOfTheTriumvirate(final ArchonOfTheTriumvirate card) {
public ArchonOfTheTriumvirate copy() {return new ArchonOfTheTriumvirate(this);
public class Archweaver extends CardImpl {
public Archweaver(UUID ownerId) {
public Archweaver(final Archweaver card) {
public Archweaver copy() {return new Archweaver(this);
public class ArmadaWurm extends CardImpl {
public ArmadaWurm(UUID ownerId) {
public ArmadaWurm(final ArmadaWurm card) {
public ArmadaWurm copy() {return new ArmadaWurm(this);
public class ArmoryGuard extends CardImpl {
public ArmoryGuard(UUID ownerId) {
public ArmoryGuard(final ArmoryGuard card) {
public ArmoryGuard copy() {return new ArmoryGuard(this);
public class AshZealot extends CardImpl {
public AshZealot (UUID ownerId) {
public AshZealot (final AshZealot card) {
public AshZealot copy() {return new AshZealot(this);
class AshZealotTriggeredAbility extends TriggeredAbilityImpl {
public AshZealotTriggeredAbility() {
public AshZealotTriggeredAbility(final AshZealotTriggeredAbility ability) {
public AshZealotTriggeredAbility copy() {return new AshZealotTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a spell from a graveyard, {this} deals 3 damage to that player.";
public class AssassinsStrike extends CardImpl {
public AssassinsStrike(UUID ownerId) {
public AssassinsStrike(final AssassinsStrike card) {
public AssassinsStrike copy() {return new AssassinsStrike(this);
class AssassinsStrikeEffect extends OneShotEffect {
public AssassinsStrikeEffect() {
public AssassinsStrikeEffect(final AssassinsStrikeEffect effect) {
public AssassinsStrikeEffect copy() {return new AssassinsStrikeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AugerSpree extends CardImpl {
public AugerSpree(UUID ownerId) {
public AugerSpree(final AugerSpree card) {
public AugerSpree copy() {return new AugerSpree(this);
public class AvengingArrow extends CardImpl {
public AvengingArrow(UUID ownerId) {
public AvengingArrow(final AvengingArrow card) {
public AvengingArrow copy() {return new AvengingArrow(this);
class AvengingArrowTarget extends TargetPermanent {
public AvengingArrowTarget() {
public AvengingArrowTarget(final AvengingArrowTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return super.canTarget(id, source, game);return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public AvengingArrowTarget copy() {return new AvengingArrowTarget(this);
public class AxebaneGuardian extends CardImpl {
public AxebaneGuardian(UUID ownerId) {
public AxebaneGuardian(final AxebaneGuardian card) {
public AxebaneGuardian copy() {return new AxebaneGuardian(this);
public class AxebaneStag extends CardImpl {
public AxebaneStag(UUID ownerId) {
public AxebaneStag(final AxebaneStag card) {
public AxebaneStag copy() {return new AxebaneStag(this);
public class AzoriusGuildgate extends CardImpl {
public AzoriusGuildgate(UUID ownerId) {
public AzoriusGuildgate(final AzoriusGuildgate card) {
public AzoriusGuildgate copy() {return new AzoriusGuildgate(this);
public class AzoriusJusticiar extends CardImpl {
public AzoriusJusticiar(UUID ownerId) {
public AzoriusJusticiar(final AzoriusJusticiar card) {
public AzoriusJusticiar copy() {return new AzoriusJusticiar(this);
public class AzoriusKeyrune extends CardImpl {
public AzoriusKeyrune(UUID ownerId) {
public AzoriusKeyrune(final AzoriusKeyrune card) {
public AzoriusKeyrune copy() {return new AzoriusKeyrune(this);
private class AzoriusKeyruneToken extends Token {
AzoriusKeyruneToken() {
public class AzorsElocutors extends CardImpl {
public AzorsElocutors(UUID ownerId) {
public AzorsElocutors(final AzorsElocutors card) {
public AzorsElocutors copy() {return new AzorsElocutors(this);
class AzorsElocutorsTriggeredAbility extends TriggeredAbilityImpl {
public AzorsElocutorsTriggeredAbility() {
public AzorsElocutorsTriggeredAbility(final AzorsElocutorsTriggeredAbility ability) {
public AzorsElocutorsTriggeredAbility copy() {return new AzorsElocutorsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return event.getTargetId().equals(this.controllerId);
public String getRule() {return "Whenever a source deals damage to you, " + super.getRule();
class AzorsElocutorsEffect extends OneShotEffect {
public AzorsElocutorsEffect() {
public AzorsElocutorsEffect(final AzorsElocutorsEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AzorsElocutorsEffect copy() {return new AzorsElocutorsEffect(this);
public class Batterhorn extends CardImpl {
public Batterhorn (UUID ownerId) {
public Batterhorn (final Batterhorn card) {
public Batterhorn copy() {return new Batterhorn(this);
public class BazaarKrovod extends CardImpl {
public BazaarKrovod(UUID ownerId) {
public BazaarKrovod(final BazaarKrovod card) {
public BazaarKrovod copy() {return new BazaarKrovod(this);
class BazaarKrovodEffect extends OneShotEffect {
public BazaarKrovodEffect() {
public BazaarKrovodEffect(BazaarKrovodEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BazaarKrovodEffect copy() {return new BazaarKrovodEffect(this);
public class BellowsLizard extends CardImpl {
public BellowsLizard (UUID ownerId) {
public BellowsLizard (final BellowsLizard card) {
public BellowsLizard copy() {return new BellowsLizard(this);
public class BlistercoilWeird extends CardImpl {
public BlistercoilWeird(UUID ownerId) {
public BlistercoilWeird(final BlistercoilWeird card) {
public BlistercoilWeird copy() {return new BlistercoilWeird(this);
public class BloodfrayGiant extends CardImpl {
public BloodfrayGiant(UUID ownerId) {
public BloodfrayGiant(final BloodfrayGiant card) {
public BloodfrayGiant copy() {return new BloodfrayGiant(this);
public class Blustersquall extends CardImpl {
public Blustersquall(UUID ownerId) {
public Blustersquall(final Blustersquall card) {
public Blustersquall copy() {return new Blustersquall(this);
class BlustersqallTapAllEffect extends OneShotEffect {
public BlustersqallTapAllEffect(FilterCreaturePermanent filter) {
public BlustersqallTapAllEffect(final BlustersqallTapAllEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public BlustersqallTapAllEffect copy() {return new BlustersqallTapAllEffect(this);
public class Brushstrider extends CardImpl {
public Brushstrider(UUID ownerId) {
public Brushstrider(final Brushstrider card) {
public Brushstrider copy() {return new Brushstrider(this);
public class CallOfTheConclave extends CardImpl {
public CallOfTheConclave(UUID ownerId) {
public CallOfTheConclave(final CallOfTheConclave card) {
public CallOfTheConclave copy() {return new CallOfTheConclave(this);
public class CarnivalHellsteed extends CardImpl {
public CarnivalHellsteed(UUID ownerId) {
public CarnivalHellsteed(final CarnivalHellsteed card) {
public CarnivalHellsteed copy() {return new CarnivalHellsteed(this);
public class CatacombSlug extends CardImpl {
public CatacombSlug(UUID ownerId) {
public CatacombSlug(final CatacombSlug card) {
public CatacombSlug copy() {return new CatacombSlug(this);
public class CentaurHealer extends CardImpl {
public CentaurHealer(UUID ownerId) {
public CentaurHealer(final CentaurHealer card) {
public CentaurHealer copy() {return new CentaurHealer(this);
public class CentaursHerald extends CardImpl {
public CentaursHerald(UUID ownerId) {
public CentaursHerald(final CentaursHerald card) {
public CentaursHerald copy() {return new CentaursHerald(this);
public class ChaosImps extends CardImpl {
public ChaosImps(UUID ownerId) {
public ChaosImps(final ChaosImps card) {
public ChaosImps copy() {return new ChaosImps(this);
public class ChemistersTrick extends CardImpl {
public ChemistersTrick(UUID ownerId) {
public ChemistersTrick(final ChemistersTrick card) {
public ChemistersTrick copy() {return new ChemistersTrick(this);
class ChemistersTrickEffect extends OneShotEffect {
public ChemistersTrickEffect(FilterCreaturePermanent filter) {
public ChemistersTrickEffect(final ChemistersTrickEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ChemistersTrickEffect copy() {return new ChemistersTrickEffect(this);
public class ChronicFlooding extends CardImpl {
public ChronicFlooding(UUID ownerId) {
public ChronicFlooding(final ChronicFlooding card) {
public ChronicFlooding copy() {return new ChronicFlooding(this);
class ChronicFloodingAbility extends TriggeredAbilityImpl {
ChronicFloodingAbility() {
ChronicFloodingAbility(final ChronicFloodingAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public ChronicFloodingAbility copy() {return new ChronicFloodingAbility(this);
public String getRule() {return "Whenever enchanted land becomes tapped, its controller puts the top three cards of his or her library into his or her graveyard.";
public class CivicSaber extends CardImpl {
public CivicSaber(UUID ownerId) {
public CivicSaber(final CivicSaber card) {
public CivicSaber copy() {return new CivicSaber(this);
class CivicSaberColorCount implements DynamicValue {
public CivicSaberColorCount() {
public CivicSaberColorCount(final CivicSaberColorCount dynamicValue) {
public int calculate(Game game, Ability source, Effect effect) {return count;
public DynamicValue copy() {return new CivicSaberColorCount(this);
public String toString() {return "1";
public String getMessage() {return "of its colors";
public class Cobblebrute extends CardImpl {
public Cobblebrute (UUID ownerId) {
public Cobblebrute (final Cobblebrute card) {
public Cobblebrute copy() {return new Cobblebrute(this);
public class CodexShredder extends CardImpl {
public CodexShredder(UUID ownerId) {
public CodexShredder(final CodexShredder card) {
public CodexShredder copy() {return new CodexShredder(this);
public class CollectiveBlessing extends CardImpl {
public CollectiveBlessing(UUID ownerId) {
public CollectiveBlessing(final CollectiveBlessing card) {
public CollectiveBlessing copy() {return new CollectiveBlessing(this);
public class CommonBond extends CardImpl {
public CommonBond(UUID ownerId) {
public CommonBond(final CommonBond card) {
public CommonBond copy() {return new CommonBond(this);
class CommonBondEffect extends OneShotEffect {
public CommonBondEffect() {
public CommonBondEffect(final CommonBondEffect effect) {
public boolean apply(Game game, Ability source) {return affectedTargets > 0;
public CommonBondEffect copy() {return new CommonBondEffect(this);
public class ConcordiaPegasus extends CardImpl {
public ConcordiaPegasus(UUID ownerId) {
public ConcordiaPegasus(final ConcordiaPegasus card) {
public ConcordiaPegasus copy() {return new ConcordiaPegasus(this);
public class ConjuredCurrency extends CardImpl {
public ConjuredCurrency(UUID ownerId) {
public ConjuredCurrency(final ConjuredCurrency card) {
public ConjuredCurrency copy() {return new ConjuredCurrency(this);
public class CorpsejackMenace extends CardImpl {
public CorpsejackMenace(UUID ownerId) {
public CorpsejackMenace(final CorpsejackMenace card) {
public CorpsejackMenace copy() {return new CorpsejackMenace(this);
class CorpsejackMenaceReplacementEffect extends ReplacementEffectImpl {
CorpsejackMenaceReplacementEffect() {
CorpsejackMenaceReplacementEffect(final CorpsejackMenaceReplacementEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ADD_COUNTERS;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public CorpsejackMenaceReplacementEffect copy() {return new CorpsejackMenaceReplacementEffect(this);
public class Counterflux extends CardImpl {
public Counterflux(UUID ownerId) {public Counterflux(final mage.sets.returntoravnica.Counterflux card) {public mage.sets.returntoravnica.Counterflux copy() {return new mage.sets.returntoravnica.Counterflux(this);
class CounterfluxEffect extends OneShotEffect {
public CounterfluxEffect() {
public CounterfluxEffect(final CounterfluxEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CounterfluxEffect copy() {return new CounterfluxEffect(this);
public class CoursersAccord extends CardImpl {
public CoursersAccord(UUID ownerId) {
public CoursersAccord(final CoursersAccord card) {
public CoursersAccord copy() {return new CoursersAccord(this);
public class CrosstownCourier extends CardImpl {
public CrosstownCourier(UUID ownerId) {
public CrosstownCourier(final CrosstownCourier card) {
public CrosstownCourier copy() {return new CrosstownCourier(this);
class CrosstownCourierTriggeredAbility extends TriggeredAbilityImpl {
public CrosstownCourierTriggeredAbility() {
public CrosstownCourierTriggeredAbility(final CrosstownCourierTriggeredAbility ability) {
public CrosstownCourierTriggeredAbility copy() {return new CrosstownCourierTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, that player puts that many cards from the top of his or her library into his or her graveyard.";
public class CryptbornHorror extends CardImpl {
public CryptbornHorror(UUID ownerId) {
public CryptbornHorror(final CryptbornHorror card) {
public CryptbornHorror copy() {return new CryptbornHorror(this);
class CryptbornHorrorEffect extends OneShotEffect {
CryptbornHorrorEffect() {
CryptbornHorrorEffect(final CryptbornHorrorEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CryptbornHorrorEffect copy() {return new CryptbornHorrorEffect(this);return new CyclonicRift(this);
public boolean apply(Game game, Ability source) {return true;return new CyclonicRiftEffect(this);
public class DaggerdromeImp extends CardImpl {
public DaggerdromeImp(UUID ownerId) {
public DaggerdromeImp(final DaggerdromeImp card) {
public DaggerdromeImp copy() {return new DaggerdromeImp(this);
public class DarkRevenant extends CardImpl {
public DarkRevenant(UUID ownerId) {
public DarkRevenant(final DarkRevenant card) {
public DarkRevenant copy() {return new DarkRevenant(this);
class DarkRevenantEffect extends OneShotEffect {
public DarkRevenantEffect() {
public DarkRevenantEffect(final DarkRevenantEffect effect) {
public DarkRevenantEffect copy() {return new DarkRevenantEffect(this);
public boolean apply(Game game, Ability source) {return card.moveToZone(Zone.LIBRARY, source.getSourceId(), game, true);return true;
public class DeadbridgeGoliath extends CardImpl {
public DeadbridgeGoliath(UUID ownerId) {
public DeadbridgeGoliath(final DeadbridgeGoliath card) {
public DeadbridgeGoliath copy() {return new DeadbridgeGoliath(this);
public class DeadReveler extends CardImpl {
public DeadReveler(UUID ownerId) {
public DeadReveler(final DeadReveler card) {
public DeadReveler copy() {return new DeadReveler(this);
public class DesecrationDemon extends CardImpl {
public DesecrationDemon(UUID ownerId) {
public DesecrationDemon(final DesecrationDemon card) {
public DesecrationDemon copy() {return new DesecrationDemon(this);
class DesecrationDemonEffect extends OneShotEffect {
DesecrationDemonEffect() {
DesecrationDemonEffect(final DesecrationDemonEffect effect) {
public boolean apply(Game game, Ability source) {
{return true;return false;
public DesecrationDemonEffect copy() {return new DesecrationDemonEffect(this);
public class DestroyTheEvidence extends CardImpl {
public DestroyTheEvidence(UUID ownerId) {
public DestroyTheEvidence(final DestroyTheEvidence card) {
public DestroyTheEvidence copy() {return new DestroyTheEvidence(this);
class DestroyTheEvidenceEffect extends OneShotEffect {
public DestroyTheEvidenceEffect() {
public DestroyTheEvidenceEffect(final DestroyTheEvidenceEffect effect) {
public DestroyTheEvidenceEffect copy() {return new DestroyTheEvidenceEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;
public class DetentionSphere extends CardImpl {
public DetentionSphere(UUID ownerId) {
public DetentionSphere(final DetentionSphere card) {
public DetentionSphere copy() {return new DetentionSphere(this);
class DetentionSphereEntersEffect extends OneShotEffect {
public DetentionSphereEntersEffect() {
public DetentionSphereEntersEffect(final DetentionSphereEntersEffect effect) {
public boolean apply(Game game, Ability source) {
public class DeviantGlee extends CardImpl {
public DeviantGlee (UUID ownerId) {
public DeviantGlee (final DeviantGlee card) {
public DeviantGlee copy() {return new DeviantGlee(this);
public class Doorkeeper extends CardImpl {
public Doorkeeper(UUID ownerId) {
public Doorkeeper(final Doorkeeper card) {
public Doorkeeper copy() {return new Doorkeeper(this);
public class Downsize extends CardImpl {
public Downsize(UUID ownerId) {
public Downsize(final Downsize card) {
public Downsize copy() {return new Downsize(this);
public class DrainpipeVermin extends CardImpl {
public DrainpipeVermin(UUID ownerId) {
public DrainpipeVermin(final DrainpipeVermin card) {
public DrainpipeVermin copy() {return new DrainpipeVermin(this);
public class DramaticRescue extends CardImpl {
public DramaticRescue(UUID ownerId) {
public DramaticRescue(final DramaticRescue card) {
public DramaticRescue copy() {return new DramaticRescue(this);
public class Dreadbore extends CardImpl {
public Dreadbore(UUID ownerId) {
public Dreadbore(final Dreadbore card) {
public Dreadbore copy() {return new Dreadbore(this);
public class DregMangler extends CardImpl {
public DregMangler(UUID ownerId) {
public DregMangler(final DregMangler card) {
public DregMangler copy() {return new DregMangler(this);
public class DrudgeBeetle extends CardImpl {
public DrudgeBeetle(UUID ownerId) {
public DrudgeBeetle(final DrudgeBeetle card) {
public DrudgeBeetle copy() {return new DrudgeBeetle(this);
public class DruidsDeliverance extends CardImpl {
public DruidsDeliverance(UUID ownerId) {
public DruidsDeliverance(final DruidsDeliverance card) {
public DruidsDeliverance copy() {return new DruidsDeliverance(this);
class DruidsDeliverancePreventCombatDamageEffect extends PreventionEffectImpl {
public DruidsDeliverancePreventCombatDamageEffect() {
public DruidsDeliverancePreventCombatDamageEffect(final DruidsDeliverancePreventCombatDamageEffect effect) {
public DruidsDeliverancePreventCombatDamageEffect copy() {return new DruidsDeliverancePreventCombatDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class DryadMilitant extends CardImpl {
public DryadMilitant(UUID ownerId) {
public DryadMilitant(final DryadMilitant card) {
public DryadMilitant copy() {return new DryadMilitant(this);
class DryadMilitantReplacementEffect extends ReplacementEffectImpl {
public DryadMilitantReplacementEffect() {
public DryadMilitantReplacementEffect(final DryadMilitantReplacementEffect effect) {
public DryadMilitantReplacementEffect copy() {return new DryadMilitantReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCardToExileWithInfo(card, null, "", source.getSourceId(), game, game.getState().getZone(card.getId()), true);return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class Dynacharge extends CardImpl {
public Dynacharge(UUID ownerId) {
public Dynacharge(final Dynacharge card) {
public Dynacharge copy() {return new Dynacharge(this);
public class Electrickery extends CardImpl {
public Electrickery(UUID ownerId) {
public Electrickery(final Electrickery card) {
public Electrickery copy() {return new Electrickery(this);
public class EpicExperiment extends CardImpl {
public EpicExperiment(UUID ownerId) {
public EpicExperiment(final EpicExperiment card) {
public EpicExperiment copy() {return new EpicExperiment(this);
class EpicExperimentEffect extends OneShotEffect {
public EpicExperimentEffect() {
public EpicExperimentEffect(final EpicExperimentEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public EpicExperimentEffect copy() {return new EpicExperimentEffect(this);
public class EssenceBacklash extends CardImpl {
public EssenceBacklash(UUID ownerId) {
public EssenceBacklash(final EssenceBacklash card) {
public EssenceBacklash copy() {return new EssenceBacklash(this);
class EssenceBacklashEffect extends OneShotEffect {
public EssenceBacklashEffect() {
public EssenceBacklashEffect(final EssenceBacklashEffect effect) {
public EssenceBacklashEffect copy() {return new EssenceBacklashEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class EtherealArmor extends CardImpl {
public EtherealArmor (UUID ownerId) {
public EtherealArmor (final EtherealArmor card) {
public EtherealArmor copy() {return new EtherealArmor(this);
public class FaerieImpostor extends CardImpl {
public FaerieImpostor(UUID ownerId) {
public FaerieImpostor(final FaerieImpostor card) {
public FaerieImpostor copy() {return new FaerieImpostor(this);
class FaerieImpostorEffect extends OneShotEffect {private static final String effectText = "sacrifice it unless you return another creature you control to its owner's hand";
FaerieImpostorEffect() {
FaerieImpostorEffect(FaerieImpostorEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public FaerieImpostorEffect copy() {return new FaerieImpostorEffect(this);
public class FallOfTheGavel extends CardImpl {
public FallOfTheGavel(UUID ownerId) {
public FallOfTheGavel(final FallOfTheGavel card) {
public FallOfTheGavel copy() {return new FallOfTheGavel(this);
public class FencingAce extends CardImpl {
public FencingAce(UUID ownerId) {
public FencingAce(final FencingAce card) {
public FencingAce copy() {return new FencingAce(this);
public class FiremindsForesight extends CardImpl {
public FiremindsForesight(UUID ownerId) {
public FiremindsForesight(final FiremindsForesight card) {
public FiremindsForesight copy() {return new FiremindsForesight(this);
class FiremindsForesightSearchEffect extends OneShotEffect {
public FiremindsForesightSearchEffect() {
public FiremindsForesightSearchEffect(final FiremindsForesightSearchEffect effect) {
public FiremindsForesightSearchEffect copy() {return new FiremindsForesightSearchEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class FrostburnWeird extends CardImpl {
public FrostburnWeird(UUID ownerId) {
public FrostburnWeird(final FrostburnWeird card) {
public FrostburnWeird copy() {return new FrostburnWeird(this);
public class GatecreeperVine extends CardImpl {
public GatecreeperVine(UUID ownerId) {
public GatecreeperVine(final GatecreeperVine card) {
public GatecreeperVine copy() {return new GatecreeperVine(this);
public class GobblingOoze extends CardImpl {
public GobblingOoze(UUID ownerId) {
public GobblingOoze(final GobblingOoze card) {
public GobblingOoze copy() {return new GobblingOoze(this);
public class GoblinElectromancer extends CardImpl {
public GoblinElectromancer(UUID ownerId) {
public GoblinElectromancer(final GoblinElectromancer card) {
public GoblinElectromancer copy() {return new GoblinElectromancer(this);
public class GoblinRally extends CardImpl {
public GoblinRally(UUID ownerId) {
public GoblinRally(final GoblinRally card) {
public GoblinRally copy() {return new GoblinRally(this);
public class GolgariCharm extends CardImpl {
public GolgariCharm(UUID ownerId) {
public GolgariCharm(final GolgariCharm card) {
public GolgariCharm copy() {return new GolgariCharm(this);
public class GolgariDecoy extends CardImpl {
public GolgariDecoy(UUID ownerId) {
public GolgariDecoy(final GolgariDecoy card) {
public GolgariDecoy copy() {return new GolgariDecoy(this);
public class GolgariGuildgate extends CardImpl {
public GolgariGuildgate(UUID ownerId) {
public GolgariGuildgate(final GolgariGuildgate card) {
public GolgariGuildgate copy() {return new GolgariGuildgate(this);
public class GolgariKeyrune extends CardImpl {
public GolgariKeyrune(UUID ownerId) {
public GolgariKeyrune(final GolgariKeyrune card) {
public GolgariKeyrune copy() {return new GolgariKeyrune(this);
private class GolgariKeyruneToken extends Token {
GolgariKeyruneToken() {
public class GolgariLonglegs extends CardImpl {
public GolgariLonglegs(UUID ownerId) {
public GolgariLonglegs(final GolgariLonglegs card) {
public GolgariLonglegs copy() {return new GolgariLonglegs(this);
public class GoreHouseChainwalker extends CardImpl {
public GoreHouseChainwalker(UUID ownerId) {
public GoreHouseChainwalker(final GoreHouseChainwalker card) {
public GoreHouseChainwalker copy() {return new GoreHouseChainwalker(this);
public class GraveBetrayal extends CardImpl {
public GraveBetrayal(UUID ownerId) {
public GraveBetrayal(final GraveBetrayal card) {
public GraveBetrayal copy() {return new GraveBetrayal(this);
class GraveBetrayalTriggeredAbility extends TriggeredAbilityImpl {
public GraveBetrayalTriggeredAbility() {
public GraveBetrayalTriggeredAbility(final GraveBetrayalTriggeredAbility ability) {
public GraveBetrayalTriggeredAbility copy() {return new GraveBetrayalTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you don't control dies, return it to the battlefield under your control with an additional +1/+1 counter on it at the beginning of the next end step. That creature is a black Zombie in addition to its other colors and types.";
class GraveBetrayalEffect extends OneShotEffect {
public GraveBetrayalEffect() {staticText = " return the creature to the battlefield under your control with an additional +1/+1 counter. That creature is a black Zombie in addition to its other colors and types";
public GraveBetrayalEffect(final GraveBetrayalEffect effect) {
public GraveBetrayalEffect copy() {return new GraveBetrayalEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class GraveBetrayalContiniousEffect extends ContinuousEffectImpl {
public GraveBetrayalContiniousEffect() {
public GraveBetrayalContiniousEffect(final GraveBetrayalContiniousEffect effect) {
public GraveBetrayalContiniousEffect copy() {return new GraveBetrayalContiniousEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.ColorChangingEffects_5 || layer == Layer.TypeChangingEffects_4;
public class GrimRoustabout extends CardImpl {
public GrimRoustabout(UUID ownerId) {
public GrimRoustabout(final GrimRoustabout card) {
public GrimRoustabout copy() {return new GrimRoustabout(this);
public class GrislySalvage extends CardImpl {
public GrislySalvage(UUID ownerId) {
public GrislySalvage(final GrislySalvage card) {
public GrislySalvage copy() {return new GrislySalvage(this);
class GrislySalvageEffect extends OneShotEffect {
public GrislySalvageEffect() {
public GrislySalvageEffect(final GrislySalvageEffect effect) {
public GrislySalvageEffect copy() {return new GrislySalvageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GuildFeud extends CardImpl {
public GuildFeud(UUID ownerId) {
public GuildFeud(final GuildFeud card) {
public GuildFeud copy() {return new GuildFeud(this);
class GuildFeudEffect extends OneShotEffect {
public GuildFeudEffect() {
public GuildFeudEffect(final GuildFeudEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GuildFeudEffect copy() {return new GuildFeudEffect(this);
public class Guttersnipe extends CardImpl {
public Guttersnipe (UUID ownerId) {
public Guttersnipe (final Guttersnipe card) {
public Guttersnipe copy() {return new Guttersnipe(this);
public class HavocFestival extends CardImpl {
public HavocFestival (UUID ownerId) {
public HavocFestival (final HavocFestival card) {
public HavocFestival copy() {return new HavocFestival(this);return new HavocFestivalLoseLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HellholeFlailer extends CardImpl {
public HellholeFlailer(UUID ownerId) {
public HellholeFlailer(final HellholeFlailer card) {
public HellholeFlailer copy() {return new HellholeFlailer(this);
public class HorncallersChant extends CardImpl {
public HorncallersChant(UUID ownerId) {
public HorncallersChant(final HorncallersChant card) {
public HorncallersChant copy() {return new HorncallersChant(this);
class RhinoToken extends Token {
public RhinoToken() {
public class HoverBarrier extends CardImpl {
public HoverBarrier(UUID ownerId) {
public HoverBarrier(final HoverBarrier card) {
public HoverBarrier copy() {return new HoverBarrier(this);
public class HussarPatrol extends CardImpl {
public HussarPatrol(UUID ownerId) {
public HussarPatrol(final HussarPatrol card) {
public HussarPatrol copy() {return new HussarPatrol(this);
public class HypersonicDragon extends CardImpl {
public HypersonicDragon(UUID ownerId) {
public HypersonicDragon(final HypersonicDragon card) {
public HypersonicDragon copy() {return new HypersonicDragon(this);
public class InactionInjunction extends CardImpl {
public InactionInjunction(UUID ownerId) {
public InactionInjunction(final InactionInjunction card) {
public InactionInjunction copy() {return new InactionInjunction(this);
public class Inspiration extends CardImpl {
public Inspiration(UUID ownerId) {
public Inspiration(final Inspiration card) {
public Inspiration copy() {return new Inspiration(this);
public class IsperiasSkywatch extends CardImpl {
public IsperiasSkywatch(UUID ownerId) {
public IsperiasSkywatch(final IsperiasSkywatch card) {
public IsperiasSkywatch copy() {return new IsperiasSkywatch(this);
public class IsperiaSupremeJudge extends CardImpl {
public IsperiaSupremeJudge(UUID ownerId) {
public IsperiaSupremeJudge(final IsperiaSupremeJudge card) {
public IsperiaSupremeJudge copy() {return new IsperiaSupremeJudge(this);
public class IzzetCharm extends CardImpl {
public IzzetCharm(UUID ownerId) {
public IzzetCharm(final IzzetCharm card) {
public IzzetCharm copy() {return new IzzetCharm(this);
public class IzzetGuildgate extends CardImpl {
public IzzetGuildgate(UUID ownerId) {
public IzzetGuildgate(final IzzetGuildgate card) {
public IzzetGuildgate copy() {return new IzzetGuildgate(this);
public class IzzetKeyrune extends CardImpl {
public IzzetKeyrune(UUID ownerId) {
public IzzetKeyrune(final IzzetKeyrune card) {
public IzzetKeyrune copy() {return new IzzetKeyrune(this);
private class IzzetKeyruneEffect extends OneShotEffect {
public IzzetKeyruneEffect() {
public IzzetKeyruneEffect(final IzzetKeyruneEffect effect) {
public IzzetKeyruneEffect copy() {return new IzzetKeyruneEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private class IzzetKeyruneToken extends Token {
IzzetKeyruneToken() {
public class IzzetStaticaster extends CardImpl {
public IzzetStaticaster(UUID ownerId) {
public IzzetStaticaster(final IzzetStaticaster card) {
public IzzetStaticaster copy() {return new IzzetStaticaster(this);
class IzzetStaticasterDamageEffect extends OneShotEffect {
public IzzetStaticasterDamageEffect() {
public IzzetStaticasterDamageEffect(final IzzetStaticasterDamageEffect effect) {
public IzzetStaticasterDamageEffect copy() {return new IzzetStaticasterDamageEffect(this);
public boolean apply(Game game, Ability source) {
public class JaceArchitectOfThought extends CardImpl {
public JaceArchitectOfThought(UUID ownerId) {
public JaceArchitectOfThought(final JaceArchitectOfThought card) {
public JaceArchitectOfThought copy() {return new JaceArchitectOfThought(this);
class JaceArchitectOfThoughtStartEffect1 extends OneShotEffect {
public JaceArchitectOfThoughtStartEffect1() {
public JaceArchitectOfThoughtStartEffect1(final JaceArchitectOfThoughtStartEffect1 effect) {
public JaceArchitectOfThoughtStartEffect1 copy() {return new JaceArchitectOfThoughtStartEffect1(this);
public boolean apply(Game game, Ability source) {return true;
class JaceArchitectOfThoughtDelayedTriggeredAbility extends DelayedTriggeredAbility {
public JaceArchitectOfThoughtDelayedTriggeredAbility(int startingTurn) {
public JaceArchitectOfThoughtDelayedTriggeredAbility(final JaceArchitectOfThoughtDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public JaceArchitectOfThoughtDelayedTriggeredAbility copy() {return new JaceArchitectOfThoughtDelayedTriggeredAbility(this);
public boolean isInactive(Game game) {return game.getActivePlayerId().equals(getControllerId()) && game.getTurnNum() != startingTurn;
public String getRule() {return "Until your next turn, whenever a creature an opponent controls attacks, it gets -1/-0 until end of turn.";
class JaceArchitectOfThoughtEffect2 extends OneShotEffect {
public JaceArchitectOfThoughtEffect2() {
public JaceArchitectOfThoughtEffect2(final JaceArchitectOfThoughtEffect2 effect) {
public JaceArchitectOfThoughtEffect2 copy() {return new JaceArchitectOfThoughtEffect2(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
private void postPileToLog(String pileName, Set<Card> cards, Game game) {
class JaceArchitectOfThoughtEffect3 extends OneShotEffect {
public JaceArchitectOfThoughtEffect3() {
public JaceArchitectOfThoughtEffect3(final JaceArchitectOfThoughtEffect3 effect) {
public JaceArchitectOfThoughtEffect3 copy() {return new JaceArchitectOfThoughtEffect3(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;
public class JaradGolgariLichLord extends CardImpl {
public JaradGolgariLichLord(UUID ownerId) {
public JaradGolgariLichLord(final JaradGolgariLichLord card) {
public JaradGolgariLichLord copy() {return new JaradGolgariLichLord(this);
public class KeeningApparition extends CardImpl {
public KeeningApparition(UUID ownerId) {
public KeeningApparition(final KeeningApparition card) {
public KeeningApparition copy() {return new KeeningApparition(this);
public class KnightlyValor extends CardImpl {
public KnightlyValor (UUID ownerId) {
public KnightlyValor (final KnightlyValor card) {
public KnightlyValor copy() {return new KnightlyValor(this);
public class KorozdaGuildmage extends CardImpl {
public KorozdaGuildmage(UUID ownerId) {
public KorozdaGuildmage(final KorozdaGuildmage card) {
public KorozdaGuildmage copy() {return new KorozdaGuildmage(this);
public class KorozdaMonitor extends CardImpl {
public KorozdaMonitor(UUID ownerId) {
public KorozdaMonitor(final KorozdaMonitor card) {
public KorozdaMonitor copy() {return new KorozdaMonitor(this);
public class LaunchParty extends CardImpl {
public LaunchParty(UUID ownerId) {
public LaunchParty(final LaunchParty card) {
public LaunchParty copy() {return new LaunchParty(this);
public class LobberCrew extends CardImpl {
public LobberCrew (UUID ownerId) {
public LobberCrew (final LobberCrew card) {
public LobberCrew copy() {return new LobberCrew(this);
public class LotlethTroll extends CardImpl {
public LotlethTroll(UUID ownerId) {
public LotlethTroll(final LotlethTroll card) {
public LotlethTroll copy() {return new LotlethTroll(this);return new LoxodonSmiter(this);
public class LyevSkyknight extends CardImpl {
public LyevSkyknight(UUID ownerId) {
public LyevSkyknight(final LyevSkyknight card) {
public LyevSkyknight copy() {return new LyevSkyknight(this);
public class ManaBloom extends CardImpl {
public ManaBloom(UUID ownerId) {this.addAbility(new ConditionalTriggeredAbility(triggeredAbility, new SourceHasCounterCondition(CounterType.CHARGE, 0, 0), "At the beginning of your upkeep, if Mana Bloom has no charge counters on it, return it to its owner's hand."));
public ManaBloom(final ManaBloom card) {
public ManaBloom copy() {return new ManaBloom(this);
public class MartialLaw extends CardImpl {
public MartialLaw(UUID ownerId) {
public MartialLaw(final MartialLaw card) {
public MartialLaw copy() {return new MartialLaw(this);
public class MercurialChemister extends CardImpl {
public MercurialChemister(UUID ownerId) {
public MercurialChemister(final MercurialChemister card) {
public MercurialChemister copy() {return new MercurialChemister(this);
public class MinotaurAggressor extends CardImpl {
public MinotaurAggressor (UUID ownerId) {
public MinotaurAggressor (final MinotaurAggressor card) {
public MinotaurAggressor copy() {return new MinotaurAggressor(this);
public class MizziumMortars extends CardImpl {
public MizziumMortars(UUID ownerId) {
public MizziumMortars(final MizziumMortars card) {
public MizziumMortars copy() {return new MizziumMortars(this);
public class MizziumSkin extends CardImpl {
public MizziumSkin(UUID ownerId) {
public MizziumSkin(final MizziumSkin card) {
public MizziumSkin copy() {return new MizziumSkin(this);
public class NecropolisRegent extends CardImpl {
public NecropolisRegent(UUID ownerId) {
public NecropolisRegent(final NecropolisRegent card) {
public NecropolisRegent copy() {return new NecropolisRegent(this);
class NecropolisRegentTriggeredAbility extends TriggeredAbilityImpl {
public NecropolisRegentTriggeredAbility() {
public NecropolisRegentTriggeredAbility(final NecropolisRegentTriggeredAbility ability) {
public NecropolisRegentTriggeredAbility copy() {return new NecropolisRegentTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control deals combat damage to a player, put that many +1/+1 counters on it.";
public class NewPrahvGuildmage extends CardImpl {
public NewPrahvGuildmage(UUID ownerId) {
public NewPrahvGuildmage(final NewPrahvGuildmage card) {
public NewPrahvGuildmage copy() {return new NewPrahvGuildmage(this);
public class NivixGuildmage extends CardImpl {
public NivixGuildmage(UUID ownerId) {
public NivixGuildmage(final NivixGuildmage card) {
public NivixGuildmage copy() {return new NivixGuildmage(this);
public class OakStreetInnkeeper extends CardImpl {
public OakStreetInnkeeper(UUID ownerId) {
public OakStreetInnkeeper(final OakStreetInnkeeper card) {
public OakStreetInnkeeper copy() {return new OakStreetInnkeeper(this);
public class OgreJailbreaker extends CardImpl {
public OgreJailbreaker(UUID ownerId) {
public OgreJailbreaker(final OgreJailbreaker card) {
public OgreJailbreaker copy() {return new OgreJailbreaker(this);
class OgreJailbreakerEffect extends AsThoughEffectImpl {
public OgreJailbreakerEffect() {
public OgreJailbreakerEffect(final OgreJailbreakerEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public OgreJailbreakerEffect copy() {return new OgreJailbreakerEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class PackRat extends CardImpl {
public PackRat(UUID ownerId) {
public PackRat(final PackRat card) {
public PackRat copy() {return new PackRat(this);
public class PalisadeGiant extends CardImpl {
public PalisadeGiant(UUID ownerId) {
public PalisadeGiant(final PalisadeGiant card) {
public PalisadeGiant copy() {return new PalisadeGiant(this);
class PalisadeGiantReplacementEffect extends ReplacementEffectImpl {
PalisadeGiantReplacementEffect() {
PalisadeGiantReplacementEffect(final PalisadeGiantReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {
{return true;
{return new PerilousShadow(this);
public class PhantomGeneral extends CardImpl {
public PhantomGeneral(UUID ownerId) {
public PhantomGeneral(final PhantomGeneral card) {
public PhantomGeneral copy() {return new PhantomGeneral(this);
public class PrecinctCaptain extends CardImpl {
public PrecinctCaptain(UUID ownerId) {
public PrecinctCaptain(final PrecinctCaptain card) {
public PrecinctCaptain copy() {return new PrecinctCaptain(this);
public class PsychicSpiral extends CardImpl {
public PsychicSpiral(UUID ownerId) {
public PsychicSpiral(final PsychicSpiral card) {
public PsychicSpiral copy() {return new PsychicSpiral(this);
class PsychicSpiralEffect extends OneShotEffect {
public PsychicSpiralEffect() {
public PsychicSpiralEffect(final PsychicSpiralEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PsychicSpiralEffect copy() {return new PsychicSpiralEffect(this);
public class PursuitOfFlight extends CardImpl {
public PursuitOfFlight(UUID ownerId) {
public PursuitOfFlight(final PursuitOfFlight card) {
public PursuitOfFlight copy() {return new PursuitOfFlight(this);
public class Pyroconvergence extends CardImpl {
public Pyroconvergence(UUID ownerId) {
public Pyroconvergence(final Pyroconvergence card) {
public Pyroconvergence copy() {return new Pyroconvergence(this);
public class RacecourseFury extends CardImpl {
public RacecourseFury (UUID ownerId) {
public RacecourseFury (final RacecourseFury card) {
public RacecourseFury copy() {return new RacecourseFury(this);return new RakdosCackler(this);return new RakdosCharm(this);
public boolean apply(Game game, Ability source) {return true;return new RakdosCharmDamageEffect(this);return new RakdosGuildgate(this);return new RakdosKeyrune(this);return new RakdosLordOfRiots(this);
public boolean apply(Game game, Ability source) {return true;return new RakdosLordOfRiotsCantCastEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;return true;return false;return true;return false;return new RakdosLordOfRiotsCostReductionEffect(this);return new RakdosRagemutt(this);return new RakdosRingleader(this);
public class RestInPeace extends CardImpl {
public RestInPeace(UUID ownerId) {
public RestInPeace(final RestInPeace card) {
public RestInPeace copy() {return new RestInPeace(this);
class RestInPeaceReplacementEffect extends ReplacementEffectImpl {
public RestInPeaceReplacementEffect() {
public RestInPeaceReplacementEffect(final RestInPeaceReplacementEffect effect) {
public RestInPeaceReplacementEffect copy() {return new RestInPeaceReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCardToExileWithInfo(permanent, null, "", source.getSourceId(), game, Zone.BATTLEFIELD, true);return controller.moveCardToExileWithInfo(card, null, "", source.getSourceId(), game, zEvent.getFromZone(), true);return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return ((ZoneChangeEvent)event).getToZone() == Zone.GRAVEYARD;
public class RighteousAuthority extends CardImpl {
public RighteousAuthority (UUID ownerId) {
public RighteousAuthority (final RighteousAuthority card) {
public RighteousAuthority copy() {return new RighteousAuthority(this);
class CardsInEnchantedControllerHandCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return controller.getHand().size();return 0;
public DynamicValue copy() {return new mage.abilities.dynamicvalue.common.CardsInControllerHandCount();
public String getMessage() {return "card in its controller's hand";
public String toString() {return "1";
public class RisenSanctuary extends CardImpl {
public RisenSanctuary(UUID ownerId) {
public RisenSanctuary(final RisenSanctuary card) {
public RisenSanctuary copy() {return new RisenSanctuary(this);
public class RitesOfReaping extends CardImpl {
public RitesOfReaping(UUID ownerId) {
public RitesOfReaping(final RitesOfReaping card) {
public RitesOfReaping copy() {return new RitesOfReaping(this);
class RitesOfReapingEffect extends ContinuousEffectImpl {
public RitesOfReapingEffect() {
public RitesOfReapingEffect(final RitesOfReapingEffect effect) {
public RitesOfReapingEffect copy() {return new RitesOfReapingEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class RixMaadiGuildmage extends CardImpl {
public RixMaadiGuildmage(UUID ownerId) {
public RixMaadiGuildmage(final RixMaadiGuildmage card) {
public RixMaadiGuildmage copy() {return new RixMaadiGuildmage(this);
public boolean apply(Player input, Game game) {return (0 < watcher.getLiveLost(input.getId()));return false;
public String toString() {return "Player lost life";
public class RoguesPassage extends CardImpl {
public RoguesPassage(UUID ownerId) {
public RoguesPassage(final RoguesPassage card) {
public RoguesPassage copy() {return new RoguesPassage(this);
public class RootbornDefenses extends CardImpl {
public RootbornDefenses(UUID ownerId) {
public RootbornDefenses(final RootbornDefenses card) {
public RootbornDefenses copy() {return new RootbornDefenses(this);
public class RubblebackRhino extends CardImpl {
public RubblebackRhino(UUID ownerId) {
public RubblebackRhino(final RubblebackRhino card) {
public RubblebackRhino copy() {return new RubblebackRhino(this);
public class Runewing extends CardImpl {
public Runewing(UUID ownerId) {
public Runewing(final Runewing card) {
public Runewing copy() {return new Runewing(this);
public class SavageSurge extends CardImpl {
public SavageSurge(UUID ownerId) {
public SavageSurge(final SavageSurge card) {
public SavageSurge copy() {return new SavageSurge(this);
public class SearchTheCity extends CardImpl {
public SearchTheCity(UUID ownerId) {
public SearchTheCity(final SearchTheCity card) {
public SearchTheCity copy() {return new SearchTheCity(this);
class SearchTheCityExileEffect extends OneShotEffect {
public SearchTheCityExileEffect() {
public SearchTheCityExileEffect(final SearchTheCityExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SearchTheCityExileEffect copy() {return new SearchTheCityExileEffect(this);
class SearchTheCityTriggeredAbility extends TriggeredAbilityImpl {
public SearchTheCityTriggeredAbility() {
public SearchTheCityTriggeredAbility(final SearchTheCityTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST || event.getType() == EventType.LAND_PLAYED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you play a card with the same name as one of the exiled cards, " + super.getRule();
public SearchTheCityTriggeredAbility copy() {return new SearchTheCityTriggeredAbility(this);
class SearchTheCityExiledCardToHandEffect extends OneShotEffect {
public SearchTheCityExiledCardToHandEffect() {
public SearchTheCityExiledCardToHandEffect(final SearchTheCityExiledCardToHandEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SearchTheCityExiledCardToHandEffect copy() {return new SearchTheCityExiledCardToHandEffect(this);
public class SearchWarrant extends CardImpl {
public SearchWarrant(UUID ownerId) {
public SearchWarrant(final SearchWarrant card) {
public SearchWarrant copy() {return new SearchWarrant(this);
class SearchWarrantEffect extends OneShotEffect {
public SearchWarrantEffect() {
public SearchWarrantEffect(final SearchWarrantEffect effect) {
public SearchWarrantEffect copy() {return new SearchWarrantEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SecurityBlockade extends CardImpl {
public SecurityBlockade (UUID ownerId) {
public SecurityBlockade (final SecurityBlockade card) {
public SecurityBlockade copy() {return new SecurityBlockade(this);
class SecurityBlockadePreventionEffect extends PreventionEffectImpl {
public SecurityBlockadePreventionEffect() {
public SecurityBlockadePreventionEffect(final SecurityBlockadePreventionEffect effect) {
public SecurityBlockadePreventionEffect copy() {return new SecurityBlockadePreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class SelesnyaCharm extends CardImpl {
public SelesnyaCharm(UUID ownerId) {
public SelesnyaCharm(final SelesnyaCharm card) {
public SelesnyaCharm copy() {return new SelesnyaCharm(this);
public class SelesnyaGuildgate extends CardImpl {
public SelesnyaGuildgate(UUID ownerId) {
public SelesnyaGuildgate(final SelesnyaGuildgate card) {
public SelesnyaGuildgate copy() {return new SelesnyaGuildgate(this);
public class SelesnyaKeyrune extends CardImpl {
public SelesnyaKeyrune(UUID ownerId) {
public SelesnyaKeyrune(final SelesnyaKeyrune card) {
public SelesnyaKeyrune copy() {return new SelesnyaKeyrune(this);
private class SelesnyaKeyruneToken extends Token {
SelesnyaKeyruneToken() {
public class SelesnyaSentry extends CardImpl {
public SelesnyaSentry(UUID ownerId) {
public SelesnyaSentry(final SelesnyaSentry card) {
public SelesnyaSentry copy() {return new SelesnyaSentry(this);
public class SellerOfSongbirds extends CardImpl {
public SellerOfSongbirds(UUID ownerId) {
public SellerOfSongbirds(final SellerOfSongbirds card) {
public SellerOfSongbirds copy() {return new SellerOfSongbirds(this);
public class SkullRend extends CardImpl {
public SkullRend(UUID ownerId) {
public SkullRend(final SkullRend card) {
public SkullRend copy() {return new SkullRend(this);
private class SkullRendEffect extends OneShotEffect {
public SkullRendEffect() {
public SkullRendEffect(final SkullRendEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SkullRendEffect copy() {return new SkullRendEffect(this);
public class SkylinePredator extends CardImpl {
public SkylinePredator(UUID ownerId) {
public SkylinePredator(final SkylinePredator card) {
public SkylinePredator copy() {return new SkylinePredator(this);
public class SkymarkRoc extends CardImpl {
public SkymarkRoc(UUID ownerId) {
public SkymarkRoc(final SkymarkRoc card) {
public SkymarkRoc copy() {return new SkymarkRoc(this);
class SkymarkRocAbility extends TriggeredAbilityImpl {
public SkymarkRocAbility() {
public SkymarkRocAbility(final SkymarkRocAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks, you may return target creature defending player controls with toughness 2 or less to its owner's hand.";
public SkymarkRocAbility copy() {return new SkymarkRocAbility(this);
public class SlaughterGames extends CardImpl {
public SlaughterGames(UUID ownerId) {
public SlaughterGames(final SlaughterGames card) {
public SlaughterGames copy() {return new SlaughterGames(this);
class SlaughterGamesEffect extends SearchTargetGraveyardHandLibraryForCardNameAndExileEffect {
public SlaughterGamesEffect() {
public SlaughterGamesEffect(final SlaughterGamesEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public SlaughterGamesEffect copy() {return new SlaughterGamesEffect(this);
public String getText(Mode mode) {return sb.toString();
public class SlimeMolding extends CardImpl {
public SlimeMolding(UUID ownerId) {
public SlimeMolding(final SlimeMolding card) {
public SlimeMolding copy() {return new SlimeMolding(this);
class SlimeMoldingEffect extends OneShotEffect {
public SlimeMoldingEffect() {
public SlimeMoldingEffect(SlimeMoldingEffect ability) {
public boolean apply(Game game, Ability source) {return true;
public SlimeMoldingEffect copy() {return new SlimeMoldingEffect(this);
class OozeToken extends Token {
public OozeToken() {
public class Slitherhead extends CardImpl {
public Slitherhead(UUID ownerId) {
public Slitherhead(final Slitherhead card) {
public Slitherhead copy() {return new Slitherhead(this);
public class SluicewayScorpion extends CardImpl {
public SluicewayScorpion(UUID ownerId) {
public SluicewayScorpion(final SluicewayScorpion card) {
public SluicewayScorpion copy() {return new SluicewayScorpion(this);
public class SlumReaper extends CardImpl {
public SlumReaper(UUID ownerId) {
public SlumReaper(final SlumReaper card) {
public SlumReaper copy() {return new SlumReaper(this);
public class SoulswornSpirit extends CardImpl {
public SoulswornSpirit(UUID ownerId) {
public SoulswornSpirit(final SoulswornSpirit card) {
public SoulswornSpirit copy() {return new SoulswornSpirit(this);
public class SoulTithe extends CardImpl {
public SoulTithe (UUID ownerId) {
public SoulTithe (final SoulTithe card) {
public SoulTithe copy() {return new SoulTithe(this);
class SoulTitheEffect extends OneShotEffect {
public SoulTitheEffect() {
public SoulTitheEffect(final SoulTitheEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public SoulTitheEffect copy() {return new SoulTitheEffect(this);
public class SpawnOfRixMaadi extends CardImpl {
public SpawnOfRixMaadi(UUID ownerId) {
public SpawnOfRixMaadi(final SpawnOfRixMaadi card) {
public SpawnOfRixMaadi copy() {return new SpawnOfRixMaadi(this);
public class SphereOfSafety extends CardImpl {
public SphereOfSafety(UUID ownerId) {
public SphereOfSafety(final SphereOfSafety card) {
public SphereOfSafety copy() {return new SphereOfSafety(this);
class SphereOfSafetyPayManaToAttackAllEffect extends CantAttackYouUnlessPayManaAllEffect {
SphereOfSafetyPayManaToAttackAllEffect() {
SphereOfSafetyPayManaToAttackAllEffect(SphereOfSafetyPayManaToAttackAllEffect effect) {
public ManaCosts getManaCostToPay(GameEvent event, Ability source, Game game) {return new ManaCostsImpl<>("{" + enchantments + "}");return null;
public SphereOfSafetyPayManaToAttackAllEffect copy() {return new SphereOfSafetyPayManaToAttackAllEffect(this);
public class SphinxOfTheChimes extends CardImpl {
public SphinxOfTheChimes(UUID ownerId) {
public SphinxOfTheChimes(final SphinxOfTheChimes card) {
public SphinxOfTheChimes copy() {return new SphinxOfTheChimes(this);
class DiscardTwoNonlandCardsWithTheSameNameCost extends DiscardTargetCost {
public DiscardTwoNonlandCardsWithTheSameNameCost() {
public DiscardTwoNonlandCardsWithTheSameNameCost(DiscardTwoNonlandCardsWithTheSameNameCost cost) {
public DiscardTwoNonlandCardsWithTheSameNameCost copy() {return new DiscardTwoNonlandCardsWithTheSameNameCost(this);
class TargetTwoNonLandCardsWithSameNameInHand extends TargetCardInHand {
public TargetTwoNonLandCardsWithSameNameInHand() {
public TargetTwoNonLandCardsWithSameNameInHand(final TargetTwoNonLandCardsWithSameNameInHand target) {
public Set<UUID> possibleTargets(UUID sourceControllerId, Game game) {
{return newPossibleTargets;
public boolean canChoose(UUID sourceControllerId, Game game) {return possibleCards > 0;
public boolean canTarget(UUID id, Game game) {return true;return true;return false;
public TargetTwoNonLandCardsWithSameNameInHand copy() {return new TargetTwoNonLandCardsWithSameNameInHand(this);
public class SphinxsRevelation extends CardImpl {
public SphinxsRevelation (UUID ownerId) {
public SphinxsRevelation (final SphinxsRevelation card) {
public SphinxsRevelation copy() {return new SphinxsRevelation(this);
public class SplatterThug extends CardImpl {
public SplatterThug(UUID ownerId) {
public SplatterThug(final SplatterThug card) {
public SplatterThug copy() {return new SplatterThug(this);
public class StabWound extends CardImpl {
public StabWound (UUID ownerId) {
public StabWound (final StabWound card) {
public StabWound copy() {return new StabWound(this);
public class StealerOfSecrets extends CardImpl {
public StealerOfSecrets(UUID ownerId) {
public StealerOfSecrets(final StealerOfSecrets card) {
public StealerOfSecrets copy() {return new StealerOfSecrets(this);
public class StonefareCrocodile extends CardImpl {
public StonefareCrocodile(UUID ownerId) {
public StonefareCrocodile(final StonefareCrocodile card) {
public StonefareCrocodile copy() {return new StonefareCrocodile(this);
public class SunderingGrowth extends CardImpl {
public SunderingGrowth(UUID ownerId) {
public SunderingGrowth(final SunderingGrowth card) {
public SunderingGrowth copy() {return new SunderingGrowth(this);return new SunspireGriffin(this);
public class SupremeVerdict extends CardImpl {
public SupremeVerdict(UUID ownerId) {
public SupremeVerdict(final SupremeVerdict card) {
public SupremeVerdict copy() {return new SupremeVerdict(this);
public class SurveyTheWreckage extends CardImpl {
public SurveyTheWreckage(UUID ownerId) {
public SurveyTheWreckage(final SurveyTheWreckage card) {
public SurveyTheWreckage copy() {return new SurveyTheWreckage(this);return new SwiftJustice(this);
public class Syncopate extends CardImpl {
public Syncopate(UUID ownerId) {
public Syncopate(final Syncopate card) {
public Syncopate copy() {return new Syncopate(this);
class SyncopateCounterUnlessPaysEffect extends OneShotEffect {
public SyncopateCounterUnlessPaysEffect() {
public SyncopateCounterUnlessPaysEffect(final SyncopateCounterUnlessPaysEffect effect) {
public SyncopateCounterUnlessPaysEffect copy() {return new SyncopateCounterUnlessPaysEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return false;
public String getText(Mode mode) {return "Counter target spell unless its controller pays {X}. If that spell is countered this way, exile it instead of putting it into its owner's graveyard";
public class TabletOfTheGuilds extends CardImpl {
public TabletOfTheGuilds(UUID ownerId) {
public TabletOfTheGuilds(final TabletOfTheGuilds card) {
public TabletOfTheGuilds copy() {return new TabletOfTheGuilds(this);
class TabletOfTheGuildsEntersBattlefieldEffect extends OneShotEffect {
public TabletOfTheGuildsEntersBattlefieldEffect() {
public TabletOfTheGuildsEntersBattlefieldEffect(final TabletOfTheGuildsEntersBattlefieldEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;
public TabletOfTheGuildsEntersBattlefieldEffect copy() {return new TabletOfTheGuildsEntersBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new TabletOfTheGuildsGainLifeEffect(this);
public class TavernSwindler extends CardImpl {
public TavernSwindler(UUID ownerId) {
public TavernSwindler(final TavernSwindler card) {
public TavernSwindler copy() {return new TavernSwindler(this);
class TavernSwindlerEffect extends OneShotEffect {
public TavernSwindlerEffect() {
public TavernSwindlerEffect(TavernSwindlerEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public TavernSwindlerEffect copy() {return new TavernSwindlerEffect(this);
public class Teleportal extends CardImpl {
public Teleportal(UUID ownerId) {
public Teleportal(final Teleportal card) {
public Teleportal copy() {return new Teleportal(this);
class TeleportalEffect extends OneShotEffect {
public TeleportalEffect(FilterCreaturePermanent filter) {
public TeleportalEffect(final TeleportalEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TeleportalEffect copy() {return new TeleportalEffect(this);
public class TenementCrasher extends CardImpl {
public TenementCrasher(UUID ownerId) {
public TenementCrasher(final TenementCrasher card) {
public TenementCrasher copy() {return new TenementCrasher(this);
public class TerrusWurm extends CardImpl {
public TerrusWurm(UUID ownerId) {
public TerrusWurm(final TerrusWurm card) {
public TerrusWurm copy() {return new TerrusWurm(this);
public class Thoughtflare extends CardImpl {
public Thoughtflare(UUID ownerId) {
public Thoughtflare(final Thoughtflare card) {
public Thoughtflare copy() {return new Thoughtflare(this);
public class ThrillKillAssassin extends CardImpl {
public ThrillKillAssassin(UUID ownerId) {
public ThrillKillAssassin(final ThrillKillAssassin card) {
public ThrillKillAssassin copy() {return new ThrillKillAssassin(this);
public class TowerDrake extends CardImpl {
public TowerDrake(UUID ownerId) {
public TowerDrake(final TowerDrake card) {
public TowerDrake copy() {return new TowerDrake(this);
public class ToweringIndrik extends CardImpl {
public ToweringIndrik(UUID ownerId) {
public ToweringIndrik(final ToweringIndrik card) {
public ToweringIndrik copy() {return new ToweringIndrik(this);
public class TrainedCaracal extends CardImpl {
public TrainedCaracal(UUID ownerId) {
public TrainedCaracal(final TrainedCaracal card) {
public TrainedCaracal copy() {return new TrainedCaracal(this);
public class TransguildPromenade extends CardImpl {
public TransguildPromenade(UUID ownerId) {
public TransguildPromenade(final TransguildPromenade card) {
public TransguildPromenade copy() {return new TransguildPromenade(this);
public class TreasuredFind extends CardImpl {
public TreasuredFind(UUID ownerId) {
public TreasuredFind(final TreasuredFind card) {
public TreasuredFind copy() {return new TreasuredFind(this);
public class TrostanisJudgment extends CardImpl {
public TrostanisJudgment(UUID ownerId) {
public TrostanisJudgment(final TrostanisJudgment card) {
public TrostanisJudgment copy() {return new TrostanisJudgment(this);
public class UltimatePrice extends CardImpl {
public UltimatePrice(UUID ownerId) {
public UltimatePrice(final UltimatePrice card) {
public UltimatePrice copy() {return new UltimatePrice(this);
public class UnderworldConnections extends CardImpl {
public UnderworldConnections (UUID ownerId) {
public UnderworldConnections (final UnderworldConnections card) {
public UnderworldConnections copy() {return new UnderworldConnections(this);
public class UrbanBurgeoning extends CardImpl {
public UrbanBurgeoning(UUID ownerId) {
public UrbanBurgeoning(final UrbanBurgeoning card) {
public UrbanBurgeoning copy() {return new UrbanBurgeoning(this);
class UrbanBurgeoningUntapEffect extends ContinuousEffectImpl {
public UrbanBurgeoningUntapEffect() {
public UrbanBurgeoningUntapEffect(final UrbanBurgeoningUntapEffect effect) {
public UrbanBurgeoningUntapEffect copy() {return new UrbanBurgeoningUntapEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class UtvaraHellkite extends CardImpl {
public UtvaraHellkite(UUID ownerId) {
public UtvaraHellkite(final UtvaraHellkite card) {
public UtvaraHellkite copy() {return new UtvaraHellkite(this);
public class UtvaraHellkiteDragonToken extends Token {
private UtvaraHellkiteDragonToken() {
public class Vandalblast extends CardImpl {
public Vandalblast(UUID ownerId) {
public Vandalblast(final Vandalblast card) {
public Vandalblast copy() {return new Vandalblast(this);
public class VassalSoul extends CardImpl {
public VassalSoul(UUID ownerId) {
public VassalSoul(final VassalSoul card) {
public VassalSoul copy() {return new VassalSoul(this);
public class ViashinoRacketeer extends CardImpl {
public ViashinoRacketeer(UUID ownerId) {
public ViashinoRacketeer(final ViashinoRacketeer card) {
public ViashinoRacketeer copy() {return new ViashinoRacketeer(this);
public class VituGhaziGuildmage extends CardImpl {
public VituGhaziGuildmage(UUID ownerId) {
public VituGhaziGuildmage(final VituGhaziGuildmage card) {
public VituGhaziGuildmage copy() {return new VituGhaziGuildmage(this);
public class Voidwielder extends CardImpl {
public Voidwielder(UUID ownerId) {
public Voidwielder(final Voidwielder card) {
public Voidwielder copy() {return new Voidwielder(this);
public class VolatileRig extends CardImpl {
public VolatileRig(UUID ownerId) {
public VolatileRig(final VolatileRig card) {
public VolatileRig copy() {return new VolatileRig(this);
class VolatileRigTriggeredAbility extends TriggeredAbilityImpl {
public VolatileRigTriggeredAbility() {
public VolatileRigTriggeredAbility(final VolatileRigTriggeredAbility effect) {
public VolatileRigTriggeredAbility copy() {return new VolatileRigTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COMBAT_DAMAGE_STEP_POST
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;return false;
public String getRule() {return "Whenever {this} is dealt damage, " + super.getRule();
class VolatileRigEffect extends OneShotEffect {
VolatileRigEffect() {
VolatileRigEffect(final VolatileRigEffect effect) {
public boolean apply(Game game, Ability source) {return permanent.sacrifice(source.getSourceId(), game);return false;
public VolatileRigEffect copy() {return new VolatileRigEffect(this);
class VolatileRigEffect2 extends OneShotEffect {
VolatileRigEffect2() {
VolatileRigEffect2(final VolatileRigEffect2 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public VolatileRigEffect2 copy() {return new VolatileRigEffect2(this);
public class VraskaTheUnseen extends CardImpl {
public VraskaTheUnseen(UUID ownerId) {
public VraskaTheUnseen(final VraskaTheUnseen card) {
public VraskaTheUnseen copy() {return new VraskaTheUnseen(this);
class VraskaTheUnseenGainAbilityEffect extends ContinuousEffectImpl {
public VraskaTheUnseenGainAbilityEffect(Ability ability) {
public VraskaTheUnseenGainAbilityEffect(final VraskaTheUnseenGainAbilityEffect effect) {
public void init(Ability source, Game game) {
public class WayfaringTemple extends CardImpl {
public WayfaringTemple(UUID ownerId) {
public WayfaringTemple(final WayfaringTemple card) {
public WayfaringTemple copy() {return new WayfaringTemple(this);
public class WildBeastmaster extends CardImpl {
public WildBeastmaster(UUID ownerId) {
public WildBeastmaster(final WildBeastmaster card) {
public WildBeastmaster copy() {return new WildBeastmaster(this);
public class WorldspineWurm extends CardImpl {
public WorldspineWurm(UUID ownerId) {
public WorldspineWurm(final WorldspineWurm card) {
public WorldspineWurm copy() {return new WorldspineWurm(this);
public class ZanikevLocust extends CardImpl {
public ZanikevLocust(UUID ownerId) {
public ZanikevLocust(final ZanikevLocust card) {
public ZanikevLocust copy() {return new ZanikevLocust(this);
public class BlackWard extends CardImpl {
public BlackWard(UUID ownerId) {
public BlackWard(final BlackWard card) {
public BlackWard copy() {return new BlackWard(this);
public class Channel extends CardImpl {
public Channel(UUID ownerId) {
public Channel(final Channel card) {
public Channel copy() {return new Channel(this);
class ChannelEffect extends OneShotEffect {
ChannelEffect() {
ChannelEffect(final ChannelEffect effect) {
public ChannelEffect copy() {return new ChannelEffect(this);
public boolean apply(Game game, Ability source) {return true;
class ChannelSpecialAction extends SpecialAction {
ChannelSpecialAction() {
ChannelSpecialAction(final ChannelSpecialAction ability) {
public ChannelSpecialAction copy() {return new ChannelSpecialAction(this);
class ChannelDelayedTriggeredAbility extends DelayedTriggeredAbility {
ChannelDelayedTriggeredAbility(UUID specialActionId) {
ChannelDelayedTriggeredAbility(ChannelDelayedTriggeredAbility ability) {
public ChannelDelayedTriggeredAbility copy() {return new ChannelDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.CLEANUP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public class DwarvenWeaponsmith extends CardImpl {
public DwarvenWeaponsmith(UUID ownerId) {
public DwarvenWeaponsmith(final DwarvenWeaponsmith card) {
public DwarvenWeaponsmith copy() {return new DwarvenWeaponsmith(this);
public class GraniteGargoyle extends CardImpl {
public GraniteGargoyle(UUID ownerId) {
public GraniteGargoyle(final GraniteGargoyle card) {
public GraniteGargoyle copy() {return new GraniteGargoyle(this);
public class RedWard extends CardImpl {
public RedWard(UUID ownerId) {
public RedWard(final RedWard card) {
public RedWard copy() {return new RedWard(this);
public class SolRing extends CardImpl {
public SolRing(UUID ownerId) {
public SolRing(final SolRing card) {
public SolRing copy() {return new SolRing(this);
class SolRingAbility extends BasicManaAbility {
public SolRingAbility() {
public SolRingAbility(final SolRingAbility ability) {
public SolRingAbility copy() {return new SolRingAbility(this);
public class SorceressQueen extends CardImpl {
public SorceressQueen(UUID ownerId) {
public SorceressQueen(final SorceressQueen card) {
public SorceressQueen copy() {return new SorceressQueen(this);
public class Tunnel extends CardImpl {
public Tunnel(UUID ownerId) {
public Tunnel(final Tunnel card) {
public Tunnel copy() {return new Tunnel(this);
public class AffaGuardHound extends CardImpl {
public AffaGuardHound (UUID ownerId) {
public AffaGuardHound (final AffaGuardHound card) {
public AffaGuardHound copy() {return new AffaGuardHound(this);
public class AkoumBoulderfoot extends CardImpl {
public AkoumBoulderfoot(UUID ownerId) {
public AkoumBoulderfoot(final AkoumBoulderfoot card) {
public AkoumBoulderfoot copy() {return new AkoumBoulderfoot(this);
public class AllIsDust extends CardImpl {
public AllIsDust(UUID ownerId) {
public AllIsDust(final AllIsDust card) {
public AllIsDust copy() {return new AllIsDust(this);
class AllIsDustEffect extends OneShotEffect {
AllIsDustEffect() {
AllIsDustEffect(final AllIsDustEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public AllIsDustEffect copy() {return new AllIsDustEffect(this);
public class AncientStirrings extends CardImpl {
public AncientStirrings(UUID ownerId) {
public AncientStirrings(final AncientStirrings card) {
public AncientStirrings copy() {return new AncientStirrings(this);
public class AngelheartVial extends CardImpl {
public AngelheartVial(UUID ownerId) {
public AngelheartVial(final AngelheartVial card) {
public AngelheartVial copy() {return new AngelheartVial(this);
class AngelheartVialTriggeredAbility extends TriggeredAbilityImpl {
public AngelheartVialTriggeredAbility() {
public AngelheartVialTriggeredAbility(final AngelheartVialTriggeredAbility ability) {
public AngelheartVialTriggeredAbility copy() {return new AngelheartVialTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you are dealt damage, you may put that many charge counters on {this}.";
class AngelheartVialEffect extends OneShotEffect {
public AngelheartVialEffect() {
public AngelheartVialEffect(final AngelheartVialEffect effect) {
public AngelheartVialEffect copy() {return new AngelheartVialEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ArrogantBloodlord extends CardImpl {
public ArrogantBloodlord(UUID ownerId) {
public ArrogantBloodlord(final ArrogantBloodlord card) {
public ArrogantBloodlord copy() {return new ArrogantBloodlord(this);
class ArrogantBloodlordTriggeredAbility extends TriggeredAbilityImpl {
ArrogantBloodlordTriggeredAbility() {
ArrogantBloodlordTriggeredAbility(final ArrogantBloodlordTriggeredAbility ability) {
public ArrogantBloodlordTriggeredAbility copy() {return new ArrogantBloodlordTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.BLOCKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {
&& blocked == arrogantBloodlord) {return true;return true;return false;
public String getRule() {return "Whenever {this} blocks or becomes blocked by a creature with power 1 or less, destroy {this} at end of combat.";
class ArrogantBloodlordEffect extends OneShotEffect {
ArrogantBloodlordEffect() {
ArrogantBloodlordEffect(final ArrogantBloodlordEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ArrogantBloodlordEffect copy() {return new ArrogantBloodlordEffect(this);
public class ArtisanOfKozilek extends CardImpl {
public ArtisanOfKozilek (UUID ownerId) {
public ArtisanOfKozilek (final ArtisanOfKozilek card) {
public ArtisanOfKozilek copy() {return new ArtisanOfKozilek(this);
public class AuraFinesse extends CardImpl {
public AuraFinesse(UUID ownerId) {
public AuraFinesse(final AuraFinesse card) {
public AuraFinesse copy() {return new AuraFinesse(this);
class AuraFinesseEffect extends OneShotEffect {
public AuraFinesseEffect() {
public AuraFinesseEffect(final AuraFinesseEffect effect) {
public AuraFinesseEffect copy() {return new AuraFinesseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AuraGnarlid extends CardImpl {
public AuraGnarlid(UUID ownerId) {
public AuraGnarlid(final AuraGnarlid card) {
public AuraGnarlid copy() {return new AuraGnarlid(this);
public class AwakeningZone extends CardImpl {
public AwakeningZone(UUID ownerId) {
public AwakeningZone(final AwakeningZone card) {
public AwakeningZone copy() {return new AwakeningZone(this);
public class BalaGedScorpion extends CardImpl {
public BalaGedScorpion(UUID ownerId) {
public BalaGedScorpion(final BalaGedScorpion card) {
public BalaGedScorpion copy() {return new BalaGedScorpion(this);
public class BanefulOmen extends CardImpl {
public BanefulOmen(UUID ownerId) {
public BanefulOmen(final BanefulOmen card) {
public BanefulOmen copy() {return new BanefulOmen(this);
class BanefulOmenTriggeredAbility extends TriggeredAbilityImpl {
public BanefulOmenTriggeredAbility() {
public BanefulOmenTriggeredAbility(BanefulOmenTriggeredAbility ability) {
public BanefulOmenTriggeredAbility copy() {return new BanefulOmenTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public String getRule() {return "At the beginning of your end step, you may reveal the top card of your library. If you do, each opponent loses life equal to that card's converted mana cost.";
class BanefulOmenEffect extends OneShotEffect {
public BanefulOmenEffect() {
public BanefulOmenEffect(final BanefulOmenEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;
public BanefulOmenEffect copy() {return new BanefulOmenEffect(this);
public class BearUmbra extends CardImpl {
public BearUmbra(UUID ownerId) {
public BearUmbra(final BearUmbra card) {
public BearUmbra copy() {return new BearUmbra(this);
public class BloodriteInvoker extends CardImpl {
public BloodriteInvoker (UUID ownerId) {
public BloodriteInvoker (final BloodriteInvoker card) {
public BloodriteInvoker copy() {return new BloodriteInvoker(this);
public class BloodthroneVampire extends CardImpl {
public BloodthroneVampire(UUID ownerId) {
public BloodthroneVampire(final BloodthroneVampire card) {
public BloodthroneVampire copy() {return new BloodthroneVampire(this);
public class BoarUmbra extends CardImpl {
public BoarUmbra(UUID ownerId) {
public BoarUmbra(final BoarUmbra card) {
public BoarUmbra copy() {return new BoarUmbra(this);
public class Bramblesnap extends CardImpl {
public Bramblesnap(UUID ownerId) {
public Bramblesnap(final Bramblesnap card) {
public Bramblesnap copy() {return new Bramblesnap(this);
public class BroodBirthing extends CardImpl {
public BroodBirthing(UUID ownerId) {
public BroodBirthing(final BroodBirthing card) {
public BroodBirthing copy() {return new BroodBirthing(this);
class BroodBirthingEffect extends OneShotEffect {
public BroodBirthingEffect() {
public BroodBirthingEffect(final BroodBirthingEffect effect) {
public BroodBirthingEffect copy() {return new BroodBirthingEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Broodwarden extends CardImpl {
public Broodwarden(UUID ownerId) {
public Broodwarden(final Broodwarden card) {
public Broodwarden copy() {return new Broodwarden(this);
public class CadaverImp extends CardImpl {
public CadaverImp(UUID ownerId) {
public CadaverImp(final CadaverImp card) {
public CadaverImp copy() {return new CadaverImp(this);
public class CastThroughTime extends CardImpl {
public CastThroughTime(UUID ownerId) {
public CastThroughTime(final CastThroughTime card) {
public CastThroughTime copy() {return new CastThroughTime(this);
class GainReboundEffect extends ContinuousEffectImpl {
public GainReboundEffect() {
public GainReboundEffect(final GainReboundEffect effect) {
public GainReboundEffect copy() {return new GainReboundEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private void addReboundAbility(Card card, Ability source, Game game) {
public class ChampionsDrake extends CardImpl {
public ChampionsDrake(UUID ownerId) {
public ChampionsDrake(final ChampionsDrake card) {
public ChampionsDrake copy() {return new ChampionsDrake(this);
public class ConqueringManticore extends CardImpl {
public ConqueringManticore(UUID ownerId) {
public ConqueringManticore(final ConqueringManticore card) {
public ConqueringManticore copy() {return new ConqueringManticore(this);
public class ConsumeTheMeek extends CardImpl {
public ConsumeTheMeek(UUID ownerId) {
public ConsumeTheMeek(final ConsumeTheMeek card) {
public ConsumeTheMeek copy() {return new ConsumeTheMeek(this);
public class ConsumingVapors extends CardImpl {
public ConsumingVapors(UUID ownerId) {
public ConsumingVapors(final ConsumingVapors card) {
public ConsumingVapors copy() {return new ConsumingVapors(this);
class ConsumingVaporsEffect extends OneShotEffect {
ConsumingVaporsEffect ( ) {
ConsumingVaporsEffect ( ConsumingVaporsEffect effect ) {
public boolean apply(Game game, Ability source) {return permanent.sacrifice(source.getSourceId(), game);return true;return false;
public ConsumingVaporsEffect copy() {return new ConsumingVaporsEffect(this);
public class ContaminatedGround extends CardImpl {
public ContaminatedGround(UUID ownerId) {
public ContaminatedGround(final ContaminatedGround card) {
public ContaminatedGround copy() {return new ContaminatedGround(this);
public class Corpsehatch extends CardImpl {
public Corpsehatch(UUID ownerId) {
public Corpsehatch(final Corpsehatch card) {
public Corpsehatch copy() {return new Corpsehatch(this);
public class CrabUmbra extends CardImpl {
public CrabUmbra(UUID ownerId) {
public CrabUmbra(final CrabUmbra card) {
public CrabUmbra copy() {return new CrabUmbra(this);
public class CurseOfWizardry extends CardImpl {
public CurseOfWizardry(UUID ownerId) {
public CurseOfWizardry(final CurseOfWizardry card) {
public CurseOfWizardry copy() {return new CurseOfWizardry(this);
class CurseOfWizardryPlayerCastsSpellChosenColorTriggeredAbility extends TriggeredAbilityImpl {
public CurseOfWizardryPlayerCastsSpellChosenColorTriggeredAbility() {
public CurseOfWizardryPlayerCastsSpellChosenColorTriggeredAbility(final CurseOfWizardryPlayerCastsSpellChosenColorTriggeredAbility ability) {
public CurseOfWizardryPlayerCastsSpellChosenColorTriggeredAbility copy() {return new CurseOfWizardryPlayerCastsSpellChosenColorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a spell of the chosen color, that player loses 1 life.";
public class DaggerbackBasilisk extends CardImpl {
public DaggerbackBasilisk(UUID ownerId) {
public DaggerbackBasilisk(final DaggerbackBasilisk card) {
public DaggerbackBasilisk copy() {return new DaggerbackBasilisk(this);
public class DeathlessAngel extends CardImpl {
public DeathlessAngel (UUID ownerId) {
public DeathlessAngel (final DeathlessAngel card) {
public DeathlessAngel copy() {return new DeathlessAngel(this);
public class DemonicAppetite extends CardImpl {
public DemonicAppetite(UUID ownerId) {
public DemonicAppetite(final DemonicAppetite card) {
public DemonicAppetite copy() {return new DemonicAppetite(this);
DemonicAppetiteEffect() {
public DemonicAppetiteEffect copy() {return new DemonicAppetiteEffect();
public class Deprive extends CardImpl {
public Deprive(UUID ownerId) {
public Deprive(final Deprive card) {
public Deprive copy() {return new Deprive(this);
public class DevastatingSummons extends CardImpl {
public DevastatingSummons(UUID ownerId) {
public DevastatingSummons(final DevastatingSummons card) {
public DevastatingSummons copy() {return new DevastatingSummons(this);
class DevastatingSummonsEffect extends OneShotEffect {
public DevastatingSummonsEffect() {
public DevastatingSummonsEffect(final DevastatingSummonsEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public DevastatingSummonsEffect copy() {return new DevastatingSummonsEffect(this);
class ElementalToken extends Token {
public ElementalToken() {
public class DisasterRadius extends CardImpl {
public DisasterRadius(UUID ownerId) {
public DisasterRadius(final DisasterRadius card) {
public DisasterRadius copy() {return new DisasterRadius(this);
class DisasterRadiusEffect extends OneShotEffect {
public DisasterRadiusEffect() {
public DisasterRadiusEffect(DisasterRadiusEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DisasterRadiusEffect copy() {return new DisasterRadiusEffect(this);
public class DistortionStrike extends CardImpl {
public DistortionStrike(UUID ownerId) {
public DistortionStrike(final DistortionStrike card) {
public DistortionStrike copy() {return new DistortionStrike(this);
public class Domestication extends CardImpl {
public Domestication(UUID ownerId) {
public Domestication(final Domestication card) {
public Domestication copy() {return new Domestication(this);
class DomesticationCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class DormantGomazoa extends CardImpl {
public DormantGomazoa(UUID ownerId) {
public DormantGomazoa(final DormantGomazoa card) {
public DormantGomazoa copy() {return new DormantGomazoa(this);
public class DrakeUmbra extends CardImpl {
public DrakeUmbra(UUID ownerId) {
public DrakeUmbra(final DrakeUmbra card) {
public DrakeUmbra copy() {return new DrakeUmbra(this);
public class DranaKalastriaBloodchief extends CardImpl {
public DranaKalastriaBloodchief(UUID ownerId) {
public DranaKalastriaBloodchief(final DranaKalastriaBloodchief card) {
public DranaKalastriaBloodchief copy() {return new DranaKalastriaBloodchief(this);
public class DreadDrone extends CardImpl {
public DreadDrone (UUID ownerId) {
public DreadDrone (final DreadDrone card) {
public DreadDrone copy() {return new DreadDrone(this);
public class DreamstoneHedron extends CardImpl {
public DreamstoneHedron(UUID ownerId) {
public DreamstoneHedron(final DreamstoneHedron card) {
public DreamstoneHedron copy() {return new DreamstoneHedron(this);
class DreamstoneHedronFirstManaAbility extends BasicManaAbility {
public DreamstoneHedronFirstManaAbility() {
public DreamstoneHedronFirstManaAbility(final DreamstoneHedronFirstManaAbility ability) {
public DreamstoneHedronFirstManaAbility copy() {return new DreamstoneHedronFirstManaAbility(this);
public class EelUmbra extends CardImpl {
public EelUmbra(UUID ownerId) {
public EelUmbra(final EelUmbra card) {
public EelUmbra copy() {return new EelUmbra(this);
public class ElandUmbra extends CardImpl {
public ElandUmbra(UUID ownerId) {
public ElandUmbra(final ElandUmbra card) {
public ElandUmbra copy() {return new ElandUmbra(this);
public class EldraziConscription extends CardImpl {
public EldraziConscription (UUID ownerId) {
public EldraziConscription (final EldraziConscription card) {
public EldraziConscription copy() {return new EldraziConscription(this);
public class EldraziTemple extends CardImpl {
public EldraziTemple(UUID ownerId) {
public EldraziTemple(final EldraziTemple card) {
public EldraziTemple copy() {return new EldraziTemple(this);
class EldraziTempleManaBuilder extends ConditionalManaBuilder {return new EldraziTempleConditionalMana(this.mana);
public String getRule() {return "Spend this mana only to cast colorless Eldrazi spells or activate abilities of colorless Eldrazi";
class EldraziTempleConditionalMana extends ConditionalMana {
public EldraziTempleConditionalMana(Mana mana) {
class EldraziTempleCondition implements Condition {
public boolean apply(Game game, Ability source) {return object != null && object.hasSubtype("Eldrazi") && object.getColor(game).isColorless();
public class EmergeUnscathed extends CardImpl {
public EmergeUnscathed(UUID ownerId) {
public EmergeUnscathed(final EmergeUnscathed card) {
public EmergeUnscathed copy() {return new EmergeUnscathed(this);
public class EmrakulsHatcher extends CardImpl {
public EmrakulsHatcher(UUID ownerId) {
public EmrakulsHatcher(final EmrakulsHatcher card) {
public EmrakulsHatcher copy() {return new EmrakulsHatcher(this);
public class EscapedNull extends CardImpl {
public EscapedNull(UUID ownerId) {
public EscapedNull(final EscapedNull card) {
public EscapedNull copy() {return new EscapedNull(this);
public class EssenceFeed extends CardImpl {
public EssenceFeed (UUID ownerId) {
public EssenceFeed (final EssenceFeed card) {
public EssenceFeed copy() {return new EssenceFeed(this);
public class EvolvingWilds extends CardImpl {
public EvolvingWilds(UUID ownerId) {
public EvolvingWilds(final EvolvingWilds card) {
public EvolvingWilds copy() {return new EvolvingWilds(this);
class EvolvingWildsAbility extends ActivatedAbilityImpl {
public EvolvingWildsAbility() {
public EvolvingWildsAbility(final EvolvingWildsAbility ability) {
public EvolvingWildsAbility copy() {return new EvolvingWildsAbility(this);
public class ExplosiveRevelation extends CardImpl {
public ExplosiveRevelation(UUID ownerId) {
public ExplosiveRevelation(final ExplosiveRevelation card) {
public ExplosiveRevelation copy() {return new ExplosiveRevelation(this);
class ExplosiveRevelationEffect extends OneShotEffect {
public ExplosiveRevelationEffect() {
public ExplosiveRevelationEffect(final ExplosiveRevelationEffect effect) {
public ExplosiveRevelationEffect copy() {return new ExplosiveRevelationEffect(this);
public boolean apply(Game game, Ability source) {return player.putCardsOnBottomOfLibrary(cards, game, source, true);return false;
public class FissureVent extends CardImpl {
public FissureVent(UUID ownerId) {
public FissureVent(final FissureVent card) {
public FissureVent copy() {return new FissureVent(this);
public class FlameSlash extends CardImpl {
public FlameSlash(UUID ownerId) {
public FlameSlash(final FlameSlash card) {
public FlameSlash copy() {return new FlameSlash(this);
public class FleetingDistraction extends CardImpl {
public FleetingDistraction (UUID ownerId) {
public FleetingDistraction (final FleetingDistraction card) {
public FleetingDistraction copy() {return new FleetingDistraction(this);
public class ForkedBolt extends CardImpl {
public ForkedBolt(UUID ownerId) {
public ForkedBolt(final ForkedBolt card) {
public ForkedBolt copy() {return new ForkedBolt(this);
public class FrostwindInvoker extends CardImpl {
public FrostwindInvoker(UUID ownerId) {
public FrostwindInvoker(final FrostwindInvoker card) {
public FrostwindInvoker copy() {return new FrostwindInvoker(this);
public class GelatinousGenesis extends CardImpl {
public GelatinousGenesis(UUID ownerId) {
public GelatinousGenesis(final GelatinousGenesis card) {
public GelatinousGenesis copy() {return new GelatinousGenesis(this);
class GelatinousGenesisEffect extends OneShotEffect {
public GelatinousGenesisEffect() {
public GelatinousGenesisEffect(GelatinousGenesisEffect ability) {
public boolean apply(Game game, Ability source) {return true;
public GelatinousGenesisEffect copy() {return new GelatinousGenesisEffect(this);
class OozeToken extends Token {
public OozeToken() {
public class GideonJura extends CardImpl {
public GideonJura(UUID ownerId) {
public GideonJura(final GideonJura card) {
public GideonJura copy() {return new GideonJura(this);
class GideonJuraToken extends Token {
public GideonJuraToken() {
class GideonJuraEffect extends RequirementEffect {
public GideonJuraEffect() {
public GideonJuraEffect(final GideonJuraEffect effect) {
public GideonJuraEffect copy() {return new GideonJuraEffect(this);
public void init(Ability source, Game game) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getControllerId().equals(source.getFirstTarget());
public boolean isInactive(Ability source, Game game) {return (startingTurn != game.getTurnNum()
public class Gigantomancer extends CardImpl {
public Gigantomancer (UUID ownerId) {
public Gigantomancer (final Gigantomancer card) {
public Gigantomancer copy() {return new Gigantomancer(this);
public class Gloomhunter extends CardImpl {
public Gloomhunter (UUID ownerId) {
public Gloomhunter (final Gloomhunter card) {
public Gloomhunter copy() {return new Gloomhunter(this);
public class GlorySeeker extends CardImpl {
public GlorySeeker (UUID ownerId) {
public GlorySeeker (final GlorySeeker card) {
public GlorySeeker copy() {return new GlorySeeker(this);
public class GoblinArsonist extends CardImpl {
public GoblinArsonist(UUID ownerId) {
public GoblinArsonist(final GoblinArsonist card) {
public GoblinArsonist copy() {return new GoblinArsonist(this);
public class GoblinTunneler extends CardImpl {
public GoblinTunneler(UUID ownerId) {
public GoblinTunneler(final GoblinTunneler card) {
public GoblinTunneler copy() {return new GoblinTunneler(this);return new GravitationalShift(this);
public class GravityWell extends CardImpl {
public GravityWell(UUID ownerId) {
public GravityWell(final GravityWell card) {
public GravityWell copy() {return new GravityWell(this);
class GravityWellTriggeredAbility extends TriggeredAbilityImpl {
public GravityWellTriggeredAbility() {
public GravityWellTriggeredAbility(final GravityWellTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature with flying attacks, " + super.getRule();
public GravityWellTriggeredAbility copy() {return new GravityWellTriggeredAbility(this);
class GravityWellEffect extends ContinuousEffectImpl {
public GravityWellEffect() {
public GravityWellEffect(final GravityWellEffect effect) {
public GravityWellEffect copy() {return new GravityWellEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6;
public class GuardDuty extends CardImpl {
public GuardDuty (UUID ownerId) {
public GuardDuty (final GuardDuty card) {
public GuardDuty copy() {return new GuardDuty(this);
public class GuardGomazoa extends CardImpl {
public GuardGomazoa(UUID ownerId) {
public GuardGomazoa(final GuardGomazoa card) {
public GuardGomazoa copy() {return new GuardGomazoa(this);
public class HandOfEmrakul extends CardImpl {
public HandOfEmrakul(UUID ownerId) {
public HandOfEmrakul(final HandOfEmrakul card) {
public HandOfEmrakul copy() {return new HandOfEmrakul(this);
public class HarmlessAssault extends CardImpl {
public HarmlessAssault(UUID ownerId) {
public HarmlessAssault(final HarmlessAssault card) {
public HarmlessAssault copy() {return new HarmlessAssault(this);
public class HazeFrog extends CardImpl {
public HazeFrog(UUID ownerId) {
public HazeFrog(final HazeFrog card) {
public HazeFrog copy() {return new HazeFrog(this);
class HazeFrogEffect extends PreventionEffectImpl {
public HazeFrogEffect() {
public HazeFrogEffect(final HazeFrogEffect effect) {
public HazeFrogEffect copy() {return new HazeFrogEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class HeatRay extends CardImpl {
public HeatRay(UUID ownerId) {
public HeatRay(final HeatRay card) {
public HeatRay copy() {return new HeatRay(this);
public class HedronMatrix extends CardImpl {
public HedronMatrix (UUID ownerId) {
public HedronMatrix (final HedronMatrix card) {
public HedronMatrix copy() {return new HedronMatrix(this);
class HedronMatrixEffect extends ContinuousEffectImpl {
public HedronMatrixEffect() {
public HedronMatrixEffect(final HedronMatrixEffect effect) {
public HedronMatrixEffect copy() {return new HedronMatrixEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class HellcarverDemon extends CardImpl {
public HellcarverDemon(UUID ownerId) {
public HellcarverDemon(final HellcarverDemon card) {
public HellcarverDemon copy() {return new HellcarverDemon(this);
class HellcarverDemonEffect extends OneShotEffect {
public HellcarverDemonEffect() {
public HellcarverDemonEffect(final HellcarverDemonEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public HellcarverDemonEffect copy() {return new HellcarverDemonEffect(this);
public class HellionEruption extends CardImpl {
public HellionEruption(UUID ownerId) {
public HellionEruption(final HellionEruption card) {
public HellionEruption copy() {return new HellionEruption(this);
class HellionEruptionEffect extends OneShotEffect {
public HellionEruptionEffect() {
public HellionEruptionEffect(final HellionEruptionEffect effect) {
public HellionEruptionEffect copy() {return new HellionEruptionEffect(this);
public boolean apply(Game game, Ability source) {return true;
class HellionToken extends Token {
HellionToken() {
public class HyenaUmbra extends CardImpl {
public HyenaUmbra(UUID ownerId) {
public HyenaUmbra(final HyenaUmbra card) {
public HyenaUmbra copy() {return new HyenaUmbra(this);
public class InduceDespair extends CardImpl {
public InduceDespair(UUID ownerId) {
public InduceDespair(final InduceDespair card) {
public InduceDespair copy() {return new InduceDespair(this);
class InduceDespairEffect extends OneShotEffect {
public InduceDespairEffect() {
public InduceDespairEffect(InduceDespairEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public InduceDespairEffect copy() {return new InduceDespairEffect(this);
public class InquisitionOfKozilek extends CardImpl {
public InquisitionOfKozilek(UUID ownerId){
public InquisitionOfKozilek(final InquisitionOfKozilek card) {
public InquisitionOfKozilek copy() {return new InquisitionOfKozilek(this);
public class IrresistiblePrey extends CardImpl {
public IrresistiblePrey(UUID ownerId) {
public IrresistiblePrey(final IrresistiblePrey card) {
public IrresistiblePrey copy() {return new IrresistiblePrey(this);
public class ItThatBetrays extends CardImpl {
public ItThatBetrays(UUID ownerId) {
public ItThatBetrays(final ItThatBetrays card) {
public ItThatBetrays copy() {return new ItThatBetrays(this);return new JaddiLifestrider(this);
public boolean apply(Game game, Ability source) {return true;return false;return new JaddiLifestriderEffect(this);
public class JwariScuttler extends CardImpl {
public JwariScuttler (UUID ownerId) {
public JwariScuttler (final JwariScuttler card) {
public JwariScuttler copy() {return new JwariScuttler(this);
public class KeeningStone extends CardImpl {
public KeeningStone(UUID ownerId) {
public KeeningStone(final KeeningStone card) {
public KeeningStone copy() {return new KeeningStone(this);
class KeeningStoneEffect extends OneShotEffect {
public KeeningStoneEffect() {
public KeeningStoneEffect(final KeeningStoneEffect effect) {
public KeeningStoneEffect copy() {return new KeeningStoneEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class KhalniHydra extends CardImpl {
public KhalniHydra(UUID ownerId) {
public KhalniHydra(final KhalniHydra card) {
public void adjustCosts(Ability ability, Game game) {
public class KorSpiritdancer extends CardImpl {
public KorSpiritdancer(UUID ownerId) {
public KorSpiritdancer(final KorSpiritdancer card) {
public KorSpiritdancer copy() {return new KorSpiritdancer(this);
public class KozilekButcherOfTruth extends CardImpl {
public KozilekButcherOfTruth(UUID ownerId) {
public KozilekButcherOfTruth(final KozilekButcherOfTruth card) {
public KozilekButcherOfTruth copy() {return new KozilekButcherOfTruth(this);
public class KozileksPredator extends CardImpl {
public KozileksPredator(UUID ownerId) {
public KozileksPredator(final KozileksPredator card) {
public KozileksPredator copy() {return new KozileksPredator(this);
public class LagacLizard extends CardImpl {
public LagacLizard (UUID ownerId) {
public LagacLizard (final LagacLizard card) {
public LagacLizard copy() {return new LagacLizard(this);
public class LastKiss extends CardImpl {
public LastKiss (UUID ownerId) {
public LastKiss (final LastKiss card) {
public LastKiss copy() {return new LastKiss(this);
public class LavafumeInvoker extends CardImpl {
public LavafumeInvoker(UUID ownerId) {
public LavafumeInvoker(final LavafumeInvoker card) {
public LavafumeInvoker copy() {return new LavafumeInvoker(this);
public class LayBare extends CardImpl {
public LayBare(UUID ownerId) {
public LayBare(final LayBare card) {
public LayBare copy() {return new LayBare(this);
class LayBareEffect extends OneShotEffect {
public LayBareEffect() {
public LayBareEffect(final LayBareEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public LayBareEffect copy() {return new LayBareEffect(this);
public class LeafArrow extends CardImpl {
public LeafArrow(UUID ownerId) {
public LeafArrow(final LeafArrow card) {
public LeafArrow copy() {return new LeafArrow(this);
public class LightmineField extends CardImpl {
public LightmineField(UUID ownerId) {
public LightmineField(final LightmineField card) {
public LightmineField copy() {return new LightmineField(this);
class LightmineFieldTriggeredAbility extends TriggeredAbilityImpl {
public LightmineFieldTriggeredAbility() {
public LightmineFieldTriggeredAbility(final LightmineFieldTriggeredAbility ability) {
public LightmineFieldTriggeredAbility copy() {return new LightmineFieldTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return !game.getCombat().getAttackers().isEmpty();
public String getRule() {return "Whenever one or more creatures attack, " + super.getRule();
class LightmineFieldEffect extends OneShotEffect {
public LightmineFieldEffect() {
public LightmineFieldEffect(final LightmineFieldEffect effect) {
public LightmineFieldEffect copy() {return new LightmineFieldEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LinvalaKeeperOfSilence extends CardImpl {
public LinvalaKeeperOfSilence(UUID ownerId) {
public LinvalaKeeperOfSilence(final LinvalaKeeperOfSilence card) {
public LinvalaKeeperOfSilence copy() {return new LinvalaKeeperOfSilence(this);
class LinvalaKeeperOfSilenceCantActivateEffect extends RestrictionEffect {
public LinvalaKeeperOfSilenceCantActivateEffect() {
public LinvalaKeeperOfSilenceCantActivateEffect(final LinvalaKeeperOfSilenceCantActivateEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getCardType().contains(CardType.CREATURE) && game.getOpponents(source.getControllerId()).contains(permanent.getControllerId());
public boolean canUseActivatedAbilities(Permanent permanent, Ability source, Game game) {return false;
public LinvalaKeeperOfSilenceCantActivateEffect copy() {return new LinvalaKeeperOfSilenceCantActivateEffect(this);
public class LivingDestiny extends CardImpl {
public LivingDestiny(UUID ownerId) {
public LivingDestiny(final LivingDestiny card) {
public LivingDestiny copy() {return new LivingDestiny(this);
class LivingDestinyEffect extends OneShotEffect {
public LivingDestinyEffect() {
public LivingDestinyEffect(LivingDestinyEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public LivingDestinyEffect copy() {return new LivingDestinyEffect(this);
public class LoneMissionary extends CardImpl {
public LoneMissionary(UUID ownerId) {
public LoneMissionary(final LoneMissionary card) {
public LoneMissionary copy() {return new LoneMissionary(this);
public class LuminousWake extends CardImpl {
public LuminousWake(UUID ownerId) {
public LuminousWake(final LuminousWake card) {
public LuminousWake copy() {return new LuminousWake(this);
public class LustForWar extends CardImpl {
public LustForWar(UUID ownerId) {
public LustForWar(final LustForWar card) {
public LustForWar copy() {return new LustForWar(this);
public class Magmaw extends CardImpl {
public Magmaw(UUID ownerId) {
public Magmaw(final Magmaw card) {
public Magmaw copy() {return new Magmaw(this);return new MakindiGriffin(this);
public class MammothUmbra extends CardImpl {
public MammothUmbra(UUID ownerId) {
public MammothUmbra(final MammothUmbra card) {
public MammothUmbra copy() {return new MammothUmbra(this);
public class MerfolkObserver extends CardImpl {
public MerfolkObserver(UUID ownerId) {
public MerfolkObserver(final MerfolkObserver card) {
public MerfolkObserver copy() {return new MerfolkObserver(this);
public class MnemonicWall extends CardImpl {
public MnemonicWall(UUID ownerId) {
public MnemonicWall(final MnemonicWall card) {
public MnemonicWall copy() {return new MnemonicWall(this);
public class MomentousFall extends CardImpl {
public MomentousFall(UUID ownerId) {
public MomentousFall(final MomentousFall card) {
public MomentousFall copy() {return new MomentousFall(this);
class MomentousFallEffect extends OneShotEffect {
public MomentousFallEffect() {
public MomentousFallEffect(final MomentousFallEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MomentousFallEffect copy() {return new MomentousFallEffect(this);
public class MorticianBeetle extends CardImpl {
public MorticianBeetle(UUID ownerId) {
public MorticianBeetle(final MorticianBeetle card) {
public MorticianBeetle copy() {return new MorticianBeetle(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SACRIFICED_PERMANENT;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player sacrifices a creature, " + super.getRule();return new PlayerSacrificesCreatureTriggeredAbility(this);
public class MulDayaChannelers extends CardImpl {
public MulDayaChannelers(UUID ownerId) {
public MulDayaChannelers(final MulDayaChannelers card) {
public MulDayaChannelers copy() {return new MulDayaChannelers(this);
class MulDayaChannelersActivateIfConditionManaAbility extends ManaAbility {
public MulDayaChannelersActivateIfConditionManaAbility(Zone zone, ManaEffect effect, Cost cost, Condition condition) {
public MulDayaChannelersActivateIfConditionManaAbility(MulDayaChannelersActivateIfConditionManaAbility ability) {
public boolean canActivate(UUID playerId, Game game) {return super.canActivate(playerId, game);return false;
public boolean activate(Game game, boolean noMana) {return super.activate(game, noMana);return false;
public String getRule() {return "As long as the top card of your library is a land card, {this} has \"{T}: Add two mana of any one color to your mana pool.";
public MulDayaChannelersActivateIfConditionManaAbility copy() {return new MulDayaChannelersActivateIfConditionManaAbility(this);
public class Narcolepsy extends CardImpl {
public Narcolepsy(UUID ownerId) {
public Narcolepsy(final Narcolepsy card) {
public Narcolepsy copy() {return new Narcolepsy(this);
class NarcolepsyTriggeredAbility extends BeginningOfUpkeepTriggeredAbility {
NarcolepsyTriggeredAbility() {
NarcolepsyTriggeredAbility(final NarcolepsyTriggeredAbility ability) {
public boolean checkInterveningIfClause(Game game) {return true;return false;
public NarcolepsyTriggeredAbility copy() {return new NarcolepsyTriggeredAbility(this);
public String getRule() {return "At the beginning of each upkeep, if enchanted creature is untapped, tap it.";
class NarcolepsyEffect extends OneShotEffect {
NarcolepsyEffect() {
NarcolepsyEffect(final NarcolepsyEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public NarcolepsyEffect copy() {return new NarcolepsyEffect(this);
public class NearDeathExperience extends CardImpl {
public NearDeathExperience(UUID ownerId) {
public NearDeathExperience(final NearDeathExperience card) {
public NearDeathExperience copy() {return new NearDeathExperience(this);
public boolean apply(Game game, Ability source) {return game.getPlayer(source.getControllerId()).getLife() == 1;
public class NemaSiltlurker extends CardImpl {
public NemaSiltlurker (UUID ownerId) {
public NemaSiltlurker (final NemaSiltlurker card) {
public NemaSiltlurker copy() {return new NemaSiltlurker(this);
public class NestInvader extends CardImpl {
public NestInvader(UUID ownerId) {
public NestInvader(final NestInvader card) {
public NestInvader copy() {return new NestInvader(this);
public class Nighthaze extends CardImpl {
public Nighthaze (UUID ownerId) {
public Nighthaze (final Nighthaze card) {
public Nighthaze copy() {return new Nighthaze(this);
public class NirkanaRevenant extends CardImpl {
public NirkanaRevenant(UUID ownerId) {
public NirkanaRevenant(final NirkanaRevenant card) {
public NirkanaRevenant copy() {return new NirkanaRevenant(this);
class NirkanaRevenantTriggeredAbility extends TriggeredManaAbility {
public NirkanaRevenantTriggeredAbility() {
public NirkanaRevenantTriggeredAbility(NirkanaRevenantTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return land != null && filter.match(land, this.getSourceId(), this.getControllerId(), game);
public NirkanaRevenantTriggeredAbility copy() {return new NirkanaRevenantTriggeredAbility(this);
public String getRule() {return "Whenever you tap a Swamp for mana, add {B} to your mana pool.";
public class NomadsAssembly extends CardImpl {
public NomadsAssembly(UUID ownerId) {
public NomadsAssembly(final NomadsAssembly card) {
public NomadsAssembly copy() {return new NomadsAssembly(this);
public class NotOfThisWorld extends CardImpl {
public NotOfThisWorld(UUID ownerId) {
public NotOfThisWorld(final NotOfThisWorld card) {
public NotOfThisWorld copy() {return new NotOfThisWorld(this);
class TargetStackObjectTargetingControlledPermanent extends TargetObject {
public TargetStackObjectTargetingControlledPermanent() {
public TargetStackObjectTargetingControlledPermanent(final TargetStackObjectTargetingControlledPermanent target) {
public Filter getFilter() {
public class OgresCleaver extends CardImpl {
public OgresCleaver (UUID ownerId) {
public OgresCleaver (final OgresCleaver card) {
public OgresCleaver copy() {return new OgresCleaver(this);
public class OgreSentry extends CardImpl {
public OgreSentry(UUID ownerId) {
public OgreSentry(final OgreSentry card) {
public OgreSentry copy() {return new OgreSentry(this);
public class OnduGiant extends CardImpl {
public OnduGiant(UUID ownerId) {
public OnduGiant(final OnduGiant card) {
public OnduGiant copy() {return new OnduGiant(this);
public class Oust extends CardImpl {
public Oust(UUID ownerId) {
public Oust(final Oust card) {
public Oust copy() {return new Oust(this);
class OustEffect extends OneShotEffect {
public OustEffect() {
public OustEffect(final OustEffect effect) {
public OustEffect copy() {return new OustEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class OvergrownBattlement extends CardImpl {
public OvergrownBattlement(UUID ownerId) {
public OvergrownBattlement(final OvergrownBattlement card) {
public OvergrownBattlement copy() {return new OvergrownBattlement(this);
public class PathrazerOfUlamog extends CardImpl {
public PathrazerOfUlamog(UUID ownerId) {
public PathrazerOfUlamog(final PathrazerOfUlamog card) {
public PathrazerOfUlamog copy() {return new PathrazerOfUlamog(this);
public class PennonBlade extends CardImpl {
public PennonBlade(UUID ownerId) {
public PennonBlade(final PennonBlade card) {
public PennonBlade copy() {return new PennonBlade(this);
public class PerishTheThought extends CardImpl {
public PerishTheThought(UUID ownerId) {
public PerishTheThought(final PerishTheThought card) {
public PerishTheThought copy() {return new PerishTheThought(this);
class PerishTheThoughtEffect extends OneShotEffect {
public PerishTheThoughtEffect() {
public PerishTheThoughtEffect(final PerishTheThoughtEffect effect) {
public PerishTheThoughtEffect copy() {return new PerishTheThoughtEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PestilenceDemon extends CardImpl {
public PestilenceDemon(UUID ownerId) {
public PestilenceDemon(final PestilenceDemon card) {
public PestilenceDemon copy() {return new PestilenceDemon(this);
class PestilenceDemonEffect extends OneShotEffect {
PestilenceDemonEffect() {
PestilenceDemonEffect(final PestilenceDemonEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public PestilenceDemonEffect copy() {return new PestilenceDemonEffect(this);
public class PhantasmalAbomination extends CardImpl {
public PhantasmalAbomination(UUID ownerId) {
public PhantasmalAbomination(final PhantasmalAbomination card) {
public PhantasmalAbomination copy() {return new PhantasmalAbomination(this);
public class PreysVengeance extends CardImpl {
public PreysVengeance (UUID ownerId) {
public PreysVengeance (final PreysVengeance card) {
public PreysVengeance copy() {return new PreysVengeance(this);
public class PropheticPrism extends CardImpl {
public PropheticPrism(UUID ownerId) {
public PropheticPrism(final PropheticPrism card) {
public PropheticPrism copy() {return new PropheticPrism(this);
public class PuncturingLight extends CardImpl {
public PuncturingLight(UUID ownerId) {
public PuncturingLight(final PuncturingLight card) {
public PuncturingLight copy() {return new PuncturingLight(this);
public class RageNimbus extends CardImpl {
public RageNimbus(UUID ownerId) {
public RageNimbus(final RageNimbus card) {
public RageNimbus copy() {return new RageNimbus(this);
public class RaidBombardment extends CardImpl {
public RaidBombardment(UUID ownerId) {
public RaidBombardment(final RaidBombardment card) {
public RaidBombardment copy() {return new RaidBombardment(this);
class RaidBombardmentTriggeredAbility extends TriggeredAbilityImpl {
public RaidBombardmentTriggeredAbility() {
public RaidBombardmentTriggeredAbility(final RaidBombardmentTriggeredAbility ability) {
public RaidBombardmentTriggeredAbility copy() {return new RaidBombardmentTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control with power 2 or less attacks, {this} deals 1 damage to defending player.";
public class RapaciousOne extends CardImpl {
public RapaciousOne(UUID ownerId) {
public RapaciousOne(final RapaciousOne card) {
public RapaciousOne copy() {return new RapaciousOne(this);
class RapaciousOneTriggeredAbility extends TriggeredAbilityImpl {
public RapaciousOneTriggeredAbility() {
public RapaciousOneTriggeredAbility(final RapaciousOneTriggeredAbility ability) {
public RapaciousOneTriggeredAbility copy() {return new RapaciousOneTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, put that many 0/1 colorless Eldrazi Spawn creature tokens onto the battlefield. They have \"Sacrifice this creature: Add {C} to your mana pool.\"";
public class RealitySpasm extends CardImpl {
public RealitySpasm(UUID ownerId) {
public RealitySpasm(final RealitySpasm card) {
public RealitySpasm copy() {return new RealitySpasm(this);
class RealitySpasmTapEffect extends OneShotEffect {
public RealitySpasmTapEffect() {
public RealitySpasmTapEffect(final RealitySpasmTapEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public RealitySpasmTapEffect copy() {return new RealitySpasmTapEffect(this);
class RealitySpasmUntapEffect extends OneShotEffect {
public RealitySpasmUntapEffect() {
public RealitySpasmUntapEffect(final RealitySpasmUntapEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public RealitySpasmUntapEffect copy() {return new RealitySpasmUntapEffect(this);
public class RealmsUncharted extends CardImpl {
public RealmsUncharted(UUID ownerId) {
public RealmsUncharted(final RealmsUncharted card) {
public RealmsUncharted copy() {return new RealmsUncharted(this);
class RealmsUnchartedEffect extends OneShotEffect {
public RealmsUnchartedEffect() {
public RealmsUnchartedEffect(final RealmsUnchartedEffect effect) {
public RealmsUnchartedEffect copy() {return new RealmsUnchartedEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
class RealmsUnchartedTarget extends TargetCardInLibrary {
public RealmsUnchartedTarget() {
public RealmsUnchartedTarget(final RealmsUnchartedTarget target) {
public RealmsUnchartedTarget copy() {return new RealmsUnchartedTarget(this);
public boolean canTarget(UUID id, Cards cards, Game game) {return false;return filter.match(card, game);return false;
public class RecurringInsight extends CardImpl {
public RecurringInsight(UUID ownerId) {
public RecurringInsight(final RecurringInsight card) {
public RecurringInsight copy() {return new RecurringInsight(this);
class RecurringInsightEffect extends OneShotEffect {
public RecurringInsightEffect() {
public RecurringInsightEffect(final RecurringInsightEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public RecurringInsightEffect copy() {return new RecurringInsightEffect(this);return new ReinforcedBulwark(this);return new ReinforcedBulwarkEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class RenegadeDoppelganger extends CardImpl {
public RenegadeDoppelganger(UUID ownerId) {
public RenegadeDoppelganger(final RenegadeDoppelganger card) {
public RenegadeDoppelganger copy() {return new RenegadeDoppelganger(this);
class RenegadeDoppelgangerTriggeredAbility extends TriggeredAbilityImpl {
RenegadeDoppelgangerTriggeredAbility() {
RenegadeDoppelgangerTriggeredAbility(final RenegadeDoppelgangerTriggeredAbility ability) {
public RenegadeDoppelgangerTriggeredAbility copy() {return new RenegadeDoppelgangerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever another creature enters the battlefield under your control, you may have {this} become a copy of that creature until end of turn.";
class RenegadeDoppelgangerEffect extends OneShotEffect {
public RenegadeDoppelgangerEffect() {
public RenegadeDoppelgangerEffect(final RenegadeDoppelgangerEffect effect) {
public RenegadeDoppelgangerEffect copy() {return new RenegadeDoppelgangerEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;
public class RepayInKind extends CardImpl {
public RepayInKind(UUID ownerId) {
public RepayInKind(final RepayInKind card) {
public RepayInKind copy() {return new RepayInKind(this);
class RepayInKindEffect extends OneShotEffect {
public RepayInKindEffect() {
public RepayInKindEffect(final RepayInKindEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public RepayInKindEffect copy() {return new RepayInKindEffect(this);
public class RepelTheDarkness extends CardImpl {
public RepelTheDarkness(UUID ownerId) {
public RepelTheDarkness(final RepelTheDarkness card) {
public RepelTheDarkness copy() {return new RepelTheDarkness(this);
public class RunedServitor extends CardImpl {
public RunedServitor(UUID ownerId) {
public RunedServitor(final RunedServitor card) {
public RunedServitor copy() {return new RunedServitor(this);
public class SeeBeyond extends CardImpl {
public SeeBeyond(UUID ownerId) {
public SeeBeyond(final SeeBeyond card) {
public SeeBeyond copy() {return new SeeBeyond(this);
class SeeBeyondEffect extends OneShotEffect {
public SeeBeyondEffect() {
public SeeBeyondEffect(SeeBeyondEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;
public SeeBeyondEffect copy() {return new SeeBeyondEffect(this);
public class SharedDiscovery extends CardImpl {
public SharedDiscovery(UUID ownerId) {
public SharedDiscovery(final SharedDiscovery card) {
public SharedDiscovery copy() {return new SharedDiscovery(this);
public class Shrivel extends CardImpl {
public Shrivel(UUID ownerId) {
public Shrivel(final Shrivel card) {
public Shrivel copy() {return new Shrivel(this);
public class SkeletalWurm extends CardImpl {
public SkeletalWurm(UUID ownerId) {
public SkeletalWurm(final SkeletalWurm card) {
public SkeletalWurm copy() {return new SkeletalWurm(this);
public class SkitteringInvasion extends CardImpl {
public SkitteringInvasion (UUID ownerId) {
public SkitteringInvasion (final SkitteringInvasion card) {
public SkitteringInvasion copy() {return new SkitteringInvasion(this);
public class Smite extends CardImpl {
public Smite(UUID ownerId) {
public Smite(final Smite card) {
public Smite copy() {return new Smite(this);
public class SnakeUmbra extends CardImpl {
public SnakeUmbra(UUID ownerId) {
public SnakeUmbra(final SnakeUmbra card) {
public SnakeUmbra copy() {return new SnakeUmbra(this);
public class SoulboundGuardians extends CardImpl {
public SoulboundGuardians (UUID ownerId) {
public SoulboundGuardians (final SoulboundGuardians card) {
public SoulboundGuardians copy() {return new SoulboundGuardians(this);
public class SoulsAttendant extends CardImpl {
public SoulsAttendant(UUID ownerId) {
public SoulsAttendant(final SoulsAttendant card) {
public SoulsAttendant copy() {return new SoulsAttendant(this);
public class SoulsurgeElemental extends CardImpl {
public SoulsurgeElemental(UUID ownerId) {
public SoulsurgeElemental(final SoulsurgeElemental card) {
public SoulsurgeElemental copy() {return new SoulsurgeElemental(this);
public class SpawningBreath extends CardImpl {
public SpawningBreath(UUID ownerId) {
public SpawningBreath(final SpawningBreath card) {
public SpawningBreath copy() {return new SpawningBreath(this);
public class SpawnsireOfUlamog extends CardImpl {
public SpawnsireOfUlamog(UUID ownerId) {
public SpawnsireOfUlamog(final SpawnsireOfUlamog card) {
public SpawnsireOfUlamog copy() {return new SpawnsireOfUlamog(this);
public class SphinxBoneWand extends CardImpl {
public SphinxBoneWand(UUID ownerId) {
public SphinxBoneWand(final SphinxBoneWand card) {
public SphinxBoneWand copy() {return new SphinxBoneWand(this);
class SphinxBoneWandEffect extends OneShotEffect {
public SphinxBoneWandEffect() {
public SphinxBoneWandEffect(final SphinxBoneWandEffect effect) {
public SphinxBoneWandEffect copy() {return new SphinxBoneWandEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SphinxOfMagosi extends CardImpl {
public SphinxOfMagosi (UUID ownerId) {
public SphinxOfMagosi (final SphinxOfMagosi card) {
public SphinxOfMagosi copy() {return new SphinxOfMagosi(this);
public class SpiderUmbra extends CardImpl {
public SpiderUmbra(UUID ownerId) {
public SpiderUmbra(final SpiderUmbra card) {
public SpiderUmbra copy() {return new SpiderUmbra(this);
public class SplinterTwin extends CardImpl {
public SplinterTwin(UUID ownerId) {
public SplinterTwin(final SplinterTwin card) {
public SplinterTwin copy() {return new SplinterTwin(this);
class SplinterTwinEffect extends OneShotEffect {
public SplinterTwinEffect() {
public SplinterTwinEffect(final SplinterTwinEffect effect) {
public SplinterTwinEffect copy() {return new SplinterTwinEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SporecapSpider extends CardImpl {
public SporecapSpider(UUID ownerId) {
public SporecapSpider(final SporecapSpider card) {
public SporecapSpider copy() {return new SporecapSpider(this);
public class Staggershock extends CardImpl {
public Staggershock(UUID ownerId) {
public Staggershock(final Staggershock card) {
public Staggershock copy() {return new Staggershock(this);
public class SufferThePast extends CardImpl {
public SufferThePast(UUID ownerId) {
public SufferThePast(final SufferThePast card) {
public SufferThePast copy() {return new SufferThePast(this);
class SufferThePastEffect extends OneShotEffect {
public SufferThePastEffect() {
public SufferThePastEffect(final SufferThePastEffect effect) {
public SufferThePastEffect copy() {return new SufferThePastEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SurrakarSpellblade extends CardImpl {
public SurrakarSpellblade(UUID ownerId) {
public SurrakarSpellblade(final SurrakarSpellblade card) {
public SurrakarSpellblade copy() {return new SurrakarSpellblade(this);
public class SurrealMemoir extends CardImpl {
public SurrealMemoir(UUID ownerId) {
public SurrealMemoir(final SurrealMemoir card) {
public SurrealMemoir copy() {return new SurrealMemoir(this);
class SurrealMemoirEffect extends OneShotEffect {
public SurrealMemoirEffect() {
public SurrealMemoirEffect(final SurrealMemoirEffect effect) {
public SurrealMemoirEffect copy() {return new SurrealMemoirEffect(this);
public boolean apply(Game game, Ability source) {game.informPlayers(card.getName() + "returned to the hand of" + player.getLogName());return true;return false;
public class SurvivalCache extends CardImpl {
public SurvivalCache(UUID ownerId) {
public SurvivalCache(final SurvivalCache card) {
public SurvivalCache copy() {return new SurvivalCache(this);
class SurvivalCacheEffect extends OneShotEffect {
SurvivalCacheEffect() {
SurvivalCacheEffect(final SurvivalCacheEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public SurvivalCacheEffect copy() {return new SurvivalCacheEffect(this);
public class TajuruPreserver extends CardImpl {
public TajuruPreserver(UUID ownerId) {
public TajuruPreserver(final TajuruPreserver card) {
public TajuruPreserver copy() {return new TajuruPreserver(this);
class TajuruPreserverEffect extends ReplacementEffectImpl {
public TajuruPreserverEffect() {
public TajuruPreserverEffect(final TajuruPreserverEffect effect) {
public TajuruPreserverEffect copy() {return new TajuruPreserverEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SACRIFICE_PERMANENT;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public class ThoughtGorger extends CardImpl {
public ThoughtGorger(UUID ownerId) {
public ThoughtGorger(final ThoughtGorger card) {
public ThoughtGorger copy() {return new ThoughtGorger(this);
class ThoughtGorgerEffectEnters extends OneShotEffect {
public ThoughtGorgerEffectEnters() {
public ThoughtGorgerEffectEnters(final ThoughtGorgerEffectEnters effect) {
public ThoughtGorgerEffectEnters copy() {return new ThoughtGorgerEffectEnters(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ThoughtGorgerEffectLeaves extends OneShotEffect {
public ThoughtGorgerEffectLeaves() {
public ThoughtGorgerEffectLeaves(final ThoughtGorgerEffectLeaves effect) {
public ThoughtGorgerEffectLeaves copy() {return new ThoughtGorgerEffectLeaves(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TimeOfHeroes extends CardImpl {
public TimeOfHeroes(UUID ownerId) {
public TimeOfHeroes(final TimeOfHeroes card) {
public TimeOfHeroes copy() {return new TimeOfHeroes(this);
public class TotemGuideHartebeest extends CardImpl {
public TotemGuideHartebeest(UUID ownerId) {
public TotemGuideHartebeest(final TotemGuideHartebeest card) {
public TotemGuideHartebeest copy() {return new TotemGuideHartebeest(this);
public class TrainingGrounds extends CardImpl {
public TrainingGrounds(UUID ownerId) {
public TrainingGrounds(final TrainingGrounds card) {
public TrainingGrounds copy() {return new TrainingGrounds(this);
public TrainingGroundsEffect() {
public TrainingGroundsEffect(final TrainingGroundsEffect effect) {return true;return false;return true;return false;
public TrainingGroundsEffect copy() {return new TrainingGroundsEffect(this);
public class TraitorousInstinct extends CardImpl {
public TraitorousInstinct(UUID ownerId) {
public TraitorousInstinct(final TraitorousInstinct card) {
public TraitorousInstinct copy() {return new TraitorousInstinct(this);
public class TuktukTheExplorer extends CardImpl {
public TuktukTheExplorer (UUID ownerId) {
public TuktukTheExplorer (final TuktukTheExplorer card) {
public TuktukTheExplorer copy() {return new TuktukTheExplorer(this);
class TuktukTheReturnedToken extends Token {
TuktukTheReturnedToken(String setCode) {
public class UlamogsCrusher extends CardImpl {
public UlamogsCrusher (UUID ownerId) {
public UlamogsCrusher (final UlamogsCrusher card) {
public UlamogsCrusher copy() {return new UlamogsCrusher(this);
public class UlamogTheInfiniteGyre extends CardImpl {
public UlamogTheInfiniteGyre(UUID ownerId) {
public UlamogTheInfiniteGyre(final UlamogTheInfiniteGyre card) {
public UlamogTheInfiniteGyre copy() {return new UlamogTheInfiniteGyre(this);
public class UmbraMystic extends CardImpl {
public UmbraMystic(UUID ownerId) {
public UmbraMystic(final UmbraMystic card) {
public UmbraMystic copy() {return new UmbraMystic(this);
class UmbraMysticPredicate implements ObjectPlayerPredicate<ObjectPlayer<Permanent>> {
public boolean apply(ObjectPlayer<Permanent> input, Game game) {return true;return false;
public String toString() {return "Attached to permanents you control";return new UnifiedWill(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(source.getFirstTarget(), source.getSourceId(), game);return true;return false;return new UnifiedWillEffect(this);
public class ValakutFireboar extends CardImpl {
public ValakutFireboar(UUID ownerId) {
public ValakutFireboar(final ValakutFireboar card) {
public ValakutFireboar copy() {return new ValakutFireboar(this);
public class Vendetta extends CardImpl {
public Vendetta(UUID ownerId) {
public Vendetta(final Vendetta card) {
public Vendetta copy() {return new Vendetta(this);
class VendettaEffect extends OneShotEffect {
public VendettaEffect() {
public VendettaEffect(final VendettaEffect effect) {
public VendettaEffect copy() {return new VendettaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VeneratedTeacher extends CardImpl {
public VeneratedTeacher(UUID ownerId) {
public VeneratedTeacher(final VeneratedTeacher card) {
public VeneratedTeacher copy() {return new VeneratedTeacher(this);
class VeneratedTeacherEffect extends OneShotEffect {
public VeneratedTeacherEffect() {
public VeneratedTeacherEffect(final VeneratedTeacherEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public VeneratedTeacherEffect copy() {return new VeneratedTeacherEffect(this);
public class VirulentSwipe extends CardImpl {
public VirulentSwipe(UUID ownerId) {
public VirulentSwipe(final VirulentSwipe card) {
public VirulentSwipe copy() {return new VirulentSwipe(this);
public class WallOfOmens extends CardImpl {
public WallOfOmens(UUID ownerId) {
public WallOfOmens(final WallOfOmens card) {
public WallOfOmens copy() {return new WallOfOmens(this);
public class WarmongersChariot extends CardImpl {
public WarmongersChariot(UUID ownerId) {
public WarmongersChariot(final WarmongersChariot card) {
public WarmongersChariot copy() {return new WarmongersChariot(this);
class WarmongersChariotEffect extends AsThoughEffectImpl {
public WarmongersChariotEffect() {
public WarmongersChariotEffect(final WarmongersChariotEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public WarmongersChariotEffect copy() {return new WarmongersChariotEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class WildheartInvoker extends CardImpl {
public WildheartInvoker(UUID ownerId) {
public WildheartInvoker(final WildheartInvoker card) {
public WildheartInvoker copy() {return new WildheartInvoker(this);
public class WorldAtWar extends CardImpl {
public WorldAtWar(UUID ownerId) {
public WorldAtWar(final WorldAtWar card) {
public WorldAtWar copy() {return new WorldAtWar(this);
class WorldAtWarEffect extends OneShotEffect {
public WorldAtWarEffect() {
public WorldAtWarEffect(final WorldAtWarEffect effect) {
public WorldAtWarEffect copy() {return new WorldAtWarEffect(this);
public boolean apply(Game game, Ability source) {return true;
class UntapDelayedTriggeredAbility extends DelayedTriggeredAbility {
public UntapDelayedTriggeredAbility() {
public UntapDelayedTriggeredAbility(UntapDelayedTriggeredAbility ability) {
public UntapDelayedTriggeredAbility copy() {return new UntapDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.PHASE_CHANGED || event.getType() == EventType.COMBAT_PHASE_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;return false;
public void setConnectedTurnMod(UUID connectedTurnMod) {
public String getRule() {return "At the beginning of that combat, untap all creatures that attacked this turn";
class UntapAttackingThisTurnEffect extends OneShotEffect {
public UntapAttackingThisTurnEffect() {
public UntapAttackingThisTurnEffect(final UntapAttackingThisTurnEffect effect) {
public UntapAttackingThisTurnEffect copy() {return new UntapAttackingThisTurnEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class WrapInFlames extends CardImpl {
public WrapInFlames(UUID ownerId) {
public WrapInFlames(final WrapInFlames card) {
public WrapInFlames copy() {return new WrapInFlames(this);
public class ZofShade extends CardImpl {
public ZofShade(UUID ownerId) {
public ZofShade(final ZofShade card) {
public ZofShade copy() {return new ZofShade(this);
public class AdamaroFirstToDesire extends CardImpl {
public AdamaroFirstToDesire(UUID ownerId) {
public AdamaroFirstToDesire(final AdamaroFirstToDesire card) {
public AdamaroFirstToDesire copy() {return new AdamaroFirstToDesire(this);
class MostCardsInOpponentsHandCount implements DynamicValue {
public int calculate(Game game, Ability source, Effect effect) {return maxCards;
public DynamicValue copy() {return new mage.abilities.dynamicvalue.common.CardsInControllerHandCount();
public String getMessage() {return "cards in the hand of the opponent with the most cards in hand";
public String toString() {return "1";
public class AEtherShockwave extends CardImpl {
public AEtherShockwave(UUID ownerId) {
public AEtherShockwave(final AEtherShockwave card) {
public AEtherShockwave copy() {return new AEtherShockwave(this);
public class AkkiDrillmaster extends CardImpl {
public AkkiDrillmaster(UUID ownerId) {
public AkkiDrillmaster(final AkkiDrillmaster card) {
public AkkiDrillmaster copy() {return new AkkiDrillmaster(this);
public class AkkiUnderling extends CardImpl {
public AkkiUnderling(UUID ownerId) {
public AkkiUnderling(final AkkiUnderling card) {
public AkkiUnderling copy() {return new AkkiUnderling(this);
public class AkutaBornOfAsh extends CardImpl {
public AkutaBornOfAsh(UUID ownerId) {"At the beginning of your upkeep, if you have more cards in hand than each opponent, you may sacrifice a Swamp. If you do, return {this} from your graveyard to the battlefield.");
public AkutaBornOfAsh(final AkutaBornOfAsh card) {
public AkutaBornOfAsh copy() {return new AkutaBornOfAsh(this);
class MoreCardsInHandThanOpponentsCondition implements Condition {
public boolean apply(Game game, Ability source) {return false;return true;
public String toString() {return "you have more cards in hand than each opponent";
public class ArabaMothrider extends CardImpl {
public ArabaMothrider(UUID ownerId) {
public ArabaMothrider(final ArabaMothrider card) {
public ArabaMothrider copy() {return new ArabaMothrider(this);
public class ArashiTheSkyAsunder extends CardImpl {
public ArashiTheSkyAsunder(UUID ownerId) {
public ArashiTheSkyAsunder(final ArashiTheSkyAsunder card) {
public ArashiTheSkyAsunder copy() {return new ArashiTheSkyAsunder(this);
public class AshesOfTheFallen extends CardImpl {
public AshesOfTheFallen(UUID ownerId) {
public AshesOfTheFallen(final AshesOfTheFallen card) {
public AshesOfTheFallen copy() {return new AshesOfTheFallen(this);
class AshesOfTheFallenEffect extends ContinuousEffectImpl {
AshesOfTheFallenEffect() {
AshesOfTheFallenEffect(final AshesOfTheFallenEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AshesOfTheFallenEffect copy() {return new AshesOfTheFallenEffect(this);
public class AyumiTheLastVisitor extends CardImpl {
public AyumiTheLastVisitor(UUID ownerId) {
public AyumiTheLastVisitor(final AyumiTheLastVisitor card) {
public AyumiTheLastVisitor copy() {return new AyumiTheLastVisitor(this);
public class BarrelDownSokenzan extends CardImpl {
public BarrelDownSokenzan(UUID ownerId) {
public BarrelDownSokenzan(final BarrelDownSokenzan card) {
public BarrelDownSokenzan copy() {return new BarrelDownSokenzan(this);
public class BloodClock extends CardImpl {
public BloodClock(UUID ownerId) {
public BloodClock(final BloodClock card) {
public BloodClock copy() {return new BloodClock(this);
class BloodClockEffect extends OneShotEffect {
public BloodClockEffect() {this.staticText = "that player returns a permanent he or she controls to its owner's hand unless he or she pays 2 life";
public BloodClockEffect(final BloodClockEffect effect) {
public BloodClockEffect copy() {return new BloodClockEffect(this);
public boolean apply(Game game, Ability source) {return false;if (player.getLife() > 2 && player.chooseUse(Outcome.Neutral, "Pay 2 life? If you don't, return a permanent you control to its owner's hand.", source, game)) {game.informPlayers(player.getLogName() + " pays 2 life. He will not return a permanent he or she controls.");return true;game.informPlayers(player.getLogName() + " returns " + permanent.getName() + " to hand.");return permanent.moveToZone(Zone.HAND, source.getSourceId(), game, false);return false;
public class BurningEyeZubera extends CardImpl {
public BurningEyeZubera(UUID ownerId) {
public BurningEyeZubera(final BurningEyeZubera card) {
public BurningEyeZubera copy() {return new BurningEyeZubera(this);
class SourceGotFourDamage implements Condition {
public boolean apply(Game game, Ability source) {return permanent.getDamage() > 3;
public class CaptiveFlame extends CardImpl {
public CaptiveFlame(UUID ownerId) {
public CaptiveFlame(final CaptiveFlame card) {
public CaptiveFlame copy() {return new CaptiveFlame(this);
public class CelestialKirin extends CardImpl {
public CelestialKirin(UUID ownerId) {
public CelestialKirin(final CelestialKirin card) {
public CelestialKirin copy() {return new CelestialKirin(this);
class CelestialKirinEffect extends OneShotEffect {
public CelestialKirinEffect() {
public CelestialKirinEffect(final CelestialKirinEffect effect) {
public CelestialKirinEffect copy() {return new CelestialKirinEffect(this);
public boolean apply(Game game, Ability source) {return new DestroyAllEffect(filter).apply(game, source);return false;
public class ChargeAcrossTheAraba extends CardImpl {
public ChargeAcrossTheAraba(UUID ownerId) {
public ChargeAcrossTheAraba(final ChargeAcrossTheAraba card) {
public ChargeAcrossTheAraba copy() {return new ChargeAcrossTheAraba(this);
public class ChoiceOfDamnations extends CardImpl {
public ChoiceOfDamnations(UUID ownerId) {
public ChoiceOfDamnations(final ChoiceOfDamnations card) {
public ChoiceOfDamnations copy() {return new ChoiceOfDamnations(this);
class ChoiceOfDamnationsEffect extends OneShotEffect {
public ChoiceOfDamnationsEffect() {
public ChoiceOfDamnationsEffect(final ChoiceOfDamnationsEffect effect) {
public ChoiceOfDamnationsEffect copy() {return new ChoiceOfDamnationsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CloudhoofKirin extends CardImpl {
public CloudhoofKirin(UUID ownerId) {
public CloudhoofKirin(final CloudhoofKirin card) {
public CloudhoofKirin copy() {return new CloudhoofKirin(this);
class CloudhoofKirinEffect extends OneShotEffect {
public CloudhoofKirinEffect() {
public CloudhoofKirinEffect(final CloudhoofKirinEffect effect) {
public CloudhoofKirinEffect copy() {return new CloudhoofKirinEffect(this);
public boolean apply(Game game, Ability source) {return targetPlayer.moveCards(targetPlayer.getLibrary().getTopCards(game, spell.getConvertedManaCost()), Zone.LIBRARY, Zone.GRAVEYARD, source, game);return false;return new CowedByWisdom(this);
public ManaCosts getManaCostToPay(GameEvent event, Ability source, Game game) {return manaCosts;return null;
public boolean applies(GameEvent event, Ability source, Game game) {return enchantment != null && enchantment.getAttachedTo().equals(event.getSourceId());return new CowedByWisdomayCostToAttackBlockEffect(this);
public class CurtainOfLight extends CardImpl {
public CurtainOfLight(UUID ownerId) {
public CurtainOfLight(final CurtainOfLight card) {
public CurtainOfLight copy() {return new CurtainOfLight(this);
class CurtainOfLightEffect extends OneShotEffect {
public CurtainOfLightEffect() {
public CurtainOfLightEffect(final CurtainOfLightEffect effect) {
public CurtainOfLightEffect copy() {return new CurtainOfLightEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CutTheEarthlyBond extends CardImpl {
public CutTheEarthlyBond(UUID ownerId) {
public CutTheEarthlyBond(final CutTheEarthlyBond card) {
public CutTheEarthlyBond copy() {return new CutTheEarthlyBond(this);
public class DeathDenied extends CardImpl {
public DeathDenied(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public DeathDenied(final DeathDenied card) {
public DeathDenied copy() {return new DeathDenied(this);
public class DeathknellKami extends CardImpl {
public DeathknellKami(UUID ownerId) {
public DeathknellKami(final DeathknellKami card) {
public DeathknellKami copy() {return new DeathknellKami(this);
public class DeathmaskNezumi extends CardImpl {
public DeathmaskNezumi(UUID ownerId) {
public DeathmaskNezumi(final DeathmaskNezumi card) {
public DeathmaskNezumi copy() {return new DeathmaskNezumi(this);
public class DeathOfAThousandStings extends CardImpl {
public DeathOfAThousandStings(UUID ownerId) {"At the beginning of your upkeep, if you have more cards in hand than each opponent, you may return {this} from your graveyard to your hand.");
public DeathOfAThousandStings(final DeathOfAThousandStings card) {
public DeathOfAThousandStings copy() {return new DeathOfAThousandStings(this);
public class DenseCanopy extends CardImpl {
public DenseCanopy(UUID ownerId) {
public DenseCanopy(final DenseCanopy card) {
public DenseCanopy copy() {return new DenseCanopy(this);
class DenseCanopyCantBlockEffect extends RestrictionEffect {
public DenseCanopyCantBlockEffect() {
public DenseCanopyCantBlockEffect(final DenseCanopyCantBlockEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return filter.match(permanent, source.getSourceId(), source.getControllerId(), game);
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return attacker.hasAbility(FlyingAbility.getInstance().getId(), game);
public DenseCanopyCantBlockEffect copy() {return new DenseCanopyCantBlockEffect(this);
public class DescendantOfKiyomaro extends CardImpl {
public DescendantOfKiyomaro(UUID ownerId) {
public DescendantOfKiyomaro(final DescendantOfKiyomaro card) {
public DescendantOfKiyomaro copy() {return new DescendantOfKiyomaro(this);
public class DescendantOfMasumaro extends CardImpl {
public DescendantOfMasumaro(UUID ownerId) {
public DescendantOfMasumaro(final DescendantOfMasumaro card) {
public DescendantOfMasumaro copy() {return new DescendantOfMasumaro(this);
class DescendantOfMasumaroEffect extends OneShotEffect {
public DescendantOfMasumaroEffect() {
public DescendantOfMasumaroEffect(final DescendantOfMasumaroEffect effect) {
public DescendantOfMasumaroEffect copy() {return new DescendantOfMasumaroEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DescendantOfSoramaro extends CardImpl {
public DescendantOfSoramaro(UUID ownerId) {
public DescendantOfSoramaro(final DescendantOfSoramaro card) {
public DescendantOfSoramaro copy() {return new DescendantOfSoramaro(this);
public class DosansOldestChant extends CardImpl {
public DosansOldestChant(UUID ownerId) {
public DosansOldestChant(final DosansOldestChant card) {
public DosansOldestChant copy() {return new DosansOldestChant(this);
public class EiganjoFreeRiders extends CardImpl {
public EiganjoFreeRiders(UUID ownerId) {
public EiganjoFreeRiders(final EiganjoFreeRiders card) {
public EiganjoFreeRiders copy() {return new EiganjoFreeRiders(this);
public class ElderPineOfJukai extends CardImpl {
public ElderPineOfJukai(UUID ownerId) {
public ElderPineOfJukai(final ElderPineOfJukai card) {
public ElderPineOfJukai copy() {return new ElderPineOfJukai(this);
class ElderPineOfJukaiEffect extends OneShotEffect {
public ElderPineOfJukaiEffect() {
public ElderPineOfJukaiEffect(final ElderPineOfJukaiEffect effect) {
public ElderPineOfJukaiEffect copy() {return new ElderPineOfJukaiEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class EndlessSwarm extends CardImpl {
public EndlessSwarm(UUID ownerId) {
public EndlessSwarm(final EndlessSwarm card) {
public EndlessSwarm copy() {return new EndlessSwarm(this);
public class EnduringIdeal extends CardImpl {
public EnduringIdeal(UUID ownerId) {
public EnduringIdeal(final EnduringIdeal card) {
public EnduringIdeal copy() {return new EnduringIdeal(this);
class EnduringIdealEffect extends OneShotEffect {
public EnduringIdealEffect() {
public EnduringIdealEffect(final EnduringIdealEffect effect) {
public boolean apply(Game game, Ability source) {return applied;
public EnduringIdealEffect copy() {return new EnduringIdealEffect(this);
public class ErayoSoratamiAscendant extends CardImpl {
public ErayoSoratamiAscendant(UUID ownerId) {
public ErayoSoratamiAscendant(final ErayoSoratamiAscendant card) {
public ErayoSoratamiAscendant copy() {return new ErayoSoratamiAscendant(this);
class ErayoSoratamiAscendantTriggeredAbility extends TriggeredAbilityImpl {
public ErayoSoratamiAscendantTriggeredAbility() {return effect;
public ErayoSoratamiAscendantTriggeredAbility(final ErayoSoratamiAscendantTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return watcher != null && watcher.getAmountOfSpellsAllPlayersCastOnCurrentTurn() == 4;
public String getRule() {return "Whenever the fourth spell of a turn is cast, " + super.getRule();
public ErayoSoratamiAscendantTriggeredAbility copy() {return new ErayoSoratamiAscendantTriggeredAbility(this);
class ErayosEssence extends Token {
ErayosEssence () {
class ErayosEssenceTriggeredAbility extends TriggeredAbilityImpl {
public ErayosEssenceTriggeredAbility() {
public ErayosEssenceTriggeredAbility(final ErayosEssenceTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent casts a spell for the first time each turn, counter that spell.";
public ErayosEssenceTriggeredAbility copy() {return new ErayosEssenceTriggeredAbility(this);
public class EternalDominion extends CardImpl {
public EternalDominion(UUID ownerId) {
public EternalDominion(final EternalDominion card) {
public EternalDominion copy() {return new EternalDominion(this);
class EternalDominionEffect extends OneShotEffect {
public EternalDominionEffect() {
public EternalDominionEffect(final EternalDominionEffect effect) {
public boolean apply(Game game, Ability source) {return applied;
public EternalDominionEffect copy() {return new EternalDominionEffect(this);
public class Evermind extends CardImpl {
public Evermind(UUID ownerId) {
public Evermind(final Evermind card) {
public Evermind copy() {return new Evermind(this);
public class ExileIntoDarkness extends CardImpl {
public ExileIntoDarkness(UUID ownerId) {"At the beginning of your upkeep, if you have more cards in hand than each opponent, you may return {this} from your graveyard to your hand.");
public ExileIntoDarkness(final ExileIntoDarkness card) {
public ExileIntoDarkness copy() {return new ExileIntoDarkness(this);
public class FeralLightning extends CardImpl {
public FeralLightning(UUID ownerId) {
public FeralLightning(final FeralLightning card) {
public FeralLightning copy() {return new FeralLightning(this);
class FeralLightningEffect extends OneShotEffect {
public FeralLightningEffect() {
public FeralLightningEffect(final FeralLightningEffect effect) {
public FeralLightningEffect copy() {return new FeralLightningEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class FeralLightningElementalToken extends Token {
public FeralLightningElementalToken() {
public class FiddleheadKami extends CardImpl {
public FiddleheadKami(UUID ownerId) {
public FiddleheadKami(final FiddleheadKami card) {
public FiddleheadKami copy() {return new FiddleheadKami(this);
public class FootstepsOfTheGoryo extends CardImpl {
public FootstepsOfTheGoryo(UUID ownerId) {
public FootstepsOfTheGoryo(final FootstepsOfTheGoryo card) {
public FootstepsOfTheGoryo copy() {return new FootstepsOfTheGoryo(this);
class FootstepsOfTheGoryoEffect extends OneShotEffect {
public FootstepsOfTheGoryoEffect() {
public FootstepsOfTheGoryoEffect(final FootstepsOfTheGoryoEffect effect) {
public FootstepsOfTheGoryoEffect copy() {return new FootstepsOfTheGoryoEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FreedFromTheReal extends CardImpl {
public FreedFromTheReal(UUID ownerId) {
public FreedFromTheReal(final FreedFromTheReal card) {
public FreedFromTheReal copy() {return new FreedFromTheReal(this);
public class GazeOfAdamaro extends CardImpl {
public GazeOfAdamaro(UUID ownerId) {
public GazeOfAdamaro(final GazeOfAdamaro card) {
public GazeOfAdamaro copy() {return new GazeOfAdamaro(this);
class GazeOfAdamaroEffect extends OneShotEffect {
public GazeOfAdamaroEffect() {
public GazeOfAdamaroEffect(final GazeOfAdamaroEffect effect) {
public GazeOfAdamaroEffect copy() {return new GazeOfAdamaroEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GhostLitNourisher extends CardImpl {
public GhostLitNourisher(UUID ownerId) {
public GhostLitNourisher(final GhostLitNourisher card) {
public GhostLitNourisher copy() {return new GhostLitNourisher(this);
public class GhostLitRaider extends CardImpl {
public GhostLitRaider(UUID ownerId) {
public GhostLitRaider(final GhostLitRaider card) {
public GhostLitRaider copy() {return new GhostLitRaider(this);
public class GhostLitRedeemer extends CardImpl {
public GhostLitRedeemer(UUID ownerId) {
public GhostLitRedeemer(final GhostLitRedeemer card) {
public GhostLitRedeemer copy() {return new GhostLitRedeemer(this);
public class GhostLitStalker extends CardImpl {
public GhostLitStalker(UUID ownerId) {
public GhostLitStalker(final GhostLitStalker card) {
public GhostLitStalker copy() {return new GhostLitStalker(this);
public class GhostLitWarder extends CardImpl {
public GhostLitWarder(UUID ownerId) {
public GhostLitWarder(final GhostLitWarder card) {
public GhostLitWarder copy() {return new GhostLitWarder(this);return new GodosIrregulars(this);
public class HailOfArrows extends CardImpl {
public HailOfArrows(UUID ownerId) {
public HailOfArrows(final HailOfArrows card) {
public HailOfArrows copy() {return new HailOfArrows(this);
public class HandOfCruelty extends CardImpl {
public HandOfCruelty(UUID ownerId) {
public HandOfCruelty(final HandOfCruelty card) {
public HandOfCruelty copy() {return new HandOfCruelty(this);
public class HandOfHonor extends CardImpl {
public HandOfHonor(UUID ownerId) {
public HandOfHonor(final HandOfHonor card) {
public HandOfHonor copy() {return new HandOfHonor(this);
public class HaruOnna extends CardImpl {
public HaruOnna(UUID ownerId) {
public HaruOnna(final HaruOnna card) {
public HaruOnna copy() {return new HaruOnna(this);
public class HidetsugusSecondRite extends CardImpl {
public HidetsugusSecondRite(UUID ownerId) {
public HidetsugusSecondRite(final HidetsugusSecondRite card) {
public HidetsugusSecondRite copy() {return new HidetsugusSecondRite(this);
class HidetsugusSecondRiteEffect extends OneShotEffect {
public HidetsugusSecondRiteEffect() {
public HidetsugusSecondRiteEffect(final HidetsugusSecondRiteEffect effect) {
public HidetsugusSecondRiteEffect copy() {return new HidetsugusSecondRiteEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HomuraHumanAscendant extends CardImpl {
public HomuraHumanAscendant(UUID ownerId) {
public HomuraHumanAscendant(final HomuraHumanAscendant card) {
public HomuraHumanAscendant copy() {return new HomuraHumanAscendant(this);
class HomuraReturnFlippedSourceEffect extends OneShotEffect {
public HomuraReturnFlippedSourceEffect(Token flipToken) {staticText = "return it to the battlefield flipped";
public HomuraReturnFlippedSourceEffect(final HomuraReturnFlippedSourceEffect effect) {
public boolean apply(Game game, Ability source) {
public class IdeasUnbound extends CardImpl {
public IdeasUnbound(UUID ownerId) {
public IdeasUnbound(final IdeasUnbound card) {
public IdeasUnbound copy() {return new IdeasUnbound(this);
public class IizukaTheRuthless extends CardImpl {
public IizukaTheRuthless(UUID ownerId) {
public IizukaTheRuthless(final IizukaTheRuthless card) {
public IizukaTheRuthless copy() {return new IizukaTheRuthless(this);
public class InameAsOne extends CardImpl {
public InameAsOne(UUID ownerId) {
public InameAsOne(final InameAsOne card) {
public InameAsOne copy() {return new InameAsOne(this);
class InameAsOneEffect extends OneShotEffect {
public InameAsOneEffect() {this.staticText = "you may exile it. If you do, return target Spirit permanent card from your graveyard to the battlefield";
public InameAsOneEffect(final InameAsOneEffect effect) {
public InameAsOneEffect copy() {return new InameAsOneEffect(this);
public boolean apply(Game game, Ability source) {if (controller.chooseUse(outcome, "Exile " + sourceObject.getLogName() + " to return Spirit card?", source, game)) {return effect.apply(game, source);return true;return false;
public class InfernalKirin extends CardImpl {
public InfernalKirin(UUID ownerId) {
public InfernalKirin(final InfernalKirin card) {
public InfernalKirin copy() {return new InfernalKirin(this);
class InfernalKirinEffect extends OneShotEffect {
public InfernalKirinEffect() {
public InfernalKirinEffect(final InfernalKirinEffect effect) {
public InfernalKirinEffect copy() {return new InfernalKirinEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class InnerCalmOuterStrength extends CardImpl {
public InnerCalmOuterStrength(UUID ownerId) {
public InnerCalmOuterStrength(final InnerCalmOuterStrength card) {
public InnerCalmOuterStrength copy() {return new InnerCalmOuterStrength(this);
public class InnerChamberGuard extends CardImpl {
public InnerChamberGuard(UUID ownerId) {
public InnerChamberGuard(final InnerChamberGuard card) {
public InnerChamberGuard copy() {return new InnerChamberGuard(this);
public class InnerFire extends CardImpl {
public InnerFire(UUID ownerId) {
public InnerFire(final InnerFire card) {
public InnerFire copy() {return new InnerFire(this);
public class IntoTheFray extends CardImpl {
public IntoTheFray(UUID ownerId) {
public IntoTheFray(final IntoTheFray card) {
public IntoTheFray copy() {return new IntoTheFray(this);
public class IvoryCraneNetsuke extends CardImpl {
public IvoryCraneNetsuke(UUID ownerId) {
public IvoryCraneNetsuke(final IvoryCraneNetsuke card) {
public IvoryCraneNetsuke copy() {return new IvoryCraneNetsuke(this);
public class JiwariTheEarthAflame extends CardImpl {
public JiwariTheEarthAflame(UUID ownerId) {
public JiwariTheEarthAflame(final JiwariTheEarthAflame card) {
public JiwariTheEarthAflame copy() {return new JiwariTheEarthAflame(this);
public class KagemaroFirstToSuffer extends CardImpl {
public KagemaroFirstToSuffer(UUID ownerId) {
public KagemaroFirstToSuffer(final KagemaroFirstToSuffer card) {
public KagemaroFirstToSuffer copy() {return new KagemaroFirstToSuffer(this);
public class KamiOfEmptyGraves extends CardImpl {
public KamiOfEmptyGraves(UUID ownerId) {
public KamiOfEmptyGraves(final KamiOfEmptyGraves card) {
public KamiOfEmptyGraves copy() {return new KamiOfEmptyGraves(this);
public class KamiOfTheCrescentMoon extends CardImpl {
public KamiOfTheCrescentMoon(UUID ownerId) {
public KamiOfTheCrescentMoon(final KamiOfTheCrescentMoon card) {
public KamiOfTheCrescentMoon copy() {return new KamiOfTheCrescentMoon(this);
public class KamiOfTheTendedGarden extends CardImpl {
public KamiOfTheTendedGarden(UUID ownerId) {
public KamiOfTheTendedGarden(final KamiOfTheTendedGarden card) {
public KamiOfTheTendedGarden copy() {return new KamiOfTheTendedGarden(this);
public class KashiTribeElite extends CardImpl {
public KashiTribeElite(UUID ownerId) {
public KashiTribeElite(final KashiTribeElite card) {
public KashiTribeElite copy() {return new KashiTribeElite(this);
public class KatakiWarsWage extends CardImpl {
public KatakiWarsWage(UUID ownerId) {
public KatakiWarsWage(final KatakiWarsWage card) {
public KatakiWarsWage copy() {return new KatakiWarsWage(this);
public class KemuriOnna extends CardImpl {
public KemuriOnna(UUID ownerId) {
public KemuriOnna(final KemuriOnna card) {
public KemuriOnna copy() {return new KemuriOnna(this);return new KikusShadow(this);return new KikusShadowEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class KiriOnna extends CardImpl {
public KiriOnna(UUID ownerId) {
public KiriOnna(final KiriOnna card) {
public KiriOnna copy() {return new KiriOnna(this);
public class KitsuneBonesetter extends CardImpl {
public KitsuneBonesetter(UUID ownerId) {
public KitsuneBonesetter(final KitsuneBonesetter card) {
public KitsuneBonesetter copy() {return new KitsuneBonesetter(this);
public class KitsuneDawnblade extends CardImpl {
public KitsuneDawnblade(UUID ownerId) {
public KitsuneDawnblade(final KitsuneDawnblade card) {
public KitsuneDawnblade copy() {return new KitsuneDawnblade(this);
public class KitsuneLoreweaver extends CardImpl {
public KitsuneLoreweaver(UUID ownerId) {
public KitsuneLoreweaver(final KitsuneLoreweaver card) {
public KitsuneLoreweaver copy() {return new KitsuneLoreweaver(this);
public class KiyomaroFirstToStand extends CardImpl {
public KiyomaroFirstToStand(UUID ownerId) {
public KiyomaroFirstToStand(final KiyomaroFirstToStand card) {
public KiyomaroFirstToStand copy() {return new KiyomaroFirstToStand(this);
class KiyomaroFirstToStandDealsDamageTriggeredAbility extends TriggeredAbilityImpl {
public KiyomaroFirstToStandDealsDamageTriggeredAbility() {
public KiyomaroFirstToStandDealsDamageTriggeredAbility(final KiyomaroFirstToStandDealsDamageTriggeredAbility ability) {
public KiyomaroFirstToStandDealsDamageTriggeredAbility copy() {return new KiyomaroFirstToStandDealsDamageTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public class KuonOgreAscendant extends CardImpl {
public KuonOgreAscendant(UUID ownerId) {
public KuonOgreAscendant(final KuonOgreAscendant card) {
public KuonOgreAscendant copy() {return new KuonOgreAscendant(this);
class KuonsEssenceToken extends Token {
KuonsEssenceToken() {
class KuonOgreAscendantCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return watcher.getAmountOfCreaturesDiesThisTurn() > 2;return false;
public String toString() {return "if three or more creatures died this turn";
public class KurosTaken extends CardImpl {
public KurosTaken(UUID ownerId) {
public KurosTaken(final KurosTaken card) {
public KurosTaken copy() {return new KurosTaken(this);
public class LocustMiser extends CardImpl {
public LocustMiser(UUID ownerId) {
public LocustMiser(final LocustMiser card) {
public LocustMiser copy() {return new LocustMiser(this);
public class MagaTraitorToMortals extends CardImpl {
public MagaTraitorToMortals(UUID ownerId) {
public MagaTraitorToMortals(final MagaTraitorToMortals card) {
public MagaTraitorToMortals copy() {return new MagaTraitorToMortals(this);
public class ManrikiGusari extends CardImpl {
public ManrikiGusari(UUID ownerId) {
public ManrikiGusari(final ManrikiGusari card) {
public ManrikiGusari copy() {return new ManrikiGusari(this);
public class MasumaroFirstToLive extends CardImpl {
public MasumaroFirstToLive(UUID ownerId) {
public MasumaroFirstToLive(final MasumaroFirstToLive card) {
public MasumaroFirstToLive copy() {return new MasumaroFirstToLive(this);
public class MeishinTheMindCage extends CardImpl {
public MeishinTheMindCage(UUID ownerId) {
public MeishinTheMindCage(final MeishinTheMindCage card) {
public MeishinTheMindCage copy() {return new MeishinTheMindCage(this);
public class MichikoKondaTruthSeeker extends CardImpl {
public MichikoKondaTruthSeeker(UUID ownerId) {
public MichikoKondaTruthSeeker(final MichikoKondaTruthSeeker card) {
public MichikoKondaTruthSeeker copy() {return new MichikoKondaTruthSeeker(this);
class MichikoKondaTruthSeekerAbility extends TriggeredAbilityImpl {
public MichikoKondaTruthSeekerAbility() {
public MichikoKondaTruthSeekerAbility(final MichikoKondaTruthSeekerAbility ability) {
public MichikoKondaTruthSeekerAbility copy() {return new MichikoKondaTruthSeekerAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGED_PLAYER);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a source an opponent controls deals damage to you, that player sacrifices a permanent.";
public class MikokoroCenterOfTheSea extends CardImpl {
public MikokoroCenterOfTheSea(UUID ownerId) {
public MikokoroCenterOfTheSea(final MikokoroCenterOfTheSea card) {
public MikokoroCenterOfTheSea copy() {return new MikokoroCenterOfTheSea(this);
public class MinamoScrollkeeper extends CardImpl {
public MinamoScrollkeeper(UUID ownerId) {
public MinamoScrollkeeper(final MinamoScrollkeeper card) {
public MinamoScrollkeeper copy() {return new MinamoScrollkeeper(this);
public class MirenTheMoaningWell extends CardImpl {
public MirenTheMoaningWell(UUID ownerId) {
public MirenTheMoaningWell(final MirenTheMoaningWell card) {
public MirenTheMoaningWell copy() {return new MirenTheMoaningWell(this);
class MirenTheMoaningWellEffect extends OneShotEffect {
public MirenTheMoaningWellEffect() {
public MirenTheMoaningWellEffect(final MirenTheMoaningWellEffect effect) {
public MirenTheMoaningWellEffect copy() {return new MirenTheMoaningWellEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MoltingSkin extends CardImpl {
public MoltingSkin(UUID ownerId) {
public MoltingSkin(final MoltingSkin card) {
public MoltingSkin copy() {return new MoltingSkin(this);
public class MoonbowIllusionist extends CardImpl {
public MoonbowIllusionist(UUID ownerId) {
public MoonbowIllusionist(final MoonbowIllusionist card) {
public MoonbowIllusionist copy() {return new MoonbowIllusionist(this);
public class MoonwingMoth extends CardImpl {
public MoonwingMoth(UUID ownerId) {
public MoonwingMoth(final MoonwingMoth card) {
public MoonwingMoth copy() {return new MoonwingMoth(this);
public class MurmursFromBeyond extends CardImpl {
public MurmursFromBeyond(UUID ownerId) {
public MurmursFromBeyond(final MurmursFromBeyond card) {
public MurmursFromBeyond copy() {return new MurmursFromBeyond(this);
class MurmursFromBeyondEffect extends OneShotEffect {
public MurmursFromBeyondEffect() {
public MurmursFromBeyondEffect(final MurmursFromBeyondEffect effect) {
public MurmursFromBeyondEffect copy() {return new MurmursFromBeyondEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NeverendingTorment extends CardImpl {
public NeverendingTorment(UUID ownerId) {
public NeverendingTorment(final NeverendingTorment card) {
public NeverendingTorment copy() {return new NeverendingTorment(this);
class NeverendingTormentEffect extends OneShotEffect {
public NeverendingTormentEffect() {
public NeverendingTormentEffect(final NeverendingTormentEffect effect) {
public boolean apply(Game game, Ability source) {
&& you != null) {return applied;
public NeverendingTormentEffect copy() {return new NeverendingTormentEffect(this);
public class NightsoilKami extends CardImpl {
public NightsoilKami(UUID ownerId) {
public NightsoilKami(final NightsoilKami card) {
public NightsoilKami copy() {return new NightsoilKami(this);
public class NikkoOnna extends CardImpl {
public NikkoOnna(UUID ownerId) {
public NikkoOnna(final NikkoOnna card) {
public NikkoOnna copy() {return new NikkoOnna(this);
public class OboroBreezecaller extends CardImpl {
public OboroBreezecaller(UUID ownerId) {
public OboroBreezecaller(final OboroBreezecaller card) {
public OboroBreezecaller copy() {return new OboroBreezecaller(this);
public class OboroEnvoy extends CardImpl {
public OboroEnvoy(UUID ownerId) {
public OboroEnvoy(final OboroEnvoy card) {
public OboroEnvoy copy() {return new OboroEnvoy(this);
public class OboroPalaceInTheClouds extends CardImpl {
public OboroPalaceInTheClouds(UUID ownerId) {
public OboroPalaceInTheClouds(final OboroPalaceInTheClouds card) {
public OboroPalaceInTheClouds copy() {return new OboroPalaceInTheClouds(this);
public class OkinaNightwatch extends CardImpl {
public OkinaNightwatch(UUID ownerId) {
public OkinaNightwatch(final OkinaNightwatch card) {
public OkinaNightwatch copy() {return new OkinaNightwatch(this);
public class ONaginata extends CardImpl {
public ONaginata(UUID ownerId) {
public ONaginata(final ONaginata card) {
public ONaginata copy() {return new ONaginata(this);
public class OneWithNothing extends CardImpl {
public OneWithNothing(UUID ownerId) {
public OneWithNothing(final OneWithNothing card) {
public OneWithNothing copy() {return new OneWithNothing(this);
class OneWithNothingEffect extends OneShotEffect {
public OneWithNothingEffect() {
public OneWithNothingEffect(final OneWithNothingEffect effect) {
public OneWithNothingEffect copy() {return new OneWithNothingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OverwhelmingIntellect extends CardImpl {
public OverwhelmingIntellect(UUID ownerId) {
public OverwhelmingIntellect(final OverwhelmingIntellect card) {
public OverwhelmingIntellect copy() {return new OverwhelmingIntellect(this);
class OverwhelmingIntellectEffect extends OneShotEffect {
public OverwhelmingIntellectEffect() {
public OverwhelmingIntellectEffect(final OverwhelmingIntellectEffect effect) {
public OverwhelmingIntellectEffect copy() {return new OverwhelmingIntellectEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PainsReward extends CardImpl {
public PainsReward(UUID ownerId) {
public PainsReward(final PainsReward card) {
public PainsReward copy() {return new PainsReward(this);
class PainsRewardEffect extends OneShotEffect {
public PainsRewardEffect() {
public PainsRewardEffect(final PainsRewardEffect effect) {
public PainsRewardEffect copy() {return new PainsRewardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PathOfAngersFlame extends CardImpl {
public PathOfAngersFlame(UUID ownerId) {
public PathOfAngersFlame(final PathOfAngersFlame card) {
public PathOfAngersFlame copy() {return new PathOfAngersFlame(this);
public class PithingNeedle extends CardImpl {
public PithingNeedle(UUID ownerId) {
public PithingNeedle(final PithingNeedle card) {
public PithingNeedle copy() {return new PithingNeedle(this);
public PithingNeedleEffect() {
public PithingNeedleEffect(final PithingNeedleEffect effect) {
public PithingNeedleEffect copy() {return new PithingNeedleEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ACTIVATE_ABILITY;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PlowThroughReito extends CardImpl {
public PlowThroughReito(UUID ownerId) {
public PlowThroughReito(final PlowThroughReito card) {
public PlowThroughReito copy() {return new PlowThroughReito(this);
public class PresenceOfTheWise extends CardImpl {
public PresenceOfTheWise(UUID ownerId) {
public PresenceOfTheWise(final PresenceOfTheWise card) {
public PresenceOfTheWise copy() {return new PresenceOfTheWise(this);
public class PromisedKannushi extends CardImpl {
public PromisedKannushi(UUID ownerId) {
public PromisedKannushi(final PromisedKannushi card) {
public PromisedKannushi copy() {return new PromisedKannushi(this);
public class PromiseOfBunrei extends CardImpl {
public PromiseOfBunrei(UUID ownerId) {
public PromiseOfBunrei(final PromiseOfBunrei card) {
public PromiseOfBunrei copy() {return new PromiseOfBunrei(this);
class PromiseOfBunreiEffect extends OneShotEffect {
public PromiseOfBunreiEffect() {
public PromiseOfBunreiEffect(final PromiseOfBunreiEffect effect) {
public PromiseOfBunreiEffect copy() {return new PromiseOfBunreiEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new SpiritToken(), 4).apply(game, source);return true;return false;
public class PureIntentions extends CardImpl {
public PureIntentions(UUID ownerId) {
public PureIntentions(final PureIntentions card) {
public PureIntentions copy() {return new PureIntentions(this);
class PureIntentionsAllTriggeredAbility extends DelayedTriggeredAbility {
public PureIntentionsAllTriggeredAbility() {
public PureIntentionsAllTriggeredAbility(PureIntentionsAllTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public PureIntentionsAllTriggeredAbility copy() {return new PureIntentionsAllTriggeredAbility(this);
public String getRule() {return "Whenever a spell or ability an opponent controls causes you to discard cards this turn, return those cards from your graveyard to your hand.";
class PureIntentionsTriggeredAbility extends TriggeredAbilityImpl {
public PureIntentionsTriggeredAbility() {
public PureIntentionsTriggeredAbility(final PureIntentionsTriggeredAbility ability) {
public PureIntentionsTriggeredAbility copy() {return new PureIntentionsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When a spell or ability an opponent controls causes you to discard {this}, return {this} from your graveyard to your hand at the beginning of the next end step.";
public class RallyTheHorde extends CardImpl {
public RallyTheHorde(UUID ownerId) {
public RallyTheHorde(final RallyTheHorde card) {
public RallyTheHorde copy() {return new RallyTheHorde(this);
class RallyTheHordeEffect extends OneShotEffect {
public RallyTheHordeEffect() {
public RallyTheHordeEffect(final RallyTheHordeEffect effect) {
public RallyTheHordeEffect copy() {return new RallyTheHordeEffect(this);
public boolean apply(Game game, Ability source) {return new CreateTokenEffect(new RallyTheHordeWarriorToken(), nonLandCardsExiled).apply(game, source);return false;
private int checkIfNextLibCardIsNonLandAndExile(Player controller, Ability source, Game game) {return card.getCardType().contains(CardType.LAND) ? 0:1;return 0;
class RallyTheHordeWarriorToken extends Token {
public RallyTheHordeWarriorToken() {
public class RavingOniSlave extends CardImpl {
public RavingOniSlave(UUID ownerId) {
public RavingOniSlave(final RavingOniSlave card) {
public RavingOniSlave copy() {return new RavingOniSlave(this);
class RavingOniSlaveEffect extends OneShotEffect {
public RavingOniSlaveEffect() {
public RavingOniSlaveEffect(final RavingOniSlaveEffect effect) {
public RavingOniSlaveEffect copy() {return new RavingOniSlaveEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RazorjawOni extends CardImpl {
public RazorjawOni(UUID ownerId) {
public RazorjawOni(final RazorjawOni card) {
public RazorjawOni copy() {return new RazorjawOni(this);
public class RekiTheHistoryOfKamigawa extends CardImpl {
public RekiTheHistoryOfKamigawa(UUID ownerId) {
public RekiTheHistoryOfKamigawa(final RekiTheHistoryOfKamigawa card) {
public RekiTheHistoryOfKamigawa copy() {return new RekiTheHistoryOfKamigawa(this);
public class RendingVines extends CardImpl {
public RendingVines(UUID ownerId) {
public RendingVines(final RendingVines card) {
public RendingVines copy() {return new RendingVines(this);
class RendingVinesEffect extends OneShotEffect {
public RendingVinesEffect() {
public RendingVinesEffect(final RendingVinesEffect effect) {
public RendingVinesEffect copy() {return new RendingVinesEffect(this);
public boolean apply(Game game, Ability source) {return permanent.destroy(source.getSourceId(), game, false);return false;
public class Reverence extends CardImpl {
public Reverence(UUID ownerId) {
public Reverence(final Reverence card) {
public Reverence copy() {return new Reverence(this);
public class RoninCavekeeper extends CardImpl {
public RoninCavekeeper(UUID ownerId) {
public RoninCavekeeper(final RoninCavekeeper card) {
public RoninCavekeeper copy() {return new RoninCavekeeper(this);
public class RuneTailKitsuneAscendant extends CardImpl {
public RuneTailKitsuneAscendant(UUID ownerId) {
public RuneTailKitsuneAscendant(final RuneTailKitsuneAscendant card) {
public RuneTailKitsuneAscendant copy() {return new RuneTailKitsuneAscendant(this);
class RuneTailKitsuneAscendantFlipAbility extends StateTriggeredAbility {
public RuneTailKitsuneAscendantFlipAbility() {
public RuneTailKitsuneAscendantFlipAbility(final RuneTailKitsuneAscendantFlipAbility ability) {
public RuneTailKitsuneAscendantFlipAbility copy() {return new RuneTailKitsuneAscendantFlipAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return controller.getLife() >= 30;return false;
public String getRule() {return "When you have 30 or more life, flip {this}.";
class RuneTailEssence extends Token {
RuneTailEssence() {
public class RushingTideZubera extends CardImpl {
public RushingTideZubera(UUID ownerId) {
public RushingTideZubera(final RushingTideZubera card) {
public RushingTideZubera copy() {return new RushingTideZubera(this);
class RushingTideZuberaCondition implements Condition {
public boolean apply(Game game, Ability source) {return permanent.getDamage() > 3;
public class SasayaOrochiAscendant extends CardImpl {
public SasayaOrochiAscendant(UUID ownerId) {
public SasayaOrochiAscendant(final SasayaOrochiAscendant card) {
public SasayaOrochiAscendant copy() {return new SasayaOrochiAscendant(this);
class SasayaOrochiAscendantFlipEffect extends OneShotEffect {
public SasayaOrochiAscendantFlipEffect() {
public SasayaOrochiAscendantFlipEffect(final SasayaOrochiAscendantFlipEffect effect) {
public SasayaOrochiAscendantFlipEffect copy() {return new SasayaOrochiAscendantFlipEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class SasayasEssence extends Token {
SasayasEssence() {
class SasayasEssenceManaEffectEffect extends ManaEffect {
public SasayasEssenceManaEffectEffect() {
public SasayasEssenceManaEffectEffect(final SasayasEssenceManaEffectEffect effect) {
public SasayasEssenceManaEffectEffect copy() {return new SasayasEssenceManaEffectEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public class ScrollOfOrigins extends CardImpl {
public ScrollOfOrigins(UUID ownerId) {
public ScrollOfOrigins(final ScrollOfOrigins card) {
public ScrollOfOrigins copy() {return new ScrollOfOrigins(this);
public class Secretkeeper extends CardImpl {
public Secretkeeper(UUID ownerId) {
public Secretkeeper(final Secretkeeper card) {
public Secretkeeper copy() {return new Secretkeeper(this);
public class SeedTheLand extends CardImpl {
public SeedTheLand(UUID ownerId) {
public SeedTheLand(final SeedTheLand card) {
public SeedTheLand copy() {return new SeedTheLand(this);
public class SeekTheHorizon extends CardImpl {
public SeekTheHorizon(UUID ownerId) {
public SeekTheHorizon(final SeekTheHorizon card) {
public SeekTheHorizon copy() {return new SeekTheHorizon(this);
public class SekkiSeasonsGuide extends CardImpl {
public SekkiSeasonsGuide(UUID ownerId) {
public SekkiSeasonsGuide(final SekkiSeasonsGuide card) {
public SekkiSeasonsGuide copy() {return new SekkiSeasonsGuide(this);
class SekkiSeasonsGuideEffect extends PreventionEffectImpl {
public SekkiSeasonsGuideEffect() {
public SekkiSeasonsGuideEffect(final SekkiSeasonsGuideEffect effect) {
public SekkiSeasonsGuideEffect copy() {return new SekkiSeasonsGuideEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class ShapeStealer extends CardImpl {
public ShapeStealer(UUID ownerId) {
public ShapeStealer(final ShapeStealer card) {
public ShapeStealer copy() {return new ShapeStealer(this);
class ShapeStealerEffect extends OneShotEffect {
public ShapeStealerEffect() {
public ShapeStealerEffect(final ShapeStealerEffect effect) {
public ShapeStealerEffect copy() {return new ShapeStealerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new ShiftingBorders(this);
public class ShinenOfFearsChill extends CardImpl {
public ShinenOfFearsChill(UUID ownerId) {
public ShinenOfFearsChill(final ShinenOfFearsChill card) {
public ShinenOfFearsChill copy() {return new ShinenOfFearsChill(this);
public class ShinenOfFlightsWings extends CardImpl {
public ShinenOfFlightsWings(UUID ownerId) {
public ShinenOfFlightsWings(final ShinenOfFlightsWings card) {
public ShinenOfFlightsWings copy() {return new ShinenOfFlightsWings(this);
public class ShinenOfFurysFire extends CardImpl {
public ShinenOfFurysFire(UUID ownerId) {
public ShinenOfFurysFire(final ShinenOfFurysFire card) {
public ShinenOfFurysFire copy() {return new ShinenOfFurysFire(this);return new ShinenOfLifesRoar(this);
public class ShinenOfStarsLight extends CardImpl {
public ShinenOfStarsLight(UUID ownerId) {
public ShinenOfStarsLight(final ShinenOfStarsLight card) {
public ShinenOfStarsLight copy() {return new ShinenOfStarsLight(this);
public class SinkIntoTakenuma extends CardImpl {
public SinkIntoTakenuma(UUID ownerId) {
public SinkIntoTakenuma(final SinkIntoTakenuma card) {
public SinkIntoTakenuma copy() {return new SinkIntoTakenuma(this);
public class SkullCollector extends CardImpl {
public SkullCollector(UUID ownerId) {
public SkullCollector(final SkullCollector card) {
public SkullCollector copy() {return new SkullCollector(this);
public class SkyfireKirin extends CardImpl {
public SkyfireKirin(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public SkyfireKirin(final SkyfireKirin card) {
public SkyfireKirin copy() {return new SkyfireKirin(this);
class SkyfireKirinEffect extends OneShotEffect {
public SkyfireKirinEffect() {
public SkyfireKirinEffect(final SkyfireKirinEffect effect) {
public SkyfireKirinEffect copy() {return new SkyfireKirinEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SokenzanRenegade extends CardImpl {
public SokenzanRenegade(UUID ownerId) {
public SokenzanRenegade(final SokenzanRenegade card) {
public SokenzanRenegade copy() {return new SokenzanRenegade(this);
class SokenzanRenegadeEffect extends OneShotEffect {
public SokenzanRenegadeEffect() {
public SokenzanRenegadeEffect(final SokenzanRenegadeEffect effect) {
public SokenzanRenegadeEffect copy() {return new SokenzanRenegadeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class OnePlayerHasTheMostCards implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return onlyOnePlayer;return false;
public String toString() {return "a player has more cards in hand than each other player";
public class SokenzanSpellblade extends CardImpl {
public SokenzanSpellblade(UUID ownerId) {
public SokenzanSpellblade(final SokenzanSpellblade card) {
public SokenzanSpellblade copy() {return new SokenzanSpellblade(this);
public class SpiralingEmbers extends CardImpl {
public SpiralingEmbers(UUID ownerId) {
public SpiralingEmbers(final SpiralingEmbers card) {
public SpiralingEmbers copy() {return new SpiralingEmbers(this);
public class SpiritualVisit extends CardImpl {
public SpiritualVisit(UUID ownerId) {
public SpiritualVisit(final SpiritualVisit card) {
public SpiritualVisit copy() {return new SpiritualVisit(this);
public class StampedingSerow extends CardImpl {
public StampedingSerow(UUID ownerId) {
public StampedingSerow(final StampedingSerow card) {
public StampedingSerow copy() {return new StampedingSerow(this);
public class SunderFromWithin extends CardImpl {
public SunderFromWithin(UUID ownerId) {
public SunderFromWithin(final SunderFromWithin card) {
public SunderFromWithin copy() {return new SunderFromWithin(this);
public class ThoughtsOfRuin extends CardImpl {
public ThoughtsOfRuin(UUID ownerId) {
public ThoughtsOfRuin(final ThoughtsOfRuin card) {
public ThoughtsOfRuin copy() {return new ThoughtsOfRuin(this);
class ThoughtsOfRuinEffect extends OneShotEffect {
public ThoughtsOfRuinEffect() {
public ThoughtsOfRuinEffect(final ThoughtsOfRuinEffect effect) {
public ThoughtsOfRuinEffect copy() {return new ThoughtsOfRuinEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class TombOfUrami extends CardImpl {
public TombOfUrami(UUID ownerId) {
public TombOfUrami(final TombOfUrami card) {
public TombOfUrami copy() {return new TombOfUrami(this);
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return false;return true;return new SacrificeAllLandCost(this);
class UramiToken extends Token {
public UramiToken() {
public class ToriiWatchward extends CardImpl {
public ToriiWatchward(UUID ownerId) {
public ToriiWatchward(final ToriiWatchward card) {
public ToriiWatchward copy() {return new ToriiWatchward(this);
public class TrustedAdvisor extends CardImpl {
public TrustedAdvisor(UUID ownerId) {
public TrustedAdvisor(final TrustedAdvisor card) {
public TrustedAdvisor copy() {return new TrustedAdvisor(this);
public class UndyingFlames extends CardImpl {
public UndyingFlames(UUID ownerId) {
public UndyingFlames(final UndyingFlames card) {
public UndyingFlames copy() {return new UndyingFlames(this);
class UndyingFlamesEffect extends OneShotEffect {
public UndyingFlamesEffect() {
public UndyingFlamesEffect(final UndyingFlamesEffect effect) {
public boolean apply(Game game, Ability source) {return applied;
public UndyingFlamesEffect copy() {return new UndyingFlamesEffect(this);
public class WineOfBloodAndIron extends CardImpl {
public WineOfBloodAndIron(UUID ownerId) {
public WineOfBloodAndIron(final WineOfBloodAndIron card) {
public WineOfBloodAndIron copy() {return new WineOfBloodAndIron(this);
public class YukiOnna extends CardImpl {
public YukiOnna(UUID ownerId) {
public YukiOnna(final YukiOnna card) {
public YukiOnna copy() {return new YukiOnna(this);
public class AbunaAcolyte extends CardImpl {
public AbunaAcolyte(UUID ownerId) {
public AbunaAcolyte(final AbunaAcolyte card) {
public AbunaAcolyte copy() {return new AbunaAcolyte(this);
public class AccordersShield extends CardImpl {
public AccordersShield (UUID ownerId) {
public AccordersShield (final AccordersShield card) {
public AccordersShield copy() {return new AccordersShield(this);
public class AcidWebSpider extends CardImpl {
public AcidWebSpider (UUID ownerId) {
public AcidWebSpider (final AcidWebSpider card) {
public AcidWebSpider copy() {return new AcidWebSpider(this);
public class AlphaTyrranax extends CardImpl {
public AlphaTyrranax (UUID ownerId) {
public AlphaTyrranax (final AlphaTyrranax card) {
public AlphaTyrranax copy() {return new AlphaTyrranax(this);
public class ArcTrail extends CardImpl {
public ArcTrail (UUID ownerId) {
public ArcTrail (final ArcTrail card) {
public ArcTrail copy() {return new ArcTrail(this);
class ArcTrailEffect extends OneShotEffect {
private Object readResolve() throws ObjectStreamException {return fINSTANCE;return fINSTANCE;
private ArcTrailEffect ( ) {
public boolean apply(Game game, Ability source) {return applied;
public Effect copy() {return fINSTANCE;
public class ArgentSphinx extends CardImpl {
public ArgentSphinx(UUID ownerId) {
public ArgentSphinx(final ArgentSphinx card) {
public ArgentSphinx copy() {return new ArgentSphinx(this);
class ArgentSphinxEffect extends OneShotEffect {
ArgentSphinxEffect() {
ArgentSphinxEffect(ArgentSphinxEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ArgentSphinxEffect copy() {return new ArgentSphinxEffect(this);
public class ArgentumArmor extends CardImpl {
public ArgentumArmor(UUID ownerId) {
public ArgentumArmor(final ArgentumArmor card) {
public ArgentumArmor copy() {return new ArgentumArmor(this);
public class AuriokEdgewright extends CardImpl {
public AuriokEdgewright(UUID ownerId) {
public AuriokEdgewright(final AuriokEdgewright card) {
public AuriokEdgewright copy() {return new AuriokEdgewright(this);
public class AuriokReplica extends CardImpl {
public AuriokReplica(UUID ownerId) {
public AuriokReplica(final AuriokReplica card) {
public AuriokReplica copy() {return new AuriokReplica(this);
class AuriokReplicaEffect extends PreventionEffectImpl {
public AuriokReplicaEffect() {
public AuriokReplicaEffect(final AuriokReplicaEffect effect) {
public AuriokReplicaEffect copy() {return new AuriokReplicaEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
private void preventDamage(GameEvent event, Ability source, UUID target, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class AuriokSunchaser extends CardImpl {
public AuriokSunchaser(UUID ownerId) {
public AuriokSunchaser(final AuriokSunchaser card) {
public AuriokSunchaser copy() {return new AuriokSunchaser(this);
public class BarbedBattlegear extends CardImpl {
public BarbedBattlegear (UUID ownerId) {
public BarbedBattlegear (final BarbedBattlegear card) {
public BarbedBattlegear copy() {return new BarbedBattlegear(this);
public class BarrageOgre extends CardImpl {
public BarrageOgre (UUID ownerId) {
public BarrageOgre (final BarrageOgre card) {
public BarrageOgre copy() {return new BarrageOgre(this);
public class BellowingTanglewurm extends CardImpl {
public BellowingTanglewurm (UUID ownerId) {
public BellowingTanglewurm (final BellowingTanglewurm card) {
public BellowingTanglewurm copy() {return new BellowingTanglewurm(this);return new BlackcleaveCliffs(this);
public class BlackcleaveGoblin extends CardImpl {
public BlackcleaveGoblin (UUID ownerId) {
public BlackcleaveGoblin (final BlackcleaveGoblin card) {
public BlackcleaveGoblin copy() {return new BlackcleaveGoblin(this);
public class BladedPinions extends CardImpl {
public BladedPinions (UUID ownerId) {
public BladedPinions (final BladedPinions card) {
public BladedPinions copy() {return new BladedPinions(this);
public class BladeTribeBerserkers extends CardImpl {
public BladeTribeBerserkers(UUID ownerId) {
public BladeTribeBerserkers(final BladeTribeBerserkers card) {
public BladeTribeBerserkers copy() {return new BladeTribeBerserkers(this);
public class BleakCovenVampires extends CardImpl {
public BleakCovenVampires(UUID ownerId) {
public BleakCovenVampires(final BleakCovenVampires card) {
public BleakCovenVampires copy() {return new BleakCovenVampires(this);
public class BlightMamba extends CardImpl {
public BlightMamba (UUID ownerId) {
public BlightMamba (final BlightMamba card) {
public BlightMamba copy() {return new BlightMamba(this);
public class Blistergrub extends CardImpl {
public Blistergrub (UUID ownerId) {
public Blistergrub (final Blistergrub card) {
public Blistergrub copy() {return new Blistergrub(this);
public class BloodshotTrainee extends CardImpl {
public BloodshotTrainee(UUID ownerId) {
public BloodshotTrainee(final BloodshotTrainee card) {
public BloodshotTrainee copy() {return new BloodshotTrainee(this);
class BloodshotTraineeCost extends CostImpl {
public BloodshotTraineeCost() {
public BloodshotTraineeCost(final BloodshotTraineeCost cost) {
public BloodshotTraineeCost copy() {return new BloodshotTraineeCost(this);
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;return false;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public class BluntTheAssault extends CardImpl {
public BluntTheAssault (UUID ownerId) {
public BluntTheAssault (final BluntTheAssault card) {
public BluntTheAssault copy() {return new BluntTheAssault(this);
public class BondsOfQuicksilver extends CardImpl {
public BondsOfQuicksilver (UUID ownerId) {
public BondsOfQuicksilver (final BondsOfQuicksilver card) {
public BondsOfQuicksilver copy() {return new BondsOfQuicksilver(this);
public class CarapaceForger extends CardImpl {
public CarapaceForger (UUID ownerId) {
public CarapaceForger (final CarapaceForger card) {
public CarapaceForger copy() {return new CarapaceForger(this);return new CarnifexDemon(this);
public boolean apply(Game game, Ability source) {return false;return new CarnifexDemonEffect(this);
public class ChimericMass extends CardImpl {
public ChimericMass(UUID ownerId) {
public ChimericMass(final ChimericMass card) {
public ChimericMass copy() {return new ChimericMass(this);
class ChimericMassToken extends Token {
public ChimericMassToken() {
public class ChromeSteed extends CardImpl {
public ChromeSteed (UUID ownerId) {
public ChromeSteed (final ChromeSteed card) {
public ChromeSteed copy() {return new ChromeSteed(this);
public class CloneShell extends CardImpl {
public CloneShell(UUID ownerId) {
public CloneShell(final CloneShell card) {
public CloneShell copy() {return new CloneShell(this);
class CloneShellEffect extends OneShotEffect {
public CloneShellEffect() {
public CloneShellEffect(CloneShellEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public CloneShellEffect copy() {return new CloneShellEffect(this);
class CloneShellDiesEffect extends OneShotEffect {
public CloneShellDiesEffect() {
public CloneShellDiesEffect(CloneShellDiesEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CloneShellDiesEffect copy() {return new CloneShellDiesEffect(this);
public class ContagionClasp extends CardImpl {
public ContagionClasp (UUID ownerId) {
public ContagionClasp (final ContagionClasp card) {
public ContagionClasp copy() {return new ContagionClasp(this);
public class ContagionEngine extends CardImpl {
public ContagionEngine (UUID ownerId) {
public ContagionEngine (final ContagionEngine card) {
public ContagionEngine copy() {return new ContagionEngine(this);
class ContagionEngineEffect extends OneShotEffect {
ContagionEngineEffect() {
ContagionEngineEffect(final ContagionEngineEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ContagionEngineEffect copy() {return new ContagionEngineEffect(this);
public class ContagiousNim extends CardImpl {
public ContagiousNim (UUID ownerId) {
public ContagiousNim (final ContagiousNim card) {
public ContagiousNim copy() {return new ContagiousNim(this);
public class CopperhornScout extends CardImpl {
public CopperhornScout(UUID ownerId) {
public CopperhornScout(final CopperhornScout card) {
public CopperhornScout copy() {return new CopperhornScout(this);
class CopperhornScoutTriggeredAbility extends TriggeredAbilityImpl {
public CopperhornScoutTriggeredAbility() {
public CopperhornScoutTriggeredAbility(final CopperhornScoutTriggeredAbility ability) {
public CopperhornScoutTriggeredAbility copy() {return new CopperhornScoutTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId().equals(this.getSourceId());
public String getRule() {return "Whenever {this} attacks, untap each other creature you control.";
class CopperhornScoutUntapEffect extends OneShotEffect {
CopperhornScoutUntapEffect ( ) {
CopperhornScoutUntapEffect ( CopperhornScoutUntapEffect effect ) {
public boolean apply(Game game, Ability source) {return true;
public CopperhornScoutUntapEffect copy() {return new CopperhornScoutUntapEffect(this);
public class CopperlineGorge extends CardImpl {
public CopperlineGorge(UUID ownerId) {
public CopperlineGorge(final CopperlineGorge card) {
public CopperlineGorge copy() {return new CopperlineGorge(this);
public class CorpseCur extends CardImpl {
public CorpseCur (UUID ownerId) {
public CorpseCur (final CorpseCur card) {
public CorpseCur copy() {return new CorpseCur(this);
public class CorruptedHarvester extends CardImpl {
public CorruptedHarvester (UUID ownerId) {
public CorruptedHarvester (final CorruptedHarvester card) {
public CorruptedHarvester copy() {return new CorruptedHarvester(this);
public class CullingDais extends CardImpl {
public CullingDais (UUID ownerId) {
public CullingDais (final CullingDais card) {
public CullingDais copy() {return new CullingDais(this);
class CullingDaisEffect extends OneShotEffect {
CullingDaisEffect() {
CullingDaisEffect(final CullingDaisEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CullingDaisEffect copy() {return new CullingDaisEffect(this);
public class Cystbearer extends CardImpl {
public Cystbearer(UUID ownerId) {
public Cystbearer(final Cystbearer card) {
public Cystbearer copy() {return new Cystbearer(this);
public class DarkslickDrake extends CardImpl {
public DarkslickDrake (UUID ownerId) {
public DarkslickDrake (final DarkslickDrake card) {
public DarkslickDrake copy() {return new DarkslickDrake(this);
public class DarkslickShores extends CardImpl {
public DarkslickShores (UUID ownerId) {
public DarkslickShores (final DarkslickShores card) {
public DarkslickShores copy() {return new DarkslickShores(this);
public class DarksteelAxe extends CardImpl {
public DarksteelAxe (UUID ownerId) {
public DarksteelAxe (final DarksteelAxe card) {
public DarksteelAxe copy() {return new DarksteelAxe(this);
public class DarksteelJuggernaut extends CardImpl {
public DarksteelJuggernaut (UUID ownerId) {
public DarksteelJuggernaut (final DarksteelJuggernaut card) {
public DarksteelJuggernaut copy() {return new DarksteelJuggernaut(this);
public class DarksteelMyr extends CardImpl {
public DarksteelMyr (UUID ownerId) {
public DarksteelMyr (final DarksteelMyr card) {
public DarksteelMyr copy() {return new DarksteelMyr(this);
public class DarksteelSentinel extends CardImpl {
public DarksteelSentinel (UUID ownerId) {
public DarksteelSentinel (final DarksteelSentinel card) {
public DarksteelSentinel copy() {return new DarksteelSentinel(this);
public class DissipationField extends CardImpl {
public DissipationField(UUID ownerId) {
public DissipationField(final DissipationField card) {
public DissipationField copy() {return new DissipationField(this);
class DissipationFieldAbility extends TriggeredAbilityImpl {
public DissipationFieldAbility() {
public DissipationFieldAbility(DissipationFieldAbility effect) {
public DissipationFieldAbility copy() {return new DissipationFieldAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a permanent deals damage to you, return it to its owner's hand.";
public class DrossHopper extends CardImpl {
public DrossHopper (UUID ownerId) {
public DrossHopper (final DrossHopper card) {
public DrossHopper copy() {return new DrossHopper(this);
public class EchoCirclet extends CardImpl {
public EchoCirclet(UUID ownerId) {
public EchoCirclet(final EchoCirclet card) {
public EchoCirclet copy() {return new EchoCirclet(this);
class EchoCircletEffect extends ContinuousEffectImpl {
public EchoCircletEffect() {
public EchoCircletEffect(final EchoCircletEffect effect) {
public EchoCircletEffect copy() {return new EchoCircletEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class ElspethTirel extends CardImpl {
public ElspethTirel(UUID ownerId) {
public ElspethTirel(final ElspethTirel card) {
public ElspethTirel copy() {return new ElspethTirel(this);
class ElspethTirelFirstEffect extends OneShotEffect {
public ElspethTirelFirstEffect() {
public ElspethTirelFirstEffect(final ElspethTirelFirstEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ElspethTirelFirstEffect copy() {return new ElspethTirelFirstEffect(this);
class ElspethTirelThirdEffect extends OneShotEffect {
public ElspethTirelThirdEffect() {
public ElspethTirelThirdEffect(final ElspethTirelThirdEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ElspethTirelThirdEffect copy() {return new ElspethTirelThirdEffect(this);
public class Embersmith extends CardImpl {
public Embersmith(UUID ownerId) {
public Embersmith(final Embersmith card) {
public Embersmith copy() {return new Embersmith(this);
class EmbersmithEffect extends OneShotEffect {
EmbersmithEffect() {
EmbersmithEffect(final EmbersmithEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;return false;
public EmbersmithEffect copy() {return new EmbersmithEffect(this);
public class EngulfingSlagwurm extends CardImpl {
public EngulfingSlagwurm (UUID ownerId) {
public EngulfingSlagwurm (final EngulfingSlagwurm card) {
public EngulfingSlagwurm copy() {return new EngulfingSlagwurm(this);
class EngulfingSlagwurmEffect extends OneShotEffect {
EngulfingSlagwurmEffect() {
EngulfingSlagwurmEffect(final EngulfingSlagwurmEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public EngulfingSlagwurmEffect copy() {return new EngulfingSlagwurmEffect(this);
public class EtchedChampion extends CardImpl {
public EtchedChampion(UUID ownerId) {
public EtchedChampion(final EtchedChampion card) {
public EtchedChampion copy() {return new EtchedChampion(this);
public class Exsanguinate extends CardImpl {
public Exsanguinate (UUID ownerId) {
public Exsanguinate (final Exsanguinate card) {
public Exsanguinate copy() {return new Exsanguinate(this);
class ExsanguinateEffect extends OneShotEffect {
public ExsanguinateEffect() {
public ExsanguinateEffect(final ExsanguinateEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ExsanguinateEffect copy() {return new ExsanguinateEffect(this);
public class EzuriRenegadeLeader extends CardImpl {
public EzuriRenegadeLeader(UUID ownerId) {
public EzuriRenegadeLeader(final EzuriRenegadeLeader card) {
public EzuriRenegadeLeader copy() {return new EzuriRenegadeLeader(this);
public class EzurisArchers extends CardImpl {
public EzurisArchers(UUID ownerId) {
public EzurisArchers(final EzurisArchers card) {
public EzurisArchers copy() {return new EzurisArchers(this);
class BlocksCreatureWithFlyingTriggeredAbility extends TriggeredAbilityImpl {
public BlocksCreatureWithFlyingTriggeredAbility(Effect effect, boolean optional) {
public BlocksCreatureWithFlyingTriggeredAbility(final BlocksCreatureWithFlyingTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.BLOCKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId().equals(this.getSourceId()) && game.getPermanent(event.getTargetId()).getAbilities().containsKey(FlyingAbility.getInstance().getId());
public String getRule() {return "Whenever {this} blocks a creature with flying, " + super.getRule();
public BlocksCreatureWithFlyingTriggeredAbility copy() {return new BlocksCreatureWithFlyingTriggeredAbility(this);
public class EzurisBrigade extends CardImpl {
public EzurisBrigade (UUID ownerId) {
public EzurisBrigade (final EzurisBrigade card) {
public EzurisBrigade copy() {return new EzurisBrigade(this);
public class Ferrovore extends CardImpl {
public Ferrovore (UUID ownerId) {
public Ferrovore (final Ferrovore card) {
public Ferrovore copy() {return new Ferrovore(this);
public class FlamebornHellion extends CardImpl {
public FlamebornHellion (UUID ownerId) {
public FlamebornHellion (final FlamebornHellion card) {
public FlamebornHellion copy() {return new FlamebornHellion(this);
public class FleshAllergy extends CardImpl {
public FleshAllergy(UUID ownerId) {
public FleshAllergy(final FleshAllergy card) {
public FleshAllergy copy() {return new FleshAllergy(this);
class FleshAllergyWatcher extends Watcher {
public FleshAllergyWatcher() {
public FleshAllergyWatcher(final FleshAllergyWatcher watcher) {
public FleshAllergyWatcher copy() {return new FleshAllergyWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
class FleshAllergyEffect extends OneShotEffect {
public FleshAllergyEffect() {
public FleshAllergyEffect(final FleshAllergyEffect effect) {
public FleshAllergyEffect copy() {return new FleshAllergyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FlightSpellbomb extends CardImpl {
public FlightSpellbomb (UUID ownerId) {
public FlightSpellbomb (final FlightSpellbomb card) {
public FlightSpellbomb copy() {return new FlightSpellbomb(this);
public class FulgentDistraction extends CardImpl {
public FulgentDistraction (UUID ownerId) {
public FulgentDistraction (final FulgentDistraction card) {
public FulgentDistraction copy() {return new FulgentDistraction(this);
class FulgentDistractionEffect extends OneShotEffect {
FulgentDistractionEffect ( ) {
FulgentDistractionEffect ( FulgentDistractionEffect effect ) {
public boolean apply(Game game, Ability source) {return true;
public FulgentDistractionEffect copy() {return new FulgentDistractionEffect(this);
public class FumeSpitter extends CardImpl {
public FumeSpitter (UUID ownerId) {
public FumeSpitter (final FumeSpitter card) {
public FumeSpitter copy() {return new FumeSpitter(this);
public class FurnaceCelebration extends CardImpl {
public FurnaceCelebration(UUID ownerId) {
public FurnaceCelebration(final FurnaceCelebration card) {
public FurnaceCelebration copy() {return new FurnaceCelebration(this);
class FurnaceCelebrationAbility extends TriggeredAbilityImpl {
public FurnaceCelebrationAbility() {
public FurnaceCelebrationAbility(final FurnaceCelebrationAbility ability) {
public FurnaceCelebrationAbility copy() {return new FurnaceCelebrationAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SACRIFICED_PERMANENT;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.getControllerId()) && !event.getTargetId().equals(sourceId);
public String getRule() {return "Whenever you sacrifice another permanent, " + super.getRule();
public class GethLordOfTheVault extends CardImpl {
public GethLordOfTheVault(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public GethLordOfTheVault(final GethLordOfTheVault card) {
public GethLordOfTheVault copy() {return new GethLordOfTheVault(this);
class GethLordOfTheVaultEffect extends OneShotEffect {
public GethLordOfTheVaultEffect() {
public GethLordOfTheVaultEffect(final GethLordOfTheVaultEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GethLordOfTheVaultEffect copy() {return new GethLordOfTheVaultEffect(this);
public class GhalmasWarden extends CardImpl {
public GhalmasWarden (UUID ownerId) {
public GhalmasWarden (final GhalmasWarden card) {
public GhalmasWarden copy() {return new GhalmasWarden(this);
public class GlimmerpointStag extends CardImpl {
public GlimmerpointStag(UUID ownerId) {
public GlimmerpointStag(final GlimmerpointStag card) {
public GlimmerpointStag copy() {return new GlimmerpointStag(this);
class GlimmerpointStagEffect extends OneShotEffect {
GlimmerpointStagEffect() {
GlimmerpointStagEffect(GlimmerpointStagEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GlimmerpointStagEffect copy() {return new GlimmerpointStagEffect(this);
public class Glimmerpost extends CardImpl {
public Glimmerpost (UUID ownerId) {
public Glimmerpost (final Glimmerpost card) {
public Glimmerpost copy() {return new Glimmerpost(this);
class GlimmerpostEffect extends OneShotEffect {
public GlimmerpostEffect() {
public GlimmerpostEffect(final GlimmerpostEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GlimmerpostEffect copy() {return new GlimmerpostEffect(this);
public class GlintHawk extends CardImpl {
public GlintHawk(UUID ownerId) {
public GlintHawk(final GlintHawk card) {
public GlintHawk copy() {return new GlintHawk(this);
class GlintHawkEffect extends OneShotEffect {private static final String effectText = "sacrifice it unless you return an artifact you control to its owner's hand";
GlintHawkEffect ( ) {
GlintHawkEffect ( GlintHawkEffect effect ) {
public boolean apply(Game game, Ability source) {return false;
public GlintHawkEffect copy() {return new GlintHawkEffect(this);return new GlintHawkIdol(this);
public class GoblinGaveleer extends CardImpl {
public GoblinGaveleer(UUID ownerId) {
public GoblinGaveleer(final GoblinGaveleer card) {
public GoblinGaveleer copy() {return new GoblinGaveleer(this);
public class GoldenUrn extends CardImpl {
public GoldenUrn (UUID ownerId) {
public GoldenUrn (final GoldenUrn card) {
public GoldenUrn copy() {return new GoldenUrn(this);
public class GolemArtisan extends CardImpl {
public GolemArtisan(UUID ownerId) {
public GolemArtisan(final GolemArtisan card) {
public GolemArtisan copy() {return new GolemArtisan(this);
class GolemArtisanEffect extends OneShotEffect {
GolemArtisanEffect() {
GolemArtisanEffect(final GolemArtisanEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GolemArtisanEffect copy() {return new GolemArtisanEffect(this);
public class GolemFoundry extends CardImpl {
public GolemFoundry (UUID ownerId) {
public GolemFoundry (final GolemFoundry card) {
public GolemFoundry copy() {return new GolemFoundry(this);
public class GolemsHeart extends CardImpl {
public GolemsHeart(UUID ownerId) {
public GolemsHeart(final GolemsHeart card) {
public GolemsHeart copy() {return new GolemsHeart(this);
class GolemsHeartAbility extends TriggeredAbilityImpl {
public GolemsHeartAbility() {
public GolemsHeartAbility(final GolemsHeartAbility ability) {
public GolemsHeartAbility copy() {return new GolemsHeartAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getCardType().contains(CardType.ARTIFACT);
public String getRule() {return "Whenever a player casts an artifact spell, you may gain 1 life.";
public class GraftedExoskeleton extends CardImpl {
public GraftedExoskeleton(UUID ownerId) {
public GraftedExoskeleton(final GraftedExoskeleton card) {
public GraftedExoskeleton copy() {return new GraftedExoskeleton(this);
public class GrandArchitect extends CardImpl {
public GrandArchitect(UUID ownerId) {
public GrandArchitect(final GrandArchitect card) {
public GrandArchitect copy() {return new GrandArchitect(this);
class GrandArchitectEffect extends ContinuousEffectImpl {
public GrandArchitectEffect() {
public GrandArchitectEffect(final GrandArchitectEffect effect) {
public GrandArchitectEffect copy() {return new GrandArchitectEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class GrandArchitectManaAbility extends ManaAbility {
GrandArchitectManaAbility() {
GrandArchitectManaAbility(GrandArchitectManaAbility ability) {
public GrandArchitectManaAbility copy() {return new GrandArchitectManaAbility(this);
class GrandArchitectConditionalMana extends ConditionalMana {
public GrandArchitectConditionalMana() {
class GrandArchitectManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class GraspOfDarkness extends CardImpl {
public GraspOfDarkness (UUID ownerId) {
public GraspOfDarkness (final GraspOfDarkness card) {
public GraspOfDarkness copy() {return new GraspOfDarkness(this);
public class Grindclock extends CardImpl {
public Grindclock (UUID ownerId) {
public Grindclock (final Grindclock card) {
public Grindclock copy() {return new Grindclock(this);
class GrindclockEffect extends OneShotEffect {
public GrindclockEffect() {
public GrindclockEffect(final GrindclockEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GrindclockEffect copy() {return new GrindclockEffect(this);
public class HaltOrder extends CardImpl {
public HaltOrder (UUID ownerId) {
public HaltOrder (final HaltOrder card) {
public HaltOrder copy() {return new HaltOrder(this);
public class HandOfThePraetors extends CardImpl {
public HandOfThePraetors (UUID ownerId) {
public HandOfThePraetors (final HandOfThePraetors card) {
public HandOfThePraetors copy() {return new HandOfThePraetors(this);
public class HeavyArbalest extends CardImpl {
public HeavyArbalest(UUID ownerId) {
public HeavyArbalest(final HeavyArbalest card) {
public HeavyArbalest copy() {return new HeavyArbalest(this);
class HeavyArbalestEffect extends ReplacementEffectImpl {
public HeavyArbalestEffect() {
public HeavyArbalestEffect(final HeavyArbalestEffect effect) {
public HeavyArbalestEffect copy() {return new HeavyArbalestEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.UNTAP;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class IchorclawMyr extends CardImpl {
public IchorclawMyr(UUID ownerId) {
public IchorclawMyr(final IchorclawMyr card) {
public IchorclawMyr copy() {return new IchorclawMyr(this);
public class IchorRats extends CardImpl {
public IchorRats (UUID ownerId) {
public IchorRats (final IchorRats card) {
public IchorRats copy() {return new IchorRats(this);
class IchorRatsEffect extends OneShotEffect {
public IchorRatsEffect() {
public IchorRatsEffect(final IchorRatsEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public IchorRatsEffect copy() {return new IchorRatsEffect(this);return new IndomitableArchangel(this);
public class InexorableTide extends CardImpl {
public InexorableTide (UUID ownerId) {
public InexorableTide (final InexorableTide card) {
public InexorableTide copy() {return new InexorableTide(this);
public class InfiltrationLens extends CardImpl {
public InfiltrationLens(UUID ownerId) {
public InfiltrationLens(final InfiltrationLens card) {
public InfiltrationLens copy() {return new InfiltrationLens(this);
class EquippedBecomesBlockedTriggeredAbility extends TriggeredAbilityImpl {
public EquippedBecomesBlockedTriggeredAbility(Effect effect, boolean optional) {
public EquippedBecomesBlockedTriggeredAbility(final EquippedBecomesBlockedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.CREATURE_BLOCKED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature becomes blocked by a creature, " + super.getRule();
public EquippedBecomesBlockedTriggeredAbility copy() {return new EquippedBecomesBlockedTriggeredAbility(this);
public class InstillInfection extends CardImpl {
public InstillInfection (UUID ownerId) {
public InstillInfection (final InstillInfection card) {
public InstillInfection copy() {return new InstillInfection(this);
public class KembaKhaRegent extends CardImpl {
public KembaKhaRegent(UUID ownerId) {
public KembaKhaRegent(final KembaKhaRegent card) {
public KembaKhaRegent copy() {return new KembaKhaRegent(this);
public class KembasSkyguard extends CardImpl {
public KembasSkyguard(UUID ownerId) {
public KembasSkyguard(final KembasSkyguard card) {
public KembasSkyguard copy() {return new KembasSkyguard(this);
public class KothOfTheHammer extends CardImpl {
public KothOfTheHammer(UUID ownerId) {
public KothOfTheHammer(final KothOfTheHammer card) {
public KothOfTheHammer copy() {return new KothOfTheHammer(this);
class KothOfTheHammerToken extends Token {
public KothOfTheHammerToken() {
class KothOfTheHammerEmblem extends Emblem {
public KothOfTheHammerEmblem() {
class KothOfTheHammerThirdEffect extends ContinuousEffectImpl {
public KothOfTheHammerThirdEffect() {
public KothOfTheHammerThirdEffect(final KothOfTheHammerThirdEffect effect) {
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public KothOfTheHammerThirdEffect copy() {return new KothOfTheHammerThirdEffect(this);
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6;return new KuldothaForgemaster(this);return new KuldothaPhoenix(this);return new KuldothaRebirth(this);
public class LeoninArbiter extends CardImpl {
public LeoninArbiter(UUID ownerId) {
public LeoninArbiter(final LeoninArbiter card) {
public LeoninArbiter copy() {return new LeoninArbiter(this);
class LeoninArbiterSpecialAction extends SpecialAction {
public LeoninArbiterSpecialAction(final String keyString) {
public LeoninArbiterSpecialAction(final LeoninArbiterSpecialAction ability) {
public LeoninArbiterSpecialAction copy() {return new LeoninArbiterSpecialAction(this);
class LeoninArbiterIgnoreEffect extends OneShotEffect {
public LeoninArbiterIgnoreEffect(final String keyString) {
public LeoninArbiterIgnoreEffect(final LeoninArbiterIgnoreEffect effect) {
public LeoninArbiterIgnoreEffect copy() {return new LeoninArbiterIgnoreEffect(this);
public boolean apply(Game game, Ability source) {return true;
public LeoninArbiterCantSearchEffect(final String keyString) {
public LeoninArbiterCantSearchEffect(LeoninArbiterCantSearchEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return EventType.SEARCH_LIBRARY.equals(event.getType());
public boolean applies(GameEvent event, Ability source, Game game) {return applies;return false;
public LeoninArbiterCantSearchEffect copy() {return new LeoninArbiterCantSearchEffect(this);
public class LiegeOfTheTangle extends CardImpl {
public LiegeOfTheTangle (UUID ownerId) {
public LiegeOfTheTangle (final LiegeOfTheTangle card) {
public LiegeOfTheTangle copy() {return new LiegeOfTheTangle(this);
class LiegeOfTheTangleTriggeredAbility extends TriggeredAbilityImpl {
LiegeOfTheTangleTriggeredAbility() {
public LiegeOfTheTangleTriggeredAbility(final LiegeOfTheTangleTriggeredAbility ability) {
public LiegeOfTheTangleTriggeredAbility copy() {return new LiegeOfTheTangleTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return damageEvent.isCombatDamage() && p != null && p.getId().equals(this.getSourceId());
public String getRule() {return "Whenever {this} deals combat damage to a player, you may choose any number of target lands you control and put an awakening counter on each of them. Each of those lands is an 8/8 green Elemental creature for as long as it has an awakening counter on it. They're still lands.";
class LiegeOfTheTangleEffect extends ContinuousEffectImpl {
public LiegeOfTheTangleEffect() {
public LiegeOfTheTangleEffect(final LiegeOfTheTangleEffect effect) {
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public void init(Ability source, Game game) {
public LiegeOfTheTangleEffect copy() {return new LiegeOfTheTangleEffect(this);
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.ColorChangingEffects_5 || layer == layer.TypeChangingEffects_4;
class AwakeningLandToken extends Token {
public AwakeningLandToken() {return new Lifesmith(this);
public boolean apply(Game game, Ability source) {return true;return false;return new LifesmithEffect(this);
public class LiquimetalCoating extends CardImpl {
public LiquimetalCoating (UUID ownerId) {
public LiquimetalCoating (final LiquimetalCoating card) {
public LiquimetalCoating copy() {return new LiquimetalCoating(this);
public class LivewireLash extends CardImpl {
public LivewireLash(UUID ownerId) {
public LivewireLash(final LivewireLash card) {
public LivewireLash copy() {return new LivewireLash(this);
class LivewireLashAbility extends TriggeredAbilityImpl {
public LivewireLashAbility() {
public LivewireLashAbility(final LivewireLashAbility ability) {
public LivewireLashAbility copy() {return new LivewireLashAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever this creature becomes the target of a spell, this creature deals 2 damage to target creature or player.";return new LoxodonWayfarer(this);
public class MeltTerrain extends CardImpl {
public MeltTerrain (UUID ownerId) {
public MeltTerrain (final MeltTerrain card) {
public MeltTerrain copy() {return new MeltTerrain(this);
public class Memnite extends CardImpl {
public Memnite (UUID ownerId) {
public Memnite (final Memnite card) {
public Memnite copy() {return new Memnite(this);
public class Memoricide extends CardImpl {
public Memoricide(UUID ownerId) {
public Memoricide(final Memoricide card) {
public Memoricide copy() {return new Memoricide(this);
class MemoricideEffect extends SearchTargetGraveyardHandLibraryForCardNameAndExileEffect {
MemoricideEffect() {
MemoricideEffect(final MemoricideEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public MemoricideEffect copy() {return new MemoricideEffect(this);
public String getText(Mode mode) {return "Name a nonland card. " + super.getText(mode);
public class MimicVat extends CardImpl {
public MimicVat(UUID ownerId) {
public MimicVat(final MimicVat card) {
public MimicVat copy() {return new MimicVat(this);
class MimicVatTriggeredAbility extends TriggeredAbilityImpl {
MimicVatTriggeredAbility() {
MimicVatTriggeredAbility(MimicVatTriggeredAbility ability) {
public MimicVatTriggeredAbility copy() {return new MimicVatTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;return false;
public String getRule() {return "Whenever a nontoken creature dies, you may exile that card. If you do, return each other card exiled with {this} to its owner's graveyard.";
class MimicVatEffect extends OneShotEffect {
public MimicVatEffect() {
public MimicVatEffect(MimicVatEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public MimicVatEffect copy() {return new MimicVatEffect(this);
class MimicVatCreateTokenEffect extends OneShotEffect {
public MimicVatCreateTokenEffect() {
public MimicVatCreateTokenEffect(final MimicVatCreateTokenEffect effect) {
public MimicVatCreateTokenEffect copy() {return new MimicVatCreateTokenEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class Mindslaver extends CardImpl {
public Mindslaver(UUID ownerId) {
public Mindslaver(final Mindslaver card) {
public Mindslaver copy() {return new Mindslaver(this);
public class MolderBeast extends CardImpl {
public MolderBeast(UUID ownerId) {
public MolderBeast(final MolderBeast card) {
public MolderBeast copy() {return new MolderBeast(this);
class MolderBeastTriggeredAbility extends TriggeredAbilityImpl {
public MolderBeastTriggeredAbility() {
public MolderBeastTriggeredAbility(final MolderBeastTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return zEvent.getFromZone() == Zone.BATTLEFIELD
public String getRule() {return "Whenever an artifact is put into a graveyard from the battlefield, {this} gets +2/+0 until end of turn.";
public MolderBeastTriggeredAbility copy() {return new MolderBeastTriggeredAbility(this);
public class MoltenPsyche extends CardImpl {
public MoltenPsyche(UUID ownerId) {
public MoltenPsyche(final MoltenPsyche card) {
public MoltenPsyche copy() {return new MoltenPsyche(this);
class MoltenPsycheEffect extends OneShotEffect {
public MoltenPsycheEffect() {
public MoltenPsycheEffect(final MoltenPsycheEffect effect) {
public boolean apply(Game game, Ability source) {
public class MoltenTailMasticore extends CardImpl {
public MoltenTailMasticore (UUID ownerId) {
public MoltenTailMasticore (final MoltenTailMasticore card) {
public MoltenTailMasticore copy() {return new MoltenTailMasticore(this);
class MoltenTailMasticoreAbility extends TriggeredAbilityImpl {
public MoltenTailMasticoreAbility() {
public MoltenTailMasticoreAbility(final MoltenTailMasticoreAbility ability) {
public MoltenTailMasticoreAbility copy() {return new MoltenTailMasticoreAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public String getRule() {return "At the beginning of your upkeep, sacrifice {this} unless you discard a card.";
public class MoriokReaver extends CardImpl {
public MoriokReaver (UUID ownerId) {
public MoriokReaver (final MoriokReaver card) {
public MoriokReaver copy() {return new MoriokReaver(this);
public class MoriokReplica extends CardImpl {
public MoriokReplica (UUID ownerId) {
public MoriokReplica (final MoriokReplica card) {
public MoriokReplica copy() {return new MoriokReplica(this);
public class MoxOpal extends CardImpl {
public MoxOpal(UUID ownerId) {
public MoxOpal(final MoxOpal card) {
public MoxOpal copy() {return new MoxOpal(this);
public class MyrBattlesphere extends CardImpl {
public MyrBattlesphere(UUID ownerId) {
public MyrBattlesphere(final MyrBattlesphere card) {
public MyrBattlesphere copy() {return new MyrBattlesphere(this);
class MyrBattlesphereEffect extends OneShotEffect {
public MyrBattlesphereEffect() {
public MyrBattlesphereEffect(final MyrBattlesphereEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public MyrBattlesphereEffect copy() {return new MyrBattlesphereEffect(this);
public class MyrGalvanizer extends CardImpl {
public MyrGalvanizer (UUID ownerId) {
public MyrGalvanizer (final MyrGalvanizer card) {
public MyrGalvanizer copy() {return new MyrGalvanizer(this);
class MyrGalvanizerEffect extends OneShotEffect {
MyrGalvanizerEffect() {
MyrGalvanizerEffect(final MyrGalvanizerEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MyrGalvanizerEffect copy() {return new MyrGalvanizerEffect(this);
public class MyrPropagator extends CardImpl {
public MyrPropagator(UUID ownerId) {
public MyrPropagator(final MyrPropagator card) {
public MyrPropagator copy() {return new MyrPropagator(this);
public class MyrReservoir extends CardImpl {
public MyrReservoir(UUID ownerId) {
public MyrReservoir(final MyrReservoir card) {
public MyrReservoir copy() {return new MyrReservoir(this);
class MyrReservoirManaAbility extends BasicManaAbility {
MyrReservoirManaAbility() {
MyrReservoirManaAbility(MyrReservoirManaAbility ability) {
public MyrReservoirManaAbility copy() {return new MyrReservoirManaAbility(this);
class MyrConditionalMana extends ConditionalMana {
public MyrConditionalMana() {
class MyrManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class Myrsmith extends CardImpl {
public Myrsmith (UUID ownerId) {
public Myrsmith (final Myrsmith card) {
public Myrsmith copy() {return new Myrsmith(this);
class MyrsmithEffect extends CreateTokenEffect {
public MyrsmithEffect() {
public MyrsmithEffect(final MyrsmithEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MyrsmithEffect copy() {return new MyrsmithEffect(this);
public class NecrogenCenser extends CardImpl {
public NecrogenCenser (UUID ownerId) {
public NecrogenCenser (final NecrogenCenser card) {
public NecrogenCenser copy() {return new NecrogenCenser(this);
public class NecrogenScudder extends CardImpl {
public NecrogenScudder (UUID ownerId) {
public NecrogenScudder (final NecrogenScudder card) {
public NecrogenScudder copy() {return new NecrogenScudder(this);
public class NeurokInvisimancer extends CardImpl {
public NeurokInvisimancer (UUID ownerId) {
public NeurokInvisimancer (final NeurokInvisimancer card) {
public NeurokInvisimancer copy() {return new NeurokInvisimancer(this);
public class NeurokReplica extends CardImpl {
public NeurokReplica (UUID ownerId) {
public NeurokReplica (final NeurokReplica card) {
public NeurokReplica copy() {return new NeurokReplica(this);
public class NihilSpellbomb extends CardImpl {
public NihilSpellbomb(UUID ownerId) {
public NihilSpellbomb(final NihilSpellbomb card) {
public NihilSpellbomb copy() {return new NihilSpellbomb(this);
public class NimDeathmantle extends CardImpl {
public NimDeathmantle(UUID ownerId) {
public NimDeathmantle(final NimDeathmantle card) {
public NimDeathmantle copy() {return new NimDeathmantle(this);
class NimDeathmantleTriggeredAbility extends TriggeredAbilityImpl {
NimDeathmantleTriggeredAbility() {
NimDeathmantleTriggeredAbility(NimDeathmantleTriggeredAbility ability) {
public NimDeathmantleTriggeredAbility copy() {return new NimDeathmantleTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a nontoken creature is put into your graveyard from the battlefield, you may pay {4}. If you do, return that card to the battlefield and attach Nim Deathmantle to it.";
class NimDeathmantleEffect extends OneShotEffect {
public NimDeathmantleEffect() {
public NimDeathmantleEffect(NimDeathmantleEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public NimDeathmantleEffect copy() {return new NimDeathmantleEffect(this);
public class OgreGeargrabber extends CardImpl {
public OgreGeargrabber(UUID ownerId) {
public OgreGeargrabber(final OgreGeargrabber card) {
public OgreGeargrabber copy() {return new OgreGeargrabber(this);
class OgreGeargrabberEffect1 extends OneShotEffect {
public OgreGeargrabberEffect1() {
public OgreGeargrabberEffect1(final OgreGeargrabberEffect1 effect) {
public OgreGeargrabberEffect1 copy() {return new OgreGeargrabberEffect1(this);
public boolean apply(Game game, Ability source) {return true;return false;
class OgreGeargrabberDelayedTriggeredAbility extends DelayedTriggeredAbility {
OgreGeargrabberDelayedTriggeredAbility(UUID equipmentId) {
OgreGeargrabberDelayedTriggeredAbility(OgreGeargrabberDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LOST_CONTROL;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(controllerId) && event.getTargetId().equals(equipmentId);
public OgreGeargrabberDelayedTriggeredAbility copy() {return new OgreGeargrabberDelayedTriggeredAbility(this);
class OgreGeargrabberEffect2 extends OneShotEffect {
public OgreGeargrabberEffect2(UUID equipmentId) {
public OgreGeargrabberEffect2(final OgreGeargrabberEffect2 effect) {
public OgreGeargrabberEffect2 copy() {return new OgreGeargrabberEffect2(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OriginSpellbomb extends CardImpl {
public OriginSpellbomb (UUID ownerId) {
public OriginSpellbomb (final OriginSpellbomb card) {
public OriginSpellbomb copy() {return new OriginSpellbomb(this);
public class OxiddaDaredevil extends CardImpl {
public OxiddaDaredevil (UUID ownerId) {
public OxiddaDaredevil (final OxiddaDaredevil card) {
public OxiddaDaredevil copy() {return new OxiddaDaredevil(this);
public class OxiddaScrapmelter extends CardImpl {
public OxiddaScrapmelter (UUID ownerId) {
public OxiddaScrapmelter (final OxiddaScrapmelter card) {
public OxiddaScrapmelter copy() {return new OxiddaScrapmelter(this);
public class PainfulQuandary extends CardImpl {
public PainfulQuandary(UUID ownerId) {
public PainfulQuandary(final PainfulQuandary card) {
public PainfulQuandary copy() {return new PainfulQuandary(this);
class PainfulQuandryEffect extends OneShotEffect {
public PainfulQuandryEffect() {
public PainfulQuandryEffect(final PainfulQuandryEffect effect) {
public PainfulQuandryEffect copy() {return new PainfulQuandryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Painsmith extends CardImpl {
public Painsmith (UUID ownerId) {
public Painsmith (final Painsmith card) {
public Painsmith copy() {return new Painsmith(this);
public class PalladiumMyr extends CardImpl {
public PalladiumMyr(UUID ownerId) {
public PalladiumMyr(final PalladiumMyr card) {
public PalladiumMyr copy() {return new PalladiumMyr(this);
class PalladiumMyrAbility extends BasicManaAbility {
public PalladiumMyrAbility() {
public PalladiumMyrAbility(final PalladiumMyrAbility ability) {
public PalladiumMyrAbility copy() {return new PalladiumMyrAbility(this);
public class PanicSpellbomb extends CardImpl {
public PanicSpellbomb(UUID ownerId) {
public PanicSpellbomb(final PanicSpellbomb card) {
public PanicSpellbomb copy() {return new PanicSpellbomb(this);
public class PerilousMyr extends CardImpl {
public PerilousMyr (UUID ownerId) {
public PerilousMyr (final PerilousMyr card) {
public PerilousMyr copy() {return new PerilousMyr(this);
public class PlagueStinger extends CardImpl {
public PlagueStinger (UUID ownerId) {
public PlagueStinger (final PlagueStinger card) {
public PlagueStinger copy() {return new PlagueStinger(this);
public class PlatedSeastrider extends CardImpl {
public PlatedSeastrider (UUID ownerId) {
public PlatedSeastrider (final PlatedSeastrider card) {
public PlatedSeastrider copy() {return new PlatedSeastrider(this);
public class PlatinumEmperion extends CardImpl {
public PlatinumEmperion(UUID ownerId) {
public PlatinumEmperion(final PlatinumEmperion card) {
public PlatinumEmperion copy() {return new PlatinumEmperion(this);
public class PrecursorGolem extends CardImpl {
public PrecursorGolem(UUID ownerId) {
public PrecursorGolem(final PrecursorGolem card) {
public PrecursorGolem copy() {return new PrecursorGolem(this);
class PrecursorGolemCopyTriggeredAbility extends TriggeredAbilityImpl {
PrecursorGolemCopyTriggeredAbility() {
PrecursorGolemCopyTriggeredAbility(final PrecursorGolemCopyTriggeredAbility ability) {
public PrecursorGolemCopyTriggeredAbility copy() {return new PrecursorGolemCopyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return checkSpell(spell, game);
private boolean checkSpell(Spell spell, Game game) {return false;return false;return true;return false;
public String getRule() {return "Whenever a player casts an instant or sorcery spell that targets only a single Golem, that player copies that spell for each other Golem that spell could target. Each copy targets a different one of those Golems";
class PrecursorGolemCopySpellEffect extends CopySpellForEachItCouldTargetEffect<Permanent> {
public PrecursorGolemCopySpellEffect() {
public PrecursorGolemCopySpellEffect(PrecursorGolemCopySpellEffect effect) {
private PrecursorGolemCopySpellEffect(FilterInPlay<Permanent> filter) {
protected Spell getSpell(Game game, Ability source) {return (Spell) getValue("triggeringSpell");
protected boolean changeTarget(Target target, Game game, Ability source) {return true;
public PrecursorGolemCopySpellEffect copy() {return new PrecursorGolemCopySpellEffect(this);
public class PrototypePortal extends CardImpl {
public PrototypePortal(UUID ownerId) {
public PrototypePortal(final PrototypePortal card) {
public void adjustCosts(Ability ability, Game game) {
public PrototypePortal copy() {return new PrototypePortal(this);
class PrototypePortalEffect extends OneShotEffect {
public PrototypePortalEffect() {
public PrototypePortalEffect(PrototypePortalEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;
public PrototypePortalEffect copy() {return new PrototypePortalEffect(this);
class PrototypePortalCreateTokenEffect extends OneShotEffect {
public PrototypePortalCreateTokenEffect() {
public PrototypePortalCreateTokenEffect(final PrototypePortalCreateTokenEffect effect) {
public PrototypePortalCreateTokenEffect copy() {return new PrototypePortalCreateTokenEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class QuicksilverGargantuan extends CardImpl {
public QuicksilverGargantuan(UUID ownerId) {
public QuicksilverGargantuan(final QuicksilverGargantuan card) {
public QuicksilverGargantuan copy() {return new QuicksilverGargantuan(this);
class QuicksilverGargantuanApplyToPermanent extends ApplyToPermanent {
public Boolean apply(Game game, Permanent permanent) {return true;
public Boolean apply(Game game, MageObject mageObject) {return true;
public class RatchetBomb extends CardImpl {
public RatchetBomb (UUID ownerId) {
public RatchetBomb (final RatchetBomb card) {
public RatchetBomb copy() {return new RatchetBomb(this);
class RatchetBombEffect extends OneShotEffect {
public RatchetBombEffect() {
public RatchetBombEffect(final RatchetBombEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public RatchetBombEffect copy() {return new RatchetBombEffect(this);
public class RazorfieldThresher extends CardImpl {
public RazorfieldThresher (UUID ownerId) {
public RazorfieldThresher (final RazorfieldThresher card) {
public RazorfieldThresher copy() {return new RazorfieldThresher(this);return new RazorHippogriff(this);return new RazorHippogriffGainLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class RazorvergeThicket extends CardImpl {
public RazorvergeThicket(UUID ownerId) {
public RazorvergeThicket(final RazorvergeThicket card) {
public RazorvergeThicket copy() {return new RazorvergeThicket(this);
public class RelicPutrescence extends CardImpl {
public RelicPutrescence (UUID ownerId) {
public RelicPutrescence (final RelicPutrescence card) {
public RelicPutrescence copy() {return new RelicPutrescence(this);
class RelicPutrescenceAbility extends TriggeredAbilityImpl {
public RelicPutrescenceAbility() {
public RelicPutrescenceAbility(final RelicPutrescenceAbility ability) {
public RelicPutrescenceAbility copy() {return new RelicPutrescenceAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever enchanted artifact becomes tapped, its controller gets a poison counter.";
public class RevokeExistence extends CardImpl {
public RevokeExistence(UUID ownerId) {
public RevokeExistence(final RevokeExistence card) {
public RevokeExistence copy() {return new RevokeExistence(this);
public class Riddlesmith extends CardImpl {
public Riddlesmith (UUID ownerId) {
public Riddlesmith (final Riddlesmith card) {
public Riddlesmith copy() {return new Riddlesmith(this);
public class RustedRelic extends CardImpl {
public RustedRelic (UUID ownerId) {
public RustedRelic (final RustedRelic card) {
public RustedRelic copy() {return new RustedRelic(this);
class RustedRelicToken extends Token {
public RustedRelicToken() {
public class RustTick extends CardImpl {
public RustTick(UUID ownerId) {
public RustTick(final RustTick card) {
public RustTick copy() {return new RustTick(this);
public class SaberclawGolem extends CardImpl {
public SaberclawGolem (UUID ownerId) {
public SaberclawGolem (final SaberclawGolem card) {
public SaberclawGolem copy() {return new SaberclawGolem(this);
public class SalvageScout extends CardImpl {
public SalvageScout(UUID ownerId) {
public SalvageScout(final SalvageScout card) {
public SalvageScout copy() {return new SalvageScout(this);
public class ScoriaElemental extends CardImpl {
public ScoriaElemental (UUID ownerId) {
public ScoriaElemental (final ScoriaElemental card) {
public ScoriaElemental copy() {return new ScoriaElemental(this);
public class ScrapdiverSerpent extends CardImpl {
public ScrapdiverSerpent (UUID ownerId) {
public ScrapdiverSerpent (final ScrapdiverSerpent card) {
public ScrapdiverSerpent copy() {return new ScrapdiverSerpent(this);
public class ScreechingSilcaw extends CardImpl {
public ScreechingSilcaw(UUID ownerId) {
public ScreechingSilcaw(final ScreechingSilcaw card) {
public ScreechingSilcaw copy() {return new ScreechingSilcaw(this);
public class SeachromeCoast extends CardImpl {
public SeachromeCoast(UUID ownerId) {
public SeachromeCoast(final SeachromeCoast card) {
public SeachromeCoast copy() {return new SeachromeCoast(this);
public class SeizeTheInitiative extends CardImpl {
public SeizeTheInitiative (UUID ownerId) {
public SeizeTheInitiative (final SeizeTheInitiative card) {
public SeizeTheInitiative copy() {return new SeizeTheInitiative(this);
public class SemblanceAnvil extends CardImpl {
public SemblanceAnvil(UUID ownerId) {
public SemblanceAnvil(final SemblanceAnvil card) {
public SemblanceAnvil copy() {return new SemblanceAnvil(this);
class SemblanceAnvilEffect extends OneShotEffect {
public SemblanceAnvilEffect() {
public SemblanceAnvilEffect(SemblanceAnvilEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;
public SemblanceAnvilEffect copy() {return new SemblanceAnvilEffect(this);
SemblanceAnvilCostReductionEffect() {
SemblanceAnvilCostReductionEffect(SemblanceAnvilCostReductionEffect effect) {return true;return true;return false;
public SemblanceAnvilCostReductionEffect copy() {return new SemblanceAnvilCostReductionEffect(this);
public class SkithiryxTheBlightDragon extends CardImpl {
public SkithiryxTheBlightDragon (UUID ownerId) {
public SkithiryxTheBlightDragon (final SkithiryxTheBlightDragon card) {
public SkithiryxTheBlightDragon copy() {return new SkithiryxTheBlightDragon(this);
public class SkyEelSchool extends CardImpl {
public SkyEelSchool (UUID ownerId) {
public SkyEelSchool (final SkyEelSchool card) {
public SkyEelSchool copy() {return new SkyEelSchool(this);
public class SliceinTwain extends CardImpl {
public SliceinTwain (UUID ownerId) {
public SliceinTwain (final SliceinTwain card) {
public SliceinTwain copy() {return new SliceinTwain(this);
public class SnapsailGlider extends CardImpl {
public SnapsailGlider (UUID ownerId) {
public SnapsailGlider (final SnapsailGlider card) {
public SnapsailGlider copy() {return new SnapsailGlider(this);
public class Soliton extends CardImpl {
public Soliton (UUID ownerId) {
public Soliton (final Soliton card) {
public Soliton copy() {return new Soliton(this);
public class SoulParry extends CardImpl {
public SoulParry (UUID ownerId) {
public SoulParry (final SoulParry card) {
public SoulParry copy() {return new SoulParry(this);
public class SpikeshotElder extends CardImpl {
public SpikeshotElder (UUID ownerId) {
public SpikeshotElder (final SpikeshotElder card) {
public SpikeshotElder copy() {return new SpikeshotElder(this);
class SpikeshotElderEffect extends OneShotEffect {
public SpikeshotElderEffect() {
public SpikeshotElderEffect(final SpikeshotElderEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return true;return false;
public SpikeshotElderEffect copy() {return new SpikeshotElderEffect(this);
public class SteadyProgress extends CardImpl {
public SteadyProgress (UUID ownerId) {
public SteadyProgress (final SteadyProgress card) {
public SteadyProgress copy() {return new SteadyProgress(this);
public class SteelHellkite extends CardImpl {
public SteelHellkite(UUID ownerId) {
public SteelHellkite(final SteelHellkite card) {
public SteelHellkite copy() {return new SteelHellkite(this);
class SteelHellkiteDestroyEffect extends OneShotEffect {
public SteelHellkiteDestroyEffect() {
public SteelHellkiteDestroyEffect(final SteelHellkiteDestroyEffect effect) {
public SteelHellkiteDestroyEffect copy() {return new SteelHellkiteDestroyEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class StoicRebuttal extends CardImpl {
public StoicRebuttal(UUID ownerId) {
public StoicRebuttal(final StoicRebuttal card) {
public StoicRebuttal copy() {return new StoicRebuttal(this);
public class StrataScythe extends CardImpl {
public StrataScythe (UUID ownerId) {
public StrataScythe (final StrataScythe card) {
public StrataScythe copy() {return new StrataScythe(this);
class StrataScytheImprintEffect extends OneShotEffect {
StrataScytheImprintEffect() {
StrataScytheImprintEffect(final StrataScytheImprintEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public StrataScytheImprintEffect copy() {return new StrataScytheImprintEffect(this);
class SameNameAsExiledCountValue implements DynamicValue {return instance;
private SameNameAsExiledCountValue() {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return value;
public DynamicValue copy() {return instance;
public String toString() {return "1";
public String getMessage() {return "land on the battlefield with the same name as the exiled card";
public class StriderHarness extends CardImpl {
public StriderHarness (UUID ownerId) {
public StriderHarness (final StriderHarness card) {
public StriderHarness copy() {return new StriderHarness(this);
public class SunblastAngel extends CardImpl {
public SunblastAngel (UUID ownerId) {
public SunblastAngel (final SunblastAngel card) {
public SunblastAngel copy() {return new SunblastAngel(this);
public class SunspearShikari extends CardImpl {
public SunspearShikari(UUID ownerId) {
public SunspearShikari(final SunspearShikari card) {
public SunspearShikari copy() {return new SunspearShikari(this);
public class SwordOfBodyAndMind extends CardImpl {
public SwordOfBodyAndMind (UUID ownerId) {
public SwordOfBodyAndMind (final SwordOfBodyAndMind card) {
public SwordOfBodyAndMind copy() {return new SwordOfBodyAndMind(this);
class SwordOfBodyAndMindAbility extends TriggeredAbilityImpl {
public SwordOfBodyAndMindAbility() {
public SwordOfBodyAndMindAbility(final SwordOfBodyAndMindAbility ability) {
public SwordOfBodyAndMindAbility copy() {return new SwordOfBodyAndMindAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever equipped creature deals combat damage to a player, you put a 2/2 green Wolf creature token onto the battlefield and that player puts the top ten cards of his or her library into his or her graveyard.";return new SylvokLifestaff(this);
public class SylvokReplica extends CardImpl {
public SylvokReplica (UUID ownerId) {
public SylvokReplica (final SylvokReplica card) {
public SylvokReplica copy() {return new SylvokReplica(this);
public class TaintedStrike extends CardImpl {
public TaintedStrike (UUID ownerId) {
public TaintedStrike (final TaintedStrike card) {
public TaintedStrike copy() {return new TaintedStrike(this);
public class TelJiladFallen extends CardImpl {
public TelJiladFallen (UUID ownerId) {
public TelJiladFallen (final TelJiladFallen card) {
public TelJiladFallen copy() {return new TelJiladFallen(this);
public class TemperedSteel extends CardImpl {
public TemperedSteel (UUID ownerId) {
public TemperedSteel (final TemperedSteel card) {
public TemperedSteel copy() {return new TemperedSteel(this);
public class ThroneofGeth extends CardImpl {
public ThroneofGeth (UUID ownerId) {
public ThroneofGeth (final ThroneofGeth card) {
public ThroneofGeth copy() {return new ThroneofGeth(this);
public class Thrummingbird extends CardImpl {
public Thrummingbird(UUID ownerId) {
public Thrummingbird(final Thrummingbird card) {
public Thrummingbird copy() {return new Thrummingbird(this);
public class TowerOfCalamities extends CardImpl {
public TowerOfCalamities (UUID ownerId) {
public TowerOfCalamities (final TowerOfCalamities card) {
public TowerOfCalamities copy() {return new TowerOfCalamities(this);
public class TrigonOfCorruption extends CardImpl {
public TrigonOfCorruption (UUID ownerId) {
public TrigonOfCorruption (final TrigonOfCorruption card) {
public TrigonOfCorruption copy() {return new TrigonOfCorruption(this);
public class TrigonOfInfestation extends CardImpl {
public TrigonOfInfestation(UUID ownerId) {
public TrigonOfInfestation(final TrigonOfInfestation card) {
public TrigonOfInfestation copy() {return new TrigonOfInfestation(this);
public class TrigonOfMending extends CardImpl {
public TrigonOfMending(UUID ownerId) {
public TrigonOfMending(final TrigonOfMending card) {
public TrigonOfMending copy() {return new TrigonOfMending(this);
public class TrigonOfRage extends CardImpl {
public TrigonOfRage(UUID ownerId) {
public TrigonOfRage(final TrigonOfRage card) {
public TrigonOfRage copy() {return new TrigonOfRage(this);
public class TrigonOfThought extends CardImpl {
public TrigonOfThought(UUID ownerId) {
public TrigonOfThought(final TrigonOfThought card) {
public TrigonOfThought copy() {return new TrigonOfThought(this);
public class TrinketMage extends CardImpl {
public TrinketMage(UUID ownerId) {
public TrinketMage(final TrinketMage card) {
public TrinketMage copy() {return new TrinketMage(this);
public class TrueConviction extends CardImpl {
public TrueConviction (UUID ownerId) {
public TrueConviction (final TrueConviction card) {
public TrueConviction copy() {return new TrueConviction(this);
public class TumbleMagnet extends CardImpl {
public TumbleMagnet (UUID ownerId) {
public TumbleMagnet (final TumbleMagnet card) {
public TumbleMagnet copy() {return new TumbleMagnet(this);
public class TunnelIgnus extends CardImpl {
public TunnelIgnus(UUID ownerId) {
public TunnelIgnus(final TunnelIgnus card) {
public TunnelIgnus copy() {return new TunnelIgnus(this);
class TunnelIgnusWatcher extends Watcher {
public TunnelIgnusWatcher() {
public TunnelIgnusWatcher(final TunnelIgnusWatcher watcher) {
public TunnelIgnusWatcher copy() {return new TunnelIgnusWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
class TunnelIgnusTriggeredAbility extends TriggeredAbilityImpl {
TunnelIgnusTriggeredAbility() {
TunnelIgnusTriggeredAbility(final TunnelIgnusTriggeredAbility ability) {
public TunnelIgnusTriggeredAbility copy() {return new TunnelIgnusTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a land enters the battlefield under an opponent's control, if that player had another land enter the battlefield under his or her control this turn, {this} deals 3 damage to that player.";
public class TurnAside extends CardImpl {
public TurnAside(UUID ownerId) {
public TurnAside(final TurnAside card) {
public TurnAside copy() {return new TurnAside(this);
public class TurnToSlag extends CardImpl {
public TurnToSlag (UUID ownerId) {
public TurnToSlag (final TurnToSlag card) {
public TurnToSlag copy() {return new TurnToSlag(this);
class TurnToSlagEffect extends OneShotEffect {
public TurnToSlagEffect() {
public TurnToSlagEffect(final TurnToSlagEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public TurnToSlagEffect copy() {return new TurnToSlagEffect(this);
public class TwistedImage extends CardImpl {
public TwistedImage (UUID ownerId) {
public TwistedImage (final TwistedImage card) {
public TwistedImage copy() {return new TwistedImage(this);
public class UntamedMight extends CardImpl {
public UntamedMight(UUID ownerId) {
public UntamedMight(final UntamedMight card) {
public UntamedMight copy() {return new UntamedMight(this);
public class VedalkenCertarch extends CardImpl {
public VedalkenCertarch (UUID ownerId) {
public VedalkenCertarch (final VedalkenCertarch card) {
public VedalkenCertarch copy() {return new VedalkenCertarch(this);
public class VensersJournal extends CardImpl {
public VensersJournal(UUID ownerId) {
public VensersJournal(final VensersJournal card) {
public VensersJournal copy() {return new VensersJournal(this);
public class VenserTheSojourner extends CardImpl {
public VenserTheSojourner(UUID ownerId) {
public VenserTheSojourner(final VenserTheSojourner card) {
public VenserTheSojourner copy() {return new VenserTheSojourner(this);
class VenserTheSojournerEffect extends OneShotEffect {
VenserTheSojournerEffect() {
VenserTheSojournerEffect(VenserTheSojournerEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public VenserTheSojournerEffect copy() {return new VenserTheSojournerEffect(this);
class VenserTheSojournerEmblem extends Emblem {
public VenserTheSojournerEmblem() {
class VenserTheSojournerSpellCastTriggeredAbility extends TriggeredAbilityImpl {
public VenserTheSojournerSpellCastTriggeredAbility(Effect effect, boolean optional) {
public VenserTheSojournerSpellCastTriggeredAbility(final VenserTheSojournerSpellCastTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast a spell, exile target permanent.";
public VenserTheSojournerSpellCastTriggeredAbility copy() {return new VenserTheSojournerSpellCastTriggeredAbility(this);
public class VigilForTheLost extends CardImpl {
public VigilForTheLost (UUID ownerId) {
public VigilForTheLost (final VigilForTheLost card) {
public VigilForTheLost copy() {return new VigilForTheLost(this);
class VigilForTheLostTriggeredAbility extends TriggeredAbilityImpl {
VigilForTheLostTriggeredAbility() {
VigilForTheLostTriggeredAbility(final VigilForTheLostTriggeredAbility ability) {
public VigilForTheLostTriggeredAbility copy() {return new VigilForTheLostTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control is put into a graveyard from the battlefield, you may pay {X}. If you do, you gain X life.";
class VigilForTheLostEffect extends OneShotEffect {
VigilForTheLostEffect() {
VigilForTheLostEffect(final VigilForTheLostEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public VigilForTheLostEffect copy() {return new VigilForTheLostEffect(this);
public class ViridianRevel extends CardImpl {
public ViridianRevel (UUID ownerId) {
public ViridianRevel (final ViridianRevel card) {
public ViridianRevel copy() {return new ViridianRevel(this);
class ViridianRevelTriggeredAbility extends TriggeredAbilityImpl {
ViridianRevelTriggeredAbility() {
ViridianRevelTriggeredAbility(final ViridianRevelTriggeredAbility ability) {
public ViridianRevelTriggeredAbility copy() {return new ViridianRevelTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an artifact is put into an opponent's graveyard from the battlefield, you may draw a card.";
public class VolitionReins extends CardImpl {
public VolitionReins(UUID ownerId) {
public VolitionReins(final VolitionReins card) {
public VolitionReins copy() {return new VolitionReins(this);
public class UntapVolitionReinsEffect extends OneShotEffect {
public UntapVolitionReinsEffect() {
public UntapVolitionReinsEffect(final UntapVolitionReinsEffect effect) {
public UntapVolitionReinsEffect copy() {return new UntapVolitionReinsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VulshokHeartstoker extends CardImpl {
public VulshokHeartstoker (UUID ownerId) {
public VulshokHeartstoker (final VulshokHeartstoker card) {
public VulshokHeartstoker copy() {return new VulshokHeartstoker(this);
public class VulshokReplica extends CardImpl {
public VulshokReplica (UUID ownerId) {
public VulshokReplica (final VulshokReplica card) {
public VulshokReplica copy() {return new VulshokReplica(this);
public class WallOfTanglecord extends CardImpl {
public WallOfTanglecord (UUID ownerId) {
public WallOfTanglecord (final WallOfTanglecord card) {
public WallOfTanglecord copy() {return new WallOfTanglecord(this);
public class WhitesunsPassage extends CardImpl {
public WhitesunsPassage (UUID ownerId) {
public WhitesunsPassage (final WhitesunsPassage card) {
public WhitesunsPassage copy() {return new WhitesunsPassage(this);
public class WingPuncture extends CardImpl {
public WingPuncture(UUID ownerId) {
public WingPuncture(final WingPuncture card) {
public WingPuncture copy() {return new WingPuncture(this);
class WingPunctureEffect extends OneShotEffect {
public WingPunctureEffect() {
public WingPunctureEffect(final WingPunctureEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public WingPunctureEffect copy() {return new WingPunctureEffect(this);
public class WithstandDeath extends CardImpl {
public WithstandDeath (UUID ownerId) {
public WithstandDeath (final WithstandDeath card) {
public WithstandDeath copy() {return new WithstandDeath(this);
public class WurmcoilEngine extends CardImpl {
public WurmcoilEngine (UUID ownerId) {
public WurmcoilEngine (final WurmcoilEngine card) {
public WurmcoilEngine copy() {return new WurmcoilEngine(this);
class Wurm1Token extends Token {
public Wurm1Token(String setCode) {
class Wurm2Token extends Token {
public Wurm2Token(String setCode) {
public class AcceleratedMutation extends CardImpl {
public AcceleratedMutation(UUID ownerId) {
public AcceleratedMutation(final AcceleratedMutation card) {
public AcceleratedMutation copy() {return new AcceleratedMutation(this);
public class AncientOoze extends CardImpl {
public AncientOoze(UUID ownerId) {
public AncientOoze(final AncientOoze card) {
public AncientOoze copy() {return new AncientOoze(this);
class AncientOozePowerToughnessValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return value;
public DynamicValue copy() {return new AncientOozePowerToughnessValue();
public String toString() {return "X";
public String getMessage() {return "total converted mana cost of other creatures you control";
public class AphettoRunecaster extends CardImpl {
public AphettoRunecaster(UUID ownerId) {
public AphettoRunecaster(final AphettoRunecaster card) {
public AphettoRunecaster copy() {return new AphettoRunecaster(this);
public class ArkOfBlight extends CardImpl {
public ArkOfBlight(UUID ownerId) {
public ArkOfBlight(final ArkOfBlight card) {
public ArkOfBlight copy() {return new ArkOfBlight(this);
public class AstralSteel extends CardImpl {
public AstralSteel(UUID ownerId) {
public AstralSteel(final AstralSteel card) {
public AstralSteel copy() {return new AstralSteel(this);
public class BrainFreeze extends CardImpl {
public BrainFreeze(UUID ownerId) {
public BrainFreeze(final BrainFreeze card) {
public BrainFreeze copy() {return new BrainFreeze(this);
public class BreakAsunder extends CardImpl {
public BreakAsunder(UUID ownerId) {
public BreakAsunder(final BreakAsunder card) {
public BreakAsunder copy() {return new BreakAsunder(this);
public class CabalConditioning extends CardImpl {
public CabalConditioning(UUID ownerId) {
public CabalConditioning(final CabalConditioning card) {
public CabalConditioning copy() {return new CabalConditioning(this);
public class Carbonize extends CardImpl {
public Carbonize(UUID ownerId) {
public Carbonize(final Carbonize card) {
public Carbonize copy() {return new Carbonize(this);
public class CarrionFeeder extends CardImpl {
public CarrionFeeder(UUID ownerId) {
public CarrionFeeder(final CarrionFeeder card) {
public CarrionFeeder copy() {return new CarrionFeeder(this);
public class ChartoothCougar extends CardImpl {
public ChartoothCougar(UUID ownerId) {
public ChartoothCougar(final ChartoothCougar card) {
public ChartoothCougar copy() {return new ChartoothCougar(this);
public class CoastWatcher extends CardImpl {
public CoastWatcher(UUID ownerId) {
public CoastWatcher(final CoastWatcher card) {
public CoastWatcher copy() {return new CoastWatcher(this);
public class ConsumptiveGoo extends CardImpl {
public ConsumptiveGoo(UUID ownerId) {
public ConsumptiveGoo(final ConsumptiveGoo card) {
public ConsumptiveGoo copy() {return new ConsumptiveGoo(this);
public class DaruWarchief extends CardImpl {
public DaruWarchief(UUID ownerId) {
public DaruWarchief(final DaruWarchief card) {
public DaruWarchief copy() {return new DaruWarchief(this);
public class DayOfTheDragons extends CardImpl {
public DayOfTheDragons(UUID ownerId) {
public DayOfTheDragons(final DayOfTheDragons card) {
public DayOfTheDragons copy() {return new DayOfTheDragons(this);
class DayOfTheDragonsEntersEffect extends OneShotEffect {
public DayOfTheDragonsEntersEffect() {
public DayOfTheDragonsEntersEffect(final DayOfTheDragonsEntersEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DayOfTheDragonsEntersEffect copy() {return new DayOfTheDragonsEntersEffect(this);
class DayOfTheDragonsLeavesEffect extends OneShotEffect {
public DayOfTheDragonsLeavesEffect() {staticText = "sacrifice all Dragons you control. Then return the exiled cards to the battlefield under your control";
public DayOfTheDragonsLeavesEffect(final DayOfTheDragonsLeavesEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DayOfTheDragonsLeavesEffect copy() {return new DayOfTheDragonsLeavesEffect(this);
public class DeathsHeadBuzzard extends CardImpl {
public DeathsHeadBuzzard(UUID ownerId) {
public DeathsHeadBuzzard(final DeathsHeadBuzzard card) {
public DeathsHeadBuzzard copy() {return new DeathsHeadBuzzard(this);
public class DecreeOfAnnihilation extends CardImpl {
public DecreeOfAnnihilation(UUID ownerId) {
public DecreeOfAnnihilation(final DecreeOfAnnihilation card) {
public DecreeOfAnnihilation copy() {return new DecreeOfAnnihilation(this);
class DecreeOfAnnihilationEffect extends OneShotEffect {
public DecreeOfAnnihilationEffect() {
public DecreeOfAnnihilationEffect(final DecreeOfAnnihilationEffect effect) {
public DecreeOfAnnihilationEffect copy() {return new DecreeOfAnnihilationEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class DecreeOfSavagery extends CardImpl {
public DecreeOfSavagery(UUID ownerId) {
public DecreeOfSavagery(final DecreeOfSavagery card) {
public DecreeOfSavagery copy() {return new DecreeOfSavagery(this);
public class DecreeOfSilence extends CardImpl {
public DecreeOfSilence(UUID ownerId) {
public DecreeOfSilence(final DecreeOfSilence card) {
public DecreeOfSilence copy() {return new DecreeOfSilence(this);
public class DispersalShield extends CardImpl {
public DispersalShield(UUID ownerId) {
public DispersalShield(final DispersalShield card) {
public DispersalShield copy() {return new DispersalShield(this);
class DispersalShieldEffect extends OneShotEffect {
public DispersalShieldEffect() {
public DispersalShieldEffect(DispersalShieldEffect effect) {
public Effect copy() {return new DispersalShieldEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(source.getFirstTarget(), source.getSourceId(), game);return false;
public class DragonMage extends CardImpl {
public DragonMage(UUID ownerId) {
public DragonMage(final DragonMage card) {
public DragonMage copy() {return new DragonMage(this);
public class DragonspeakerShaman extends CardImpl {
public DragonspeakerShaman(UUID ownerId) {
public DragonspeakerShaman(final DragonspeakerShaman card) {
public DragonspeakerShaman copy() {return new DragonspeakerShaman(this);
public class Dragonstalker extends CardImpl {
public Dragonstalker(UUID ownerId) {
public Dragonstalker(final Dragonstalker card) {
public Dragonstalker copy() {return new Dragonstalker(this);
public class ElvishAberration extends CardImpl {
public ElvishAberration(UUID ownerId) {
public ElvishAberration(final ElvishAberration card) {
public ElvishAberration copy() {return new ElvishAberration(this);
public class EternalDragon extends CardImpl {
public EternalDragon(UUID ownerId) {
public EternalDragon(final EternalDragon card) {
public EternalDragon copy() {return new EternalDragon(this);
public class ExtraArms extends CardImpl {
public ExtraArms(UUID ownerId) {
public ExtraArms(final ExtraArms card) {
public ExtraArms copy() {return new ExtraArms(this);
public class FatalMutation extends CardImpl {
public FatalMutation(UUID ownerId) {
public FatalMutation(final FatalMutation card) {
public FatalMutation copy() {return new FatalMutation(this);
class FatalMutationAbility extends TriggeredAbilityImpl {
public FatalMutationAbility(Effect effect) {
public FatalMutationAbility(final FatalMutationAbility ability) {
public FatalMutationAbility copy() {return new FatalMutationAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TURNEDFACEUP;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever enchanted creature is turned face up, " + super.getRule();
public class FinalPunishment extends CardImpl {
public FinalPunishment(UUID ownerId) {
public FinalPunishment(final FinalPunishment card) {
public FinalPunishment copy() {return new FinalPunishment(this);
class FinalPunishmentAmount implements DynamicValue {
public int calculate(Game game, Ability source, Effect effect) {return watcher.getAmountOfDamageReceivedThisTurn(source.getFirstTarget());return 0;
public FinalPunishmentAmount copy() {return new FinalPunishmentAmount();
public String getMessage() {return "the damage already dealt to him or her this turn";
public class ForgottenAncient extends CardImpl {
public ForgottenAncient(UUID ownerId) {
public ForgottenAncient(final ForgottenAncient card) {
public ForgottenAncient copy() {return new ForgottenAncient(this);
class CounterMovement {
class ForgottenAncientEffect extends OneShotEffect {
public ForgottenAncientEffect() {
public ForgottenAncientEffect(final ForgottenAncientEffect effect) {
public ForgottenAncientEffect copy() {return new ForgottenAncientEffect(this);
public boolean apply(Game game, Ability source) {return false;
{return true;
public class FormOfTheDragon extends CardImpl {
public FormOfTheDragon(UUID ownerId) {
public FormOfTheDragon(final FormOfTheDragon card) {
public FormOfTheDragon copy() {return new FormOfTheDragon(this);
class FormOfTheDragonEffect extends OneShotEffect {
FormOfTheDragonEffect() {
FormOfTheDragonEffect(final FormOfTheDragonEffect effect) {
public FormOfTheDragonEffect copy() {return new FormOfTheDragonEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GoblinWarchief extends CardImpl {
public GoblinWarchief(UUID ownerId) {
public GoblinWarchief(final GoblinWarchief card) {
public GoblinWarchief copy() {return new GoblinWarchief(this);
public class GoblinWarStrike extends CardImpl {
public GoblinWarStrike(UUID ownerId) {
public GoblinWarStrike(final GoblinWarStrike card) {
public GoblinWarStrike copy() {return new GoblinWarStrike(this);
public class HinderingTouch extends CardImpl {
public HinderingTouch(UUID ownerId) {
public HinderingTouch(final HinderingTouch card) {
public HinderingTouch copy() {return new HinderingTouch(this);
public class HuntingPack extends CardImpl {
public HuntingPack(UUID ownerId) {
public HuntingPack(final HuntingPack card) {
public HuntingPack copy() {return new HuntingPack(this);
public class KaronaFalseGod extends CardImpl {
public KaronaFalseGod(UUID ownerId) {
public KaronaFalseGod(final KaronaFalseGod card) {
public KaronaFalseGod copy() {return new KaronaFalseGod(this);
class KaronaFalseGodUntapGetControlEffect extends OneShotEffect {
public KaronaFalseGodUntapGetControlEffect() {
public KaronaFalseGodUntapGetControlEffect(final KaronaFalseGodUntapGetControlEffect effect) {
public KaronaFalseGodUntapGetControlEffect copy() {return new KaronaFalseGodUntapGetControlEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class KaronaFalseGodEffect extends OneShotEffect {
public KaronaFalseGodEffect() {
public KaronaFalseGodEffect(final KaronaFalseGodEffect effect) {
public KaronaFalseGodEffect copy() {return new KaronaFalseGodEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class KrosanWarchief extends CardImpl {
public KrosanWarchief(UUID ownerId) {
public KrosanWarchief(final KrosanWarchief card) {
public KrosanWarchief copy() {return new KrosanWarchief(this);return new Kurgadon(this);
public class LongTermPlans extends CardImpl {
public LongTermPlans(UUID ownerId) {
public LongTermPlans(final LongTermPlans card) {
public LongTermPlans copy() {return new LongTermPlans(this);
class LongTermPlansEffect extends OneShotEffect {
LongTermPlansEffect() {
LongTermPlansEffect(final LongTermPlansEffect effect) {
public LongTermPlansEffect copy() {return new LongTermPlansEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MercurialKite extends CardImpl {
public MercurialKite(UUID ownerId) {
public MercurialKite(final MercurialKite card) {
public MercurialKite copy() {return new MercurialKite(this);
public class MischievousQuanar extends CardImpl {
public MischievousQuanar(UUID ownerId) {
public MischievousQuanar(final MischievousQuanar card) {
public MischievousQuanar copy() {return new MischievousQuanar(this);
public class MisguidedRage extends CardImpl {
public MisguidedRage(UUID ownerId) {
public MisguidedRage(final MisguidedRage card) {
public MisguidedRage copy() {return new MisguidedRage(this);
public class PemminsAura extends CardImpl {
public PemminsAura(UUID ownerId) {
public PemminsAura(final PemminsAura card) {
public PemminsAura copy() {return new PemminsAura(this);
class PemminsAuraBoostEnchantedEffect extends OneShotEffect {
public PemminsAuraBoostEnchantedEffect() {
public PemminsAuraBoostEnchantedEffect(final PemminsAuraBoostEnchantedEffect effect) {
public PemminsAuraBoostEnchantedEffect copy() {return new PemminsAuraBoostEnchantedEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class PutridRaptor extends CardImpl {
public PutridRaptor(UUID ownerId) {
public PutridRaptor(final PutridRaptor card) {
public PutridRaptor copy() {return new PutridRaptor(this);return new PyrostaticPillar(this);return new PyrostaticPillarTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a spell with converted mana cost 3 or less, {this} deals 2 damage to that player.";
public class RavenGuildMaster extends CardImpl {
public RavenGuildMaster(UUID ownerId) {
public RavenGuildMaster(final RavenGuildMaster card) {
public RavenGuildMaster copy() {return new RavenGuildMaster(this);
public class ReapingTheGraves extends CardImpl {
public ReapingTheGraves(UUID ownerId) {
public ReapingTheGraves(final ReapingTheGraves card) {
public ReapingTheGraves copy() {return new ReapingTheGraves(this);
public class Recuperate extends CardImpl {
public Recuperate(UUID ownerId) {
public Recuperate(final Recuperate card) {
public Recuperate copy() {return new Recuperate(this);
public class RewardTheFaithful extends CardImpl {
public RewardTheFaithful(UUID ownerId) {
public RewardTheFaithful(final RewardTheFaithful card) {
public RewardTheFaithful copy() {return new RewardTheFaithful(this);
public class RootElemental extends CardImpl {
public RootElemental(UUID ownerId) {
public RootElemental(final RootElemental card) {
public RootElemental copy() {return new RootElemental(this);
public class Scattershot extends CardImpl {
public Scattershot(UUID ownerId) {
public Scattershot(final Scattershot card) {
public Scattershot copy() {return new Scattershot(this);
public class ScornfulEgotist extends CardImpl {
public ScornfulEgotist(UUID ownerId) {
public ScornfulEgotist(final ScornfulEgotist card) {
public ScornfulEgotist copy() {return new ScornfulEgotist(this);
public class ShorelineRanger extends CardImpl {
public ShorelineRanger(UUID ownerId) {
public ShorelineRanger(final ShorelineRanger card) {
public ShorelineRanger copy() {return new ShorelineRanger(this);
public class SkirkVolcanist extends CardImpl {
public SkirkVolcanist(UUID ownerId) {
public SkirkVolcanist(final SkirkVolcanist card) {
public SkirkVolcanist copy() {return new SkirkVolcanist(this);
public class Skulltap extends CardImpl {
public Skulltap(UUID ownerId) {
public Skulltap(final Skulltap card) {
public Skulltap copy() {return new Skulltap(this);
public class SliverOverlord extends CardImpl {
public SliverOverlord(UUID ownerId) {
public SliverOverlord(final SliverOverlord card) {
public SliverOverlord copy() {return new SliverOverlord(this);
public class SproutingVines extends CardImpl {
public SproutingVines(UUID ownerId) {
public SproutingVines(final SproutingVines card) {
public SproutingVines copy() {return new SproutingVines(this);return new Stifle(this);
public class SulfuricVortex extends CardImpl {
public SulfuricVortex(UUID ownerId) {
public SulfuricVortex(final SulfuricVortex card) {
public SulfuricVortex copy() {return new SulfuricVortex(this);
class SulfuricVortexReplacementEffect extends ReplacementEffectImpl {
public SulfuricVortexReplacementEffect() {
public SulfuricVortexReplacementEffect(final SulfuricVortexReplacementEffect effect) {
public SulfuricVortexReplacementEffect copy() {return new SulfuricVortexReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.GAIN_LIFE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public class TemporalFissure extends CardImpl {
public TemporalFissure(UUID ownerId) {
public TemporalFissure(final TemporalFissure card) {
public TemporalFissure copy() {return new TemporalFissure(this);
public class TitanicBulvox extends CardImpl {
public TitanicBulvox(UUID ownerId) {
public TitanicBulvox(final TitanicBulvox card) {
public TitanicBulvox copy() {return new TitanicBulvox(this);
public class TorrentOfFire extends CardImpl {
public TorrentOfFire(UUID ownerId) {
public TorrentOfFire(final TorrentOfFire card) {
public TorrentOfFire copy() {return new TorrentOfFire(this);
public class TrapDigger extends CardImpl {
public TrapDigger(UUID ownerId) {
public TrapDigger(final TrapDigger card) {
public TrapDigger copy() {return new TrapDigger(this);
public class TreetopScout extends CardImpl {
public TreetopScout(UUID ownerId) {
public TreetopScout(final TreetopScout card) {
public TreetopScout copy() {return new TreetopScout(this);
public class Unburden extends CardImpl {
public Unburden(UUID ownerId) {
public Unburden(final Unburden card) {
public Unburden copy() {return new Unburden(this);
public class UncontrolledInfestation extends CardImpl {
public UncontrolledInfestation(UUID ownerId) {
public UncontrolledInfestation(final UncontrolledInfestation card) {
public UncontrolledInfestation copy() {return new UncontrolledInfestation(this);
public class UnspeakableSymbol extends CardImpl {
public UnspeakableSymbol(UUID ownerId) {
public UnspeakableSymbol(final UnspeakableSymbol card) {
public UnspeakableSymbol copy() {return new UnspeakableSymbol(this);
public class VengefulDead extends CardImpl {
public VengefulDead(UUID ownerId) {
public VengefulDead(final VengefulDead card) {
public VengefulDead copy() {return new VengefulDead(this);
public class WingShards extends CardImpl {
public WingShards(UUID ownerId) {
public WingShards(final WingShards card) {
public WingShards copy() {return new WingShards(this);
public class WipeClean extends CardImpl {
public WipeClean(UUID ownerId) {
public WipeClean(final WipeClean card) {
public WipeClean copy() {return new WipeClean(this);
public class WirewoodGuardian extends CardImpl {
public WirewoodGuardian(UUID ownerId) {
public WirewoodGuardian(final WirewoodGuardian card) {
public WirewoodGuardian copy() {return new WirewoodGuardian(this);
public class WirewoodSymbiote extends CardImpl {
public WirewoodSymbiote(UUID ownerId) {
public WirewoodSymbiote(final WirewoodSymbiote card) {
public WirewoodSymbiote copy() {return new WirewoodSymbiote(this);
public class Woodcloaker extends CardImpl {
public Woodcloaker(UUID ownerId) {
public Woodcloaker(final Woodcloaker card) {
public Woodcloaker copy() {return new Woodcloaker(this);
public class XantidSwarm extends CardImpl {
public XantidSwarm(UUID ownerId) {
public XantidSwarm(final XantidSwarm card) {
public XantidSwarm copy() {return new XantidSwarm(this);
class XantidSwarmTriggeredAbility extends TriggeredAbilityImpl {
public XantidSwarmTriggeredAbility(Effect effect) {
public XantidSwarmTriggeredAbility(final XantidSwarmTriggeredAbility ability) {
public XantidSwarmTriggeredAbility copy() {return new XantidSwarmTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return new StringBuilder("Whenever {this} attacks, ").append(super.getRule()).toString();
public XantidSwarmReplacementEffect() {
public XantidSwarmReplacementEffect(final XantidSwarmReplacementEffect effect) {
public XantidSwarmReplacementEffect copy() {return new XantidSwarmReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class ZombieCutthroat extends CardImpl {
public ZombieCutthroat(UUID ownerId) {
public ZombieCutthroat(final ZombieCutthroat card) {
public ZombieCutthroat copy() {return new ZombieCutthroat(this);
public class AEtherFlash extends CardImpl {
public AEtherFlash(UUID ownerId) {
public AEtherFlash(final AEtherFlash card) {
public AEtherFlash copy() {return new AEtherFlash(this);
class AEtherFlashTriggeredAbility extends TriggeredAbilityImpl {
public AEtherFlashTriggeredAbility() {
public AEtherFlashTriggeredAbility(AEtherFlashTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature enters the battlefield, AEther Flash deals 2 damage to it";
public AEtherFlashTriggeredAbility copy() {return new AEtherFlashTriggeredAbility(this);
public class AgonizingMemories extends CardImpl {
public AgonizingMemories(UUID ownerId) {
public AgonizingMemories(final AgonizingMemories card) {
public AgonizingMemories copy() {return new AgonizingMemories(this);
class AgonizingMemoriesEffect extends OneShotEffect {
public AgonizingMemoriesEffect() {
public AgonizingMemoriesEffect(final AgonizingMemoriesEffect effect) {
public AgonizingMemoriesEffect copy() {return new AgonizingMemoriesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private void chooseCardInHandAndPutOnTopOfLibrary(Game game, Ability source, Player you, Player targetPlayer) {
public class AladdinsRing extends CardImpl {
public AladdinsRing(UUID ownerId) {
public AladdinsRing(final AladdinsRing card) {
public AladdinsRing copy() {return new AladdinsRing(this);
public class CityOfBrass extends CardImpl {
public CityOfBrass(UUID ownerId) {
public CityOfBrass(final CityOfBrass card) {
public CityOfBrass copy() {return new CityOfBrass(this);
public class Compost extends CardImpl {
public Compost(UUID ownerId) {
public Compost(final Compost card) {
public Compost copy() {return new Compost(this);
public class CrimsonHellkite extends CardImpl {
public CrimsonHellkite(UUID ownerId) {
public CrimsonHellkite(final CrimsonHellkite card) {
public CrimsonHellkite copy() {return new CrimsonHellkite(this);
public class DarkestHour extends CardImpl {
public DarkestHour(UUID ownerId) {
public DarkestHour(final DarkestHour card) {
public DarkestHour copy() {return new DarkestHour(this);
class DarkestHourEffect extends ContinuousEffectImpl {
DarkestHourEffect() {
DarkestHourEffect(final DarkestHourEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public DarkestHourEffect copy() {return new DarkestHourEffect(this);
public class Disorder extends CardImpl {
public Disorder(UUID ownerId) {
public Disorder(final Disorder card) {
public Disorder copy() {return new Disorder(this);
class DisorderEffect extends OneShotEffect {
public DisorderEffect() {
public DisorderEffect(final DisorderEffect effect) {
public DisorderEffect copy() {return new DisorderEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class DisruptingScepter extends CardImpl {
public DisruptingScepter(UUID ownerId) {
public DisruptingScepter(final DisruptingScepter card) {
public DisruptingScepter copy() {return new DisruptingScepter(this);
public class EagerCadet extends CardImpl {
public EagerCadet(UUID ownerId) {
public EagerCadet(final EagerCadet card) {
public EagerCadet copy() {return new EagerCadet(this);
public class FallenAngel extends CardImpl {
public FallenAngel(UUID ownerId) {
public FallenAngel(final FallenAngel card) {
public FallenAngel copy() {return new FallenAngel(this);
public class FamiliarGround extends CardImpl {
public FamiliarGround(UUID ownerId) {
public FamiliarGround(final FamiliarGround card) {
public FamiliarGround copy() {return new FamiliarGround(this);
public class FinalFortune extends CardImpl {
public FinalFortune(UUID ownerId) {
public FinalFortune(final FinalFortune card) {
public FinalFortune copy() {return new FinalFortune(this);
public class FireDiamond extends CardImpl {
public FireDiamond(UUID ownerId) {
public FireDiamond(final FireDiamond card) {
public FireDiamond copy() {return new FireDiamond(this);
public class FlyingCarpet extends CardImpl {
public FlyingCarpet(UUID ownerId) {
public FlyingCarpet(final FlyingCarpet card) {
public FlyingCarpet copy() {return new FlyingCarpet(this);
public class ForceSpike extends CardImpl {
public ForceSpike(UUID ownerId) {
public ForceSpike(final ForceSpike card) {
public ForceSpike copy() {return new ForceSpike(this);
public class Fugue extends CardImpl {
public Fugue(UUID ownerId) {
public Fugue(final Fugue card) {
public Fugue copy() {return new Fugue(this);
public class GhituFireEater extends CardImpl {
public GhituFireEater(UUID ownerId) {
public GhituFireEater(final GhituFireEater card) {
public GhituFireEater copy() {return new GhituFireEater(this);
public class GiantOctopus extends CardImpl {
public GiantOctopus(UUID ownerId) {
public GiantOctopus(final GiantOctopus card) {
public GiantOctopus copy() {return new GiantOctopus(this);
public class GoblinGlider extends CardImpl {
public GoblinGlider(UUID ownerId) {
public GoblinGlider(final GoblinGlider card) {
public GoblinGlider copy() {return new GoblinGlider(this);
public class GorillaChieftain extends CardImpl {
public GorillaChieftain(UUID ownerId) {
public GorillaChieftain(final GorillaChieftain card) {
public GorillaChieftain copy() {return new GorillaChieftain(this);
public class HeavyBallista extends CardImpl {
public HeavyBallista(UUID ownerId) {
public HeavyBallista(final HeavyBallista card) {
public HeavyBallista copy() {return new HeavyBallista(this);
public class Impatience extends CardImpl {
public Impatience(UUID ownerId) {
public Impatience(final Impatience card) {
public Impatience copy() {return new Impatience(this);
class ImpatienceCondition implements Condition {
public boolean apply(Game game, Ability source) {return watcher.getAmountOfSpellsPlayerCastOnCurrentTurn(game.getActivePlayerId()) == 0;
public String toString() {return "if that player didn't cast a spell this turn";
public class InfernalContract extends CardImpl {
public InfernalContract(UUID ownerId) {
public InfernalContract(final InfernalContract card) {
public InfernalContract copy() {return new InfernalContract(this);
public class JalumTome extends CardImpl {
public JalumTome(UUID ownerId) {
public JalumTome(final JalumTome card) {
public JalumTome copy() {return new JalumTome(this);return new JandorsSaddlebags(this);
public class KnightErrant extends CardImpl {
public KnightErrant(UUID ownerId) {
public KnightErrant(final KnightErrant card) {
public KnightErrant copy() {return new KnightErrant(this);
public class LongbowArcher extends CardImpl {
public LongbowArcher(UUID ownerId) {
public LongbowArcher(final LongbowArcher card) {
public LongbowArcher copy() {return new LongbowArcher(this);
public class MarbleDiamond extends CardImpl {
public MarbleDiamond(UUID ownerId) {
public MarbleDiamond(final MarbleDiamond card) {
public MarbleDiamond copy() {return new MarbleDiamond(this);
public class MemoryLapse extends CardImpl {
public MemoryLapse(UUID ownerId) {
public MemoryLapse(final MemoryLapse card) {
public MemoryLapse copy() {return new MemoryLapse(this);
public class MonstrousGrowth extends CardImpl {
public MonstrousGrowth(UUID ownerId) {
public MonstrousGrowth(final MonstrousGrowth card) {
public MonstrousGrowth copy() {return new MonstrousGrowth(this);
public class MossDiamond extends CardImpl {
public MossDiamond(UUID ownerId) {
public MossDiamond(final MossDiamond card) {
public MossDiamond copy() {return new MossDiamond(this);
public class NaturesResurgence extends CardImpl {
public NaturesResurgence(UUID ownerId) {
public NaturesResurgence(final NaturesResurgence card) {
public NaturesResurgence copy() {return new NaturesResurgence(this);
class NaturesResurgenceEffect extends OneShotEffect {
public NaturesResurgenceEffect() {
public NaturesResurgenceEffect(final NaturesResurgenceEffect effect) {
public NaturesResurgenceEffect copy() {return new NaturesResurgenceEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class NaturesRevolt extends CardImpl {
public NaturesRevolt(UUID ownerId) {
public NaturesRevolt(final NaturesRevolt card) {
public NaturesRevolt copy() {return new NaturesRevolt(this);
class NaturesRevoltToken extends Token {
public NaturesRevoltToken() {
public class Nausea extends CardImpl {
public Nausea(UUID ownerId) {
public Nausea(final Nausea card) {
public Nausea copy() {return new Nausea(this);
public class Opposition extends CardImpl {
public Opposition(UUID ownerId) {
public Opposition(final Opposition card) {
public Opposition copy() {return new Opposition(this);
public class OrcishArtillery extends CardImpl {
public OrcishArtillery(UUID ownerId) {
public OrcishArtillery(final OrcishArtillery card) {
public OrcishArtillery copy() {return new OrcishArtillery(this);
public class PatagiaGolem extends CardImpl {
public PatagiaGolem(UUID ownerId) {
public PatagiaGolem(final PatagiaGolem card) {
public PatagiaGolem copy() {return new PatagiaGolem(this);
public class Pillage extends CardImpl {
public Pillage(UUID ownerId) {
public Pillage(final Pillage card) {
public Pillage copy() {return new Pillage(this);
public class RecklessEmbermage extends CardImpl {
public RecklessEmbermage(UUID ownerId) {
public RecklessEmbermage(final RecklessEmbermage card) {
public RecklessEmbermage copy() {return new RecklessEmbermage(this);
public class RelentlessAssault extends CardImpl {
public RelentlessAssault(UUID ownerId) {
public RelentlessAssault(final RelentlessAssault card) {
public RelentlessAssault copy() {return new RelentlessAssault(this);
class RelentlessAssaultUntapEffect extends OneShotEffect {
public RelentlessAssaultUntapEffect() {
public RelentlessAssaultUntapEffect(final RelentlessAssaultUntapEffect effect) {
public RelentlessAssaultUntapEffect copy() {return new RelentlessAssaultUntapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class RelentlessAssaultAddPhasesEffect extends OneShotEffect {
public RelentlessAssaultAddPhasesEffect() {
public RelentlessAssaultAddPhasesEffect(final RelentlessAssaultAddPhasesEffect effect) {
public RelentlessAssaultAddPhasesEffect copy() {return new RelentlessAssaultAddPhasesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class RelentlessAssaultDelayedAddMainPhaseAbility extends DelayedTriggeredAbility {
public RelentlessAssaultDelayedAddMainPhaseAbility() {
public class Reprisal extends CardImpl {
public Reprisal(UUID ownerId) {
public Reprisal(final Reprisal card) {
public Reprisal copy() {return new Reprisal(this);
public class Reprocess extends CardImpl {
public Reprocess(UUID ownerId) {
public Reprocess(final Reprocess card) {
public Reprocess copy() {return new Reprocess(this);
class ReprocessEffect extends OneShotEffect {
public ReprocessEffect() {
public ReprocessEffect(final ReprocessEffect effect) {
public ReprocessEffect copy() {return new ReprocessEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class Rowen extends CardImpl {
public Rowen(UUID ownerId) {
public Rowen(final Rowen card) {
public Rowen copy() {return new Rowen(this);
class RowenAbility extends TriggeredAbilityImpl {
RowenAbility() {
RowenAbility(final RowenAbility ability) {
public RowenAbility copy() {return new RowenAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DREW_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Reveal the first card you draw each turn. Whenever you reveal a basic land card this way, draw a card.";
public class Sanctimony extends CardImpl {
public Sanctimony(UUID ownerId) {
public Sanctimony(final Sanctimony card) {
public Sanctimony copy() {return new Sanctimony(this);
public class SeismicAssault extends CardImpl {
public SeismicAssault(UUID ownerId) {
public SeismicAssault(final SeismicAssault card) {
public SeismicAssault copy() {return new SeismicAssault(this);
public class SisaysRing extends CardImpl {
public SisaysRing(UUID ownerId) {
public SisaysRing(final SisaysRing card) {
public SisaysRing copy() {return new SisaysRing(this);
public class SkyDiamond extends CardImpl {
public SkyDiamond(UUID ownerId) {
public SkyDiamond(final SkyDiamond card) {
public SkyDiamond copy() {return new SkyDiamond(this);
public class SouthernPaladin extends CardImpl {
public SouthernPaladin(UUID ownerId) {
public SouthernPaladin(final SouthernPaladin card) {
public SouthernPaladin copy() {return new SouthernPaladin(this);
public class SpiritLink extends CardImpl {
public SpiritLink(UUID ownerId) {
public SpiritLink(final SpiritLink card) {
public SpiritLink copy() {return new SpiritLink(this);
public class Starlight extends CardImpl {
public Starlight(UUID ownerId) {
public Starlight(final Starlight card) {
public Starlight copy() {return new Starlight(this);return new StealArtifact(this);
public class StormCauldron extends CardImpl {
public StormCauldron(UUID ownerId) {effect.setText("return it to its owner's hand");
public StormCauldron(final StormCauldron card) {
public StormCauldron copy() {return new StormCauldron(this);
public class StrandsOfNight extends CardImpl {
public StrandsOfNight(UUID ownerId) {
public StrandsOfNight(final StrandsOfNight card) {
public StrandsOfNight copy() {return new StrandsOfNight(this);return new StreamOfLife(this);
public class SuddenImpact extends CardImpl {
public SuddenImpact(UUID ownerId) {
public SuddenImpact(final SuddenImpact card) {
public SuddenImpact copy() {return new SuddenImpact(this);
class TargetPlayerCardsInHandCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return targetPlayer.getHand().size();return 0;
public DynamicValue copy() {return new TargetPlayerCardsInHandCount();
public String toString() {return "1";
public String getMessage() {return "target player's cards in hand";
public class Sunweb extends CardImpl {
public Sunweb(UUID ownerId) {
public Sunweb(final Sunweb card) {
public Sunweb copy() {return new Sunweb(this);
public class Tremor extends CardImpl {
public Tremor(UUID ownerId) {
public Tremor(final Tremor card) {
public Tremor copy() {return new Tremor(this);
public class UktabiWildcats extends CardImpl {
public UktabiWildcats(UUID ownerId) {
public UktabiWildcats(final UktabiWildcats card) {
public UktabiWildcats copy() {return new UktabiWildcats(this);
public class UntamedWilds extends CardImpl {
public UntamedWilds(UUID ownerId) {
public UntamedWilds(final UntamedWilds card) {
public UntamedWilds copy() {return new UntamedWilds(this);
public class Vengeance extends CardImpl {
public Vengeance(UUID ownerId) {
public Vengeance(final Vengeance card) {
public Vengeance copy() {return new Vengeance(this);
public class VerduranEnchantress extends CardImpl {
public VerduranEnchantress(UUID ownerId) {
public VerduranEnchantress(final VerduranEnchantress card) {
public VerduranEnchantress copy() {return new VerduranEnchantress(this);
public class Vizzerdrix extends CardImpl {
public Vizzerdrix(UUID ownerId) {
public Vizzerdrix(final Vizzerdrix card) {
public Vizzerdrix copy() {return new Vizzerdrix(this);
public class WallOfWonder extends CardImpl {
public WallOfWonder(UUID ownerId) {
public WallOfWonder(final WallOfWonder card) {
public WallOfWonder copy() {return new WallOfWonder(this);
public class AdviceFromTheFae extends CardImpl {
public AdviceFromTheFae(UUID ownerId) {
public AdviceFromTheFae(final AdviceFromTheFae card) {
public AdviceFromTheFae copy() {return new AdviceFromTheFae(this);
class AdviceFromTheFaeEffect extends OneShotEffect {
public AdviceFromTheFaeEffect() {
public AdviceFromTheFaeEffect(final AdviceFromTheFaeEffect effect) {
public AdviceFromTheFaeEffect copy() {return new AdviceFromTheFaeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AEthertow extends CardImpl {
public AEthertow(UUID ownerId) {
public AEthertow(final AEthertow card) {
public AEthertow copy() {return new AEthertow(this);
class AEthertowEffect extends OneShotEffect {
AEthertowEffect() {
AEthertowEffect(final AEthertowEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AEthertowEffect copy() {return new AEthertowEffect(this);
public class AphoticWisps extends CardImpl {
public AphoticWisps(UUID ownerId) {
public AphoticWisps(final AphoticWisps card) {
public AphoticWisps copy() {return new AphoticWisps(this);
public class ApothecaryInitiate extends CardImpl {
public ApothecaryInitiate(UUID ownerId) {
public ApothecaryInitiate(final ApothecaryInitiate card) {
public ApothecaryInitiate copy() {return new ApothecaryInitiate(this);
public class AshenmoorCohort extends CardImpl {
public AshenmoorCohort(UUID ownerId) {
public AshenmoorCohort(final AshenmoorCohort card) {
public AshenmoorCohort copy() {return new AshenmoorCohort(this);
public class AshenmoorGouger extends CardImpl {
public AshenmoorGouger(UUID ownerId) {
public AshenmoorGouger(final AshenmoorGouger card) {
public AshenmoorGouger copy() {return new AshenmoorGouger(this);
public class AshenmoorLiege extends CardImpl {
public AshenmoorLiege(UUID ownerId) {
public AshenmoorLiege(final AshenmoorLiege card) {
public AshenmoorLiege copy() {return new AshenmoorLiege(this);
class AshenmoorLiegeTriggeredAbility extends TriggeredAbilityImpl {
public AshenmoorLiegeTriggeredAbility() {
public AshenmoorLiegeTriggeredAbility(final AshenmoorLiegeTriggeredAbility ability) {
public AshenmoorLiegeTriggeredAbility copy() {return new AshenmoorLiegeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} becomes the target of a spell or ability an opponent controls, that player loses 4 life.";
public class AuguryAdept extends CardImpl {
public AuguryAdept(UUID ownerId) {
public AuguryAdept(final AuguryAdept card) {
public AuguryAdept copy() {return new AuguryAdept(this);
class AuguryAdeptEffect extends OneShotEffect {
public AuguryAdeptEffect() {
public AuguryAdeptEffect(final AuguryAdeptEffect effect) {
public AuguryAdeptEffect copy() {return new AuguryAdeptEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class BallynockCohort extends CardImpl {
public BallynockCohort(UUID ownerId) {
public BallynockCohort(final BallynockCohort card) {
public BallynockCohort copy() {return new BallynockCohort(this);
public class BarkshellBlessing extends CardImpl {
public BarkshellBlessing(UUID ownerId) {
public BarkshellBlessing(final BarkshellBlessing card) {
public BarkshellBlessing copy() {return new BarkshellBlessing(this);
public class BarrentonCragtreads extends CardImpl {
public BarrentonCragtreads(UUID ownerId) {
public BarrentonCragtreads(final BarrentonCragtreads card) {
public BarrentonCragtreads copy() {return new BarrentonCragtreads(this);
public class BitingTether extends CardImpl {
public BitingTether(UUID ownerId) {
public BitingTether(final BitingTether card) {
public BitingTether copy() {return new BitingTether(this);
public class BlazethornScarecrow extends CardImpl {
public BlazethornScarecrow(UUID ownerId) {
public BlazethornScarecrow(final BlazethornScarecrow card) {
public BlazethornScarecrow copy() {return new BlazethornScarecrow(this);
public class BlightSickle extends CardImpl {
public BlightSickle(UUID ownerId) {
public BlightSickle(final BlightSickle card) {
public BlightSickle copy() {return new BlightSickle(this);
public class BlisteringDieflyn extends CardImpl {
public BlisteringDieflyn(UUID ownerId) {
public BlisteringDieflyn(final BlisteringDieflyn card) {
public BlisteringDieflyn copy() {return new BlisteringDieflyn(this);
public class BloodmarkMentor extends CardImpl {
public BloodmarkMentor(UUID ownerId) {
public BloodmarkMentor(final BloodmarkMentor card) {
public BloodmarkMentor copy() {return new BloodmarkMentor(this);
public class BloodshedFever extends CardImpl {
public BloodshedFever(UUID ownerId) {
public BloodshedFever(final BloodshedFever card) {
public BloodshedFever copy() {return new BloodshedFever(this);
public class BlowflyInfestation extends CardImpl {
public BlowflyInfestation(UUID ownerId) {
public BlowflyInfestation(final BlowflyInfestation card) {
public BlowflyInfestation copy() {return new BlowflyInfestation(this);
class BlowflyInfestationCondition implements Condition {
public boolean apply(Game game, Ability source) {return permanent.getCounters().containsKey(CounterType.M1M1);return false;
class BlowflyInfestationEffect extends OneShotEffect {
public BlowflyInfestationEffect() {
public BlowflyInfestationEffect(BlowflyInfestationEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public BlowflyInfestationEffect copy() {return new BlowflyInfestationEffect(this);
public class BoartuskLiege extends CardImpl {
public BoartuskLiege(UUID ownerId) {
public BoartuskLiege(final BoartuskLiege card) {
public BoartuskLiege copy() {return new BoartuskLiege(this);
public class BoggartArsonists extends CardImpl {
public BoggartArsonists(UUID ownerId) {
public BoggartArsonists(final BoggartArsonists card) {
public BoggartArsonists copy() {return new BoggartArsonists(this);
public class BoggartRamGang extends CardImpl {
public BoggartRamGang(UUID ownerId) {
public BoggartRamGang(final BoggartRamGang card) {
public BoggartRamGang copy() {return new BoggartRamGang(this);
public class BoonReflection extends CardImpl {
public BoonReflection(UUID ownerId) {
public BoonReflection(final BoonReflection card) {
public BoonReflection copy() {return new BoonReflection(this);
class BoonReflectionEffect extends ReplacementEffectImpl {
public BoonReflectionEffect() {
public BoonReflectionEffect(final BoonReflectionEffect effect) {
public BoonReflectionEffect copy() {return new BoonReflectionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(EventType.GAIN_LIFE);
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId()) && (source.getControllerId() != null);
public class BriarberryCohort extends CardImpl {
public BriarberryCohort(UUID ownerId) {
public BriarberryCohort(final BriarberryCohort card) {
public BriarberryCohort copy() {return new BriarberryCohort(this);
public class BurnTrail extends CardImpl {
public BurnTrail(UUID ownerId) {
public BurnTrail(final BurnTrail card) {
public BurnTrail copy() {return new BurnTrail(this);
public class CauldronOfSouls extends CardImpl {
public CauldronOfSouls(UUID ownerId) {
public CauldronOfSouls(final CauldronOfSouls card) {
public CauldronOfSouls copy() {return new CauldronOfSouls(this);
public class CemeteryPuca extends CardImpl {
public CemeteryPuca(UUID ownerId) {
public CemeteryPuca(final CemeteryPuca card) {
public CemeteryPuca copy() {return new CemeteryPuca(this);
class CemeteryPucaEffect extends OneShotEffect {
public CemeteryPucaEffect() {
public CemeteryPucaEffect(final CemeteryPucaEffect effect) {
public CemeteryPucaEffect copy() {return new CemeteryPucaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CeruleanWisps extends CardImpl {
public CeruleanWisps (UUID ownerId) {
public CeruleanWisps (final CeruleanWisps card) {
public CeruleanWisps copy() {return new CeruleanWisps(this);
public class Chainbreaker extends CardImpl {
public Chainbreaker(UUID ownerId) {
public Chainbreaker(final Chainbreaker card) {
public Chainbreaker copy() {return new Chainbreaker(this);
public class Cinderbones extends CardImpl {
public Cinderbones(UUID ownerId) {
public Cinderbones(final Cinderbones card) {
public Cinderbones copy() {return new Cinderbones(this);
public class CorrosiveMentor extends CardImpl {
public CorrosiveMentor(UUID ownerId) {
public CorrosiveMentor(final CorrosiveMentor card) {
public CorrosiveMentor copy() {return new CorrosiveMentor(this);
public class Counterbore extends CardImpl {
public Counterbore(UUID ownerId) {
public Counterbore(final Counterbore card) {
public Counterbore copy() {return new Counterbore(this);
public class CrabappleCohort extends CardImpl {
public CrabappleCohort(UUID ownerId) {
public CrabappleCohort(final CrabappleCohort card) {
public CrabappleCohort copy() {return new CrabappleCohort(this);
public class CragganwickCremator extends CardImpl {
public CragganwickCremator(UUID ownerId) {
public CragganwickCremator(final CragganwickCremator card) {
public CragganwickCremator copy() {return new CragganwickCremator(this);
class CragganwickCrematorEffect extends OneShotEffect {
public CragganwickCrematorEffect() {
public CragganwickCrematorEffect(final CragganwickCrematorEffect effect) {
public CragganwickCrematorEffect copy() {return new CragganwickCrematorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CrimsonWisps extends CardImpl {
public CrimsonWisps (UUID ownerId) {
public CrimsonWisps (final CrimsonWisps card) {
public CrimsonWisps copy() {return new CrimsonWisps(this);
public class CrowdOfCinders extends CardImpl {
public CrowdOfCinders(UUID ownerId) {
public CrowdOfCinders(final CrowdOfCinders card) {
public CrowdOfCinders copy() {return new CrowdOfCinders(this);
public class CultbrandCinder extends CardImpl {
public CultbrandCinder(UUID ownerId) {
public CultbrandCinder(final CultbrandCinder card) {
public CultbrandCinder copy() {return new CultbrandCinder(this);
public class Cursecatcher extends CardImpl {
public Cursecatcher(UUID ownerId) {
public Cursecatcher(final Cursecatcher card) {
public Cursecatcher copy() {return new Cursecatcher(this);
public class CurseOfChains extends CardImpl {
public CurseOfChains(UUID ownerId) {
public CurseOfChains(final CurseOfChains card) {
public CurseOfChains copy() {return new CurseOfChains(this);
public class DawnglowInfusion extends CardImpl {
public DawnglowInfusion(UUID ownerId) {
public DawnglowInfusion(final DawnglowInfusion card) {
public DawnglowInfusion copy() {return new DawnglowInfusion(this);
public class DeepchannelMentor extends CardImpl {
public DeepchannelMentor(UUID ownerId) {
public DeepchannelMentor(final DeepchannelMentor card) {
public DeepchannelMentor copy() {return new DeepchannelMentor(this);
public class DeepSlumberTitan extends CardImpl {
public DeepSlumberTitan(UUID ownerId) {
public DeepSlumberTitan(final DeepSlumberTitan card) {
public DeepSlumberTitan copy() {return new DeepSlumberTitan(this);
public class DemigodOfRevenge extends CardImpl {
public DemigodOfRevenge(UUID ownerId) {
public DemigodOfRevenge(final DemigodOfRevenge card) {
public DemigodOfRevenge copy() {return new DemigodOfRevenge(this);
class DemigodOfRevengeReturnEffect extends OneShotEffect {
public DemigodOfRevengeReturnEffect() {staticText = "return all cards named Demigod of Revenge from your graveyard to the battlefield";
public DemigodOfRevengeReturnEffect(final DemigodOfRevengeReturnEffect effect) {
public DemigodOfRevengeReturnEffect copy() {return new DemigodOfRevengeReturnEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(controller.getGraveyard().getCards(filter, game), Zone.BATTLEFIELD, source, game);return false;
public class DevotedDruid extends CardImpl {
public DevotedDruid(UUID ownerId) {
public DevotedDruid(final DevotedDruid card) {
public DevotedDruid copy() {return new DevotedDruid(this);
public class DinOfTheFireherd extends CardImpl {
public DinOfTheFireherd(UUID ownerId) {
public DinOfTheFireherd(final DinOfTheFireherd card) {
public DinOfTheFireherd copy() {return new DinOfTheFireherd(this);
class DinOfTheFireherdEffect extends OneShotEffect {
public DinOfTheFireherdEffect() {
public DinOfTheFireherdEffect(final DinOfTheFireherdEffect effect) {
public DinOfTheFireherdEffect copy() {return new DinOfTheFireherdEffect(this);
public boolean apply(Game game, Ability source) {return applied;
class DinOfTheFireherdToken extends Token {
public DinOfTheFireherdToken() {
public class DireUndercurrents extends CardImpl {
public DireUndercurrents(UUID ownerId) {
public DireUndercurrents(final DireUndercurrents card) {
public DireUndercurrents copy() {return new DireUndercurrents(this);
public class DisturbingPlot extends CardImpl {
public DisturbingPlot(UUID ownerId) {
public DisturbingPlot(final DisturbingPlot card) {
public DisturbingPlot copy() {return new DisturbingPlot(this);
public class DramaticEntrance extends CardImpl {
public DramaticEntrance(UUID ownerId) {
public DramaticEntrance(final DramaticEntrance card) {
public DramaticEntrance copy() {return new DramaticEntrance(this);
public class DrownerInitiate extends CardImpl {
public DrownerInitiate(UUID ownerId) {
public DrownerInitiate(final DrownerInitiate card) {
public DrownerInitiate copy() {return new DrownerInitiate(this);
public class DuskUrchins extends CardImpl {
public DuskUrchins(UUID ownerId) {
public DuskUrchins(final DuskUrchins card) {
public DuskUrchins copy() {return new DuskUrchins(this);
public class ElementalMastery extends CardImpl {
public ElementalMastery(UUID ownerId) {
public ElementalMastery(final ElementalMastery card) {
public ElementalMastery copy() {return new ElementalMastery(this);
class ElementalMasteryEffect extends OneShotEffect {
public ElementalMasteryEffect() {
public ElementalMasteryEffect(final ElementalMasteryEffect effect) {
public ElementalMasteryEffect copy() {return new ElementalMasteryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ElementalToken extends Token {
public ElementalToken() {
public class ElsewhereFlask extends CardImpl {
public ElsewhereFlask(UUID ownerId) {
public ElsewhereFlask(final ElsewhereFlask card) {
public ElsewhereFlask copy() {return new ElsewhereFlask(this);
class ElsewhereFlaskEffect extends OneShotEffect {
public ElsewhereFlaskEffect() {
public ElsewhereFlaskEffect(final ElsewhereFlaskEffect effect) {
public ElsewhereFlaskEffect copy() {return new ElsewhereFlaskEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ElsewhereFlaskContinuousEffect extends ContinuousEffectImpl {
public ElsewhereFlaskContinuousEffect() {
public ElsewhereFlaskContinuousEffect(final ElsewhereFlaskContinuousEffect effect) {
public ElsewhereFlaskContinuousEffect copy() {return new ElsewhereFlaskContinuousEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class ElvishHexhunter extends CardImpl {
public ElvishHexhunter(UUID ownerId) {
public ElvishHexhunter(final ElvishHexhunter card) {
public ElvishHexhunter copy() {return new ElvishHexhunter(this);
public class EmberGale extends CardImpl {
public EmberGale(UUID ownerId) {
public EmberGale(final EmberGale card) {
public EmberGale copy() {return new EmberGale(this);
class EmberGaleEffect extends OneShotEffect {
public EmberGaleEffect() {
public EmberGaleEffect(final EmberGaleEffect effect) {
public EmberGaleEffect copy() {return new EmberGaleEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EmberstrikeDuo extends CardImpl {
public EmberstrikeDuo(UUID ownerId) {
public EmberstrikeDuo(final EmberstrikeDuo card) {
public EmberstrikeDuo copy() {return new EmberstrikeDuo(this);
public class EnchantedEvening extends CardImpl {
public EnchantedEvening(UUID ownerId) {
public EnchantedEvening(final EnchantedEvening card) {
public EnchantedEvening copy() {return new EnchantedEvening(this);
class EnchangedEveningEffect extends ContinuousEffectImpl {
public EnchangedEveningEffect(CardType addedCardType, Duration duration, FilterPermanent filter) {
public EnchangedEveningEffect(final EnchangedEveningEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public EnchangedEveningEffect copy() {return new EnchangedEveningEffect(this);
public class EverlastingTorment extends CardImpl {
public EverlastingTorment(UUID ownerId) {
public EverlastingTorment(final EverlastingTorment card) {
public EverlastingTorment copy() {return new EverlastingTorment(this);
public DamageCantBePreventedEffect(Duration duration) {
public DamageCantBePreventedEffect(final DamageCantBePreventedEffect effect) {
public DamageCantBePreventedEffect copy() {return new DamageCantBePreventedEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.PREVENT_DAMAGE);
public boolean applies(GameEvent event, Ability source, Game game) {return true;
class DamageDealtAsIfSourceHadWitherEffect extends ReplacementEffectImpl {
public DamageDealtAsIfSourceHadWitherEffect() {
public DamageDealtAsIfSourceHadWitherEffect(final DamageDealtAsIfSourceHadWitherEffect effect) {
public DamageDealtAsIfSourceHadWitherEffect copy() {return new DamageDealtAsIfSourceHadWitherEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGE_CREATURE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class FaerieMacabre extends CardImpl {
public FaerieMacabre(UUID ownerId) {
public FaerieMacabre(final FaerieMacabre card) {
public FaerieMacabre copy() {return new FaerieMacabre(this);
class FaerieMacabreExileTargetEffect extends OneShotEffect {
public FaerieMacabreExileTargetEffect() {
public FaerieMacabreExileTargetEffect(final FaerieMacabreExileTargetEffect effect) {
public FaerieMacabreExileTargetEffect copy() {return new FaerieMacabreExileTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getText(Mode mode) {return "Exile up to two target cards from graveyards";
public class FaerieSwarm extends CardImpl {
public FaerieSwarm(UUID ownerId) {
public FaerieSwarm(final FaerieSwarm card) {
public FaerieSwarm copy() {return new FaerieSwarm(this);
public class FarhavenElf extends CardImpl {
public FarhavenElf(UUID ownerId) {
public FarhavenElf(final FarhavenElf card) {
public FarhavenElf copy() {return new FarhavenElf(this);
public class FateTransfer extends CardImpl {
public FateTransfer(UUID ownerId) {
public FateTransfer(final FateTransfer card) {
public FateTransfer copy() {return new FateTransfer(this);
class FateTransferEffect extends OneShotEffect {
public FateTransferEffect() {
public FateTransferEffect(final FateTransferEffect effect) {
public FateTransferEffect copy() {return new FateTransferEffect(this);
public boolean apply(Game game, Ability source) {
&& creatureToMoveCountersTo != null) {return true;return false;
public class FireLitThicket extends CardImpl {
public FireLitThicket(UUID ownerId) {
public FireLitThicket(final FireLitThicket card) {
public FireLitThicket copy() {return new FireLitThicket(this);
public class Firespout extends CardImpl {
public Firespout(UUID ownerId) {
public Firespout(final Firespout card) {
public Firespout copy() {return new Firespout(this);
public class FistsOfTheDemigod extends CardImpl {
public FistsOfTheDemigod(UUID ownerId) {
public FistsOfTheDemigod(final FistsOfTheDemigod card) {
public FistsOfTheDemigod copy() {return new FistsOfTheDemigod(this);
public class FlameJavelin extends CardImpl {
public FlameJavelin(UUID ownerId) {
public FlameJavelin(final FlameJavelin card) {
public FlameJavelin copy() {return new FlameJavelin(this);
public class FlourishingDefenses extends CardImpl {
public FlourishingDefenses(UUID ownerId) {
public FlourishingDefenses(final FlourishingDefenses card) {
public FlourishingDefenses copy() {return new FlourishingDefenses(this);
class FlourishingDefensesTriggeredAbility extends TriggeredAbilityImpl {
FlourishingDefensesTriggeredAbility() {
FlourishingDefensesTriggeredAbility(final FlourishingDefensesTriggeredAbility ability) {
public FlourishingDefensesTriggeredAbility copy() {return new FlourishingDefensesTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER_ADDED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a -1/-1 counter is placed on a creature, you may put a 1/1 green Elf Warrior creature token onto the battlefield.";
public class FoxfireOak extends CardImpl {
public FoxfireOak(UUID ownerId) {
public FoxfireOak(final FoxfireOak card) {
public FoxfireOak copy() {return new FoxfireOak(this);
public class FracturingGust extends CardImpl {
public FracturingGust(UUID ownerId) {
public FracturingGust(final FracturingGust card) {
public FracturingGust copy() {return new FracturingGust(this);
class FracturingGustDestroyEffect extends OneShotEffect {
public FracturingGustDestroyEffect() {
public FracturingGustDestroyEffect(final FracturingGustDestroyEffect effect) {
public FracturingGustDestroyEffect copy() {return new FracturingGustDestroyEffect(this);
public boolean apply(Game game, Ability source) {
public class FulminatorMage extends CardImpl {
public FulminatorMage(UUID ownerId) {
public FulminatorMage(final FulminatorMage card) {
public FulminatorMage copy() {return new FulminatorMage(this);
public class FurystokeGiant extends CardImpl {
public FurystokeGiant(UUID ownerId) {
public FurystokeGiant(final FurystokeGiant card) {
public FurystokeGiant copy() {return new FurystokeGiant(this);
public class GhastlordOfFugue extends CardImpl {
public GhastlordOfFugue(UUID ownerId) {
public GhastlordOfFugue(final GhastlordOfFugue card) {
public GhastlordOfFugue copy() {return new GhastlordOfFugue(this);
class GhastlordOfFugueEffect extends OneShotEffect {
public GhastlordOfFugueEffect() {
public GhastlordOfFugueEffect(final GhastlordOfFugueEffect effect) {
public boolean apply(Game game, Ability source) {
&& controller != null) {return true;return false;
public GhastlordOfFugueEffect copy() {return new GhastlordOfFugueEffect(this);
public class GhastlyDiscovery extends CardImpl {
public GhastlyDiscovery(UUID ownerId) {
public GhastlyDiscovery(final GhastlyDiscovery card) {
public GhastlyDiscovery copy() {return new GhastlyDiscovery(this);
class GhastlyDiscoveryEffect extends OneShotEffect {
public GhastlyDiscoveryEffect() {
public GhastlyDiscoveryEffect(final GhastlyDiscoveryEffect effect) {
public GhastlyDiscoveryEffect copy() {return new GhastlyDiscoveryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Giantbaiting extends CardImpl {
public Giantbaiting(UUID ownerId) {
public Giantbaiting(final Giantbaiting card) {
public Giantbaiting copy() {return new Giantbaiting(this);
class GiantbaitingEffect extends OneShotEffect {
public GiantbaitingEffect() {
public GiantbaitingEffect(final GiantbaitingEffect effect) {
public GiantbaitingEffect copy() {return new GiantbaitingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class GiantWarriorToken extends Token {
GiantWarriorToken() {
public class GlamerSpinners extends CardImpl {
public GlamerSpinners(UUID ownerId) {
public GlamerSpinners(final GlamerSpinners card) {
public GlamerSpinners copy() {return new GlamerSpinners(this);
class GlamerSpinnersEffect extends OneShotEffect {
public GlamerSpinnersEffect() {
public GlamerSpinnersEffect(final GlamerSpinnersEffect effect) {
public GlamerSpinnersEffect copy() {return new GlamerSpinnersEffect(this);
public boolean apply(Game game, Ability source) {
&& passed) {return true;return true;return false;
public class GleefulSabotage extends CardImpl {
public GleefulSabotage(UUID ownerId) {
public GleefulSabotage(final GleefulSabotage card) {
public GleefulSabotage copy() {return new GleefulSabotage(this);
public class GlenElendraLiege extends CardImpl {
public GlenElendraLiege(UUID ownerId) {
public GlenElendraLiege(final GlenElendraLiege card) {
public GlenElendraLiege copy() {return new GlenElendraLiege(this);
public class Gloomlance extends CardImpl {
public Gloomlance(UUID ownerId) {
public Gloomlance(final Gloomlance card) {
public Gloomlance copy() {return new Gloomlance(this);
class GloomlanceEffect extends OneShotEffect {
public GloomlanceEffect() {
public GloomlanceEffect(final GloomlanceEffect effect) {
public GloomlanceEffect copy() {return new GloomlanceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new GloomwidowsFeast(this);return new GloomwidowsFeastEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GnarledEffigy extends CardImpl {
public GnarledEffigy(UUID ownerId) {
public GnarledEffigy(final GnarledEffigy card) {
public GnarledEffigy copy() {return new GnarledEffigy(this);
public class GodheadOfAwe extends CardImpl {
public GodheadOfAwe(UUID ownerId) {
public GodheadOfAwe(final GodheadOfAwe card) {
public GodheadOfAwe copy() {return new GodheadOfAwe(this);
public class GravelgillAxeshark extends CardImpl {
public GravelgillAxeshark(UUID ownerId) {
public GravelgillAxeshark(final GravelgillAxeshark card) {
public GravelgillAxeshark copy() {return new GravelgillAxeshark(this);
public class GravelgillDuo extends CardImpl {
public GravelgillDuo(UUID ownerId) {
public GravelgillDuo(final GravelgillDuo card) {
public GravelgillDuo copy() {return new GravelgillDuo(this);
public class GravenCairns extends CardImpl {
public GravenCairns(UUID ownerId) {
public GravenCairns(final GravenCairns card) {
public GravenCairns copy() {return new GravenCairns(this);
public class GreaterAuramancy extends CardImpl {
public GreaterAuramancy(UUID ownerId) {
public GreaterAuramancy(final GreaterAuramancy card) {
public GreaterAuramancy copy() {return new GreaterAuramancy(this);
public class GutturalResponse extends CardImpl {
public GutturalResponse(UUID ownerId) {
public GutturalResponse(final GutturalResponse card) {
public GutturalResponse copy() {return new GutturalResponse(this);
public class HeapDoll extends CardImpl {
public HeapDoll(UUID ownerId) {
public HeapDoll(final HeapDoll card) {
public HeapDoll copy() {return new HeapDoll(this);
public class Heartmender extends CardImpl {
public Heartmender(UUID ownerId) {
public Heartmender(final Heartmender card) {
public Heartmender copy() {return new Heartmender(this);
class HeartmenderEffect extends OneShotEffect {
public HeartmenderEffect(Counter counter) {
public HeartmenderEffect(HeartmenderEffect effect) {
public boolean apply(Game game, Ability source) {return true;return applied;
public HeartmenderEffect copy() {return new HeartmenderEffect(this);
public class HelmOfTheGhastlord extends CardImpl {
public HelmOfTheGhastlord(UUID ownerId) {
public HelmOfTheGhastlord(final HelmOfTheGhastlord card) {
public HelmOfTheGhastlord copy() {return new HelmOfTheGhastlord(this);
public class HollowbornBarghest extends CardImpl {
public HollowbornBarghest(UUID ownerId) {
public HollowbornBarghest(final HollowbornBarghest card) {
public HollowbornBarghest copy() {return new HollowbornBarghest(this);
class HollowbornBarghestEffect extends OneShotEffect {
public HollowbornBarghestEffect() {
public HollowbornBarghestEffect(final HollowbornBarghestEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public HollowbornBarghestEffect copy() {return new HollowbornBarghestEffect(this);
class HollowbornBarghestTriggeredAbility extends TriggeredAbilityImpl {
public HollowbornBarghestTriggeredAbility() {
public HollowbornBarghestTriggeredAbility(final HollowbornBarghestTriggeredAbility ability) {
public HollowbornBarghestTriggeredAbility copy() {return new HollowbornBarghestTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of each opponent's upkeep, if that player has no cards in hand, he or she loses 2 life.";
public class Hollowsage extends CardImpl {
public Hollowsage(UUID ownerId) {
public Hollowsage(final Hollowsage card) {
public Hollowsage copy() {return new Hollowsage(this);
class BecomesUntappedTriggeredAbility extends TriggeredAbilityImpl {
public BecomesUntappedTriggeredAbility(Effect effect, boolean isOptional) {
public BecomesUntappedTriggeredAbility(Effect effect) {
public BecomesUntappedTriggeredAbility(final BecomesUntappedTriggeredAbility ability) {
public BecomesUntappedTriggeredAbility copy() {return new BecomesUntappedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UNTAPPED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getTargetId().equals(sourceId);
public String getRule() {return "When {this} becomes untapped, " + super.getRule();
public class HordeOfBoggarts extends CardImpl {
public HordeOfBoggarts(UUID ownerId) {
public HordeOfBoggarts(final HordeOfBoggarts card) {
public HordeOfBoggarts copy() {return new HordeOfBoggarts(this);
public class HungrySpriggan extends CardImpl {
public HungrySpriggan(UUID ownerId) {
public HungrySpriggan(final HungrySpriggan card) {
public HungrySpriggan copy() {return new HungrySpriggan(this);
public class IlluminatedFolio extends CardImpl {
public IlluminatedFolio(UUID ownerId) {
public IlluminatedFolio(final IlluminatedFolio card) {
public IlluminatedFolio copy() {return new IlluminatedFolio(this);
class RevealTwoCardsSharedColorFromHandCost extends RevealTargetFromHandCost {
public RevealTwoCardsSharedColorFromHandCost() {
public RevealTwoCardsSharedColorFromHandCost(RevealTwoCardsSharedColorFromHandCost cost) {
public RevealTwoCardsSharedColorFromHandCost copy() {return new RevealTwoCardsSharedColorFromHandCost(this);
class TargetTwoCardsWithTheSameColorInHand extends TargetCardInHand {
public TargetTwoCardsWithTheSameColorInHand() {
public TargetTwoCardsWithTheSameColorInHand(final TargetTwoCardsWithTheSameColorInHand target) {
public Set<UUID> possibleTargets(UUID sourceControllerId, Game game) {return newPossibleTargets;
public boolean canChoose(UUID sourceControllerId, Game game) {return possibleCards > 0;
public boolean canTarget(UUID id, Game game) {return true;return true;return false;
public TargetTwoCardsWithTheSameColorInHand copy() {return new TargetTwoCardsWithTheSameColorInHand(this);
public class ImpromptuRaid extends CardImpl {
public ImpromptuRaid(UUID ownerId) {
public ImpromptuRaid(final ImpromptuRaid card) {
public ImpromptuRaid copy() {return new ImpromptuRaid(this);
class ImpromptuRaidEffect extends OneShotEffect {
public ImpromptuRaidEffect() {
public ImpromptuRaidEffect(final ImpromptuRaidEffect effect) {
public ImpromptuRaidEffect copy() {return new ImpromptuRaidEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class IncrementalBlight extends CardImpl {
public IncrementalBlight(UUID ownerId) {
public IncrementalBlight(final IncrementalBlight card) {
public IncrementalBlight copy() {return new IncrementalBlight(this);
class IncrementalBlightEffect extends OneShotEffect {
public IncrementalBlightEffect() {
public IncrementalBlightEffect(final IncrementalBlightEffect effect) {
public IncrementalBlightEffect copy() {return new IncrementalBlightEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class InescapableBrute extends CardImpl {
public InescapableBrute(UUID ownerId) {
public InescapableBrute(final InescapableBrute card) {
public InescapableBrute copy() {return new InescapableBrute(this);
public class InkfathomInfiltrator extends CardImpl {
public InkfathomInfiltrator(UUID ownerId) {
public InkfathomInfiltrator(final InkfathomInfiltrator card) {
public InkfathomInfiltrator copy() {return new InkfathomInfiltrator(this);
public class InquisitorsSnare extends CardImpl {
public InquisitorsSnare(UUID ownerId) {
public InquisitorsSnare(final InquisitorsSnare card) {
public InquisitorsSnare copy() {return new InquisitorsSnare(this);
class InquisitorsSnareEffect extends OneShotEffect {
public InquisitorsSnareEffect() {
public InquisitorsSnareEffect(final InquisitorsSnareEffect effect) {
public InquisitorsSnareEffect copy() {return new InquisitorsSnareEffect(this);
public boolean apply(Game game, Ability source) {return targetCreature.destroy(source.getSourceId(), game, false);return false;
public class IntimidatorInitiate extends CardImpl {
public IntimidatorInitiate(UUID ownerId) {
public IntimidatorInitiate(final IntimidatorInitiate card) {
public IntimidatorInitiate copy() {return new IntimidatorInitiate(this);
public class IslebackSpawn extends CardImpl {
public IslebackSpawn(UUID ownerId) {
public IslebackSpawn(final IslebackSpawn card) {
public IslebackSpawn copy() {return new IslebackSpawn(this);
public class JawsOfStone extends CardImpl {
public JawsOfStone(UUID ownerId) {
public JawsOfStone(final JawsOfStone card) {
public JawsOfStone copy() {return new JawsOfStone(this);return new JuvenileGloomwidow(this);
public class KithkinRabble extends CardImpl {
public KithkinRabble(UUID ownerId) {
public KithkinRabble(final KithkinRabble card) {
public KithkinRabble copy() {return new KithkinRabble(this);
public class KithkinShielddare extends CardImpl {
public KithkinShielddare(UUID ownerId) {
public KithkinShielddare(final KithkinShielddare card) {
public KithkinShielddare copy() {return new KithkinShielddare(this);
public class KnacksawClique extends CardImpl {
public KnacksawClique(UUID ownerId) {
public KnacksawClique(final KnacksawClique card) {
public KnacksawClique copy() {return new KnacksawClique(this);
class KnacksawCliqueEffect extends OneShotEffect {
public KnacksawCliqueEffect() {
public KnacksawCliqueEffect(final KnacksawCliqueEffect effect) {
public KnacksawCliqueEffect copy() {return new KnacksawCliqueEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class KnacksawCliqueCastFromExileEffect extends AsThoughEffectImpl {
public KnacksawCliqueCastFromExileEffect() {
public KnacksawCliqueCastFromExileEffect(final KnacksawCliqueCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public KnacksawCliqueCastFromExileEffect copy() {return new KnacksawCliqueCastFromExileEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return source.getControllerId().equals(affectedControllerId)
public class KnollspineDragon extends CardImpl {
public KnollspineDragon(UUID ownerId) {
public KnollspineDragon(final KnollspineDragon card) {
public KnollspineDragon copy() {return new KnollspineDragon(this);
class KnollspineDragonEffect extends OneShotEffect {
public KnollspineDragonEffect() {
public KnollspineDragonEffect(KnollspineDragonEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public KnollspineDragonEffect copy() {return new KnollspineDragonEffect(this);
public class KnollspineInvocation extends CardImpl {
public KnollspineInvocation(UUID ownerId) {
public void adjustCosts(Ability ability, Game game) {
public class KulrathKnight extends CardImpl {
public KulrathKnight(UUID ownerId) {
public KulrathKnight(final KulrathKnight card) {
public KulrathKnight copy() {return new KulrathKnight(this);
class KulrathKnightRestrictionEffect extends RestrictionEffect {
public KulrathKnightRestrictionEffect() {
public KulrathKnightRestrictionEffect(final KulrathKnightRestrictionEffect effect) {
public KulrathKnightRestrictionEffect copy() {return new KulrathKnightRestrictionEffect(this);
public boolean canAttack(Game game) {return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return filter.match(permanent, source.getSourceId(), source.getControllerId(), game);
public class LastBreath extends CardImpl {
public LastBreath(UUID ownerId) {
public LastBreath(final LastBreath card) {
public LastBreath copy() {return new LastBreath(this);
class LastBreathEffect extends OneShotEffect {
LastBreathEffect() {
LastBreathEffect(final LastBreathEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public LastBreathEffect copy() {return new LastBreathEffect(this);
public class LeechBonder extends CardImpl {
public LeechBonder(UUID ownerId) {
public LeechBonder(final LeechBonder card) {
public LeechBonder copy() {return new LeechBonder(this);
class LeechBonderEffect extends OneShotEffect {
public LeechBonderEffect() {
public LeechBonderEffect(final LeechBonderEffect effect) {
public LeechBonderEffect copy() {return new LeechBonderEffect(this);
public boolean apply(Game game, Ability source) {
|| controller == null) {return false;return true;return false;
public class LeechriddenSwamp extends CardImpl {
public LeechriddenSwamp(UUID ownerId) {
public LeechriddenSwamp(final LeechriddenSwamp card) {
public LeechriddenSwamp copy() {return new LeechriddenSwamp(this);
public boolean apply(Game game, Ability source) {return true;return new LeechriddenSwampLoseLifeEffect(this);
public class LoamdraggerGiant extends CardImpl {
public LoamdraggerGiant(UUID ownerId) {
public LoamdraggerGiant(final LoamdraggerGiant card) {
public LoamdraggerGiant copy() {return new LoamdraggerGiant(this);
public class LochKorrigan extends CardImpl {
public LochKorrigan(UUID ownerId) {
public LochKorrigan(final LochKorrigan card) {
public LochKorrigan copy() {return new LochKorrigan(this);
public class LockjawSnapper extends CardImpl {
public LockjawSnapper(UUID ownerId) {
public LockjawSnapper(final LockjawSnapper card) {
public LockjawSnapper copy() {return new LockjawSnapper(this);
class LockjawSnapperEffect extends OneShotEffect {
public LockjawSnapperEffect() {
public LockjawSnapperEffect(final LockjawSnapperEffect effect) {
public LockjawSnapperEffect copy() {return new LockjawSnapperEffect(this);
public boolean apply(Game game, Ability source) {return true;return applied;
public class LureboundScarecrow extends CardImpl {
public LureboundScarecrow(UUID ownerId) {
public LureboundScarecrow(final LureboundScarecrow card) {
public LureboundScarecrow copy() {return new LureboundScarecrow(this);
class LureboundScarecrowTriggeredAbility extends StateTriggeredAbility {
public LureboundScarecrowTriggeredAbility() {
public LureboundScarecrowTriggeredAbility(LureboundScarecrowTriggeredAbility ability) {
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;return false;
public LureboundScarecrowTriggeredAbility copy() {return new LureboundScarecrowTriggeredAbility(this);
public String getRule() {return staticText;
public class MadblindMountain extends CardImpl {
public MadblindMountain(UUID ownerId) {
public MadblindMountain(final MadblindMountain card) {
public MadblindMountain copy() {return new MadblindMountain(this);return new ManaforgeCinder(this);return new ManaforgeCinderManaEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;
public class Manamorphose extends CardImpl {
public Manamorphose(UUID ownerId) {
public Manamorphose(final Manamorphose card) {
public Manamorphose copy() {return new Manamorphose(this);
public class ManaReflection extends CardImpl {
public ManaReflection(UUID ownerId) {
public ManaReflection(final ManaReflection card) {
public ManaReflection copy() {return new ManaReflection(this);
class ManaReflectionReplacementEffect extends ReplacementEffectImpl {
ManaReflectionReplacementEffect() {
ManaReflectionReplacementEffect(ManaReflectionReplacementEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TAPPED_FOR_MANA;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId())
public ManaReflectionReplacementEffect copy() {return new ManaReflectionReplacementEffect(this);return new MassCalcify(this);
public class MemorySluice extends CardImpl {
public MemorySluice(UUID ownerId) {
public MemorySluice(final MemorySluice card) {
public MemorySluice copy() {return new MemorySluice(this);
public class MercyKilling extends CardImpl {
public MercyKilling(UUID ownerId) {
public MercyKilling(final MercyKilling card) {
public MercyKilling copy() {return new MercyKilling(this);
class MercyKillingTokenEffect extends OneShotEffect {
public MercyKillingTokenEffect() {
public MercyKillingTokenEffect(final MercyKillingTokenEffect effect) {
public MercyKillingTokenEffect copy() {return new MercyKillingTokenEffect(this);
public boolean apply(Game game, Ability source) {return new MercyKillingToken().putOntoBattlefield(power, game, source.getSourceId(), permanent.getControllerId());return false;
class MercyKillingToken extends Token {
public MercyKillingToken() {
public class MerrowGrimeblotter extends CardImpl {
public MerrowGrimeblotter(UUID ownerId) {
public MerrowGrimeblotter(final MerrowGrimeblotter card) {
public MerrowGrimeblotter copy() {return new MerrowGrimeblotter(this);
public class MerrowWavebreakers extends CardImpl {
public MerrowWavebreakers(UUID ownerId) {
public MerrowWavebreakers(final MerrowWavebreakers card) {
public MerrowWavebreakers copy() {return new MerrowWavebreakers(this);
public class MidnightBanshee extends CardImpl {
public MidnightBanshee(UUID ownerId) {
public MidnightBanshee(final MidnightBanshee card) {
public MidnightBanshee copy() {return new MidnightBanshee(this);
public class MineExcavation extends CardImpl {
public MineExcavation(UUID ownerId) {
public MineExcavation(final MineExcavation card) {
public MineExcavation copy() {return new MineExcavation(this);
public class Mirrorweave extends CardImpl {
public Mirrorweave(UUID ownerId) {
public Mirrorweave(final Mirrorweave card) {
public Mirrorweave copy() {return new Mirrorweave(this);
class MirrorWeaveEffect extends OneShotEffect {
public MirrorWeaveEffect() {
public MirrorWeaveEffect(final MirrorWeaveEffect effect) {
public MirrorWeaveEffect copy() {return new MirrorWeaveEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new MistmeadowSkulk(this);return new MistmeadowWitch(this);
public boolean apply(Game game, Ability source) {return true;return false;return new MistmeadowWitchEffect(this);
public class MistveilPlains extends CardImpl {
public MistveilPlains(UUID ownerId) {
public MistveilPlains(final MistveilPlains card) {
public MistveilPlains copy() {return new MistveilPlains(this);
class MistveilPlainsGraveyardToLibraryEffect extends OneShotEffect {
public MistveilPlainsGraveyardToLibraryEffect() {
public MistveilPlainsGraveyardToLibraryEffect(final MistveilPlainsGraveyardToLibraryEffect effect) {
public MistveilPlainsGraveyardToLibraryEffect copy() {return new MistveilPlainsGraveyardToLibraryEffect(this);
public boolean apply(Game game, Ability source) {return card.moveToZone(Zone.LIBRARY, source.getSourceId(), game, false);return false;
public class MoonringIsland extends CardImpl {
public MoonringIsland(UUID ownerId) {
public MoonringIsland(final MoonringIsland card) {
public MoonringIsland copy() {return new MoonringIsland(this);
public class Morselhoarder extends CardImpl {
public Morselhoarder(UUID ownerId) {
public Morselhoarder(final Morselhoarder card) {
public Morselhoarder copy() {return new Morselhoarder(this);
class MorselhoarderAbility extends ManaAbility {
public MorselhoarderAbility() {
public MorselhoarderAbility(Cost cost) {
public MorselhoarderAbility(final MorselhoarderAbility ability) {
public MorselhoarderAbility copy() {return new MorselhoarderAbility(this);
public class MossbridgeTroll extends CardImpl {
public MossbridgeTroll(UUID ownerId) {
public MossbridgeTroll(final MossbridgeTroll card) {
public MossbridgeTroll copy() {return new MossbridgeTroll(this);
class MossbridgeTrollReplacementEffect extends ReplacementEffectImpl {
MossbridgeTrollReplacementEffect() {
MossbridgeTrollReplacementEffect(MossbridgeTrollReplacementEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {
public class MudbrawlerCohort extends CardImpl {
public MudbrawlerCohort(UUID ownerId) {
public MudbrawlerCohort(final MudbrawlerCohort card) {
public MudbrawlerCohort copy() {return new MudbrawlerCohort(this);
public class MudbrawlerRaiders extends CardImpl {
public MudbrawlerRaiders(UUID ownerId) {
public MudbrawlerRaiders(final MudbrawlerRaiders card) {
public MudbrawlerRaiders copy() {return new MudbrawlerRaiders(this);
public class MurderousRedcap extends CardImpl {
public MurderousRedcap(UUID ownerId) {
public MurderousRedcap(final MurderousRedcap card) {
public MurderousRedcap copy() {return new MurderousRedcap(this);
class MurderousRedcapEffect extends OneShotEffect {
public MurderousRedcapEffect() {
public MurderousRedcapEffect(final MurderousRedcapEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public MurderousRedcapEffect copy() {return new MurderousRedcapEffect(this);
public class MysticGate extends CardImpl {
public MysticGate(UUID ownerId) {
public MysticGate(final MysticGate card) {
public MysticGate copy() {return new MysticGate(this);
public class NiveousWisps extends CardImpl {
public NiveousWisps (UUID ownerId) {
public NiveousWisps (final NiveousWisps card) {
public NiveousWisps copy() {return new NiveousWisps(this);
public class OonaQueenOfTheFae extends CardImpl {
public OonaQueenOfTheFae(UUID ownerId) {
public OonaQueenOfTheFae(final OonaQueenOfTheFae card) {
public OonaQueenOfTheFae copy() {return new OonaQueenOfTheFae(this);
class OonaQueenOfTheFaeEffect extends OneShotEffect {
public OonaQueenOfTheFaeEffect() {
public OonaQueenOfTheFaeEffect(final OonaQueenOfTheFaeEffect effect) {
public OonaQueenOfTheFaeEffect copy() {return new OonaQueenOfTheFaeEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
class OonaQueenFaerieToken extends Token {
OonaQueenFaerieToken() {
public class OonasGatewarden extends CardImpl {
public OonasGatewarden(UUID ownerId) {
public OonasGatewarden(final OonasGatewarden card) {
public OonasGatewarden copy() {return new OonasGatewarden(this);
public class OracleOfNectars extends CardImpl {
public OracleOfNectars(UUID ownerId) {
public OracleOfNectars(final OracleOfNectars card) {
public OracleOfNectars copy() {return new OracleOfNectars(this);
public class OrderOfWhiteclay extends CardImpl {
public OrderOfWhiteclay(UUID ownerId) {
public OrderOfWhiteclay(final OrderOfWhiteclay card) {
public OrderOfWhiteclay copy() {return new OrderOfWhiteclay(this);
public class OversoulOfDusk extends CardImpl {
public OversoulOfDusk(UUID ownerId) {
public OversoulOfDusk(final OversoulOfDusk card) {
public OversoulOfDusk copy() {return new OversoulOfDusk(this);
public class PaintersServant extends CardImpl {
public PaintersServant(UUID ownerId) {
public PaintersServant(final PaintersServant card) {
public PaintersServant copy() {return new PaintersServant(this);
class PaintersServantEffect extends ContinuousEffectImpl {
public PaintersServantEffect() {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public PaintersServantEffect copy() {return new PaintersServantEffect(this);
private PaintersServantEffect(PaintersServantEffect effect) {
public class PaleWayfarer extends CardImpl {
public PaleWayfarer(UUID ownerId) {
public PaleWayfarer(final PaleWayfarer card) {
public PaleWayfarer copy() {return new PaleWayfarer(this);
class PaleWayfarerEffect extends OneShotEffect {
public PaleWayfarerEffect() {
public PaleWayfarerEffect(final PaleWayfarerEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public PaleWayfarerEffect copy() {return new PaleWayfarerEffect(this);
public class ParapetWatchers extends CardImpl {
public ParapetWatchers(UUID ownerId) {
public ParapetWatchers(final ParapetWatchers card) {
public ParapetWatchers copy() {return new ParapetWatchers(this);
public class PiliPala extends CardImpl {
public PiliPala(UUID ownerId) {
public PiliPala(final PiliPala card) {
public PiliPala copy() {return new PiliPala(this);
public class PlagueOfVermin extends CardImpl {
public PlagueOfVermin(UUID ownerId) {
public PlagueOfVermin(final PlagueOfVermin card) {
public PlagueOfVermin copy() {return new PlagueOfVermin(this);
class PlagueOfVerminEffect extends OneShotEffect {
public PlagueOfVerminEffect() {
public PlagueOfVerminEffect(final PlagueOfVerminEffect effect) {
public PlagueOfVerminEffect copy() {return new PlagueOfVerminEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Plumeveil extends CardImpl {
public Plumeveil(UUID ownerId) {
public Plumeveil(final Plumeveil card) {
public Plumeveil copy() {return new Plumeveil(this);
public class PoisonTheWell extends CardImpl {
public PoisonTheWell(UUID ownerId) {
public PoisonTheWell(final PoisonTheWell card) {
public PoisonTheWell copy() {return new PoisonTheWell(this);
public class PollutedBonds extends CardImpl {
public PollutedBonds(UUID ownerId) {
public PollutedBonds(final PollutedBonds card) {
public PollutedBonds copy() {return new PollutedBonds(this);
class PollutedBondsEffect extends OneShotEffect {
public PollutedBondsEffect() {
public PollutedBondsEffect(final PollutedBondsEffect effect) {
public PollutedBondsEffect copy() {return new PollutedBondsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PrismaticOmen extends CardImpl {
public PrismaticOmen(UUID ownerId) {
public PrismaticOmen(final PrismaticOmen card) {
public PrismaticOmen copy() {return new PrismaticOmen(this);
class BecomesBasicLandTypeAllEffect extends ContinuousEffectImpl {
public BecomesBasicLandTypeAllEffect(final BecomesBasicLandTypeAllEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public BecomesBasicLandTypeAllEffect copy() {return new BecomesBasicLandTypeAllEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class PrismwakeMerrow extends CardImpl {
public PrismwakeMerrow(UUID ownerId) {
public PrismwakeMerrow(final PrismwakeMerrow card) {
public PrismwakeMerrow copy() {return new PrismwakeMerrow(this);
public class PrisonTerm extends CardImpl {
public PrisonTerm(UUID ownerId) {
public PrisonTerm(final PrisonTerm card) {
public PrisonTerm copy() {return new PrisonTerm(this);
class PrisonTermEffect extends OneShotEffect {
public PrisonTermEffect() {
public PrisonTermEffect(final PrisonTermEffect effect) {
public boolean apply(Game game, Ability source) {return false;return opponentCreature.addAttachment(prisonTerm.getId(), game);return false;
public PrisonTermEffect copy() {return new PrisonTermEffect(this);
public class PucasMischief extends CardImpl {
public PucasMischief(UUID ownerId) {
public PucasMischief(final PucasMischief card) {
public PucasMischief copy() {return new PucasMischief(this);
class TargetControlledPermanentWithCMCGreaterOrLessThanOpponentPermanent extends TargetControlledPermanent {
public TargetControlledPermanentWithCMCGreaterOrLessThanOpponentPermanent() {
public TargetControlledPermanentWithCMCGreaterOrLessThanOpponentPermanent(final TargetControlledPermanentWithCMCGreaterOrLessThanOpponentPermanent target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return super.canTarget(controllerId, id, source, game);
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public TargetControlledPermanentWithCMCGreaterOrLessThanOpponentPermanent copy() {return new TargetControlledPermanentWithCMCGreaterOrLessThanOpponentPermanent(this);
class PucasMischiefSecondTarget extends TargetPermanent {
public PucasMischiefSecondTarget() {
public PucasMischiefSecondTarget(final PucasMischiefSecondTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return target1.getManaCost().convertedManaCost() >= opponentPermanent.getManaCost().convertedManaCost();return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public boolean chooseTarget(Outcome outcome, UUID playerId, Ability source, Game game) {return super.chooseTarget(Outcome.GainControl, playerId, source, game);
public PucasMischiefSecondTarget copy() {return new PucasMischiefSecondTarget(this);
public class PunctureBolt extends CardImpl {
public PunctureBolt(UUID ownerId) {
public PunctureBolt(final PunctureBolt card) {
public PunctureBolt copy() {return new PunctureBolt(this);
public class PutAway extends CardImpl {
public PutAway(UUID ownerId) {
public PutAway(final PutAway card) {
public PutAway copy() {return new PutAway(this);
class PutAwayEffect extends OneShotEffect {
public PutAwayEffect() {
public PutAwayEffect(final PutAwayEffect effect) {
public PutAwayEffect copy() {return new PutAwayEffect(this);
public boolean apply(Game game, Ability source) {return countered;
public class PyreCharger extends CardImpl {
public PyreCharger(UUID ownerId) {
public PyreCharger(final PyreCharger card) {
public PyreCharger copy() {return new PyreCharger(this);
public class RageReflection extends CardImpl {
public RageReflection(UUID ownerId) {
public RageReflection(final RageReflection card) {
public RageReflection copy() {return new RageReflection(this);
public class RakingCanopy extends CardImpl {
public RakingCanopy(UUID ownerId) {
public RakingCanopy(final RakingCanopy card) {
public RakingCanopy copy() {return new RakingCanopy(this);
class RakingCanopyTriggeredAbility extends TriggeredAbilityImpl {
public RakingCanopyTriggeredAbility() {
public RakingCanopyTriggeredAbility(final RakingCanopyTriggeredAbility ability) {
public RakingCanopyTriggeredAbility copy() {return new RakingCanopyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return false;return true;return false;
public String getRule() {return "Whenever a creature with flying attacks you, {this} deals 4 damage to it.";
public class RattleblazeScarecrow extends CardImpl {
public RattleblazeScarecrow(UUID ownerId) {
public RattleblazeScarecrow(final RattleblazeScarecrow card) {
public RattleblazeScarecrow copy() {return new RattleblazeScarecrow(this);
public class RavensRunDragoon extends CardImpl {
public RavensRunDragoon(UUID ownerId) {
public RavensRunDragoon(final RavensRunDragoon card) {
public RavensRunDragoon copy() {return new RavensRunDragoon(this);
public class ReaperKing extends CardImpl {
public ReaperKing(UUID ownerId) {
public ReaperKing(final ReaperKing card) {
public ReaperKing copy() {return new ReaperKing(this);
public class Reknit extends CardImpl {
public Reknit(UUID ownerId) {
public Reknit(final Reknit card) {
public Reknit copy() {return new Reknit(this);
public class RepelIntruders extends CardImpl {
public RepelIntruders(UUID ownerId) {
public RepelIntruders(final RepelIntruders card) {
public RepelIntruders copy() {return new RepelIntruders(this);
public class ResplendentMentor extends CardImpl {
public ResplendentMentor(UUID ownerId) {
public ResplendentMentor(final ResplendentMentor card) {
public ResplendentMentor copy() {return new ResplendentMentor(this);
public class RevelsongHorn extends CardImpl {
public RevelsongHorn(UUID ownerId) {
public RevelsongHorn(final RevelsongHorn card) {
public RevelsongHorn copy() {return new RevelsongHorn(this);
public class RhysTheRedeemed extends CardImpl {
public RhysTheRedeemed(UUID ownerId) {
public RhysTheRedeemed(final RhysTheRedeemed card) {
public RhysTheRedeemed copy() {return new RhysTheRedeemed(this);
class RhysTheRedeemedEffect extends OneShotEffect {
public RhysTheRedeemedEffect() {
public RhysTheRedeemedEffect(final RhysTheRedeemedEffect effect) {
public RhysTheRedeemedEffect copy() {return new RhysTheRedeemedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class RhysTheRedeemedToken extends Token {
public RhysTheRedeemedToken() {
public class RiteOfConsumption extends CardImpl {
public RiteOfConsumption(UUID ownerId) {
public RiteOfConsumption(final RiteOfConsumption card) {
public RiteOfConsumption copy() {return new RiteOfConsumption(this);
class RiteOfConsumptionEffect extends OneShotEffect {
public RiteOfConsumptionEffect() {
public RiteOfConsumptionEffect(final RiteOfConsumptionEffect effect) {
public RiteOfConsumptionEffect copy() {return new RiteOfConsumptionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RiverKelpie extends CardImpl {
public RiverKelpie(UUID ownerId) {
public RiverKelpie(final RiverKelpie card) {
public RiverKelpie copy() {return new RiverKelpie(this);
class RiverKelpieTriggeredAbility extends TriggeredAbilityImpl {
public RiverKelpieTriggeredAbility copy() {return new RiverKelpieTriggeredAbility(this);
public RiverKelpieTriggeredAbility(final RiverKelpieTriggeredAbility ability) {
public RiverKelpieTriggeredAbility() {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return zEvent.getFromZone() == Zone.GRAVEYARD && zEvent.getToZone() == Zone.BATTLEFIELD;
public String getRule() {return "Whenever {this} or another permanent is put onto the battlefield from a graveyard, draw a card.";
class RiverKelpieTriggeredAbility2 extends TriggeredAbilityImpl {
public RiverKelpieTriggeredAbility2() {
public RiverKelpieTriggeredAbility2(final RiverKelpieTriggeredAbility2 ability) {
public RiverKelpieTriggeredAbility2 copy() {return new RiverKelpieTriggeredAbility2(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return event.getZone() == Zone.GRAVEYARD;
public String getRule() {return "Whenever a player casts a spell from a graveyard, draw a card.";
public class RiversGrasp extends CardImpl {
public RiversGrasp(UUID ownerId) {new ManaWasSpentCondition(ColoredManaSymbol.U), "If {U} was spent to cast {this}, return up to one target creature to its owner's hand"));
public RiversGrasp(final RiversGrasp card) {
public RiversGrasp copy() {return new RiversGrasp(this);
class RiversGraspEffect extends OneShotEffect {
public RiversGraspEffect() {
public RiversGraspEffect(final RiversGraspEffect effect) {
public RiversGraspEffect copy() {return new RiversGraspEffect(this);
public boolean apply(Game game, Ability source) {return player.discard(card, source, game);return false;
public class RosheenMeanderer extends CardImpl {
public RosheenMeanderer(UUID ownerId) {
public RosheenMeanderer(final RosheenMeanderer card) {
public RosheenMeanderer copy() {return new RosheenMeanderer(this);
class RosheenMeandererManaAbility extends BasicManaAbility {
RosheenMeandererManaAbility() {
RosheenMeandererManaAbility(RosheenMeandererManaAbility ability) {
public RosheenMeandererManaAbility copy() {return new RosheenMeandererManaAbility(this);
class RosheenMeandererConditionalMana extends ConditionalMana {
public RosheenMeandererConditionalMana() {
class RosheenMeandererManaCondition implements Condition {
public boolean apply(Game game, Ability source) {return object != nullreturn source.getManaCosts().getText().contains("X");
public class RoughshodMentor extends CardImpl {
public RoughshodMentor(UUID ownerId) {
public RoughshodMentor(final RoughshodMentor card) {
public RoughshodMentor copy() {return new RoughshodMentor(this);
public class RuneCervinRider extends CardImpl {
public RuneCervinRider(UUID ownerId) {
public RuneCervinRider(final RuneCervinRider card) {
public RuneCervinRider copy() {return new RuneCervinRider(this);
public class RustrazorButcher extends CardImpl {
public RustrazorButcher(UUID ownerId) {
public RustrazorButcher(final RustrazorButcher card) {
public RustrazorButcher copy() {return new RustrazorButcher(this);
public class SafeholdDuo extends CardImpl {
public SafeholdDuo(UUID ownerId) {
public SafeholdDuo(final SafeholdDuo card) {
public SafeholdDuo copy() {return new SafeholdDuo(this);
public class SafeholdElite extends CardImpl {
public SafeholdElite(UUID ownerId) {
public SafeholdElite(final SafeholdElite card) {
public SafeholdElite copy() {return new SafeholdElite(this);
public class SafeholdSentry extends CardImpl {
public SafeholdSentry(UUID ownerId) {
public SafeholdSentry(final SafeholdSentry card) {
public SafeholdSentry copy() {return new SafeholdSentry(this);
public class SafewrightQuest extends CardImpl {
public SafewrightQuest(UUID ownerId) {
public SafewrightQuest(final SafewrightQuest card) {
public SafewrightQuest copy() {return new SafewrightQuest(this);
public class SapseepForest extends CardImpl {
public SapseepForest(UUID ownerId) {
public SapseepForest(final SapseepForest card) {
public SapseepForest copy() {return new SapseepForest(this);
public class SavorTheMoment extends CardImpl {
public SavorTheMoment(UUID ownerId) {
public SavorTheMoment(final SavorTheMoment card) {
public SavorTheMoment copy() {return new SavorTheMoment(this);
class SkipNextUntapStepSourceControllerEffect extends OneShotEffect {
public SkipNextUntapStepSourceControllerEffect() {
public SkipNextUntapStepSourceControllerEffect(SkipNextUntapStepSourceControllerEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SkipNextUntapStepSourceControllerEffect copy() {return new SkipNextUntapStepSourceControllerEffect(this);
public class Scar extends CardImpl {
public Scar(UUID ownerId) {
public Scar(final Scar card) {
public Scar copy() {return new Scar(this);
public class ScarscaleRitual extends CardImpl {
public ScarscaleRitual(UUID ownerId) {
public ScarscaleRitual(final ScarscaleRitual card) {
public ScarscaleRitual copy() {return new ScarscaleRitual(this);
class ScarscaleRitualCost extends CostImpl {
public ScarscaleRitualCost() {
public ScarscaleRitualCost(ScarscaleRitualCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return permanent != null;return false;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public ScarscaleRitualCost copy() {return new ScarscaleRitualCost(this);
public class Scrapbasket extends CardImpl {
public Scrapbasket(UUID ownerId) {
public Scrapbasket(final Scrapbasket card) {
public Scrapbasket copy() {return new Scrapbasket(this);
class BecomesAllColorsEffect extends ContinuousEffectImpl {
public BecomesAllColorsEffect() {
public BecomesAllColorsEffect(final BecomesAllColorsEffect effect) {
public BecomesAllColorsEffect copy() {return new BecomesAllColorsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Scuttlemutt extends CardImpl {
public Scuttlemutt(UUID ownerId) {
public Scuttlemutt(final Scuttlemutt card) {
public Scuttlemutt copy() {return new Scuttlemutt(this);
public class ScuzzbackMarauders extends CardImpl {
public ScuzzbackMarauders(UUID ownerId) {
public ScuzzbackMarauders(final ScuzzbackMarauders card) {
public ScuzzbackMarauders copy() {return new ScuzzbackMarauders(this);
public class ScuzzbackScrapper extends CardImpl {
public ScuzzbackScrapper(UUID ownerId) {
public ScuzzbackScrapper(final ScuzzbackScrapper card) {
public ScuzzbackScrapper copy() {return new ScuzzbackScrapper(this);
public class SeedcradleWitch extends CardImpl {
public SeedcradleWitch(UUID ownerId) {
public SeedcradleWitch(final SeedcradleWitch card) {
public SeedcradleWitch copy() {return new SeedcradleWitch(this);
public class ShieldOfTheOversoul extends CardImpl {
public ShieldOfTheOversoul(UUID ownerId) {
public ShieldOfTheOversoul(final ShieldOfTheOversoul card) {
public ShieldOfTheOversoul copy() {return new ShieldOfTheOversoul(this);
public class SickleRipper extends CardImpl {
public SickleRipper(UUID ownerId) {
public SickleRipper(final SickleRipper card) {
public SickleRipper copy() {return new SickleRipper(this);
public class SilkbindFaerie extends CardImpl {
public SilkbindFaerie(UUID ownerId) {
public SilkbindFaerie(final SilkbindFaerie card) {
public SilkbindFaerie copy() {return new SilkbindFaerie(this);
public class SinkingFeeling extends CardImpl {
public SinkingFeeling(UUID ownerId) {
public SinkingFeeling(final SinkingFeeling card) {
public SinkingFeeling copy() {return new SinkingFeeling(this);
public class SmolderInitiate extends CardImpl {
public SmolderInitiate(UUID ownerId) {
public SmolderInitiate(final SmolderInitiate card) {
public SmolderInitiate copy() {return new SmolderInitiate(this);
public class Somnomancer extends CardImpl {
public Somnomancer(UUID ownerId) {
public Somnomancer(final Somnomancer card) {
public Somnomancer copy() {return new Somnomancer(this);
public class SootstokeKindler extends CardImpl {
public SootstokeKindler(UUID ownerId) {
public SootstokeKindler(final SootstokeKindler card) {
public SootstokeKindler copy() {return new SootstokeKindler(this);
public class Sootwalkers extends CardImpl {
public Sootwalkers(UUID ownerId) {
public Sootwalkers(final Sootwalkers card) {
public Sootwalkers copy() {return new Sootwalkers(this);
public class SpectralProcession extends CardImpl {
public SpectralProcession(UUID ownerId) {
public SpectralProcession(final SpectralProcession card) {
public SpectralProcession copy() {return new SpectralProcession(this);
public class SpellSyphon extends CardImpl {
public SpellSyphon(UUID ownerId) {
public SpellSyphon(final SpellSyphon card) {
public SpellSyphon copy() {return new SpellSyphon(this);
class SpellSyphonEffect extends OneShotEffect {
public SpellSyphonEffect() {
public SpellSyphonEffect(final SpellSyphonEffect effect) {
public SpellSyphonEffect copy() {return new SpellSyphonEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(source.getFirstTarget(), source.getSourceId(), game);return false;
public String getText(Mode mode) {return "Counter target spell unless its controller pays {1} for each blue permanent you control";
public class SpiteflameWitch extends CardImpl {
public SpiteflameWitch(UUID ownerId) {
public SpiteflameWitch(final SpiteflameWitch card) {
public SpiteflameWitch copy() {return new SpiteflameWitch(this);
public class SpitefulVisions extends CardImpl {
public SpitefulVisions(UUID ownerId) {
public SpitefulVisions(final SpitefulVisions card) {
public SpitefulVisions copy() {return new SpitefulVisions(this);
class SpitefulVisionsTriggeredAbility extends TriggeredAbilityImpl {
public SpitefulVisionsTriggeredAbility(Effect effect, boolean optional) {
public SpitefulVisionsTriggeredAbility(final SpitefulVisionsTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DREW_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player draws a card, Spiteful Visions deals 1 damage to that player.";
public SpitefulVisionsTriggeredAbility copy() {return new SpitefulVisionsTriggeredAbility(this);
public class SplittingHeadache extends CardImpl {
public SplittingHeadache(UUID ownerId) {
public SplittingHeadache(final SplittingHeadache card) {
public SplittingHeadache copy() {return new SplittingHeadache(this);
class SplittingHeadacheEffect extends OneShotEffect {
public SplittingHeadacheEffect() {
public SplittingHeadacheEffect(final SplittingHeadacheEffect effect) {
public SplittingHeadacheEffect copy() {return new SplittingHeadacheEffect(this);
public boolean apply(Game game, Ability source) {return player.discard(card, source, game);return false;
public class SteelOfTheGodhead extends CardImpl {
public SteelOfTheGodhead(UUID ownerId) {
public SteelOfTheGodhead(final SteelOfTheGodhead card) {
public SteelOfTheGodhead copy() {return new SteelOfTheGodhead(this);
public class StripBare extends CardImpl {
public StripBare(UUID ownerId) {
public StripBare(final StripBare card) {
public StripBare copy() {return new StripBare(this);
class StripBareEffect extends OneShotEffect {
public StripBareEffect() {
public StripBareEffect(final StripBareEffect effect) {
public StripBareEffect copy() {return new StripBareEffect(this);
public boolean apply(Game game, Ability source) {return applied;
public class SunkenRuins extends CardImpl {
public SunkenRuins(UUID ownerId) {
public SunkenRuins(final SunkenRuins card) {
public SunkenRuins copy() {return new SunkenRuins(this);
public class SwansOfBrynArgoll extends CardImpl {
public SwansOfBrynArgoll(UUID ownerId) {
public SwansOfBrynArgoll(final SwansOfBrynArgoll card) {
public SwansOfBrynArgoll copy() {return new SwansOfBrynArgoll(this);
class SwansOfBrynArgollEffect extends PreventionEffectImpl {
SwansOfBrynArgollEffect() {
SwansOfBrynArgollEffect(final SwansOfBrynArgollEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return preventionEffectData.isReplaced();
public boolean applies(GameEvent event, Ability source, Game game) {return event.getType() == EventType.DAMAGE_CREATURE
public boolean apply(Game game, Ability source) {return true;
public SwansOfBrynArgollEffect copy() {return new SwansOfBrynArgollEffect(this);
public class SyggRiverCutthroat extends CardImpl {
public SyggRiverCutthroat(UUID ownerId) {
public SyggRiverCutthroat(final SyggRiverCutthroat card) {
public SyggRiverCutthroat copy() {return new SyggRiverCutthroat(this);
public class Tatterkite extends CardImpl {
public Tatterkite(UUID ownerId) {
public Tatterkite(final Tatterkite card) {
public Tatterkite copy() {return new Tatterkite(this);
public CantHaveCountersSourceEffect(Duration duration) {
public CantHaveCountersSourceEffect(final CantHaveCountersSourceEffect effect) {
public CantHaveCountersSourceEffect copy() {return new CantHaveCountersSourceEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ADD_COUNTERS;
public boolean applies(GameEvent event, Ability source, Game game) {return sourceId.equals(event.getTargetId());return false;
public class TattermungeDuo extends CardImpl {
public TattermungeDuo(UUID ownerId) {
public TattermungeDuo(final TattermungeDuo card) {
public TattermungeDuo copy() {return new TattermungeDuo(this);
public class TattermungeManiac extends CardImpl {
public TattermungeManiac(UUID ownerId) {
public TattermungeManiac(final TattermungeManiac card) {
public TattermungeManiac copy() {return new TattermungeManiac(this);
public class TattermungeWitch extends CardImpl {
public TattermungeWitch(UUID ownerId) {
public TattermungeWitch(final TattermungeWitch card) {
public TattermungeWitch copy() {return new TattermungeWitch(this);
public class ThornwatchScarecrow extends CardImpl {
public ThornwatchScarecrow(UUID ownerId) {
public ThornwatchScarecrow(final ThornwatchScarecrow card) {
public ThornwatchScarecrow copy() {return new ThornwatchScarecrow(this);
public class ThoughtReflection extends CardImpl {
public ThoughtReflection(UUID ownerId) {
public ThoughtReflection(final ThoughtReflection card) {
public ThoughtReflection copy() {return new ThoughtReflection(this);
class ThoughtReflectionReplacementEffect extends ReplacementEffectImpl {
public ThoughtReflectionReplacementEffect() {
public ThoughtReflectionReplacementEffect(final ThoughtReflectionReplacementEffect effect) {
public ThoughtReflectionReplacementEffect copy() {return new ThoughtReflectionReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public class ThoughtweftGambit extends CardImpl {
public ThoughtweftGambit(UUID ownerId) {
public ThoughtweftGambit(final ThoughtweftGambit card) {
public ThoughtweftGambit copy() {return new ThoughtweftGambit(this);
class ThoughtweftGambitEffect extends OneShotEffect {
public ThoughtweftGambitEffect() {
public ThoughtweftGambitEffect(final ThoughtweftGambitEffect effect) {
public boolean apply(Game game, Ability source) {return passed;
public ThoughtweftGambitEffect copy() {return new ThoughtweftGambitEffect(this);
public class ToilToRenown extends CardImpl {
public ToilToRenown(UUID ownerId) {
public ToilToRenown(final ToilToRenown card) {
public ToilToRenown copy() {return new ToilToRenown(this);
public class TorporDust extends CardImpl {
public TorporDust(UUID ownerId) {
public TorporDust(final TorporDust card) {
public TorporDust copy() {return new TorporDust(this);
public class TowerAbove extends CardImpl {
public TowerAbove(UUID ownerId) {
public TowerAbove(final TowerAbove card) {
public TowerAbove copy() {return new TowerAbove(this);
class TowerAboveEffect extends OneShotEffect {
public TowerAboveEffect() {
public TowerAboveEffect(final TowerAboveEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public TowerAboveEffect copy() {return new TowerAboveEffect(this);
class TowerAboveTriggeredAbility extends TriggeredAbilityImpl {
public TowerAboveTriggeredAbility() {
public TowerAboveTriggeredAbility(final TowerAboveTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever this creature attacks, target creature blocks it this turn if able.";
public TowerAboveTriggeredAbility copy() {return new TowerAboveTriggeredAbility(this);
public class TraitorsRoar extends CardImpl {
public TraitorsRoar(UUID ownerId) {
public TraitorsRoar(final TraitorsRoar card) {
public TraitorsRoar copy() {return new TraitorsRoar(this);
class TraitorsRoarEffect extends OneShotEffect {
public TraitorsRoarEffect() {
public TraitorsRoarEffect(final TraitorsRoarEffect effect) {
public TraitorsRoarEffect copy() {return new TraitorsRoarEffect(this);
public boolean apply(Game game, Ability source) {return applied;
public class TurnToMist extends CardImpl {
public TurnToMist(UUID ownerId) {
public TurnToMist(final TurnToMist card) {
public TurnToMist copy() {return new TurnToMist(this);
public class TwilightShepherd extends CardImpl {
public TwilightShepherd(UUID ownerId) {
public TwilightShepherd(final TwilightShepherd card) {
public TwilightShepherd copy() {return new TwilightShepherd(this);
class TwilightShepherdEffect extends OneShotEffect {
public TwilightShepherdEffect() {this.staticText = "return to your hand all cards in your graveyard that were put there from the battlefield this turn";
public TwilightShepherdEffect(final TwilightShepherdEffect effect) {
public TwilightShepherdEffect copy() {return new TwilightShepherdEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Tyrannize extends CardImpl {
public Tyrannize(UUID ownerId) {
public Tyrannize(final Tyrannize card) {
public Tyrannize copy() {return new Tyrannize(this);
class TyrannizeEffect extends OneShotEffect {
TyrannizeEffect() {
TyrannizeEffect(final TyrannizeEffect effect) {
public TyrannizeEffect copy() {return new TyrannizeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class UmbralMantle extends CardImpl {
public UmbralMantle(UUID ownerId) {
public UmbralMantle(final UmbralMantle card) {
public UmbralMantle copy() {return new UmbralMantle(this);
public class Valleymaker extends CardImpl {
public Valleymaker(UUID ownerId) {
public Valleymaker(final Valleymaker card) {
public Valleymaker copy() {return new Valleymaker(this);
public class VexingShusher extends CardImpl {
public VexingShusher(UUID ownerId) {
public VexingShusher(final VexingShusher card) {
public VexingShusher copy() {return new VexingShusher(this);
public VexingShusherCantCounterTargetEffect() {
public VexingShusherCantCounterTargetEffect(final VexingShusherCantCounterTargetEffect effect) {
public VexingShusherCantCounterTargetEffect copy() {return new VexingShusherCantCounterTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "This spell can't be countered by spells or abilities (" + sourceObject.getName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTER;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(targetPointer.getFirst(game, source));
public class ViridescentWisps extends CardImpl {
public ViridescentWisps (UUID ownerId) {
public ViridescentWisps (final ViridescentWisps card) {
public ViridescentWisps copy() {return new ViridescentWisps(this);
public class WanderbrineRootcutters extends CardImpl {
public WanderbrineRootcutters(UUID ownerId) {
public WanderbrineRootcutters(final WanderbrineRootcutters card) {
public WanderbrineRootcutters copy() {return new WanderbrineRootcutters(this);
public class WaspLancer extends CardImpl {
public WaspLancer(UUID ownerId) {
public WaspLancer(final WaspLancer card) {
public WaspLancer copy() {return new WaspLancer(this);
public class WatchwingScarecrow extends CardImpl {
public WatchwingScarecrow(UUID ownerId) {
public WatchwingScarecrow(final WatchwingScarecrow card) {
public WatchwingScarecrow copy() {return new WatchwingScarecrow(this);
public class WheelOfSunAndMoon extends CardImpl {
public WheelOfSunAndMoon(UUID ownerId) {
public WheelOfSunAndMoon(final WheelOfSunAndMoon card) {
public WheelOfSunAndMoon copy() {return new WheelOfSunAndMoon(this);
class WheelOfSunAndMoonEffect extends ReplacementEffectImpl {
public WheelOfSunAndMoonEffect() {
public WheelOfSunAndMoonEffect(final WheelOfSunAndMoonEffect effect) {
public WheelOfSunAndMoonEffect copy() {return new WheelOfSunAndMoonEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public class WildslayerElves extends CardImpl {
public WildslayerElves(UUID ownerId) {
public WildslayerElves(final WildslayerElves card) {
public WildslayerElves copy() {return new WildslayerElves(this);
public class WildSwing extends CardImpl {
public WildSwing(UUID ownerId) {
public WildSwing(final WildSwing card) {
public WildSwing copy() {return new WildSwing(this);
class WildSwingEffect extends OneShotEffect {
public WildSwingEffect() {
public WildSwingEffect(final WildSwingEffect effect) {
public WildSwingEffect copy() {return new WildSwingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WiltLeafCavaliers extends CardImpl {
public WiltLeafCavaliers(UUID ownerId) {
public WiltLeafCavaliers(final WiltLeafCavaliers card) {
public WiltLeafCavaliers copy() {return new WiltLeafCavaliers(this);
public class WiltLeafLiege extends CardImpl {
public WiltLeafLiege(UUID ownerId) {
public WiltLeafLiege(final WiltLeafLiege card) {
public WiltLeafLiege copy() {return new WiltLeafLiege(this);
public class WindbriskRaptor extends CardImpl {
public WindbriskRaptor(UUID ownerId) {
public WindbriskRaptor(final WindbriskRaptor card) {
public WindbriskRaptor copy() {return new WindbriskRaptor(this);
public class WingrattleScarecrow extends CardImpl {
public WingrattleScarecrow(UUID ownerId) {
public WingrattleScarecrow(final WingrattleScarecrow card) {
public WingrattleScarecrow copy() {return new WingrattleScarecrow(this);
public class WitherscaleWurm extends CardImpl {
public WitherscaleWurm(UUID ownerId) {
public WitherscaleWurm(final WitherscaleWurm card) {
public WitherscaleWurm copy() {return new WitherscaleWurm(this);
public class Woeleecher extends CardImpl {
public Woeleecher(UUID ownerId) {
public Woeleecher(final Woeleecher card) {
public Woeleecher copy() {return new Woeleecher(this);
class WoeleecherEffect extends OneShotEffect {
public WoeleecherEffect() {
public WoeleecherEffect(final WoeleecherEffect effect) {
public WoeleecherEffect copy() {return new WoeleecherEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WoodedBastion extends CardImpl {
public WoodedBastion(UUID ownerId) {
public WoodedBastion(final WoodedBastion card) {
public WoodedBastion copy() {return new WoodedBastion(this);
public class WoodfallPrimus extends CardImpl {
public WoodfallPrimus(UUID ownerId) {
public WoodfallPrimus(final WoodfallPrimus card) {
public WoodfallPrimus copy() {return new WoodfallPrimus(this);
public class Worldpurge extends CardImpl {
public Worldpurge(UUID ownerId) {
public Worldpurge(final Worldpurge card) {
public Worldpurge copy() {return new Worldpurge(this);
class WorldpurgeEffect extends OneShotEffect {
public WorldpurgeEffect() {
public WorldpurgeEffect(final WorldpurgeEffect effect) {
public WorldpurgeEffect copy() {return new WorldpurgeEffect(this);
public boolean apply(Game game, Ability source) {game.informPlayers(sourceObject.getLogName() + " - All permanents returned to owners' hands");return true;return false;
public class WortTheRaidmother extends CardImpl {
public WortTheRaidmother(UUID ownerId) {
public WortTheRaidmother(final WortTheRaidmother card) {
public WortTheRaidmother copy() {return new WortTheRaidmother(this);
class WortGainConspireEffect extends ContinuousEffectImpl {
public WortGainConspireEffect() {
public WortGainConspireEffect(final WortGainConspireEffect effect) {
public WortGainConspireEffect copy() {return new WortGainConspireEffect(this);
public boolean apply(Game game, Ability source) {return true;
class WortTheRaidmotherToken extends Token {
public WortTheRaidmotherToken() {
public class WoundReflection extends CardImpl {
public WoundReflection(UUID ownerId) {
public WoundReflection(final WoundReflection card) {
public WoundReflection copy() {return new WoundReflection(this);
class WoundReflectionEffect extends OneShotEffect {
public WoundReflectionEffect() {
public WoundReflectionEffect(final WoundReflectionEffect effect) {
public WoundReflectionEffect copy() {return new WoundReflectionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ZealousGuardian extends CardImpl {
public ZealousGuardian(UUID ownerId) {
public ZealousGuardian(final ZealousGuardian card) {
public ZealousGuardian copy() {return new ZealousGuardian(this);
public class AdNauseam extends CardImpl {
public AdNauseam(UUID ownerId) {
public AdNauseam(final AdNauseam card) {
public AdNauseam copy() {return new AdNauseam(this);
class AdNauseamEffect extends OneShotEffect {
public AdNauseamEffect() {
public AdNauseamEffect(final AdNauseamEffect effect) {
public AdNauseamEffect copy() {return new AdNauseamEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class AgonyWarp extends CardImpl {
public AgonyWarp(UUID ownerId) {
public AgonyWarp(final AgonyWarp card) {
public AgonyWarp copy() {return new AgonyWarp(this);
public class AjaniVengeant extends CardImpl {
public AjaniVengeant(UUID ownerId) {
public AjaniVengeant(final AjaniVengeant card) {
public AjaniVengeant copy() {return new AjaniVengeant(this);
public class AkrasanSquire extends CardImpl {
public AkrasanSquire (UUID ownerId) {
public AkrasanSquire (final AkrasanSquire card) {
public AkrasanSquire copy() {return new AkrasanSquire(this);
public class AngelsHerald extends CardImpl {
public AngelsHerald(UUID ownerId) {
public AngelsHerald(final AngelsHerald card) {
public AngelsHerald copy() {return new AngelsHerald(this);
public class Angelsong extends CardImpl {
public Angelsong(UUID ownerId) {
public Angelsong(final Angelsong card) {
public Angelsong copy() {return new Angelsong(this);
public class ArcaneSanctum extends CardImpl {
public ArcaneSanctum (UUID ownerId) {
public ArcaneSanctum (final ArcaneSanctum card) {
public ArcaneSanctum copy() {return new ArcaneSanctum(this);
public class ArchdemonOfUnx extends CardImpl {
public ArchdemonOfUnx(UUID ownerId) {
public ArchdemonOfUnx(final ArchdemonOfUnx card) {
public ArchdemonOfUnx copy() {return new ArchdemonOfUnx(this);
public class BanewaspAffliction extends CardImpl {
public BanewaspAffliction(UUID ownerId) {
public BanewaspAffliction(final BanewaspAffliction card) {
public BanewaspAffliction copy() {return new BanewaspAffliction(this);return new BanewaspAfflictionLoseLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public String getText(Mode mode) {return "that creature's controller loses life equal to its toughness";
public class BantBattlemage extends CardImpl {
public BantBattlemage (UUID ownerId) {
public BantBattlemage (final BantBattlemage card) {
public BantBattlemage copy() {return new BantBattlemage(this);
public class BantCharm extends CardImpl {
public BantCharm(UUID ownerId) {
public BantCharm(final BantCharm card) {
public BantCharm copy() {return new BantCharm(this);
public class BantPanorama extends CardImpl {
public BantPanorama(UUID ownerId) {
public BantPanorama(final BantPanorama card) {
public BantPanorama copy() {return new BantPanorama(this);
public class BattlegraceAngel extends CardImpl {
public BattlegraceAngel (UUID ownerId) {
public BattlegraceAngel (final BattlegraceAngel card) {
public BattlegraceAngel copy() {return new BattlegraceAngel(this);
class BattlegraceAngelAbility extends TriggeredAbilityImpl {
public BattlegraceAngelAbility() {
public BattlegraceAngelAbility(final BattlegraceAngelAbility ability) {
public BattlegraceAngelAbility copy() {return new BattlegraceAngelAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control attacks alone, it gains lifelink until end of turn.";
public class BehemothsHerald extends CardImpl {
public BehemothsHerald(UUID ownerId) {
public BehemothsHerald(final BehemothsHerald card) {
public BehemothsHerald copy() {return new BehemothsHerald(this);
public class Blightning extends CardImpl {
public Blightning(UUID ownerId) {
public Blightning(final Blightning card) {
public Blightning copy() {return new Blightning(this);
public class BlisterBeetle extends CardImpl {
public BlisterBeetle(UUID ownerId) {
public BlisterBeetle(final BlisterBeetle card) {
public BlisterBeetle copy() {return new BlisterBeetle(this);
public class BloodCultist extends CardImpl {
public BloodCultist(UUID ownerId) {
public BloodCultist(final BloodCultist card) {
public BloodCultist copy() {return new BloodCultist(this);
public class BloodpyreElemental extends CardImpl {
public BloodpyreElemental(UUID ownerId) {
public BloodpyreElemental(final BloodpyreElemental card) {
public BloodpyreElemental copy() {return new BloodpyreElemental(this);
public class BloodthornTaunter extends CardImpl {
public BloodthornTaunter(UUID ownerId) {
public BloodthornTaunter(final BloodthornTaunter card) {
public BloodthornTaunter copy() {return new BloodthornTaunter(this);
public class BoneSplinters extends CardImpl {
public BoneSplinters(UUID ownerId) {
public BoneSplinters(final BoneSplinters card) {
public BoneSplinters copy() {return new BoneSplinters(this);
public class BranchingBolt extends CardImpl {
public BranchingBolt(UUID ownerId) {
public BranchingBolt(final BranchingBolt card) {
public BranchingBolt copy() {return new BranchingBolt(this);
class BranchingBoltEffect extends OneShotEffect {
public BranchingBoltEffect() {
public BranchingBoltEffect(final BranchingBoltEffect effect) {
public BranchingBoltEffect copy() {return new BranchingBoltEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class BrilliantUltimatum extends CardImpl {
public BrilliantUltimatum(UUID ownerId) {
public BrilliantUltimatum(final BrilliantUltimatum card) {
public BrilliantUltimatum copy() {return new BrilliantUltimatum(this);
class BrilliantUltimatumEffect extends OneShotEffect {
public BrilliantUltimatumEffect() {
public BrilliantUltimatumEffect(final BrilliantUltimatumEffect effect) {
public BrilliantUltimatumEffect copy() {return new BrilliantUltimatumEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class CalderaHellion extends CardImpl {
public CalderaHellion(UUID ownerId) {
public CalderaHellion(final CalderaHellion card) {
public CalderaHellion copy() {return new CalderaHellion(this);
public class CallToHeel extends CardImpl {
public CallToHeel(UUID ownerId) {
public CallToHeel(final CallToHeel card) {
public CallToHeel copy() {return new CallToHeel(this);
class CallToHeelEffect extends OneShotEffect {
public CallToHeelEffect() {
public CallToHeelEffect(final CallToHeelEffect effect) {
public CallToHeelEffect copy() {return new CallToHeelEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CarrionThrash extends CardImpl {
public CarrionThrash(UUID ownerId) {
public CarrionThrash(final CarrionThrash card) {
public CarrionThrash copy() {return new CarrionThrash(this);
public class CatharticAdept extends CardImpl {
public CatharticAdept(UUID ownerId) {
public CatharticAdept(final CatharticAdept card) {
public CatharticAdept copy() {return new CatharticAdept(this);
public class CavernThoctar extends CardImpl {
public CavernThoctar (UUID ownerId) {
public CavernThoctar (final CavernThoctar card) {
public CavernThoctar copy() {return new CavernThoctar(this);
public class ClarionUltimatum extends CardImpl {
public ClarionUltimatum(UUID ownerId) {
public ClarionUltimatum(final ClarionUltimatum card) {
public ClarionUltimatum copy() {return new ClarionUltimatum(this);
class ClarionUltimatumEffect extends OneShotEffect {
public ClarionUltimatumEffect() {
public ClarionUltimatumEffect(final ClarionUltimatumEffect effect) {
public ClarionUltimatumEffect copy() {return new ClarionUltimatumEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class CloudheathDrake extends CardImpl {
public CloudheathDrake (UUID ownerId) {
public CloudheathDrake (final CloudheathDrake card) {
public CloudheathDrake copy() {return new CloudheathDrake(this);
public class ComaVeil extends CardImpl {
public ComaVeil(UUID ownerId) {
public ComaVeil(final ComaVeil card) {
public ComaVeil copy() {return new ComaVeil(this);
public class CorpseConnoisseur extends CardImpl {
public CorpseConnoisseur(UUID ownerId) {
public CorpseConnoisseur(final CorpseConnoisseur card) {
public CorpseConnoisseur copy() {return new CorpseConnoisseur(this);
class SearchLibraryPutInGraveyard extends SearchEffect {
public SearchLibraryPutInGraveyard() {
public SearchLibraryPutInGraveyard(final SearchLibraryPutInGraveyard effect) {
public SearchLibraryPutInGraveyard copy() {return new SearchLibraryPutInGraveyard(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CouriersCapsule extends CardImpl {
public CouriersCapsule (UUID ownerId) {
public CouriersCapsule (final CouriersCapsule card) {
public CouriersCapsule copy() {return new CouriersCapsule(this);
public class CourtArchers extends CardImpl {
public CourtArchers (UUID ownerId) {
public CourtArchers (final CourtArchers card) {
public CourtArchers copy() {return new CourtArchers(this);
public class CovenantOfMinds extends CardImpl {
public CovenantOfMinds(UUID ownerId) {
public CovenantOfMinds(final CovenantOfMinds card) {
public CovenantOfMinds copy() {return new CovenantOfMinds(this);
class CovenantOfMindsEffect extends OneShotEffect {
public CovenantOfMindsEffect() {
public CovenantOfMindsEffect(final CovenantOfMindsEffect effect) {
public CovenantOfMindsEffect copy() {return new CovenantOfMindsEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class CradleOfVitality extends CardImpl {
public CradleOfVitality(UUID ownerId) {
public CradleOfVitality(final CradleOfVitality card) {
public CradleOfVitality copy() {return new CradleOfVitality(this);return new CradleOfVitalityGainLifeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.GAINED_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you gain life, you may pay {1}{W}. If you do, put a +1/+1 counter on target creature for each 1 life you gained";
class CradleOfVitalityEffect extends OneShotEffect {
public CradleOfVitalityEffect() {
public CradleOfVitalityEffect(final CradleOfVitalityEffect effect) {
public CradleOfVitalityEffect copy() {return new CradleOfVitalityEffect(this);
public boolean apply(Game game, Ability source) {return affectedTargets > 0;
public class CrucibleOfFire extends CardImpl {
public CrucibleOfFire(UUID ownerId) {
public CrucibleOfFire(final CrucibleOfFire card) {
public CrucibleOfFire copy() {return new CrucibleOfFire(this);
public class CruelUltimatum extends CardImpl {
public CruelUltimatum(UUID ownerId) {
public CruelUltimatum(final CruelUltimatum card) {
public CruelUltimatum copy() {return new CruelUltimatum(this);
class CruelUltimatumEffect extends OneShotEffect {
public CruelUltimatumEffect() {
public CruelUltimatumEffect(final CruelUltimatumEffect effect) {
public CruelUltimatumEffect copy() {return new CruelUltimatumEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class CrumblingNecropolis extends CardImpl {
public CrumblingNecropolis(UUID ownerId) {
public CrumblingNecropolis(final CrumblingNecropolis card) {
public CrumblingNecropolis copy() {return new CrumblingNecropolis(this);
public class CunningLethemancer extends CardImpl {
public CunningLethemancer(UUID ownerId) {
public CunningLethemancer(final CunningLethemancer card) {
public CunningLethemancer copy() {return new CunningLethemancer(this);
public class CylianElf extends CardImpl {
public CylianElf (UUID ownerId) {
public CylianElf (final CylianElf card) {
public CylianElf copy() {return new CylianElf(this);
public class Deathgreeter extends CardImpl {
public Deathgreeter(UUID ownerId) {
public Deathgreeter(final Deathgreeter card) {
public Deathgreeter copy() {return new Deathgreeter(this);
public class DeftDuelist extends CardImpl {
public DeftDuelist(UUID ownerId) {
public DeftDuelist(final DeftDuelist card) {
public DeftDuelist copy() {return new DeftDuelist(this);
public class DemonsHerald extends CardImpl {
public DemonsHerald(UUID ownerId) {
public DemonsHerald(final DemonsHerald card) {
public DemonsHerald copy() {return new DemonsHerald(this);
public class DispellersCapsule extends CardImpl {
public DispellersCapsule (UUID ownerId) {
public DispellersCapsule (final DispellersCapsule card) {
public DispellersCapsule copy() {return new DispellersCapsule(this);
public class DragonFodder extends CardImpl {
public DragonFodder(UUID ownerId) {
public DragonFodder(final DragonFodder card) {
public DragonFodder copy() {return new DragonFodder(this);
public class DragonsHerald extends CardImpl {
public DragonsHerald(UUID ownerId) {
public DragonsHerald(final DragonsHerald card) {
public DragonsHerald copy() {return new DragonsHerald(this);
public class DregReaver extends CardImpl {
public DregReaver (UUID ownerId) {
public DregReaver (final DregReaver card) {
public DregReaver copy() {return new DregReaver(this);
public class DregscapeZombie extends CardImpl {
public DregscapeZombie (UUID ownerId) {
public DregscapeZombie (final DregscapeZombie card) {
public DregscapeZombie copy() {return new DregscapeZombie(this);
public class DruidOfTheAnima extends CardImpl {
public DruidOfTheAnima (UUID ownerId) {
public DruidOfTheAnima (final DruidOfTheAnima card) {
public DruidOfTheAnima copy() {return new DruidOfTheAnima(this);
public class Drumhunter extends CardImpl {
public Drumhunter(UUID ownerId) {
public Drumhunter(final Drumhunter card) {
public Drumhunter copy() {return new Drumhunter(this);
class DrumHunterTriggeredAbility extends TriggeredAbilityImpl {
public DrumHunterTriggeredAbility() {
public DrumHunterTriggeredAbility(final DrumHunterTriggeredAbility ability) {
public DrumHunterTriggeredAbility copy() {return new DrumHunterTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public boolean checkInterveningIfClause(Game game) {return game.getBattlefield().countAll(filter, this.controllerId, game) > 0;
public String getRule() {return "At the beginning of your end step, if you control a creature with power 5 or greater, you may draw a card.";
public class ElspethKnightErrant extends CardImpl {
public ElspethKnightErrant(UUID ownerId) {
public class ElvishVisionary extends CardImpl {
public ElvishVisionary (UUID ownerId) {
public ElvishVisionary (final ElvishVisionary card) {
public ElvishVisionary copy() {return new ElvishVisionary(this);
public class EmpyrialArchangel extends CardImpl {
public EmpyrialArchangel(UUID ownerId) {
public EmpyrialArchangel(final EmpyrialArchangel card) {
public EmpyrialArchangel copy() {return new EmpyrialArchangel(this);
class EmpyrialArchangelEffect extends ReplacementEffectImpl {
EmpyrialArchangelEffect() {
EmpyrialArchangelEffect(final EmpyrialArchangelEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public EmpyrialArchangelEffect copy() {return new EmpyrialArchangelEffect(this);
public class EsperBattlemage extends CardImpl {
public EsperBattlemage(UUID ownerId) {
public EsperBattlemage(final EsperBattlemage card) {
public EsperBattlemage copy() {return new EsperBattlemage(this);
class EsperBattlemageEffect extends PreventionEffectImpl {
public EsperBattlemageEffect() {
public EsperBattlemageEffect(final EsperBattlemageEffect effect) {
public EsperBattlemageEffect copy() {return new EsperBattlemageEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class EsperCharm extends CardImpl {
public EsperCharm(UUID ownerId) {
public EsperCharm(final EsperCharm card) {
public EsperCharm copy() {return new EsperCharm(this);
public class EsperPanorama extends CardImpl {
public EsperPanorama(UUID ownerId) {
public EsperPanorama(final EsperPanorama card) {
public EsperPanorama copy() {return new EsperPanorama(this);
public class EtheriumAstrolabe extends CardImpl {
public EtheriumAstrolabe(UUID ownerId) {
public EtheriumAstrolabe(final EtheriumAstrolabe card) {
public EtheriumAstrolabe copy() {return new EtheriumAstrolabe(this);
public class EtheriumSculptor extends CardImpl {
public EtheriumSculptor(UUID ownerId) {
public EtheriumSculptor(final EtheriumSculptor card) {
public EtheriumSculptor copy() {return new EtheriumSculptor(this);
public class ExecutionersCapsule extends CardImpl {
public ExecutionersCapsule(UUID ownerId) {
public ExecutionersCapsule(final ExecutionersCapsule card) {
public ExecutionersCapsule copy() {return new ExecutionersCapsule(this);
public class ExuberantFirestoker extends CardImpl {
public ExuberantFirestoker(UUID ownerId) {
public ExuberantFirestoker(final ExuberantFirestoker card) {
public ExuberantFirestoker copy() {return new ExuberantFirestoker(this);
class ExuberantFirestokerTriggeredAbility extends TriggeredAbilityImpl {
public ExuberantFirestokerTriggeredAbility() {
public ExuberantFirestokerTriggeredAbility(final ExuberantFirestokerTriggeredAbility ability) {
public ExuberantFirestokerTriggeredAbility copy() {return new ExuberantFirestokerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public boolean checkInterveningIfClause(Game game) {return game.getBattlefield().countAll(filter, this.controllerId, game) > 0;
public String getRule() {return "At the beginning of your end step, if you control a creature with power 5 or greater, you may have {this} deal 2 damage to target player.";
public class Fatestitcher extends CardImpl {
public Fatestitcher(UUID ownerId) {
public Fatestitcher(final Fatestitcher card) {
public Fatestitcher copy() {return new Fatestitcher(this);
public class FeralHydra extends CardImpl {
public FeralHydra(UUID ownerId) {
public FeralHydra(final FeralHydra card) {
public FeralHydra copy() {return new FeralHydra(this);
public class FiligreeSages extends CardImpl {
public FiligreeSages (UUID ownerId) {
public FiligreeSages (final FiligreeSages card) {
public FiligreeSages copy() {return new FiligreeSages(this);
public class FireFieldOgre extends CardImpl {
public FireFieldOgre(UUID ownerId) {
public FireFieldOgre(final FireFieldOgre card) {
public FireFieldOgre copy() {return new FireFieldOgre(this);
public class FlameblastDragon extends CardImpl {
public FlameblastDragon(UUID ownerId) {
public FlameblastDragon(final FlameblastDragon card) {
public FlameblastDragon copy() {return new FlameblastDragon(this);
class FlameblastDragonEffect extends OneShotEffect {
FlameblastDragonEffect() {
FlameblastDragonEffect(final FlameblastDragonEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;return false;
public FlameblastDragonEffect copy() {return new FlameblastDragonEffect(this);
public class FleshbagMarauder extends CardImpl {
public FleshbagMarauder(UUID ownerId) {
public FleshbagMarauder(final FleshbagMarauder card) {
public FleshbagMarauder copy() {return new FleshbagMarauder(this);
public class GatherSpecimens extends CardImpl {
public GatherSpecimens(UUID ownerId) {
public GatherSpecimens(final GatherSpecimens card) {
public GatherSpecimens copy() {return new GatherSpecimens(this);
class GatherSpecimensReplacementEffect extends ReplacementEffectImpl {
public GatherSpecimensReplacementEffect() {
public GatherSpecimensReplacementEffect(final GatherSpecimensReplacementEffect effect) {
public GatherSpecimensReplacementEffect copy() {return new GatherSpecimensReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE || event.getType() == GameEvent.EventType.CREATE_TOKEN;
public boolean applies(GameEvent event, Ability source, Game game) {return new GiftOfTheGargantuan(this);return new GiftOfTheGargantuanEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class GlazeFiend extends CardImpl {
public GlazeFiend(UUID ownerId) {
public GlazeFiend(final GlazeFiend card) {
public GlazeFiend copy() {return new GlazeFiend(this);
public class GoblinAssault extends CardImpl {
public GoblinAssault(UUID ownerId) {
public GoblinAssault(final GoblinAssault card) {
public GoblinAssault copy() {return new GoblinAssault(this);
public class GoblinDeathraiders extends CardImpl {
public GoblinDeathraiders(UUID ownerId) {
public GoblinDeathraiders(final GoblinDeathraiders card) {
public GoblinDeathraiders copy() {return new GoblinDeathraiders(this);
public class GoblinMountaineer extends CardImpl {
public GoblinMountaineer (UUID ownerId) {
public GoblinMountaineer (final GoblinMountaineer card) {
public GoblinMountaineer copy() {return new GoblinMountaineer(this);
public class Godsire extends CardImpl {
public Godsire (UUID ownerId) {
public Godsire (final Godsire card) {
public Godsire copy() {return new Godsire(this);
class BeastToken extends Token {
BeastToken() {
public class Godtoucher extends CardImpl {
public Godtoucher(UUID ownerId) {
public Godtoucher(final Godtoucher card) {
public Godtoucher copy() {return new Godtoucher(this);
class GodtoucherEffect extends PreventionEffectImpl {
public GodtoucherEffect(Duration duration) {
public GodtoucherEffect(final GodtoucherEffect effect) {
public GodtoucherEffect copy() {return new GodtoucherEffect(Duration.EndOfTurn);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class GrixisBattlemage extends CardImpl {
public GrixisBattlemage(UUID ownerId) {
public GrixisBattlemage(final GrixisBattlemage card) {
public GrixisBattlemage copy() {return new GrixisBattlemage(this);
public class GrixisCharm extends CardImpl {
public GrixisCharm(UUID ownerId) {
public GrixisCharm(final GrixisCharm card) {
public GrixisCharm copy() {return new GrixisCharm(this);
public class GustriderExuberant extends CardImpl {
public GustriderExuberant(UUID ownerId) {
public GustriderExuberant(final GustriderExuberant card) {
public GustriderExuberant copy() {return new GustriderExuberant(this);
public class HellkiteOverlord extends CardImpl {
public HellkiteOverlord (UUID ownerId) {
public HellkiteOverlord (final HellkiteOverlord card) {
public HellkiteOverlord copy() {return new HellkiteOverlord(this);
public class HellsThunder extends CardImpl {
public HellsThunder(UUID ownerId) {
public HellsThunder(final HellsThunder card) {
public HellsThunder copy() {return new HellsThunder(this);
public class HinderingLight extends CardImpl {
public HinderingLight(UUID ownerId) {
public HinderingLight(final HinderingLight card) {
public HinderingLight copy() {return new HinderingLight(this);
class HinderingLightPredicate implements ObjectPlayerPredicate<ObjectPlayer<StackObject>> {
public boolean apply(ObjectPlayer<StackObject> input, Game game) {return false;return true;return true;return false;
public String toString() {return "spell that targets you or a permanent you control";
public class HissingIguanar extends CardImpl {
public HissingIguanar(UUID ownerId) {
public HissingIguanar(final HissingIguanar card) {
public HissingIguanar copy() {return new HissingIguanar(this);
public class ImmortalCoil extends CardImpl {
public ImmortalCoil(UUID ownerId) {
public ImmortalCoil(final ImmortalCoil card) {
public ImmortalCoil copy() {return new ImmortalCoil(this);
class ImmortalCoilAbility extends StateTriggeredAbility {
public ImmortalCoilAbility() {
public ImmortalCoilAbility(final ImmortalCoilAbility ability) {
public ImmortalCoilAbility copy() {return new ImmortalCoilAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return player != null && player.getGraveyard().size() == 0;
public String getRule() {return "When there are no cards in your graveyard, you lose the game";
class LoseGameEffect extends OneShotEffect {
public LoseGameEffect() {
public LoseGameEffect(final LoseGameEffect effect) {
public LoseGameEffect copy() {return new LoseGameEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class PreventAllDamageToControllerEffect extends PreventionEffectImpl {
public PreventAllDamageToControllerEffect() {
public PreventAllDamageToControllerEffect(final PreventAllDamageToControllerEffect effect) {
public PreventAllDamageToControllerEffect copy() {return new PreventAllDamageToControllerEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class IncurableOgre extends CardImpl {
public IncurableOgre (UUID ownerId) {
public IncurableOgre (final IncurableOgre card) {
public IncurableOgre copy() {return new IncurableOgre(this);
public class Infest extends CardImpl {
public Infest(UUID ownerId) {
public Infest(final Infest card) {
public Infest copy() {return new Infest(this);
public class InvincibleHymn extends CardImpl {
public InvincibleHymn(UUID ownerId) {
public InvincibleHymn(final InvincibleHymn card) {
public InvincibleHymn copy() {return new InvincibleHymn(this);
class InvincibleHymnEffect extends OneShotEffect {
public InvincibleHymnEffect() {
public InvincibleHymnEffect(final InvincibleHymnEffect effect) {
public InvincibleHymnEffect copy() {return new InvincibleHymnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JhessianInfiltrator extends CardImpl {
public JhessianInfiltrator (UUID ownerId) {
public JhessianInfiltrator (final JhessianInfiltrator card) {
public JhessianInfiltrator copy() {return new JhessianInfiltrator(this);
public class JhessianLookout extends CardImpl {
public JhessianLookout (UUID ownerId) {
public JhessianLookout (final JhessianLookout card) {
public JhessianLookout copy() {return new JhessianLookout(this);
public class JundBattlemage extends CardImpl {
public JundBattlemage (UUID ownerId) {
public JundBattlemage (final JundBattlemage card) {
public JundBattlemage copy() {return new JundBattlemage(this);
public class JundCharm extends CardImpl {
public JundCharm(UUID ownerId) {
public JundCharm(final JundCharm card) {
public JundCharm copy() {return new JundCharm(this);
public class JundPanorama extends CardImpl {
public JundPanorama(UUID ownerId) {
public JundPanorama(final JundPanorama card) {
public JundPanorama copy() {return new JundPanorama(this);
public class JungleShrine extends CardImpl {
public JungleShrine (UUID ownerId) {
public JungleShrine (final JungleShrine card) {
public JungleShrine copy() {return new JungleShrine(this);
public class JungleWeaver extends CardImpl {
public JungleWeaver (UUID ownerId) {
public JungleWeaver (final JungleWeaver card) {
public JungleWeaver copy() {return new JungleWeaver(this);
public class KathariScreecher extends CardImpl {
public KathariScreecher (UUID ownerId) {
public KathariScreecher (final KathariScreecher card) {
public KathariScreecher copy() {return new KathariScreecher(this);
public class KederektCreeper extends CardImpl {
public KederektCreeper(UUID ownerId) {
public KederektCreeper(final KederektCreeper card) {
public KederektCreeper copy() {return new KederektCreeper(this);
public class KissOfTheAmesha extends CardImpl {
public KissOfTheAmesha(UUID ownerId) {
public KissOfTheAmesha(final KissOfTheAmesha card) {
public KissOfTheAmesha copy() {return new KissOfTheAmesha(this);
public class KnightCaptainOfEos extends CardImpl {
public KnightCaptainOfEos(UUID ownerId) {
public KnightCaptainOfEos(final KnightCaptainOfEos card) {
public KnightCaptainOfEos copy() {return new KnightCaptainOfEos(this);
public class KnightOfTheSkywardEye extends CardImpl {
public KnightOfTheSkywardEye(UUID ownerId) {
public KnightOfTheSkywardEye(final KnightOfTheSkywardEye card) {
public KnightOfTheSkywardEye copy() {return new KnightOfTheSkywardEye(this);
public class KnightOfTheWhiteOrchid extends CardImpl {
public KnightOfTheWhiteOrchid(UUID ownerId) {
public KnightOfTheWhiteOrchid(final KnightOfTheWhiteOrchid card) {
public KnightOfTheWhiteOrchid copy() {return new KnightOfTheWhiteOrchid(this);
public class KreshTheBloodbraided extends CardImpl {
public KreshTheBloodbraided(UUID ownerId) {
public KreshTheBloodbraided(final KreshTheBloodbraided card) {
public KreshTheBloodbraided copy() {return new KreshTheBloodbraided(this);
class KreshTheBloodbraidedEffect extends OneShotEffect {
KreshTheBloodbraidedEffect() {
KreshTheBloodbraidedEffect(final KreshTheBloodbraidedEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public KreshTheBloodbraidedEffect copy() {return new KreshTheBloodbraidedEffect(this);
public class LichsMirror extends CardImpl {
public LichsMirror(UUID ownerId) {
public LichsMirror(final LichsMirror card) {
public LichsMirror copy() {return new LichsMirror(this);
class LichsMirrorEffect extends ReplacementEffectImpl {
public LichsMirrorEffect() {
public LichsMirrorEffect(final LichsMirrorEffect effect) {
public LichsMirrorEffect copy() {return new LichsMirrorEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.LOSES;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class LightningTalons extends CardImpl {
public LightningTalons (UUID ownerId) {
public LightningTalons (final LightningTalons card) {
public LightningTalons copy() {return new LightningTalons(this);
public class LushGrowth extends CardImpl {
public LushGrowth(UUID ownerId) {
public LushGrowth(final LushGrowth card) {
public LushGrowth copy() {return new LushGrowth(this);
public class MagmaSpray extends CardImpl {
public MagmaSpray(UUID ownerId) {
public MagmaSpray(final MagmaSpray card) {
public MagmaSpray copy() {return new MagmaSpray(this);
public class Manaplasm extends CardImpl {
public Manaplasm(UUID ownerId) {
public Manaplasm(final Manaplasm card) {
public Manaplasm copy() {return new Manaplasm(this);
class ManaplasmAbility extends TriggeredAbilityImpl {
public ManaplasmAbility() {
public ManaplasmAbility(final ManaplasmAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast a spell, {this} gets +X/+X until end of turn, where X is that spell's converted mana cost";
public ManaplasmAbility copy() {return new ManaplasmAbility(this);
public class MarbleChalice extends CardImpl {
public MarbleChalice (UUID ownerId) {
public MarbleChalice (final MarbleChalice card) {
public MarbleChalice copy() {return new MarbleChalice(this);
public class MasterOfEtherium extends CardImpl {
public MasterOfEtherium(UUID ownerId) {
public MasterOfEtherium(final MasterOfEtherium card) {
public MasterOfEtherium copy() {return new MasterOfEtherium(this);
public class MayaelTheAnima extends CardImpl {
public MayaelTheAnima(UUID ownerId) {
public MayaelTheAnima(final MayaelTheAnima card) {
public MayaelTheAnima copy() {return new MayaelTheAnima(this);
public class MemoryErosion extends CardImpl {
public MemoryErosion(UUID ownerId) {
public MemoryErosion(final MemoryErosion card) {
public MemoryErosion copy() {return new MemoryErosion(this);
class SpellCastTriggeredAbility extends TriggeredAbilityImpl {
public SpellCastTriggeredAbility() {
public SpellCastTriggeredAbility(final SpellCastTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent casts a spell, that player puts the top two cards of his or her library into his or her graveyard";
public SpellCastTriggeredAbility copy() {return new SpellCastTriggeredAbility(this);
public class Metallurgeon extends CardImpl {
public Metallurgeon(UUID ownerId) {
public Metallurgeon(final Metallurgeon card) {
public Metallurgeon copy() {return new Metallurgeon(this);
public class MightyEmergence extends CardImpl {
public MightyEmergence(UUID ownerId) {
public MightyEmergence(final MightyEmergence card) {
public MightyEmergence copy() {return new MightyEmergence(this);
public class MindlockOrb extends CardImpl {
public MindlockOrb(UUID ownerId) {
public MindlockOrb(final MindlockOrb card) {
public MindlockOrb copy() {return new MindlockOrb(this);
public boolean apply(Game game, Ability source) {
public boolean applies(GameEvent event, Ability source, Game game) {return event.getType() == EventType.SEARCH_LIBRARY;return new MindlockRuleModifyingEffect(this);
public class MinionReflector extends CardImpl {
public MinionReflector(UUID ownerId) {
public MinionReflector(final MinionReflector card) {
public MinionReflector copy() {return new MinionReflector(this);
class MinionReflectorTriggeredAbility extends EntersBattlefieldAllTriggeredAbility {
public MinionReflectorTriggeredAbility() {
public MinionReflectorTriggeredAbility(MinionReflectorTriggeredAbility ability) {
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public MinionReflectorTriggeredAbility copy() {return new MinionReflectorTriggeredAbility(this);
class MinionReflectorEffect extends OneShotEffect {
public MinionReflectorEffect() {
public MinionReflectorEffect(final MinionReflectorEffect effect) {
public MinionReflectorEffect copy() {return new MinionReflectorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NayaBattlemage extends CardImpl {
public NayaBattlemage (UUID ownerId) {
public NayaBattlemage (final NayaBattlemage card) {
public NayaBattlemage copy() {return new NayaBattlemage(this);
public class NayaCharm extends CardImpl {
public NayaCharm(UUID ownerId) {
public NayaCharm(final NayaCharm card) {
public NayaCharm copy() {return new NayaCharm(this);
public class NayaPanorama extends CardImpl {
public NayaPanorama(UUID ownerId) {
public NayaPanorama(final NayaPanorama card) {
public NayaPanorama copy() {return new NayaPanorama(this);
public class Necrogenesis extends CardImpl {
public Necrogenesis(UUID ownerId) {
public Necrogenesis(final Necrogenesis card) {
public Necrogenesis copy() {return new Necrogenesis(this);
public class ObeliskOfBant extends CardImpl {
public ObeliskOfBant (UUID ownerId) {
public ObeliskOfBant (final ObeliskOfBant card) {
public ObeliskOfBant copy() {return new ObeliskOfBant(this);
public class ObeliskOfEsper extends CardImpl {
public ObeliskOfEsper (UUID ownerId) {
public ObeliskOfEsper (final ObeliskOfEsper card) {
public ObeliskOfEsper copy() {return new ObeliskOfEsper(this);
public class ObeliskOfGrixis extends CardImpl {
public ObeliskOfGrixis (UUID ownerId) {
public ObeliskOfGrixis (final ObeliskOfGrixis card) {
public ObeliskOfGrixis copy() {return new ObeliskOfGrixis(this);
public class ObeliskOfJund extends CardImpl {
public ObeliskOfJund (UUID ownerId) {
public ObeliskOfJund (final ObeliskOfJund card) {
public ObeliskOfJund copy() {return new ObeliskOfJund(this);
public class ObeliskOfNaya extends CardImpl {
public ObeliskOfNaya (UUID ownerId) {
public ObeliskOfNaya (final ObeliskOfNaya card) {
public ObeliskOfNaya copy() {return new ObeliskOfNaya(this);
public class OblivionRing extends CardImpl {
public OblivionRing(UUID ownerId) {
public OblivionRing(final OblivionRing card) {
public OblivionRing copy() {return new OblivionRing(this);
public class OnyxGoblet extends CardImpl {
public OnyxGoblet (UUID ownerId) {
public OnyxGoblet (final OnyxGoblet card) {
public OnyxGoblet copy() {return new OnyxGoblet(this);
public class OozeGarden extends CardImpl {
public OozeGarden(UUID ownerId) {
public OozeGarden(final OozeGarden card) {
public OozeGarden copy() {return new OozeGarden(this);
class OozeGardenCreateTokenEffect extends OneShotEffect {
public OozeGardenCreateTokenEffect() {
public OozeGardenCreateTokenEffect(final OozeGardenCreateTokenEffect effect) {
public OozeGardenCreateTokenEffect copy() {return new OozeGardenCreateTokenEffect(this);
public boolean apply(Game game, Ability source) {
public class OutriderOfJhess extends CardImpl {
public OutriderOfJhess (UUID ownerId) {
public OutriderOfJhess (final OutriderOfJhess card) {
public OutriderOfJhess copy() {return new OutriderOfJhess(this);
public class PredatorDragon extends CardImpl {
public PredatorDragon(UUID ownerId) {
public PredatorDragon(final PredatorDragon card) {
public PredatorDragon copy() {return new PredatorDragon(this);
public class PrinceOfThralls extends CardImpl {
public PrinceOfThralls(UUID ownerId) {
public PrinceOfThralls(final PrinceOfThralls card) {
public PrinceOfThralls copy() {return new PrinceOfThralls(this);
class PrinceOfThrallsTriggeredAbility extends TriggeredAbilityImpl {
PrinceOfThrallsTriggeredAbility(Effect effect) {
PrinceOfThrallsTriggeredAbility(final PrinceOfThrallsTriggeredAbility ability) {
public PrinceOfThrallsTriggeredAbility copy() {return new PrinceOfThrallsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a permanent an opponent controls is put into a graveyard, " + super.getRule();
class PrinceOfThrallsEffect extends OneShotEffect {
public PrinceOfThrallsEffect() {
public PrinceOfThrallsEffect(final PrinceOfThrallsEffect effect) {
public PrinceOfThrallsEffect copy() {return new PrinceOfThrallsEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class ProtomatterPowder extends CardImpl {
public ProtomatterPowder(UUID ownerId) {
public ProtomatterPowder(final ProtomatterPowder card) {
public ProtomatterPowder copy() {return new ProtomatterPowder(this);
public class PunishIgnorance extends CardImpl {
public PunishIgnorance(UUID ownerId) {
public PunishIgnorance(final PunishIgnorance card) {
public PunishIgnorance copy() {return new PunishIgnorance(this);
public class PuppetConjurer extends CardImpl {
public PuppetConjurer(UUID ownerId) {
public PuppetConjurer(final PuppetConjurer card) {
public PuppetConjurer copy() {return new PuppetConjurer(this);
class HomunculusToken extends Token {
public HomunculusToken() {
public class RafiqOfTheMany extends CardImpl {
public RafiqOfTheMany(UUID ownerId) {
public RafiqOfTheMany(final RafiqOfTheMany card) {
public RafiqOfTheMany copy() {return new RafiqOfTheMany(this);
class RafiqOfTheManyAbility extends TriggeredAbilityImpl {
public RafiqOfTheManyAbility() {
public RafiqOfTheManyAbility(final RafiqOfTheManyAbility ability) {
public RafiqOfTheManyAbility copy() {return new RafiqOfTheManyAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_ATTACKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control attacks alone, it gains double strike until end of turn.";
public class RakeclawGargantuan extends CardImpl {
public RakeclawGargantuan(UUID ownerId) {
public RakeclawGargantuan(final RakeclawGargantuan card) {
public RakeclawGargantuan copy() {return new RakeclawGargantuan(this);
public class RangerOfEos extends CardImpl {
public RangerOfEos(UUID ownerId) {
public RangerOfEos(final RangerOfEos card) {
public RangerOfEos copy() {return new RangerOfEos(this);
public class RealmRazer extends CardImpl {
public RealmRazer(UUID ownerId) {
public RealmRazer(final RealmRazer card) {
public RealmRazer copy() {return new RealmRazer(this);
class ExileAllEffect extends OneShotEffect {
public ExileAllEffect() {
public ExileAllEffect(final ExileAllEffect effect) {
public ExileAllEffect copy() {return new ExileAllEffect(this);
public boolean apply(Game game, Ability source) {return true;
class RealmRazerEffect extends OneShotEffect {
public RealmRazerEffect() {this.staticText = "return the exiled cards to the battlefield tapped under their owners' control";
public RealmRazerEffect(final RealmRazerEffect effect) {
public RealmRazerEffect copy() {return new RealmRazerEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(exZone.getCards(game), Zone.BATTLEFIELD, source, game, true, false, true, null);return true;return false;
public class RelicOfProgenitus extends CardImpl {
public RelicOfProgenitus(UUID ownerId) {
public RelicOfProgenitus(final RelicOfProgenitus card) {
public RelicOfProgenitus copy() {return new RelicOfProgenitus(this);
class RelicOfProgenitusEffect extends OneShotEffect {
public RelicOfProgenitusEffect() {
public RelicOfProgenitusEffect(final RelicOfProgenitusEffect effect) {
public RelicOfProgenitusEffect copy() {return new RelicOfProgenitusEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ResoundingRoar extends CardImpl {
public ResoundingRoar(UUID ownerId) {
public ResoundingRoar(final ResoundingRoar card) {
public ResoundingRoar copy() {return new ResoundingRoar(this);
public class ResoundingScream extends CardImpl {
public ResoundingScream(UUID ownerId) {
public ResoundingScream(final ResoundingScream card) {
public ResoundingScream copy() {return new ResoundingScream(this);
public class ResoundingSilence extends CardImpl {
public ResoundingSilence(UUID ownerId) {
public ResoundingSilence(final ResoundingSilence card) {
public ResoundingSilence copy() {return new ResoundingSilence(this);
public class ResoundingThunder extends CardImpl {
public ResoundingThunder(UUID ownerId) {
public ResoundingThunder(final ResoundingThunder card) {
public ResoundingThunder copy() {return new ResoundingThunder(this);
public class ResoundingWave extends CardImpl {
public ResoundingWave(UUID ownerId) {
public ResoundingWave(final ResoundingWave card) {
public ResoundingWave copy() {return new ResoundingWave(this);
public class RhoxCharger extends CardImpl {
public RhoxCharger (UUID ownerId) {
public RhoxCharger (final RhoxCharger card) {
public RhoxCharger copy() {return new RhoxCharger(this);
public class RhoxWarMonk extends CardImpl {
public RhoxWarMonk(UUID ownerId) {
public RhoxWarMonk(final RhoxWarMonk card) {
public RhoxWarMonk copy() {return new RhoxWarMonk(this);
public class RidgeRannet extends CardImpl {
public RidgeRannet(UUID ownerId) {
public RidgeRannet(final RidgeRannet card) {
public RidgeRannet copy() {return new RidgeRannet(this);
public class RipClanCrasher extends CardImpl {
public RipClanCrasher(UUID ownerId) {
public RipClanCrasher(final RipClanCrasher card) {
public RipClanCrasher copy() {return new RipClanCrasher(this);
public class RockcasterPlatoon extends CardImpl {
public RockcasterPlatoon(UUID ownerId) {
public RockcasterPlatoon(final RockcasterPlatoon card) {
public RockcasterPlatoon copy() {return new RockcasterPlatoon(this);
public class RockslideElemental extends CardImpl {
public RockslideElemental(UUID ownerId) {
public RockslideElemental(final RockslideElemental card) {
public RockslideElemental copy() {return new RockslideElemental(this);
public class SacellumGodspeaker extends CardImpl {
public SacellumGodspeaker(UUID ownerId) {
public SacellumGodspeaker(final SacellumGodspeaker card) {
public SacellumGodspeaker copy() {return new SacellumGodspeaker(this);
class SacellumGodspeakerEffect extends ManaEffect {
public SacellumGodspeakerEffect() {
public SacellumGodspeakerEffect(final SacellumGodspeakerEffect effect) {
public SacellumGodspeakerEffect copy() {return new SacellumGodspeakerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public class SalvageTitan extends CardImpl {
public SalvageTitan(UUID ownerId) {
public SalvageTitan(final SalvageTitan card) {
public SalvageTitan copy() {return new SalvageTitan(this);
public class SarkhanVol extends CardImpl {
public SarkhanVol(UUID ownerId) {
public SarkhanVol(final SarkhanVol card) {
public SarkhanVol copy() {return new SarkhanVol(this);
public class SavageHunger extends CardImpl {
public SavageHunger (UUID ownerId) {
public SavageHunger (final SavageHunger card) {
public SavageHunger copy() {return new SavageHunger(this);
public class SavageLands extends CardImpl {
public SavageLands(UUID ownerId) {
public SavageLands(final SavageLands card) {
public SavageLands copy() {return new SavageLands(this);
public class ScavengerDrake extends CardImpl {
public ScavengerDrake(UUID ownerId) {
public ScavengerDrake(final ScavengerDrake card) {
public ScavengerDrake copy() {return new ScavengerDrake(this);
public class ScourgeDevil extends CardImpl {
public ScourgeDevil(UUID ownerId) {
public ScourgeDevil(final ScourgeDevil card) {
public ScourgeDevil copy() {return new ScourgeDevil(this);
public class Scourglass extends CardImpl {
public Scourglass(UUID ownerId) {
public Scourglass(final Scourglass card) {
public Scourglass copy() {return new Scourglass(this);
public class SeasideCitadel extends CardImpl {
public SeasideCitadel (UUID ownerId) {
public SeasideCitadel (final SeasideCitadel card) {
public SeasideCitadel copy() {return new SeasideCitadel(this);
public class SedraxisSpecter extends CardImpl {
public SedraxisSpecter(UUID ownerId) {
public SedraxisSpecter(final SedraxisSpecter card) {
public SedraxisSpecter copy() {return new SedraxisSpecter(this);
public class SedrisTheTraitorKing extends CardImpl {
public SedrisTheTraitorKing(UUID ownerId) {
public SedrisTheTraitorKing(final SedrisTheTraitorKing card) {
public SedrisTheTraitorKing copy() {return new SedrisTheTraitorKing(this);
class SedrisTheTraitorKingEffect extends ContinuousEffectImpl {
SedrisTheTraitorKingEffect() {
SedrisTheTraitorKingEffect(final SedrisTheTraitorKingEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SedrisTheTraitorKingEffect copy() {return new SedrisTheTraitorKingEffect(this);return new Shadowfeed(this);
public class ShardingSphinx extends CardImpl {
public ShardingSphinx(UUID ownerId) {
public ShardingSphinx(final ShardingSphinx card) {
public ShardingSphinx copy() {return new ShardingSphinx(this);
class ThopterToken extends Token {
ThopterToken() {
public class SharuumTheHegemon extends CardImpl {
public SharuumTheHegemon(UUID ownerId) {
public SharuumTheHegemon(final SharuumTheHegemon card) {
public SharuumTheHegemon copy() {return new SharuumTheHegemon(this);
public class ShoreSnapper extends CardImpl {
public ShoreSnapper(UUID ownerId) {
public ShoreSnapper(final ShoreSnapper card) {
public ShoreSnapper copy() {return new ShoreSnapper(this);
public class SightedCasteSorcerer extends CardImpl {
public SightedCasteSorcerer (UUID ownerId) {
public SightedCasteSorcerer (final SightedCasteSorcerer card) {
public SightedCasteSorcerer copy() {return new SightedCasteSorcerer(this);
public class SigilBlessing extends CardImpl {
public SigilBlessing(UUID ownerId) {
public SigilBlessing(final SigilBlessing card) {
public SigilBlessing copy() {return new SigilBlessing(this);
class SigilBlessingBoostControlledEffect extends ContinuousEffectImpl {
public SigilBlessingBoostControlledEffect() {
public SigilBlessingBoostControlledEffect(final SigilBlessingBoostControlledEffect effect) {
public SigilBlessingBoostControlledEffect copy() {return new SigilBlessingBoostControlledEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {
public class SigiledPaladin extends CardImpl {
public SigiledPaladin (UUID ownerId) {
public SigiledPaladin (final SigiledPaladin card) {
public SigiledPaladin copy() {return new SigiledPaladin(this);
public class SigilOfDistinction extends CardImpl {
public SigilOfDistinction(UUID ownerId) {
public SigilOfDistinction(final SigilOfDistinction card) {
public SigilOfDistinction copy() {return new SigilOfDistinction(this);
public class SkeletalKathari extends CardImpl {
public SkeletalKathari(UUID ownerId) {
public SkeletalKathari(final SkeletalKathari card) {
public SkeletalKathari copy() {return new SkeletalKathari(this);
public class Skullmulcher extends CardImpl {
public Skullmulcher(UUID ownerId) {
public Skullmulcher(final Skullmulcher card) {
public Skullmulcher copy() {return new Skullmulcher(this);
public class SoulsFire extends CardImpl {
public SoulsFire(UUID ownerId) {
public SoulsFire(final SoulsFire card) {
public SoulsFire copy() {return new SoulsFire(this);
class SoulsFireEffect extends OneShotEffect {
public SoulsFireEffect() {
public SoulsFireEffect(final SoulsFireEffect effect) {
public SoulsFireEffect copy() {return new SoulsFireEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return true;return false;
public class SoulsGrace extends CardImpl {
public SoulsGrace(UUID ownerId) {
public SoulsGrace(final SoulsGrace card) {
public SoulsGrace copy() {return new SoulsGrace(this);
class SoulsGraceEffect extends OneShotEffect {
public SoulsGraceEffect() {
public SoulsGraceEffect(final SoulsGraceEffect effect) {
public SoulsGraceEffect copy() {return new SoulsGraceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SoulsMight extends CardImpl {
public SoulsMight(UUID ownerId) {
public SoulsMight(final SoulsMight card) {
public SoulsMight copy() {return new SoulsMight(this);
class SoulsMightEffect extends OneShotEffect {
public SoulsMightEffect() {
public SoulsMightEffect(final SoulsMightEffect effect) {
public SoulsMightEffect copy() {return new SoulsMightEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SpearbreakerBehemoth extends CardImpl {
public SpearbreakerBehemoth(UUID ownerId) {
public SpearbreakerBehemoth(final SpearbreakerBehemoth card) {
public SpearbreakerBehemoth copy() {return new SpearbreakerBehemoth(this);
public class SpellSnip extends CardImpl {
public SpellSnip(UUID ownerId) {
public SpellSnip(final SpellSnip card) {
public SpellSnip copy() {return new SpellSnip(this);
public class SphinxsHerald extends CardImpl {
public SphinxsHerald(UUID ownerId) {
public SphinxsHerald(final SphinxsHerald card) {
public SphinxsHerald copy() {return new SphinxsHerald(this);
public class SphinxSovereign extends CardImpl {
public SphinxSovereign(UUID ownerId) {
public SphinxSovereign(final SphinxSovereign card) {
public SphinxSovereign copy() {return new SphinxSovereign(this);
class SphinxSovereignEffect extends OneShotEffect {
public SphinxSovereignEffect() {
public SphinxSovereignEffect(final SphinxSovereignEffect effect) {
public SphinxSovereignEffect copy() {return new SphinxSovereignEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SproutingThrinax extends CardImpl {
public SproutingThrinax(UUID ownerId) {
public SproutingThrinax(final SproutingThrinax card) {
public SproutingThrinax copy() {return new SproutingThrinax(this);
public class SteelcladSerpent extends CardImpl {
public SteelcladSerpent(UUID ownerId) {
public SteelcladSerpent(final SteelcladSerpent card) {
public SteelcladSerpent copy() {return new SteelcladSerpent(this);
class SteelcladSerpentEffect extends RestrictionEffect {
public SteelcladSerpentEffect() {
public SteelcladSerpentEffect(final SteelcladSerpentEffect effect) {
public SteelcladSerpentEffect copy() {return new SteelcladSerpentEffect(this);
public boolean canAttack(Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return false;return true;return false;
public class StewardOfValeron extends CardImpl {
public StewardOfValeron (UUID ownerId) {
public StewardOfValeron (final StewardOfValeron card) {
public StewardOfValeron copy() {return new StewardOfValeron(this);
public class StoicAngel extends CardImpl {
public StoicAngel(UUID ownerId) {
public StoicAngel(final StoicAngel card) {
public StoicAngel copy() {return new StoicAngel(this);
class StoicAngelEffect extends RestrictionUntapNotMoreThanEffect {
public StoicAngelEffect() {
public StoicAngelEffect(final StoicAngelEffect effect) {
public boolean applies(Player player, Ability source, Game game) {return true;
public StoicAngelEffect copy() {return new StoicAngelEffect(this);
public class SunseedNurturer extends CardImpl {
public SunseedNurturer(UUID ownerId) {
public SunseedNurturer(final SunseedNurturer card) {
public SunseedNurturer copy() {return new SunseedNurturer(this);
class SunseedNurturerTriggeredAbility extends TriggeredAbilityImpl {
public SunseedNurturerTriggeredAbility() {
public SunseedNurturerTriggeredAbility(final SunseedNurturerTriggeredAbility ability) {
public SunseedNurturerTriggeredAbility copy() {return new SunseedNurturerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public boolean checkInterveningIfClause(Game game) {return game.getBattlefield().countAll(filter, this.controllerId, game) > 0;
public String getRule() {return "At the beginning of your end step, if you control a creature with power 5 or greater, you may gain 2 life.";
public class Swerve extends CardImpl {
public Swerve(UUID ownerId) {
public Swerve(final Swerve card) {
public Swerve copy() {return new Swerve(this);
public class TarFiend extends CardImpl {
public TarFiend(UUID ownerId) {
public TarFiend(final TarFiend card) {
public TarFiend copy() {return new TarFiend(this);
public class TezzeretTheSeeker extends CardImpl {
public TezzeretTheSeeker(UUID ownerId) {
public TezzeretTheSeeker(final TezzeretTheSeeker card) {
public TezzeretTheSeeker copy() {return new TezzeretTheSeeker(this);
class TezzeretTheSeekerEffect2 extends OneShotEffect {
public TezzeretTheSeekerEffect2() {
public TezzeretTheSeekerEffect2(final TezzeretTheSeekerEffect2 effect) {
public TezzeretTheSeekerEffect2 copy() {return new TezzeretTheSeekerEffect2(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
class TezzeretTheSeekerEffect3 extends ContinuousEffectImpl {
public TezzeretTheSeekerEffect3() {
public TezzeretTheSeekerEffect3(final TezzeretTheSeekerEffect3 effect) {
public TezzeretTheSeekerEffect3 copy() {return new TezzeretTheSeekerEffect3(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.TypeChangingEffects_4 || layer == Layer.PTChangingEffects_7;
public class ThornThrashViashino extends CardImpl {
public ThornThrashViashino(UUID ownerId) {
public ThornThrashViashino(final ThornThrashViashino card) {
public ThornThrashViashino copy() {return new ThornThrashViashino(this);
public class ThoughtcutterAgent extends CardImpl {
public ThoughtcutterAgent(UUID ownerId) {
public ThoughtcutterAgent(final ThoughtcutterAgent card) {
public ThoughtcutterAgent copy() {return new ThoughtcutterAgent(this);
public class TidehollowStrix extends CardImpl {
public TidehollowStrix(UUID ownerId) {
public TidehollowStrix(final TidehollowStrix card) {
public TidehollowStrix copy() {return new TidehollowStrix(this);
public class TitanicUltimatum extends CardImpl {
public TitanicUltimatum(UUID ownerId) {
public TitanicUltimatum(final TitanicUltimatum card) {
public TitanicUltimatum copy() {return new TitanicUltimatum(this);
public class TopanAscetic extends CardImpl {
public TopanAscetic(UUID ownerId) {
public TopanAscetic(final TopanAscetic card) {
public TopanAscetic copy() {return new TopanAscetic(this);
public class TortoiseFormation extends CardImpl {
public TortoiseFormation(UUID ownerId) {
public TortoiseFormation(final TortoiseFormation card) {
public TortoiseFormation copy() {return new TortoiseFormation(this);
public class TowerGargoyle extends CardImpl {
public TowerGargoyle(UUID ownerId) {
public TowerGargoyle(final TowerGargoyle card) {
public TowerGargoyle copy() {return new TowerGargoyle(this);
public class UndeadLeotau extends CardImpl {
public UndeadLeotau (UUID ownerId) {
public UndeadLeotau (final UndeadLeotau card) {
public UndeadLeotau copy() {return new UndeadLeotau(this);
public class VectisSilencers extends CardImpl {
public VectisSilencers (UUID ownerId) {
public VectisSilencers (final VectisSilencers card) {
public VectisSilencers copy() {return new VectisSilencers(this);
public class VeinDrinker extends CardImpl {
public VeinDrinker(UUID ownerId) {
public VeinDrinker(final VeinDrinker card) {
public VeinDrinker copy() {return new VeinDrinker(this);
public class ViashinoSkeleton extends CardImpl {
public ViashinoSkeleton(UUID ownerId) {
public ViashinoSkeleton(final ViashinoSkeleton card) {
public ViashinoSkeleton copy() {return new ViashinoSkeleton(this);return new ViciousShadows(this);
class TargetPlayerCardsInHandCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return targetPlayer.getHand().size();return 0;
public DynamicValue copy() {return new TargetPlayerCardsInHandCount();
public String toString() {return "1";
public String getMessage() {return "target player's cards in hand";
public class ViolentUltimatum extends CardImpl {
public ViolentUltimatum (UUID ownerId) {
public ViolentUltimatum (final ViolentUltimatum card) {
public ViolentUltimatum copy() {return new ViolentUltimatum(this);
public class VisceraDragger extends CardImpl {
public VisceraDragger(UUID ownerId) {
public VisceraDragger(final VisceraDragger card) {
public VisceraDragger copy() {return new VisceraDragger(this);
public class VithianStinger extends CardImpl {
public VithianStinger(UUID ownerId) {
public VithianStinger(final VithianStinger card) {
public VithianStinger copy() {return new VithianStinger(this);
public class VolcanicSubmersion extends CardImpl {
public VolcanicSubmersion(UUID ownerId) {
public VolcanicSubmersion(final VolcanicSubmersion card) {
public VolcanicSubmersion copy() {return new VolcanicSubmersion(this);
public class WaveskimmerAven extends CardImpl {
public WaveskimmerAven (UUID ownerId) {
public WaveskimmerAven (final WaveskimmerAven card) {
public WaveskimmerAven copy() {return new WaveskimmerAven(this);
public class WelkinGuide extends CardImpl {
public WelkinGuide(UUID ownerId) {
public WelkinGuide(final WelkinGuide card) {
public WelkinGuide copy() {return new WelkinGuide(this);
public class WhereAncientsTread extends CardImpl {
public WhereAncientsTread(UUID ownerId) {
public WhereAncientsTread(final WhereAncientsTread card) {
public WhereAncientsTread copy() {return new WhereAncientsTread(this);
public class WildNacatl extends CardImpl {
public WildNacatl(UUID ownerId) {
public WildNacatl(final WildNacatl card) {
public WildNacatl copy() {return new WildNacatl(this);
public class YokedPlowbeast extends CardImpl {
public YokedPlowbeast (UUID ownerId) {
public YokedPlowbeast (final YokedPlowbeast card) {
public YokedPlowbeast copy() {return new YokedPlowbeast(this);
public class CoalStoker extends CardImpl {
public CoalStoker(UUID ownerId) {
public CoalStoker(final CoalStoker card) {
public CoalStoker copy() {return new CoalStoker(this);
public class LavabornMuse extends CardImpl {
public LavabornMuse(UUID ownerId) {
public LavabornMuse(final LavabornMuse card) {
public LavabornMuse copy() {return new LavabornMuse(this);
class CardsInActivePlayersHandCondition implements Condition {
public boolean apply(Game game, Ability source) {return player != null && player.getHand().size() <= 2;
public class RevenantPatriarch extends CardImpl {
public RevenantPatriarch(UUID ownerId) {
public RevenantPatriarch(final RevenantPatriarch card) {
public RevenantPatriarch copy() {return new RevenantPatriarch(this);
class TargetPlayerSkipNextCombatEffect extends OneShotEffect {
public TargetPlayerSkipNextCombatEffect() {
public TargetPlayerSkipNextCombatEffect(final TargetPlayerSkipNextCombatEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public TargetPlayerSkipNextCombatEffect copy() {return new TargetPlayerSkipNextCombatEffect(this);
public class StranglingSoot extends CardImpl {
public StranglingSoot(UUID ownerId) {
public StranglingSoot(final StranglingSoot card) {
public StranglingSoot copy() {return new StranglingSoot(this);
public class TorrentOfSouls extends CardImpl {
public TorrentOfSouls(UUID ownerId) {
public TorrentOfSouls(final TorrentOfSouls card) {
public TorrentOfSouls copy() {return new TorrentOfSouls(this);
class TorrentOfSoulsEffect extends OneShotEffect {
public TorrentOfSoulsEffect() {
public TorrentOfSoulsEffect(final TorrentOfSoulsEffect effect) {
public TorrentOfSoulsEffect copy() {return new TorrentOfSoulsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AquamorphEntity extends CardImpl {
public AquamorphEntity(UUID ownerId) {
public AquamorphEntity(final AquamorphEntity card) {
public AquamorphEntity copy() {return new AquamorphEntity(this);
class AquamorphEntityReplacementEffect extends ReplacementEffectImpl {
public AquamorphEntityReplacementEffect() {
public AquamorphEntityReplacementEffect(AquamorphEntityReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return false;
public AquamorphEntityReplacementEffect copy() {return new AquamorphEntityReplacementEffect(this);
public class CoralTrickster extends CardImpl {
public CoralTrickster(UUID ownerId) {
public CoralTrickster(final CoralTrickster card) {
public CoralTrickster copy() {return new CoralTrickster(this);
public class EchoTracer extends CardImpl {
public EchoTracer(UUID ownerId) {
public EchoTracer(final EchoTracer card) {
public EchoTracer copy() {return new EchoTracer(this);
public class OrcishCannonade extends CardImpl {
public OrcishCannonade(UUID ownerId) {
public OrcishCannonade(final OrcishCannonade card) {
public OrcishCannonade copy() {return new OrcishCannonade(this);return new RecklessAbandon(this);
public class AncientCraving extends CardImpl {
public AncientCraving(UUID ownerId) {
public AncientCraving(final AncientCraving card) {
public AncientCraving copy() {return new AncientCraving(this);
public class AngelOfLight extends CardImpl {
public AngelOfLight(UUID ownerId) {
public AngelOfLight(final AngelOfLight card) {
public AngelOfLight copy() {return new AngelOfLight(this);
public class Bargain extends CardImpl {
public Bargain(UUID ownerId) {
public Bargain(final Bargain card) {
public Bargain copy() {return new Bargain(this);
public class CinderStorm extends CardImpl {
public CinderStorm(UUID ownerId) {
public CinderStorm(final CinderStorm card) {
public CinderStorm copy() {return new CinderStorm(this);
public class DakmorGhoul extends CardImpl {
public DakmorGhoul(UUID ownerId) {
public DakmorGhoul(final DakmorGhoul card) {
public DakmorGhoul copy() {return new DakmorGhoul(this);
public class DakmorLancer extends CardImpl {
public DakmorLancer(UUID ownerId) {
public DakmorLancer(final DakmorLancer card) {
public DakmorLancer copy() {return new DakmorLancer(this);
public class DakmorPlague extends CardImpl {
public DakmorPlague(UUID ownerId) {
public DakmorPlague(final DakmorPlague card) {
public DakmorPlague copy() {return new DakmorPlague(this);
public class DreadReaper extends CardImpl {
public DreadReaper(UUID ownerId) {
public DreadReaper(final DreadReaper card) {
public DreadReaper copy() {return new DreadReaper(this);
public class EyeSpy extends CardImpl {
public EyeSpy(UUID ownerId) {
public EyeSpy(final EyeSpy card) {
public EyeSpy copy() {return new EyeSpy(this);
class EyeSpyEffect extends OneShotEffect {
public EyeSpyEffect() {
public EyeSpyEffect(final EyeSpyEffect effect) {
public EyeSpyEffect copy() {return new EyeSpyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new GerrardsWisdom(this);
public class GrimTutor extends CardImpl {
public GrimTutor(UUID ownerId) {
public GrimTutor(final GrimTutor card) {
public GrimTutor copy() {return new GrimTutor(this);
public class HowlingFury extends CardImpl {
public HowlingFury(UUID ownerId) {
public HowlingFury(final HowlingFury card) {
public HowlingFury copy() {return new HowlingFury(this);
public class HulkingOgre extends CardImpl {
public HulkingOgre(UUID ownerId) {
public HulkingOgre(final HulkingOgre card) {
public HulkingOgre copy() {return new HulkingOgre(this);
public class NaturesCloak extends CardImpl {
public NaturesCloak(UUID ownerId) {
public NaturesCloak(final NaturesCloak card) {
public NaturesCloak copy() {return new NaturesCloak(this);
public class PrideOfLions extends CardImpl {
public PrideOfLions(UUID ownerId) {
public PrideOfLions(final PrideOfLions card) {
public PrideOfLions copy() {return new PrideOfLions(this);
public class RighteousFury extends CardImpl {
public RighteousFury(UUID ownerId) {
public RighteousFury(final RighteousFury card) {
public RighteousFury copy() {return new RighteousFury(this);
class RighteousFuryEffect extends OneShotEffect {
public RighteousFuryEffect() {
public RighteousFuryEffect(final RighteousFuryEffect effect) {
public RighteousFuryEffect copy() {return new RighteousFuryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RoyalTrooper extends CardImpl {
public RoyalTrooper(UUID ownerId) {
public RoyalTrooper(final RoyalTrooper card) {
public RoyalTrooper copy() {return new RoyalTrooper(this);
public class ScorchingSpear extends CardImpl {
public ScorchingSpear(UUID ownerId) {
public ScorchingSpear(final ScorchingSpear card) {
public ScorchingSpear copy() {return new ScorchingSpear(this);
public class ShriekingSpecter extends CardImpl {
public ShriekingSpecter(UUID ownerId) {
public ShriekingSpecter(final ShriekingSpecter card) {
public ShriekingSpecter copy() {return new ShriekingSpecter(this);
public class Squall extends CardImpl {
public Squall(UUID ownerId) {
public Squall(final Squall card) {
public Squall copy() {return new Squall(this);
public class Steadfastness extends CardImpl {
public Steadfastness(UUID ownerId) {
public Steadfastness(final Steadfastness card) {
public Steadfastness copy() {return new Steadfastness(this);
public class StreamOfAcid extends CardImpl {
public StreamOfAcid(UUID ownerId) {
public StreamOfAcid(final StreamOfAcid card) {
public StreamOfAcid copy() {return new StreamOfAcid(this);
public class SylvanYeti extends CardImpl {
public SylvanYeti(UUID ownerId) {
public SylvanYeti(final SylvanYeti card) {
public SylvanYeti copy() {return new SylvanYeti(this);
public class ThunderDragon extends CardImpl {
public ThunderDragon(UUID ownerId) {
public ThunderDragon(final ThunderDragon card) {
public ThunderDragon copy() {return new ThunderDragon(this);return new Undo(this);
public class HandOfDeath extends CardImpl {
public HandOfDeath(UUID ownerId) {
public HandOfDeath(final HandOfDeath card) {
public HandOfDeath copy() {return new HandOfDeath(this);
public class RoyalFalcon extends CardImpl {
public RoyalFalcon(UUID ownerId) {
public RoyalFalcon(final RoyalFalcon card) {
public RoyalFalcon copy() {return new RoyalFalcon(this);
public class WillowElf extends CardImpl {
public WillowElf(UUID ownerId) {
public WillowElf(final WillowElf card) {
public WillowElf copy() {return new WillowElf(this);
public class AcidicSliver extends CardImpl {
public AcidicSliver(UUID ownerId) {
public AcidicSliver(final AcidicSliver card) {
public AcidicSliver copy() {return new AcidicSliver(this);
public class Amok extends CardImpl {
public Amok(UUID ownerId) {
public Amok(final Amok card) {
public Amok copy() {return new Amok(this);
public class Awakening extends CardImpl {
public Awakening(UUID ownerId) {
public Awakening(final Awakening card) {
public Awakening copy() {return new Awakening(this);
public class BottomlessPit extends CardImpl {
public BottomlessPit(UUID ownerId) {
public BottomlessPit(final BottomlessPit card) {
public BottomlessPit copy() {return new BottomlessPit(this);
public class BrushWithDeath extends CardImpl {
public BrushWithDeath(UUID ownerId) {
public BrushWithDeath(final BrushWithDeath card) {
public BrushWithDeath copy() {return new BrushWithDeath(this);
public class Bullwhip extends CardImpl {
public Bullwhip(UUID ownerId) {
public Bullwhip(final Bullwhip card) {
public Bullwhip copy() {return new Bullwhip(this);
public class Burgeoning extends CardImpl {
public Burgeoning(UUID ownerId) {
public Burgeoning(final Burgeoning card) {
public Burgeoning copy() {return new Burgeoning(this);
class BurgeoningTriggeredAbility extends TriggeredAbilityImpl {
BurgeoningTriggeredAbility() {
BurgeoningTriggeredAbility(BurgeoningTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LAND_PLAYED;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(controllerId).contains(land.getControllerId());
public BurgeoningTriggeredAbility copy() {return new BurgeoningTriggeredAbility(this);
public String getRule() {return "Whenever an opponent plays a land, you may put a land card from your hand onto the battlefield.";
public class CalmingLicid extends CardImpl {
public CalmingLicid(UUID ownerId) {
public CalmingLicid(final CalmingLicid card) {
public CalmingLicid copy() {return new CalmingLicid(this);
public class Carnassid extends CardImpl {
public Carnassid(UUID ownerId) {
public Carnassid(final Carnassid card) {
public Carnassid copy() {return new Carnassid(this);
public class ChangeOfHeart extends CardImpl {
public ChangeOfHeart(UUID ownerId) {
public ChangeOfHeart(final ChangeOfHeart card) {
public ChangeOfHeart copy() {return new ChangeOfHeart(this);
public class CloudSpirit extends CardImpl {
public CloudSpirit(UUID ownerId) {
public CloudSpirit(final CloudSpirit card) {
public CloudSpirit copy() {return new CloudSpirit(this);
public class ConstantMists extends CardImpl {
public ConstantMists(UUID ownerId) {
public ConstantMists(final ConstantMists card) {
public ConstantMists copy() {return new ConstantMists(this);
public class Contemplation extends CardImpl {
public Contemplation(UUID ownerId) {
public Contemplation(final Contemplation card) {
public Contemplation copy() {return new Contemplation(this);
public class Conviction extends CardImpl {
public Conviction(UUID ownerId) {
public Conviction(final Conviction card) {
public Conviction copy() {return new Conviction(this);
public class ConvulsingLicid extends CardImpl {
public ConvulsingLicid(UUID ownerId) {
public ConvulsingLicid(final ConvulsingLicid card) {
public ConvulsingLicid copy() {return new ConvulsingLicid(this);
public class CrossbowAmbush extends CardImpl {
public CrossbowAmbush(UUID ownerId) {
public CrossbowAmbush(final CrossbowAmbush card) {
public CrossbowAmbush copy() {return new CrossbowAmbush(this);
public class CrovaxTheCursed extends CardImpl {
public CrovaxTheCursed(UUID ownerId) {
public CrovaxTheCursed(final CrovaxTheCursed card) {
public CrovaxTheCursed copy() {return new CrovaxTheCursed(this);
class CrovaxTheCursedEffect extends OneShotEffect {
public CrovaxTheCursedEffect() {
public CrovaxTheCursedEffect(final CrovaxTheCursedEffect effect) {
public CrovaxTheCursedEffect copy() {return new CrovaxTheCursedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CrystallineSliver extends CardImpl {
public CrystallineSliver(UUID ownerId) {
public CrystallineSliver(final CrystallineSliver card) {
public CrystallineSliver copy() {return new CrystallineSliver(this);
public class DauthiTrapper extends CardImpl {
public DauthiTrapper(UUID ownerId) {
public DauthiTrapper(final DauthiTrapper card) {
public DauthiTrapper copy() {return new DauthiTrapper(this);
public class DeathStroke extends CardImpl {
public DeathStroke(UUID ownerId) {
public DeathStroke(final DeathStroke card) {
public DeathStroke copy() {return new DeathStroke(this);
public class DreamHalls extends CardImpl {
public DreamHalls(UUID ownerId) {
public DreamHalls(final DreamHalls card) {
public DreamHalls copy() {return new DreamHalls(this);
class DreamHallsEffect extends ContinuousEffectImpl {
public DreamHallsEffect() {
public DreamHallsEffect(final DreamHallsEffect effect) {
public DreamHallsEffect copy() {return new DreamHallsEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class DuctCrawler extends CardImpl {
public DuctCrawler(UUID ownerId) {
public DuctCrawler(final DuctCrawler card) {
public DuctCrawler copy() {return new DuctCrawler(this);
public class DungeonShade extends CardImpl {
public DungeonShade(UUID ownerId) {
public DungeonShade(final DungeonShade card) {
public DungeonShade copy() {return new DungeonShade(this);
public class ElvenRite extends CardImpl {
public ElvenRite(UUID ownerId) {
public ElvenRite(final ElvenRite card) {
public ElvenRite copy() {return new ElvenRite(this);
public class EnsnaringBridge extends CardImpl {
public EnsnaringBridge(UUID ownerId) {
public EnsnaringBridge(final EnsnaringBridge card) {
public EnsnaringBridge copy() {return new EnsnaringBridge(this);
class EnsnaringBridgeRestrictionEffect extends RestrictionEffect {
public EnsnaringBridgeRestrictionEffect() {
public EnsnaringBridgeRestrictionEffect(final EnsnaringBridgeRestrictionEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getPower().getValue() > controller.getHand().size();return false;
public boolean canAttack(Game game) {return false;
public EnsnaringBridgeRestrictionEffect copy() {return new EnsnaringBridgeRestrictionEffect(this);
public class Evacuation extends CardImpl {
public Evacuation(UUID ownerId) {
public Evacuation(final Evacuation card) {
public Evacuation copy() {return new Evacuation(this);
class EvacuationEffect extends OneShotEffect {
public EvacuationEffect() {
public EvacuationEffect(final EvacuationEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public EvacuationEffect copy() {return new EvacuationEffect(this);
public class FanningTheFlames extends CardImpl {
public FanningTheFlames(UUID ownerId) {
public FanningTheFlames(final FanningTheFlames card) {
public FanningTheFlames copy() {return new FanningTheFlames(this);
public class FlowstoneHellion extends CardImpl {
public FlowstoneHellion(UUID ownerId) {
public FlowstoneHellion(final FlowstoneHellion card) {
public FlowstoneHellion copy() {return new FlowstoneHellion(this);
public class FlowstoneMauler extends CardImpl {
public FlowstoneMauler(UUID ownerId) {
public FlowstoneMauler(final FlowstoneMauler card) {
public FlowstoneMauler copy() {return new FlowstoneMauler(this);
public class FoulImp extends CardImpl {
public FoulImp(UUID ownerId) {
public FoulImp(final FoulImp card) {
public FoulImp copy() {return new FoulImp(this);
public class FurnaceSpirit extends CardImpl {
public FurnaceSpirit(UUID ownerId) {
public FurnaceSpirit(final FurnaceSpirit card) {
public FurnaceSpirit copy() {return new FurnaceSpirit(this);
public class GlidingLicid extends CardImpl {
public GlidingLicid(UUID ownerId) {
public GlidingLicid(final GlidingLicid card) {
public GlidingLicid copy() {return new GlidingLicid(this);
public class Heartstone extends CardImpl {
public Heartstone(UUID ownerId) {
public Heartstone(final Heartstone card) {
public Heartstone copy() {return new Heartstone(this);
public HeartstoneEffect() {
public HeartstoneEffect(final HeartstoneEffect effect) {return true;return false;return true;return false;
public HeartstoneEffect copy() {return new HeartstoneEffect(this);
public class HibernationSliver extends CardImpl {
public HibernationSliver(UUID ownerId) {
public HibernationSliver(final HibernationSliver card) {
public HibernationSliver copy() {return new HibernationSliver(this);
public class HornOfGreed extends CardImpl {
public HornOfGreed(UUID ownerId) {
public HornOfGreed(final HornOfGreed card) {
public HornOfGreed copy() {return new HornOfGreed(this);
class HornOfGreedAbility extends TriggeredAbilityImpl {
public HornOfGreedAbility() {
public HornOfGreedAbility(final HornOfGreedAbility ability) {
public HornOfGreedAbility copy() {return new HornOfGreedAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LAND_PLAYED;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "Whenever a player plays a land, " + super.getRule();
public class IntruderAlarm extends CardImpl {
public IntruderAlarm(UUID ownerId) {
public IntruderAlarm(final IntruderAlarm card) {
public IntruderAlarm copy() {return new IntruderAlarm(this);
public class JinxedRing extends CardImpl {
public JinxedRing(UUID ownerId) {
public JinxedRing(final JinxedRing card) {
public JinxedRing copy() {return new JinxedRing(this);
class JinxedRingEffect extends ContinuousEffectImpl {
public JinxedRingEffect() {
public JinxedRingEffect(final JinxedRingEffect effect) {
public JinxedRingEffect copy() {return new JinxedRingEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(source.getFirstTarget(), game);return false;
public class LabRats extends CardImpl {
public LabRats(UUID ownerId) {
public LabRats(final LabRats card) {
public LabRats copy() {return new LabRats(this);
public class LancersEnKor extends CardImpl {
public LancersEnKor(UUID ownerId) {
public LancersEnKor(final LancersEnKor card) {
public LancersEnKor copy() {return new LancersEnKor(this);
public class Leap extends CardImpl {
public Leap(UUID ownerId) {
public Leap(final Leap card) {
public Leap copy() {return new Leap(this);
public class MindGames extends CardImpl {
public MindGames(UUID ownerId) {
public MindGames(final MindGames card) {
public MindGames copy() {return new MindGames(this);
public class MindPeel extends CardImpl {
public MindPeel(UUID ownerId) {
public MindPeel(final MindPeel card) {
public MindPeel copy() {return new MindPeel(this);
public class Mindwarper extends CardImpl {
public Mindwarper(UUID ownerId) {
public Mindwarper(final Mindwarper card) {
public Mindwarper copy() {return new Mindwarper(this);
public class MobJustice extends CardImpl {
public MobJustice(UUID ownerId) {
public MobJustice(final MobJustice card) {
public MobJustice copy() {return new MobJustice(this);
public class MoggInfestation extends CardImpl {
public MoggInfestation(UUID ownerId) {
public MoggInfestation(final MoggInfestation card) {
public MoggInfestation copy() {return new MoggInfestation(this);
class MoggInfestationEffect extends OneShotEffect {
public MoggInfestationEffect() {
public MoggInfestationEffect(final MoggInfestationEffect effect) {
public MoggInfestationEffect copy() {return new MoggInfestationEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MorgueThrull extends CardImpl {
public MorgueThrull(UUID ownerId) {
public MorgueThrull(final MorgueThrull card) {
public MorgueThrull copy() {return new MorgueThrull(this);
public class MoxDiamond extends CardImpl {
public MoxDiamond(UUID ownerId) {
public MoxDiamond(final MoxDiamond card) {
public MoxDiamond copy() {return new MoxDiamond(this);
class MoxDiamondReplacementEffect extends ReplacementEffectImpl {
public MoxDiamondReplacementEffect() {
public MoxDiamondReplacementEffect(final MoxDiamondReplacementEffect effect) {
public MoxDiamondReplacementEffect copy() {return new MoxDiamondReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return true;return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class NomadsEnKor extends CardImpl {
public NomadsEnKor(UUID ownerId) {
public NomadsEnKor(final NomadsEnKor card) {
public NomadsEnKor copy() {return new NomadsEnKor(this);
public class Overgrowth extends CardImpl {
public Overgrowth(UUID ownerId) {
public Overgrowth(final Overgrowth card) {
public Overgrowth copy() {return new Overgrowth(this);
class OvergrowthTriggeredAbility extends TriggeredManaAbility {
public OvergrowthTriggeredAbility() {
public OvergrowthTriggeredAbility(final OvergrowthTriggeredAbility ability) {
public OvergrowthTriggeredAbility copy() {return new OvergrowthTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever enchanted land is tapped for mana, its controller adds {G}{G} to his or her mana pool";
public class Provoke extends CardImpl {
public Provoke(UUID ownerId) {
public Provoke(final Provoke card) {
public Provoke copy() {return new Provoke(this);
public class PursuitOfKnowledge extends CardImpl {
public PursuitOfKnowledge(UUID ownerId) {
public PursuitOfKnowledge(final PursuitOfKnowledge card) {
public PursuitOfKnowledge copy() {return new PursuitOfKnowledge(this);
class PursuitOfKnowledgeEffect extends ReplacementEffectImpl {
public PursuitOfKnowledgeEffect() {
public PursuitOfKnowledgeEffect(final PursuitOfKnowledgeEffect effect) {
public PursuitOfKnowledgeEffect copy() {return new PursuitOfKnowledgeEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public class RollingStones extends CardImpl {
public RollingStones(UUID ownerId) {
public RollingStones(final RollingStones card) {
public RollingStones copy() {return new RollingStones(this);
public class Ruination extends CardImpl {
public Ruination(UUID ownerId) {
public Ruination(final Ruination card) {
public Ruination copy() {return new Ruination(this);
public class SacredGround extends CardImpl {
public SacredGround(UUID ownerId) {
public SacredGround(final SacredGround card) {
public SacredGround copy() {return new SacredGround(this);
class SacredGroundTriggeredAbility extends TriggeredAbilityImpl {
SacredGroundTriggeredAbility() {
SacredGroundTriggeredAbility(final SacredGroundTriggeredAbility ability) {
public SacredGroundTriggeredAbility copy() {return new SacredGroundTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a spell or ability an opponent controls causes a land to be put into your graveyard from the battlefield, " + super.getRule();
public class Scapegoat extends CardImpl {
public Scapegoat(UUID ownerId) {
public Scapegoat(final Scapegoat card) {
public Scapegoat copy() {return new Scapegoat(this);
public class SerpentWarrior extends CardImpl {
public SerpentWarrior(UUID ownerId) {
public SerpentWarrior(final SerpentWarrior card) {
public SerpentWarrior copy() {return new SerpentWarrior(this);
public class ShamanEnKor extends CardImpl {
public ShamanEnKor(UUID ownerId) {
public ShamanEnKor(final ShamanEnKor card) {
public ShamanEnKor copy() {return new ShamanEnKor(this);
class ShamanEnKorRedirectFromTargetEffect extends RedirectionEffect {
ShamanEnKorRedirectFromTargetEffect() {
ShamanEnKorRedirectFromTargetEffect(final ShamanEnKorRedirectFromTargetEffect effect) {
public void init(Ability source, Game game) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGE_CREATURE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(getTargetPointer().getFirst(game, source));return false;
public boolean apply(Game game, Ability source) {return true;
public ShamanEnKorRedirectFromTargetEffect copy() {return new ShamanEnKorRedirectFromTargetEffect(this);return new ShiftingWall(this);
public class SkyshroudArcher extends CardImpl {
public SkyshroudArcher(UUID ownerId) {
public SkyshroudArcher(final SkyshroudArcher card) {
public SkyshroudArcher copy() {return new SkyshroudArcher(this);
public class SkyshroudFalcon extends CardImpl {
public SkyshroudFalcon(UUID ownerId) {
public SkyshroudFalcon(final SkyshroudFalcon card) {
public SkyshroudFalcon copy() {return new SkyshroudFalcon(this);
public class SkyshroudTroopers extends CardImpl {
public SkyshroudTroopers(UUID ownerId) {
public SkyshroudTroopers(final SkyshroudTroopers card) {
public SkyshroudTroopers copy() {return new SkyshroudTroopers(this);
public class SliverQueen extends CardImpl {
public SliverQueen(UUID ownerId) {
public SliverQueen(final SliverQueen card) {
public SliverQueen copy() {return new SliverQueen(this);
public class SoltariChampion extends CardImpl {
public SoltariChampion(UUID ownerId) {
public SoltariChampion(final SoltariChampion card) {
public SoltariChampion copy() {return new SoltariChampion(this);
public class SpikeColony extends CardImpl {
public SpikeColony(UUID ownerId) {
public SpikeColony(final SpikeColony card) {
public SpikeColony copy() {return new SpikeColony(this);
public class SpikeSoldier extends CardImpl {
public SpikeSoldier(UUID ownerId) {
public SpikeSoldier(final SpikeSoldier card) {
public SpikeSoldier copy() {return new SpikeSoldier(this);
public class SpikeWorker extends CardImpl {
public SpikeWorker(UUID ownerId) {
public SpikeWorker(final SpikeWorker card) {
public SpikeWorker copy() {return new SpikeWorker(this);return new SpindriftDrake(this);
public class SpinedSliver extends CardImpl {
public SpinedSliver(UUID ownerId) {
public SpinedSliver(final SpinedSliver card) {
public SpinedSliver copy() {return new SpinedSliver(this);
public class StrongholdAssassin extends CardImpl {
public StrongholdAssassin(UUID ownerId) {
public StrongholdAssassin(final StrongholdAssassin card) {
public StrongholdAssassin copy() {return new StrongholdAssassin(this);
public class TemptingLicid extends CardImpl {
public TemptingLicid(UUID ownerId) {
public TemptingLicid(final TemptingLicid card) {
public TemptingLicid copy() {return new TemptingLicid(this);
public class ThalakosDeceiver extends CardImpl {
public ThalakosDeceiver(UUID ownerId) {
public ThalakosDeceiver(final ThalakosDeceiver card) {
public ThalakosDeceiver copy() {return new ThalakosDeceiver(this);
public class TidalSurge extends CardImpl {
public TidalSurge(UUID ownerId) {
public TidalSurge(final TidalSurge card) {
public TidalSurge copy() {return new TidalSurge(this);
public class TidalWarrior extends CardImpl {
public TidalWarrior(UUID ownerId) {
public TidalWarrior(final TidalWarrior card) {
public TidalWarrior copy() {return new TidalWarrior(this);
public class Torment extends CardImpl {
public Torment(UUID ownerId) {
public Torment(final Torment card) {
public Torment copy() {return new Torment(this);
public class TorturedExistence extends CardImpl {
public TorturedExistence(UUID ownerId) {
public TorturedExistence(final TorturedExistence card) {
public TorturedExistence copy() {return new TorturedExistence(this);
public class VictualSliver extends CardImpl {
public VictualSliver(UUID ownerId) {
public VictualSliver(final VictualSliver card) {
public VictualSliver copy() {return new VictualSliver(this);
public class VolrathsStronghold extends CardImpl {
public VolrathsStronghold(UUID ownerId) {
public VolrathsStronghold(final VolrathsStronghold card) {
public VolrathsStronghold copy() {return new VolrathsStronghold(this);
public class WallOfBlossoms extends CardImpl {
public WallOfBlossoms(UUID ownerId) {
public WallOfBlossoms(final WallOfBlossoms card) {
public WallOfBlossoms copy() {return new WallOfBlossoms(this);
public class WallOfEssence extends CardImpl {
public WallOfEssence(UUID ownerId) {
public WallOfEssence(final WallOfEssence card) {
public WallOfEssence copy() {return new WallOfEssence(this);
class WallOfEssenceTriggeredAbility extends TriggeredAbilityImpl {
public WallOfEssenceTriggeredAbility() {
public WallOfEssenceTriggeredAbility(final WallOfEssenceTriggeredAbility effect) {
public WallOfEssenceTriggeredAbility copy() {return new WallOfEssenceTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt combat damage, " + super.getRule();return new PiousWarriorGainLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class WallOfRazors extends CardImpl {
public WallOfRazors(UUID ownerId) {
public WallOfRazors(final WallOfRazors card) {
public WallOfRazors copy() {return new WallOfRazors(this);
public class WallOfTears extends CardImpl {
public WallOfTears(UUID ownerId) {effect.setText("return that creature to its owner's hand at end of combat");
public WallOfTears(final WallOfTears card) {
public WallOfTears copy() {return new WallOfTears(this);
public class WarriorAngel extends CardImpl {
public WarriorAngel(UUID ownerId) {
public WarriorAngel(final WarriorAngel card) {
public WarriorAngel copy() {return new WarriorAngel(this);
public void adjustCosts(Ability ability, Game game) {return new AbandonHope(this);return new AbandonHopeRuleEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class AdvanceScout extends CardImpl {
public AdvanceScout(UUID ownerId) {
public AdvanceScout(final AdvanceScout card) {
public AdvanceScout copy() {return new AdvanceScout(this);
public class Aftershock extends CardImpl {
public Aftershock(UUID ownerId) {
public Aftershock(final Aftershock card) {
public Aftershock copy() {return new Aftershock(this);
public class AltarOfDementia extends CardImpl {
public AltarOfDementia(UUID ownerId) {
public AltarOfDementia(final AltarOfDementia card) {
public AltarOfDementia copy() {return new AltarOfDementia(this);
class AltarOfDementiaEffect extends OneShotEffect {
public AltarOfDementiaEffect() {
public AltarOfDementiaEffect(final AltarOfDementiaEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AltarOfDementiaEffect copy() {return new AltarOfDementiaEffect(this);
public class Aluren extends CardImpl {
public Aluren(UUID ownerId) {
public Aluren(final Aluren card) {
public Aluren copy() {return new Aluren(this);
class AlurenRuleEffect extends ContinuousEffectImpl {
public AlurenRuleEffect() {
public AlurenRuleEffect(final AlurenRuleEffect effect) {
public AlurenRuleEffect copy() {return new AlurenRuleEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class AngelicProtector extends CardImpl {
public AngelicProtector(UUID ownerId) {
public AngelicProtector(final AngelicProtector card) {
public AngelicProtector copy() {return new AngelicProtector(this);
public class Anoint extends CardImpl {
public Anoint(UUID ownerId) {
public Anoint(final Anoint card) {
public Anoint copy() {return new Anoint(this);
public class ApesOfRath extends CardImpl {
public ApesOfRath(UUID ownerId) {
public ApesOfRath(final ApesOfRath card) {
public ApesOfRath copy() {return new ApesOfRath(this);
public class Apocalypse extends CardImpl {
public Apocalypse(UUID ownerId) {
public Apocalypse(final Apocalypse card) {
public Apocalypse copy() {return new Apocalypse(this);
class ApocalypseDiscardEffect extends OneShotEffect {
public ApocalypseDiscardEffect() {
public ApocalypseDiscardEffect(final ApocalypseDiscardEffect effect) {
public ApocalypseDiscardEffect copy() {return new ApocalypseDiscardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ApocalypseExileAllPermanentsEffect extends OneShotEffect {
public ApocalypseExileAllPermanentsEffect() {
public ApocalypseExileAllPermanentsEffect(final ApocalypseExileAllPermanentsEffect effect) {
public ApocalypseExileAllPermanentsEffect copy() {return new ApocalypseExileAllPermanentsEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ArmoredPegasus extends CardImpl {
public ArmoredPegasus(UUID ownerId) {
public ArmoredPegasus(final ArmoredPegasus card) {
public ArmoredPegasus copy() {return new ArmoredPegasus(this);
public class ArmorSliver extends CardImpl {
public ArmorSliver(UUID ownerId) {
public ArmorSliver(final ArmorSliver card) {
public ArmorSliver copy() {return new ArmorSliver(this);
public class Auratog extends CardImpl {
public Auratog(UUID ownerId) {
public Auratog(final Auratog card) {
public Auratog copy() {return new Auratog(this);
public class BarbedSliver extends CardImpl {
public BarbedSliver(UUID ownerId) {
public BarbedSliver(final BarbedSliver card) {
public BarbedSliver copy() {return new BarbedSliver(this);
public class BayouDragonfly extends CardImpl {
public BayouDragonfly(UUID ownerId) {
public BayouDragonfly(final BayouDragonfly card) {
public BayouDragonfly copy() {return new BayouDragonfly(this);
public class BellowingFiend extends CardImpl {
public BellowingFiend(UUID ownerId) {
public BellowingFiend(final BellowingFiend card) {
public BellowingFiend copy() {return new BellowingFiend(this);
class BellowingFiendEffect extends OneShotEffect {
public BellowingFiendEffect() {
public BellowingFiendEffect(final BellowingFiendEffect effect) {
public BellowingFiendEffect copy() {return new BellowingFiendEffect(this);
public boolean apply(Game game, Ability source) {return applied;
public class BenthicBehemoth extends CardImpl {
public BenthicBehemoth(UUID ownerId) {
public BenthicBehemoth(final BenthicBehemoth card) {
public BenthicBehemoth copy() {return new BenthicBehemoth(this);
public class BloodFrenzy extends CardImpl {
public BloodFrenzy(UUID ownerId) {
public BloodFrenzy(final BloodFrenzy card) {
public BloodFrenzy copy() {return new BloodFrenzy(this);
BloodFrenzyCastRestriction() {
BloodFrenzyCastRestriction(final BloodFrenzyCastRestriction effect) {
public BloodFrenzyCastRestriction copy() {return new BloodFrenzyCastRestriction(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.CAST_SPELL);
public boolean applies(GameEvent event, Ability source, Game game) {return false;return true;return false;
public boolean apply(Game game, Ability source) {return true;
public class BloodPet extends CardImpl {
public BloodPet(UUID ownerId) {
public BloodPet(final BloodPet card) {
public BloodPet copy() {return new BloodPet(this);
public class Boil extends CardImpl {
public Boil(UUID ownerId) {
public Boil(final Boil card) {
public Boil copy() {return new Boil(this);
public class BottleGnomes extends CardImpl {
public BottleGnomes(UUID ownerId) {
public BottleGnomes(final BottleGnomes card) {
public BottleGnomes copy() {return new BottleGnomes(this);
public class BountyHunter extends CardImpl {
public BountyHunter(UUID ownerId) {
public BountyHunter(final BountyHunter card) {
public BountyHunter copy() {return new BountyHunter(this);
public class BrokenFall extends CardImpl {
public BrokenFall(UUID ownerId) {
public BrokenFall(final BrokenFall card) {
public BrokenFall copy() {return new BrokenFall(this);
public class CalderaLake extends CardImpl {
public CalderaLake(UUID ownerId) {
public CalderaLake(final CalderaLake card) {
public CalderaLake copy() {return new CalderaLake(this);
public class CanyonWildcat extends CardImpl {
public CanyonWildcat(UUID ownerId) {
public CanyonWildcat(final CanyonWildcat card) {
public CanyonWildcat copy() {return new CanyonWildcat(this);
public class Capsize extends CardImpl {
public Capsize(UUID ownerId) {
public Capsize(final Capsize card) {
public Capsize copy() {return new Capsize(this);
public class ChaoticGoo extends CardImpl {
public ChaoticGoo(UUID ownerId) {
public ChaoticGoo(final ChaoticGoo card) {
public ChaoticGoo copy() {return new ChaoticGoo(this);
class ChaoticGooEffect extends OneShotEffect {
public ChaoticGooEffect() {
public ChaoticGooEffect(ChaoticGooEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public ChaoticGooEffect copy() {return new ChaoticGooEffect(this);
public class ChargingRhino extends CardImpl {
public ChargingRhino(UUID ownerId) {
public ChargingRhino(final ChargingRhino card) {
public ChargingRhino copy() {return new ChargingRhino(this);
public class Chill extends CardImpl {
public Chill(UUID ownerId) {
public Chill(final Chill card) {
public Chill copy() {return new Chill(this);
public class Choke extends CardImpl {
public Choke(UUID ownerId) {
public Choke(final Choke card) {
public Choke copy() {return new Choke(this);
public class CinderMarsh extends CardImpl {
public CinderMarsh(UUID ownerId) {
public CinderMarsh(final CinderMarsh card) {
public CinderMarsh copy() {return new CinderMarsh(this);return new CircleOfProtectionShadow(this);
public class ClergyEnVec extends CardImpl {
public ClergyEnVec(UUID ownerId) {
public ClergyEnVec(final ClergyEnVec card) {
public ClergyEnVec copy() {return new ClergyEnVec(this);
public class ClotSliver extends CardImpl {
public ClotSliver(UUID ownerId) {
public ClotSliver(final ClotSliver card) {
public ClotSliver copy() {return new ClotSliver(this);
public class CloudchaserEagle extends CardImpl {
public CloudchaserEagle(UUID ownerId) {
public CloudchaserEagle(final CloudchaserEagle card) {
public CloudchaserEagle copy() {return new CloudchaserEagle(this);
public class CoiledTinviper extends CardImpl {
public CoiledTinviper(UUID ownerId) {
public CoiledTinviper(final CoiledTinviper card) {
public CoiledTinviper copy() {return new CoiledTinviper(this);
public class CommanderGrevenIlVec extends CardImpl {
public CommanderGrevenIlVec(UUID ownerId) {
public CommanderGrevenIlVec(final CommanderGrevenIlVec card) {
public CommanderGrevenIlVec copy() {return new CommanderGrevenIlVec(this);
public class CorpseDance extends CardImpl {
public CorpseDance(UUID ownerId) {
public CorpseDance(final CorpseDance card) {
public CorpseDance copy() {return new CorpseDance(this);
class CorpseDanceEffect extends OneShotEffect {
public CorpseDanceEffect() {
public CorpseDanceEffect(final CorpseDanceEffect effect) {
public CorpseDanceEffect copy() {return new CorpseDanceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Counterspell extends CardImpl {
public Counterspell(UUID ownerId) {
public Counterspell(final Counterspell card) {
public Counterspell copy() {return new Counterspell(this);return new CrazedArmodon(this);return new CrazedArmodonDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "Destroy {this} at the beginning of the next end step";
public class CrownOfFlames extends CardImpl {
public CrownOfFlames(UUID ownerId) {
public CrownOfFlames(final CrownOfFlames card) {
public CrownOfFlames copy() {return new CrownOfFlames(this);
public class CursedScroll extends CardImpl {
public CursedScroll(UUID ownerId) {
public CursedScroll(final CursedScroll card) {
public CursedScroll copy() {return new CursedScroll(this);
class CursedScrollEffect extends OneShotEffect {
public CursedScrollEffect() {
public CursedScrollEffect(final CursedScrollEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;return true;return false;
public CursedScrollEffect copy() {return new CursedScrollEffect(this);
public class DauthiEmbrace extends CardImpl {
public DauthiEmbrace(UUID ownerId) {
public DauthiEmbrace(final DauthiEmbrace card) {
public DauthiEmbrace copy() {return new DauthiEmbrace(this);
public class DauthiGhoul extends CardImpl {
public DauthiGhoul(UUID ownerId) {
public DauthiGhoul(final DauthiGhoul card) {
public DauthiGhoul copy() {return new DauthiGhoul(this);
public class DauthiHorror extends CardImpl {
public DauthiHorror(UUID ownerId) {
public DauthiHorror(final DauthiHorror card) {
public DauthiHorror copy() {return new DauthiHorror(this);
public class DauthiMarauder extends CardImpl {
public DauthiMarauder(UUID ownerId) {
public DauthiMarauder(final DauthiMarauder card) {
public DauthiMarauder copy() {return new DauthiMarauder(this);
public class DauthiMercenary extends CardImpl {
public DauthiMercenary(UUID ownerId) {
public DauthiMercenary(final DauthiMercenary card) {
public DauthiMercenary copy() {return new DauthiMercenary(this);
public class DauthiMindripper extends CardImpl {
public DauthiMindripper(UUID ownerId) {
public DauthiMindripper(final DauthiMindripper card) {
public DauthiMindripper copy() {return new DauthiMindripper(this);
public class DauthiSlayer extends CardImpl {
public DauthiSlayer(UUID ownerId) {
public DauthiSlayer(final DauthiSlayer card) {
public DauthiSlayer copy() {return new DauthiSlayer(this);
public class DeathPitsOfRath extends CardImpl {
public DeathPitsOfRath(UUID ownerId) {
public DeathPitsOfRath(final DeathPitsOfRath card) {
public DeathPitsOfRath copy() {return new DeathPitsOfRath(this);
class DeathPitsOfRathTriggeredAbility extends TriggeredAbilityImpl {
public DeathPitsOfRathTriggeredAbility() {
public DeathPitsOfRathTriggeredAbility(final DeathPitsOfRathTriggeredAbility effect) {
public DeathPitsOfRathTriggeredAbility copy() {return new DeathPitsOfRathTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "Whenever a creature is dealt damage, destroy it. It can't be regenerated.";
public class DiabolicEdict extends CardImpl {
public DiabolicEdict(UUID ownerId) {
public DiabolicEdict(final DiabolicEdict card) {
public DiabolicEdict copy() {return new DiabolicEdict(this);
public class Disenchant extends CardImpl {
public Disenchant(UUID ownerId) {
public Disenchant(final Disenchant card) {
public Disenchant copy() {return new Disenchant(this);
public class Dismiss extends CardImpl {
public Dismiss(UUID ownerId) {
public Dismiss(final Dismiss card) {
public Dismiss copy() {return new Dismiss(this);
public class DisturbedBurial extends CardImpl {
public DisturbedBurial(UUID ownerId) {
public DisturbedBurial(final DisturbedBurial card) {
public DisturbedBurial copy() {return new DisturbedBurial(this);
public class Dracoplasm extends CardImpl {
public Dracoplasm(UUID ownerId) {
public Dracoplasm(final Dracoplasm card) {
public Dracoplasm copy() {return new Dracoplasm(this);
class DracoplasmEffect extends ReplacementEffectImpl {
public DracoplasmEffect() {
public DracoplasmEffect(final DracoplasmEffect effect) {
public DracoplasmEffect copy() {return new DracoplasmEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getSourceId());
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;return false;
public class DreadOfNight extends CardImpl {
public DreadOfNight(UUID ownerId) {
public DreadOfNight(final DreadOfNight card) {
public DreadOfNight copy() {return new DreadOfNight(this);
public class DreamCache extends CardImpl {
public DreamCache(UUID ownerId) {
public DreamCache(final DreamCache card) {
public DreamCache copy() {return new DreamCache(this);
class DreamCacheEffect extends OneShotEffect {
public DreamCacheEffect() {
public DreamCacheEffect(final DreamCacheEffect effect) {
public DreamCacheEffect copy() {return new DreamCacheEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Earthcraft extends CardImpl {
public Earthcraft(UUID ownerId) {
public Earthcraft(final Earthcraft card) {
public Earthcraft copy() {return new Earthcraft(this);
public class EladamriLordOfLeaves extends CardImpl {
public EladamriLordOfLeaves(UUID ownerId) {
public EladamriLordOfLeaves(final EladamriLordOfLeaves card) {
public EladamriLordOfLeaves copy() {return new EladamriLordOfLeaves(this);
public class EladamrisVineyard extends CardImpl {
public EladamrisVineyard(UUID ownerId) {
public EladamrisVineyard(final EladamrisVineyard card) {
public EladamrisVineyard copy() {return new EladamrisVineyard(this);
public class EmeraldMedallion extends CardImpl {
public EmeraldMedallion(UUID ownerId) {
public EmeraldMedallion(final EmeraldMedallion card) {
public EmeraldMedallion copy() {return new EmeraldMedallion(this);
public class EmmessiTome extends CardImpl {
public EmmessiTome(UUID ownerId) {
public EmmessiTome(final EmmessiTome card) {
public EmmessiTome copy() {return new EmmessiTome(this);
public class EndlessScream extends CardImpl {
public EndlessScream(UUID ownerId) {
public EndlessScream(final EndlessScream card) {
public EndlessScream copy() {return new EndlessScream(this);
public class Energizer extends CardImpl {
public Energizer(UUID ownerId) {
public Energizer(final Energizer card) {
public Energizer copy() {return new Energizer(this);
public class Enfeeblement extends CardImpl {
public Enfeeblement(UUID ownerId) {
public Enfeeblement(final Enfeeblement card) {
public Enfeeblement copy() {return new Enfeeblement(this);
public class EnragingLicid extends CardImpl {
public EnragingLicid(UUID ownerId) {
public EnragingLicid(final EnragingLicid card) {
public EnragingLicid copy() {return new EnragingLicid(this);
public class EssenceBottle extends CardImpl {
public EssenceBottle(UUID ownerId) {
public EssenceBottle(final EssenceBottle card) {
public EssenceBottle copy() {return new EssenceBottle(this);
class EssenceBottleCost extends CostImpl {
public EssenceBottleCost() {
public EssenceBottleCost(EssenceBottleCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return true;
public EssenceBottleCost copy() {return new EssenceBottleCost(this);
public int getRemovedCounters() {return this.removedCounters;
class EssenceBottleEffect extends OneShotEffect {
public EssenceBottleEffect() {
public EssenceBottleEffect(final EssenceBottleEffect effect) {
public EssenceBottleEffect copy() {return new EssenceBottleEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class EvincarsJustice extends CardImpl {
public EvincarsJustice(UUID ownerId) {
public EvincarsJustice(final EvincarsJustice card) {
public EvincarsJustice copy() {return new EvincarsJustice(this);
public class Extinction extends CardImpl {
public Extinction(UUID ownerId) {
public Extinction(final Extinction card) {
public Extinction copy() {return new Extinction(this);
class ExtinctionEffect extends OneShotEffect {
public ExtinctionEffect() {
public ExtinctionEffect(final ExtinctionEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public ExtinctionEffect copy() {return new ExtinctionEffect(this);
public class FeveredConvulsions extends CardImpl {
public FeveredConvulsions(UUID ownerId) {
public FeveredConvulsions(final FeveredConvulsions card) {
public FeveredConvulsions copy() {return new FeveredConvulsions(this);
public class FightingDrake extends CardImpl {
public FightingDrake(UUID ownerId) {
public FightingDrake(final FightingDrake card) {
public FightingDrake copy() {return new FightingDrake(this);
public class Firefly extends CardImpl {
public Firefly(UUID ownerId) {
public Firefly(final Firefly card) {
public Firefly copy() {return new Firefly(this);
public class Fireslinger extends CardImpl {
public Fireslinger(UUID ownerId) {
public Fireslinger(final Fireslinger card) {
public Fireslinger copy() {return new Fireslinger(this);
public class FlailingDrake extends CardImpl {
public FlailingDrake(UUID ownerId) {
public FlailingDrake(final FlailingDrake card) {
public FlailingDrake copy() {return new FlailingDrake(this);
public class FlickeringWard extends CardImpl {
public FlickeringWard(UUID ownerId) {
public FlickeringWard(final FlickeringWard card) {
public FlickeringWard copy() {return new FlickeringWard(this);
public class FlowstoneGiant extends CardImpl {
public FlowstoneGiant(UUID ownerId) {
public FlowstoneGiant(final FlowstoneGiant card) {
public FlowstoneGiant copy() {return new FlowstoneGiant(this);
public class FlowstoneSalamander extends CardImpl {
public FlowstoneSalamander(UUID ownerId) {
public FlowstoneSalamander(final FlowstoneSalamander card) {
public FlowstoneSalamander copy() {return new FlowstoneSalamander(this);
public class FlowstoneWyvern extends CardImpl {
public FlowstoneWyvern(UUID ownerId) {
public FlowstoneWyvern(final FlowstoneWyvern card) {
public FlowstoneWyvern copy() {return new FlowstoneWyvern(this);
public class FugitiveDruid extends CardImpl {
public FugitiveDruid(UUID ownerId) {
public FugitiveDruid(final FugitiveDruid card) {
public FugitiveDruid copy() {return new FugitiveDruid(this);
public class FurnaceOfRath extends CardImpl {
public FurnaceOfRath(UUID ownerId) {
public FurnaceOfRath(final FurnaceOfRath card) {
public FurnaceOfRath copy() {return new FurnaceOfRath(this);
class FurnaceOfRathEffect extends ReplacementEffectImpl {
public FurnaceOfRathEffect() {
public FurnaceOfRathEffect(final FurnaceOfRathEffect effect) {
public FurnaceOfRathEffect copy() {return new FurnaceOfRathEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return true;return true;return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class Fylamarid extends CardImpl {
public Fylamarid(UUID ownerId) {
public Fylamarid(final Fylamarid card) {
public Fylamarid copy() {return new Fylamarid(this);
public class Gallantry extends CardImpl {
public Gallantry(UUID ownerId) {
public Gallantry(final Gallantry card) {
public Gallantry copy() {return new Gallantry(this);
public class GaseousForm extends CardImpl {
public GaseousForm(UUID ownerId) {
public GaseousForm(final GaseousForm card) {
public GaseousForm copy() {return new GaseousForm(this);
public class GerrardsBattleCry extends CardImpl {
public GerrardsBattleCry(UUID ownerId) {
public GerrardsBattleCry(final GerrardsBattleCry card) {
public GerrardsBattleCry copy() {return new GerrardsBattleCry(this);
public class GhostTown extends CardImpl {
public GhostTown(UUID ownerId) {
public GhostTown(final GhostTown card) {
public GhostTown copy() {return new GhostTown(this);
public class GiantCrab extends CardImpl {
public GiantCrab(UUID ownerId) {
public GiantCrab(final GiantCrab card) {
public GiantCrab copy() {return new GiantCrab(this);
public class GiantStrength extends CardImpl {
public GiantStrength(UUID ownerId) {
public GiantStrength(final GiantStrength card) {
public GiantStrength copy() {return new GiantStrength(this);
public class GoblinBombardment extends CardImpl {
public GoblinBombardment(UUID ownerId) {
public GoblinBombardment(final GoblinBombardment card) {
public GoblinBombardment copy() {return new GoblinBombardment(this);
public class Grindstone extends CardImpl {
public Grindstone(UUID ownerId) {
public Grindstone(final Grindstone card) {
public Grindstone copy() {return new Grindstone(this);
class GrindstoneEffect extends OneShotEffect {
public GrindstoneEffect() {
public GrindstoneEffect(final GrindstoneEffect effect) {
public GrindstoneEffect copy() {return new GrindstoneEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class HandToHand extends CardImpl {
public HandToHand(UUID ownerId) {
public HandToHand(final HandToHand card) {
public HandToHand copy() {return new HandToHand(this);
public HandToHandEffect() {
public HandToHandEffect(final HandToHandEffect effect) {
public HandToHandEffect copy() {return new HandToHandEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "During combat, players can't cast instant spells or activate abilities that aren't mana abilities (" + mageObject.getIdName() + ").";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public class HannasCustody extends CardImpl {
public HannasCustody(UUID ownerId) {
public HannasCustody(final HannasCustody card) {
public HannasCustody copy() {return new HannasCustody(this);
public class Havoc extends CardImpl {
public Havoc(UUID ownerId) {
public Havoc(final Havoc card) {
public Havoc copy() {return new Havoc(this);
public class HeartSliver extends CardImpl {
public HeartSliver(UUID ownerId) {
public HeartSliver(final HeartSliver card) {
public HeartSliver copy() {return new HeartSliver(this);
public class HeartwoodGiant extends CardImpl {
public HeartwoodGiant(UUID ownerId) {
public HeartwoodGiant(final HeartwoodGiant card) {
public HeartwoodGiant copy() {return new HeartwoodGiant(this);
public class HeartwoodTreefolk extends CardImpl {
public HeartwoodTreefolk(UUID ownerId) {
public HeartwoodTreefolk(final HeartwoodTreefolk card) {
public HeartwoodTreefolk copy() {return new HeartwoodTreefolk(this);
public class HelmOfPossession extends CardImpl {
public HelmOfPossession(UUID ownerId) {
public HelmOfPossession(final HelmOfPossession card) {
public HelmOfPossession copy() {return new HelmOfPossession(this);
class HelmOfPossessionCondition implements Condition {
public boolean apply(Game game, Ability source) {return controllerId.equals(source.getControllerId());return false;
public class Humility extends CardImpl {
public Humility(UUID ownerId) {
public Humility(final Humility card) {
public Humility copy() {return new Humility(this);
class HumilityEffect extends ContinuousEffectImpl {
public HumilityEffect(Duration duration) {
public HumilityEffect(final HumilityEffect effect) {
public HumilityEffect copy() {return new HumilityEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.PTChangingEffects_7;
public class ImpsTaunt extends CardImpl {
public ImpsTaunt(UUID ownerId) {
public ImpsTaunt(final ImpsTaunt card) {
public ImpsTaunt copy() {return new ImpsTaunt(this);
public class Insight extends CardImpl {
public Insight(UUID ownerId) {
public Insight(final Insight card) {
public Insight copy() {return new Insight(this);
public class Intuition extends CardImpl {
public Intuition(UUID ownerId) {
public Intuition(final Intuition card) {
public Intuition copy() {return new Intuition(this);
class IntuitionEffect extends SearchEffect {
public IntuitionEffect() {
public IntuitionEffect(final IntuitionEffect effect) {
public IntuitionEffect copy() {return new IntuitionEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;
public List<UUID> getTargets() {return target.getTargets();
public class Invulnerability extends CardImpl {
public Invulnerability(UUID ownerId) {
public Invulnerability(final Invulnerability card) {
public Invulnerability copy() {return new Invulnerability(this);
public class JackalPup extends CardImpl {
public JackalPup(UUID ownerId) {
public JackalPup(final JackalPup card) {
public JackalPup copy() {return new JackalPup(this);
class JackalPupEffect extends OneShotEffect {
public JackalPupEffect() {
public JackalPupEffect(final JackalPupEffect effect) {
public JackalPupEffect copy() {return new JackalPupEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class JetMedallion extends CardImpl {
public JetMedallion(UUID ownerId) {
public JetMedallion(final JetMedallion card) {
public JetMedallion copy() {return new JetMedallion(this);
public class Kezzerdrix extends CardImpl {
public Kezzerdrix(UUID ownerId) {
public Kezzerdrix(final Kezzerdrix card) {
public Kezzerdrix copy() {return new Kezzerdrix(this);
public class Kindle extends CardImpl {
public Kindle(UUID ownerId) {
public Kindle(final Kindle card) {
public Kindle copy() {return new Kindle(this);
class KindleCardsInAllGraveyardsCount implements DynamicValue {
public KindleCardsInAllGraveyardsCount(FilterCard filter) {
private KindleCardsInAllGraveyardsCount(KindleCardsInAllGraveyardsCount dynamicValue) {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return amount + 2;
public KindleCardsInAllGraveyardsCount copy() {return new KindleCardsInAllGraveyardsCount(this);
public String toString() {return "1";
public String getMessage() {return filter.getMessage() + " in all graveyards";
public class KnightOfDawn extends CardImpl {
public KnightOfDawn(UUID ownerId) {
public KnightOfDawn(final KnightOfDawn card) {
public KnightOfDawn copy() {return new KnightOfDawn(this);
public class KnightOfDusk extends CardImpl {
public KnightOfDusk(UUID ownerId) {
public KnightOfDusk(final KnightOfDusk card) {
public KnightOfDusk copy() {return new KnightOfDusk(this);
public class Krakilin extends CardImpl {
public Krakilin(UUID ownerId) {
public Krakilin(final Krakilin card) {
public Krakilin copy() {return new Krakilin(this);
public class LeechingLicid extends CardImpl {
public LeechingLicid(UUID ownerId) {
public LeechingLicid(final LeechingLicid card) {
public LeechingLicid copy() {return new LeechingLicid(this);
public class LegacysAllure extends CardImpl {
public LegacysAllure(UUID ownerId) {
public LegacysAllure(final LegacysAllure card) {
public void adjustTargets(Ability ability, Game game) {
public LegacysAllure copy() {return new LegacysAllure(this);
public class Legerdemain extends CardImpl {
public Legerdemain(UUID ownerId) {
public Legerdemain(final Legerdemain card) {
public Legerdemain copy() {return new Legerdemain(this);
class LegerdemainSecondTarget extends TargetPermanent {
LegerdemainSecondTarget() {
LegerdemainSecondTarget(final LegerdemainSecondTarget target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return true;return true;return false;
public LegerdemainSecondTarget copy() {return new LegerdemainSecondTarget(this);
public class LightningBlast extends CardImpl {
public LightningBlast(UUID ownerId) {
public LightningBlast(final LightningBlast card) {
public LightningBlast copy() {return new LightningBlast(this);
public class LightOfDay extends CardImpl {
public LightOfDay(UUID ownerId) {
public LightOfDay(final LightOfDay card) {
public LightOfDay copy() {return new LightOfDay(this);
public class LivingDeath extends CardImpl {
public LivingDeath(UUID ownerId) {
public LivingDeath(final LivingDeath card) {
public LivingDeath copy() {return new LivingDeath(this);
class LivingDeathEffect extends OneShotEffect {
public LivingDeathEffect() {
public LivingDeathEffect(final LivingDeathEffect effect) {
public LivingDeathEffect copy() {return new LivingDeathEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LowlandGiant extends CardImpl {
public LowlandGiant(UUID ownerId) {
public LowlandGiant(final LowlandGiant card) {
public LowlandGiant copy() {return new LowlandGiant(this);
public class Magmasaur extends CardImpl {
public Magmasaur(UUID ownerId) {
public Magmasaur(final Magmasaur card) {
public Magmasaur copy() {return new Magmasaur(this);
class MagmasaurEffect extends OneShotEffect {
public MagmasaurEffect() {
public MagmasaurEffect(final MagmasaurEffect effect) {
public MagmasaurEffect copy() {return new MagmasaurEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Manakin extends CardImpl {
public Manakin(UUID ownerId) {
public Manakin(final Manakin card) {
public Manakin copy() {return new Manakin(this);
public class ManaSeverance extends CardImpl {
public ManaSeverance(UUID ownerId) {
public ManaSeverance(final ManaSeverance card) {
public ManaSeverance copy() {return new ManaSeverance(this);
class ManaSeveranceEffect extends SearchEffect {
public ManaSeveranceEffect() {
public ManaSeveranceEffect(final ManaSeveranceEffect effect) {
public ManaSeveranceEffect copy() {return new ManaSeveranceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MantaRiders extends CardImpl {
public MantaRiders(UUID ownerId) {
public MantaRiders(final MantaRiders card) {
public MantaRiders copy() {return new MantaRiders(this);
public class MarbleTitan extends CardImpl {
public MarbleTitan(UUID ownerId) {
public MarbleTitan(final MarbleTitan card) {
public MarbleTitan copy() {return new MarbleTitan(this);
public class MarshLurker extends CardImpl {
public MarshLurker(UUID ownerId) {
public MarshLurker(final MarshLurker card) {
public MarshLurker copy() {return new MarshLurker(this);
public class MasterDecoy extends CardImpl {
public MasterDecoy(UUID ownerId) {
public MasterDecoy(final MasterDecoy card) {
public MasterDecoy copy() {return new MasterDecoy(this);
public class Mawcor extends CardImpl {
public Mawcor(UUID ownerId) {
public Mawcor(final Mawcor card) {
public Mawcor copy() {return new Mawcor(this);return new MazeOfShadows(this);
public class Meditate extends CardImpl {
public Meditate(UUID ownerId) {
public Meditate(final Meditate card) {
public Meditate copy() {return new Meditate(this);
class SpipTurnEffect extends OneShotEffect {
public SpipTurnEffect() {
public SpipTurnEffect(final SpipTurnEffect effect) {
public SpipTurnEffect copy() {return new SpipTurnEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class MetallicSliver extends CardImpl {
public MetallicSliver(UUID ownerId) {
public MetallicSliver(final MetallicSliver card) {
public MetallicSliver copy() {return new MetallicSliver(this);
public class MindwhipSliver extends CardImpl {
public MindwhipSliver(UUID ownerId) {
public MindwhipSliver(final MindwhipSliver card) {
public MindwhipSliver copy() {return new MindwhipSliver(this);
public class MirrisGuile extends CardImpl {
public MirrisGuile(UUID ownerId) {
public MirrisGuile(final MirrisGuile card) {
public MirrisGuile copy() {return new MirrisGuile(this);
public class MnemonicSliver extends CardImpl {
public MnemonicSliver(UUID ownerId) {
public MnemonicSliver(final MnemonicSliver card) {
public MnemonicSliver copy() {return new MnemonicSliver(this);
public class MoggCannon extends CardImpl {
public MoggCannon(UUID ownerId) {
public MoggCannon(final MoggCannon card) {
public MoggCannon copy() {return new MoggCannon(this);
public class MoggConscripts extends CardImpl {
public MoggConscripts(UUID ownerId) {
public MoggConscripts(final MoggConscripts card) {
public MoggConscripts copy() {return new MoggConscripts(this);
class MoggConscriptsEffect extends RestrictionEffect {
public MoggConscriptsEffect() {
public MoggConscriptsEffect(final MoggConscriptsEffect effect) {
public MoggConscriptsEffect copy() {return new MoggConscriptsEffect(this);
public boolean canAttack(Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public class MoggFanatic extends CardImpl {
public MoggFanatic(UUID ownerId) {
public MoggFanatic(final MoggFanatic card) {
public MoggFanatic copy() {return new MoggFanatic(this);
public class MoggSquad extends CardImpl {
public MoggSquad(UUID ownerId) {
public MoggSquad(final MoggSquad card) {
public MoggSquad copy() {return new MoggSquad(this);
public class MongrelPack extends CardImpl {
public MongrelPack(UUID ownerId) {
public MongrelPack(final MongrelPack card) {
public MongrelPack copy() {return new MongrelPack(this);
class MongrelPackAbility extends ZoneChangeTriggeredAbility {
public MongrelPackAbility() {
public MongrelPackAbility(MongrelPackAbility ability) {
public MongrelPackAbility copy() {return new MongrelPackAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
class HoundToken extends Token {
public HoundToken() {
public class MuscleSliver extends CardImpl {
public MuscleSliver(UUID ownerId) {
public MuscleSliver(final MuscleSliver card) {
public MuscleSliver copy() {return new MuscleSliver(this);
public class NaturalSpring extends CardImpl {
public NaturalSpring(UUID ownerId) {
public NaturalSpring(final NaturalSpring card) {
public NaturalSpring copy() {return new NaturalSpring(this);
public class NeedleStorm extends CardImpl {
public NeedleStorm(UUID ownerId) {
public NeedleStorm(final NeedleStorm card) {
public NeedleStorm copy() {return new NeedleStorm(this);
public class NurturingLicid extends CardImpl {
public NurturingLicid(UUID ownerId) {
public NurturingLicid(final NurturingLicid card) {
public NurturingLicid copy() {return new NurturingLicid(this);
public class Opportunist extends CardImpl {
public Opportunist(UUID ownerId) {
public Opportunist(final Opportunist card) {
public Opportunist copy() {return new Opportunist(this);
public class OracleEnVec extends CardImpl {
public OracleEnVec(UUID ownerId) {
public OracleEnVec(final OracleEnVec card) {
public OracleEnVec copy() {return new OracleEnVec(this);
class OracleEnVecEffect extends OneShotEffect {
OracleEnVecEffect() {
OracleEnVecEffect(final OracleEnVecEffect effect) {
public OracleEnVecEffect copy() {return new OracleEnVecEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class OracleEnVecMustAttackRequirementEffect extends RequirementEffect {
OracleEnVecMustAttackRequirementEffect() {
OracleEnVecMustAttackRequirementEffect(final OracleEnVecMustAttackRequirementEffect effect) {
public OracleEnVecMustAttackRequirementEffect copy() {return new OracleEnVecMustAttackRequirementEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return this.getTargetPointer().getFirst(game, source).equals(permanent.getId());
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public boolean isInactive(Ability source, Game game) {return startingTurn != game.getTurnNum()
public String getText(Mode mode) {return "{this} attack if able.";
class OracleEnVecCantAttackRestrictionEffect extends RestrictionEffect {
OracleEnVecCantAttackRestrictionEffect() {
OracleEnVecCantAttackRestrictionEffect(final OracleEnVecCantAttackRestrictionEffect effect) {
public OracleEnVecCantAttackRestrictionEffect copy() {return new OracleEnVecCantAttackRestrictionEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return this.getTargetPointer().getFirst(game, source).equals(permanent.getId());
public boolean canAttack(Game game) {return false;
public boolean isInactive(Ability source, Game game) {return startingTurn != game.getTurnNum()
public String getText(Mode mode) {return "{this} can't attack.";
class OracleEnVecDelayedTriggeredAbility extends DelayedTriggeredAbility {
OracleEnVecDelayedTriggeredAbility(int startingTurn, List<UUID> chosenCreatures) {
OracleEnVecDelayedTriggeredAbility(final OracleEnVecDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return startingTurn != game.getTurnNum() && game.getActivePlayerId().equals(event.getPlayerId());
public OracleEnVecDelayedTriggeredAbility copy() {return new OracleEnVecDelayedTriggeredAbility(this);
public String getRule() {return "At the beginning of that turn's end step, destroy each of the chosen creatures that didn't attack.";
class OracleEnVecDestroyEffect extends OneShotEffect {
OracleEnVecDestroyEffect(List<UUID> chosenCreatures) {
OracleEnVecDestroyEffect(final OracleEnVecDestroyEffect effect) {
public OracleEnVecDestroyEffect copy() {return new OracleEnVecDestroyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class OrimSamiteHealer extends CardImpl {
public OrimSamiteHealer(UUID ownerId) {
public OrimSamiteHealer(final OrimSamiteHealer card) {
public OrimSamiteHealer copy() {return new OrimSamiteHealer(this);
public class Pallimud extends CardImpl {
public Pallimud(UUID ownerId) {
public Pallimud(final Pallimud card) {
public Pallimud copy() {return new Pallimud(this);
class AnathemancerCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return game.getBattlefield().count(filter, sourceAbility.getSourceId(), sourceAbility.getControllerId(), game);return 0;
public DynamicValue copy() {return new AnathemancerCount();
public String toString() {return "1";
public String getMessage() {return "tapped lands the chosen player controls";
public class PatchworkGnomes extends CardImpl {
public PatchworkGnomes(UUID ownerId) {
public PatchworkGnomes(final PatchworkGnomes card) {
public PatchworkGnomes copy() {return new PatchworkGnomes(this);
public class PearlMedallion extends CardImpl {
public PearlMedallion(UUID ownerId) {
public PearlMedallion(final PearlMedallion card) {
public PearlMedallion copy() {return new PearlMedallion(this);
public class PegasusRefuge extends CardImpl {
public PegasusRefuge(UUID ownerId) {
public PegasusRefuge(final PegasusRefuge card) {
public PegasusRefuge copy() {return new PegasusRefuge(this);
public class Perish extends CardImpl {
public Perish(UUID ownerId) {
public Perish(final Perish card) {
public Perish copy() {return new Perish(this);
public class PincherBeetles extends CardImpl {
public PincherBeetles(UUID ownerId) {
public PincherBeetles(final PincherBeetles card) {
public PincherBeetles copy() {return new PincherBeetles(this);
public class PineBarrens extends CardImpl {
public PineBarrens(UUID ownerId) {
public PineBarrens(final PineBarrens card) {
public PineBarrens copy() {return new PineBarrens(this);
public class PitImp extends CardImpl {
public PitImp(UUID ownerId) {
public PitImp(final PitImp card) {
public PitImp copy() {return new PitImp(this);
public class Precognition extends CardImpl {
public Precognition(UUID ownerId) {
public Precognition(final Precognition card) {
public Precognition copy() {return new Precognition(this);
class PrecognitionEffect extends OneShotEffect {
public PrecognitionEffect() {
public PrecognitionEffect(final PrecognitionEffect effect) {
public PrecognitionEffect copy() {return new PrecognitionEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class QuickeningLicid extends CardImpl {
public QuickeningLicid(UUID ownerId) {
public QuickeningLicid(final QuickeningLicid card) {
public QuickeningLicid copy() {return new QuickeningLicid(this);
public class RainOfTears extends CardImpl {
public RainOfTears(UUID ownerId) {
public RainOfTears(final RainOfTears card) {
public RainOfTears copy() {return new RainOfTears(this);
public class RangerEnVec extends CardImpl {
public RangerEnVec(UUID ownerId) {
public RangerEnVec(final RangerEnVec card) {
public RangerEnVec copy() {return new RangerEnVec(this);
public class RatsOfRath extends CardImpl {
public RatsOfRath(UUID ownerId) {
public class RealityAnchor extends CardImpl {
public RealityAnchor(UUID ownerId) {
public RealityAnchor(final RealityAnchor card) {
public RealityAnchor copy() {return new RealityAnchor(this);
public class Reanimate extends CardImpl {
public Reanimate(UUID ownerId) {
public Reanimate(final Reanimate card) {
public Reanimate copy() {return new Reanimate(this);
public class RecklessSpite extends CardImpl {
public RecklessSpite(UUID ownerId) {
public RecklessSpite(final RecklessSpite card) {
public RecklessSpite copy() {return new RecklessSpite(this);
public class Recycle extends CardImpl {
public Recycle(UUID ownerId) {
public Recycle(final Recycle card) {
public Recycle copy() {return new Recycle(this);
class RecycleTriggeredAbility extends TriggeredAbilityImpl {
RecycleTriggeredAbility() {
RecycleTriggeredAbility(final RecycleTriggeredAbility ability) {
public RecycleTriggeredAbility copy() {return new RecycleTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST || event.getType() == EventType.LAND_PLAYED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.getControllerId());
public String getRule() {return "Whenever you play a card, draw a card.";
public class ReflectingPool extends CardImpl {
public ReflectingPool(UUID ownerId) {
public ReflectingPool(final ReflectingPool card) {
public ReflectingPool copy() {return new ReflectingPool(this);
class ReflectingPoolManaAbility extends ManaAbility {
public ReflectingPoolManaAbility() {
public ReflectingPoolManaAbility(final ReflectingPoolManaAbility ability) {
public ReflectingPoolManaAbility copy() {return new ReflectingPoolManaAbility(this);
public List<Mana> getNetMana(Game game) {return ((ReflectingPoolEffect) getEffects().get(0)).getNetMana(game, this);
class ReflectingPoolEffect extends ManaEffect {
public ReflectingPoolEffect() {
public ReflectingPoolEffect(final ReflectingPoolEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;return true;
public List<Mana> getNetMana(Game game, Ability source) {return netManas;return netManas;
private Mana getManaTypes(Game game, Ability source) {return types;return types;
public Mana getMana(Game game, Ability source) {return null;
public ReflectingPoolEffect copy() {return new ReflectingPoolEffect(this);
public class RenegadeWarlord extends CardImpl {
public RenegadeWarlord(UUID ownerId) {
public RenegadeWarlord(final RenegadeWarlord card) {
public RenegadeWarlord copy() {return new RenegadeWarlord(this);
public class Respite extends CardImpl {
public Respite(UUID ownerId) {
public Respite(final Respite card) {
public Respite copy() {return new Respite(this);
public class RootbreakerWurm extends CardImpl {
public RootbreakerWurm(UUID ownerId) {
public RootbreakerWurm(final RootbreakerWurm card) {
public RootbreakerWurm copy() {return new RootbreakerWurm(this);
public class RootMaze extends CardImpl {
public RootMaze(UUID ownerId) {
public RootMaze(final RootMaze card) {
public RootMaze copy() {return new RootMaze(this);
class RootMazeEffect extends ReplacementEffectImpl {
RootMazeEffect() {
RootMazeEffect(final RootMazeEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean applies(GameEvent event, Ability source, Game game) {return permanent != null && (permanent.getCardType().contains(CardType.LAND) || permanent.getCardType().contains(CardType.ARTIFACT));
public RootMazeEffect copy() {return new RootMazeEffect(this);
public class Rootwalla extends CardImpl {
public Rootwalla(UUID ownerId) {
public Rootwalla(final Rootwalla card) {
public Rootwalla copy() {return new Rootwalla(this);
public class RootwaterDepths extends CardImpl {
public RootwaterDepths(UUID ownerId) {
public RootwaterDepths(final RootwaterDepths card) {
public RootwaterDepths copy() {return new RootwaterDepths(this);
public class RootwaterDiver extends CardImpl {
public RootwaterDiver(UUID ownerId) {
public RootwaterDiver(final RootwaterDiver card) {
public RootwaterDiver copy() {return new RootwaterDiver(this);
public class RootwaterHunter extends CardImpl {
public RootwaterHunter(UUID ownerId) {
public RootwaterHunter(final RootwaterHunter card) {
public RootwaterHunter copy() {return new RootwaterHunter(this);
public class RootwaterMatriarch extends CardImpl {
public RootwaterMatriarch(UUID ownerId) {
public RootwaterMatriarch(final RootwaterMatriarch card) {
public RootwaterMatriarch copy() {return new RootwaterMatriarch(this);
public class Safeguard extends CardImpl {
public Safeguard(UUID ownerId) {
public Safeguard(final Safeguard card) {
public Safeguard copy() {return new Safeguard(this);
public class SaltFlats extends CardImpl {
public SaltFlats(UUID ownerId) {
public SaltFlats(final SaltFlats card) {
public SaltFlats copy() {return new SaltFlats(this);
public class SandstoneWarrior extends CardImpl {
public SandstoneWarrior(UUID ownerId) {
public SandstoneWarrior(final SandstoneWarrior card) {
public SandstoneWarrior copy() {return new SandstoneWarrior(this);
public class SapphireMedallion extends CardImpl {
public SapphireMedallion(UUID ownerId) {
public SapphireMedallion(final SapphireMedallion card) {
public SapphireMedallion copy() {return new SapphireMedallion(this);
public class Sarcomancy extends CardImpl {
public Sarcomancy(UUID ownerId) {
public Sarcomancy(final Sarcomancy card) {
public Sarcomancy copy() {return new Sarcomancy(this);
public class Scabland extends CardImpl {
public Scabland(UUID ownerId) {
public Scabland(final Scabland card) {
public Scabland copy() {return new Scabland(this);
public class ScaldingTongs extends CardImpl {
public ScaldingTongs(UUID ownerId) {
public ScaldingTongs(final ScaldingTongs card) {
public ScaldingTongs copy() {return new ScaldingTongs(this);
public class ScorchedEarth extends CardImpl {
public ScorchedEarth(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public ScorchedEarth(final ScorchedEarth card) {
public void adjustCosts(Ability ability, Game game) {
public ScorchedEarth copy() {return new ScorchedEarth(this);
class ScorchedEarthRuleEffect extends OneShotEffect {
public ScorchedEarthRuleEffect() {
public ScorchedEarthRuleEffect(final ScorchedEarthRuleEffect effect) {
public ScorchedEarthRuleEffect copy() {return new ScorchedEarthRuleEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Scragnoth extends CardImpl {
public Scragnoth(UUID ownerId) {
public Scragnoth(final Scragnoth card) {
public Scragnoth copy() {return new Scragnoth(this);
public class ScreechingHarpy extends CardImpl {
public ScreechingHarpy(UUID ownerId) {
public ScreechingHarpy(final ScreechingHarpy card) {
public ScreechingHarpy copy() {return new ScreechingHarpy(this);
public class ScrollRack extends CardImpl {
public ScrollRack(UUID ownerId) {
public ScrollRack(final ScrollRack card) {
public ScrollRack copy() {return new ScrollRack(this);
class ScrollRackEffect extends OneShotEffect {
public ScrollRackEffect() {
public ScrollRackEffect(final ScrollRackEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ScrollRackEffect copy() {return new ScrollRackEffect(this);
public class SeaMonster extends CardImpl {
public SeaMonster(UUID ownerId) {
public SeaMonster(final SeaMonster card) {
public SeaMonster copy() {return new SeaMonster(this);
public class SearingTouch extends CardImpl {
public SearingTouch(UUID ownerId) {
public SearingTouch(final SearingTouch card) {
public SearingTouch copy() {return new SearingTouch(this);
public class SeekerOfSkybreak extends CardImpl {
public SeekerOfSkybreak(UUID ownerId) {
public SeekerOfSkybreak(final SeekerOfSkybreak card) {
public SeekerOfSkybreak copy() {return new SeekerOfSkybreak(this);
public class SegmentedWurm extends CardImpl {
public SegmentedWurm(UUID ownerId) {
public SegmentedWurm(final SegmentedWurm card) {
public SegmentedWurm copy() {return new SegmentedWurm(this);
public class SeleniaDarkAngel extends CardImpl {
public SeleniaDarkAngel(UUID ownerId) {
public SeleniaDarkAngel(final SeleniaDarkAngel card) {
public SeleniaDarkAngel copy() {return new SeleniaDarkAngel(this);
public class SereneOffering extends CardImpl {
public SereneOffering(UUID ownerId) {
public SereneOffering(final SereneOffering card) {
public SereneOffering copy() {return new SereneOffering(this);
public class ServantOfVolrath extends CardImpl {
public ServantOfVolrath(UUID ownerId) {
public ServantOfVolrath(final ServantOfVolrath card) {
public ServantOfVolrath copy() {return new ServantOfVolrath(this);
public class ShimmeringWings extends CardImpl {
public ShimmeringWings(UUID ownerId) {
public ShimmeringWings(final ShimmeringWings card) {
public ShimmeringWings copy() {return new ShimmeringWings(this);
public class Shocker extends CardImpl {
public Shocker(UUID ownerId) {
public Shocker(final Shocker card) {
public Shocker copy() {return new Shocker(this);
class ShockerEffect extends OneShotEffect {
public ShockerEffect() {
public ShockerEffect(final ShockerEffect effect) {
public ShockerEffect copy() {return new ShockerEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return new SkyshroudCondor(this);
public class SkyshroudElf extends CardImpl {
public SkyshroudElf(UUID ownerId) {
public SkyshroudElf(final SkyshroudElf card) {
public SkyshroudElf copy() {return new SkyshroudElf(this);
public class SkyshroudForest extends CardImpl {
public SkyshroudForest(UUID ownerId) {
public SkyshroudForest(final SkyshroudForest card) {
public SkyshroudForest copy() {return new SkyshroudForest(this);
public class SkyshroudRanger extends CardImpl {
public SkyshroudRanger(UUID ownerId) {
public SkyshroudRanger(final SkyshroudRanger card) {
public SkyshroudRanger copy() {return new SkyshroudRanger(this);
public class SkyshroudTroll extends CardImpl {
public SkyshroudTroll(UUID ownerId) {
public SkyshroudTroll(final SkyshroudTroll card) {
public SkyshroudTroll copy() {return new SkyshroudTroll(this);
public class SkySpirit extends CardImpl {
public SkySpirit(UUID ownerId) {
public SkySpirit(final SkySpirit card) {
public SkySpirit copy() {return new SkySpirit(this);
public class SoltariCrusader extends CardImpl {
public SoltariCrusader(UUID ownerId) {
public SoltariCrusader(final SoltariCrusader card) {
public SoltariCrusader copy() {return new SoltariCrusader(this);
public class SoltariEmissary extends CardImpl {
public SoltariEmissary(UUID ownerId) {
public SoltariEmissary(final SoltariEmissary card) {
public SoltariEmissary copy() {return new SoltariEmissary(this);
public class SoltariFootSoldier extends CardImpl {
public SoltariFootSoldier(UUID ownerId) {
public SoltariFootSoldier(final SoltariFootSoldier card) {
public SoltariFootSoldier copy() {return new SoltariFootSoldier(this);
public class SoltariGuerrillas extends CardImpl {
public SoltariGuerrillas(UUID ownerId) {
public SoltariGuerrillas(final SoltariGuerrillas card) {
public SoltariGuerrillas copy() {return new SoltariGuerrillas(this);
class SoltariGuerrillasReplacementEffect extends PreventionEffectImpl {
SoltariGuerrillasReplacementEffect() {
SoltariGuerrillasReplacementEffect(final SoltariGuerrillasReplacementEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {return controller.hasOpponent(event.getTargetId(), game);return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {
public class SoltariMonk extends CardImpl {
public SoltariMonk(UUID ownerId) {
public SoltariMonk(final SoltariMonk card) {
public SoltariMonk copy() {return new SoltariMonk(this);
public class SoltariPriest extends CardImpl {
public SoltariPriest(UUID ownerId) {
public SoltariPriest(final SoltariPriest card) {
public SoltariPriest copy() {return new SoltariPriest(this);
public class SoltariTrooper extends CardImpl {
public SoltariTrooper(UUID ownerId) {
public SoltariTrooper(final SoltariTrooper card) {
public SoltariTrooper copy() {return new SoltariTrooper(this);
public class Souldrinker extends CardImpl {
public Souldrinker(UUID ownerId) {
public Souldrinker(final Souldrinker card) {
public Souldrinker copy() {return new Souldrinker(this);
public class SpikeDrone extends CardImpl {
public SpikeDrone(UUID ownerId) {
public SpikeDrone(final SpikeDrone card) {
public SpikeDrone copy() {return new SpikeDrone(this);
public class SpiritMirror extends CardImpl {
public SpiritMirror(UUID ownerId) {
public SpiritMirror(final SpiritMirror card) {
public SpiritMirror copy() {return new SpiritMirror(this);
class ReflectionToken extends Token {
public ReflectionToken() {
public class StalkingStones extends CardImpl {
public StalkingStones(UUID ownerId) {
public StalkingStones(final StalkingStones card) {
public StalkingStones copy() {return new StalkingStones(this);
class StalkingStonesToken extends Token {
public StalkingStonesToken() {
public class StarkeOfRath extends CardImpl {
public StarkeOfRath(UUID ownerId) {
public StarkeOfRath(final StarkeOfRath card) {
public StarkeOfRath copy() {return new StarkeOfRath(this);
class StarkeOfRathEffect extends OneShotEffect {
public StarkeOfRathEffect() {
public StarkeOfRathEffect(final StarkeOfRathEffect effect) {
public StarkeOfRathEffect copy() {return new StarkeOfRathEffect(this);
public boolean apply(Game game, Ability source) {return false;
class StarkeOfRathControlEffect extends ContinuousEffectImpl {
public StarkeOfRathControlEffect() {
public StarkeOfRathControlEffect(final StarkeOfRathControlEffect effect) {
public StarkeOfRathControlEffect copy() {return new StarkeOfRathControlEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(getTargetPointer().getFirst(game, source), game);return false;
public class StaticOrb extends CardImpl {
public StaticOrb(UUID ownerId) {
public StaticOrb(final StaticOrb card) {
public StaticOrb copy() {return new StaticOrb(this);
class StaticOrbEffect extends RestrictionUntapNotMoreThanEffect {
public StaticOrbEffect() {
public StaticOrbEffect(final StaticOrbEffect effect) {
public boolean applies(Player player, Ability source, Game game) {return true;return false;
public StaticOrbEffect copy() {return new StaticOrbEffect(this);
public class StaunchDefenders extends CardImpl {
public StaunchDefenders(UUID ownerId) {
public StaunchDefenders(final StaunchDefenders card) {
public StaunchDefenders copy() {return new StaunchDefenders(this);
public class StealEnchantment extends CardImpl {
public StealEnchantment(UUID ownerId) {
public StealEnchantment(final StealEnchantment card) {
public StealEnchantment copy() {return new StealEnchantment(this);
public class StingingLicid extends CardImpl {
public StingingLicid(UUID ownerId) {
public StingingLicid(final StingingLicid card) {
public StingingLicid copy() {return new StingingLicid(this);
public class StoneRain extends CardImpl {
public StoneRain (UUID ownerId) {
public StoneRain (final StoneRain card) {
public StoneRain copy() {return new StoneRain(this);
public class StormFront extends CardImpl {
public StormFront(UUID ownerId) {
public StormFront(final StormFront card) {
public StormFront copy() {return new StormFront(this);
public class Stun extends CardImpl {
public Stun(UUID ownerId) {
public Stun(final Stun card) {
public Stun copy() {return new Stun(this);
public class TalonSliver extends CardImpl {
public TalonSliver(UUID ownerId) {
public TalonSliver(final TalonSliver card) {
public TalonSliver copy() {return new TalonSliver(this);
public class Telethopter extends CardImpl {
public Telethopter(UUID ownerId) {
public Telethopter(final Telethopter card) {
public Telethopter copy() {return new Telethopter(this);
public class ThalakosDreamsower extends CardImpl {
public ThalakosDreamsower(UUID ownerId) {
public ThalakosDreamsower(final ThalakosDreamsower card) {
public ThalakosDreamsower copy() {return new ThalakosDreamsower(this);
public class ThalakosLowlands extends CardImpl {
public ThalakosLowlands(UUID ownerId) {
public ThalakosLowlands(final ThalakosLowlands card) {
public ThalakosLowlands copy() {return new ThalakosLowlands(this);
public class ThalakosMistfolk extends CardImpl {
public ThalakosMistfolk(UUID ownerId) {
public ThalakosMistfolk(final ThalakosMistfolk card) {
public ThalakosMistfolk copy() {return new ThalakosMistfolk(this);
public class ThalakosSentry extends CardImpl {
public ThalakosSentry(UUID ownerId) {
public ThalakosSentry(final ThalakosSentry card) {
public ThalakosSentry copy() {return new ThalakosSentry(this);
public class Thumbscrews extends CardImpl {
public Thumbscrews(UUID ownerId) {
public Thumbscrews(final Thumbscrews card) {
public Thumbscrews copy() {return new Thumbscrews(this);
public class TimeEbb extends CardImpl {
public TimeEbb(UUID ownerId) {
public TimeEbb(final TimeEbb card) {
public TimeEbb copy() {return new TimeEbb(this);
public class ToothAndClaw extends CardImpl {
public ToothAndClaw(UUID ownerId) {
public ToothAndClaw(final ToothAndClaw card) {
public ToothAndClaw copy() {return new ToothAndClaw(this);
class CarnivoreToken extends Token {
CarnivoreToken() {return new TrainedArmodon(this);
public class Tranquility extends CardImpl {
public Tranquility(UUID ownerId) {
public Tranquility(final Tranquility card) {
public Tranquility copy() {return new Tranquility(this);
class TranquilityEffect extends OneShotEffect {
public TranquilityEffect() {
public TranquilityEffect(final TranquilityEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TranquilityEffect copy() {return new TranquilityEffect(this);return new TrumpetingArmodon(this);
public class VecTownships extends CardImpl {
public VecTownships(UUID ownerId) {
public VecTownships(final VecTownships card) {
public VecTownships copy() {return new VecTownships(this);
public class VerdantForce extends CardImpl {
public VerdantForce(UUID ownerId) {
public VerdantForce(final VerdantForce card) {
public VerdantForce copy() {return new VerdantForce(this);
public class Verdigris extends CardImpl {
public Verdigris(UUID ownerId) {
public Verdigris(final Verdigris card) {
public Verdigris copy() {return new Verdigris(this);
public class VhatiIlDal extends CardImpl {
public VhatiIlDal(UUID ownerId) {
public VhatiIlDal(final VhatiIlDal card) {
public VhatiIlDal copy() {return new VhatiIlDal(this);
class VhatiIlDalEffect extends OneShotEffect {
public VhatiIlDalEffect() {
public VhatiIlDalEffect(final VhatiIlDalEffect effect) {
public VhatiIlDalEffect copy() {return new VhatiIlDalEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class VolrathsCurse extends CardImpl {
public VolrathsCurse(UUID ownerId) {
public VolrathsCurse(final VolrathsCurse card) {
public VolrathsCurse copy() {return new VolrathsCurse(this);
class VolrathsCurseRestrictionEffect extends RestrictionEffect {
public VolrathsCurseRestrictionEffect() {
public VolrathsCurseRestrictionEffect(final VolrathsCurseRestrictionEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return game.getState().getValue(key) == null;return false;
public boolean canAttack(Game game) {return false;
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public VolrathsCurseRestrictionEffect copy() {return new VolrathsCurseRestrictionEffect(this);
public VolrathsCurseCantActivateAbilitiesEffect() {
public VolrathsCurseCantActivateAbilitiesEffect(final VolrathsCurseCantActivateAbilitiesEffect effect) {
public VolrathsCurseCantActivateAbilitiesEffect copy() {return new VolrathsCurseCantActivateAbilitiesEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ACTIVATE_ABILITY;
public boolean applies(GameEvent event, Ability source, Game game) {return game.getState().getValue(key) == null;return false;
class VolrathsCurseSpecialAction extends SpecialAction {
public VolrathsCurseSpecialAction() {
public VolrathsCurseSpecialAction(final VolrathsCurseSpecialAction ability) {
public VolrathsCurseSpecialAction copy() {return new VolrathsCurseSpecialAction(this);
class VolrathsCurseIgnoreEffect extends OneShotEffect {
public VolrathsCurseIgnoreEffect(final String keyString) {
public VolrathsCurseIgnoreEffect(final VolrathsCurseIgnoreEffect effect) {
public VolrathsCurseIgnoreEffect copy() {return new VolrathsCurseIgnoreEffect(this);
public boolean apply(Game game, Ability source) {return true;return new WallOfDiffusion(this);
public boolean apply(Game game, Ability source) {return true;return new CanBlockAsThoughtIthadShadowEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return sourceId.equals(source.getSourceId());
public class Warmth extends CardImpl {
public Warmth(UUID ownerId) {
public Warmth(final Warmth card) {
public Warmth copy() {return new Warmth(this);
public class Wasteland extends CardImpl {
public Wasteland(UUID ownerId) {
public Wasteland(final Wasteland card) {
public Wasteland copy() {return new Wasteland(this);
public class WhispersOfTheMuse extends CardImpl {
public WhispersOfTheMuse(UUID ownerId) {
public WhispersOfTheMuse(final WhispersOfTheMuse card) {
public WhispersOfTheMuse copy() {return new WhispersOfTheMuse(this);
public class WildWurm extends CardImpl {
public WildWurm(UUID ownerId) {
public WildWurm(final WildWurm card) {
public WildWurm copy() {return new WildWurm(this);
class WildWurmEffect extends OneShotEffect {
public WildWurmEffect() {staticText = "flip a coin. If you lose the flip, return {this} to its owner's hand";
public WildWurmEffect(WildWurmEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public WildWurmEffect copy() {return new WildWurmEffect(this);
public class WindDancer extends CardImpl {
public WindDancer(UUID ownerId) {
public WindDancer(final WindDancer card) {
public WindDancer copy() {return new WindDancer(this);
public class WingedSliver extends CardImpl {
public WingedSliver(UUID ownerId) {
public WingedSliver(final WingedSliver card) {
public WingedSliver copy() {return new WingedSliver(this);
public class WintersGrasp extends CardImpl {
public WintersGrasp(UUID ownerId) {
public WintersGrasp(final WintersGrasp card) {
public WintersGrasp copy() {return new WintersGrasp(this);
public class WoodSage extends CardImpl {
public WoodSage(UUID ownerId) {
public WoodSage(final WoodSage card) {
public WoodSage copy() {return new WoodSage(this);
class WoodSageEffect extends OneShotEffect {
public WoodSageEffect() {
public WoodSageEffect(final WoodSageEffect effect) {
public WoodSageEffect copy() {return new WoodSageEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class WorthyCause extends CardImpl {
public WorthyCause(UUID ownerId) {
public WorthyCause(final WorthyCause card) {
public WorthyCause copy() {return new WorthyCause(this);
public class CoffinQueen extends CardImpl {
public CoffinQueen(UUID ownerId) {
public CoffinQueen(final CoffinQueen card) {
public CoffinQueen copy() {return new CoffinQueen(this);
class CoffinQueenCreateDelayedTriggerEffect extends OneShotEffect {
public CoffinQueenCreateDelayedTriggerEffect() {
public CoffinQueenCreateDelayedTriggerEffect(final CoffinQueenCreateDelayedTriggerEffect effect) {
public CoffinQueenCreateDelayedTriggerEffect copy() {return new CoffinQueenCreateDelayedTriggerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class CoffinQueenDelayedTriggeredAbility extends DelayedTriggeredAbility {
CoffinQueenDelayedTriggeredAbility() {
CoffinQueenDelayedTriggeredAbility(CoffinQueenDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.LOST_CONTROL
public boolean checkTrigger(GameEvent event, Game game) {return true;return GameEvent.EventType.UNTAPPED.equals(event.getType())
public CoffinQueenDelayedTriggeredAbility copy() {return new CoffinQueenDelayedTriggeredAbility(this);
public String getRule() {return "When {this} becomes untapped or you lose control of {this}, exile that creature";
public class CrashingBoars extends CardImpl {
public CrashingBoars(UUID ownerId) {
public CrashingBoars(final CrashingBoars card) {
public CrashingBoars copy() {return new CrashingBoars(this);
class CrashingBoarsEffect extends OneShotEffect {
CrashingBoarsEffect() {
CrashingBoarsEffect(final CrashingBoarsEffect effect) {
public CrashingBoarsEffect copy() {return new CrashingBoarsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DauthiJackal extends CardImpl {
public DauthiJackal(UUID ownerId) {
public DauthiJackal(final DauthiJackal card) {
public DauthiJackal copy() {return new DauthiJackal(this);
public class DauthiWarlord extends CardImpl {
public DauthiWarlord(UUID ownerId) {
public DauthiWarlord(final DauthiWarlord card) {
public DauthiWarlord copy() {return new DauthiWarlord(this);
public class Deadshot extends CardImpl {
public Deadshot(UUID ownerId) {
public Deadshot(final Deadshot card) {
public Deadshot copy() {return new Deadshot(this);
class DeadshotDamageEffect extends OneShotEffect {
public DeadshotDamageEffect() {
public DeadshotDamageEffect(final DeadshotDamageEffect effect) {
public DeadshotDamageEffect copy() {return new DeadshotDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DeathsDuet extends CardImpl {
public DeathsDuet(UUID ownerId) {
public DeathsDuet(final DeathsDuet card) {
public DeathsDuet copy() {return new DeathsDuet(this);
public class DreamProwler extends CardImpl {
public DreamProwler(UUID ownerId) {
public DreamProwler(final DreamProwler card) {
public DreamProwler copy() {return new DreamProwler(this);return new EndangeredArmodon(this);
public class FieldOfSouls extends CardImpl {
public FieldOfSouls(UUID ownerId) {
public FieldOfSouls(final FieldOfSouls card) {
public FieldOfSouls copy() {return new FieldOfSouls(this);
public class FurnaceBrood extends CardImpl {
public FurnaceBrood(UUID ownerId) {
public FurnaceBrood(final FurnaceBrood card) {
public FurnaceBrood copy() {return new FurnaceBrood(this);
public class HammerheadShark extends CardImpl {
public HammerheadShark(UUID ownerId) {
public HammerheadShark(final HammerheadShark card) {
public HammerheadShark copy() {return new HammerheadShark(this);
public class HeartwoodDryad extends CardImpl {
public HeartwoodDryad(UUID ownerId) {
public HeartwoodDryad(final HeartwoodDryad card) {
public HeartwoodDryad copy() {return new HeartwoodDryad(this);
public boolean apply(Game game, Ability source) {return true;return new CanBlockAsThoughtIthadShadowEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return sourceId.equals(source.getSourceId());
public class KillerWhale extends CardImpl {
public KillerWhale(UUID ownerId) {
public KillerWhale(final KillerWhale card) {
public KillerWhale copy() {return new KillerWhale(this);
public class LowlandBasilisk extends CardImpl {
public LowlandBasilisk(UUID ownerId) {
public LowlandBasilisk(final LowlandBasilisk card) {
public LowlandBasilisk copy() {return new LowlandBasilisk(this);
public class MoggManiac extends CardImpl {
public MoggManiac(UUID ownerId) {
public MoggManiac(final MoggManiac card) {
public MoggManiac copy() {return new MoggManiac(this);
class MoggManiacDealDamageEffect extends OneShotEffect {
public MoggManiacDealDamageEffect() {
public MoggManiacDealDamageEffect(final MoggManiacDealDamageEffect effect) {
public MoggManiacDealDamageEffect copy() {return new MoggManiacDealDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MountedArchers extends CardImpl {
public MountedArchers(UUID ownerId) {
public MountedArchers(final MountedArchers card) {
public MountedArchers copy() {return new MountedArchers(this);
public class Necrologia extends CardImpl {
public Necrologia(UUID ownerId) {
public Necrologia(final Necrologia card) {
public Necrologia copy() {return new Necrologia(this);
public class Repentance extends CardImpl {
public Repentance(UUID ownerId) {
public Repentance(final Repentance card) {
public Repentance copy() {return new Repentance(this);
class RepentanceEffect extends OneShotEffect {
public RepentanceEffect() {
public RepentanceEffect(final RepentanceEffect effect) {
public RepentanceEffect copy() {return new RepentanceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SeethingAnger extends CardImpl {
public SeethingAnger(UUID ownerId) {
public SeethingAnger(final SeethingAnger card) {
public SeethingAnger copy() {return new SeethingAnger(this);
public class ShardPhoenix extends CardImpl {
public ShardPhoenix(UUID ownerId) {
public ShardPhoenix(final ShardPhoenix card) {
public ShardPhoenix copy() {return new ShardPhoenix(this);
public class SilverWyvern extends CardImpl {
public SilverWyvern(UUID ownerId) {
public SilverWyvern(final SilverWyvern card) {
public SilverWyvern copy() {return new SilverWyvern(this);
class TargetsOnlySourcePredicate implements Predicate<MageObject> {
public TargetsOnlySourcePredicate(UUID sourceId) {
public boolean apply(MageObject input, Game game) {
public class Skyshaper extends CardImpl {
public Skyshaper(UUID ownerId) {
public Skyshaper(final Skyshaper card) {
public Skyshaper copy() {return new Skyshaper(this);
public class SkyshroudVampire extends CardImpl {
public SkyshroudVampire(UUID ownerId) {
public SkyshroudVampire(final SkyshroudVampire card) {
public SkyshroudVampire copy() {return new SkyshroudVampire(this);
public class SoltariLancer extends CardImpl {
public SoltariLancer(UUID ownerId) {
public SoltariLancer(final SoltariLancer card) {
public SoltariLancer copy() {return new SoltariLancer(this);
public class Spellshock extends CardImpl {
public Spellshock(UUID ownerId) {
public Spellshock(final Spellshock card) {
public Spellshock copy() {return new Spellshock(this);
class SpellshockTriggeredAbility extends TriggeredAbilityImpl {
public SpellshockTriggeredAbility() {
public SpellshockTriggeredAbility(final SpellshockTriggeredAbility abiltity) {
public SpellshockTriggeredAbility copy() {return new SpellshockTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a player casts a spell, {this} deals 2 damage to that player.";
public class SpikeBreeder extends CardImpl {
public SpikeBreeder(UUID ownerId) {
public SpikeBreeder(final SpikeBreeder card) {
public SpikeBreeder copy() {return new SpikeBreeder(this);
class SpikeToken extends Token {
SpikeToken() {
public class SpikeHatcher extends CardImpl {
public SpikeHatcher(UUID ownerId) {
public SpikeHatcher(final SpikeHatcher card) {
public SpikeHatcher copy() {return new SpikeHatcher(this);
public class SpiritEnKor extends CardImpl {
public SpiritEnKor(UUID ownerId) {
public SpiritEnKor(final SpiritEnKor card) {
public SpiritEnKor copy() {return new SpiritEnKor(this);
public class SpittingHydra extends CardImpl {
public SpittingHydra(UUID ownerId) {
public SpittingHydra(final SpittingHydra card) {
public SpittingHydra copy() {return new SpittingHydra(this);return new ThalakosDrifters(this);
public class ThalakosScout extends CardImpl {
public ThalakosScout(UUID ownerId) {
public ThalakosScout(final ThalakosScout card) {
public ThalakosScout copy() {return new ThalakosScout(this);
public class ThalakosSeer extends CardImpl {
public ThalakosSeer(UUID ownerId) {
public ThalakosSeer(final ThalakosSeer card) {
public ThalakosSeer copy() {return new ThalakosSeer(this);
public class VerdantTouch extends CardImpl {
public VerdantTouch(UUID ownerId) {
public VerdantTouch(final VerdantTouch card) {
public VerdantTouch copy() {return new VerdantTouch(this);
class VerdantTouchLandToken extends Token {
public VerdantTouchLandToken() {
public class VolrathsLaboratory extends CardImpl {
public VolrathsLaboratory(UUID ownerId) {
public VolrathsLaboratory(final VolrathsLaboratory card) {
public VolrathsLaboratory copy() {return new VolrathsLaboratory(this);
class VolrathsLaboratoryEffect extends OneShotEffect {
VolrathsLaboratoryEffect() {
VolrathsLaboratoryEffect(final VolrathsLaboratoryEffect effect) {
public VolrathsLaboratoryEffect copy() {return new VolrathsLaboratoryEffect(this);
public boolean apply(Game game, Ability source) {return token.putOntoBattlefield(1, game, source.getSourceId(), source.getControllerId());
class VolrathsLaboratoryToken extends Token {
VolrathsLaboratoryToken(ObjectColor color, String type) {
public class WallOfSouls extends CardImpl {
public WallOfSouls(UUID ownerId) {
public WallOfSouls(final WallOfSouls card) {
public WallOfSouls copy() {return new WallOfSouls(this);
class WallOfSoulsTriggeredAbility extends TriggeredAbilityImpl {
public WallOfSoulsTriggeredAbility() {
public WallOfSoulsTriggeredAbility(final WallOfSoulsTriggeredAbility effect) {
public WallOfSoulsTriggeredAbility copy() {return new WallOfSoulsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt combat damage, " + super.getRule();
class WallOfSoulsDealDamageEffect extends OneShotEffect {
public WallOfSoulsDealDamageEffect() {
public WallOfSoulsDealDamageEffect(final WallOfSoulsDealDamageEffect effect) {
public WallOfSoulsDealDamageEffect copy() {return new WallOfSoulsDealDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class WarriorEnKor extends CardImpl {
public WarriorEnKor(UUID ownerId) {
public WarriorEnKor(final WarriorEnKor card) {
public WarriorEnKor copy() {return new WarriorEnKor(this);
public class AcademyResearchers extends CardImpl {
public AcademyResearchers(UUID ownerId) {
public AcademyResearchers(final AcademyResearchers card) {
public AcademyResearchers copy() {return new AcademyResearchers(this);
class AcademyResearchersEffect extends OneShotEffect {
AcademyResearchersEffect() {
AcademyResearchersEffect(final AcademyResearchersEffect effect) {
public AcademyResearchersEffect copy() {return new AcademyResearchersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AdarkarWastes extends CardImpl {
public AdarkarWastes(UUID ownerId) {
public AdarkarWastes(final AdarkarWastes card) {
public AdarkarWastes copy() {return new AdarkarWastes(this);
public class Afflict extends CardImpl {
public Afflict(UUID ownerId) {
public Afflict(final Afflict card) {
public Afflict copy() {return new Afflict(this);
public class AggressiveUrge extends CardImpl {
public AggressiveUrge(UUID ownerId) {
public AggressiveUrge(final AggressiveUrge card) {
public AggressiveUrge copy() {return new AggressiveUrge(this);return new AmbassadorLaquatus(this);
public class AnabaBodyguard extends CardImpl {
public AnabaBodyguard(UUID ownerId) {
public AnabaBodyguard(final AnabaBodyguard card) {
public AnabaBodyguard copy() {return new AnabaBodyguard(this);
public class AncestorsChosen extends CardImpl {
public AncestorsChosen(UUID ownerId) {
public AncestorsChosen(final AncestorsChosen card) {
public AncestorsChosen copy() {return new AncestorsChosen(this);
public class AngelicBlessing extends CardImpl {
public AngelicBlessing(UUID ownerId) {
public AngelicBlessing(final AngelicBlessing card) {
public AngelicBlessing copy() {return new AngelicBlessing(this);
public class AngelicWall extends CardImpl {
public AngelicWall(UUID ownerId) {
public AngelicWall(final AngelicWall card) {
public AngelicWall copy() {return new AngelicWall(this);
public class AngelOfMercy extends CardImpl {
public AngelOfMercy(UUID ownerId) {
public AngelOfMercy(final AngelOfMercy card) {
public AngelOfMercy copy() {return new AngelOfMercy(this);
public class AngelsFeather extends CardImpl {
public AngelsFeather(UUID ownerId) {
public AngelsFeather(final AngelsFeather card) {
public AngelsFeather copy() {return new AngelsFeather(this);
public class ArcaneTeachings extends CardImpl {
public ArcaneTeachings(UUID ownerId) {
public ArcaneTeachings(final ArcaneTeachings card) {
public ArcaneTeachings copy() {return new ArcaneTeachings(this);
public class ArcanisTheOmnipotent extends CardImpl {
public ArcanisTheOmnipotent(UUID ownerId) {
public ArcanisTheOmnipotent(final ArcanisTheOmnipotent card) {
public ArcanisTheOmnipotent copy() {return new ArcanisTheOmnipotent(this);
public class Assassinate extends CardImpl {
public Assassinate(UUID ownerId) {
public Assassinate(final Assassinate card) {
public Assassinate copy() {return new Assassinate(this);
public class AuraGraft extends CardImpl {
public AuraGraft(UUID ownerId) {
public AuraGraft(final AuraGraft card) {
public AuraGraft copy() {return new AuraGraft(this);
class AttachedToPermanentPredicate implements ObjectPlayerPredicate<ObjectPlayer<Permanent>> {
public AttachedToPermanentPredicate() {
public boolean apply(ObjectPlayer<Permanent> input, Game game) {return attached != null && game.getPermanent(attached.getAttachedTo()) != null;
class PermanentCanBeAttachedToPredicate implements ObjectPlayerPredicate<ObjectPlayer<Permanent>> {
public PermanentCanBeAttachedToPredicate(Permanent aura) {
public boolean apply(ObjectPlayer<Permanent> input, Game game) {return filter.match(potentialAttachment, game);return false;
class MoveTargetAuraEffect extends OneShotEffect {
public MoveTargetAuraEffect() {
public MoveTargetAuraEffect(final MoveTargetAuraEffect effect) {
public MoveTargetAuraEffect copy() {return new MoveTargetAuraEffect(this);
public boolean apply(Game game, Ability source){return false;return false;return false;return true;return false;
public class AvenCloudchaser extends CardImpl {
public AvenCloudchaser(UUID ownerId) {
public AvenCloudchaser(final AvenCloudchaser card) {
public AvenCloudchaser copy() {return new AvenCloudchaser(this);
public class AvenFisher extends CardImpl {
public AvenFisher(UUID ownerId) {
public AvenFisher(final AvenFisher card) {
public AvenFisher copy() {return new AvenFisher(this);
public class Bandage extends CardImpl {
public Bandage(UUID ownerId) {
public Bandage(final Bandage card) {
public Bandage copy() {return new Bandage(this);
public class BenalishKnight extends CardImpl {
public BenalishKnight(UUID ownerId) {
public BenalishKnight(final BenalishKnight card) {
public BenalishKnight copy() {return new BenalishKnight(this);
public class BirdsOfParadise extends CardImpl {
public BirdsOfParadise(UUID ownerId) {
public BirdsOfParadise(final BirdsOfParadise card) {
public BirdsOfParadise copy() {return new BirdsOfParadise(this);
public class BlanchwoodArmor extends CardImpl {
public BlanchwoodArmor(UUID ownerId) {
public BlanchwoodArmor(final BlanchwoodArmor card) {
public BlanchwoodArmor copy() {return new BlanchwoodArmor(this);
public class BloodrockCyclops extends CardImpl {
public BloodrockCyclops(UUID ownerId) {
public BloodrockCyclops(final BloodrockCyclops card) {
public BloodrockCyclops copy() {return new BloodrockCyclops(this);
public class Boomerang extends CardImpl {
public Boomerang(UUID ownerId) {
public Boomerang(final Boomerang card) {
public Boomerang copy() {return new Boomerang(this);
public class Brushland extends CardImpl {
public Brushland(UUID ownerId) {
public Brushland(final Brushland card) {
public Brushland copy() {return new Brushland(this);
public class Cancel extends CardImpl {
public Cancel(UUID ownerId) {
public Cancel(final Cancel card) {
public Cancel copy() {return new Cancel(this);
public class ChoMannoRevolutionary extends CardImpl {
public ChoMannoRevolutionary(UUID ownerId) {
public ChoMannoRevolutionary(final ChoMannoRevolutionary card) {
public ChoMannoRevolutionary copy() {return new ChoMannoRevolutionary(this);
public class ChromaticStar extends CardImpl {
public ChromaticStar(UUID ownerId) {
public ChromaticStar(final ChromaticStar card) {
public ChromaticStar copy() {return new ChromaticStar(this);
public class CivicWayfinder extends CardImpl {
public CivicWayfinder(UUID ownerId) {
public CivicWayfinder(final CivicWayfinder card) {
public CivicWayfinder copy() {return new CivicWayfinder(this);
public class Clone extends CardImpl {
public Clone(UUID ownerId) {
public Clone(final Clone card) {
public Clone copy() {return new Clone(this);
public class CloudElemental extends CardImpl {
public CloudElemental(UUID ownerId) {
public CloudElemental(final CloudElemental card) {
public CloudElemental copy() {return new CloudElemental(this);
public class CloudSprite extends CardImpl {
public CloudSprite(UUID ownerId) {
public CloudSprite(final CloudSprite card) {
public CloudSprite copy() {return new CloudSprite(this);
public class CompositeGolem extends CardImpl {
public CompositeGolem(UUID ownerId) {
public CompositeGolem(final CompositeGolem card) {
public CompositeGolem copy() {return new CompositeGolem(this);
public class Condemn extends CardImpl {
public Condemn(UUID ownerId) {
public Condemn(final Condemn card) {
public Condemn copy() {return new Condemn(this);
class CondemnEffect extends OneShotEffect {
public CondemnEffect() {
public CondemnEffect(final CondemnEffect effect) {
public CondemnEffect copy() {return new CondemnEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CraftyPathmage extends CardImpl {
public CraftyPathmage(UUID ownerId) {
public CraftyPathmage(final CraftyPathmage card) {
public CraftyPathmage copy() {return new CraftyPathmage(this);
public class CrawWurm extends CardImpl {
public CrawWurm(UUID ownerId) {
public CrawWurm(final CrawWurm card) {
public CrawWurm copy() {return new CrawWurm(this);
public class CreepingMold extends CardImpl {
public CreepingMold(UUID ownerId) {
public CreepingMold(final CreepingMold card) {
public CreepingMold copy() {return new CreepingMold(this);
public class Cryoclasm extends CardImpl {
public Cryoclasm(UUID ownerId) {
public Cryoclasm(final Cryoclasm card) {
public Cryoclasm copy() {return new Cryoclasm(this);
public class Deathmark extends CardImpl {
public Deathmark(UUID ownerId) {
public Deathmark(final Deathmark card) {
public Deathmark copy() {return new Deathmark(this);
public class Dehydration extends CardImpl {
public Dehydration(UUID ownerId) {
public Dehydration(final Dehydration card) {
public Dehydration copy() {return new Dehydration(this);
public class Deluge extends CardImpl {
public Deluge(UUID ownerId) {
public Deluge(final Deluge card) {
public Deluge copy() {return new Deluge(this);
public class Demolish extends CardImpl {
public Demolish(UUID ownerId) {
public Demolish(final Demolish card) {
public Demolish copy() {return new Demolish(this);
public class DemonsHorn extends CardImpl {
public DemonsHorn(UUID ownerId) {
public DemonsHorn(final DemonsHorn card) {
public DemonsHorn copy() {return new DemonsHorn(this);return new Demystify(this);
public class DenizenOfTheDeep extends CardImpl {
public DenizenOfTheDeep(UUID ownerId) {effect.setText("return each other creature you control to its owner's hand");
public DenizenOfTheDeep(final DenizenOfTheDeep card) {
public DenizenOfTheDeep copy() {return new DenizenOfTheDeep(this);
public class DiabolicTutor extends CardImpl {
public DiabolicTutor(UUID ownerId){
public DiabolicTutor(final DiabolicTutor card) {
public DiabolicTutor copy() {return new DiabolicTutor(this);
public class Discombobulate extends CardImpl {
public Discombobulate(UUID ownerId) {
public Discombobulate(final Discombobulate card) {
public Discombobulate copy() {return new Discombobulate(this);
public class Distress extends CardImpl {
public Distress(UUID ownerId) {
public Distress(final Distress card) {
public Distress copy() {return new Distress(this);
public class DoomedNecromancer extends CardImpl {
public DoomedNecromancer(UUID ownerId) {
public DoomedNecromancer(final DoomedNecromancer card) {
public DoomedNecromancer copy() {return new DoomedNecromancer(this);
public class DoublingCube extends CardImpl {
public DoublingCube(UUID ownerId) {
public DoublingCube(final DoublingCube card) {
public DoublingCube copy() {return new DoublingCube(this);
class DoublingCubeEffect extends ManaEffect {
DoublingCubeEffect() {
DoublingCubeEffect(final DoublingCubeEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public Mana getMana(Game game, Ability source) {return null;
public DoublingCubeEffect copy() {return new DoublingCubeEffect(this);
public class DragonRoost extends CardImpl {
public DragonRoost(UUID ownerId) {
public DragonRoost(final DragonRoost card) {
public DragonRoost copy() {return new DragonRoost(this);
public class DragonsClaw extends CardImpl {
public DragonsClaw(UUID ownerId) {
public DragonsClaw(final DragonsClaw card) {
public DragonsClaw copy() {return new DragonsClaw(this);
public class DrossCrocodile extends CardImpl {
public DrossCrocodile(UUID ownerId) {
public DrossCrocodile(final DrossCrocodile card) {
public DrossCrocodile copy() {return new DrossCrocodile(this);
public class DuskImp extends CardImpl {
public DuskImp(UUID ownerId) {
public DuskImp(final DuskImp card) {
public DuskImp copy() {return new DuskImp(this);
public class EarthElemental extends CardImpl {
public EarthElemental (UUID ownerId) {
public EarthElemental (final EarthElemental card) {
public EarthElemental copy() {return new EarthElemental(this);
public class Fear extends CardImpl {
public Fear(UUID ownerId) {
public Fear(final Fear card) {
public Fear copy() {return new Fear(this);
public class FemerefArchers extends CardImpl {
public FemerefArchers(UUID ownerId) {
public FemerefArchers(final FemerefArchers card) {
public FemerefArchers copy() {return new FemerefArchers(this);
public class FieldMarshal extends CardImpl {
public FieldMarshal(UUID ownerId) {
public FieldMarshal(final FieldMarshal card) {
public FieldMarshal copy() {return new FieldMarshal(this);
public class FistsOfTheAnvil extends CardImpl {
public FistsOfTheAnvil(UUID ownerId) {
public FistsOfTheAnvil(final FistsOfTheAnvil card) {
public FistsOfTheAnvil copy() {return new FistsOfTheAnvil(this);
public class FlamewaveInvoker extends CardImpl {
public FlamewaveInvoker(UUID ownerId) {
public FlamewaveInvoker(final FlamewaveInvoker card) {
public FlamewaveInvoker copy() {return new FlamewaveInvoker(this);
public class Flashfreeze extends CardImpl {
public Flashfreeze(UUID ownerId) {
public Flashfreeze(final Flashfreeze card) {
public Flashfreeze copy() {return new Flashfreeze(this);
public class FlowstoneSlide extends CardImpl {
public FlowstoneSlide(UUID ownerId) {
public FlowstoneSlide(final FlowstoneSlide card) {
public FlowstoneSlide copy() {return new FlowstoneSlide(this);
public class FogElemental extends CardImpl {
public FogElemental(UUID ownerId) {
public FogElemental(final FogElemental card) {
public FogElemental copy() {return new FogElemental(this);
public class ForbiddingWatchtower extends CardImpl {
public ForbiddingWatchtower(UUID ownerId) {
public ForbiddingWatchtower(final ForbiddingWatchtower card) {
public ForbiddingWatchtower copy() {return new ForbiddingWatchtower(this);
class ForbiddingWatchtowerToken extends Token {
ForbiddingWatchtowerToken() {
public class FountainOfYouth extends CardImpl {
public FountainOfYouth(UUID ownerId) {
public FountainOfYouth(final FountainOfYouth card) {
public FountainOfYouth copy() {return new FountainOfYouth(this);
public class FugitiveWizard extends CardImpl {
public FugitiveWizard(UUID ownerId) {
public FugitiveWizard(final FugitiveWizard card) {
public FugitiveWizard copy() {return new FugitiveWizard(this);
public class FurnaceWhelp extends CardImpl {
public FurnaceWhelp(UUID ownerId) {
public FurnaceWhelp(final FurnaceWhelp card) {
public FurnaceWhelp copy() {return new FurnaceWhelp(this);
public class GaeasHerald extends CardImpl {
public GaeasHerald(UUID ownerId) {
public GaeasHerald(final GaeasHerald card) {
public GaeasHerald copy() {return new GaeasHerald(this);
public CantCounterEffect() {
public CantCounterEffect(final CantCounterEffect effect) {
public CantCounterEffect copy() {return new CantCounterEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.COUNTER;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class GhituEncampment extends CardImpl {
public GhituEncampment(UUID ownerId) {
public GhituEncampment(final GhituEncampment card) {
public GhituEncampment copy() {return new GhituEncampment(this);
class GhituEncampmentToken extends Token {
public GhituEncampmentToken() {
public class GhostWarden extends CardImpl {
public GhostWarden(UUID ownerId) {
public GhostWarden(final GhostWarden card) {
public GhostWarden copy() {return new GhostWarden(this);
public class GiantGrowth extends CardImpl {
public GiantGrowth(UUID ownerId) {
public GiantGrowth(final GiantGrowth card) {
public GiantGrowth copy() {return new GiantGrowth(this);
public class GiantSpider extends CardImpl {
public GiantSpider(UUID ownerId) {
public GiantSpider(final GiantSpider card) {
public GiantSpider copy() {return new GiantSpider(this);
public class GloriousAnthem extends CardImpl {
public GloriousAnthem(UUID ownerId) {
public GloriousAnthem(final GloriousAnthem card) {
public GloriousAnthem copy() {return new GloriousAnthem(this);
public class GoblinLore extends CardImpl {
public GoblinLore(UUID ownerId) {
public GoblinLore(final GoblinLore card) {
public GoblinLore copy() {return new GoblinLore(this);
public class GoblinPiker extends CardImpl {
public GoblinPiker(UUID ownerId) {
public GoblinPiker(final GoblinPiker card) {
public GoblinPiker copy() {return new GoblinPiker(this);
public class GoblinSkyRaider extends CardImpl {
public GoblinSkyRaider(UUID ownerId) {
public GoblinSkyRaider(final GoblinSkyRaider card) {
public GoblinSkyRaider copy() {return new GoblinSkyRaider(this);
public class GravebornMuse extends CardImpl {
public GravebornMuse(UUID ownerId) {
public GravebornMuse(final GravebornMuse card) {
public GravebornMuse copy() {return new GravebornMuse(this);
public class Gravedigger extends CardImpl {
public Gravedigger(UUID ownerId) {
public Gravedigger(final Gravedigger card) {
public Gravedigger copy() {return new Gravedigger(this);
public class GrizzlyBears extends CardImpl {
public GrizzlyBears(UUID ownerId) {
public GrizzlyBears(final GrizzlyBears card) {
public GrizzlyBears copy() {return new GrizzlyBears(this);
public class HateWeaver extends CardImpl {
public HateWeaver(UUID ownerId) {
public HateWeaver(final HateWeaver card) {
public HateWeaver copy() {return new HateWeaver(this);
public class HiddenHorror extends CardImpl {
public HiddenHorror(UUID ownerId) {
public HiddenHorror(final HiddenHorror card) {
public HiddenHorror copy() {return new HiddenHorror(this);
public class HighwayRobber extends CardImpl {
public HighwayRobber(UUID ownerId) {
public HighwayRobber(final HighwayRobber card) {
public HighwayRobber copy() {return new HighwayRobber(this);
public class HillGiant extends CardImpl {
public HillGiant(UUID ownerId) {
public HillGiant(final HillGiant card) {
public HillGiant copy() {return new HillGiant(this);
public class HolyStrength extends CardImpl {
public HolyStrength(UUID ownerId) {
public HolyStrength(final HolyStrength card) {
public HolyStrength copy() {return new HolyStrength(this);
public class HonorGuard extends CardImpl {
public HonorGuard(UUID ownerId) {
public HonorGuard(final HonorGuard card) {
public HonorGuard copy() {return new HonorGuard(this);
public class HorseshoeCrab extends CardImpl {
public HorseshoeCrab(UUID ownerId) {
public HorseshoeCrab(final HorseshoeCrab card) {
public HorseshoeCrab copy() {return new HorseshoeCrab(this);
public class IcatianPriest extends CardImpl {
public IcatianPriest(UUID ownerId) {
public IcatianPriest(final IcatianPriest card) {
public IcatianPriest copy() {return new IcatianPriest(this);
public class IcyManipulator extends CardImpl {
public IcyManipulator(UUID ownerId) {
public IcyManipulator(final IcyManipulator card) {
public IcyManipulator copy() {return new IcyManipulator(this);
public class Incinerate extends CardImpl {
public Incinerate(UUID ownerId) {
public Incinerate(final Incinerate card) {
public Incinerate copy() {return new Incinerate(this);
public IncinerateEffect() {
public IncinerateEffect(final IncinerateEffect effect) {
public IncinerateEffect copy() {return new IncinerateEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.REGENERATE;
public boolean applies(GameEvent event, Ability source, Game game) {return watcher.wasDamaged(event.getTargetId(), game);return false;
public class JayemdaeTome extends CardImpl {
public JayemdaeTome(UUID ownerId) {
public JayemdaeTome(final JayemdaeTome card) {
public JayemdaeTome copy() {return new JayemdaeTome(this);
public class JoinerAdept extends CardImpl {
public JoinerAdept(UUID ownerId) {
public JoinerAdept(final JoinerAdept card) {
public JoinerAdept copy() {return new JoinerAdept(this);
public class KarplusanForest extends CardImpl {
public KarplusanForest(UUID ownerId) {
public KarplusanForest(final KarplusanForest card) {
public KarplusanForest copy() {return new KarplusanForest(this);
public class KavuClimber extends CardImpl {
public KavuClimber(UUID ownerId) {
public KavuClimber(final KavuClimber card) {
public KavuClimber copy() {return new KavuClimber(this);
public class KrakensEye extends CardImpl {
public KrakensEye(UUID ownerId) {
public KrakensEye(final KrakensEye card) {
public KrakensEye copy() {return new KrakensEye(this);
class KrakensEyeAbility extends TriggeredAbilityImpl {
public KrakensEyeAbility() {
public KrakensEyeAbility(final KrakensEyeAbility ability) {
public KrakensEyeAbility copy() {return new KrakensEyeAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).isBlue();
public String getRule() {return "Whenever a player casts a blue spell, you may gain 1 life.";
public class LavaAxe extends CardImpl {
public LavaAxe(UUID ownerId) {
public LavaAxe(final LavaAxe card) {
public LavaAxe copy() {return new LavaAxe(this);
public class LeoninScimitar extends CardImpl {
public LeoninScimitar(UUID ownerId) {
public LeoninScimitar(final LeoninScimitar card) {
public LeoninScimitar copy() {return new LeoninScimitar(this);
public class LightningElemental extends CardImpl {
public LightningElemental (UUID ownerId) {
public LightningElemental (final LightningElemental card) {
public LightningElemental copy() {return new LightningElemental(this);
public class LlanowarElves extends CardImpl {
public LlanowarElves(UUID ownerId) {
public LlanowarElves(final LlanowarElves card) {
public LlanowarElves copy() {return new LlanowarElves(this);
public class LordOfTheUndead extends CardImpl {
public LordOfTheUndead(UUID ownerId) {
public LordOfTheUndead(final LordOfTheUndead card) {
public LordOfTheUndead copy() {return new LordOfTheUndead(this);
public class LoyalSentry extends CardImpl {
public LoyalSentry (UUID ownerId) {
public LoyalSentry (final LoyalSentry card) {
public LoyalSentry copy() {return new LoyalSentry(this);
class LoyalSentryEffect extends OneShotEffect {
LoyalSentryEffect() {
LoyalSentryEffect(LoyalSentryEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public LoyalSentryEffect copy() {return new LoyalSentryEffect(this);
public class LumengridWarden extends CardImpl {
public LumengridWarden(UUID ownerId) {
public LumengridWarden(final LumengridWarden card) {
public LumengridWarden copy() {return new LumengridWarden(this);
public class MahamotiDjinn extends CardImpl {
public MahamotiDjinn(UUID ownerId) {
public MahamotiDjinn(final MahamotiDjinn card) {
public MahamotiDjinn copy() {return new MahamotiDjinn(this);
public class Manabarbs extends CardImpl {
public Manabarbs(UUID ownerId) {
public Manabarbs(final Manabarbs card) {
public Manabarbs copy() {return new Manabarbs(this);
public class MantisEngine extends CardImpl {
public MantisEngine(UUID ownerId) {
public MantisEngine(final MantisEngine card) {
public MantisEngine copy() {return new MantisEngine(this);
public class MarchOfTheMachines extends CardImpl {
public MarchOfTheMachines(UUID ownerId) {
public MarchOfTheMachines(final MarchOfTheMachines card) {
public MarchOfTheMachines copy() {return new MarchOfTheMachines(this);
class MarchOfTheMachinesEffect extends ContinuousEffectImpl {
public MarchOfTheMachinesEffect() {
public MarchOfTheMachinesEffect(final MarchOfTheMachinesEffect effect) {
public MarchOfTheMachinesEffect copy() {return new MarchOfTheMachinesEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.TypeChangingEffects_4;
public class MassOfGhouls extends CardImpl {
public MassOfGhouls(UUID ownerId) {
public MassOfGhouls(final MassOfGhouls card) {
public MassOfGhouls copy() {return new MassOfGhouls(this);
public class Megrim extends CardImpl {
public Megrim(UUID ownerId) {
public Megrim(final Megrim card) {
public Megrim copy() {return new Megrim(this);
public class MightWeaver extends CardImpl {
public MightWeaver(UUID ownerId) {
public MightWeaver(final MightWeaver card) {
public MightWeaver copy() {return new MightWeaver(this);
public class MindRot extends CardImpl {
public MindRot(UUID ownerId){
public MindRot(final MindRot card) {
public MindRot copy() {return new MindRot(this);
public class Mobilization extends CardImpl {
public Mobilization(UUID ownerId) {
public Mobilization(final Mobilization card) {
public Mobilization copy() {return new Mobilization(this);
public class MolimoMaroSorcerer extends CardImpl {
public MolimoMaroSorcerer(UUID ownerId) {
public MolimoMaroSorcerer(final MolimoMaroSorcerer card) {
public MolimoMaroSorcerer copy() {return new MolimoMaroSorcerer(this);
public class MortalCombat extends CardImpl {
public MortalCombat(UUID ownerId) {
public MortalCombat(final MortalCombat card) {
public MortalCombat copy() {return new MortalCombat(this);
class TwentyGraveyardCreatureCondition implements Condition {
public boolean apply(Game game, Ability source) {return player != null && player.getGraveyard().count(filter, game) >= 20;
public class Mortivore extends CardImpl {
public Mortivore(UUID ownerId) {
public Mortivore(final Mortivore card) {
public Mortivore copy() {return new Mortivore(this);
public class NantukoHusk extends CardImpl {
public NantukoHusk(UUID ownerId) {
public NantukoHusk(final NantukoHusk card) {
public NantukoHusk copy() {return new NantukoHusk(this);
public class Naturalize extends CardImpl {
public Naturalize(UUID ownerId){
public Naturalize(final Naturalize card) {
public Naturalize copy() {return new Naturalize(this);
public class Nightmare extends CardImpl {
public Nightmare(UUID ownerId) {
public Nightmare(final Nightmare card) {
public Nightmare copy() {return new Nightmare(this);
public class Ornithopter extends CardImpl {
public Ornithopter(UUID ownerId) {
public Ornithopter(final Ornithopter card) {
public Ornithopter copy() {return new Ornithopter(this);return new Pacifism(this);
public class Peek extends CardImpl {
public Peek(UUID ownerId) {
public Peek(final Peek card) {
public Peek copy() {return new Peek(this);
public class Persuasion extends CardImpl {
public Persuasion(UUID ownerId) {
public Persuasion(final Persuasion card) {
public Persuasion copy() {return new Persuasion(this);
public class PhageTheUntouchable extends CardImpl {
public PhageTheUntouchable(UUID ownerId) {
public PhageTheUntouchable(final PhageTheUntouchable card) {
public PhageTheUntouchable copy() {return new PhageTheUntouchable(this);
public class PhyrexianRager extends CardImpl {
public PhyrexianRager (UUID ownerId) {
public PhyrexianRager (final PhyrexianRager card) {
public PhyrexianRager copy() {return new PhyrexianRager(this);
public class PhyrexianVault extends CardImpl {
public PhyrexianVault(UUID ownerId) {
public PhyrexianVault(final PhyrexianVault card) {
public PhyrexianVault copy() {return new PhyrexianVault(this);
public class PlagueBeetle extends CardImpl {
public PlagueBeetle(UUID ownerId) {
public PlagueBeetle(final PlagueBeetle card) {
public PlagueBeetle copy() {return new PlagueBeetle(this);
public class PlatinumAngel extends CardImpl {
public PlatinumAngel(UUID ownerId) {
public PlatinumAngel(final PlatinumAngel card) {
public PlatinumAngel copy() {return new PlatinumAngel(this);
public PlatinumAngelEffect() {
public PlatinumAngelEffect(final PlatinumAngelEffect effect) {
public PlatinumAngelEffect copy() {return new PlatinumAngelEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class PrimalRage extends CardImpl {
public PrimalRage(UUID ownerId) {
public PrimalRage(final PrimalRage card) {
public PrimalRage copy() {return new PrimalRage(this);
public class ProdigalPyromancer extends CardImpl {
public ProdigalPyromancer(UUID ownerId) {
public ProdigalPyromancer(final ProdigalPyromancer card) {
public ProdigalPyromancer copy() {return new ProdigalPyromancer(this);
public class Quicksand extends CardImpl {
public Quicksand(UUID ownerId) {
public Quicksand(final Quicksand card) {
public Quicksand copy() {return new Quicksand(this);
public class QuirionDryad extends CardImpl {
public QuirionDryad(UUID ownerId) {
public QuirionDryad(final QuirionDryad card) {
public QuirionDryad copy() {return new QuirionDryad(this);
public class RageWeaver extends CardImpl {
public RageWeaver(UUID ownerId) {
public RageWeaver(final RageWeaver card) {
public RageWeaver copy() {return new RageWeaver(this);
public class RagingGoblin extends CardImpl {
public RagingGoblin(UUID ownerId) {
public RagingGoblin(final RagingGoblin card) {
public RagingGoblin copy() {return new RagingGoblin(this);
public class RavenousRats extends CardImpl {
public RavenousRats (UUID ownerId) {
public RavenousRats (final RavenousRats card) {
public RavenousRats copy() {return new RavenousRats(this);
public class RazormaneMasticore extends CardImpl {
public RazormaneMasticore(UUID ownerId) {
public RazormaneMasticore(final RazormaneMasticore card) {
public RazormaneMasticore copy() {return new RazormaneMasticore(this);
public class Recollect extends CardImpl {
public Recollect(UUID ownerId) {
public Recollect(final Recollect card) {
public Recollect copy() {return new Recollect(this);
public class RelentlessRats extends CardImpl {
public RelentlessRats(UUID ownerId) {
public RelentlessRats(final RelentlessRats card) {
public RelentlessRats copy() {return new RelentlessRats(this);
class RelentlessRatsEffect extends ContinuousEffectImpl {
public RelentlessRatsEffect() {
public RelentlessRatsEffect(final RelentlessRatsEffect effect) {
public RelentlessRatsEffect copy() {return new RelentlessRatsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RemoveSoul extends CardImpl {
public RemoveSoul(UUID ownerId) {
public RemoveSoul(final RemoveSoul card) {
public RemoveSoul copy() {return new RemoveSoul(this);
public class RevivingDose extends CardImpl {
public RevivingDose(UUID ownerId) {
public RevivingDose(final RevivingDose card) {
public RevivingDose copy() {return new RevivingDose(this);
public class ReyaDawnbringer extends CardImpl {
public ReyaDawnbringer(UUID ownerId) {
public ReyaDawnbringer(final ReyaDawnbringer card) {
public ReyaDawnbringer copy() {return new ReyaDawnbringer(this);
public class Rhox extends CardImpl {
public Rhox(UUID ownerId) {
public Rhox(final Rhox card) {
public Rhox copy() {return new Rhox(this);
public class Righteousness extends CardImpl {
public Righteousness(UUID ownerId) {
public Righteousness(final Righteousness card) {
public Righteousness copy() {return new Righteousness(this);
public class RobeOfMirrors extends CardImpl {
public RobeOfMirrors(UUID ownerId) {
public RobeOfMirrors(final RobeOfMirrors card) {
public RobeOfMirrors copy() {return new RobeOfMirrors(this);
public class RockBadger extends CardImpl {
public RockBadger(UUID ownerId) {
public RockBadger(final RockBadger card) {
public RockBadger copy() {return new RockBadger(this);
public class RodOfRuin extends CardImpl {
public RodOfRuin(UUID ownerId) {
public RodOfRuin(final RodOfRuin card) {
public RodOfRuin copy() {return new RodOfRuin(this);return new RootwaterCommando(this);
public class RoyalAssassin extends CardImpl {
public RoyalAssassin(UUID ownerId){
public RoyalAssassin(final RoyalAssassin card) {
public RoyalAssassin copy() {return new RoyalAssassin(this);
public class SamiteHealer extends CardImpl {
public SamiteHealer(UUID ownerId) {
public SamiteHealer(final SamiteHealer card) {
public SamiteHealer copy() {return new SamiteHealer(this);
public class Scalpelexis extends CardImpl {
public Scalpelexis(UUID ownerId) {
public Scalpelexis(final Scalpelexis card) {
public Scalpelexis copy() {return new Scalpelexis(this);
class ScalpelexisEffect extends OneShotEffect {
public ScalpelexisEffect() {
public ScalpelexisEffect(final ScalpelexisEffect effect) {
public ScalpelexisEffect copy() {return new ScalpelexisEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checkDuplicatedNames(List<String> string) {
public class ScatheZombies extends CardImpl {
public ScatheZombies(UUID ownerId) {
public ScatheZombies(final ScatheZombies card) {
public ScatheZombies copy() {return new ScatheZombies(this);
public class ScionOfTheWild extends CardImpl {
public ScionOfTheWild(UUID ownerId) {
public ScionOfTheWild(final ScionOfTheWild card) {
public ScionOfTheWild copy() {return new ScionOfTheWild(this);
public class ScoriaWurm extends CardImpl {
public ScoriaWurm(UUID ownerId) {
public ScoriaWurm(final ScoriaWurm card) {
public ScoriaWurm copy() {return new ScoriaWurm(this);
class ScoriaWurmEffect extends OneShotEffect {
public ScoriaWurmEffect() {staticText = "flip a coin. If you lose the flip, return {this} to its owner's hand";
public ScoriaWurmEffect(ScoriaWurmEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public ScoriaWurmEffect copy() {return new ScoriaWurmEffect(this);
public class SculptingSteel extends CardImpl {
public SculptingSteel(UUID ownerId) {
public SculptingSteel(final SculptingSteel card) {
public SculptingSteel copy() {return new SculptingSteel(this);
public class SengirVampire extends CardImpl {
public SengirVampire(UUID ownerId) {
public SengirVampire(final SengirVampire card) {
public SengirVampire copy() {return new SengirVampire(this);
public class SerraAngel extends CardImpl {
public SerraAngel(UUID ownerId) {
public SerraAngel(final SerraAngel card) {
public SerraAngel copy() {return new SerraAngel(this);
public class SerrasEmbrace extends CardImpl {
public SerrasEmbrace(UUID ownerId) {
public SerrasEmbrace(final SerrasEmbrace card) {
public SerrasEmbrace copy() {return new SerrasEmbrace(this);
public class SeveredLegion extends CardImpl {
public SeveredLegion (UUID ownerId) {
public SeveredLegion (final SeveredLegion card) {
public SeveredLegion copy() {return new SeveredLegion(this);
public class ShivanDragon extends CardImpl {
public ShivanDragon(UUID ownerId) {
public ShivanDragon(final ShivanDragon card) {
public ShivanDragon copy() {return new ShivanDragon(this);
public class ShivanHellkite extends CardImpl {
public ShivanHellkite(UUID ownerId) {
public ShivanHellkite(final ShivanHellkite card) {
public ShivanHellkite copy() {return new ShivanHellkite(this);
public class Shock extends CardImpl {
public Shock (UUID ownerId) {
public Shock (final Shock card) {
public Shock copy() {return new Shock(this);
public class Shunt extends CardImpl {
public Shunt(UUID ownerId) {
public Shunt(final Shunt card) {
public Shunt copy() {return new Shunt(this);return new Sift(this);
public class SkyhunterPatrol extends CardImpl {
public SkyhunterPatrol(UUID ownerId) {
public SkyhunterPatrol(final SkyhunterPatrol card) {
public SkyhunterPatrol copy() {return new SkyhunterPatrol(this);
public class SkyhunterProwler extends CardImpl {
public SkyhunterProwler(UUID ownerId) {
public SkyhunterProwler(final SkyhunterProwler card) {
public SkyhunterProwler copy() {return new SkyhunterProwler(this);
public class SkyhunterSkirmisher extends CardImpl {
public SkyhunterSkirmisher(UUID ownerId) {
public SkyhunterSkirmisher(final SkyhunterSkirmisher card) {
public SkyhunterSkirmisher copy() {return new SkyhunterSkirmisher(this);
public class SoulFeast extends CardImpl {
public SoulFeast(UUID ownerId) {
public SoulFeast(final SoulFeast card) {
public SoulFeast copy() {return new SoulFeast(this);
public class SparkElemental extends CardImpl {
public SparkElemental(UUID ownerId) {
public SparkElemental(final SparkElemental card) {
public SparkElemental copy() {return new SparkElemental(this);
public class SpawningPool extends CardImpl {
public SpawningPool(UUID ownerId) {
public SpawningPool(final SpawningPool card) {
public SpawningPool copy() {return new SpawningPool(this);
class SkeletonToken extends Token {
SkeletonToken() {
public class SpiketailHatchling extends CardImpl {
public SpiketailHatchling(UUID ownerId) {
public SpiketailHatchling(final SpiketailHatchling card) {
public SpiketailHatchling copy() {return new SpiketailHatchling(this);
public class SpinedWurm extends CardImpl {
public SpinedWurm(UUID ownerId) {
public SpinedWurm(final SpinedWurm card) {
public SpinedWurm copy() {return new SpinedWurm(this);
public class SpinelessThug extends CardImpl {
public SpinelessThug(UUID ownerId) {
public SpinelessThug(final SpinelessThug card) {
public SpinelessThug copy() {return new SpinelessThug(this);
public class SpiritWeaver extends CardImpl {
public SpiritWeaver(UUID ownerId) {
public SpiritWeaver(final SpiritWeaver card) {
public SpiritWeaver copy() {return new SpiritWeaver(this);
public class SpittingEarth extends CardImpl {
public SpittingEarth(UUID ownerId) {
public SpittingEarth(final SpittingEarth card) {
public SpittingEarth copy() {return new SpittingEarth(this);
public class SqueeGoblinNabob extends CardImpl {
public SqueeGoblinNabob(UUID ownerId) {
public SqueeGoblinNabob(final SqueeGoblinNabob card) {
public SqueeGoblinNabob copy() {return new SqueeGoblinNabob(this);
public class StalkingTiger extends CardImpl {
public StalkingTiger(UUID ownerId) {
public StalkingTiger(final StalkingTiger card) {
public StalkingTiger copy() {return new StalkingTiger(this);
public class StampedingWildebeests extends CardImpl {
public StampedingWildebeests(UUID ownerId) {
public StampedingWildebeests(final StampedingWildebeests card) {
public StampedingWildebeests copy() {return new StampedingWildebeests(this);
public class StarlightInvoker extends CardImpl {
public StarlightInvoker(UUID ownerId) {
public StarlightInvoker(final StarlightInvoker card) {
public StarlightInvoker copy() {return new StarlightInvoker(this);
public class SteadfastGuard extends CardImpl {
public SteadfastGuard(UUID ownerId) {
public SteadfastGuard(final SteadfastGuard card) {
public SteadfastGuard copy() {return new SteadfastGuard(this);
public class SteelGolem extends CardImpl {
public SteelGolem(UUID ownerId) {
public SteelGolem(final SteelGolem card) {
public SteelGolem copy() {return new SteelGolem(this);
public SteelGolemEffect() {
public SteelGolemEffect(final SteelGolemEffect effect) {
public SteelGolemEffect copy() {return new SteelGolemEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class SulfurousSprings extends CardImpl {
public SulfurousSprings(UUID ownerId) {
public SulfurousSprings(final SulfurousSprings card) {
public SulfurousSprings copy() {return new SulfurousSprings(this);
public class SuntailHawk extends CardImpl {
public SuntailHawk(UUID ownerId) {
public SuntailHawk(final SuntailHawk card) {
public SuntailHawk copy() {return new SuntailHawk(this);
public class SylvanScrying extends CardImpl {
public SylvanScrying(UUID ownerId) {
public SylvanScrying(final SylvanScrying card) {
public SylvanScrying copy() {return new SylvanScrying(this);
public class TellingTime extends CardImpl {
public TellingTime(UUID ownerId) {
public TellingTime(final TellingTime card) {
public TellingTime copy() {return new TellingTime(this);
class TellingTimeEffect extends OneShotEffect {
public TellingTimeEffect() {
public TellingTimeEffect(final TellingTimeEffect effect) {
public TellingTimeEffect copy() {return new TellingTimeEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
private Card pickCard(Game game, Player player, Cards cards, String message) {return null;return cards.getRandom(null);return card;return null;
public class TheHive extends CardImpl {
public TheHive(UUID ownerId) {
public TheHive(final TheHive card) {
public TheHive copy() {return new TheHive(this);
class WaspToken extends Token {
WaspToken() {
public class Threaten extends CardImpl {
public Threaten(UUID ownerId) {
public Threaten(final Threaten card) {
public Threaten copy() {return new Threaten(this);
public class ThrullSurgeon extends CardImpl {
public ThrullSurgeon(UUID ownerId) {
public ThrullSurgeon(final ThrullSurgeon card) {
public ThrullSurgeon copy() {return new ThrullSurgeon(this);
class ThrullSurgeonEffect extends OneShotEffect {
public ThrullSurgeonEffect() {
public ThrullSurgeonEffect(final ThrullSurgeonEffect effect) {
public boolean apply(Game game, Ability source) {return targetPlayer.discard(card, source, game);return false;
public ThrullSurgeonEffect copy() {return new ThrullSurgeonEffect(this);
public class ThunderingGiant extends CardImpl {
public ThunderingGiant(UUID ownerId) {
public ThunderingGiant(final ThunderingGiant card) {
public ThunderingGiant copy() {return new ThunderingGiant(this);
public class Tidings extends CardImpl {
public Tidings(UUID ownerId) {
public Tidings(final Tidings card) {
public Tidings copy() {return new Tidings(this);
public class TimeStop extends CardImpl {
public TimeStop(UUID ownerId) {
public TimeStop(final TimeStop card) {
public TimeStop copy() {return new TimeStop(this);
public class TimeStretch extends CardImpl {
public TimeStretch(UUID ownerId) {
public TimeStretch(final TimeStretch card) {
public TimeStretch copy() {return new TimeStretch(this);
class TimeStretchEffect extends OneShotEffect {
public TimeStretchEffect() {
public TimeStretchEffect(final TimeStretchEffect effect) {
public TimeStretchEffect copy() {return new TimeStretchEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Traumatize extends CardImpl {
public Traumatize(UUID ownerId) {
public Traumatize(final Traumatize card) {
public Traumatize copy() {return new Traumatize(this);
class TraumatizeEffect extends OneShotEffect {
public TraumatizeEffect() {
public TraumatizeEffect(final TraumatizeEffect effect) {
public boolean apply(Game game, Ability source) {return player.moveCards(player.getLibrary().getTopCards(game, amount), Zone.LIBRARY, Zone.GRAVEYARD, source, game);return false;
public TraumatizeEffect copy() {return new TraumatizeEffect(this);
public class TreasureHunter extends CardImpl {
public TreasureHunter(UUID ownerId) {
public TreasureHunter(final TreasureHunter card) {
public TreasureHunter copy() {return new TreasureHunter(this);
public class TreetopVillage extends CardImpl {
public TreetopVillage(UUID ownerId) {
public TreetopVillage(final TreetopVillage card) {
public TreetopVillage copy() {return new TreetopVillage(this);
class ApeToken extends Token {
ApeToken() {
public class TundraWolves extends CardImpl {
public TundraWolves(UUID ownerId) {
public TundraWolves(final TundraWolves card) {
public TundraWolves copy() {return new TundraWolves(this);
public class UndergroundRiver extends CardImpl {
public UndergroundRiver(UUID ownerId) {
public UndergroundRiver(final UndergroundRiver card) {
public UndergroundRiver copy() {return new UndergroundRiver(this);
public class UnholyStrength extends CardImpl {
public UnholyStrength(UUID ownerId) {
public UnholyStrength(final UnholyStrength card) {
public UnholyStrength copy() {return new UnholyStrength(this);
public class Unsummon extends CardImpl {
public Unsummon(UUID ownerId) {
public Unsummon(final Unsummon card) {
public Unsummon copy() {return new Unsummon(this);
public class Upwelling extends CardImpl {
public Upwelling(UUID ownerId) {
public Upwelling(final Upwelling card) {
public Upwelling copy() {return new Upwelling(this);
class UpwellingRuleEffect extends ContinuousEffectImpl {
public UpwellingRuleEffect() {
public UpwellingRuleEffect(final UpwellingRuleEffect effect) {
public UpwellingRuleEffect copy() {return new UpwellingRuleEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class VedalkenMastermind extends CardImpl {
public VedalkenMastermind(UUID ownerId) {
public VedalkenMastermind(final VedalkenMastermind card) {
public VedalkenMastermind copy() {return new VedalkenMastermind(this);
public class VenerableMonk extends CardImpl {
public VenerableMonk(UUID ownerId) {
public VenerableMonk(final VenerableMonk card) {
public VenerableMonk copy() {return new VenerableMonk(this);
public class ViashinoRunner extends CardImpl {
public ViashinoRunner(UUID ownerId) {
public ViashinoRunner(final ViashinoRunner card) {
public ViashinoRunner copy() {return new ViashinoRunner(this);
public class WallOfFire extends CardImpl {
public WallOfFire(UUID ownerId) {
public WallOfFire(final WallOfFire card) {
public WallOfFire copy() {return new WallOfFire(this);
public class WallOfSwords extends CardImpl {
public WallOfSwords(UUID ownerId) {
public WallOfSwords(final WallOfSwords card) {
public WallOfSwords copy() {return new WallOfSwords(this);
public class WallOfWood extends CardImpl {
public WallOfWood(UUID ownerId) {
public WallOfWood(final WallOfWood card) {
public WallOfWood copy() {return new WallOfWood(this);
public class WarriorsHonor extends CardImpl {
public WarriorsHonor(UUID ownerId) {
public WarriorsHonor(final WarriorsHonor card) {
public WarriorsHonor copy() {return new WarriorsHonor(this);
public class WhispersilkCloak extends CardImpl {
public WhispersilkCloak(UUID ownerId) {
protected WhispersilkCloak(WhispersilkCloak me) {
public WhispersilkCloak copy() {return new WhispersilkCloak(this);return new WildGriffin(this);
public class WindbornMuse extends CardImpl {
public WindbornMuse(UUID ownerId) {
public WindbornMuse(final WindbornMuse card) {
public WindbornMuse copy() {return new WindbornMuse(this);
public class WrathOfGod extends CardImpl {
public WrathOfGod(UUID ownerId) {
public WrathOfGod(final WrathOfGod card) {
public WrathOfGod copy() {return new WrathOfGod(this);
public class WurmsTooth extends CardImpl {
public WurmsTooth(UUID ownerId) {
public WurmsTooth(final WurmsTooth card) {
public WurmsTooth copy() {return new WurmsTooth(this);
class WurmsToothAbility extends TriggeredAbilityImpl {
public WurmsToothAbility() {
public WurmsToothAbility(final WurmsToothAbility ability) {
public WurmsToothAbility copy() {return new WurmsToothAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).isGreen();
public String getRule() {return "Whenever a player casts a green spell, you may gain 1 life.";
public class YavimayaEnchantress extends CardImpl {
public YavimayaEnchantress(UUID ownerId) {
public YavimayaEnchantress(final YavimayaEnchantress card) {
public YavimayaEnchantress copy() {return new YavimayaEnchantress(this);
public class YouthfulKnight extends CardImpl {
public YouthfulKnight(UUID ownerId) {
public YouthfulKnight(final YouthfulKnight card) {
public YouthfulKnight copy() {return new YouthfulKnight(this);
public class Amnesia extends CardImpl {
public Amnesia(UUID ownerId) {
public Amnesia(final Amnesia card) {
public Amnesia copy() {return new Amnesia(this);
class AmnesiaEffect extends OneShotEffect {
public AmnesiaEffect() {
public AmnesiaEffect(final AmnesiaEffect effect) {
public AmnesiaEffect copy() {return new AmnesiaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BarlsCage extends CardImpl {
public BarlsCage(UUID ownerId) {
public BarlsCage(final BarlsCage card) {
public BarlsCage copy() {return new BarlsCage(this);
public class BogRats extends CardImpl {
public BogRats(UUID ownerId) {
public BogRats(final BogRats card) {
public BogRats copy() {return new BogRats(this);
public class BookOfRass extends CardImpl {
public BookOfRass(UUID ownerId) {
public BookOfRass(final BookOfRass card) {
public BookOfRass copy() {return new BookOfRass(this);
public class CavePeople extends CardImpl {
public CavePeople(UUID ownerId) {
public CavePeople(final CavePeople card) {
public CavePeople copy() {return new CavePeople(this);return new CityOfShadows(this);
public class DanceOfMany extends CardImpl {
public DanceOfMany(UUID ownerId) {
public DanceOfMany(final DanceOfMany card) {
public DanceOfMany copy() {return new DanceOfMany(this);
class DanceOfManyCreateTokenCopyEffect extends OneShotEffect {
public DanceOfManyCreateTokenCopyEffect() {
public DanceOfManyCreateTokenCopyEffect(final DanceOfManyCreateTokenCopyEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DanceOfManyCreateTokenCopyEffect copy() {return new DanceOfManyCreateTokenCopyEffect(this);
class DanceOfManyExileTokenEffect extends OneShotEffect {
public DanceOfManyExileTokenEffect() {
public DanceOfManyExileTokenEffect(final DanceOfManyExileTokenEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public DanceOfManyExileTokenEffect copy() {return new DanceOfManyExileTokenEffect(this);
public class ElectricEel extends CardImpl {
public ElectricEel(UUID ownerId) {
public ElectricEel(final ElectricEel card) {
public ElectricEel copy() {return new ElectricEel(this);
public class Fissure extends CardImpl {
public Fissure(UUID ownerId) {
public Fissure(final Fissure card) {
public Fissure copy() {return new Fissure(this);
public class GoblinCaves extends CardImpl {
public GoblinCaves(UUID ownerId) {
public GoblinCaves(final GoblinCaves card) {
public GoblinCaves copy() {return new GoblinCaves(this);
class AttachedToBasicMountainCondition implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class GoblinDiggingTeam extends CardImpl {
public GoblinDiggingTeam(UUID ownerId) {
public GoblinDiggingTeam(final GoblinDiggingTeam card) {
public GoblinDiggingTeam copy() {return new GoblinDiggingTeam(this);
public class GoblinsOfTheFlarg extends CardImpl {
public GoblinsOfTheFlarg(UUID ownerId) {
public GoblinsOfTheFlarg(final GoblinsOfTheFlarg card) {
public GoblinsOfTheFlarg copy() {return new GoblinsOfTheFlarg(this);
public class GoblinWizard extends CardImpl {
public GoblinWizard(UUID ownerId) {
public GoblinWizard(final GoblinWizard card) {
public GoblinWizard copy() {return new GoblinWizard(this);
public class GraveRobbers extends CardImpl {
public GraveRobbers(UUID ownerId) {
public GraveRobbers(final GraveRobbers card) {
public GraveRobbers copy() {return new GraveRobbers(this);
public class HiddenPath extends CardImpl {
public HiddenPath(UUID ownerId) {
public HiddenPath(final HiddenPath card) {
public HiddenPath copy() {return new HiddenPath(this);
public class HolyLight extends CardImpl {
public HolyLight(UUID ownerId) {
public HolyLight(final HolyLight card) {
public HolyLight copy() {return new HolyLight(this);
public class Inferno extends CardImpl {
public Inferno(UUID ownerId) {
public Inferno(final Inferno card) {
public Inferno copy() {return new Inferno(this);
public class MarshGas extends CardImpl {
public MarshGas(UUID ownerId) {
public MarshGas(final MarshGas card) {
public MarshGas copy() {return new MarshGas(this);
public class MarshGoblins extends CardImpl {
public MarshGoblins(UUID ownerId) {
public MarshGoblins(final MarshGoblins card) {
public MarshGoblins copy() {return new MarshGoblins(this);
public class MarshViper extends CardImpl {
public MarshViper(UUID ownerId) {
public MarshViper(final MarshViper card) {
public MarshViper copy() {return new MarshViper(this);
public class MazeOfIth extends CardImpl {
public MazeOfIth(UUID ownerId) {
public MazeOfIth(final MazeOfIth card) {
public MazeOfIth copy() {return new MazeOfIth(this);
public class MerfolkAssassin extends CardImpl {
public MerfolkAssassin(UUID ownerId) {
public MerfolkAssassin(final MerfolkAssassin card) {
public MerfolkAssassin copy() {return new MerfolkAssassin(this);
public class NiallSilvain extends CardImpl {
public NiallSilvain(UUID ownerId) {
public NiallSilvain(final NiallSilvain card) {
public NiallSilvain copy() {return new NiallSilvain(this);
public class OrcGeneral extends CardImpl {
public OrcGeneral(UUID ownerId) {
public OrcGeneral(final OrcGeneral card) {
public OrcGeneral copy() {return new OrcGeneral(this);
public class PeopleOfTheWoods extends CardImpl {
public PeopleOfTheWoods(UUID ownerId) {
public PeopleOfTheWoods(final PeopleOfTheWoods card) {
public PeopleOfTheWoods copy() {return new PeopleOfTheWoods(this);
public class SafeHaven extends CardImpl {
public SafeHaven(UUID ownerId) {"If you do, return each card exiled with {this} to the battlefield under its owner's control"));
public SafeHaven(final SafeHaven card) {
public SafeHaven copy() {return new SafeHaven(this);
public class SavaenElves extends CardImpl {
public SavaenElves(UUID ownerId) {
public SavaenElves(final SavaenElves card) {
public SavaenElves copy() {return new SavaenElves(this);
class SavaenElvesPredicate implements ObjectPlayerPredicate<ObjectPlayer<Permanent>> {
public boolean apply(ObjectPlayer<Permanent> input, Game game) {return true;return false;
public String toString() {return "Attached to a land";
public class ScarwoodGoblins extends CardImpl {
public ScarwoodGoblins(UUID ownerId) {
public ScarwoodGoblins(final ScarwoodGoblins card) {
public ScarwoodGoblins copy() {return new ScarwoodGoblins(this);
public class ScarwoodHag extends CardImpl {
public ScarwoodHag(UUID ownerId) {
public ScarwoodHag(final ScarwoodHag card) {
public ScarwoodHag copy() {return new ScarwoodHag(this);
public class SkullOfOrm extends CardImpl {
public SkullOfOrm(UUID ownerId) {
public SkullOfOrm(final SkullOfOrm card) {
public SkullOfOrm copy() {return new SkullOfOrm(this);
public class TivadarsCrusade extends CardImpl {
public TivadarsCrusade(UUID ownerId) {
public TivadarsCrusade(final TivadarsCrusade card) {
public TivadarsCrusade copy() {return new TivadarsCrusade(this);
public class Venom extends CardImpl {
public Venom(UUID ownerId) {
public Venom(final Venom card) {
public Venom copy() {return new Venom(this);
class VenomTriggeredAbility extends TriggeredAbilityImpl {
VenomTriggeredAbility(Effect effect) {
VenomTriggeredAbility(final VenomTriggeredAbility ability) {
public VenomTriggeredAbility copy() {return new VenomTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.BLOCKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {
&& blocked == enchantedCreature) {return true;return true;return false;
public String getRule() {return "Whenever enchanted creature blocks or becomes blocked by a non-Wall creature, destroy that creature at end of combat.";
public class WitchHunter extends CardImpl {
public WitchHunter(UUID ownerId) {Ability returnAbility = new SimpleActivatedAbility(Zone.BATTLEFIELD, new ReturnToHandTargetEffect(), new ManaCostsImpl("{1}{W}{W}"));returnAbility.addCost(new TapSourceCost());returnAbility.addTarget(target);this.addAbility(returnAbility);
public WitchHunter(final WitchHunter card) {
public WitchHunter copy() {return new WitchHunter(this);
public class WormwoodTreefolk extends CardImpl {
public WormwoodTreefolk(UUID ownerId) {
public WormwoodTreefolk(final WormwoodTreefolk card) {
public WormwoodTreefolk copy() {return new WormwoodTreefolk(this);
public class AbhorrentOverlord extends CardImpl {
public AbhorrentOverlord(UUID ownerId) {
public AbhorrentOverlord(final AbhorrentOverlord card) {
public AbhorrentOverlord copy() {return new AbhorrentOverlord(this);
class AbhorrentOverlordHarpyToken extends Token {
public AbhorrentOverlordHarpyToken() {
public class AgentOfHorizons extends CardImpl {
public AgentOfHorizons(UUID ownerId) {
public AgentOfHorizons(final AgentOfHorizons card) {
public AgentOfHorizons copy() {return new AgentOfHorizons(this);
public class AgentOfTheFates extends CardImpl {
public AgentOfTheFates(UUID ownerId) {
public AgentOfTheFates(final AgentOfTheFates card) {
public AgentOfTheFates copy() {return new AgentOfTheFates(this);
public class AkroanCrusader extends CardImpl {
public AkroanCrusader(UUID ownerId) {
public AkroanCrusader(final AkroanCrusader card) {
public AkroanCrusader copy() {return new AkroanCrusader(this);
class SoldierToken extends Token {
public SoldierToken() {
public class AkroanHoplite extends CardImpl {
public AkroanHoplite(UUID ownerId) {
public AkroanHoplite(final AkroanHoplite card) {
public AkroanHoplite copy() {return new AkroanHoplite(this);
public class AkroanHorse extends CardImpl {
public AkroanHorse(UUID ownerId) {
public AkroanHorse(final AkroanHorse card) {
public AkroanHorse copy() {return new AkroanHorse(this);
class AkroanHorseChangeControlEffect extends OneShotEffect {
public AkroanHorseChangeControlEffect() {
public AkroanHorseChangeControlEffect(final AkroanHorseChangeControlEffect effect) {
public AkroanHorseChangeControlEffect copy() {return new AkroanHorseChangeControlEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AkroanHorseGainControlEffect extends ContinuousEffectImpl {
public AkroanHorseGainControlEffect(Duration duration, UUID controller) {
public AkroanHorseGainControlEffect(final AkroanHorseGainControlEffect effect) {
public AkroanHorseGainControlEffect copy() {return new AkroanHorseGainControlEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(controller, game);return false;
public String getText(Mode mode) {return "Gain control of Akroan Horse";
class AkroanHorseCreateTokenEffect extends OneShotEffect {
public AkroanHorseCreateTokenEffect() {
public AkroanHorseCreateTokenEffect(final AkroanHorseCreateTokenEffect effect) {
public AkroanHorseCreateTokenEffect copy() {return new AkroanHorseCreateTokenEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class AnaxAndCymede extends CardImpl {
public AnaxAndCymede(UUID ownerId) {
public AnaxAndCymede(final AnaxAndCymede card) {
public AnaxAndCymede copy() {return new AnaxAndCymede(this);
public class AngerOfTheGods extends CardImpl {
public AngerOfTheGods(UUID ownerId) {
public AngerOfTheGods(final AngerOfTheGods card) {
public AngerOfTheGods copy() {return new AngerOfTheGods(this);
public class AnthousaSetessanHero extends CardImpl {
public AnthousaSetessanHero(UUID ownerId) {
public AnthousaSetessanHero(final AnthousaSetessanHero card) {
public AnthousaSetessanHero copy() {return new AnthousaSetessanHero(this);
class AnthousaWarriorToken extends Token {
public AnthousaWarriorToken() {
public class ArborColossus extends CardImpl {
public ArborColossus(UUID ownerId) {
public ArborColossus(final ArborColossus card) {
public ArborColossus copy() {return new ArborColossus(this);
public class ArenaAthlete extends CardImpl {
public ArenaAthlete(UUID ownerId) {
public ArenaAthlete(final ArenaAthlete card) {
public ArenaAthlete copy() {return new ArenaAthlete(this);
public class ArtisanOfForms extends CardImpl {
public ArtisanOfForms(UUID ownerId) {
public ArtisanOfForms(final ArtisanOfForms card) {
public ArtisanOfForms copy() {return new ArtisanOfForms(this);
class ArtisanOfFormsApplyToPermanent extends ApplyToPermanent {
public Boolean apply(Game game, MageObject mageObject) {return true;
public Boolean apply(Game game, Permanent permanent) {return true;
public class ArtisansSorrow extends CardImpl {
public ArtisansSorrow(UUID ownerId) {
public ArtisansSorrow(final ArtisansSorrow card) {
public ArtisansSorrow copy() {return new ArtisansSorrow(this);
public class AshenRider extends CardImpl {
public AshenRider(UUID ownerId) {
public AshenRider(final AshenRider card) {
public AshenRider copy() {return new AshenRider(this);
public class AshiokNightmareWeaver extends CardImpl {
public AshiokNightmareWeaver(UUID ownerId) {
public AshiokNightmareWeaver(final AshiokNightmareWeaver card) {
public AshiokNightmareWeaver copy() {return new AshiokNightmareWeaver(this);
class AshiokNightmareWeaverExileEffect extends OneShotEffect {
public AshiokNightmareWeaverExileEffect() {
public AshiokNightmareWeaverExileEffect(final AshiokNightmareWeaverExileEffect effect) {
public AshiokNightmareWeaverExileEffect copy() {return new AshiokNightmareWeaverExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class AshiokNightmareWeaverPutIntoPlayEffect extends OneShotEffect {
public AshiokNightmareWeaverPutIntoPlayEffect() {
public AshiokNightmareWeaverPutIntoPlayEffect(final AshiokNightmareWeaverPutIntoPlayEffect effect) {
public AshiokNightmareWeaverPutIntoPlayEffect copy() {return new AshiokNightmareWeaverPutIntoPlayEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
class AshiokNightmareWeaverAddTypeEffect extends ContinuousEffectImpl {
public AshiokNightmareWeaverAddTypeEffect() {
public AshiokNightmareWeaverAddTypeEffect(final AshiokNightmareWeaverAddTypeEffect effect) {
public AshiokNightmareWeaverAddTypeEffect copy() {return new AshiokNightmareWeaverAddTypeEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.TypeChangingEffects_4;
class AshiokNightmareWeaverExileAllEffect extends OneShotEffect {
public AshiokNightmareWeaverExileAllEffect() {
public AshiokNightmareWeaverExileAllEffect(final AshiokNightmareWeaverExileAllEffect effect) {
public AshiokNightmareWeaverExileAllEffect copy() {return new AshiokNightmareWeaverExileAllEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class AsphodelWanderer extends CardImpl {
public AsphodelWanderer(UUID ownerId) {
public AsphodelWanderer(final AsphodelWanderer card) {
public AsphodelWanderer copy() {return new AsphodelWanderer(this);return new BalefulEidolon(this);
public class BattlewiseHoplite extends CardImpl {
public BattlewiseHoplite(UUID ownerId) {
public BattlewiseHoplite(final BattlewiseHoplite card) {
public BattlewiseHoplite copy() {return new BattlewiseHoplite(this);
public class BattlewiseValor extends CardImpl {
public BattlewiseValor(UUID ownerId) {
public BattlewiseValor(final BattlewiseValor card) {
public BattlewiseValor copy() {return new BattlewiseValor(this);
public class BenthicGiant extends CardImpl {
public BenthicGiant(UUID ownerId) {
public BenthicGiant(final BenthicGiant card) {
public BenthicGiant copy() {return new BenthicGiant(this);
public class BidentOfThassa extends CardImpl {
public BidentOfThassa(UUID ownerId) {
public BidentOfThassa(final BidentOfThassa card) {
public BidentOfThassa copy() {return new BidentOfThassa(this);
class BidentOfThassaTriggeredAbility extends TriggeredAbilityImpl {
public BidentOfThassaTriggeredAbility() {
public BidentOfThassaTriggeredAbility(final BidentOfThassaTriggeredAbility ability) {
public BidentOfThassaTriggeredAbility copy() {return new BidentOfThassaTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return " Whenever a creature you control deals combat damage to a player, you may draw a card.";
class BidentOfThassaMustAttackEffect extends RequirementEffect {
public BidentOfThassaMustAttackEffect() {
public BidentOfThassaMustAttackEffect(final BidentOfThassaMustAttackEffect effect) {
public BidentOfThassaMustAttackEffect copy() {return new BidentOfThassaMustAttackEffect(this);
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean mustAttack(Game game) {return true;
public boolean mustBlock(Game game) {return false;
public class BloodTollHarpy extends CardImpl {
public BloodTollHarpy(UUID ownerId) {
public BloodTollHarpy(final BloodTollHarpy card) {
public BloodTollHarpy copy() {return new BloodTollHarpy(this);
public class BoonOfErebos extends CardImpl {
public BoonOfErebos(UUID ownerId) {
public BoonOfErebos(final BoonOfErebos card) {
public BoonOfErebos copy() {return new BoonOfErebos(this);
public class BoonSatyr extends CardImpl {
public BoonSatyr(UUID ownerId) {
public BoonSatyr(final BoonSatyr card) {
public BoonSatyr copy() {return new BoonSatyr(this);
public class BorderlandMinotaur extends CardImpl {
public BorderlandMinotaur(UUID ownerId) {
public BorderlandMinotaur(final BorderlandMinotaur card) {
public BorderlandMinotaur copy() {return new BorderlandMinotaur(this);
public class Boulderfall extends CardImpl {
public Boulderfall(UUID ownerId) {
public Boulderfall(final Boulderfall card) {
public Boulderfall copy() {return new Boulderfall(this);
public class BowOfNylea extends CardImpl {
public BowOfNylea(UUID ownerId) {
public BowOfNylea(final BowOfNylea card) {
public BowOfNylea copy() {return new BowOfNylea(this);
class PutCardsFromGraveyardToLibraryEffect extends OneShotEffect {
public PutCardsFromGraveyardToLibraryEffect() {
public PutCardsFromGraveyardToLibraryEffect(final PutCardsFromGraveyardToLibraryEffect effect) {
public PutCardsFromGraveyardToLibraryEffect copy() {return new PutCardsFromGraveyardToLibraryEffect(this);
public boolean apply(Game game, Ability source) {return controller.putCardsOnBottomOfLibrary(cards, game, source, true);return false;
public class BurnishedHart extends CardImpl {
public BurnishedHart(UUID ownerId) {
public BurnishedHart(final BurnishedHart card) {
public BurnishedHart copy() {return new BurnishedHart(this);
public class CavalryPegasus extends CardImpl {
public CavalryPegasus(UUID ownerId) {
public CavalryPegasus(final CavalryPegasus card) {
public CavalryPegasus copy() {return new CavalryPegasus(this);
public class CavernLampad extends CardImpl {
public CavernLampad(UUID ownerId) {
public CavernLampad(final CavernLampad card) {
public CavernLampad copy() {return new CavernLampad(this);
public class CelestialArchon extends CardImpl {
public CelestialArchon(UUID ownerId) {
public CelestialArchon(final CelestialArchon card) {
public CelestialArchon copy() {return new CelestialArchon(this);
public class CentaurBattlemaster extends CardImpl {
public CentaurBattlemaster(UUID ownerId) {
public CentaurBattlemaster(final CentaurBattlemaster card) {
public CentaurBattlemaster copy() {return new CentaurBattlemaster(this);
public class ChainedToTheRocks extends CardImpl {
public ChainedToTheRocks(UUID ownerId) {
public ChainedToTheRocks(final ChainedToTheRocks card) {
public ChainedToTheRocks copy() {return new ChainedToTheRocks(this);
class ChainedToTheRocksEffect extends OneShotEffect {
public ChainedToTheRocksEffect() {this.staticText = "exile target creature an opponent controls until {this} leaves the battlefield. <i>(That creature returns under its owner's control.)</i>";
public ChainedToTheRocksEffect(final ChainedToTheRocksEffect effect) {
public ChainedToTheRocksEffect copy() {return new ChainedToTheRocksEffect(this);
public boolean apply(Game game, Ability source) {return new ExileTargetEffect(CardUtil.getCardExileZoneId(game, source), permanent.getIdName()).apply(game, source);return false;
public class ChosenByHeliod extends CardImpl {
public ChosenByHeliod(UUID ownerId) {
public ChosenByHeliod(final ChosenByHeliod card) {
public ChosenByHeliod copy() {return new ChosenByHeliod(this);
public class ChroniclerOfHeroes extends CardImpl {
public ChroniclerOfHeroes(UUID ownerId) {
public ChroniclerOfHeroes(final ChroniclerOfHeroes card) {
public ChroniclerOfHeroes copy() {return new ChroniclerOfHeroes(this);
class ChroniclerOfHeroesEffect extends OneShotEffect {
public ChroniclerOfHeroesEffect() {
public ChroniclerOfHeroesEffect(final ChroniclerOfHeroesEffect effect) {
public ChroniclerOfHeroesEffect copy() {return new ChroniclerOfHeroesEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CoastlineChimera extends CardImpl {
public CoastlineChimera(UUID ownerId) {
public CoastlineChimera(final CoastlineChimera card) {
public CoastlineChimera copy() {return new CoastlineChimera(this);
public class ColossusOfAkros extends CardImpl {
public ColossusOfAkros(UUID ownerId) {
public ColossusOfAkros(final ColossusOfAkros card) {
public ColossusOfAkros copy() {return new ColossusOfAkros(this);
public class CommuneWithTheGods extends CardImpl {
public CommuneWithTheGods(UUID ownerId) {
public CommuneWithTheGods(final CommuneWithTheGods card) {
public CommuneWithTheGods copy() {return new CommuneWithTheGods(this);
class CommuneWithTheGodsEffect extends OneShotEffect {
public CommuneWithTheGodsEffect() {
public CommuneWithTheGodsEffect(final CommuneWithTheGodsEffect effect) {
public CommuneWithTheGodsEffect copy() {return new CommuneWithTheGodsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CoordinatedAssault extends CardImpl {
public CoordinatedAssault(UUID ownerId) {
public CoordinatedAssault(final CoordinatedAssault card) {
public CoordinatedAssault copy() {return new CoordinatedAssault(this);
public class CracklingTriton extends CardImpl {
public CracklingTriton(UUID ownerId) {
public CracklingTriton(final CracklingTriton card) {
public CracklingTriton copy() {return new CracklingTriton(this);
public class CurseOfTheSwine extends CardImpl {
public CurseOfTheSwine(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public CurseOfTheSwine(final CurseOfTheSwine card) {
public CurseOfTheSwine copy() {return new CurseOfTheSwine(this);
class CurseOfTheSwineEffect extends OneShotEffect {
public CurseOfTheSwineEffect() {
public CurseOfTheSwineEffect(final CurseOfTheSwineEffect effect) {
public CurseOfTheSwineEffect copy() {return new CurseOfTheSwineEffect(this);
public boolean apply(Game game, Ability source) {return true;
class CurseOfTheSwineBoarToken extends Token {
CurseOfTheSwineBoarToken() {
public class CutthroatManeuver extends CardImpl {
public CutthroatManeuver(UUID ownerId) {
public CutthroatManeuver(final CutthroatManeuver card) {
public CutthroatManeuver copy() {return new CutthroatManeuver(this);
public class DarkBetrayal extends CardImpl {
public DarkBetrayal(UUID ownerId) {
public DarkBetrayal(final DarkBetrayal card) {
public DarkBetrayal copy() {return new DarkBetrayal(this);
public class DauntlessOnslaught extends CardImpl {
public DauntlessOnslaught(UUID ownerId) {
public DauntlessOnslaught(final DauntlessOnslaught card) {
public DauntlessOnslaught copy() {return new DauntlessOnslaught(this);
public class DaxosOfMeletis extends CardImpl {
public DaxosOfMeletis(UUID ownerId) {
public DaxosOfMeletis(final DaxosOfMeletis card) {
public DaxosOfMeletis copy() {return new DaxosOfMeletis(this);
class DaxosOfMeletisEffect extends OneShotEffect {
public DaxosOfMeletisEffect() {
public DaxosOfMeletisEffect(final DaxosOfMeletisEffect effect) {
public DaxosOfMeletisEffect copy() {return new DaxosOfMeletisEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DaxosOfMeletisCastFromExileEffect extends AsThoughEffectImpl {
public DaxosOfMeletisCastFromExileEffect(UUID cardId, UUID exileId) {
public DaxosOfMeletisCastFromExileEffect(final DaxosOfMeletisCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public DaxosOfMeletisCastFromExileEffect copy() {return new DaxosOfMeletisCastFromExileEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return exileZone != null && exileZone.contains(cardId);return false;
class DaxosOfMeletisSpendAnyManaEffect extends AsThoughEffectImpl implements AsThoughManaEffect {
public DaxosOfMeletisSpendAnyManaEffect() {
public DaxosOfMeletisSpendAnyManaEffect(final DaxosOfMeletisSpendAnyManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public DaxosOfMeletisSpendAnyManaEffect copy() {return new DaxosOfMeletisSpendAnyManaEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return source.getControllerId().equals(affectedControllerId)
public ManaType getAsThoughManaType(ManaType manaType, ManaPoolItem mana, UUID affectedControllerId, Ability source, Game game) {return mana.getFirstAvailable();
public class DefendTheHearth extends CardImpl {
public DefendTheHearth(UUID ownerId) {
public DefendTheHearth(final DefendTheHearth card) {
public DefendTheHearth copy() {return new DefendTheHearth(this);
public class DestructiveRevelry extends CardImpl {
public DestructiveRevelry(UUID ownerId) {
public DestructiveRevelry(final DestructiveRevelry card) {
public DestructiveRevelry copy() {return new DestructiveRevelry(this);
class DestructiveRevelryEffect extends OneShotEffect {
public DestructiveRevelryEffect() {
public DestructiveRevelryEffect(final DestructiveRevelryEffect effect) {
public DestructiveRevelryEffect copy() {return new DestructiveRevelryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DiscipleOfPhenax extends CardImpl {
public DiscipleOfPhenax(UUID ownerId) {
public DiscipleOfPhenax(final DiscipleOfPhenax card) {
public DiscipleOfPhenax copy() {return new DiscipleOfPhenax(this);
class DiscipleOfPhenaxEffect extends OneShotEffect {
public DiscipleOfPhenaxEffect() {
public DiscipleOfPhenaxEffect(final DiscipleOfPhenaxEffect effect) {
public DiscipleOfPhenaxEffect copy() {return new DiscipleOfPhenaxEffect(this);
public boolean apply(Game game, Ability source) {return targetPlayer.discard(card, source, game);return false;return true;return false;
public class Dissolve extends CardImpl {
public Dissolve(UUID ownerId) {
public Dissolve(final Dissolve card) {
public Dissolve copy() {return new Dissolve(this);
public class DragonMantle extends CardImpl {
public DragonMantle(UUID ownerId) {
public DragonMantle(final DragonMantle card) {
public DragonMantle copy() {return new DragonMantle(this);
public class ElspethSunsChampion extends CardImpl {
public ElspethSunsChampion(UUID ownerId) {
public ElspethSunsChampion(final ElspethSunsChampion card) {
public ElspethSunsChampion copy() {return new ElspethSunsChampion(this);
class ElspethSunsChampionEmblem extends Emblem {
public ElspethSunsChampionEmblem() {
public class EmberSwallower extends CardImpl {
public EmberSwallower(UUID ownerId) {
public EmberSwallower(final EmberSwallower card) {
public EmberSwallower copy() {return new EmberSwallower(this);
public class EpharasWarden extends CardImpl {
public EpharasWarden(UUID ownerId) {
public EpharasWarden(final EpharasWarden card) {
public EpharasWarden copy() {return new EpharasWarden(this);
public class ErebosGodOfTheDead extends CardImpl {
public ErebosGodOfTheDead(UUID ownerId) {
public ErebosGodOfTheDead(final ErebosGodOfTheDead card) {
public ErebosGodOfTheDead copy() {return new ErebosGodOfTheDead(this);return new OpponentsCantGainLifeEffect(this);
public boolean apply(Game game, Ability source) {
{return true;
public class ErebossEmissary extends CardImpl {
public ErebossEmissary(UUID ownerId) {
public ErebossEmissary(final ErebossEmissary card) {
public ErebossEmissary copy() {return new ErebossEmissary(this);
public class EvangelOfHeliod extends CardImpl {
public EvangelOfHeliod(UUID ownerId) {
public EvangelOfHeliod(final EvangelOfHeliod card) {
public EvangelOfHeliod copy() {return new EvangelOfHeliod(this);
public class FabledHero extends CardImpl {
public FabledHero(UUID ownerId) {
public FabledHero(final FabledHero card) {
public FabledHero copy() {return new FabledHero(this);
public class FadeIntoAntiquity extends CardImpl {
public FadeIntoAntiquity(UUID ownerId) {
public FadeIntoAntiquity(final FadeIntoAntiquity card) {
public FadeIntoAntiquity copy() {return new FadeIntoAntiquity(this);
public class FanaticOfMogis extends CardImpl {
public FanaticOfMogis(UUID ownerId) {
public FanaticOfMogis(final FanaticOfMogis card) {
public FanaticOfMogis copy() {return new FanaticOfMogis(this);
public class FateForetold extends CardImpl {
public FateForetold(UUID ownerId) {
public FateForetold(final FateForetold card) {
public FateForetold copy() {return new FateForetold(this);
public class FavoredHoplite extends CardImpl {
public FavoredHoplite(UUID ownerId) {
public FavoredHoplite(final FavoredHoplite card) {
public FavoredHoplite copy() {return new FavoredHoplite(this);
public class FelhideMinotaur extends CardImpl {
public FelhideMinotaur(UUID ownerId) {
public FelhideMinotaur(final FelhideMinotaur card) {
public FelhideMinotaur copy() {return new FelhideMinotaur(this);
public class FeralInvocation extends CardImpl {
public FeralInvocation(UUID ownerId) {
public FeralInvocation(final FeralInvocation card) {
public FeralInvocation copy() {return new FeralInvocation(this);
public class FlamespeakerAdept extends CardImpl {
public FlamespeakerAdept(UUID ownerId) {
public FlamespeakerAdept(final FlamespeakerAdept card) {
public FlamespeakerAdept copy() {return new FlamespeakerAdept(this);
class ScryTriggeredAbility extends TriggeredAbilityImpl {
public ScryTriggeredAbility() {
public ScryTriggeredAbility(final ScryTriggeredAbility ability) {
public ScryTriggeredAbility copy() {return new ScryTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SCRY;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.getControllerId());
public String getRule() {return "Whenever you scry, " + super.getRule();
public class FleecemaneLion extends CardImpl {
public FleecemaneLion(UUID ownerId) {
public FleecemaneLion(final FleecemaneLion card) {
public FleecemaneLion copy() {return new FleecemaneLion(this);
public class FleetfeatherSandals extends CardImpl {
public FleetfeatherSandals(UUID ownerId) {
public FleetfeatherSandals(final FleetfeatherSandals card) {
public FleetfeatherSandals copy() {return new FleetfeatherSandals(this);
public class FleshmadSteed extends CardImpl {
public FleshmadSteed(UUID ownerId) {
public FleshmadSteed(final FleshmadSteed card) {
public FleshmadSteed copy() {return new FleshmadSteed(this);
public class Gainsay extends CardImpl {
public Gainsay(UUID ownerId) {
public Gainsay(final Gainsay card) {
public Gainsay copy() {return new Gainsay(this);return new GiftOfImmortality(this);this.staticText = "return that card to the battlefield under its owner's control. Return {this} to the battlefield attached to that creature at the beginning of the next end step";return new GiftOfImmortalityEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public boolean apply(Game game, Ability source) {return creature.addAttachment(aura.getId(), game);return false;return new GiftOfImmortalityReturnEnchantmentEffect(this);
public class GlareOfHeresy extends CardImpl {
public GlareOfHeresy(UUID ownerId) {
public GlareOfHeresy(final GlareOfHeresy card) {
public GlareOfHeresy copy() {return new GlareOfHeresy(this);
public class GodsWilling extends CardImpl {
public GodsWilling(UUID ownerId) {
public GodsWilling(final GodsWilling card) {
public GodsWilling copy() {return new GodsWilling(this);
public class GrayMerchantOfAsphodel extends CardImpl {
public GrayMerchantOfAsphodel(UUID ownerId) {
public GrayMerchantOfAsphodel(final GrayMerchantOfAsphodel card) {
public GrayMerchantOfAsphodel copy() {return new GrayMerchantOfAsphodel(this);
class GrayMerchantOfAsphodelEffect extends OneShotEffect {
public GrayMerchantOfAsphodelEffect() {
public GrayMerchantOfAsphodelEffect(final GrayMerchantOfAsphodelEffect effect) {
public GrayMerchantOfAsphodelEffect copy() {return new GrayMerchantOfAsphodelEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GuardiansOfMeletis extends CardImpl {
public GuardiansOfMeletis(UUID ownerId) {
public GuardiansOfMeletis(final GuardiansOfMeletis card) {
public GuardiansOfMeletis copy() {return new GuardiansOfMeletis(this);
public class HammerOfPurphoros extends CardImpl {
public HammerOfPurphoros(UUID ownerId) {
public HammerOfPurphoros(final HammerOfPurphoros card) {
public HammerOfPurphoros copy() {return new HammerOfPurphoros(this);
class HammerOfPurphorosGolemToken extends Token {
public HammerOfPurphorosGolemToken() {
public class HeliodGodOfTheSun extends CardImpl {
public HeliodGodOfTheSun(UUID ownerId) {
public HeliodGodOfTheSun(final HeliodGodOfTheSun card) {
public HeliodGodOfTheSun copy() {return new HeliodGodOfTheSun(this);
class HeliodGodOfTheSunToken extends Token {
public HeliodGodOfTheSunToken() {
public class HeliodsEmissary extends CardImpl {
public HeliodsEmissary(UUID ownerId) {
public HeliodsEmissary(final HeliodsEmissary card) {
public HeliodsEmissary copy() {return new HeliodsEmissary(this);
public class HerosDownfall extends CardImpl {
public HerosDownfall(UUID ownerId) {
public HerosDownfall(final HerosDownfall card) {
public HerosDownfall copy() {return new HerosDownfall(this);return new HopefulEidolon(this);
public class HorizonChimera extends CardImpl {
public HorizonChimera(UUID ownerId) {
public HorizonChimera(final HorizonChimera card) {
public HorizonChimera copy() {return new HorizonChimera(this);
public class HorizonScholar extends CardImpl {
public HorizonScholar(UUID ownerId) {
public HorizonScholar(final HorizonScholar card) {
public HorizonScholar copy() {return new HorizonScholar(this);
public class HundredHandedOne extends CardImpl {
public HundredHandedOne(UUID ownerId) {
public HundredHandedOne(final HundredHandedOne card) {
public HundredHandedOne copy() {return new HundredHandedOne(this);
public class IllTemperedCyclops extends CardImpl {
public IllTemperedCyclops(UUID ownerId) {
public IllTemperedCyclops(final IllTemperedCyclops card) {
public IllTemperedCyclops copy() {return new IllTemperedCyclops(this);
public class InsatiableHarpy extends CardImpl {
public InsatiableHarpy(UUID ownerId) {
public InsatiableHarpy(final InsatiableHarpy card) {
public InsatiableHarpy copy() {return new InsatiableHarpy(this);
public class KarametrasAcolyte extends CardImpl {
public KarametrasAcolyte(UUID ownerId) {
public KarametrasAcolyte(final KarametrasAcolyte card) {
public KarametrasAcolyte copy() {return new KarametrasAcolyte(this);
public class KeepsakeGorgon extends CardImpl {
public KeepsakeGorgon(UUID ownerId) {
public KeepsakeGorgon(final KeepsakeGorgon card) {
public KeepsakeGorgon copy() {return new KeepsakeGorgon(this);
public class KragmaWarcaller extends CardImpl {
public KragmaWarcaller(UUID ownerId) {
public KragmaWarcaller(final KragmaWarcaller card) {
public KragmaWarcaller copy() {return new KragmaWarcaller(this);
public class LabyrinthChampion extends CardImpl {
public LabyrinthChampion(UUID ownerId) {
public LabyrinthChampion(final LabyrinthChampion card) {
public LabyrinthChampion copy() {return new LabyrinthChampion(this);
public class LagonnaBandElder extends CardImpl {
public LagonnaBandElder(UUID ownerId) {
public LagonnaBandElder(final LagonnaBandElder card) {
public LagonnaBandElder copy() {return new LagonnaBandElder(this);
public class LashOfTheWhip extends CardImpl {
public LashOfTheWhip(UUID ownerId) {
public LashOfTheWhip(final LashOfTheWhip card) {
public LashOfTheWhip copy() {return new LashOfTheWhip(this);
public class LeafcrownDryad extends CardImpl {
public LeafcrownDryad(UUID ownerId) {
public LeafcrownDryad(final LeafcrownDryad card) {
public LeafcrownDryad copy() {return new LeafcrownDryad(this);
public class LeoninSnarecaster extends CardImpl {
public LeoninSnarecaster(UUID ownerId) {
public LeoninSnarecaster(final LeoninSnarecaster card) {
public LeoninSnarecaster copy() {return new LeoninSnarecaster(this);
public class LightningStrike extends CardImpl {
public LightningStrike(UUID ownerId) {
public LightningStrike(final LightningStrike card) {
public LightningStrike copy() {return new LightningStrike(this);
public class LoathsomeCatoblepas extends CardImpl {
public LoathsomeCatoblepas(UUID ownerId) {
public LoathsomeCatoblepas(final LoathsomeCatoblepas card) {
public LoathsomeCatoblepas copy() {return new LoathsomeCatoblepas(this);
public class LostInALabyrinth extends CardImpl {
public LostInALabyrinth(UUID ownerId) {
public LostInALabyrinth(final LostInALabyrinth card) {
public LostInALabyrinth copy() {return new LostInALabyrinth(this);
public class MarchOfTheReturned extends CardImpl {
public MarchOfTheReturned(UUID ownerId) {
public MarchOfTheReturned(final MarchOfTheReturned card) {
public MarchOfTheReturned copy() {return new MarchOfTheReturned(this);
public class MasterOfWaves extends CardImpl {
public MasterOfWaves(UUID ownerId) {
public MasterOfWaves(final MasterOfWaves card) {
public MasterOfWaves copy() {return new MasterOfWaves(this);
class MasterOfWavesElementalToken extends Token {
public MasterOfWavesElementalToken() {return new MedomaiTheAgeless(this);
class ExtraTurnCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return game.getState().isExtraTurn();
public class MeletisCharlatan extends CardImpl {
public MeletisCharlatan(UUID ownerId) {
public MeletisCharlatan(final MeletisCharlatan card) {
public MeletisCharlatan copy() {return new MeletisCharlatan(this);
class MeletisCharlatanCopyTargetSpellEffect extends OneShotEffect {
public MeletisCharlatanCopyTargetSpellEffect() {
public MeletisCharlatanCopyTargetSpellEffect(final MeletisCharlatanCopyTargetSpellEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MeletisCharlatanCopyTargetSpellEffect copy() {return new MeletisCharlatanCopyTargetSpellEffect(this);
public class MessengersSpeed extends CardImpl {
public MessengersSpeed(UUID ownerId) {
public MessengersSpeed(final MessengersSpeed card) {
public MessengersSpeed copy() {return new MessengersSpeed(this);
public class MogissMarauder extends CardImpl {
public MogissMarauder(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public MogissMarauder(final MogissMarauder card) {
public MogissMarauder copy() {return new MogissMarauder(this);
public class NemesisOfMortals extends CardImpl {
public NemesisOfMortals(UUID ownerId) {
public NemesisOfMortals(final NemesisOfMortals card) {
public NemesisOfMortals copy() {return new NemesisOfMortals(this);
NemesisOfMortalsCostReductionEffect() {
NemesisOfMortalsCostReductionEffect(NemesisOfMortalsCostReductionEffect effect) {return true;return false;return true;return false;
public NemesisOfMortalsCostReductionEffect copy() {return new NemesisOfMortalsCostReductionEffect(this);
public class NessianAsp extends CardImpl {
public NessianAsp(UUID ownerId) {
public NessianAsp(final NessianAsp card) {
public NessianAsp copy() {return new NessianAsp(this);
public class Nighthowler extends CardImpl {
public Nighthowler(UUID ownerId) {
public Nighthowler(final Nighthowler card) {
public Nighthowler copy() {return new Nighthowler(this);
public class NimbusNaiad extends CardImpl {
public NimbusNaiad(UUID ownerId) {
public NimbusNaiad(final NimbusNaiad card) {
public NimbusNaiad copy() {return new NimbusNaiad(this);
public class NykthosShrineToNyx extends CardImpl {
public NykthosShrineToNyx(UUID ownerId) {
public NykthosShrineToNyx(final NykthosShrineToNyx card) {
public NykthosShrineToNyx copy() {return new NykthosShrineToNyx(this);
class NykthosShrineToNyxManaAbility extends ManaAbility {
public NykthosShrineToNyxManaAbility() {
public NykthosShrineToNyxManaAbility(final NykthosShrineToNyxManaAbility ability) {
public NykthosShrineToNyxManaAbility copy() {return new NykthosShrineToNyxManaAbility(this);
public List<Mana> getNetMana(Game game) {return netMana;
class NykthosDynamicManaEffect extends ManaEffect {
public NykthosDynamicManaEffect() {
public NykthosDynamicManaEffect(final NykthosDynamicManaEffect effect) {
public NykthosDynamicManaEffect copy() {return new NykthosDynamicManaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public Mana computeMana(String color, Game game, Ability source){return computedMana.copy();
public class NyleaGodOfTheHunt extends CardImpl {
public NyleaGodOfTheHunt(UUID ownerId) {
public NyleaGodOfTheHunt(final NyleaGodOfTheHunt card) {
public NyleaGodOfTheHunt copy() {return new NyleaGodOfTheHunt(this);
public class NyleasDisciple extends CardImpl {
public NyleasDisciple(UUID ownerId) {
public NyleasDisciple(final NyleasDisciple card) {
public NyleasDisciple copy() {return new NyleasDisciple(this);
public class NyleasEmissary extends CardImpl {
public NyleasEmissary(UUID ownerId) {
public NyleasEmissary(final NyleasEmissary card) {
public NyleasEmissary copy() {return new NyleasEmissary(this);
public class NyleasPresence extends CardImpl {
public NyleasPresence(UUID ownerId) {
public NyleasPresence(final NyleasPresence card) {
public NyleasPresence copy() {return new NyleasPresence(this);
class NyleasPresenceLandTypeEffect extends ContinuousEffectImpl {
public NyleasPresenceLandTypeEffect(final NyleasPresenceLandTypeEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public NyleasPresenceLandTypeEffect copy() {return new NyleasPresenceLandTypeEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class ObservantAlseid extends CardImpl {
public ObservantAlseid(UUID ownerId) {
public ObservantAlseid(final ObservantAlseid card) {
public ObservantAlseid copy() {return new ObservantAlseid(this);
public class Omenspeaker extends CardImpl {
public Omenspeaker(UUID ownerId) {
public Omenspeaker(final Omenspeaker card) {
public Omenspeaker copy() {return new Omenspeaker(this);
public class OpalineUnicorn extends CardImpl {
public OpalineUnicorn(UUID ownerId) {
public OpalineUnicorn(final OpalineUnicorn card) {
public OpalineUnicorn copy() {return new OpalineUnicorn(this);
public class OrdealOfErebos extends CardImpl {
public OrdealOfErebos(UUID ownerId) {
public OrdealOfErebos(final OrdealOfErebos card) {
public OrdealOfErebos copy() {return new OrdealOfErebos(this);
public class OrdealOfHeliod extends CardImpl {
public OrdealOfHeliod(UUID ownerId) {
public OrdealOfHeliod(final OrdealOfHeliod card) {
public OrdealOfHeliod copy() {return new OrdealOfHeliod(this);
public class OrdealOfNylea extends CardImpl {
public OrdealOfNylea(UUID ownerId) {
public OrdealOfNylea(final OrdealOfNylea card) {
public OrdealOfNylea copy() {return new OrdealOfNylea(this);
public class OrdealOfPurphoros extends CardImpl {
public OrdealOfPurphoros(UUID ownerId) {
public OrdealOfPurphoros(final OrdealOfPurphoros card) {
public OrdealOfPurphoros copy() {return new OrdealOfPurphoros(this);
public class OrdealOfThassa extends CardImpl {
public OrdealOfThassa(UUID ownerId) {
public OrdealOfThassa(final OrdealOfThassa card) {
public OrdealOfThassa copy() {return new OrdealOfThassa(this);
public class PharikasCure extends CardImpl {
public PharikasCure(UUID ownerId) {
public PharikasCure(final PharikasCure card) {
public PharikasCure copy() {return new PharikasCure(this);
public class PharikasMender extends CardImpl {
public PharikasMender(UUID ownerId) {
public PharikasMender(final PharikasMender card) {
public PharikasMender copy() {return new PharikasMender(this);
public class PheresBandCentaurs extends CardImpl {
public PheresBandCentaurs(UUID ownerId) {
public PheresBandCentaurs(final PheresBandCentaurs card) {
public PheresBandCentaurs copy() {return new PheresBandCentaurs(this);
public class PolisCrusher extends CardImpl {
public PolisCrusher(UUID ownerId) {
public PolisCrusher(final PolisCrusher card) {
public void adjustTargets(Ability ability, Game game) {
public PolisCrusher copy() {return new PolisCrusher(this);
public class PolukranosWorldEater extends CardImpl {
public PolukranosWorldEater(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public PolukranosWorldEater(final PolukranosWorldEater card) {
public PolukranosWorldEater copy() {return new PolukranosWorldEater(this);
class PolukranosWorldEaterEffect extends OneShotEffect {
public PolukranosWorldEaterEffect() {
public PolukranosWorldEaterEffect(final PolukranosWorldEaterEffect effect) {
public PolukranosWorldEaterEffect copy() {return new PolukranosWorldEaterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PortentOfBetrayal extends CardImpl {
public PortentOfBetrayal(UUID ownerId) {
public PortentOfBetrayal(final PortentOfBetrayal card) {
public PortentOfBetrayal copy() {return new PortentOfBetrayal(this);
public class PrescientChimera extends CardImpl {
public PrescientChimera(UUID ownerId) {
public PrescientChimera(final PrescientChimera card) {
public PrescientChimera copy() {return new PrescientChimera(this);
public class PriestOfIroas extends CardImpl {
public PriestOfIroas(UUID ownerId) {
public PriestOfIroas(final PriestOfIroas card) {
public PriestOfIroas copy() {return new PriestOfIroas(this);
public class PrognosticSphinx extends CardImpl {
public PrognosticSphinx(UUID ownerId) {
public PrognosticSphinx(final PrognosticSphinx card) {
public PrognosticSphinx copy() {return new PrognosticSphinx(this);
public class ProphetOfKruphix extends CardImpl {
public ProphetOfKruphix(UUID ownerId) {
public ProphetOfKruphix(final ProphetOfKruphix card) {
public ProphetOfKruphix copy() {return new ProphetOfKruphix(this);
public class ProwlersHelm extends CardImpl {
public ProwlersHelm(UUID ownerId) {
public ProwlersHelm(final ProwlersHelm card) {
public ProwlersHelm copy() {return new ProwlersHelm(this);
class CantBeBlockedByWallsEffect extends RestrictionEffect {
public CantBeBlockedByWallsEffect() {
public CantBeBlockedByWallsEffect(final CantBeBlockedByWallsEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;return true;
public CantBeBlockedByWallsEffect copy() {return new CantBeBlockedByWallsEffect(this);
public class PsychicIntrusion extends CardImpl {
public PsychicIntrusion(UUID ownerId) {
public PsychicIntrusion(final PsychicIntrusion card) {
public PsychicIntrusion copy() {return new PsychicIntrusion(this);
class PsychicIntrusionExileEffect extends OneShotEffect {
public PsychicIntrusionExileEffect() {
public PsychicIntrusionExileEffect(final PsychicIntrusionExileEffect effect) {
public PsychicIntrusionExileEffect copy() {return new PsychicIntrusionExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class PsychicIntrusionCastFromExileEffect extends AsThoughEffectImpl {
public PsychicIntrusionCastFromExileEffect() {
public PsychicIntrusionCastFromExileEffect(final PsychicIntrusionCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public PsychicIntrusionCastFromExileEffect copy() {return new PsychicIntrusionCastFromExileEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
class PsychicIntrusionSpendAnyManaEffect extends AsThoughEffectImpl implements AsThoughManaEffect {
public PsychicIntrusionSpendAnyManaEffect() {
public PsychicIntrusionSpendAnyManaEffect(final PsychicIntrusionSpendAnyManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public PsychicIntrusionSpendAnyManaEffect copy() {return new PsychicIntrusionSpendAnyManaEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public ManaType getAsThoughManaType(ManaType manaType, ManaPoolItem mana, UUID affectedControllerId, Ability source, Game game) {return mana.getFirstAvailable();
public class PurphorosGodOfTheForge extends CardImpl {
public PurphorosGodOfTheForge(UUID ownerId) {
public PurphorosGodOfTheForge(final PurphorosGodOfTheForge card) {
public PurphorosGodOfTheForge copy() {return new PurphorosGodOfTheForge(this);
public class PurphorossEmissary extends CardImpl {
public PurphorossEmissary(UUID ownerId) {
public PurphorossEmissary(final PurphorossEmissary card) {
public PurphorossEmissary copy() {return new PurphorossEmissary(this);
public class PyxisOfPandemonium extends CardImpl {
public PyxisOfPandemonium(UUID ownerId) {
public PyxisOfPandemonium(final PyxisOfPandemonium card) {
public PyxisOfPandemonium copy() {return new PyxisOfPandemonium(this);
class PyxisOfPandemoniumExileEffect extends OneShotEffect {
public PyxisOfPandemoniumExileEffect() {
public PyxisOfPandemoniumExileEffect(final PyxisOfPandemoniumExileEffect effect) {
public PyxisOfPandemoniumExileEffect copy() {return new PyxisOfPandemoniumExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class PyxisOfPandemoniumPutOntoBattlefieldEffect extends OneShotEffect {
public PyxisOfPandemoniumPutOntoBattlefieldEffect() {
public PyxisOfPandemoniumPutOntoBattlefieldEffect(final PyxisOfPandemoniumPutOntoBattlefieldEffect effect) {
public PyxisOfPandemoniumPutOntoBattlefieldEffect copy() {return new PyxisOfPandemoniumPutOntoBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class RagebloodShaman extends CardImpl {
public RagebloodShaman(UUID ownerId) {
public RagebloodShaman(final RagebloodShaman card) {
public RagebloodShaman copy() {return new RagebloodShaman(this);
public class RageOfPurphoros extends CardImpl {
public RageOfPurphoros(UUID ownerId) {
public RageOfPurphoros(final RageOfPurphoros card) {
public RageOfPurphoros copy() {return new RageOfPurphoros(this);
public class RayOfDissolution extends CardImpl {
public RayOfDissolution(UUID ownerId) {
public RayOfDissolution(final RayOfDissolution card) {
public RayOfDissolution copy() {return new RayOfDissolution(this);
public class RescueFromTheUnderworld extends CardImpl {
public RescueFromTheUnderworld(UUID ownerId) {
public RescueFromTheUnderworld(final RescueFromTheUnderworld card) {
public RescueFromTheUnderworld copy() {return new RescueFromTheUnderworld(this);
class RescueFromTheUnderworldTextEffect extends OneShotEffect {
public RescueFromTheUnderworldTextEffect() {
public RescueFromTheUnderworldTextEffect(final RescueFromTheUnderworldTextEffect effect) {
public RescueFromTheUnderworldTextEffect copy() {return new RescueFromTheUnderworldTextEffect(this);
public boolean apply(Game game, Ability source) {return true;
class RescueFromTheUnderworldCreateDelayedTriggeredAbilityEffect extends OneShotEffect {
public RescueFromTheUnderworldCreateDelayedTriggeredAbilityEffect(DelayedTriggeredAbility ability) {
public RescueFromTheUnderworldCreateDelayedTriggeredAbilityEffect(final RescueFromTheUnderworldCreateDelayedTriggeredAbilityEffect effect) {
public RescueFromTheUnderworldCreateDelayedTriggeredAbilityEffect copy() {return new RescueFromTheUnderworldCreateDelayedTriggeredAbilityEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getText(Mode mode) {return ability.getRule();
class RescueFromTheUnderworldDelayedTriggeredAbility extends DelayedTriggeredAbility {
public RescueFromTheUnderworldDelayedTriggeredAbility() {
public RescueFromTheUnderworldDelayedTriggeredAbility(Effect effect, TargetController targetController) {
public RescueFromTheUnderworldDelayedTriggeredAbility(RescueFromTheUnderworldDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public RescueFromTheUnderworldDelayedTriggeredAbility copy() {return new RescueFromTheUnderworldDelayedTriggeredAbility(this);
public String getRule() {return "Return that card and the sacrificed card to the battlefield under your control at the beginning of your next upkeep";
class RescueFromTheUnderworldReturnEffect extends OneShotEffect {
public RescueFromTheUnderworldReturnEffect() {
public RescueFromTheUnderworldReturnEffect(final RescueFromTheUnderworldReturnEffect effect) {
public RescueFromTheUnderworldReturnEffect copy() {return new RescueFromTheUnderworldReturnEffect(this);
public boolean apply(Game game, Ability source) {return player.moveCards(card, Zone.BATTLEFIELD, source, game);return true;return false;
public class ReturnedCentaur extends CardImpl {
public ReturnedCentaur(UUID ownerId) {
public ReturnedCentaur(final ReturnedCentaur card) {
public ReturnedCentaur copy() {return new ReturnedCentaur(this);
public class ReturnedPhalanx extends CardImpl {
public ReturnedPhalanx(UUID ownerId) {
public ReturnedPhalanx(final ReturnedPhalanx card) {
public ReturnedPhalanx copy() {return new ReturnedPhalanx(this);
public class ReverentHunter extends CardImpl {
public ReverentHunter(UUID ownerId) {
public ReverentHunter(final ReverentHunter card) {
public ReverentHunter copy() {return new ReverentHunter(this);return new SatyrHedonist(this);
public class SatyrPiper extends CardImpl {
public SatyrPiper(UUID ownerId) {
public SatyrPiper(final SatyrPiper card) {
public SatyrPiper copy() {return new SatyrPiper(this);
public class SatyrRambler extends CardImpl {
public SatyrRambler(UUID ownerId) {
public SatyrRambler(final SatyrRambler card) {
public SatyrRambler copy() {return new SatyrRambler(this);
public class ScholarOfAthreos extends CardImpl {
public ScholarOfAthreos(UUID ownerId) {
public ScholarOfAthreos(final ScholarOfAthreos card) {
public ScholarOfAthreos copy() {return new ScholarOfAthreos(this);
class ScholarOfAthreosEffect extends OneShotEffect {
public ScholarOfAthreosEffect() {
public ScholarOfAthreosEffect(final ScholarOfAthreosEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ScholarOfAthreosEffect copy() {return new ScholarOfAthreosEffect(this);
public class Scourgemark extends CardImpl {
public Scourgemark(UUID ownerId) {
public Scourgemark(final Scourgemark card) {
public Scourgemark copy() {return new Scourgemark(this);
public class SeaGodsRevenge extends CardImpl {
public SeaGodsRevenge(UUID ownerId) {
public SeaGodsRevenge(final SeaGodsRevenge card) {
public SeaGodsRevenge copy() {return new SeaGodsRevenge(this);
public class SealockMonster extends CardImpl {
public SealockMonster(UUID ownerId) {
public SealockMonster(final SealockMonster card) {
public SealockMonster copy() {return new SealockMonster(this);
class SealockMonsterBecomesIslandTargetEffect extends ContinuousEffectImpl {
public SealockMonsterBecomesIslandTargetEffect() {
public SealockMonsterBecomesIslandTargetEffect(final SealockMonsterBecomesIslandTargetEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public SealockMonsterBecomesIslandTargetEffect copy() {return new SealockMonsterBecomesIslandTargetEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
public class SedgeScorpion extends CardImpl {
public SedgeScorpion(UUID ownerId) {
public SedgeScorpion(final SedgeScorpion card) {
public SedgeScorpion copy() {return new SedgeScorpion(this);
public class SentryOfTheUnderworld extends CardImpl {
public SentryOfTheUnderworld(UUID ownerId) {
public SentryOfTheUnderworld(final SentryOfTheUnderworld card) {
public SentryOfTheUnderworld copy() {return new SentryOfTheUnderworld(this);
public class SetessanBattlePriest extends CardImpl {
public SetessanBattlePriest(UUID ownerId) {
public SetessanBattlePriest(final SetessanBattlePriest card) {
public SetessanBattlePriest copy() {return new SetessanBattlePriest(this);return new SetessanGriffin(this);
public class ShipbreakerKraken extends CardImpl {
public ShipbreakerKraken(UUID ownerId) {
public ShipbreakerKraken(final ShipbreakerKraken card) {
public ShipbreakerKraken copy() {return new ShipbreakerKraken(this);
public ShipbreakerKrakenReplacementEffect() {
public ShipbreakerKrakenReplacementEffect(final ShipbreakerKrakenReplacementEffect effect) {
public ShipbreakerKrakenReplacementEffect copy() {return new ShipbreakerKrakenReplacementEffect(this);
public boolean apply(Game game, Ability source) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.LOST_CONTROL ||
public boolean applies(GameEvent event, Ability source, Game game) {return false;return false;return false;return true;return false;
class ShipbreakerKrakenWatcher extends Watcher {
ShipbreakerKrakenWatcher () {
ShipbreakerKrakenWatcher(ShipbreakerKrakenWatcher watcher) {
public void watch(GameEvent event, Game game) {return;
public void reset() {
public ShipbreakerKrakenWatcher copy() {return new ShipbreakerKrakenWatcher(this);
public class ShipwreckSinger extends CardImpl {
public ShipwreckSinger(UUID ownerId) {
public ShipwreckSinger(final ShipwreckSinger card) {
public ShipwreckSinger copy() {return new ShipwreckSinger(this);
public class ShreddingWinds extends CardImpl {
public ShreddingWinds(UUID ownerId) {
public ShreddingWinds(final ShreddingWinds card) {
public ShreddingWinds copy() {return new ShreddingWinds(this);
public class SoldierOfThePantheon extends CardImpl {
public SoldierOfThePantheon(UUID ownerId) {
public SoldierOfThePantheon(final SoldierOfThePantheon card) {
public SoldierOfThePantheon copy() {return new SoldierOfThePantheon(this);
public class SparkJolt extends CardImpl {
public SparkJolt(UUID ownerId) {
public SparkJolt(final SparkJolt card) {
public SparkJolt copy() {return new SparkJolt(this);
public class SpearOfHeliod extends CardImpl {
public SpearOfHeliod(UUID ownerId) {
public SpearOfHeliod(final SpearOfHeliod card) {
public SpearOfHeliod copy() {return new SpearOfHeliod(this);
public class SpearpointOread extends CardImpl {
public SpearpointOread(UUID ownerId) {
public SpearpointOread(final SpearpointOread card) {
public SpearpointOread copy() {return new SpearpointOread(this);
public class SpellheartChimera extends CardImpl {
public SpellheartChimera(UUID ownerId) {
public SpellheartChimera(final SpellheartChimera card) {
public SpellheartChimera copy() {return new SpellheartChimera(this);
public class StaunchHeartedWarrior extends CardImpl {
public StaunchHeartedWarrior(UUID ownerId) {
public StaunchHeartedWarrior(final StaunchHeartedWarrior card) {
public StaunchHeartedWarrior copy() {return new StaunchHeartedWarrior(this);
public class SteamAugury extends CardImpl {
public SteamAugury(UUID ownerId) {
public SteamAugury(final SteamAugury card) {
public SteamAugury copy() {return new SteamAugury(this);
class SteamAuguryEffect extends OneShotEffect {
public SteamAuguryEffect() {
public SteamAuguryEffect(final SteamAuguryEffect effect) {
public SteamAuguryEffect copy() {return new SteamAuguryEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class StoneshockGiant extends CardImpl {
public StoneshockGiant(UUID ownerId) {
public StoneshockGiant(final StoneshockGiant card) {
public StoneshockGiant copy() {return new StoneshockGiant(this);
public class StormbreathDragon extends CardImpl {
public StormbreathDragon(UUID ownerId) {
public StormbreathDragon(final StormbreathDragon card) {
public StormbreathDragon copy() {return new StormbreathDragon(this);
class StormbreathDragonDamageEffect extends OneShotEffect {
public StormbreathDragonDamageEffect() {
public StormbreathDragonDamageEffect(final StormbreathDragonDamageEffect effect) {
public StormbreathDragonDamageEffect copy() {return new StormbreathDragonDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class StymiedHopes extends CardImpl {
public StymiedHopes(UUID ownerId) {
public StymiedHopes(final StymiedHopes card) {
public StymiedHopes copy() {return new StymiedHopes(this);
public class SwanSong extends CardImpl {
public SwanSong(UUID ownerId) {
public SwanSong(final SwanSong card) {
public SwanSong copy() {return new SwanSong(this);
class SwanSongEffect extends OneShotEffect {
public SwanSongEffect() {
public SwanSongEffect(final SwanSongEffect effect) {
public SwanSongEffect copy() {return new SwanSongEffect(this);
public boolean apply(Game game, Ability source) {return countered;
class SwanSongBirdToken extends Token {
SwanSongBirdToken() {
public class SylvanCaryatid extends CardImpl {
public SylvanCaryatid(UUID ownerId) {
public SylvanCaryatid(final SylvanCaryatid card) {
public SylvanCaryatid copy() {return new SylvanCaryatid(this);return new TempleOfAbandon(this);
public class TempleOfDeceit extends CardImpl {
public TempleOfDeceit(UUID ownerId) {
public TempleOfDeceit(final TempleOfDeceit card) {
public TempleOfDeceit copy() {return new TempleOfDeceit(this);
public class TempleOfMystery extends CardImpl {
public TempleOfMystery(UUID ownerId) {
public TempleOfMystery(final TempleOfMystery card) {
public TempleOfMystery copy() {return new TempleOfMystery(this);
public class TempleOfSilence extends CardImpl {
public TempleOfSilence(UUID ownerId) {
public TempleOfSilence(final TempleOfSilence card) {
public TempleOfSilence copy() {return new TempleOfSilence(this);
public class TempleOfTriumph extends CardImpl {
public TempleOfTriumph(UUID ownerId) {
public TempleOfTriumph(final TempleOfTriumph card) {
public TempleOfTriumph copy() {return new TempleOfTriumph(this);
public class ThassaGodOfTheSea extends CardImpl {
public ThassaGodOfTheSea(UUID ownerId) {
public ThassaGodOfTheSea(final ThassaGodOfTheSea card) {
public ThassaGodOfTheSea copy() {return new ThassaGodOfTheSea(this);
public class TimeToFeed extends CardImpl {
public TimeToFeed(UUID ownerId) {
public TimeToFeed(final TimeToFeed card) {
public TimeToFeed copy() {return new TimeToFeed(this);
class TimeToFeedTextEffect extends OneShotEffect {
public TimeToFeedTextEffect() {
public TimeToFeedTextEffect(final TimeToFeedTextEffect effect) {
public TimeToFeedTextEffect copy() {return new TimeToFeedTextEffect(this);
public boolean apply(Game game, Ability source) {return true;
class TimeToFeedDiesTriggeredAbility extends DelayedTriggeredAbility {
public TimeToFeedDiesTriggeredAbility(UUID watchedCreatureId, int zoneChangeCounter) {
public TimeToFeedDiesTriggeredAbility(final TimeToFeedDiesTriggeredAbility ability) {
public TimeToFeedDiesTriggeredAbility copy() {return new TimeToFeedDiesTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When that creature dies this turn, " + super.getRule();
public class TitanOfEternalFire extends CardImpl {
public TitanOfEternalFire(UUID ownerId) {
public TitanOfEternalFire(final TitanOfEternalFire card) {
public TitanOfEternalFire copy() {return new TitanOfEternalFire(this);
public class TitansStrength extends CardImpl {
public TitansStrength(UUID ownerId) {
public TitansStrength(final TitansStrength card) {
public TitansStrength copy() {return new TitansStrength(this);
public class TormentedHero extends CardImpl {
public TormentedHero(UUID ownerId) {
public TormentedHero(final TormentedHero card) {
public TormentedHero copy() {return new TormentedHero(this);
public boolean apply(Game game, Ability source) {return true;return new EachOpponentLosesYouGainSumLifeEffect(this);
public class TravelingPhilosopher extends CardImpl {
public TravelingPhilosopher(UUID ownerId) {
public TravelingPhilosopher(final TravelingPhilosopher card) {
public TravelingPhilosopher copy() {return new TravelingPhilosopher(this);
public class TriadOfFates extends CardImpl {
public TriadOfFates(UUID ownerId) {
public TriadOfFates(final TriadOfFates card) {
public TriadOfFates copy() {return new TriadOfFates(this);
class DrawCardControllerTargetEffect extends OneShotEffect {
public DrawCardControllerTargetEffect() {
public DrawCardControllerTargetEffect(final DrawCardControllerTargetEffect effect) {
public DrawCardControllerTargetEffect copy() {return new DrawCardControllerTargetEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class TritonFortuneHunter extends CardImpl {
public TritonFortuneHunter(UUID ownerId) {
public TritonFortuneHunter(final TritonFortuneHunter card) {
public TritonFortuneHunter copy() {return new TritonFortuneHunter(this);
public class TritonShorethief extends CardImpl {
public TritonShorethief(UUID ownerId) {
public TritonShorethief(final TritonShorethief card) {
public TritonShorethief copy() {return new TritonShorethief(this);
public class TritonTactics extends CardImpl {
public TritonTactics(UUID ownerId) {
public TritonTactics(final TritonTactics card) {
public TritonTactics copy() {return new TritonTactics(this);
class TritonTacticsUntapTargetEffect extends OneShotEffect {
public TritonTacticsUntapTargetEffect() {
public TritonTacticsUntapTargetEffect(final TritonTacticsUntapTargetEffect effect) {
public TritonTacticsUntapTargetEffect copy() {return new TritonTacticsUntapTargetEffect(this);
public boolean apply(Game game, Ability source) {return true;
class TritonTacticsTriggeredAbility extends DelayedTriggeredAbility {
public TritonTacticsTriggeredAbility() {
public TritonTacticsTriggeredAbility(TritonTacticsTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_COMBAT_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public TritonTacticsTriggeredAbility copy() {return new TritonTacticsTriggeredAbility(this);
public String getRule() {return "At this turn's next end of combat, " + modes.getText();
class TritonTacticsEndOfCombatEffect extends OneShotEffect {
public TritonTacticsEndOfCombatEffect() {
public TritonTacticsEndOfCombatEffect(final TritonTacticsEndOfCombatEffect effect) {
public TritonTacticsEndOfCombatEffect copy() {return new TritonTacticsEndOfCombatEffect(this);
public boolean apply(Game game, Ability source) {return true;
class BlockedCreaturesWatcher extends Watcher {
public BlockedCreaturesWatcher() {
public BlockedCreaturesWatcher(final BlockedCreaturesWatcher watcher) {
public void watch(GameEvent event, Game game) {
private void saveAttackingCreature(UUID attackerId, Integer zoneChangeCounter, Game game) {
public BlockedCreaturesWatcher copy() {return new BlockedCreaturesWatcher(this);
public class TwoHeadedCerberus extends CardImpl {
public TwoHeadedCerberus(UUID ownerId) {
public TwoHeadedCerberus(final TwoHeadedCerberus card) {
public TwoHeadedCerberus copy() {return new TwoHeadedCerberus(this);
public class TymaretTheMurderKing extends CardImpl {
public TymaretTheMurderKing(UUID ownerId) {
public TymaretTheMurderKing(final TymaretTheMurderKing card) {
public TymaretTheMurderKing copy() {return new TymaretTheMurderKing(this);
public class UnderworldCerberus extends CardImpl {
public UnderworldCerberus(UUID ownerId) {
public UnderworldCerberus(final UnderworldCerberus card) {
public UnderworldCerberus copy() {return new UnderworldCerberus(this);
public UnderworldCerberusEffect() {
public UnderworldCerberusEffect(final UnderworldCerberusEffect effect) {
public UnderworldCerberusEffect copy() {return new UnderworldCerberusEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.TARGET;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class UnknownShores extends CardImpl {
public UnknownShores(UUID ownerId) {
public UnknownShores(final UnknownShores card) {
public UnknownShores copy() {return new UnknownShores(this);
public class VanquishTheFoul extends CardImpl {
public VanquishTheFoul(UUID ownerId) {
public VanquishTheFoul(final VanquishTheFoul card) {
public VanquishTheFoul copy() {return new VanquishTheFoul(this);
public class Vaporkin extends CardImpl {
public Vaporkin(UUID ownerId) {
public Vaporkin(final Vaporkin card) {
public Vaporkin copy() {return new Vaporkin(this);
public class VipersKiss extends CardImpl {
public VipersKiss(UUID ownerId) {
public VipersKiss(final VipersKiss card) {
public VipersKiss copy() {return new VipersKiss(this);
public class VoyagesEnd extends CardImpl {
public VoyagesEnd(UUID ownerId) {
public VoyagesEnd(final VoyagesEnd card) {
public VoyagesEnd copy() {return new VoyagesEnd(this);
public class VoyagingSatyr extends CardImpl {
public VoyagingSatyr(UUID ownerId) {
public VoyagingSatyr(final VoyagingSatyr card) {
public VoyagingSatyr copy() {return new VoyagingSatyr(this);
public class WavecrashTriton extends CardImpl {
public WavecrashTriton(UUID ownerId) {
public WavecrashTriton(final WavecrashTriton card) {
public WavecrashTriton copy() {return new WavecrashTriton(this);
public class WhipOfErebos extends CardImpl {
public WhipOfErebos(UUID ownerId) {
public WhipOfErebos(final WhipOfErebos card) {
public WhipOfErebos copy() {return new WhipOfErebos(this);
class WhipOfErebosEffect extends OneShotEffect {
public WhipOfErebosEffect() {
public WhipOfErebosEffect(final WhipOfErebosEffect effect) {
public WhipOfErebosEffect copy() {return new WhipOfErebosEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class WhipOfErebosReplacementEffect extends ReplacementEffectImpl {
WhipOfErebosReplacementEffect() {
WhipOfErebosReplacementEffect(final WhipOfErebosReplacementEffect effect) {
public WhipOfErebosReplacementEffect copy() {return new WhipOfErebosReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public class WildCelebrants extends CardImpl {
public WildCelebrants(UUID ownerId) {
public WildCelebrants(final WildCelebrants card) {
public WildCelebrants copy() {return new WildCelebrants(this);
public class WingsteedRider extends CardImpl {
public WingsteedRider(UUID ownerId) {
public WingsteedRider(final WingsteedRider card) {
public WingsteedRider copy() {return new WingsteedRider(this);
public class WitchesEye extends CardImpl {
public WitchesEye(UUID ownerId) {
public WitchesEye(final WitchesEye card) {
public WitchesEye copy() {return new WitchesEye(this);
public class XenagosTheReveler extends CardImpl {
public XenagosTheReveler(UUID ownerId) {
public XenagosTheReveler(final XenagosTheReveler card) {
public XenagosTheReveler copy() {return new XenagosTheReveler(this);
class XenagosManaEffect extends OneShotEffect {
public XenagosManaEffect() {
public XenagosManaEffect(final XenagosManaEffect effect) {
public XenagosManaEffect copy() {return new XenagosManaEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class YokedOx extends CardImpl {
public YokedOx(UUID ownerId) {
public YokedOx(final YokedOx card) {
public YokedOx copy() {return new YokedOx(this);
public class AcademyRuins extends CardImpl {
public AcademyRuins(UUID ownerId) {
public AcademyRuins(final AcademyRuins card) {
public AcademyRuins copy() {return new AcademyRuins(this);
public class AmrouScout extends CardImpl {
public AmrouScout(UUID ownerId) {
public AmrouScout(final AmrouScout card) {
public AmrouScout copy() {return new AmrouScout(this);
public class AmrouSeekers extends CardImpl {
public AmrouSeekers(UUID ownerId) {
public AmrouSeekers(final AmrouSeekers card) {
public AmrouSeekers copy() {return new AmrouSeekers(this);
public class AncestralVision extends CardImpl {
public AncestralVision(UUID ownerId) {
public AncestralVision(final AncestralVision card) {
public AncestralVision copy() {return new AncestralVision(this);
public class AngelsGrace extends CardImpl {
public AngelsGrace(UUID ownerId) {
public AngelsGrace(final AngelsGrace card) {
public AngelsGrace copy() {return new AngelsGrace(this);
public AngelsGraceEffect() {
public AngelsGraceEffect(final AngelsGraceEffect effect) {
public AngelsGraceEffect copy() {return new AngelsGraceEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.WINS || event.getType() == EventType.LOSES;
public boolean applies(GameEvent event, Ability source, Game game) {return (event.getType() == EventType.WINS && game.getOpponents(source.getControllerId()).contains(event.getPlayerId())) ||
class AngelsGraceReplacementEffect extends ReplacementEffectImpl {
public AngelsGraceReplacementEffect() {
public AngelsGraceReplacementEffect(final AngelsGraceReplacementEffect effect) {
public AngelsGraceReplacementEffect copy() {return new AngelsGraceReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS);
public boolean applies(GameEvent event, Ability source, Game game) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class AshcoatBear extends CardImpl {
public AshcoatBear(UUID ownerId) {
public AshcoatBear(final AshcoatBear card) {
public AshcoatBear copy() {return new AshcoatBear(this);
public class AspectOfMongoose extends CardImpl {
public AspectOfMongoose(UUID ownerId) {
public AspectOfMongoose(final AspectOfMongoose card) {
public AspectOfMongoose copy() {return new AspectOfMongoose(this);
public class AssemblyWorker extends CardImpl {
public AssemblyWorker(UUID ownerId) {
public AssemblyWorker(final AssemblyWorker card) {
public AssemblyWorker copy() {return new AssemblyWorker(this);
public class BasalSliver extends CardImpl {
public BasalSliver(UUID ownerId) {
public BasalSliver(final BasalSliver card) {
public BasalSliver copy() {return new BasalSliver(this);
public class BasaltGargoyle extends CardImpl {
public BasaltGargoyle(UUID ownerId) {
public BasaltGargoyle(final BasaltGargoyle card) {
public BasaltGargoyle copy() {return new BasaltGargoyle(this);
public class BenalishCavalry extends CardImpl {
public BenalishCavalry(UUID ownerId) {
public BenalishCavalry(final BenalishCavalry card) {
public BenalishCavalry copy() {return new BenalishCavalry(this);
public class BonesplitterSliver extends CardImpl {
public BonesplitterSliver(UUID ownerId) {
public BonesplitterSliver(final BonesplitterSliver card) {
public BonesplitterSliver copy() {return new BonesplitterSliver(this);
public class BrassGnat extends CardImpl {
public BrassGnat(UUID ownerId) {
public BrassGnat(final BrassGnat card) {
public BrassGnat copy() {return new BrassGnat(this);return new CalciformPools(this);
public class CallToTheNetherworld extends CardImpl {
public CallToTheNetherworld(UUID ownerId) {
public CallToTheNetherworld(final CallToTheNetherworld card) {
public CallToTheNetherworld copy() {return new CallToTheNetherworld(this);
public class CarefulConsideration extends CardImpl {
public CarefulConsideration(UUID ownerId) {
public CarefulConsideration(final CarefulConsideration card) {
public CarefulConsideration copy() {return new CarefulConsideration(this);
public class CastleRaptors extends CardImpl {
public CastleRaptors(UUID ownerId) {
public CastleRaptors(final CastleRaptors card) {
public CastleRaptors copy() {return new CastleRaptors(this);
public class CavalryMaster extends CardImpl {
public CavalryMaster(UUID ownerId) {
public CavalryMaster(final CavalryMaster card) {
public CavalryMaster copy() {return new CavalryMaster(this);
public class ChildrenOfKorlis extends CardImpl {
public ChildrenOfKorlis(UUID ownerId) {
public ChildrenOfKorlis(final ChildrenOfKorlis card) {
public ChildrenOfKorlis copy() {return new ChildrenOfKorlis(this);
public int calculate(Game game, Ability sourceAbility, Effect effect) {return watcher.getLiveLost(sourceAbility.getControllerId());return 0;
public DynamicValue copy() {return new SourceControllerLostLifeCount();
public String toString() {return "X";
public String getMessage() {return "life you've lost this turn";
public class ChronatogTotem extends CardImpl {
public ChronatogTotem(UUID ownerId) {
public ChronatogTotem(final ChronatogTotem card) {
public ChronatogTotem copy() {return new ChronatogTotem(this);
class ChronatogTotemAbility extends LimitedTimesPerTurnActivatedAbility {
public ChronatogTotemAbility(Zone zone, Effect effect, Cost cost, Condition condition) {
public ChronatogTotemAbility(ChronatogTotemAbility ability) {
public Effects getEffects(Game game, EffectType effectType) {return emptyEffects;return super.getEffects(game, effectType);
public boolean canActivate(UUID playerId, Game game) {return false;return super.canActivate(playerId, game);
public ChronatogTotemAbility copy() {return new ChronatogTotemAbility(this);
public String getRule() {
public class Chronosavant extends CardImpl {
public Chronosavant(UUID ownerId) {
public Chronosavant(final Chronosavant card) {
public Chronosavant copy() {return new Chronosavant(this);
public class ClockworkHydra extends CardImpl {
public ClockworkHydra(UUID ownerId) {
public ClockworkHydra(final ClockworkHydra card) {
public ClockworkHydra copy() {return new ClockworkHydra(this);
class ClockworkHydraEffect extends OneShotEffect {
public ClockworkHydraEffect() {
public ClockworkHydraEffect(final ClockworkHydraEffect effect) {
public ClockworkHydraEffect copy() {return new ClockworkHydraEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return true;return false;
public class CloudchaserKestrel extends CardImpl {
public CloudchaserKestrel(UUID ownerId) {
public CloudchaserKestrel(final CloudchaserKestrel card) {
public CloudchaserKestrel copy() {return new CloudchaserKestrel(this);
public class Conflagrate extends CardImpl {
public Conflagrate(UUID ownerId) {
public Conflagrate(final Conflagrate card) {
public Conflagrate copy() {return new Conflagrate(this);
class ConflagrateVariableValue implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return ((DiscardTargetCost) cost).getCards().size();return sourceAbility.getManaCostsToPay().getX();
public ConflagrateVariableValue copy() {return new ConflagrateVariableValue();
public String toString() {return "X";
public String getMessage() {return "";
public class CorpulentCorpse extends CardImpl {
public CorpulentCorpse(UUID ownerId) {
public CorpulentCorpse(final CorpulentCorpse card) {
public CorpulentCorpse copy() {return new CorpulentCorpse(this);
public class CrookclawTransmuter extends CardImpl {
public CrookclawTransmuter(UUID ownerId) {
public CrookclawTransmuter(final CrookclawTransmuter card) {
public CrookclawTransmuter copy() {return new CrookclawTransmuter(this);
public class DarkWithering extends CardImpl {
public DarkWithering(UUID ownerId) {
public DarkWithering(final DarkWithering card) {
public DarkWithering copy() {return new DarkWithering(this);
public class DAvenantHealer extends CardImpl {
public DAvenantHealer(UUID ownerId) {
public DAvenantHealer(final DAvenantHealer card) {
public DAvenantHealer copy() {return new DAvenantHealer(this);
public class DeathsporeThallid extends CardImpl {
public DeathsporeThallid(UUID ownerId) {
public DeathsporeThallid(final DeathsporeThallid card) {
public DeathsporeThallid copy() {return new DeathsporeThallid(this);
public class DemonicCollusion extends CardImpl {
public DemonicCollusion(UUID ownerId) {
public DemonicCollusion(final DemonicCollusion card) {
public DemonicCollusion copy() {return new DemonicCollusion(this);
public class DrainingWhelk extends CardImpl {
public DrainingWhelk(UUID ownerId) {
public DrainingWhelk(final DrainingWhelk card) {
public DrainingWhelk copy() {return new DrainingWhelk(this);
class DrainingWhelkEffect extends CounterTargetEffect {
DrainingWhelkEffect() {
DrainingWhelkEffect(final DrainingWhelkEffect effect) {
public DrainingWhelkEffect copy() {return new DrainingWhelkEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DralnuLichLord extends CardImpl {
public DralnuLichLord(UUID ownerId) {
public DralnuLichLord(final DralnuLichLord card) {
public DralnuLichLord copy() {return new DralnuLichLord(this);
class DralnuLichLordReplacementEffect extends ReplacementEffectImpl {
DralnuLichLordReplacementEffect() {
DralnuLichLordReplacementEffect(final DralnuLichLordReplacementEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_CREATURE;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getTargetId().equals(source.getSourceId());
public DralnuLichLordReplacementEffect copy() {return new DralnuLichLordReplacementEffect(this);
class DralnuLichLordFlashbackEffect extends ContinuousEffectImpl {
DralnuLichLordFlashbackEffect() {
DralnuLichLordFlashbackEffect(final DralnuLichLordFlashbackEffect effect) {
public DralnuLichLordFlashbackEffect copy() {return new DralnuLichLordFlashbackEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DreadReturn extends CardImpl {
public DreadReturn(UUID ownerId) {
public DreadReturn(final DreadReturn card) {
public DreadReturn copy() {return new DreadReturn(this);return new DrifterIlDal(this);
public class DrudgeReavers extends CardImpl {
public DrudgeReavers(UUID ownerId) {
public DrudgeReavers(final DrudgeReavers card) {
public DrudgeReavers copy() {return new DrudgeReavers(this);
public class DurkwoodBaloth extends CardImpl {
public DurkwoodBaloth(UUID ownerId) {
public DurkwoodBaloth(final DurkwoodBaloth card) {
public DurkwoodBaloth copy() {return new DurkwoodBaloth(this);
public class DuskriderPeregrine extends CardImpl {
public DuskriderPeregrine(UUID ownerId) {
public DuskriderPeregrine(final DuskriderPeregrine card) {
public DuskriderPeregrine copy() {return new DuskriderPeregrine(this);
public class EmptyTheWarrens extends CardImpl {
public EmptyTheWarrens(UUID ownerId) {
public EmptyTheWarrens(final EmptyTheWarrens card) {
public EmptyTheWarrens copy() {return new EmptyTheWarrens(this);
public class ErrantDoomsayers extends CardImpl {
public ErrantDoomsayers(UUID ownerId) {
public ErrantDoomsayers(final ErrantDoomsayers card) {
public ErrantDoomsayers copy() {return new ErrantDoomsayers(this);
public class ErrantEphemeron extends CardImpl {
public ErrantEphemeron(UUID ownerId) {
public ErrantEphemeron(final ErrantEphemeron card) {
public ErrantEphemeron copy() {return new ErrantEphemeron(this);
public class EternitySnare extends CardImpl {
public EternitySnare(UUID ownerId) {
public EternitySnare(final EternitySnare card) {
public EternitySnare copy() {return new EternitySnare(this);
public class EvilEyeOfUrborg extends CardImpl {
public EvilEyeOfUrborg(UUID ownerId) {
public EvilEyeOfUrborg(final EvilEyeOfUrborg card) {
public EvilEyeOfUrborg copy() {return new EvilEyeOfUrborg(this);
public class FacelessDevourer extends CardImpl {
public FacelessDevourer(UUID ownerId) {
public FacelessDevourer(final FacelessDevourer card) {
public FacelessDevourer copy() {return new FacelessDevourer(this);
public class FallenIdeal extends CardImpl {
public FallenIdeal(UUID ownerId) {
public FallenIdeal(final FallenIdeal card) {
public FallenIdeal copy() {return new FallenIdeal(this);
public class Feebleness extends CardImpl {
public Feebleness(UUID ownerId) {
public Feebleness(final Feebleness card) {
public Feebleness copy() {return new Feebleness(this);
public class FiremawKavu extends CardImpl {
public FiremawKavu(UUID ownerId) {
public FiremawKavu(final FiremawKavu card) {
public FiremawKavu copy() {return new FiremawKavu(this);
public class FirewakeSliver extends CardImpl {
public FirewakeSliver(UUID ownerId) {
public FirewakeSliver(final FirewakeSliver card) {
public FirewakeSliver copy() {return new FirewakeSliver(this);
public class FlickeringSpirit extends CardImpl {
public FlickeringSpirit(UUID ownerId) {
public FlickeringSpirit(final FlickeringSpirit card) {
public FlickeringSpirit copy() {return new FlickeringSpirit(this);
public class ForiysianInterceptor extends CardImpl {
public ForiysianInterceptor(UUID ownerId) {
public ForiysianInterceptor(final ForiysianInterceptor card) {
public ForiysianInterceptor copy() {return new ForiysianInterceptor(this);
public class ForiysianTotem extends CardImpl {
public ForiysianTotem(UUID ownerId) {
public ForiysianTotem(final ForiysianTotem card) {
public ForiysianTotem copy() {return new ForiysianTotem(this);
class ForiysianTotemToken extends Token {
public ForiysianTotemToken() {return new Fortify(this);
public class FortuneThief extends CardImpl {
public FortuneThief(UUID ownerId) {
public FortuneThief(final FortuneThief card) {
public FortuneThief copy() {return new FortuneThief(this);
class FortuneThiefReplacementEffect extends ReplacementEffectImpl {
public FortuneThiefReplacementEffect() {
public FortuneThiefReplacementEffect(final FortuneThiefReplacementEffect effect) {
public FortuneThiefReplacementEffect copy() {return new FortuneThiefReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS;
public boolean applies(GameEvent event, Ability source, Game game) {
) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class FungusSliver extends CardImpl {
public FungusSliver(UUID ownerId) {
public FungusSliver(final FungusSliver card) {
public FungusSliver copy() {return new FungusSliver(this);
public class FurySliver extends CardImpl {
public FurySliver(UUID ownerId) {
public FurySliver(final FurySliver card) {
public FurySliver copy() {return new FurySliver(this);
public class GauntletOfPower extends CardImpl {
public GauntletOfPower(UUID ownerId) {
public GauntletOfPower(final GauntletOfPower card) {
public GauntletOfPower copy() {return new GauntletOfPower(this);
class GauntletOfPowerEffect1 extends ContinuousEffectImpl {
public GauntletOfPowerEffect1() {
public GauntletOfPowerEffect1(final GauntletOfPowerEffect1 effect) {
public GauntletOfPowerEffect1 copy() {return new GauntletOfPowerEffect1(this);
public boolean apply(Game game, Ability source) {return true;
class TapForManaAllTriggeredAbility extends TriggeredManaAbility {
public TapForManaAllTriggeredAbility(ManaEffect effect, FilterPermanent filter, SetTargetPointer setTargetPointer) {
public TapForManaAllTriggeredAbility(TapForManaAllTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public TapForManaAllTriggeredAbility copy() {return new TapForManaAllTriggeredAbility(this);
public String getRule() {return "Whenever " + filter.getMessage() + " for mana, " + super.getRule();
class GauntletOfPowerEffectEffect2 extends ManaEffect {
public GauntletOfPowerEffectEffect2() {
public GauntletOfPowerEffectEffect2(final GauntletOfPowerEffectEffect2 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public GauntletOfPowerEffectEffect2 copy() {return new GauntletOfPowerEffectEffect2(this);
public class GazeOfJustice extends CardImpl {
public GazeOfJustice(UUID ownerId) {
public GazeOfJustice(final GazeOfJustice card) {
public GazeOfJustice copy() {return new GazeOfJustice(this);
public class GemhideSliver extends CardImpl {
public GemhideSliver(UUID ownerId) {
public GemhideSliver(final GemhideSliver card) {
public GemhideSliver copy() {return new GemhideSliver(this);
public class GemstoneCaverns extends CardImpl {
public GemstoneCaverns(UUID ownerId) {
public GemstoneCaverns(final GemstoneCaverns card) {
public GemstoneCaverns copy() {return new GemstoneCaverns(this);
public class GhituFirebreathing extends CardImpl {
public GhituFirebreathing(UUID ownerId) {
public GhituFirebreathing(final GhituFirebreathing card) {
public GhituFirebreathing copy() {return new GhituFirebreathing(this);
public class GhostflameSliver extends CardImpl {
public GhostflameSliver(UUID ownerId) {
public GhostflameSliver(final GhostflameSliver card) {
public GhostflameSliver copy() {return new GhostflameSliver(this);
class GhostflameSliverEffect extends ContinuousEffectImpl {
public GhostflameSliverEffect() {
public boolean apply(Game game, Ability source) {return true;
public GhostflameSliverEffect copy() {return new GhostflameSliverEffect(this);
private GhostflameSliverEffect(final GhostflameSliverEffect effect) {
public class GlassAsp extends CardImpl {
public GlassAsp(UUID ownerId) {
public GlassAsp(final GlassAsp card) {
public GlassAsp copy() {return new GlassAsp(this);
public class GoblinSkycutter extends CardImpl {
public GoblinSkycutter(UUID ownerId) {
public GoblinSkycutter(final GoblinSkycutter card) {
public GoblinSkycutter copy() {return new GoblinSkycutter(this);
public class GorgonRecluse extends CardImpl {
public GorgonRecluse(UUID ownerId) {
public GorgonRecluse(final GorgonRecluse card) {
public GorgonRecluse copy() {return new GorgonRecluse(this);
public class Grapeshot extends CardImpl {
public Grapeshot(UUID ownerId) {
public Grapeshot(final Grapeshot card) {
public Grapeshot copy() {return new Grapeshot(this);return new GreaterGargadon(this);return new GreaterGargadonAbility(this);
public boolean canActivate(UUID playerId, Game game) {return true;return false;
public String getRule() {return super.getRule() + " Activate this ability only if Greater Gargadon is suspended.";return new GroundRift(this);
public class GustcloakCavalier extends CardImpl {
public GustcloakCavalier(UUID ownerId) {
public GustcloakCavalier(final GustcloakCavalier card) {
public GustcloakCavalier copy() {return new GustcloakCavalier(this);
public class HarmonicSliver extends CardImpl {
public HarmonicSliver(UUID ownerId) {
public HarmonicSliver(final HarmonicSliver card) {
public HarmonicSliver copy() {return new HarmonicSliver(this);
public class HauntingHymn extends CardImpl {
public HauntingHymn(UUID ownerId) {
public HauntingHymn(final HauntingHymn card) {
public HauntingHymn copy() {return new HauntingHymn(this);
public class HavenwoodWurm extends CardImpl {
public HavenwoodWurm(UUID ownerId) {
public HavenwoodWurm(final HavenwoodWurm card) {
public HavenwoodWurm copy() {return new HavenwoodWurm(this);
public class HerdGnarr extends CardImpl {
public HerdGnarr(UUID ownerId) {
public HerdGnarr(final HerdGnarr card) {
public HerdGnarr copy() {return new HerdGnarr(this);
public class Hypergenesis extends CardImpl {
public Hypergenesis(UUID ownerId) {
public Hypergenesis(final Hypergenesis card) {
public Hypergenesis copy() {return new Hypergenesis(this);
class HypergenesisEffect extends OneShotEffect {
HypergenesisEffect() {
HypergenesisEffect(final HypergenesisEffect effect) {
public HypergenesisEffect copy() {return new HypergenesisEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class IcatianCrier extends CardImpl {
public IcatianCrier(UUID ownerId) {
public IcatianCrier(final IcatianCrier card) {
public IcatianCrier copy() {return new IcatianCrier(this);
public class IgniteMemories extends CardImpl {
public IgniteMemories(UUID ownerId) {
public IgniteMemories(final IgniteMemories card) {
public IgniteMemories copy() {return new IgniteMemories(this);
class IgniteMemoriesEffect extends OneShotEffect {
public IgniteMemoriesEffect() {
public IgniteMemoriesEffect(final IgniteMemoriesEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public IgniteMemoriesEffect copy() {return new IgniteMemoriesEffect(this);
public class IronclawBuzzardiers extends CardImpl {
public IronclawBuzzardiers(UUID ownerId) {
public IronclawBuzzardiers(final IronclawBuzzardiers card) {
public IronclawBuzzardiers copy() {return new IronclawBuzzardiers(this);
public class IthHighArcanist extends CardImpl {
public IthHighArcanist(UUID ownerId) {
public IthHighArcanist(final IthHighArcanist card) {
public IthHighArcanist copy() {return new IthHighArcanist(this);
public class IvoryGiant extends CardImpl {
public IvoryGiant(UUID ownerId) {
public IvoryGiant(final IvoryGiant card) {
public IvoryGiant copy() {return new IvoryGiant(this);
public class JayaBallardTaskMage extends CardImpl {
public JayaBallardTaskMage(UUID ownerId) {
public JayaBallardTaskMage(final JayaBallardTaskMage card) {
public JayaBallardTaskMage copy() {return new JayaBallardTaskMage(this);
public CantRegenerateEffect() {
public CantRegenerateEffect(final CantRegenerateEffect effect) {
public CantRegenerateEffect copy() {return new CantRegenerateEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return watcher.wasDamaged(event.getTargetId(), game);return false;
public class JeditsDragoons extends CardImpl {
public JeditsDragoons(UUID ownerId) {
public JeditsDragoons(final JeditsDragoons card) {
public JeditsDragoons copy() {return new JeditsDragoons(this);
public class KaervekTheMerciless extends CardImpl {
public KaervekTheMerciless(UUID ownerId) {
public KaervekTheMerciless(final KaervekTheMerciless card) {
public KaervekTheMerciless copy() {return new KaervekTheMerciless(this);
class KaervekTheMercilessEffect extends OneShotEffect {
public KaervekTheMercilessEffect() {
public KaervekTheMercilessEffect(final KaervekTheMercilessEffect effect) {
public KaervekTheMercilessEffect copy() {return new KaervekTheMercilessEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;return new KeldonHalberdier(this);
public class KrosanGrip extends CardImpl {
public KrosanGrip(UUID ownerId) {
public KrosanGrip(final KrosanGrip card) {
public KrosanGrip copy() {return new KrosanGrip(this);
public class LightningAxe extends CardImpl {
public LightningAxe(UUID ownerId) {
public LightningAxe(final LightningAxe card) {
public LightningAxe copy() {return new LightningAxe(this);
public class LocketOfYesterdays extends CardImpl {
public LocketOfYesterdays(UUID ownerId) {
public LocketOfYesterdays(final LocketOfYesterdays card) {
public LocketOfYesterdays copy() {return new LocketOfYesterdays(this);
LocketOfYesterdaysCostReductionEffect() {
LocketOfYesterdaysCostReductionEffect(LocketOfYesterdaysCostReductionEffect effect) {return true;return false;return true;return false;
public LocketOfYesterdaysCostReductionEffect copy() {return new LocketOfYesterdaysCostReductionEffect(this);
public class LooterIlKor extends CardImpl {
public LooterIlKor(UUID ownerId) {
public LooterIlKor(final LooterIlKor card) {
public LooterIlKor copy() {return new LooterIlKor(this);
public class LotusBloom extends CardImpl {
public LotusBloom(UUID ownerId) {
public LotusBloom(final LotusBloom card) {
public LotusBloom copy() {return new LotusBloom(this);
public class MagusOfTheCandelabra extends CardImpl {
public MagusOfTheCandelabra(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public MagusOfTheCandelabra(final MagusOfTheCandelabra card) {
public MagusOfTheCandelabra copy() {return new MagusOfTheCandelabra(this);
public class MagusOfTheDisk extends CardImpl {
public MagusOfTheDisk(UUID ownerId) {
public MagusOfTheDisk(final MagusOfTheDisk card) {
public MagusOfTheDisk copy() {return new MagusOfTheDisk(this);
public class MagusOfTheScroll extends CardImpl {
public MagusOfTheScroll(UUID ownerId) {
public MagusOfTheScroll(final MagusOfTheScroll card) {
public MagusOfTheScroll copy() {return new MagusOfTheScroll(this);
class MagusOfTheScrollEffect extends OneShotEffect {
public MagusOfTheScrollEffect() {
public MagusOfTheScrollEffect(final MagusOfTheScrollEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;return true;return false;
public MagusOfTheScrollEffect copy() {return new MagusOfTheScrollEffect(this);
public class ManaSkimmer extends CardImpl {
public ManaSkimmer(UUID ownerId) {
public ManaSkimmer(final ManaSkimmer card) {
public ManaSkimmer copy() {return new ManaSkimmer(this);
class ManaSkimmerTriggeredAbility extends TriggeredAbilityImpl {
ManaSkimmerTriggeredAbility() {
ManaSkimmerTriggeredAbility(ManaSkimmerTriggeredAbility ability) {
public ManaSkimmerTriggeredAbility copy() {return new ManaSkimmerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals damage to a player, tap target land that player controls. That land doesn't untap during its controller's next untap step.";return new MangaraOfCorondor(this);
public class MightOfOldKrosa extends CardImpl {
public MightOfOldKrosa(UUID ownerId) {
public MightOfOldKrosa(final MightOfOldKrosa card) {
public MightOfOldKrosa copy() {return new MightOfOldKrosa(this);
public class MightSliver extends CardImpl {
public MightSliver(UUID ownerId) {
public MightSliver(final MightSliver card) {
public MightSliver copy() {return new MightSliver(this);
public class MindlashSliver extends CardImpl {
public MindlashSliver(UUID ownerId) {
public MindlashSliver(final MindlashSliver card) {
public MindlashSliver copy() {return new MindlashSliver(this);
public class Mindstab extends CardImpl {
public Mindstab(UUID ownerId) {
public Mindstab(final Mindstab card) {
public Mindstab copy() {return new Mindstab(this);return new MishraArtificerProdigy(this);return new MishraArtificerProdigyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast an artifact spell, you may search your graveyard, hand, and/or library for a card with the same name as that spell and put it onto the battlefield. If you search your library this way, shuffle it.";return new MishraArtificerProdigyEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public void setName(String cardName) {
public class MoggWarMarshal extends CardImpl {
public MoggWarMarshal(UUID ownerId) {
public MoggWarMarshal(final MoggWarMarshal card) {
public MoggWarMarshal copy() {return new MoggWarMarshal(this);
public class Molder extends CardImpl {
public Molder(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public Molder(final Molder card) {
public Molder copy() {return new Molder(this);
public class MomentaryBlink extends CardImpl {
public MomentaryBlink(UUID ownerId) {
public MomentaryBlink(final MomentaryBlink card) {
public MomentaryBlink copy() {return new MomentaryBlink(this);
public class Moonlace extends CardImpl {
public Moonlace(UUID ownerId) {
public Moonlace(final Moonlace card) {
public Moonlace copy() {return new Moonlace(this);
public class MwonvuliAcidMoss extends CardImpl {
public MwonvuliAcidMoss(UUID ownerId) {
public MwonvuliAcidMoss(final MwonvuliAcidMoss card) {
public MwonvuliAcidMoss copy() {return new MwonvuliAcidMoss(this);
public class NetherTraitor extends CardImpl {
public NetherTraitor(UUID ownerId) {
public NetherTraitor(final NetherTraitor card) {
public NetherTraitor copy() {return new NetherTraitor(this);
class NetherTraitorTriggeredAbility extends TriggeredAbilityImpl {
NetherTraitorTriggeredAbility(){
NetherTraitorTriggeredAbility(final NetherTraitorTriggeredAbility ability) {
public NetherTraitorTriggeredAbility copy(){return new NetherTraitorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever another creature is put into your graveyard from the battlefield, you may pay {B}. If you do, return {this} from your graveyard to the battlefield.";
public class NorinTheWary extends CardImpl {
public NorinTheWary(UUID ownerId) {
public NorinTheWary(final NorinTheWary card) {
public NorinTheWary copy() {return new NorinTheWary(this);
class NorinTheWaryTriggeredAbility extends TriggeredAbilityImpl {
public NorinTheWaryTriggeredAbility() {
public NorinTheWaryTriggeredAbility(final NorinTheWaryTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return new StringBuilder("When a player casts a spell or a creature attacks, ").append(super.getRule()).toString();
public NorinTheWaryTriggeredAbility copy() {return new NorinTheWaryTriggeredAbility(this);
public class OpalGuardian extends CardImpl {
public OpalGuardian(UUID ownerId) {
public OpalGuardian(final OpalGuardian card) {
public OpalGuardian copy() {return new OpalGuardian(this);
class OpalGuardianGargoyle extends Token {
public OpalGuardianGargoyle() {
public class OpalineSliver extends CardImpl {
public OpalineSliver(UUID ownerId) {
public OpalineSliver(final OpalineSliver card) {
public OpalineSliver copy() {return new OpalineSliver(this);
class OpalineSliverTriggeredAbility extends TriggeredAbilityImpl {
public OpalineSliverTriggeredAbility() {
public OpalineSliverTriggeredAbility(final OpalineSliverTriggeredAbility ability) {
public OpalineSliverTriggeredAbility copy() {return new OpalineSliverTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return false;return event.getTargetId().equals(this.getSourceId())
public String getRule() {return "Whenever this permanent becomes the target of a spell an opponent controls, you may draw a card.";
public class OphidianEye extends CardImpl {
public OphidianEye(UUID ownerId) {
public OphidianEye(final OphidianEye card) {
public OphidianEye copy() {return new OphidianEye(this);
public class OutriderEnKor extends CardImpl {
public OutriderEnKor(UUID ownerId) {
public OutriderEnKor(final OutriderEnKor card) {
public OutriderEnKor copy() {return new OutriderEnKor(this);return new ParadoxHaze(this);return new ParadoxHazeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of enchanted player's first upkeep each turn, that player gets an additional upkeep step after this step.";return new ParadoxHazeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class PardicDragon extends CardImpl {
public PardicDragon(UUID ownerId) {
public PardicDragon(final PardicDragon card) {
public PardicDragon copy() {return new PardicDragon(this);
class PardicDragonEffect extends OneShotEffect {
public PardicDragonEffect() {
public PardicDragonEffect(final PardicDragonEffect effect) {
public PardicDragonEffect copy() {return new PardicDragonEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PendelhavenElder extends CardImpl {
public PendelhavenElder(UUID ownerId) {
public PendelhavenElder(final PendelhavenElder card) {
public PendelhavenElder copy() {return new PendelhavenElder(this);
public class PentarchWard extends CardImpl {
public PentarchWard(UUID ownerId) {
public PentarchWard(final PentarchWard card) {
public PentarchWard copy() {return new PentarchWard(this);
public class PhantomWurm extends CardImpl {
public PhantomWurm(UUID ownerId) {
public PhantomWurm(final PhantomWurm card) {
public PhantomWurm copy() {return new PhantomWurm(this);
class PhantomWurmPreventionEffect extends PreventionEffectImpl {
public PhantomWurmPreventionEffect() {
public PhantomWurmPreventionEffect(final PhantomWurmPreventionEffect effect) {
public PhantomWurmPreventionEffect copy() {return new PhantomWurmPreventionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;return new Phthisis(this);return new PhthisisEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PitKeeper extends CardImpl {
public PitKeeper(UUID ownerId) {"When {this} enters the battlefield, if you have four or more creature cards in your graveyard, you may return target creature card from your graveyard to your hand."));
public PitKeeper(final PitKeeper card) {
public PitKeeper copy() {return new PitKeeper(this);
class CreatureCardsInControllerGraveCondition implements Condition {
public CreatureCardsInControllerGraveCondition(int value) {
public boolean apply(Game game, Ability source) {
{return true;return false;
public class PlagueSliver extends CardImpl {
public PlagueSliver(UUID ownerId) {
public PlagueSliver(final PlagueSliver card) {
public PlagueSliver copy() {return new PlagueSliver(this);
public class Plunder extends CardImpl {
public Plunder(UUID ownerId) {
public Plunder(final Plunder card) {
public Plunder copy() {return new Plunder(this);
public class PrimalForcemage extends CardImpl {
public PrimalForcemage(UUID ownerId) {
public PrimalForcemage(final PrimalForcemage card) {
public PrimalForcemage copy() {return new PrimalForcemage(this);
public class PrismaticLens extends CardImpl {
public PrismaticLens(UUID ownerId) {
public PrismaticLens(final PrismaticLens card) {
public PrismaticLens copy() {return new PrismaticLens(this);
public class PsionicSliver extends CardImpl {
public PsionicSliver(UUID ownerId) {
public PsionicSliver(final PsionicSliver card) {
public PsionicSliver copy() {return new PsionicSliver(this);
public class Reiterate extends CardImpl {
public Reiterate(UUID ownerId) {
public Reiterate(final Reiterate card) {
public Reiterate copy() {return new Reiterate(this);
public class RestoreBalance extends CardImpl {
public RestoreBalance(UUID ownerId) {
public RestoreBalance(final RestoreBalance card) {
public RestoreBalance copy() {return new RestoreBalance(this);
class RestoreBalanceEffect extends OneShotEffect {
RestoreBalanceEffect() {
RestoreBalanceEffect(final RestoreBalanceEffect effect) {
public RestoreBalanceEffect copy() {return new RestoreBalanceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new RiftBolt(this);return new RiftwingCloudskate(this);return new SaffiEriksdotter(this);this.staticText = "When target creature is put into your graveyard from the battlefield this turn, return that card to the battlefield";return new SaffiEriksdotterEffect(this);
public boolean apply(Game game, Ability source) {return false;return new SaffiEriksdotterDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When target creature is put into your graveyard from the battlefield this turn, " + super.getRule();
public class SageOfEpityr extends CardImpl {
public SageOfEpityr(UUID ownerId) {
public SageOfEpityr(final SageOfEpityr card) {
public SageOfEpityr copy() {return new SageOfEpityr(this);
public class Sangrophage extends CardImpl {
public Sangrophage(UUID ownerId) {
public Sangrophage(final Sangrophage card) {
public Sangrophage copy() {return new Sangrophage(this);
public class SarpadianEmpiresVolVii extends CardImpl {
public SarpadianEmpiresVolVii(UUID ownerId) {
public SarpadianEmpiresVolVii(final SarpadianEmpiresVolVii card) {
public SarpadianEmpiresVolVii copy() {return new SarpadianEmpiresVolVii(this);
class ChooseTokenEffect extends OneShotEffect {
public ChooseTokenEffect() {
public ChooseTokenEffect(final ChooseTokenEffect effect) {
public ChooseTokenEffect copy() {return new ChooseTokenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class CreateSelectedTokenEffect extends OneShotEffect {
public CreateSelectedTokenEffect() {
public CreateSelectedTokenEffect(final CreateSelectedTokenEffect effect) {
public CreateSelectedTokenEffect copy() {return new CreateSelectedTokenEffect(this);
public boolean apply(Game game, Ability source) {return true;
class CamaridToken extends Token {
public CamaridToken() {
public class SavageThallid extends CardImpl {
public SavageThallid(UUID ownerId) {
public SavageThallid(final SavageThallid card) {
public SavageThallid copy() {return new SavageThallid(this);
public class ScarwoodTreefolk extends CardImpl {
public ScarwoodTreefolk(UUID ownerId) {
public ScarwoodTreefolk(final ScarwoodTreefolk card) {
public ScarwoodTreefolk copy() {return new ScarwoodTreefolk(this);
public class ScionOfTheUrDragon extends CardImpl {
public ScionOfTheUrDragon(UUID ownerId) {
public ScionOfTheUrDragon(final ScionOfTheUrDragon card) {
public ScionOfTheUrDragon copy() {return new ScionOfTheUrDragon(this);
class ScionOfTheUrDragonEffect extends SearchEffect {
public ScionOfTheUrDragonEffect() {
ScionOfTheUrDragonEffect(final ScionOfTheUrDragonEffect effect) {
public ScionOfTheUrDragonEffect copy() {return new ScionOfTheUrDragonEffect(this);
public boolean apply(Game game, Ability ability) {return true;return false;
public class ScreechingSliver extends CardImpl {
public ScreechingSliver(UUID ownerId) {
public ScreechingSliver(final ScreechingSliver card) {
public ScreechingSliver copy() {return new ScreechingSliver(this);
public class ScrybRanger extends CardImpl {
public ScrybRanger(UUID ownerId) {
public ScrybRanger(final ScrybRanger card) {
public ScrybRanger copy() {return new ScrybRanger(this);
public class SearchForTomorrow extends CardImpl {
public SearchForTomorrow(UUID ownerId) {
public SearchForTomorrow(final SearchForTomorrow card) {
public SearchForTomorrow copy() {return new SearchForTomorrow(this);
public class SedgeSliver extends CardImpl {
public SedgeSliver(UUID ownerId) {
public SedgeSliver(final SedgeSliver card) {
public SedgeSliver copy() {return new SedgeSliver(this);
public class SengirNosferatu extends CardImpl {
public SengirNosferatu(UUID ownerId) {
public SengirNosferatu(final SengirNosferatu card) {
public SengirNosferatu copy() {return new SengirNosferatu(this);
class SengirNosferatuBatToken extends Token {
SengirNosferatuBatToken() {
class ReturnSengirNosferatuEffect extends OneShotEffect {
public ReturnSengirNosferatuEffect() {
public ReturnSengirNosferatuEffect(final ReturnSengirNosferatuEffect effect) {
public ReturnSengirNosferatuEffect copy() {return new ReturnSengirNosferatuEffect(this);
public boolean apply(Game game, Ability source) {return false;return card.moveToZone(Zone.BATTLEFIELD, source.getSourceId(), game, false);return false;
public class SerraAvenger extends CardImpl {
public SerraAvenger(UUID ownerId) {
public SerraAvenger(final SerraAvenger card) {
public SerraAvenger copy() {return new SerraAvenger(this);
public CantCastSerraAvengerEffect() {
public CantCastSerraAvengerEffect(final CantCastSerraAvengerEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CantCastSerraAvengerEffect copy() {return new CantCastSerraAvengerEffect(this);
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;return new ShadowSliver(this);
public class SkulkingKnight extends CardImpl {
public SkulkingKnight(UUID ownerId) {
public SkulkingKnight(final SkulkingKnight card) {
public SkulkingKnight copy() {return new SkulkingKnight(this);
public class SlipstreamSerpent extends CardImpl {
public SlipstreamSerpent(UUID ownerId) {
public SlipstreamSerpent(final SlipstreamSerpent card) {
public SlipstreamSerpent copy() {return new SlipstreamSerpent(this);
public class Snapback extends CardImpl {
public Snapback(UUID ownerId) {
public Snapback(final Snapback card) {
public Snapback copy() {return new Snapback(this);
public class SpectralForce extends CardImpl {
public SpectralForce(UUID ownerId) {
public SpectralForce(final SpectralForce card) {
public SpectralForce copy() {return new SpectralForce(this);
class SpectralForceTriggeredAbility extends TriggeredAbilityImpl {
public SpectralForceTriggeredAbility() {
public SpectralForceTriggeredAbility(final SpectralForceTriggeredAbility ability) {
public SpectralForceTriggeredAbility copy() {return new SpectralForceTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return event.getSourceId().equals(this.getSourceId());
public boolean checkInterveningIfClause(Game game) {return defendingPlayerId != null && game.getBattlefield().countAll(filter, defendingPlayerId, game) < 1;
public String getRule() {return "Whenever {this} attacks, if defending player controls no black permanents, it doesn't untap during your next untap step.";
public class SpellBurst extends CardImpl {
public SpellBurst(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public SpellBurst(final SpellBurst card) {
public SpellBurst copy() {return new SpellBurst(this);
public class SpiketailDrakeling extends CardImpl {
public SpiketailDrakeling(UUID ownerId) {
public SpiketailDrakeling(final SpiketailDrakeling card) {
public SpiketailDrakeling copy() {return new SpiketailDrakeling(this);
public class SpinneretSliver extends CardImpl {
public SpinneretSliver(UUID ownerId) {
public SpinneretSliver(final SpinneretSliver card) {
public SpinneretSliver copy() {return new SpinneretSliver(this);
public class SpiritLoop extends CardImpl {
public SpiritLoop(UUID ownerId) {
public SpiritLoop(final SpiritLoop card) {
public SpiritLoop copy() {return new SpiritLoop(this);
public class SporesowerThallid extends CardImpl {
public SporesowerThallid(UUID ownerId) {
public SporesowerThallid(final SporesowerThallid card) {
public SporesowerThallid copy() {return new SporesowerThallid(this);
public class SpriteNoble extends CardImpl {
public SpriteNoble(UUID ownerId) {
public SpriteNoble(final SpriteNoble card) {
public SpriteNoble copy() {return new SpriteNoble(this);
public class Sprout extends CardImpl {
public Sprout(UUID ownerId) {
public Sprout(final Sprout card) {
public Sprout copy() {return new Sprout(this);
public class SquallLine extends CardImpl {
public SquallLine(UUID ownerId) {
public SquallLine(final SquallLine card) {
public SquallLine copy() {return new SquallLine(this);
public class StonebrowKrosanHero extends CardImpl {
public StonebrowKrosanHero(UUID ownerId) {
public StonebrowKrosanHero(final StonebrowKrosanHero card) {
public StonebrowKrosanHero copy() {return new StonebrowKrosanHero(this);
public class StonewoodInvocation extends CardImpl {
public StonewoodInvocation(UUID ownerId) {
public StonewoodInvocation(final StonewoodInvocation card) {
public StonewoodInvocation copy() {return new StonewoodInvocation(this);
public class StormcloudDjinn extends CardImpl {
public StormcloudDjinn(UUID ownerId) {
public StormcloudDjinn(final StormcloudDjinn card) {
public StormcloudDjinn copy() {return new StormcloudDjinn(this);
public class StrongholdOverseer extends CardImpl {
public StrongholdOverseer(UUID ownerId) {
public StrongholdOverseer(final StrongholdOverseer card) {
public StrongholdOverseer copy() {return new StrongholdOverseer(this);
public class StuffyDoll extends CardImpl {
public StuffyDoll(UUID ownerId) {
public StuffyDoll(final StuffyDoll card) {
public StuffyDoll copy() {return new StuffyDoll(this);
class StuffyDollTriggeredAbility extends TriggeredAbilityImpl {
public StuffyDollTriggeredAbility() {
public StuffyDollTriggeredAbility(final StuffyDollTriggeredAbility effect) {
public StuffyDollTriggeredAbility copy() {return new StuffyDollTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt damage, " + super.getRule();return new StuffyDollGainLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class SuddenDeath extends CardImpl {
public SuddenDeath(UUID ownerId) {
public SuddenDeath(final SuddenDeath card) {
public SuddenDeath copy() {return new SuddenDeath(this);
public class SulfurousBlast extends CardImpl {
public SulfurousBlast(UUID ownerId) {
public SulfurousBlast(final SulfurousBlast card) {
public SulfurousBlast copy() {return new SulfurousBlast(this);
public class Swarmyard extends CardImpl {
public Swarmyard(UUID ownerId) {
public Swarmyard(final Swarmyard card) {
public Swarmyard copy() {return new Swarmyard(this);
public class TectonicFiend extends CardImpl {
public TectonicFiend(UUID ownerId) {
public TectonicFiend(final TectonicFiend card) {
public TectonicFiend copy() {return new TectonicFiend(this);
public class TeferiMageOfZhalfir extends CardImpl {
public TeferiMageOfZhalfir(UUID ownerId) {
public TeferiMageOfZhalfir(final TeferiMageOfZhalfir card) {
public TeferiMageOfZhalfir copy() {return new TeferiMageOfZhalfir(this);
class TeferiMageOfZhalfirAddFlashEffect extends ContinuousEffectImpl {
public TeferiMageOfZhalfirAddFlashEffect() {
public TeferiMageOfZhalfirAddFlashEffect(final TeferiMageOfZhalfirAddFlashEffect effect) {
public TeferiMageOfZhalfirAddFlashEffect copy() {return new TeferiMageOfZhalfirAddFlashEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
TeferiMageOfZhalfirReplacementEffect() {
TeferiMageOfZhalfirReplacementEffect(final TeferiMageOfZhalfirReplacementEffect effect) {
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can cast spells only any time you could cast a sorcery (" + mageObject.getIdName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return !game.canPlaySorcery(event.getPlayerId());return false;
public boolean apply(Game game, Ability source) {return true;
public TeferiMageOfZhalfirReplacementEffect copy() {return new TeferiMageOfZhalfirReplacementEffect(this);
public class TelekineticSliver extends CardImpl {
public TelekineticSliver(UUID ownerId) {
public TelekineticSliver(final TelekineticSliver card) {
public TelekineticSliver copy() {return new TelekineticSliver(this);
public class TemporalEddy extends CardImpl {
public TemporalEddy(UUID ownerId) {
public TemporalEddy(final TemporalEddy card) {
public TemporalEddy copy() {return new TemporalEddy(this);
public class TemporalIsolation extends CardImpl {
public TemporalIsolation(UUID ownerId) {
public TemporalIsolation(final TemporalIsolation card) {
public TemporalIsolation copy() {return new TemporalIsolation(this);
public class ThallidGerminator extends CardImpl {
public ThallidGerminator(UUID ownerId) {
public ThallidGerminator(final ThallidGerminator card) {
public ThallidGerminator copy() {return new ThallidGerminator(this);
public class ThallidShellDweller extends CardImpl {
public ThallidShellDweller(UUID ownerId) {
public ThallidShellDweller(final ThallidShellDweller card) {
public ThallidShellDweller copy() {return new ThallidShellDweller(this);
public class TheloniteHermit extends CardImpl {
public TheloniteHermit(UUID ownerId) {
public TheloniteHermit(final TheloniteHermit card) {
public TheloniteHermit copy() {return new TheloniteHermit(this);
public class ThrillOfTheHunt extends CardImpl {
public ThrillOfTheHunt(UUID ownerId) {
public ThrillOfTheHunt(final ThrillOfTheHunt card) {
public ThrillOfTheHunt copy() {return new ThrillOfTheHunt(this);
public class ThunderTotem extends CardImpl {
public ThunderTotem(UUID ownerId) {
public ThunderTotem(final ThunderTotem card) {
public ThunderTotem copy() {return new ThunderTotem(this);
private class ThunderTotemToken extends Token {
ThunderTotemToken() {
public class TivadarOfThorn extends CardImpl {
public TivadarOfThorn(UUID ownerId) {
public TivadarOfThorn(final TivadarOfThorn card) {
public TivadarOfThorn copy() {return new TivadarOfThorn(this);
public class TraitorsClutch extends CardImpl {
public TraitorsClutch(UUID ownerId) {
public TraitorsClutch(final TraitorsClutch card) {
public TraitorsClutch copy() {return new TraitorsClutch(this);
public class TrespasserIlVec extends CardImpl {
public TrespasserIlVec(UUID ownerId) {
public TrespasserIlVec(final TrespasserIlVec card) {
public TrespasserIlVec copy() {return new TrespasserIlVec(this);
public class Trickbind extends CardImpl {
public Trickbind(UUID ownerId) {
public Trickbind(final Trickbind card) {
public Trickbind copy() {return new Trickbind(this);
class TrickbindCounterEffect extends OneShotEffect {
public TrickbindCounterEffect() {
public TrickbindCounterEffect(final TrickbindCounterEffect effect) {
public TrickbindCounterEffect copy() {return new TrickbindCounterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class TrickbindCantActivateEffect extends RestrictionEffect {
public TrickbindCantActivateEffect() {
public TrickbindCantActivateEffect(final TrickbindCantActivateEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return getTargetPointer().getFirst(game, source).equals(permanent.getId());
public boolean canUseActivatedAbilities(Permanent permanent, Ability source, Game game) {return false;
public TrickbindCantActivateEffect copy() {return new TrickbindCantActivateEffect(this);
public class Triskelavus extends CardImpl {
public Triskelavus(UUID ownerId) {
public Triskelavus(final Triskelavus card) {
public Triskelavus copy() {return new Triskelavus(this);
class TriskelaviteToken extends Token {
public TriskelaviteToken() {
public class TrompTheDomains extends CardImpl {
public TrompTheDomains(UUID ownerId) {
public TrompTheDomains(final TrompTheDomains card) {
public TrompTheDomains copy() {return new TrompTheDomains(this);
public class UrborgSyphonMage extends CardImpl {
public UrborgSyphonMage(UUID ownerId) {
public UrborgSyphonMage(final UrborgSyphonMage card) {
public UrborgSyphonMage copy() {return new UrborgSyphonMage(this);
class UrborgSyphonMageEffect extends OneShotEffect {
public UrborgSyphonMageEffect() {
public UrborgSyphonMageEffect(final UrborgSyphonMageEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public UrborgSyphonMageEffect copy() {return new UrborgSyphonMageEffect(this);
public class UrzasFactory extends CardImpl {
public UrzasFactory(UUID ownerId) {
public UrzasFactory(final UrzasFactory card) {
public UrzasFactory copy() {return new UrzasFactory(this);
class AssemblyWorkerToken extends Token {
AssemblyWorkerToken() {
public class VampiricSliver extends CardImpl {
public VampiricSliver(UUID ownerId) {
public VampiricSliver(final VampiricSliver card) {
public VampiricSliver copy() {return new VampiricSliver(this);
public class VensersSliver extends CardImpl {
public VensersSliver(UUID ownerId) {
public VensersSliver(final VensersSliver card) {
public VensersSliver copy() {return new VensersSliver(this);
public class VerdantEmbrace extends CardImpl {
public VerdantEmbrace(UUID ownerId) {
public VerdantEmbrace(final VerdantEmbrace card) {
public VerdantEmbrace copy() {return new VerdantEmbrace(this);
public class Vesuva extends CardImpl {
public Vesuva(UUID ownerId) {
public Vesuva(final Vesuva card) {
public Vesuva copy() {return new Vesuva(this);
public class ViashinoBladescout extends CardImpl {
public ViashinoBladescout(UUID ownerId) {
public ViashinoBladescout(final ViashinoBladescout card) {
public ViashinoBladescout copy() {return new ViashinoBladescout(this);
public class VisceridDeepwalker extends CardImpl {
public VisceridDeepwalker(UUID ownerId) {
public VisceridDeepwalker(final VisceridDeepwalker card) {
public VisceridDeepwalker copy() {return new VisceridDeepwalker(this);
public class ViscidLemures extends CardImpl {
public ViscidLemures(UUID ownerId) {
public ViscidLemures(final ViscidLemures card) {
public ViscidLemures copy() {return new ViscidLemures(this);
public class VolcanicAwakening extends CardImpl {
public VolcanicAwakening(UUID ownerId) {
public VolcanicAwakening(final VolcanicAwakening card) {
public VolcanicAwakening copy() {return new VolcanicAwakening(this);
public class WalkTheAeons extends CardImpl {
public WalkTheAeons(UUID ownerId) {
public WalkTheAeons(final WalkTheAeons card) {
public WalkTheAeons copy() {return new WalkTheAeons(this);
class ExtraTurnEffect extends OneShotEffect {
public ExtraTurnEffect() {
public ExtraTurnEffect(final ExtraTurnEffect effect) {
public ExtraTurnEffect copy() {return new ExtraTurnEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class WatcherSliver extends CardImpl {
public WatcherSliver(UUID ownerId) {
public WatcherSliver(final WatcherSliver card) {
public WatcherSliver copy() {return new WatcherSliver(this);
public class WheelOfFate extends CardImpl {
public WheelOfFate(UUID ownerId) {
public WheelOfFate(final WheelOfFate card) {
public WheelOfFate copy() {return new WheelOfFate(this);
public class WipeAway extends CardImpl {
public WipeAway(UUID ownerId) {
public WipeAway(final WipeAway card) {
public WipeAway copy() {return new WipeAway(this);
public class WormwoodDryad extends CardImpl {
public WormwoodDryad(UUID ownerId) {
public WormwoodDryad(final WormwoodDryad card) {
public WormwoodDryad copy() {return new WormwoodDryad(this);
public class Wurmcalling extends CardImpl {
public Wurmcalling(UUID ownerId) {
public Wurmcalling(final Wurmcalling card) {
public Wurmcalling copy() {return new Wurmcalling(this);
class WurmcallingEffect extends OneShotEffect {
public WurmcallingEffect() {
public WurmcallingEffect(WurmcallingEffect ability) {
public boolean apply(Game game, Ability source) {return true;
public WurmcallingEffect copy() {return new WurmcallingEffect(this);
class WurmToken extends Token {
public WurmToken() {
public class ZealotIlVec extends CardImpl {
public ZealotIlVec(UUID ownerId) {
public ZealotIlVec(final ZealotIlVec card) {
public ZealotIlVec copy() {return new ZealotIlVec(this);
public class AkromaAngelOfWrath extends CardImpl {
public AkromaAngelOfWrath(UUID ownerId) {
public AkromaAngelOfWrath(final AkromaAngelOfWrath card) {
public AkromaAngelOfWrath copy() {return new AkromaAngelOfWrath(this);
public class CelestialDawn extends CardImpl {
public CelestialDawn(UUID ownerId) {
public CelestialDawn(final CelestialDawn card) {
public CelestialDawn copy() {return new CelestialDawn(this);
class CelestialDawnToPlainsEffect extends ContinuousEffectImpl {
CelestialDawnToPlainsEffect() {
CelestialDawnToPlainsEffect(final CelestialDawnToPlainsEffect effect) {
public boolean apply(Game game, Ability source) {return false;
public CelestialDawnToPlainsEffect copy() {return new CelestialDawnToPlainsEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == Layer.TypeChangingEffects_4;
class CelestialDawnToWhiteEffect extends ContinuousEffectImpl {
public CelestialDawnToWhiteEffect() {
public boolean apply(Game game, Ability source) {return true;return false;
public CelestialDawnToWhiteEffect copy() {return new CelestialDawnToWhiteEffect(this);
private CelestialDawnToWhiteEffect(CelestialDawnToWhiteEffect effect) {
class CelestialDawnSpendAnyManaEffect extends AsThoughEffectImpl implements AsThoughManaEffect {
public CelestialDawnSpendAnyManaEffect() {
public CelestialDawnSpendAnyManaEffect(final CelestialDawnSpendAnyManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CelestialDawnSpendAnyManaEffect copy() {return new CelestialDawnSpendAnyManaEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return affectedControllerId.equals(source.getControllerId());
public ManaType getAsThoughManaType(ManaType manaType, ManaPoolItem mana, UUID affectedControllerId, Ability source, Game game) {return ManaType.WHITE;return null;
class CelestialDawnSpendColorlessManaEffect extends AsThoughEffectImpl implements AsThoughManaEffect {
public CelestialDawnSpendColorlessManaEffect() {
public CelestialDawnSpendColorlessManaEffect(final CelestialDawnSpendColorlessManaEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CelestialDawnSpendColorlessManaEffect copy() {return new CelestialDawnSpendColorlessManaEffect(this);
public boolean applies(UUID objectId, Ability source, UUID affectedControllerId, Game game) {return affectedControllerId.equals(source.getControllerId());
public ManaType getAsThoughManaType(ManaType manaType, ManaPoolItem mana, UUID affectedControllerId, Ability source, Game game) {return null;return manaType;
public class CoalitionVictory extends CardImpl {
public CoalitionVictory(UUID ownerId) {
public CoalitionVictory(final CoalitionVictory card) {
public CoalitionVictory copy() {return new CoalitionVictory(this);
class CoalitionVictoryCondition implements Condition {
public boolean apply(Game game, Ability source) {return false;return false;return false;return false;return false;return false;return false;return false;return false;return game.getBattlefield().count(CoalitionVictory.filterGreen, source.getSourceId(), source.getControllerId(), game) >= 1;
public class Darkness extends CardImpl {
public Darkness(UUID ownerId) {
public Darkness(final Darkness card) {
public Darkness copy() {return new Darkness(this);
public class Desert extends CardImpl {
public Desert(UUID ownerId) {
public Desert(final Desert card) {
public Desert copy() {return new Desert(this);
public class Dragonstorm extends CardImpl {
public Dragonstorm(UUID ownerId) {
public Dragonstorm(final Dragonstorm card) {
public Dragonstorm copy() {return new Dragonstorm(this);
public class EssenceSliver extends CardImpl {
public EssenceSliver(UUID ownerId) {
public EssenceSliver(final EssenceSliver card) {
public EssenceSliver copy() {return new EssenceSliver(this);
class DealsDamageAllTriggeredAbility extends TriggeredAbilityImpl {
public DealsDamageAllTriggeredAbility() {
public DealsDamageAllTriggeredAbility(final DealsDamageAllTriggeredAbility ability) {
public DealsDamageAllTriggeredAbility copy() {return new DealsDamageAllTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a Sliver deals damage, its controller" + super.getRule();return new EssenceSliverGainThatMuchLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FacelessButcher extends CardImpl {
public FacelessButcher(UUID ownerId) {
public FacelessButcher(final FacelessButcher card) {
public FacelessButcher copy() {return new FacelessButcher(this);return new FeldonsCane(this);return new FeldonsCaneEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FieryTemper extends CardImpl {
public FieryTemper(UUID ownerId) {
public FieryTemper(final FieryTemper card) {
public FieryTemper copy() {return new FieryTemper(this);
public class FireWhip extends CardImpl {
public FireWhip(UUID ownerId) {
public FireWhip(final FireWhip card) {
public FireWhip copy() {return new FireWhip(this);
public class FlyingMen extends CardImpl {
public FlyingMen(UUID ownerId) {
public FlyingMen(final FlyingMen card) {
public FlyingMen copy() {return new FlyingMen(this);
public class FuneralCharm extends CardImpl {
public FuneralCharm(UUID ownerId) {
public FuneralCharm(final FuneralCharm card) {
public FuneralCharm copy() {return new FuneralCharm(this);
public class GaeasBlessing extends CardImpl {
public GaeasBlessing(UUID ownerId) {
public GaeasBlessing(final GaeasBlessing card) {
public GaeasBlessing copy() {return new GaeasBlessing(this);
class GaeasBlessingEffect extends OneShotEffect {
public GaeasBlessingEffect() {
public GaeasBlessingEffect(final GaeasBlessingEffect effect) {
public GaeasBlessingEffect copy() {return new GaeasBlessingEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class GaeasBlessingTarget extends TargetCard {
public GaeasBlessingTarget() {
public GaeasBlessingTarget(final GaeasBlessingTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return filter.match(card, game);return false;
public GaeasBlessingTarget copy() {return new GaeasBlessingTarget(this);
class GaeasBlessingTriggeredAbility extends ZoneChangeTriggeredAbility {
public GaeasBlessingTriggeredAbility() {
public GaeasBlessingTriggeredAbility(final GaeasBlessingTriggeredAbility ability) {
public GaeasBlessingTriggeredAbility copy() {return new GaeasBlessingTriggeredAbility(this);
public String getRule() {return "When {this} is put into your graveyard from your library, shuffle your graveyard into your library.";
class GaeasBlessingGraveToLibraryEffect extends OneShotEffect {
public GaeasBlessingGraveToLibraryEffect() {
public GaeasBlessingGraveToLibraryEffect(final GaeasBlessingGraveToLibraryEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GaeasBlessingGraveToLibraryEffect copy() {return new GaeasBlessingGraveToLibraryEffect(this);
public class GemstoneMine extends CardImpl {
public GemstoneMine(UUID ownerId) {
public GemstoneMine(final GemstoneMine card) {
public GemstoneMine copy() {return new GemstoneMine(this);
public class GhostShip extends CardImpl {
public GhostShip(UUID ownerId) {
public GhostShip(final GhostShip card) {
public GhostShip copy() {return new GhostShip(this);
public class GrinningTotem extends CardImpl {
public GrinningTotem(UUID ownerId) {
public GrinningTotem(final GrinningTotem card) {
public GrinningTotem copy() {return new GrinningTotem(this);
class GrinningTotemSearchAndExileEffect extends OneShotEffect {
public GrinningTotemSearchAndExileEffect() {
public GrinningTotemSearchAndExileEffect(final GrinningTotemSearchAndExileEffect effect) {
public GrinningTotemSearchAndExileEffect copy() {return new GrinningTotemSearchAndExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class GrinningTotemMayPlayEffect extends AsThoughEffectImpl {
public GrinningTotemMayPlayEffect() {
public GrinningTotemMayPlayEffect(final GrinningTotemMayPlayEffect effect) {
public GrinningTotemMayPlayEffect copy() {return new GrinningTotemMayPlayEffect(this);
public boolean isInactive(Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return true;
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return source.getControllerId().equals(affectedControllerId)
class GrinningTotemDelayedTriggeredAbility extends DelayedTriggeredAbility {
public GrinningTotemDelayedTriggeredAbility(UUID exileZoneId) {
public GrinningTotemDelayedTriggeredAbility(final GrinningTotemDelayedTriggeredAbility ability) {
public boolean checkInterveningIfClause(Game game) {return exileZone != null && exileZone.getCards(game).size() > 0;
public GrinningTotemDelayedTriggeredAbility copy() {return new GrinningTotemDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return game.getActivePlayerId().equals(this.getControllerId());
public String getRule() {return "At the beginning of your next upkeep, if you haven't played it, " + modes.getText();
class GrinningTotemPutIntoGraveyardEffect extends OneShotEffect {
public GrinningTotemPutIntoGraveyardEffect(UUID exileZoneId) {
public GrinningTotemPutIntoGraveyardEffect(final GrinningTotemPutIntoGraveyardEffect effect) {
public GrinningTotemPutIntoGraveyardEffect copy() {return new GrinningTotemPutIntoGraveyardEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(zone, Zone.EXILED, Zone.GRAVEYARD, source, game);return false;
public class JasmineBoreal extends CardImpl {
public JasmineBoreal(UUID ownerId) {
public JasmineBoreal(final JasmineBoreal card) {
public JasmineBoreal copy() {return new JasmineBoreal(this);
public class KoboldTaskmaster extends CardImpl {
public KoboldTaskmaster(UUID ownerId) {
public KoboldTaskmaster(final KoboldTaskmaster card) {
public KoboldTaskmaster copy() {return new KoboldTaskmaster(this);return new MysticEnforcer(this);
public class Pandemonium extends CardImpl {
public Pandemonium(UUID ownerId) {
public Pandemonium(final Pandemonium card) {
public void adjustTargets(Ability ability, Game game) {
public Pandemonium copy() {return new Pandemonium(this);
class PandemoniumEffect extends OneShotEffect {
public PandemoniumEffect() {
public PandemoniumEffect(final PandemoniumEffect effect) {
public PandemoniumEffect copy() {return new PandemoniumEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Pendelhaven extends CardImpl {
public Pendelhaven(UUID ownerId) {
public Pendelhaven(final Pendelhaven card) {
public Pendelhaven copy() {return new Pendelhaven(this);
public class ProdigalSorcerer extends CardImpl {
public ProdigalSorcerer(UUID ownerId) {
public ProdigalSorcerer(final ProdigalSorcerer card) {
public ProdigalSorcerer copy() {return new ProdigalSorcerer(this);
public class PsionicBlast extends CardImpl {
public PsionicBlast(UUID ownerId) {
public PsionicBlast(final PsionicBlast card) {
public PsionicBlast copy() {return new PsionicBlast(this);
class PsionicBlastEffect extends OneShotEffect {
PsionicBlastEffect() {
PsionicBlastEffect(final PsionicBlastEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public PsionicBlastEffect copy() {return new PsionicBlastEffect(this);return new ShadowmageInfiltrator(this);
public class SolkanarTheSwampKing extends CardImpl {
public SolkanarTheSwampKing(UUID ownerId) {
public SolkanarTheSwampKing(final SolkanarTheSwampKing card) {
public SolkanarTheSwampKing copy() {return new SolkanarTheSwampKing(this);
class SolkanarTheSwampKingAbility extends TriggeredAbilityImpl {
public SolkanarTheSwampKingAbility() {
public SolkanarTheSwampKingAbility(final SolkanarTheSwampKingAbility ability) {
public SolkanarTheSwampKingAbility copy() {return new SolkanarTheSwampKingAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).isBlack();
public String getRule() {return "Whenever a player casts a black spell, you gain 1 life.";
public class SoulCollector extends CardImpl {
public SoulCollector(UUID ownerId) {
public SoulCollector(final SoulCollector card) {
public SoulCollector copy() {return new SoulCollector(this);
public class SpikeFeeder extends CardImpl {
public SpikeFeeder(UUID ownerId) {
public SpikeFeeder(final SpikeFeeder card) {
public SpikeFeeder copy() {return new SpikeFeeder(this);
public class Squire extends CardImpl {
public Squire(UUID ownerId) {
public Squire(final Squire card) {
public Squire copy() {return new Squire(this);
public class StormscapeFamiliar extends CardImpl {
public StormscapeFamiliar(UUID ownerId) {
public StormscapeFamiliar(final StormscapeFamiliar card) {
public StormscapeFamiliar copy() {return new StormscapeFamiliar(this);
public class Stupor extends CardImpl {
public Stupor(UUID ownerId) {
public Stupor(final Stupor card) {
public Stupor copy() {return new Stupor(this);
public class SuqAtaLancer extends CardImpl {
public SuqAtaLancer(UUID ownerId) {
public SuqAtaLancer(final SuqAtaLancer card) {
public SuqAtaLancer copy() {return new SuqAtaLancer(this);
public class TeferisMoat extends CardImpl {
public TeferisMoat(UUID ownerId) {
public TeferisMoat(final TeferisMoat card) {
public TeferisMoat copy() {return new TeferisMoat(this);
class TeferisMoatRestrictionEffect extends RestrictionEffect {
TeferisMoatRestrictionEffect(){
TeferisMoatRestrictionEffect(final TeferisMoatRestrictionEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return chosenColor != null &&
public boolean canAttack(UUID defenderId, Ability source, Game game) {return !defenderId.equals(source.getControllerId());
public TeferisMoatRestrictionEffect copy() {return new TeferisMoatRestrictionEffect(this);
public class Thallid extends CardImpl {
public Thallid(UUID ownerId) {
public Thallid(final Thallid card) {
public Thallid copy() {return new Thallid(this);
public class TormodsCrypt extends CardImpl {
public TormodsCrypt(UUID ownerId) {
public TormodsCrypt(final TormodsCrypt card) {
public TormodsCrypt copy() {return new TormodsCrypt(this);
public class TwistedAbomination extends CardImpl {
public TwistedAbomination(UUID ownerId) {
public TwistedAbomination(final TwistedAbomination card) {
public TwistedAbomination copy() {return new TwistedAbomination(this);
public class Undertaker extends CardImpl {
public Undertaker(UUID ownerId) {
public Undertaker(final Undertaker card) {
public Undertaker copy() {return new Undertaker(this);
public class ZhalfirinCommander extends CardImpl {
public ZhalfirinCommander(UUID ownerId) {
public ZhalfirinCommander(final ZhalfirinCommander card) {
public ZhalfirinCommander copy() {return new ZhalfirinCommander(this);
public class Accelerate extends CardImpl {
public Accelerate(UUID ownerId) {
public Accelerate(final Accelerate card) {
public Accelerate copy() {return new Accelerate(this);
public class AcornHarvest extends CardImpl {
public AcornHarvest(UUID ownerId) {
public AcornHarvest(final AcornHarvest card) {
public AcornHarvest copy() {return new AcornHarvest(this);
public class AngelOfRetribution extends CardImpl {
public AngelOfRetribution(UUID ownerId) {
public AngelOfRetribution(final AngelOfRetribution card) {
public AngelOfRetribution copy() {return new AngelOfRetribution(this);
public class Aquamoeba extends CardImpl {
public Aquamoeba(UUID ownerId) {
public Aquamoeba(final Aquamoeba card) {
public Aquamoeba copy() {return new Aquamoeba(this);
public class ArrogantWurm extends CardImpl {
public ArrogantWurm(UUID ownerId) {
public ArrogantWurm(final ArrogantWurm card) {
public ArrogantWurm copy() {return new ArrogantWurm(this);
public class AvenTrooper extends CardImpl {
public AvenTrooper(UUID ownerId) {
public AvenTrooper(final AvenTrooper card) {
public AvenTrooper copy() {return new AvenTrooper(this);
public class BalshanCollaborator extends CardImpl {
public BalshanCollaborator(UUID ownerId) {
public BalshanCollaborator(final BalshanCollaborator card) {
public BalshanCollaborator copy() {return new BalshanCollaborator(this);
public class BalthorTheStout extends CardImpl {
public BalthorTheStout(UUID ownerId) {
public BalthorTheStout(final BalthorTheStout card) {
public BalthorTheStout copy() {return new BalthorTheStout(this);
public class BarbarianOutcast extends CardImpl {
public BarbarianOutcast(UUID ownerId) {
public BarbarianOutcast(final BarbarianOutcast card) {
public BarbarianOutcast copy() {return new BarbarianOutcast(this);
public class BaskingRootwalla extends CardImpl {
public BaskingRootwalla(UUID ownerId) {
public BaskingRootwalla(final BaskingRootwalla card) {
public BaskingRootwalla copy() {return new BaskingRootwalla(this);
public class BoneshardSlasher extends CardImpl {
public BoneshardSlasher(UUID ownerId) {
public BoneshardSlasher(final BoneshardSlasher card) {
public BoneshardSlasher copy() {return new BoneshardSlasher(this);
public class CabalRitual extends CardImpl {
public CabalRitual(UUID ownerId) {
public CabalRitual(final CabalRitual card) {
public CabalRitual copy() {return new CabalRitual(this);
public class CabalSurgeon extends CardImpl {
public CabalSurgeon(UUID ownerId) {
public CabalSurgeon(final CabalSurgeon card) {
public CabalSurgeon copy() {return new CabalSurgeon(this);
public class CabalTorturer extends CardImpl {
public CabalTorturer(UUID ownerId) {
public CabalTorturer(final CabalTorturer card) {
public CabalTorturer copy() {return new CabalTorturer(this);
public class CentaurChieftain extends CardImpl {
public CentaurChieftain(UUID ownerId) {
public CentaurChieftain(final CentaurChieftain card) {
public CentaurChieftain copy() {return new CentaurChieftain(this);
public class CentaurVeteran extends CardImpl {
public CentaurVeteran(UUID ownerId) {
public CentaurVeteran(final CentaurVeteran card) {
public CentaurVeteran copy() {return new CentaurVeteran(this);
public class CephalidAristocrat extends CardImpl {
public CephalidAristocrat(UUID ownerId) {
public CephalidAristocrat(final CephalidAristocrat card) {
public CephalidAristocrat copy() {return new CephalidAristocrat(this);
public class CephalidVandal extends CardImpl {
public CephalidVandal(UUID ownerId) {
public CephalidVandal(final CephalidVandal card) {
public CephalidVandal copy() {return new CephalidVandal(this);
class CephalidVandalEffect extends OneShotEffect {
public CephalidVandalEffect() {
public CephalidVandalEffect(final CephalidVandalEffect effect) {
public CephalidVandalEffect copy() {return new CephalidVandalEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ChainerDementiaMaster extends CardImpl {
public ChainerDementiaMaster(UUID ownerId) {
public ChainerDementiaMaster(final ChainerDementiaMaster card) {
public ChainerDementiaMaster copy() {return new ChainerDementiaMaster(this);
class ChainerDementiaMasterEffect extends OneShotEffect {
ChainerDementiaMasterEffect() {
ChainerDementiaMasterEffect(final ChainerDementiaMasterEffect effect) {
public ChainerDementiaMasterEffect copy() {return new ChainerDementiaMasterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ChurningEddy extends CardImpl {
public ChurningEddy(UUID ownerId) {
public ChurningEddy(final ChurningEddy card) {
public ChurningEddy copy() {return new ChurningEddy(this);
public class CircularLogic extends CardImpl {
public CircularLogic(UUID ownerId) {
public CircularLogic(final CircularLogic card) {
public CircularLogic copy() {return new CircularLogic(this);
class CircularLogicCounterUnlessPaysEffect extends OneShotEffect {
public CircularLogicCounterUnlessPaysEffect() {
public CircularLogicCounterUnlessPaysEffect(final CircularLogicCounterUnlessPaysEffect effect) {
public CircularLogicCounterUnlessPaysEffect copy() {return new CircularLogicCounterUnlessPaysEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(source.getFirstTarget(), source.getSourceId(), game);return false;
public String getText(Mode mode) {return "Counter target spell unless its controller pays {1} for each card in your graveyard";
public class CleansingMeditation extends CardImpl {
public CleansingMeditation(UUID ownerId) {
public CleansingMeditation(final CleansingMeditation card) {
public CleansingMeditation copy() {return new CleansingMeditation(this);
class CleansingMeditationEffect extends OneShotEffect {
public CleansingMeditationEffect() {this.staticText = "Destroy all enchantments.<br>Threshold - If seven or more cards are in your graveyard, instead destroy all enchantments, then return all cards in your graveyard destroyed this way to the battlefield.";
public CleansingMeditationEffect(final CleansingMeditationEffect effect) {
public CleansingMeditationEffect copy() {return new CleansingMeditationEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Compulsion extends CardImpl {
public Compulsion(UUID ownerId) {
public Compulsion(final Compulsion card) {
public Compulsion copy() {return new Compulsion(this);
public class CoralNet extends CardImpl {
public CoralNet(UUID ownerId) {
public CoralNet(final CoralNet card) {
public CoralNet copy() {return new CoralNet(this);
public class CracklingClub extends CardImpl {
public CracklingClub(UUID ownerId) {
public CracklingClub(final CracklingClub card) {
public CracklingClub copy() {return new CracklingClub(this);
public class CripplingFatigue extends CardImpl {
public CripplingFatigue(UUID ownerId) {
public CripplingFatigue(final CripplingFatigue card) {
public CripplingFatigue copy() {return new CripplingFatigue(this);
public class DawnOfTheDead extends CardImpl {
public DawnOfTheDead(UUID ownerId) {
public DawnOfTheDead(final DawnOfTheDead card) {
public DawnOfTheDead copy() {return new DawnOfTheDead(this);
class DawnOfTheDeadEffect extends OneShotEffect {
public DawnOfTheDeadEffect() {this.staticText = "return target creature card from your graveyard to the battlefield. That creature gains haste until end of turn. Exile it at the beginning of the next end step";
public DawnOfTheDeadEffect(final DawnOfTheDeadEffect effect) {
public DawnOfTheDeadEffect copy() {return new DawnOfTheDeadEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DeepAnalysis extends CardImpl {
public DeepAnalysis(UUID ownerId) {
public DeepAnalysis(final DeepAnalysis card) {
public DeepAnalysis copy() {return new DeepAnalysis(this);
public class DevastatingDreams extends CardImpl {
public DevastatingDreams(UUID ownerId) {
public DevastatingDreams(final DevastatingDreams card) {
public DevastatingDreams copy() {return new DevastatingDreams(this);
class DevastatingDreamsAdditionalCost extends VariableCostImpl {
DevastatingDreamsAdditionalCost() {
DevastatingDreamsAdditionalCost(final DevastatingDreamsAdditionalCost cost) {
public DevastatingDreamsAdditionalCost copy() {return new DevastatingDreamsAdditionalCost(this);
public int getMaxValue(Ability source, Game game) {return controller.getHand().size();return 0;
public Cost getFixedCostsFromAnnouncedValue(int xValue) {return new DiscardTargetCost(target, true);
public class DwellOnThePast extends CardImpl {
public DwellOnThePast(UUID ownerId) {
public DwellOnThePast(final DwellOnThePast card) {
public DwellOnThePast copy() {return new DwellOnThePast(this);
class DwellOnThePastEffect extends OneShotEffect {
public DwellOnThePastEffect() {
public DwellOnThePastEffect(final DwellOnThePastEffect effect) {
public DwellOnThePastEffect copy() {return new DwellOnThePastEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class DwellOnThePastTarget extends TargetCard {
public DwellOnThePastTarget() {
public DwellOnThePastTarget(final DwellOnThePastTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return filter.match(card, game);return false;
public DwellOnThePastTarget copy() {return new DwellOnThePastTarget(this);
public class EnslavedDwarf extends CardImpl {
public EnslavedDwarf(UUID ownerId) {
public EnslavedDwarf(final EnslavedDwarf card) {
public EnslavedDwarf copy() {return new EnslavedDwarf(this);
public class FarWanderings extends CardImpl {
public FarWanderings(UUID ownerId) {
public FarWanderings(final FarWanderings card) {
public FarWanderings copy() {return new FarWanderings(this);
public class FlashOfDefiance extends CardImpl {
public FlashOfDefiance(UUID ownerId) {
public FlashOfDefiance(final FlashOfDefiance card) {
public FlashOfDefiance copy() {return new FlashOfDefiance(this);return new FranticPurification(this);return new Gloomdrifter(this);
public class HydromorphGuardian extends CardImpl {
public HydromorphGuardian(UUID ownerId) {
public HydromorphGuardian(final HydromorphGuardian card) {
public HydromorphGuardian copy() {return new HydromorphGuardian(this);
public class HydromorphGull extends CardImpl {
public HydromorphGull(UUID ownerId) {
public HydromorphGull(final HydromorphGull card) {
public HydromorphGull copy() {return new HydromorphGull(this);
public class Hypochondria extends CardImpl {
public Hypochondria(UUID ownerId) {
public Hypochondria(final Hypochondria card) {
public Hypochondria copy() {return new Hypochondria(this);
public class Ichorid extends CardImpl {
public Ichorid(UUID ownerId) {
public Ichorid(final Ichorid card) {
public Ichorid copy() {return new Ichorid(this);
class IchoridTriggerdAbility extends BeginningOfUpkeepTriggeredAbility{
public IchoridTriggerdAbility(FilterCard filter){
public IchoridTriggerdAbility(IchoridTriggerdAbility ability) {
public BeginningOfUpkeepTriggeredAbility copy() {return new IchoridTriggerdAbility(this);
public boolean checkInterveningIfClause(Game game) {return super.checkInterveningIfClause(game);return false;
public String getRule() {return "At the beginning of your upkeep, if {source} is in your graveyard, you may exile a black creature card other than {source} from your graveyard. If you do, return {source} to the battlefield.";
public class Insist extends CardImpl {
public Insist(UUID ownerId) {
public Insist(final Insist card) {
public Insist copy() {return new Insist(this);
InsistEffect() {
InsistEffect(final InsistEffect effect) {
public InsistEffect copy() {return new InsistEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "This spell can't be countered (" + sourceObject.getName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.COUNTER;
public boolean applies(GameEvent event, Ability source, Game game) {return spell != null && watcher != null && watcher.isUncounterable(spell.getId());
class InsistWatcher extends Watcher {
InsistWatcher() {
InsistWatcher(final InsistWatcher watcher) {
public InsistWatcher copy() {return new InsistWatcher(this);
public void watch(GameEvent event, Game game) {
public boolean isUncounterable(UUID spellId) {return spellId.equals(uncounterableSpell);
public void setReady() {
public class InvigoratingFalls extends CardImpl {
public InvigoratingFalls(UUID ownerId) {
public InvigoratingFalls(final InvigoratingFalls card) {
public InvigoratingFalls copy() {return new InvigoratingFalls(this);
public class KamahlsSledge extends CardImpl {
public KamahlsSledge(UUID ownerId) {
public KamahlsSledge(final KamahlsSledge card) {
public KamahlsSledge copy() {return new KamahlsSledge(this);
public class KrosanConstrictor extends CardImpl {
public KrosanConstrictor(UUID ownerId) {
public KrosanConstrictor(final KrosanConstrictor card) {
public KrosanConstrictor copy() {return new KrosanConstrictor(this);
public class KrosanRestorer extends CardImpl {
public KrosanRestorer(UUID ownerId) {
public KrosanRestorer(final KrosanRestorer card) {
public KrosanRestorer copy() {return new KrosanRestorer(this);
public class LaquatussChampion extends CardImpl {
public LaquatussChampion(UUID ownerId) {
public LaquatussChampion(final LaquatussChampion card) {
public LaquatussChampion copy() {return new LaquatussChampion(this);
class LaquatussChampionEntersBattlefieldTriggeredAbility extends EntersBattlefieldTriggeredAbility implements AdjustingSourceCosts {
public LaquatussChampionEntersBattlefieldTriggeredAbility() {
public LaquatussChampionEntersBattlefieldTriggeredAbility(LaquatussChampionEntersBattlefieldTriggeredAbility ability) {
public LaquatussChampionEntersBattlefieldTriggeredAbility copy() {return new LaquatussChampionEntersBattlefieldTriggeredAbility(this);
public void adjustCosts(Ability ability, Game game) {
class LaquatussChampionLeavesBattlefieldTriggeredAbility extends LeavesBattlefieldTriggeredAbility {
public LaquatussChampionLeavesBattlefieldTriggeredAbility() {
public LaquatussChampionLeavesBattlefieldTriggeredAbility(LaquatussChampionLeavesBattlefieldTriggeredAbility ability) {
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public LaquatussChampionLeavesBattlefieldTriggeredAbility copy() {return new LaquatussChampionLeavesBattlefieldTriggeredAbility(this);return new Liquify(this);
public class LlawanCephalidEmpress extends CardImpl {
public LlawanCephalidEmpress(UUID ownerId) {
public LlawanCephalidEmpress(final LlawanCephalidEmpress card) {
public LlawanCephalidEmpress copy() {return new LlawanCephalidEmpress(this);return new LlawanCephalidRuleModifyingEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast blue creature spells (" + mageObject.getLogName() + " in play).";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class MajorTeroh extends CardImpl {
public MajorTeroh(UUID ownerId) {
public MajorTeroh(final MajorTeroh card) {
public MajorTeroh copy() {return new MajorTeroh(this);
public class MesmericFiend extends CardImpl {
public MesmericFiend(UUID ownerId) {
public MesmericFiend(final MesmericFiend card) {
public MesmericFiend copy() {return new MesmericFiend(this);
class MesmericFiendExileEffect extends OneShotEffect {
public MesmericFiendExileEffect() {
public MesmericFiendExileEffect(final MesmericFiendExileEffect effect) {
public MesmericFiendExileEffect copy() {return new MesmericFiendExileEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MesmericFiendLeaveEffect extends OneShotEffect {
public MesmericFiendLeaveEffect() {this.staticText = "return the exiled card to its owner's hand";
public MesmericFiendLeaveEffect(final MesmericFiendLeaveEffect effect) {
public MesmericFiendLeaveEffect copy() {return new MesmericFiendLeaveEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(exZone, null, Zone.HAND, source, game);return false;
public class MilitantMonk extends CardImpl {
public MilitantMonk(UUID ownerId) {
public MilitantMonk(final MilitantMonk card) {
public MilitantMonk copy() {return new MilitantMonk(this);
public class Morningtide extends CardImpl {
public Morningtide(UUID ownerId) {
public Morningtide(final Morningtide card) {
public Morningtide copy() {return new Morningtide(this);
public class Mortiphobia extends CardImpl {
public Mortiphobia(UUID ownerId) {
public Mortiphobia(final Mortiphobia card) {
public Mortiphobia copy() {return new Mortiphobia(this);
public class MysticFamiliar extends CardImpl {
public MysticFamiliar(UUID ownerId) {
public MysticFamiliar(final MysticFamiliar card) {
public MysticFamiliar copy() {return new MysticFamiliar(this);
public class NantukoCultivator extends CardImpl {
public NantukoCultivator(UUID ownerId) {
public NantukoCultivator(final NantukoCultivator card) {
public NantukoCultivator copy() {return new NantukoCultivator(this);
class NantukoCultivatorEffect extends OneShotEffect {
public NantukoCultivatorEffect() {
public boolean apply(Game game, Ability source) {return true;return false;
public NantukoCultivatorEffect(final NantukoCultivatorEffect effect) {
public NantukoCultivatorEffect copy() {return new NantukoCultivatorEffect(this);
public class Narcissism extends CardImpl {
public Narcissism(UUID ownerId) {
public Narcissism(final Narcissism card) {
public Narcissism copy() {return new Narcissism(this);
public class NostalgicDreams extends CardImpl {
public NostalgicDreams(UUID ownerId) {
public NostalgicDreams(final NostalgicDreams card) {
public void adjustTargets(Ability ability, Game game) {
public NostalgicDreams copy() {return new NostalgicDreams(this);
public class ObsessiveSearch extends CardImpl {
public ObsessiveSearch(UUID ownerId) {
public ObsessiveSearch(final ObsessiveSearch card) {
public ObsessiveSearch copy() {return new ObsessiveSearch(this);
public class OrganGrinder extends CardImpl {
public OrganGrinder(UUID ownerId) {
public OrganGrinder(final OrganGrinder card) {
public OrganGrinder copy() {return new OrganGrinder(this);
public class Overmaster extends CardImpl {
public Overmaster(UUID ownerId) {
public Overmaster(final Overmaster card) {
public Overmaster copy() {return new Overmaster(this);
OvermasterEffect() {
OvermasterEffect(final OvermasterEffect effect) {
public OvermasterEffect copy() {return new OvermasterEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "This spell can't be countered (" + sourceObject.getName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.COUNTER;
public boolean applies(GameEvent event, Ability source, Game game) {return spell != null && watcher != null && watcher.isUncounterable(spell.getId());
class OvermasterWatcher extends Watcher {
OvermasterWatcher() {
OvermasterWatcher(final OvermasterWatcher watcher) {
public OvermasterWatcher copy() {return new OvermasterWatcher(this);
public void watch(GameEvent event, Game game) {
public boolean isUncounterable(UUID spellId) {return spellId.equals(uncounterableSpell);
public void setReady() {
public class PardicArsonist extends CardImpl {
public PardicArsonist(UUID ownerId) {
public PardicArsonist(final PardicArsonist card) {
public PardicArsonist copy() {return new PardicArsonist(this);
public class PardicCollaborator extends CardImpl {
public PardicCollaborator(UUID ownerId) {
public PardicCollaborator(final PardicCollaborator card) {
public PardicCollaborator copy() {return new PardicCollaborator(this);
public class PardicLancer extends CardImpl {
public PardicLancer(UUID ownerId) {
public PardicLancer(final PardicLancer card) {
public PardicLancer copy() {return new PardicLancer(this);return new Petradon(this);
public class Petravark extends CardImpl {
public Petravark(UUID ownerId) {
public Petravark(final Petravark card) {
public Petravark copy() {return new Petravark(this);
public class PossessedAven extends CardImpl {
public PossessedAven(UUID ownerId) {
public PossessedAven(final PossessedAven card) {
public PossessedAven copy() {return new PossessedAven(this);
public class PossessedBarbarian extends CardImpl {
public PossessedBarbarian(UUID ownerId) {
public PossessedBarbarian(final PossessedBarbarian card) {
public PossessedBarbarian copy() {return new PossessedBarbarian(this);
public class PossessedCentaur extends CardImpl {
public PossessedCentaur(UUID ownerId) {
public PossessedCentaur(final PossessedCentaur card) {
public PossessedCentaur copy() {return new PossessedCentaur(this);
public class PossessedNomad extends CardImpl {
public PossessedNomad(UUID ownerId) {
public PossessedNomad(final PossessedNomad card) {
public PossessedNomad copy() {return new PossessedNomad(this);
public class PsychoticHaze extends CardImpl {
public PsychoticHaze(UUID ownerId) {
public PsychoticHaze(final PsychoticHaze card) {
public PsychoticHaze copy() {return new PsychoticHaze(this);
public class PutridImp extends CardImpl {
public PutridImp(UUID ownerId) {
public PutridImp(final PutridImp card) {
public PutridImp copy() {return new PutridImp(this);
public class Pyromania extends CardImpl {
public Pyromania(UUID ownerId) {
public Pyromania(final Pyromania card) {
public Pyromania copy() {return new Pyromania(this);
public class RestlessDreams extends CardImpl {
public RestlessDreams(UUID ownerId) {
public RestlessDreams(final RestlessDreams card) {
public void adjustTargets(Ability ability, Game game) {
public RestlessDreams copy() {return new RestlessDreams(this);
public class SetonsScout extends CardImpl {
public SetonsScout(UUID ownerId) {
public SetonsScout(final SetonsScout card) {
public SetonsScout copy() {return new SetonsScout(this);
public class ShadesForm extends CardImpl {
public ShadesForm(UUID ownerId) {
public ShadesForm(final ShadesForm card) {
public ShadesForm copy() {return new ShadesForm(this);
public class ShamblingSwarm extends CardImpl {
public ShamblingSwarm(UUID ownerId) {
public ShamblingSwarm(final ShamblingSwarm card) {
public ShamblingSwarm copy() {return new ShamblingSwarm(this);
public class SkywingAven extends CardImpl {
public SkywingAven(UUID ownerId) {
public SkywingAven(final SkywingAven card) {
public SkywingAven copy() {return new SkywingAven(this);
public class SlitheryStalker extends CardImpl {
public SlitheryStalker(UUID ownerId) {
public SlitheryStalker(final SlitheryStalker card) {
public SlitheryStalker copy() {return new SlitheryStalker(this);
public class SonicSeizure extends CardImpl {
public SonicSeizure(UUID ownerId) {
public SonicSeizure(final SonicSeizure card) {
public SonicSeizure copy() {return new SonicSeizure(this);
public class SoulScourge extends CardImpl {
public SoulScourge(UUID ownerId) {
public SoulScourge(final SoulScourge card) {
public SoulScourge copy() {return new SoulScourge(this);
class SoulScourgeEntersBattlefieldTriggeredAbility extends EntersBattlefieldTriggeredAbility implements AdjustingSourceCosts {
public SoulScourgeEntersBattlefieldTriggeredAbility() {
public SoulScourgeEntersBattlefieldTriggeredAbility(SoulScourgeEntersBattlefieldTriggeredAbility ability) {
public SoulScourgeEntersBattlefieldTriggeredAbility copy() {return new SoulScourgeEntersBattlefieldTriggeredAbility(this);
public void adjustCosts(Ability ability, Game game) {
class SoulScourgeLeavesBattlefieldTriggeredAbility extends LeavesBattlefieldTriggeredAbility {
public SoulScourgeLeavesBattlefieldTriggeredAbility() {
public SoulScourgeLeavesBattlefieldTriggeredAbility(SoulScourgeLeavesBattlefieldTriggeredAbility ability) {
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public SoulScourgeLeavesBattlefieldTriggeredAbility copy() {return new SoulScourgeLeavesBattlefieldTriggeredAbility(this);
public class StrengthOfIsolation extends CardImpl {
public StrengthOfIsolation(UUID ownerId) {
public StrengthOfIsolation(final StrengthOfIsolation card) {
public StrengthOfIsolation copy() {return new StrengthOfIsolation(this);
public class StrengthOfLunacy extends CardImpl {
public StrengthOfLunacy(UUID ownerId) {
public StrengthOfLunacy(final StrengthOfLunacy card) {
public StrengthOfLunacy copy() {return new StrengthOfLunacy(this);
public class StupefyingTouch extends CardImpl {
public StupefyingTouch(UUID ownerId) {
public StupefyingTouch(final StupefyingTouch card) {
public StupefyingTouch copy() {return new StupefyingTouch(this);
class CantActivateAbilitiesAttachedEffect extends RestrictionEffect {
public CantActivateAbilitiesAttachedEffect() {
public CantActivateAbilitiesAttachedEffect(final CantActivateAbilitiesAttachedEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canUseActivatedAbilities(Permanent permanent, Ability source, Game game) {return false;
public CantActivateAbilitiesAttachedEffect copy() {return new CantActivateAbilitiesAttachedEffect(this);
public class TaintedField extends CardImpl {
public TaintedField(UUID ownerId) {
public TaintedField(final TaintedField card) {
public TaintedField copy() {return new TaintedField(this);
public class TaintedPeak extends CardImpl {
public TaintedPeak(UUID ownerId) {
public TaintedPeak(final TaintedPeak card) {
public TaintedPeak copy() {return new TaintedPeak(this);
public class TaintedWood extends CardImpl {
public TaintedWood(UUID ownerId) {
public TaintedWood(final TaintedWood card) {
public TaintedWood copy() {return new TaintedWood(this);
public class TemporaryInsanity extends CardImpl {
public TemporaryInsanity(UUID ownerId) {
public TemporaryInsanity(final TemporaryInsanity card) {
public TemporaryInsanity copy() {return new TemporaryInsanity(this);
class TargetCreatureWithPowerLessThanNumberOfCardsInYourGraveyard extends TargetCreaturePermanent {
public TargetCreatureWithPowerLessThanNumberOfCardsInYourGraveyard() {
public TargetCreatureWithPowerLessThanNumberOfCardsInYourGraveyard(final TargetCreatureWithPowerLessThanNumberOfCardsInYourGraveyard target) {
public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {return target.getPower().getValue() < game.getPlayer(source.getControllerId()).getGraveyard().size();return false;return false;
public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {return true;return false;
public TargetCreatureWithPowerLessThanNumberOfCardsInYourGraveyard copy() {return new TargetCreatureWithPowerLessThanNumberOfCardsInYourGraveyard(this);
public class TerohsVanguard extends CardImpl {
public TerohsVanguard(UUID ownerId) {
public TerohsVanguard(final TerohsVanguard card) {
public TerohsVanguard copy() {return new TerohsVanguard(this);
public class TurbulentDreams extends CardImpl {
public TurbulentDreams(UUID ownerId) {
public TurbulentDreams(final TurbulentDreams card) {
public void adjustTargets(Ability ability, Game game) {
public TurbulentDreams copy() {return new TurbulentDreams(this);
public class Unhinge extends CardImpl {
public Unhinge(UUID ownerId) {
public Unhinge(final Unhinge card) {
public Unhinge copy() {return new Unhinge(this);
public class WasteAway extends CardImpl {
public WasteAway(UUID ownerId) {
public WasteAway(final WasteAway card) {
public WasteAway copy() {return new WasteAway(this);
public class ZombieTrailblazer extends CardImpl {
public ZombieTrailblazer(UUID ownerId) {
public ZombieTrailblazer(final ZombieTrailblazer card) {
public ZombieTrailblazer copy() {return new ZombieTrailblazer(this);
public class BlueWard extends CardImpl {
public BlueWard(UUID ownerId) {
public BlueWard(final BlueWard card) {
public BlueWard copy() {return new BlueWard(this);
public class Farmstead extends CardImpl {
public Farmstead(UUID ownerId) {
public Farmstead(final Farmstead card) {
public Farmstead copy() {return new Farmstead(this);
public class GreenWard extends CardImpl {
public GreenWard(UUID ownerId) {
public GreenWard(final GreenWard card) {
public GreenWard copy() {return new GreenWard(this);return new KeldonWarlord(this);
public class LivingWall extends CardImpl {
public LivingWall(UUID ownerId) {
public LivingWall(final LivingWall card) {
public LivingWall copy() {return new LivingWall(this);
public class PlagueRats extends CardImpl {
public PlagueRats(UUID ownerId) {
public PlagueRats(final PlagueRats card) {
public PlagueRats copy() {return new PlagueRats(this);
public class Purelace extends CardImpl {
public Purelace(UUID ownerId) {
public Purelace(final Purelace card) {
public Purelace copy() {return new Purelace(this);return new Sacrifice(this);
public class TimeVault extends CardImpl {
public TimeVault(UUID ownerId) {
public TimeVault(final TimeVault card) {
public TimeVault copy() {return new TimeVault(this);
class TimeVaultReplacementEffect extends ReplacementEffectImpl {
TimeVaultReplacementEffect() {
TimeVaultReplacementEffect(final TimeVaultReplacementEffect effect) {
public TimeVaultReplacementEffect copy() {return new TimeVaultReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.PLAY_TURN;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public class Twiddle extends CardImpl {
public Twiddle(UUID ownerId) {
public Twiddle(final Twiddle card) {
public Twiddle copy() {return new Twiddle(this);
public class VesuvanDoppelganger extends CardImpl {
public VesuvanDoppelganger(UUID ownerId) {
public VesuvanDoppelganger(final VesuvanDoppelganger card) {
public VesuvanDoppelganger copy() {return new VesuvanDoppelganger(this);
class VesuvanDoppelgangerCopyEffect extends OneShotEffect {
public VesuvanDoppelgangerCopyEffect() {
public VesuvanDoppelgangerCopyEffect(final VesuvanDoppelgangerCopyEffect effect) {
public boolean apply(Game game, Ability source) {
public Boolean apply(Game game, Permanent permanent) {return true;
public Boolean apply(Game game, MageObject mageObject) {return true;return true;return false;
public VesuvanDoppelgangerCopyEffect copy() {return new VesuvanDoppelgangerCopyEffect(this);
public class VolcanicIsland extends CardImpl {
public VolcanicIsland(UUID ownerId) {
public VolcanicIsland(final VolcanicIsland card) {
public VolcanicIsland copy() {return new VolcanicIsland(this);
public class Wanderlust extends CardImpl {
public Wanderlust(UUID ownerId) {
public Wanderlust(final Wanderlust card) {
public Wanderlust copy() {return new Wanderlust(this);
public class AcademyRector extends CardImpl {
public AcademyRector(UUID ownerId) {
public AcademyRector(final AcademyRector card) {
public AcademyRector copy() {return new AcademyRector(this);
class AcademyRectorEffect extends OneShotEffect {
public AcademyRectorEffect() {
public AcademyRectorEffect(final AcademyRectorEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public AcademyRectorEffect copy() {return new AcademyRectorEffect(this);
public class AetherSting extends CardImpl {
public AetherSting(UUID ownerId) {
public AetherSting(final AetherSting card) {
public AetherSting copy() {return new AetherSting(this);
class AetherStingTriggeredAbility extends TriggeredAbilityImpl {
public AetherStingTriggeredAbility() {
public AetherStingTriggeredAbility(final AetherStingTriggeredAbility ability) {
public AetherStingTriggeredAbility copy() {return new AetherStingTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an opponent casts a creature spell, {this} deals 1 damage to that player.";
public class AncientSilverback extends CardImpl {
public AncientSilverback(UUID ownerId) {
public AncientSilverback(final AncientSilverback card) {
public AncientSilverback copy() {return new AncientSilverback(this);
public class BlizzardElemental extends CardImpl {
public BlizzardElemental(UUID ownerId) {
public BlizzardElemental(final BlizzardElemental card) {
public BlizzardElemental copy() {return new BlizzardElemental(this);
public class BloodshotCyclops extends CardImpl {
public BloodshotCyclops(UUID ownerId) {
public BloodshotCyclops(final BloodshotCyclops card) {
public BloodshotCyclops copy() {return new BloodshotCyclops(this);
public class BodySnatcher extends CardImpl {
public BodySnatcher(UUID ownerId) {effect.setText("and return target creature card from your graveyard to the battlefield");
public BodySnatcher(final BodySnatcher card) {
public BodySnatcher copy() {return new BodySnatcher(this);
public class BraidwoodCup extends CardImpl {
public BraidwoodCup(UUID ownerId) {
public BraidwoodCup(final BraidwoodCup card) {
public BraidwoodCup copy() {return new BraidwoodCup(this);
public class BraidwoodSextant extends CardImpl {
public BraidwoodSextant(UUID ownerId) {
public BraidwoodSextant(final BraidwoodSextant card) {
public BraidwoodSextant copy() {return new BraidwoodSextant(this);
public class BrassSecretary extends CardImpl {
public BrassSecretary(UUID ownerId) {
public BrassSecretary(final BrassSecretary card) {
public BrassSecretary copy() {return new BrassSecretary(this);
public class BubblingBeebles extends CardImpl {
public BubblingBeebles(UUID ownerId) {
public BubblingBeebles(final BubblingBeebles card) {
public BubblingBeebles copy() {return new BubblingBeebles(this);
public class Caltrops extends CardImpl {
public Caltrops(UUID ownerId) {
public Caltrops(final Caltrops card) {
public Caltrops copy() {return new Caltrops(this);
public class CapashenKnight extends CardImpl {
public CapashenKnight(UUID ownerId) {
public CapashenKnight(final CapashenKnight card) {
public CapashenKnight copy() {return new CapashenKnight(this);
public class CapashenStandard extends CardImpl {
public CapashenStandard(UUID ownerId) {
public CapashenStandard(final CapashenStandard card) {
public CapashenStandard copy() {return new CapashenStandard(this);
public class CapashenTemplar extends CardImpl {
public CapashenTemplar(UUID ownerId) {
public CapashenTemplar(final CapashenTemplar card) {
public CapashenTemplar copy() {return new CapashenTemplar(this);
public class ColosYearling extends CardImpl {
public ColosYearling(UUID ownerId) {
public ColosYearling(final ColosYearling card) {
public ColosYearling copy() {return new ColosYearling(this);
public class CovetousDragon extends CardImpl {
public CovetousDragon(UUID ownerId) {
public CovetousDragon(final CovetousDragon card) {
public CovetousDragon copy() {return new CovetousDragon(this);
public class DiseaseCarriers extends CardImpl {
public DiseaseCarriers(UUID ownerId) {
public DiseaseCarriers(final DiseaseCarriers card) {
public DiseaseCarriers copy() {return new DiseaseCarriers(this);
public class Donate extends CardImpl {
public Donate(UUID ownerId) {
public Donate(final Donate card) {
public Donate copy() {return new Donate(this);
class DonateEffect extends ContinuousEffectImpl {
public DonateEffect() {
public DonateEffect(final DonateEffect effect) {
public DonateEffect copy() {return new DonateEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class DyingWail extends CardImpl {
public DyingWail(UUID ownerId) {
public DyingWail(final DyingWail card) {
public DyingWail copy() {return new DyingWail(this);
public class ElvishLookout extends CardImpl {
public ElvishLookout(UUID ownerId) {
public ElvishLookout(final ElvishLookout card) {
public ElvishLookout copy() {return new ElvishLookout(this);
public class Encroach extends CardImpl {
public Encroach(UUID ownerId) {
public Encroach(final Encroach card) {
public Encroach copy() {return new Encroach(this);
public class FieldSurgeon extends CardImpl {
public FieldSurgeon(UUID ownerId) {
public FieldSurgeon(final FieldSurgeon card) {
public FieldSurgeon copy() {return new FieldSurgeon(this);
public class FlameJet extends CardImpl {
public FlameJet(UUID ownerId) {
public FlameJet(final FlameJet card) {
public FlameJet copy() {return new FlameJet(this);
public class Flicker extends CardImpl {
public Flicker(UUID ownerId) {
public Flicker(final Flicker card) {
public Flicker copy() {return new Flicker(this);
public class FodderCannon extends CardImpl {
public FodderCannon(UUID ownerId) {
public FodderCannon(final FodderCannon card) {
public FodderCannon copy() {return new FodderCannon(this);
public class Gamekeeper extends CardImpl {
public Gamekeeper(UUID ownerId) {
public Gamekeeper(final Gamekeeper card) {
public Gamekeeper copy() {return new Gamekeeper(this);
class GamekeeperEffect extends OneShotEffect {
public GamekeeperEffect() {
public GamekeeperEffect(final GamekeeperEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GamekeeperEffect copy() {return new GamekeeperEffect(this);
public class GoblinBerserker extends CardImpl {
public GoblinBerserker(UUID ownerId) {
public GoblinBerserker(final GoblinBerserker card) {
public GoblinBerserker copy() {return new GoblinBerserker(this);
public class GoblinGardener extends CardImpl {
public GoblinGardener(UUID ownerId) {
public GoblinGardener(final GoblinGardener card) {
public GoblinGardener copy() {return new GoblinGardener(this);
public class GoblinMarshal extends CardImpl {
public GoblinMarshal(UUID ownerId) {
public GoblinMarshal(final GoblinMarshal card) {
public GoblinMarshal copy() {return new GoblinMarshal(this);
public class GoblinMasons extends CardImpl {
public GoblinMasons(UUID ownerId) {
public GoblinMasons(final GoblinMasons card) {
public GoblinMasons copy() {return new GoblinMasons(this);
public class GoliathBeetle extends CardImpl {
public GoliathBeetle(UUID ownerId) {
public GoliathBeetle(final GoliathBeetle card) {
public GoliathBeetle copy() {return new GoliathBeetle(this);
public class HeartWarden extends CardImpl {
public HeartWarden(UUID ownerId) {
public HeartWarden(final HeartWarden card) {
public HeartWarden copy() {return new HeartWarden(this);
public class HuntingMoa extends CardImpl {
public HuntingMoa(UUID ownerId) {
public HuntingMoa(final HuntingMoa card) {
public HuntingMoa copy() {return new HuntingMoa(this);
public class IlluminatedWings extends CardImpl {
public IlluminatedWings(UUID ownerId) {
public IlluminatedWings(final IlluminatedWings card) {
public IlluminatedWings copy() {return new IlluminatedWings(this);return new KeldonVandals(this);
public class Kingfisher extends CardImpl {
public Kingfisher(UUID ownerId) {
public Kingfisher(final Kingfisher card) {
public Kingfisher copy() {return new Kingfisher(this);return new Magnify(this);
public class MarkerBeetles extends CardImpl {
public MarkerBeetles(UUID ownerId) {
public MarkerBeetles(final MarkerBeetles card) {
public MarkerBeetles copy() {return new MarkerBeetles(this);
public class MarkOfFury extends CardImpl {
public MarkOfFury(UUID ownerId) {
public MarkOfFury(final MarkOfFury card) {
public MarkOfFury copy() {return new MarkOfFury(this);
public class MentalDiscipline extends CardImpl {
public MentalDiscipline(UUID ownerId) {
public MentalDiscipline(final MentalDiscipline card) {
public MentalDiscipline copy() {return new MentalDiscipline(this);
public class Metalworker extends CardImpl {
public Metalworker(UUID ownerId) {
public Metalworker(final Metalworker card) {
public Metalworker copy() {return new Metalworker(this);
class MetalworkerManaEffect extends ManaEffect {
public MetalworkerManaEffect() {
public MetalworkerManaEffect(final MetalworkerManaEffect effect) {
public MetalworkerManaEffect copy() {return new MetalworkerManaEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public Mana getMana(Game game, Ability source) {return Mana.ColorlessMana(artifactsHand * 2);return null;
public class MetathranSoldier extends CardImpl {
public MetathranSoldier(UUID ownerId) {
public MetathranSoldier(final MetathranSoldier card) {
public MetathranSoldier copy() {return new MetathranSoldier(this);
public class MultanisDecree extends CardImpl {
public MultanisDecree(UUID ownerId) {
public MultanisDecree(final MultanisDecree card) {
public MultanisDecree copy() {return new MultanisDecree(this);
class MultanisDecreeDestroyEffect extends OneShotEffect {
public MultanisDecreeDestroyEffect() {
public MultanisDecreeDestroyEffect(final MultanisDecreeDestroyEffect effect) {
public MultanisDecreeDestroyEffect copy() {return new MultanisDecreeDestroyEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class Opalescence extends CardImpl {
public Opalescence(UUID ownerId) {
public Opalescence(final Opalescence card) {
public Opalescence copy() {return new Opalescence(this);
class OpalescenceEffect extends ContinuousEffectImpl {
public OpalescenceEffect() {
public OpalescenceEffect(final OpalescenceEffect effect) {
public OpalescenceEffect copy() {return new OpalescenceEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.TypeChangingEffects_4;
public Set<UUID> isDependentTo(List<ContinuousEffect> allEffectsInLayer) {return dependentTo;
public class PatternOfRebirth extends CardImpl {
public PatternOfRebirth(UUID ownerId) {
public PatternOfRebirth(final PatternOfRebirth card) {
public PatternOfRebirth copy() {return new PatternOfRebirth(this);
public class PhyrexianMonitor extends CardImpl {
public PhyrexianMonitor(UUID ownerId) {
public PhyrexianMonitor(final PhyrexianMonitor card) {
public PhyrexianMonitor copy() {return new PhyrexianMonitor(this);
public class PhyrexianNegator extends CardImpl {
public PhyrexianNegator(UUID ownerId) {
public PhyrexianNegator(final PhyrexianNegator card) {
public PhyrexianNegator copy() {return new PhyrexianNegator(this);
class PhyrexianNegatorTriggeredAbility extends TriggeredAbilityImpl {
PhyrexianNegatorTriggeredAbility() {
PhyrexianNegatorTriggeredAbility(final PhyrexianNegatorTriggeredAbility ability) {
public PhyrexianNegatorTriggeredAbility copy() {return new PhyrexianNegatorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} is dealt damage, sacrifice that many permanents.";
public class PlagueDogs extends CardImpl {
public PlagueDogs(UUID ownerId) {
public PlagueDogs(final PlagueDogs card) {
public PlagueDogs copy() {return new PlagueDogs(this);
public class PlatedSpider extends CardImpl {
public PlatedSpider(UUID ownerId) {
public PlatedSpider(final PlatedSpider card) {
public PlatedSpider copy() {return new PlatedSpider(this);
public class PlowUnder extends CardImpl {
public PlowUnder(UUID ownerId) {
public PlowUnder(final PlowUnder card) {
public PlowUnder copy() {return new PlowUnder(this);
public class RapidDecay extends CardImpl {
public RapidDecay(UUID ownerId) {
public RapidDecay(final RapidDecay card) {
public RapidDecay copy() {return new RapidDecay(this);
class RapidDecayExileEffect extends OneShotEffect {
public RapidDecayExileEffect() {
public RapidDecayExileEffect(final RapidDecayExileEffect effect) {
public RapidDecayExileEffect copy() {return new RapidDecayExileEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class RayneAcademyChancellor extends CardImpl {
public RayneAcademyChancellor(UUID ownerId) {
public RayneAcademyChancellor(final RayneAcademyChancellor card) {
public RayneAcademyChancellor copy() {return new RayneAcademyChancellor(this);
class RayneAcademyChancellorTriggeredAbility extends TriggeredAbilityImpl {
RayneAcademyChancellorTriggeredAbility() {
RayneAcademyChancellorTriggeredAbility(final RayneAcademyChancellorTriggeredAbility ability) {
public RayneAcademyChancellorTriggeredAbility copy() {return new RayneAcademyChancellorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "Whenever you or a permanent you control becomes the target of a spell or ability an opponent controls, you may draw a card. You may draw an additional card if {this} is enchanted.";
public class ReliquaryMonk extends CardImpl {
public ReliquaryMonk(UUID ownerId) {
public ReliquaryMonk(final ReliquaryMonk card) {
public ReliquaryMonk copy() {return new ReliquaryMonk(this);
public class Repercussion extends CardImpl {
public Repercussion(UUID ownerId) {
public Repercussion(final Repercussion card) {
public Repercussion copy() {return new Repercussion(this);
class RepercussionTriggeredAbility extends TriggeredAbilityImpl {
public RepercussionTriggeredAbility(Effect effect) {
public RepercussionTriggeredAbility(final RepercussionTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "Whenever a creature is dealt damage, {this} deals that much damage to that creature's controller.";
public TriggeredAbility copy() {return new RepercussionTriggeredAbility(this);
class RepercussionEffect extends OneShotEffect {
public RepercussionEffect() {
public RepercussionEffect(final RepercussionEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public Effect copy() {return new RepercussionEffect(this);
public class Replenish extends CardImpl {
public Replenish(UUID ownerId) {
public Replenish(final Replenish card) {
public Replenish copy() {return new Replenish(this);
class ReplenishEffect extends OneShotEffect {
ReplenishEffect() {
ReplenishEffect(final ReplenishEffect effect) {
public ReplenishEffect copy() {return new ReplenishEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(controller.getGraveyard().getCards(new FilterEnchantmentCard(), source.getSourceId(),return false;
public class Rescue extends CardImpl {
public Rescue(UUID ownerId) {
public Rescue(final Rescue card) {
public Rescue copy() {return new Rescue(this);
public class RofellosLlanowarEmissary extends CardImpl {
public RofellosLlanowarEmissary(UUID ownerId) {
public RofellosLlanowarEmissary(final RofellosLlanowarEmissary card) {
public RofellosLlanowarEmissary copy() {return new RofellosLlanowarEmissary(this);
public class SkitteringHorror extends CardImpl {
public SkitteringHorror(UUID ownerId) {
public SkitteringHorror(final SkitteringHorror card) {
public SkitteringHorror copy() {return new SkitteringHorror(this);
public class SlinkingSkirge extends CardImpl {
public SlinkingSkirge(UUID ownerId) {
public SlinkingSkirge(final SlinkingSkirge card) {
public SlinkingSkirge copy() {return new SlinkingSkirge(this);
public class Solidarity extends CardImpl {
public Solidarity(UUID ownerId) {
public Solidarity(final Solidarity card) {
public Solidarity copy() {return new Solidarity(this);
public class SquirmingMass extends CardImpl {
public SquirmingMass(UUID ownerId) {
public SquirmingMass(final SquirmingMass card) {
public SquirmingMass copy() {return new SquirmingMass(this);
public class TelepathicSpies extends CardImpl {
public TelepathicSpies(UUID ownerId) {
public TelepathicSpies(final TelepathicSpies card) {
public TelepathicSpies copy() {return new TelepathicSpies(this);return new TetheredGriffin(this);
public class ThornElemental extends CardImpl {
public ThornElemental(UUID ownerId) {
public ThornElemental(final ThornElemental card) {
public ThornElemental copy() {return new ThornElemental(this);
public class ThranDynamo extends CardImpl {
public ThranDynamo(UUID ownerId) {
public ThranDynamo(final ThranDynamo card) {
public ThranDynamo copy() {return new ThranDynamo(this);
public class ThranFoundry extends CardImpl {
public ThranFoundry(UUID ownerId) {
public ThranFoundry(final ThranFoundry card) {
public ThranFoundry copy() {return new ThranFoundry(this);
class ThranFoundryEffect extends OneShotEffect {
ThranFoundryEffect() {
ThranFoundryEffect(final ThranFoundryEffect effect) {
public ThranFoundryEffect copy() {return new ThranFoundryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TormentedAngel extends CardImpl {
public TormentedAngel(UUID ownerId) {
public TormentedAngel(final TormentedAngel card) {
public TormentedAngel copy() {return new TormentedAngel(this);
public class Treachery extends CardImpl {
public Treachery(UUID ownerId) {
public Treachery(final Treachery card) {
public Treachery copy() {return new Treachery(this);
public class UrzasIncubator extends CardImpl {
public UrzasIncubator(UUID ownerId) {
public UrzasIncubator(final UrzasIncubator card) {
public UrzasIncubator copy() {return new UrzasIncubator(this);
public class VoiceOfDuty extends CardImpl {
public VoiceOfDuty(UUID ownerId) {
public VoiceOfDuty(final VoiceOfDuty card) {
public VoiceOfDuty copy() {return new VoiceOfDuty(this);
public class VoiceOfReason extends CardImpl {
public VoiceOfReason(UUID ownerId) {
public VoiceOfReason(final VoiceOfReason card) {
public VoiceOfReason copy() {return new VoiceOfReason(this);
public class WallOfGlare extends CardImpl {
public WallOfGlare(UUID ownerId) {
public WallOfGlare(final WallOfGlare card) {
public WallOfGlare copy() {return new WallOfGlare(this);
public class WildColos extends CardImpl {
public WildColos(UUID ownerId) {
public WildColos(final WildColos card) {
public WildColos copy() {return new WildColos(this);
public class YavimayaHollow extends CardImpl {
public YavimayaHollow(UUID ownerId) {
public YavimayaHollow(final YavimayaHollow card) {
public YavimayaHollow copy() {return new YavimayaHollow(this);
public class AboutFace extends CardImpl {
public AboutFace(UUID ownerId) {
public AboutFace(final AboutFace card) {
public AboutFace copy() {return new AboutFace(this);
public class Anthroplasm extends CardImpl {
public Anthroplasm(UUID ownerId) {
public Anthroplasm(final Anthroplasm card) {
public Anthroplasm copy() {return new Anthroplasm(this);
class AnthroplasmEffect extends OneShotEffect {
AnthroplasmEffect ( ) {
AnthroplasmEffect ( AnthroplasmEffect effect ) {
public AnthroplasmEffect copy() {return new AnthroplasmEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Archivist extends CardImpl {
public Archivist(UUID ownerId) {
public Archivist(final Archivist card) {
public Archivist copy() {return new Archivist(this);
public class AuraFlux extends CardImpl {
public AuraFlux(UUID ownerId) {
public AuraFlux(final AuraFlux card) {
public AuraFlux copy() {return new AuraFlux(this);
public class AvalancheRiders extends CardImpl {
public AvalancheRiders(UUID ownerId) {
public AvalancheRiders(final AvalancheRiders card) {
public AvalancheRiders copy() {return new AvalancheRiders(this);
public class BlessedReversal extends CardImpl {
public BlessedReversal(UUID ownerId) {
public BlessedReversal(final BlessedReversal card) {
public BlessedReversal copy() {return new BlessedReversal(this);
class BlessedReversalCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count * 3;
public DynamicValue copy() {return this;
public String getMessage() {return "creature attacking you";
public String toString() {return "3";
public class BloatedToad extends CardImpl {
public BloatedToad(UUID ownerId) {
public BloatedToad(final BloatedToad card) {
public BloatedToad copy() {return new BloatedToad(this);
public class BoneShredder extends CardImpl {
public BoneShredder(UUID ownerId) {
public BoneShredder(final BoneShredder card) {
public BoneShredder copy() {return new BoneShredder(this);
public class BouncingBeebles extends CardImpl {
public BouncingBeebles(UUID ownerId) {
public BouncingBeebles(final BouncingBeebles card) {
public BouncingBeebles copy() {return new BouncingBeebles(this);
public class BrinkOfMadness extends CardImpl {
public BrinkOfMadness(UUID ownerId) {
public BrinkOfMadness(final BrinkOfMadness card) {
public BrinkOfMadness copy() {return new BrinkOfMadness(this);
class BrinkOfMadnessEffect extends OneShotEffect {
public BrinkOfMadnessEffect() {
public BrinkOfMadnessEffect(final BrinkOfMadnessEffect effect) {
public BrinkOfMadnessEffect copy() {return new BrinkOfMadnessEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BurstOfEnergy extends CardImpl {
public BurstOfEnergy(UUID ownerId) {
public BurstOfEnergy(final BurstOfEnergy card) {
public BurstOfEnergy copy() {return new BurstOfEnergy(this);
public class Cessation extends CardImpl {
public Cessation(UUID ownerId) {
public Cessation(final Cessation card) {
public Cessation copy() {return new Cessation(this);
public class CloudOfFaeries extends CardImpl {
public CloudOfFaeries(UUID ownerId) {
public CloudOfFaeries(final CloudOfFaeries card) {
public CloudOfFaeries copy() {return new CloudOfFaeries(this);
public class CropRotation extends CardImpl {
public CropRotation(UUID ownerId) {
public CropRotation(final CropRotation card) {
public CropRotation copy() {return new CropRotation(this);
public class DarkwatchElves extends CardImpl {
public DarkwatchElves(UUID ownerId) {
public DarkwatchElves(final DarkwatchElves card) {
public DarkwatchElves copy() {return new DarkwatchElves(this);
public class DefenderOfChaos extends CardImpl {
public DefenderOfChaos(UUID ownerId) {
public DefenderOfChaos(final DefenderOfChaos card) {
public DefenderOfChaos copy() {return new DefenderOfChaos(this);
public class DefenderOfLaw extends CardImpl {
public DefenderOfLaw(UUID ownerId) {
public DefenderOfLaw(final DefenderOfLaw card) {
public DefenderOfLaw copy() {return new DefenderOfLaw(this);
public class DefenseOfTheHeart extends CardImpl {
public DefenseOfTheHeart(UUID ownerId) {
public DefenseOfTheHeart(final DefenseOfTheHeart card) {
public DefenseOfTheHeart copy() {return new DefenseOfTheHeart(this);
class DefenseOfTheHeartCondition implements Condition {
public boolean apply(Game game, Ability source) {
{return true;return false;
public class DelusionsOfMediocrity extends CardImpl {
public DelusionsOfMediocrity(UUID ownerId) {
public DelusionsOfMediocrity(final DelusionsOfMediocrity card) {
public DelusionsOfMediocrity copy() {return new DelusionsOfMediocrity(this);
public class EngineeredPlague extends CardImpl {
public EngineeredPlague(UUID ownerId) {
public EngineeredPlague(final EngineeredPlague card) {
public EngineeredPlague copy() {return new EngineeredPlague(this);
public class Erase extends CardImpl {
public Erase(UUID ownerId) {
public void build() {
public Erase(final Erase card) {
public Erase copy() {return new Erase(this);
public class Eviscerator extends CardImpl {
public Eviscerator(UUID ownerId) {
public Eviscerator(final Eviscerator card) {
public Eviscerator copy() {return new Eviscerator(this);
public class ExpendableTroops extends CardImpl {
public ExpendableTroops(UUID ownerId) {
public ExpendableTroops(final ExpendableTroops card) {
public ExpendableTroops copy() {return new ExpendableTroops(this);
public class FogOfGnats extends CardImpl {
public FogOfGnats(UUID ownerId) {
public FogOfGnats(final FogOfGnats card) {
public FogOfGnats copy() {return new FogOfGnats(this);
public class FranticSearch extends CardImpl {
public FranticSearch(UUID ownerId) {
public FranticSearch(final FranticSearch card) {
public FranticSearch copy() {return new FranticSearch(this);
public class GangOfElk extends CardImpl {
public GangOfElk(UUID ownerId) {
public GangOfElk(final GangOfElk card) {
public GangOfElk copy() {return new GangOfElk(this);
class GangOfElkAbility extends BecomesBlockedTriggeredAbility {
public GangOfElkAbility() {
public GangOfElkAbility(final GangOfElkAbility ability) {
public GangOfElkAbility copy() {return new GangOfElkAbility(this);
public String getRule() {return "Whenever {this} becomes blocked, it gets +2/+2 until end of turn for each creature blocking it.";
class GangOfElkValue implements DynamicValue {
public GangOfElkValue copy() {return new GangOfElkValue();
public int calculate(Game game, Ability sourceAbility, Effect effect) {return blockers > 1 ? (blockers) * 2 : 0;return 0;
public String getMessage() {return "+2/+2 until end of turn for each creature blocking it";
public class GhituSlinger extends CardImpl {
public GhituSlinger(UUID ownerId) {
public GhituSlinger(final GhituSlinger card) {
public GhituSlinger copy() {return new GhituSlinger(this);
public class GhituWarCry extends CardImpl {
public GhituWarCry(UUID ownerId) {
public GhituWarCry(final GhituWarCry card) {
public GhituWarCry copy() {return new GhituWarCry(this);
public class GoblinMedics extends CardImpl {
public GoblinMedics(UUID ownerId) {
public GoblinMedics(final GoblinMedics card) {
public GoblinMedics copy() {return new GoblinMedics(this);
public class GoblinWelder extends CardImpl {
public GoblinWelder(UUID ownerId) {
public GoblinWelder(final GoblinWelder card) {
public GoblinWelder copy() {return new GoblinWelder(this);
public class GoblinWelderEffect extends OneShotEffect {
public GoblinWelderEffect() {staticText = "Choose target artifact a player controls and target artifact card in that player's graveyard. If both targets are still legal as this ability resolves, that player simultaneously sacrifices the artifact and returns the artifact card to the battlefield";
public GoblinWelderEffect(final GoblinWelderEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public GoblinWelderEffect copy() {return new GoblinWelderEffect(this);
class GoblinWelderTarget extends TargetCardInGraveyard {
public GoblinWelderTarget() {
public GoblinWelderTarget(final GoblinWelderTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return false;return filter.match(card, game);return false;
public GoblinWelderTarget copy() {return new GoblinWelderTarget(this);
public class GraniteGrip extends CardImpl {
public GraniteGrip(UUID ownerId) {
public GraniteGrip(final GraniteGrip card) {
public GraniteGrip copy() {return new GraniteGrip(this);
public class GrimMonolith extends CardImpl {
public GrimMonolith(UUID ownerId) {
public GrimMonolith(final GrimMonolith card) {
public GrimMonolith copy() {return new GrimMonolith(this);
public class HarmonicConvergence extends CardImpl {
public HarmonicConvergence(UUID ownerId) {
public HarmonicConvergence(final HarmonicConvergence card) {
public HarmonicConvergence copy() {return new HarmonicConvergence(this);
class HarmonicConvergenceEffect extends OneShotEffect {
public HarmonicConvergenceEffect() {
public HarmonicConvergenceEffect(final HarmonicConvergenceEffect effect) {
public HarmonicConvergenceEffect copy() {return new HarmonicConvergenceEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class HiddenGibbons extends CardImpl {
public HiddenGibbons(UUID ownerId) {
public HiddenGibbons(final HiddenGibbons card) {
public HiddenGibbons copy() {return new HiddenGibbons(this);
class HiddenGibbonsApe extends Token {
public HiddenGibbonsApe() {
public class HopeAndGlory extends CardImpl {
public HopeAndGlory(UUID ownerId) {
public HopeAndGlory(final HopeAndGlory card) {
public HopeAndGlory copy() {return new HopeAndGlory(this);
public class ImpendingDisaster extends CardImpl {
public ImpendingDisaster(UUID ownerId) {
public ImpendingDisaster(final ImpendingDisaster card) {
public ImpendingDisaster copy() {return new ImpendingDisaster(this);
class ImpendingDisasterCondition implements Condition {
public boolean apply(Game game, Ability source) {return game.getBattlefield().count(new FilterLandPermanent(), source.getSourceId(), source.getControllerId(), game) >= 7;
public class Intervene extends CardImpl {
public Intervene(UUID ownerId) {
public Intervene(final Intervene card) {
public Intervene copy() {return new Intervene(this);
public class JhoirasToolbox extends CardImpl {
public JhoirasToolbox(UUID ownerId) {
public JhoirasToolbox(final JhoirasToolbox card) {
public JhoirasToolbox copy() {return new JhoirasToolbox(this);
public class KarmicGuide extends CardImpl {
public KarmicGuide(UUID ownerId) {
public KarmicGuide(final KarmicGuide card) {
public KarmicGuide copy() {return new KarmicGuide(this);
public class KingCrab extends CardImpl {
public KingCrab(UUID ownerId) {
public KingCrab(final KingCrab card) {
public KingCrab copy() {return new KingCrab(this);
public class Knighthood extends CardImpl {
public Knighthood(UUID ownerId) {
public Knighthood(final Knighthood card) {
public Knighthood copy() {return new Knighthood(this);return new LastDitchEffort(this);return new LastDitchEffortEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class LoneWolf extends CardImpl {
public LoneWolf(UUID ownerId) {
public LoneWolf(final LoneWolf card) {
public LoneWolf copy() {return new LoneWolf(this);
public class MartyrsCause extends CardImpl {
public MartyrsCause(UUID ownerId) {
public MartyrsCause(final MartyrsCause card) {
public MartyrsCause copy() {return new MartyrsCause(this);
public class MemoryJar extends CardImpl {
public MemoryJar(UUID ownerId) {
public MemoryJar(final MemoryJar card) {
public MemoryJar copy() {return new MemoryJar(this);
class MemoryJarEffect extends OneShotEffect {
{staticText = "Each player exiles all cards from his or her hand face down and draws seven cards. At the beginning of the next end step, each player discards his or her hand and returns to his or her hand each card he or she exiled this way.";
{return true;
public MemoryJarEffect copy() {return new MemoryJarEffect(this);
class MemoryJarDelayedEffect extends OneShotEffect {
{staticText = "At the beginning of the next end step, each player discards his or her hand and returns to his or her hand each card he or she exiled this way.";
public MemoryJarDelayedEffect copy() {return new MemoryJarDelayedEffect(this);
public boolean apply(Game game, Ability source) {
{return true;return false;
class MemoryJarDelayedTriggeredAbility extends DelayedTriggeredAbility {
public MemoryJarDelayedTriggeredAbility(Effect effect) {
public MemoryJarDelayedTriggeredAbility(final MemoryJarDelayedTriggeredAbility ability) {
public MemoryJarDelayedTriggeredAbility copy() {return new MemoryJarDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public class Miscalculation extends CardImpl {
public Miscalculation(UUID ownerId) {
public Miscalculation(final Miscalculation card) {
public Miscalculation copy() {return new Miscalculation(this);
public class MoltenHydra extends CardImpl {
public MoltenHydra(UUID ownerId) {
public MoltenHydra(final MoltenHydra card) {
public MoltenHydra copy() {return new MoltenHydra(this);
class RemoveAllCountersSourceCost extends CostImpl {
public RemoveAllCountersSourceCost(Counter counter) {
public RemoveAllCountersSourceCost(RemoveAllCountersSourceCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {
{return paid;
public RemoveAllCountersSourceCost copy() {return new RemoveAllCountersSourceCost(this);
public int getAmount() {return amount;
class MotltenHydraDynamicValue implements DynamicValue {
public MotltenHydraDynamicValue() {
public MotltenHydraDynamicValue(final MotltenHydraDynamicValue dynamicValue) {
public int calculate(Game game, Ability source, Effect effect) {return count;
public MotltenHydraDynamicValue copy() {return new MotltenHydraDynamicValue(this);
public String toString() {return "1";
public String getMessage() {return "the number of +1/+1 counters removed this way";
public class MotherOfRunes extends CardImpl {
public MotherOfRunes(UUID ownerId) {
public MotherOfRunes(final MotherOfRunes card) {
public MotherOfRunes copy() {return new MotherOfRunes(this);
public class MultaniMaroSorcerer extends CardImpl {
public MultaniMaroSorcerer(UUID ownerId) {
public MultaniMaroSorcerer(final MultaniMaroSorcerer card) {
public MultaniMaroSorcerer copy() {return new MultaniMaroSorcerer(this);
public class MultanisAcolyte extends CardImpl {
public MultanisAcolyte(UUID ownerId) {
public MultanisAcolyte(final MultanisAcolyte card) {
public MultanisAcolyte copy() {return new MultanisAcolyte(this);
public class NoMercy extends CardImpl {
public NoMercy(UUID ownerId) {
public NoMercy(final NoMercy card) {
public NoMercy copy() {return new NoMercy(this);
public class NoMercyTriggeredAbility extends TriggeredAbilityImpl {
public NoMercyTriggeredAbility() {
public NoMercyTriggeredAbility(final NoMercyTriggeredAbility ability) {
public NoMercyTriggeredAbility copy() {return new NoMercyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature deals damage to you, destroy it";
public class OpalChampion extends CardImpl {
public OpalChampion(UUID ownerId) {
public OpalChampion(final OpalChampion card) {
public OpalChampion copy() {return new OpalChampion(this);
class OpalChampionKnight extends Token {
public OpalChampionKnight() {
public class Opportunity extends CardImpl {
public Opportunity(UUID ownerId) {
public Opportunity(final Opportunity card) {
public Opportunity copy() {return new Opportunity(this);
public class Ostracize extends CardImpl {
public Ostracize(UUID ownerId) {
public Ostracize(final Ostracize card) {
public Ostracize copy() {return new Ostracize(this);
public class Palinchron extends CardImpl {
public Palinchron(UUID ownerId) {
public Palinchron(final Palinchron card) {
public Palinchron copy() {return new Palinchron(this);
public class PhyrexianBroodlings extends CardImpl {
public PhyrexianBroodlings(UUID ownerId) {
public PhyrexianBroodlings(final PhyrexianBroodlings card) {
public PhyrexianBroodlings copy() {return new PhyrexianBroodlings(this);
public class PhyrexianDebaser extends CardImpl {
public PhyrexianDebaser(UUID ownerId) {
public PhyrexianDebaser(final PhyrexianDebaser card) {
public PhyrexianDebaser copy() {return new PhyrexianDebaser(this);
public class PhyrexianDefiler extends CardImpl {
public PhyrexianDefiler(UUID ownerId) {
public PhyrexianDefiler(final PhyrexianDefiler card) {
public PhyrexianDefiler copy() {return new PhyrexianDefiler(this);
public class PhyrexianDenouncer extends CardImpl {
public PhyrexianDenouncer(UUID ownerId) {
public PhyrexianDenouncer(final PhyrexianDenouncer card) {
public PhyrexianDenouncer copy() {return new PhyrexianDenouncer(this);
public class PhyrexianPlaguelord extends CardImpl {
public PhyrexianPlaguelord(UUID ownerId) {
public PhyrexianPlaguelord(final PhyrexianPlaguelord card) {
public PhyrexianPlaguelord copy() {return new PhyrexianPlaguelord(this);
public class PhyrexianReclamation extends CardImpl {
public PhyrexianReclamation(UUID ownerId) {
public PhyrexianReclamation(final PhyrexianReclamation card) {
public PhyrexianReclamation copy() {return new PhyrexianReclamation(this);
public class PlanarCollapse extends CardImpl {
public PlanarCollapse(UUID ownerId) {
public PlanarCollapse(final PlanarCollapse card) {
public PlanarCollapse copy() {return new PlanarCollapse(this);
public boolean apply(Game game, Ability source) {return game.getBattlefield().count(new FilterCreaturePermanent(), source.getSourceId(), source.getControllerId(), game) >= 4;return new Purify(this);
public class PygmyPyrosaur extends CardImpl {
public PygmyPyrosaur(UUID ownerId) {
public PygmyPyrosaur(final PygmyPyrosaur card) {
public PygmyPyrosaur copy() {return new PygmyPyrosaur(this);
public class Pyromancy extends CardImpl {
public Pyromancy(UUID ownerId) {
public Pyromancy(final Pyromancy card) {
public Pyromancy copy() {return new Pyromancy(this);
public class RackAndRuin extends CardImpl {
public RackAndRuin(UUID ownerId) {
public RackAndRuin(final RackAndRuin card) {
public RackAndRuin copy() {return new RackAndRuin(this);
public class RadiantArchangel extends CardImpl {
public RadiantArchangel(UUID ownerId) {
public RadiantArchangel(final RadiantArchangel card) {
public RadiantArchangel copy() {return new RadiantArchangel(this);
public class RadiantsDragoons extends CardImpl {
public RadiantsDragoons(UUID ownerId) {
public RadiantsDragoons(final RadiantsDragoons card) {
public RadiantsDragoons copy() {return new RadiantsDragoons(this);
public class RadiantsJudgment extends CardImpl {
public RadiantsJudgment(UUID ownerId) {
public RadiantsJudgment(final RadiantsJudgment card) {
public RadiantsJudgment copy() {return new RadiantsJudgment(this);
public class Rancor extends CardImpl {
public Rancor(UUID ownerId) {
public Rancor(final Rancor card) {
public Rancor copy() {return new Rancor(this);
public class RankAndFile extends CardImpl {
public RankAndFile(UUID ownerId) {
public RankAndFile(final RankAndFile card) {
public RankAndFile copy() {return new RankAndFile(this);
public class RavenFamiliar extends CardImpl {
public RavenFamiliar(UUID ownerId) {
public RavenFamiliar(final RavenFamiliar card) {
public RavenFamiliar copy() {return new RavenFamiliar(this);
class RavenFamiliarEffect extends OneShotEffect {
public RavenFamiliarEffect() {
public RavenFamiliarEffect(final RavenFamiliarEffect effect) {
public RavenFamiliarEffect copy() {return new RavenFamiliarEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Rebuild extends CardImpl {
public Rebuild(UUID ownerId) {
public Rebuild(final Rebuild card) {
public Rebuild copy() {return new Rebuild(this);
class RebuildEffect extends OneShotEffect {
public RebuildEffect() {
public RebuildEffect(final RebuildEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public RebuildEffect copy() {return new RebuildEffect(this);
public class Rivalry extends CardImpl {
public Rivalry(UUID ownerId) {
public Rivalry(final Rivalry card) {
public Rivalry copy() {return new Rivalry(this);
class RivalryTriggeredAbility extends TriggeredAbilityImpl {
public RivalryTriggeredAbility() {
public RivalryTriggeredAbility(final RivalryTriggeredAbility ability) {
public RivalryTriggeredAbility copy() {return new RivalryTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public boolean checkInterveningIfClause(Game game) {return false;return true;return false;
public String getRule() {return "At the beginning of each player's upkeep, if that player controls more lands than each other player, Rivalry deals 2 damage to him or her.";
public class Scrapheap extends CardImpl {
public Scrapheap(UUID ownerId) {
public Scrapheap(final Scrapheap card) {
public Scrapheap copy() {return new Scrapheap(this);
class ScrapheapTriggeredAbility extends TriggeredAbilityImpl {
public ScrapheapTriggeredAbility copy() {return new ScrapheapTriggeredAbility(this);
public ScrapheapTriggeredAbility(final ScrapheapTriggeredAbility ability){
public ScrapheapTriggeredAbility(){
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever an artifact or enchantment is put into your graveyard from the battlefield, you gain 1 life.";
public class SecondChance extends CardImpl {
public SecondChance(UUID ownerId) {
public SecondChance(final SecondChance card) {
public SecondChance copy() {return new SecondChance(this);
public boolean apply(Game game, Ability source) {return game.getPlayer(source.getControllerId()).getLife() <= 5;
public class ShivanPhoenix extends CardImpl {
public ShivanPhoenix(UUID ownerId) {
public ShivanPhoenix(final ShivanPhoenix card) {
public ShivanPhoenix copy() {return new ShivanPhoenix(this);
public class SickAndTired extends CardImpl {
public SickAndTired(UUID ownerId) {
public SickAndTired(final SickAndTired card) {
public SickAndTired copy() {return new SickAndTired(this);
public class SilkNet extends CardImpl {
public SilkNet(UUID ownerId) {
public SilkNet(final SilkNet card) {
public SilkNet copy() {return new SilkNet(this);
public class SimianGrunts extends CardImpl {
public SimianGrunts(UUID ownerId) {
public SimianGrunts(final SimianGrunts card) {
public SimianGrunts copy() {return new SimianGrunts(this);
public class SleepersGuile extends CardImpl {
public SleepersGuile(UUID ownerId) {
public SleepersGuile(final SleepersGuile card) {
public SleepersGuile copy() {return new SleepersGuile(this);
public class SlowMotion extends CardImpl {
public SlowMotion(UUID ownerId) {
public SlowMotion(final SlowMotion card) {
public SlowMotion copy() {return new SlowMotion(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;return new SacrificeEquipedUnlessPaysEffect(this);
public class Sluggishness extends CardImpl {
public Sluggishness(UUID ownerId) {
public Sluggishness(final Sluggishness card) {
public Sluggishness copy() {return new Sluggishness(this);
public class Snap extends CardImpl {
public Snap(UUID ownerId) {
public Snap(final Snap card) {
public Snap copy() {return new Snap(this);
public class Subversion extends CardImpl {
public Subversion(UUID ownerId) {
public Subversion(final Subversion card) {
public Subversion copy() {return new Subversion(this);
class SubversionEffect extends OneShotEffect {
public SubversionEffect() {
public SubversionEffect(final SubversionEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SubversionEffect copy() {return new SubversionEffect(this);
public class SustainerOfTheRealm extends CardImpl {
public SustainerOfTheRealm(UUID ownerId) {
public SustainerOfTheRealm(final SustainerOfTheRealm card) {
public SustainerOfTheRealm copy() {return new SustainerOfTheRealm(this);
public class TetheredSkirge extends CardImpl {
public TetheredSkirge(UUID ownerId) {
public TetheredSkirge(final TetheredSkirge card) {
public TetheredSkirge copy() {return new TetheredSkirge(this);
public class ThornwindFaeries extends CardImpl {
public ThornwindFaeries(UUID ownerId) {
public ThornwindFaeries(final ThornwindFaeries card) {
public ThornwindFaeries copy() {return new ThornwindFaeries(this);
public class ThranLens extends CardImpl {
public ThranLens(UUID ownerId) {
public ThranLens(final ThranLens card) {
public ThranLens copy() {return new ThranLens(this);
class ThranLensEffect extends ContinuousEffectImpl {
public boolean apply(Game game, Ability source) {return true;
public ThranLensEffect copy() {return new ThranLensEffect(this);
private ThranLensEffect(ThranLensEffect effect) {
public class ThranWarMachine extends CardImpl {
public ThranWarMachine(UUID ownerId) {
public ThranWarMachine(final ThranWarMachine card) {
public ThranWarMachine copy() {return new ThranWarMachine(this);
public class ThranWeaponry extends CardImpl {
public ThranWeaponry(UUID ownerId) {
public ThranWeaponry(final ThranWeaponry card) {
public ThranWeaponry copy() {return new ThranWeaponry(this);
class ThranWeaponryEffect extends BoostAllEffect{
public ThranWeaponryEffect() {
public ThranWeaponryEffect(final ThranWeaponryEffect effect) {
public ThranWeaponryEffect copy() {return new ThranWeaponryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TragicPoet extends CardImpl {
public TragicPoet(UUID ownerId) {
public TragicPoet(final TragicPoet card) {
public TragicPoet copy() {return new TragicPoet(this);
public class TreefolkMystic extends CardImpl {
public TreefolkMystic(UUID ownerId) {
public TreefolkMystic(final TreefolkMystic card) {
public TreefolkMystic copy() {return new TreefolkMystic(this);
class TreefolkMysticEffect extends OneShotEffect {
public TreefolkMysticEffect() {
public TreefolkMysticEffect(final TreefolkMysticEffect effect) {
public TreefolkMysticEffect copy() {return new TreefolkMysticEffect(this);
public boolean apply(Game game, Ability source) {
{return false;
public String getText(Mode mode) {return "destroy all Auras attached to that creature";
public class Unearth extends CardImpl {
public Unearth(UUID ownerId) {
public Unearth(final Unearth card) {
public Unearth copy() {return new Unearth(this);
public class UrzasBlueprints extends CardImpl {
public UrzasBlueprints(UUID ownerId) {
public UrzasBlueprints(final UrzasBlueprints card) {
public UrzasBlueprints copy() {return new UrzasBlueprints(this);
public class ViashinoCutthroat extends CardImpl {
public ViashinoCutthroat(UUID ownerId) {
public ViashinoCutthroat(final ViashinoCutthroat card) {
public ViashinoCutthroat copy() {return new ViashinoCutthroat(this);
public class ViashinoHeretic extends CardImpl {
public ViashinoHeretic(UUID ownerId) {
public ViashinoHeretic(final ViashinoHeretic card) {
public ViashinoHeretic copy() {return new ViashinoHeretic(this);
class ViashinoHereticEffect extends OneShotEffect {
public ViashinoHereticEffect() {
public ViashinoHereticEffect(final ViashinoHereticEffect effect) {
public ViashinoHereticEffect copy() {return new ViashinoHereticEffect(this);
public boolean apply(Game game, Ability source) {
{return true;return false;
public String getText(Mode mode) {return "Destroy target artifact. Viashino Heretic deals damage to that artifact's controller equal to the artifact's converted mana cost";
public class ViashinoSandscout extends CardImpl {
public ViashinoSandscout(UUID ownerId) {
public ViashinoSandscout(final ViashinoSandscout card) {
public ViashinoSandscout copy() {return new ViashinoSandscout(this);
public class VigilantDrake extends CardImpl {
public VigilantDrake(UUID ownerId) {
public VigilantDrake(final VigilantDrake card) {
public VigilantDrake copy() {return new VigilantDrake(this);
public class WeatherseedElf extends CardImpl {
public WeatherseedElf(UUID ownerId) {
public WeatherseedElf(final WeatherseedElf card) {
public WeatherseedElf copy() {return new WeatherseedElf(this);
public class WeatherseedFaeries extends CardImpl {
public WeatherseedFaeries(UUID ownerId) {
public WeatherseedFaeries(final WeatherseedFaeries card) {
public WeatherseedFaeries copy() {return new WeatherseedFaeries(this);
public class WeatherseedTreefolk extends CardImpl {
public WeatherseedTreefolk(UUID ownerId) {
public WeatherseedTreefolk(final WeatherseedTreefolk card) {
public WeatherseedTreefolk copy() {return new WeatherseedTreefolk(this);
public class WheelOfTorture extends CardImpl {
public WheelOfTorture(UUID ownerId) {
public WheelOfTorture(final WheelOfTorture card) {
public WheelOfTorture copy() {return new WheelOfTorture(this);
class WheelOfTortureEffect extends OneShotEffect {
private WheelOfTortureEffect(final WheelOfTortureEffect effect) {
public WheelOfTortureEffect() {
public boolean apply(Game game, Ability source) {
{return true;return false;
public WheelOfTortureEffect copy() {return new WheelOfTortureEffect(this);
public String getText(Mode mode) {return "Wheel of Torture deals X damage to that player, where X is 3 minus the number of cards in his or her hand";
public class WingSnare extends CardImpl {
public WingSnare(UUID ownerId) {
public WingSnare(final WingSnare card) {
public WingSnare copy() {return new WingSnare(this);
public class YavimayaGranger extends CardImpl {
public YavimayaGranger(UUID ownerId) {
public YavimayaGranger(final YavimayaGranger card) {
public YavimayaGranger copy() {return new YavimayaGranger(this);
public class YavimayaScion extends CardImpl {
public YavimayaScion(UUID ownerId) {
public YavimayaScion(final YavimayaScion card) {
public YavimayaScion copy() {return new YavimayaScion(this);
public class AbsoluteGrace extends CardImpl {
public AbsoluteGrace(UUID ownerId) {
public AbsoluteGrace(final AbsoluteGrace card) {
public AbsoluteGrace copy() {return new AbsoluteGrace(this);
public class AbsoluteLaw extends CardImpl {
public AbsoluteLaw(UUID ownerId) {
public AbsoluteLaw(final AbsoluteLaw card) {
public AbsoluteLaw copy() {return new AbsoluteLaw(this);
public class AbyssalHorror extends CardImpl {
public AbyssalHorror (UUID ownerId) {
public AbyssalHorror (final AbyssalHorror card) {
public AbyssalHorror copy() {return new AbyssalHorror(this);
public class AlbinoTroll extends CardImpl{
public AlbinoTroll(UUID ownerId) {
public AlbinoTroll(final AlbinoTroll card) {
public AlbinoTroll copy() {return new AlbinoTroll(this);
public class Anaconda extends CardImpl {
public Anaconda (UUID ownerId) {
public Anaconda (final Anaconda card) {
public Anaconda copy() {return new Anaconda(this);
public class AngelicChorus extends CardImpl {
public AngelicChorus(UUID ownerId) {
public AngelicChorus(final AngelicChorus card) {
public AngelicChorus copy() {return new AngelicChorus(this);
class AngelicChorusTriggeredAbility extends TriggeredAbilityImpl {
public AngelicChorusTriggeredAbility() {
public AngelicChorusTriggeredAbility(AngelicChorusTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature enters the battlefield under your control, you gain life equal to its toughness.";
public AngelicChorusTriggeredAbility copy() {return new AngelicChorusTriggeredAbility(this);
class AngelicChorusEffect extends OneShotEffect {
public AngelicChorusEffect() {
public AngelicChorusEffect(final AngelicChorusEffect effect) {
public AngelicChorusEffect copy() {return new AngelicChorusEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class AngelicPage extends CardImpl {
public AngelicPage(UUID ownerId) {
public AngelicPage(final AngelicPage card) {
public AngelicPage copy() {return new AngelicPage(this);
public class ArcaneLaboratory extends CardImpl {
public ArcaneLaboratory(UUID ownerId) {
public ArcaneLaboratory(final ArcaneLaboratory card) {
public ArcaneLaboratory copy() {return new ArcaneLaboratory(this);
public class ArcLightning extends CardImpl {
public ArcLightning(UUID ownerId) {
public ArcLightning(final ArcLightning card) {
public ArcLightning copy() {return new ArcLightning(this);
public class ArgothianElder extends CardImpl {
public ArgothianElder(UUID ownerId) {
public ArgothianElder(final ArgothianElder card) {
public ArgothianElder copy() {return new ArgothianElder(this);
public class ArgothianEnchantress extends CardImpl {
public ArgothianEnchantress(UUID ownerId) {
public ArgothianEnchantress(final ArgothianEnchantress card) {
public ArgothianEnchantress copy() {return new ArgothianEnchantress(this);
public class ArgothianSwine extends CardImpl {
public ArgothianSwine (UUID ownerId) {
public ArgothianSwine (final ArgothianSwine card) {
public ArgothianSwine copy() {return new ArgothianSwine(this);
public class ArgothianWurm extends CardImpl {
public ArgothianWurm(UUID ownerId) {
public ArgothianWurm(final ArgothianWurm card) {
public ArgothianWurm copy() {return new ArgothianWurm(this);
class ArgothianWurmEffect extends PutOnLibrarySourceEffect {
ArgothianWurmEffect() {
ArgothianWurmEffect(final ArgothianWurmEffect effect) {
public ArgothianWurmEffect copy() {return new ArgothianWurmEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Attunement extends CardImpl {
public Attunement(UUID ownerId) {
public Attunement(final Attunement card) {
public Attunement copy() {return new Attunement(this);
public class BackToBasics extends CardImpl {
public BackToBasics(UUID ownerId) {
public BackToBasics(final BackToBasics card) {
public BackToBasics copy() {return new BackToBasics(this);
public class BarrinMasterWizard extends CardImpl {
public BarrinMasterWizard(UUID ownerId) {
public BarrinMasterWizard(final BarrinMasterWizard card) {
public BarrinMasterWizard copy() {return new BarrinMasterWizard(this);
public class BarrinsCodex extends CardImpl {
public BarrinsCodex(UUID ownerId) {
public BarrinsCodex(final BarrinsCodex card) {
public BarrinsCodex copy() {return new BarrinsCodex(this);
public class Bedlam extends CardImpl {
public Bedlam(UUID ownerId) {
public Bedlam(final Bedlam card) {
public Bedlam copy() {return new Bedlam(this);
class BedlamEffect extends RestrictionEffect {
BedlamEffect() {
BedlamEffect(final BedlamEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public BedlamEffect copy() {return new BedlamEffect(this);
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public class Bereavement extends CardImpl {
public Bereavement(UUID ownerId) {
public Bereavement(final Bereavement card) {
public Bereavement copy() {return new Bereavement(this);
class BereavementTriggeredAbility extends TriggeredAbilityImpl {
public BereavementTriggeredAbility() {
public BereavementTriggeredAbility(final BereavementTriggeredAbility ability) {
public BereavementTriggeredAbility copy() {return new BereavementTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a green creature dies, its controller discards a card";
public class BlanchwoodTreefolk extends CardImpl {
public BlanchwoodTreefolk (UUID ownerId) {
public BlanchwoodTreefolk (final BlanchwoodTreefolk card) {
public BlanchwoodTreefolk copy() {return new BlanchwoodTreefolk(this);
public class BlastedLandscape extends CardImpl {
public BlastedLandscape(UUID ownerId) {
public BlastedLandscape(final BlastedLandscape card) {
public BlastedLandscape copy() {return new BlastedLandscape(this);
public class Breach extends CardImpl {
public Breach(UUID ownerId) {
public Breach(final Breach card) {
public Breach copy() {return new Breach(this);
public class BrilliantHalo extends CardImpl {
public BrilliantHalo(UUID ownerId) {
public BrilliantHalo(final BrilliantHalo card) {
public BrilliantHalo copy() {return new BrilliantHalo(this);
public class BullHippo extends CardImpl {
public BullHippo (UUID ownerId) {
public BullHippo (final BullHippo card) {
public BullHippo copy() {return new BullHippo(this);
public class Bulwark extends CardImpl {
public Bulwark(UUID ownerId) {
public Bulwark(final Bulwark card) {
public Bulwark copy() {return new Bulwark(this);
class BulwarkDamageEffect extends OneShotEffect {
public BulwarkDamageEffect() {
public BulwarkDamageEffect(final BulwarkDamageEffect effect) {
public BulwarkDamageEffect copy() {return new BulwarkDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CacklingFiend extends CardImpl {
public CacklingFiend(UUID ownerId) {
public CacklingFiend(final CacklingFiend card) {
public CacklingFiend copy() {return new CacklingFiend(this);
public class CarpetOfFlowers extends CardImpl {
public CarpetOfFlowers(UUID ownerId) {
public CarpetOfFlowers(final CarpetOfFlowers card) {
public CarpetOfFlowers copy() {return new CarpetOfFlowers(this);
class CarpetOfFlowersTriggeredAbility extends TriggeredAbilityImpl {
public CarpetOfFlowersTriggeredAbility() {
public CarpetOfFlowersTriggeredAbility(final CarpetOfFlowersTriggeredAbility ability) {
public CarpetOfFlowersTriggeredAbility copy() {return new CarpetOfFlowersTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.PRECOMBAT_MAIN_PHASE_PRE
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public boolean checkInterveningIfClause(Game game) {
{return true;
{return !activated;
public boolean resolve(Game game) {
{return value;
public void reset(Game game) {
public String getRule() {return sb.append(super.getRule()).toString();
class CarpetOfFlowersEffect extends ManaEffect {
CarpetOfFlowersEffect() {
CarpetOfFlowersEffect(final CarpetOfFlowersEffect effect) {
public boolean apply(Game game, Ability source) {return false;
{return true;return false;
public Mana getMana(Game game, Ability source) {return null;
public CarpetOfFlowersEffect copy() {return new CarpetOfFlowersEffect(this);
public class CarrionBeetles extends CardImpl {
public CarrionBeetles(UUID ownerId) {
public CarrionBeetles(final CarrionBeetles card) {
public CarrionBeetles copy() {return new CarrionBeetles(this);
class CarrionBeetlesExileEffect extends OneShotEffect {
public CarrionBeetlesExileEffect() {
public CarrionBeetlesExileEffect(final CarrionBeetlesExileEffect effect) {
public CarrionBeetlesExileEffect copy() {return new CarrionBeetlesExileEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Catalog extends CardImpl {
public Catalog(UUID ownerId) {
public Catalog(final Catalog card) {
public Catalog copy() {return new Catalog(this);
public class Catastrophe extends CardImpl {
public Catastrophe(UUID ownerId) {
public Catastrophe(final Catastrophe card) {
public Catastrophe copy() {return new Catastrophe(this);
class CatastropheEffect extends OneShotEffect {
public CatastropheEffect() {
public CatastropheEffect(final CatastropheEffect effect) {
public CatastropheEffect copy() {return new CatastropheEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CaveTiger extends CardImpl {
public CaveTiger(UUID ownerId) {
public CaveTiger(final CaveTiger card) {
public CaveTiger copy() {return new CaveTiger(this);
public class ChildOfGaea extends CardImpl {
public ChildOfGaea(UUID ownerId) {
public ChildOfGaea(final ChildOfGaea card) {
public ChildOfGaea copy() {return new ChildOfGaea(this);
public class ChimericStaff extends CardImpl {
public ChimericStaff(UUID ownerId) {
public ChimericStaff(final ChimericStaff card) {
public ChimericStaff copy() {return new ChimericStaff(this);
class ChimericStaffEffect extends ContinuousEffectImpl {
public ChimericStaffEffect() {
public ChimericStaffEffect(final ChimericStaffEffect effect) {
public ChimericStaffEffect copy() {return new ChimericStaffEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
private void setText() {
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.TypeChangingEffects_4;
public class CitanulCentaurs extends CardImpl{
public CitanulCentaurs(UUID ownerId) {
public CitanulCentaurs(final CitanulCentaurs card) {
public CitanulCentaurs copy() {return new CitanulCentaurs(this);
public class CitanulFlute extends CardImpl {
public CitanulFlute(UUID ownerId) {
public CitanulFlute(final CitanulFlute card) {
public CitanulFlute copy() {return new CitanulFlute(this);
class CitanulFluteSearchEffect extends OneShotEffect {
public CitanulFluteSearchEffect() {
public CitanulFluteSearchEffect(final CitanulFluteSearchEffect effect) {
public CitanulFluteSearchEffect copy() {return new CitanulFluteSearchEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return false;
public class CitanulHierophants extends CardImpl {
public CitanulHierophants(UUID ownerId) {
public CitanulHierophants(final CitanulHierophants card) {
public CitanulHierophants copy() {return new CitanulHierophants(this);
public class ClawsOfGix extends CardImpl {
public ClawsOfGix(UUID ownerId) {
public ClawsOfGix(final ClawsOfGix card) {
public ClawsOfGix copy() {return new ClawsOfGix(this);
public class Clear extends CardImpl {
public Clear(UUID ownerId) {
public Clear(final Clear card) {
public Clear copy() {return new Clear(this);
public class CloakOfMists extends CardImpl {
public CloakOfMists(UUID ownerId) {
public CloakOfMists(final CloakOfMists card) {
public CloakOfMists copy() {return new CloakOfMists(this);
public class Contamination extends CardImpl {
public Contamination(UUID ownerId) {
public Contamination(final Contamination card) {
public Contamination copy() {return new Contamination(this);
class ContaminationReplacementEffect extends ReplacementEffectImpl {
ContaminationReplacementEffect() {
ContaminationReplacementEffect(final ContaminationReplacementEffect effect) {
public ContaminationReplacementEffect copy() {return new ContaminationReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean applies(GameEvent event, Ability source, Game game) {return mageObject != null && mageObject.getCardType().contains(CardType.LAND);
public class CopperGnomes extends CardImpl {
public CopperGnomes(UUID ownerId) {
public CopperGnomes(final CopperGnomes card) {
public CopperGnomes copy() {return new CopperGnomes(this);return new PutArtifactOnBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {return false;return controller.moveCards(card, Zone.BATTLEFIELD, source, game);return false;
public class CradleGuard extends CardImpl{
public CradleGuard(UUID ownerId) {
public CradleGuard(final CradleGuard card) {
public CradleGuard copy() {return new CradleGuard(this);
public class CraterHellion extends CardImpl{
public CraterHellion(UUID ownerId) {
public CraterHellion(final CraterHellion card) {
public CraterHellion copy() {return new CraterHellion(this);
class CraterHellionEffect extends OneShotEffect {
public CraterHellionEffect() {
public CraterHellionEffect(final CraterHellionEffect effect) {
public CraterHellionEffect copy() {return new CraterHellionEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class CrazedSkirge extends CardImpl {
public CrazedSkirge (UUID ownerId) {
public CrazedSkirge (final CrazedSkirge card) {
public CrazedSkirge copy() {return new CrazedSkirge(this);
public class Crosswinds extends CardImpl {
public Crosswinds(UUID ownerId) {
public Crosswinds(final Crosswinds card) {
public Crosswinds copy() {return new Crosswinds(this);
public class DarkHatchling extends CardImpl {
public DarkHatchling (UUID ownerId) {
public DarkHatchling (final DarkHatchling card) {
public DarkHatchling copy() {return new DarkHatchling(this);
public class Despondency extends CardImpl {
public Despondency(UUID ownerId) {
public Despondency(final Despondency card) {
public Despondency copy() {return new Despondency(this);
public class DiabolicServitude extends CardImpl {
public DiabolicServitude(UUID ownerId) {
public DiabolicServitude(final DiabolicServitude card) {
public DiabolicServitude copy() {return new DiabolicServitude(this);
class DiabolicServitudeReturnCreatureEffect extends OneShotEffect {
public DiabolicServitudeReturnCreatureEffect() {this.staticText = "return target creature card from your graveyard to the battlefield";
public DiabolicServitudeReturnCreatureEffect(final DiabolicServitudeReturnCreatureEffect effect) {
public DiabolicServitudeReturnCreatureEffect copy() {return new DiabolicServitudeReturnCreatureEffect(this);
public boolean apply(Game game, Ability source) {game.getState().setValue(source.getSourceId().toString() + "returnedCreature", new MageObjectReference(cardInGraveyard.getId(), game));return true;return false;
class DiabolicServitudeCreatureDiesTriggeredAbility extends TriggeredAbilityImpl {
public DiabolicServitudeCreatureDiesTriggeredAbility() {
public DiabolicServitudeCreatureDiesTriggeredAbility(final DiabolicServitudeCreatureDiesTriggeredAbility ability) {
public DiabolicServitudeCreatureDiesTriggeredAbility copy() {return new DiabolicServitudeCreatureDiesTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {Object object = game.getState().getValue(getSourceId().toString() + "returnedCreature");return true;return false;
public String getRule() {return "When the creature put onto the battlefield with {this} dies, exile it and return {this} to its owner's hand.";
class DiabolicServitudeExileCreatureEffect extends OneShotEffect {
public DiabolicServitudeExileCreatureEffect() {this.staticText = "exile it and return {this} to its owner's hand";
public DiabolicServitudeExileCreatureEffect(final DiabolicServitudeExileCreatureEffect effect) {
public DiabolicServitudeExileCreatureEffect copy() {return new DiabolicServitudeExileCreatureEffect(this);
public boolean apply(Game game, Ability source) {Object object = game.getState().getValue(source.getSourceId().toString() + "returnedCreature");return new ReturnToHandSourceEffect(true).apply(game, source);return false;
class DiabolicServitudeSourceLeftBattlefieldEffect extends OneShotEffect {
public DiabolicServitudeSourceLeftBattlefieldEffect() {
public DiabolicServitudeSourceLeftBattlefieldEffect(final DiabolicServitudeSourceLeftBattlefieldEffect effect) {
public DiabolicServitudeSourceLeftBattlefieldEffect copy() {return new DiabolicServitudeSourceLeftBattlefieldEffect(this);
public boolean apply(Game game, Ability source) {Object object = game.getState().getValue(source.getSourceId().toString() + "returnedCreature");return false;
public class DiscipleOfGrace extends CardImpl {
public DiscipleOfGrace(UUID ownerId) {
public DiscipleOfGrace(final DiscipleOfGrace card) {
public DiscipleOfGrace copy() {return new DiscipleOfGrace(this);
public class DiscipleOfLaw extends CardImpl {
public DiscipleOfLaw(UUID ownerId) {
public DiscipleOfLaw(final DiscipleOfLaw card) {
public DiscipleOfLaw copy() {return new DiscipleOfLaw(this);
public class DisruptiveStudent extends CardImpl {
public DisruptiveStudent(UUID ownerId) {
public DisruptiveStudent(final DisruptiveStudent card) {
public DisruptiveStudent copy() {return new DisruptiveStudent(this);
public class Douse extends CardImpl {
public Douse(UUID ownerId) {
public Douse(final Douse card) {
public Douse copy() {return new Douse(this);return new DriftingDjinn(this);return new DriftingMeadow(this);
public class Dromosaur extends CardImpl {
public Dromosaur(UUID ownerId) {
public Dromosaur(final Dromosaur card) {
public Dromosaur copy() {return new Dromosaur(this);
public class EasternPaladin extends CardImpl {
public EasternPaladin(UUID ownerId) {
public EasternPaladin(final EasternPaladin card) {
public EasternPaladin copy() {return new EasternPaladin(this);
public class EliteArchers extends CardImpl {
public EliteArchers(UUID ownerId) {
public EliteArchers(final EliteArchers card) {
public EliteArchers copy() {return new EliteArchers(this);return new Endoskeleton(this);
public class EnergyField extends CardImpl {
public EnergyField(UUID ownerId) {
public EnergyField(final EnergyField card) {
public EnergyField copy() {return new EnergyField(this);
class EnergyFieldEffect extends PreventionEffectImpl {
public EnergyFieldEffect() {
public EnergyFieldEffect(EnergyFieldEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public boolean apply(Game game, Ability source) {return true;
public boolean applies(GameEvent event, Ability source, Game game) {return super.applies(event, source, game);return false;
public EnergyFieldEffect copy() {return new EnergyFieldEffect(this);
public class Exhume extends CardImpl {
public Exhume(UUID ownerId) {
public Exhume(final Exhume card) {
public Exhume copy() {return new Exhume(this);
class ExhumeEffect extends OneShotEffect {
public ExhumeEffect() {
public ExhumeEffect(final ExhumeEffect effect) {
public ExhumeEffect copy() {return new ExhumeEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class Exploration extends CardImpl {
public Exploration(UUID ownerId) {
public Exploration(final Exploration card) {
public Exploration copy() {return new Exploration(this);
public class Expunge extends CardImpl {
public Expunge(UUID ownerId) {
public Expunge(final Expunge card) {
public Expunge copy() {return new Expunge(this);
public class FaithHealer extends CardImpl {
public FaithHealer(UUID ownerId) {
public FaithHealer(final FaithHealer card) {
public FaithHealer copy() {return new FaithHealer(this);
public class Falter extends CardImpl {
public Falter(UUID ownerId) {
public Falter(final Falter card) {
public Falter copy() {return new Falter(this);
public class FaultLine extends CardImpl {
public FaultLine(UUID ownerId) {
public FaultLine(final FaultLine card) {
public FaultLine copy() {return new FaultLine(this);
class FaultLineEffect extends OneShotEffect {
public FaultLineEffect() {
public FaultLineEffect(final FaultLineEffect effect) {
public FaultLineEffect copy() {return new FaultLineEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Fecundity extends CardImpl {
public Fecundity(UUID ownerId) {
public Fecundity(final Fecundity card) {
public Fecundity copy() {return new Fecundity(this);
class FecundityEffect extends OneShotEffect {
public FecundityEffect() {
public FecundityEffect(final FecundityEffect effect) {
public FecundityEffect copy() {return new FecundityEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FertileGround extends CardImpl {
public FertileGround(UUID ownerId) {
public FertileGround(final FertileGround card) {
public FertileGround copy() {return new FertileGround(this);
class FertileGroundTriggeredAbility extends TriggeredManaAbility {
public FertileGroundTriggeredAbility() {
public FertileGroundTriggeredAbility(FertileGroundTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TAPPED_FOR_MANA;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public FertileGroundTriggeredAbility copy() {return new FertileGroundTriggeredAbility(this);
public String getRule() {return "Whenever enchanted land is tapped for mana, its controller adds one mana of any color to his or her mana pool";
public class FieryMantle extends CardImpl {
public FieryMantle(UUID ownerId) {
public FieryMantle(final FieryMantle card) {
public FieryMantle copy() {return new FieryMantle(this);
public class FireAnts extends CardImpl {
public FireAnts(UUID ownerId) {
public FireAnts(final FireAnts card) {
public FireAnts copy() {return new FireAnts(this);
public class Fluctuator extends CardImpl {
public Fluctuator(UUID ownerId) {
public Fluctuator(final Fluctuator card) {
public Fluctuator copy() {return new Fluctuator(this);
public FluctuatorEffect() {
public FluctuatorEffect(final FluctuatorEffect effect) {return abilityToModify.getControllerId().equals(source.getControllerId())return true;return false;
public FluctuatorEffect copy() {return new FluctuatorEffect(this);
public class FogBank extends CardImpl {
public FogBank(UUID ownerId) {
public FogBank(final FogBank card) {
public FogBank copy() {return new FogBank(this);
public class Fortitude extends CardImpl {
public Fortitude(UUID ownerId) {
public Fortitude(final Fortitude card) {
public Fortitude copy() {return new Fortitude(this);
public class GaeasBounty extends CardImpl {
public GaeasBounty(UUID ownerId) {
public GaeasBounty(final GaeasBounty card) {
public GaeasBounty copy() {return new GaeasBounty(this);
public class GaeasCradle extends CardImpl {
public GaeasCradle(UUID ownerId) {
public GaeasCradle(final GaeasCradle card) {
public GaeasCradle copy() {return new GaeasCradle(this);
public class GaeasEmbrace extends CardImpl {
public GaeasEmbrace(UUID ownerId) {
public GaeasEmbrace(final GaeasEmbrace card) {
public GaeasEmbrace copy() {return new GaeasEmbrace(this);
public class GoblinCadets extends CardImpl {
public GoblinCadets(UUID ownerId) {
public GoblinCadets(final GoblinCadets card) {
public GoblinCadets copy() {return new GoblinCadets(this);
class GoblinCadetsChangeControlEffect extends ContinuousEffectImpl {
public GoblinCadetsChangeControlEffect() {
public GoblinCadetsChangeControlEffect(final GoblinCadetsChangeControlEffect effect) {
public GoblinCadetsChangeControlEffect copy() {return new GoblinCadetsChangeControlEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(source.getFirstTarget(), game);return false;
public class GoblinLackey extends CardImpl {
public GoblinLackey(UUID ownerId) {
public GoblinLackey(final GoblinLackey card) {
public GoblinLackey copy() {return new GoblinLackey(this);
public class GoblinMatron extends CardImpl {
public GoblinMatron(UUID ownerId) {
public GoblinMatron(final GoblinMatron card) {
public GoblinMatron copy() {return new GoblinMatron(this);
public class GoblinOffensive extends CardImpl {
public GoblinOffensive(UUID ownerId) {
public GoblinOffensive(final GoblinOffensive card) {
public GoblinOffensive copy() {return new GoblinOffensive(this);
public class GoblinPatrol extends CardImpl{
public GoblinPatrol(UUID ownerId) {
public GoblinPatrol(final GoblinPatrol card) {
public GoblinPatrol copy() {return new GoblinPatrol(this);
public class GoblinRaider extends CardImpl {
public GoblinRaider(UUID ownerId) {
public GoblinRaider(final GoblinRaider card) {
public GoblinRaider copy() {return new GoblinRaider(this);
public class GoblinWarBuggy extends CardImpl{
public GoblinWarBuggy(UUID ownerId) {
public GoblinWarBuggy(final GoblinWarBuggy card) {
public GoblinWarBuggy copy() {return new GoblinWarBuggy(this);
public class GorillaWarrior extends CardImpl {
public GorillaWarrior (UUID ownerId) {
public GorillaWarrior (final GorillaWarrior card) {
public GorillaWarrior copy() {return new GorillaWarrior(this);
public class GraftedSkullcap extends CardImpl {
public GraftedSkullcap(UUID ownerId) {
public GraftedSkullcap(final GraftedSkullcap card) {
public GraftedSkullcap copy() {return new GraftedSkullcap(this);
public class GreatWhale extends CardImpl {
public GreatWhale(UUID ownerId) {
public GreatWhale(final GreatWhale card) {
public GreatWhale copy() {return new GreatWhale(this);
public class Guma extends CardImpl {
public Guma(UUID ownerId) {
public Guma(final Guma card) {
public Guma copy() {return new Guma(this);
public class HawkeaterMoth extends CardImpl {
public HawkeaterMoth (UUID ownerId) {
public HawkeaterMoth (final HawkeaterMoth card) {
public HawkeaterMoth copy() {return new HawkeaterMoth(this);
public class HeraldOfSerra extends CardImpl{
public HeraldOfSerra(UUID ownerId) {
public HeraldOfSerra(final HeraldOfSerra card) {
public HeraldOfSerra copy() {return new HeraldOfSerra(this);
public class HermeticStudy extends CardImpl {
public HermeticStudy(UUID ownerId) {
public HermeticStudy(final HermeticStudy card) {
public HermeticStudy copy() {return new HermeticStudy(this);
public class Hibernation extends CardImpl {
public Hibernation(UUID ownerId) {
public Hibernation(final Hibernation card) {
public Hibernation copy() {return new Hibernation(this);
class HibernationEffect extends OneShotEffect {
public HibernationEffect() {
public HibernationEffect(final HibernationEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public HibernationEffect copy() {return new HibernationEffect(this);
public class HiddenAncients extends CardImpl {
public HiddenAncients(UUID ownerId) {
public HiddenAncients(final HiddenAncients card) {
public HiddenAncients copy() {return new HiddenAncients(this);
class HiddenAncientsTreefolk extends Token {
public HiddenAncientsTreefolk() {
public class HiddenGuerrillas extends CardImpl {
public HiddenGuerrillas(UUID ownerId) {
public HiddenGuerrillas(final HiddenGuerrillas card) {
public HiddenGuerrillas copy() {return new HiddenGuerrillas(this);
class HiddenGuerrillasSoldier extends Token {
public HiddenGuerrillasSoldier() {
public class HiddenSpider extends CardImpl {
public HiddenSpider(UUID ownerId) {
public HiddenSpider(final HiddenSpider card) {
public HiddenSpider copy() {return new HiddenSpider(this);
class HiddenSpiderToken extends Token {
public HiddenSpiderToken() {
public class Hush extends CardImpl {
public Hush(UUID ownerId) {
public Hush(final Hush card) {
public Hush copy() {return new Hush(this);
class HushEffect extends OneShotEffect {
public HushEffect() {
public HushEffect(final HushEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public HushEffect copy() {return new HushEffect(this);
public class IllGottenGains extends CardImpl {
public IllGottenGains(UUID ownerId) {
public IllGottenGains(final IllGottenGains card) {
public IllGottenGains copy() {return new IllGottenGains(this);
class IllGottenGainsEffect extends OneShotEffect {
IllGottenGainsEffect() {this.staticText = ", then returns up to three cards from his or her graveyard to his or her hand.";
IllGottenGainsEffect(final IllGottenGainsEffect effect) {
public IllGottenGainsEffect copy() {return new IllGottenGainsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ImaginaryPet extends CardImpl {
public ImaginaryPet(UUID ownerId) {"At the beginning of your upkeep, if you have a card in hand, return {this} to its owner's hand."));
public ImaginaryPet(final ImaginaryPet card) {
public ImaginaryPet copy() {return new ImaginaryPet(this);
public class IntrepidHero extends CardImpl {
public IntrepidHero(UUID ownerId) {
public IntrepidHero(final IntrepidHero card) {
public IntrepidHero copy() {return new IntrepidHero(this);
public class JaggedLightning extends CardImpl {
public JaggedLightning(UUID ownerId) {
public JaggedLightning(final JaggedLightning card) {
public JaggedLightning copy() {return new JaggedLightning(this);
public class KarnSilverGolem extends CardImpl {
public KarnSilverGolem(UUID ownerId) {
public KarnSilverGolem(final KarnSilverGolem card) {
public KarnSilverGolem copy() {return new KarnSilverGolem(this);
class KarnSilverGolemEffect extends ContinuousEffectImpl {
public KarnSilverGolemEffect() {
public KarnSilverGolemEffect(final KarnSilverGolemEffect effect) {
public KarnSilverGolemEffect copy() {return new KarnSilverGolemEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return false;return true;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.PTChangingEffects_7 || layer == Layer.TypeChangingEffects_4;
public class LayWaste extends CardImpl {
public LayWaste(UUID ownerId) {
public LayWaste(final LayWaste card) {
public LayWaste copy() {return new LayWaste(this);
public class LightningDragon extends CardImpl{
public LightningDragon(UUID ownerId) {
public LightningDragon(final LightningDragon card) {
public LightningDragon copy() {return new LightningDragon(this);
public class LiltingRefrain extends CardImpl {
public LiltingRefrain(UUID ownerId) {
public LiltingRefrain(final LiltingRefrain card) {
public LiltingRefrain copy() {return new LiltingRefrain(this);
public class LingeringMirage extends CardImpl {
public LingeringMirage(UUID ownerId) {
public LingeringMirage(final LingeringMirage card) {
public LingeringMirage copy() {return new LingeringMirage(this);
public class Lull extends CardImpl {
public Lull(UUID ownerId) {
public Lull(final Lull card) {
public Lull copy() {return new Lull(this);
public class LurkingEvil extends CardImpl {
public LurkingEvil(UUID ownerId) {
public LurkingEvil(final LurkingEvil card) {
public LurkingEvil copy() {return new LurkingEvil(this);
class LurkingEvilCost extends CostImpl {
LurkingEvilCost() {
LurkingEvilCost(LurkingEvilCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return controller != null && !(controller.getLife() > 0 && !controller.canPayLifeCost());
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {
public class ManaLeech extends CardImpl {
public ManaLeech(UUID ownerId) {
public ManaLeech(final ManaLeech card) {
public ManaLeech copy() {return new ManaLeech(this);return new Meltdown(this);return new MeltdownEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class Metrognome extends CardImpl {
public Metrognome(UUID ownerId) {
public Metrognome(final Metrognome card) {
public Metrognome copy() {return new Metrognome(this);
class MetrognomeTriggeredAbility extends TriggeredAbilityImpl {
MetrognomeTriggeredAbility() {
MetrognomeTriggeredAbility(final MetrognomeTriggeredAbility ability) {
public MetrognomeTriggeredAbility copy() {return new MetrognomeTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(this.getControllerId()).contains(stackObject.getControllerId());return false;
public String getRule() {return "When a spell or ability an opponent controls causes you to discard {this}, " + super.getRule();
class GnomeToken extends Token {
public GnomeToken() {
public class MidsummerRevel extends CardImpl {
public MidsummerRevel(UUID ownerId) {
public MidsummerRevel(final MidsummerRevel card) {
public MidsummerRevel copy() {return new MidsummerRevel(this);
public class MishrasHelix extends CardImpl {
public MishrasHelix(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public MishrasHelix(final MishrasHelix card) {
public MishrasHelix copy() {return new MishrasHelix(this);
public class MobileFort extends CardImpl {
public MobileFort(UUID ownerId) {
public MobileFort(final MobileFort card) {
public MobileFort copy() {return new MobileFort(this);
public class Morphling extends CardImpl {
public Morphling(UUID ownerId) {
public Morphling(final Morphling card) {
public Morphling copy() {return new Morphling(this);
public class NoRestForTheWicked extends CardImpl {
public NoRestForTheWicked(UUID ownerId) {
public NoRestForTheWicked(final NoRestForTheWicked card) {
public NoRestForTheWicked copy() {return new NoRestForTheWicked(this);
class NoRestForTheWickedEffect extends OneShotEffect {
NoRestForTheWickedEffect() {
NoRestForTheWickedEffect(final NoRestForTheWickedEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public NoRestForTheWickedEffect copy() {return new NoRestForTheWickedEffect(this);
class NoRestForTheWickedWatcher extends Watcher {
public NoRestForTheWickedWatcher() {
public NoRestForTheWickedWatcher(final NoRestForTheWickedWatcher watcher) {
public void watch(GameEvent event, Game game) {
public NoRestForTheWickedWatcher copy() {return new NoRestForTheWickedWatcher(this);
public void reset() {
public class Okk extends CardImpl {
public Okk(UUID ownerId) {
public Okk(final Okk card) {
public Okk copy() {return new Okk(this);
class OkkAttackEffect extends RestrictionEffect {
public OkkAttackEffect() {
public OkkAttackEffect(final OkkAttackEffect effect) {
public OkkAttackEffect copy() {return new OkkAttackEffect(this);
public boolean canAttackCheckAfter(int numberOfAttackers, Ability source, Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return false;return true;return false;
class OkkBlockEffect extends RestrictionEffect {
public OkkBlockEffect() {
public OkkBlockEffect(final OkkBlockEffect effect) {
public OkkBlockEffect copy() {return new OkkBlockEffect(this);
public boolean canBlockCheckAfter(Ability source, Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return false;return true;return false;
public class OpalArchangel extends CardImpl {
public OpalArchangel(UUID ownerId) {
public OpalArchangel(final OpalArchangel card) {
public OpalArchangel copy() {return new OpalArchangel(this);
class OpalArchangelToken extends Token {
public OpalArchangelToken() {
public class OpalCaryatid extends CardImpl {
public OpalCaryatid(UUID ownerId) {
public OpalCaryatid(final OpalCaryatid card) {
public OpalCaryatid copy() {return new OpalCaryatid(this);
class OpalCaryatidSoldier extends Token {
public OpalCaryatidSoldier() {
public class OpalGargoyle extends CardImpl {
public OpalGargoyle(UUID ownerId) {
public OpalGargoyle(final OpalGargoyle card) {
public OpalGargoyle copy() {return new OpalGargoyle(this);
class OpalGargoyleToken extends Token {
public OpalGargoyleToken() {
public class Oppression extends CardImpl {
public Oppression(UUID ownerId) {
public Oppression(final Oppression card) {
public Oppression copy() {return new Oppression(this);
class OppressionTriggeredAbility extends SpellCastAllTriggeredAbility {
public OppressionTriggeredAbility() {
public OppressionTriggeredAbility(OppressionTriggeredAbility ability) {
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public OppressionTriggeredAbility copy() {return new OppressionTriggeredAbility(this);
public class OrderOfYawgmoth extends CardImpl {
public OrderOfYawgmoth(UUID ownerId) {
public OrderOfYawgmoth(final OrderOfYawgmoth card) {
public OrderOfYawgmoth copy() {return new OrderOfYawgmoth(this);
public class ParasiticBond extends CardImpl {
public ParasiticBond(UUID ownerId) {
public ParasiticBond(final ParasiticBond card) {
public ParasiticBond copy() {return new ParasiticBond(this);
public class Pariah extends CardImpl {
public Pariah(UUID ownerId) {
public Pariah(final Pariah card) {
public Pariah copy() {return new Pariah(this);
class PariahEffect extends ReplacementEffectImpl {
PariahEffect() {
PariahEffect(final PariahEffect effect) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_PLAYER;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId());
public boolean apply(Game game, Ability source) {return true;
public PariahEffect copy() {return new PariahEffect(this);
public class PegasusCharger extends CardImpl {
public PegasusCharger(UUID ownerId) {
public PegasusCharger(final PegasusCharger card) {
public PegasusCharger copy() {return new PegasusCharger(this);
public class PendrellDrake extends CardImpl {
public PendrellDrake(UUID ownerId) {
public PendrellDrake(final PendrellDrake card) {
public PendrellDrake copy() {return new PendrellDrake(this);
public class PeregrineDrake extends CardImpl {
public PeregrineDrake(UUID ownerId) {
public PeregrineDrake(final PeregrineDrake card) {
public PeregrineDrake copy() {return new PeregrineDrake(this);
public class Persecute extends CardImpl {
public Persecute(UUID ownerId) {
public Persecute(final Persecute card) {
public Persecute copy() {return new Persecute(this);
class PersecuteEffect extends OneShotEffect {
public PersecuteEffect() {
public PersecuteEffect(final PersecuteEffect effect) {
public PersecuteEffect copy() {return new PersecuteEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;
public class Pestilence extends CardImpl {
public Pestilence(UUID ownerId) {
public Pestilence(final Pestilence card) {
public Pestilence copy() {return new Pestilence(this);
public class PhyrexianProcessor extends CardImpl {
public PhyrexianProcessor(UUID ownerId) {
public PhyrexianProcessor(final PhyrexianProcessor card) {
public PhyrexianProcessor copy() {return new PhyrexianProcessor(this);
class PhyrexianProcessorEffect extends OneShotEffect {
public PhyrexianProcessorEffect() {
public PhyrexianProcessorEffect(final PhyrexianProcessorEffect effect) {
public PhyrexianProcessorEffect copy() {return new PhyrexianProcessorEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class PhyrexianProcessorCreateTokenEffect extends OneShotEffect {
public PhyrexianProcessorCreateTokenEffect() {
public PhyrexianProcessorCreateTokenEffect(PhyrexianProcessorCreateTokenEffect ability) {
public PhyrexianProcessorCreateTokenEffect copy() {return new PhyrexianProcessorCreateTokenEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PhyrexianTower extends CardImpl {
public PhyrexianTower(UUID ownerId) {
public PhyrexianTower(final PhyrexianTower card) {
public PhyrexianTower copy() {return new PhyrexianTower(this);
public class PitTrap extends CardImpl {
public PitTrap(UUID ownerId) {
public PitTrap(final PitTrap card) {
public PitTrap copy() {return new PitTrap(this);
public class PouncingJaguar extends CardImpl{
public PouncingJaguar(UUID ownerId) {
public PouncingJaguar(final PouncingJaguar card) {
public PouncingJaguar copy() {return new PouncingJaguar(this);
public class PriestOfGix extends CardImpl {
public PriestOfGix(UUID ownerId) {
public PriestOfGix(final PriestOfGix card) {
public PriestOfGix copy() {return new PriestOfGix(this);
public class PriestOfTitania extends CardImpl {
public PriestOfTitania(UUID ownerId) {
public PriestOfTitania(final PriestOfTitania card) {
public PriestOfTitania copy() {return new PriestOfTitania(this);
public class RainOfFilth extends CardImpl {
public RainOfFilth(UUID ownerId) {
public RainOfFilth(final RainOfFilth card) {
public RainOfFilth copy() {return new RainOfFilth(this);
public class RainOfSalt extends CardImpl {
public RainOfSalt(UUID ownerId) {
public RainOfSalt(final RainOfSalt card) {
public RainOfSalt copy() {return new RainOfSalt(this);
public class RavenousSkirge extends CardImpl {
public RavenousSkirge(UUID ownerId) {
public void build() {
public RavenousSkirge(final RavenousSkirge card) {
public RavenousSkirge copy() {return new RavenousSkirge(this);
public class Raze extends CardImpl {
public Raze(UUID ownerId) {
public Raze(final Raze card) {
public Raze copy() {return new Raze(this);
public class Redeem extends CardImpl {
public Redeem(UUID ownerId) {
public Redeem(final Redeem card) {
public Redeem copy() {return new Redeem(this);
public class Reflexes extends CardImpl {
public Reflexes(UUID ownerId) {
public Reflexes(final Reflexes card) {
public Reflexes copy() {return new Reflexes(this);
public class Rejuvenate extends CardImpl {
public Rejuvenate (UUID ownerId) {
public Rejuvenate (final Rejuvenate card) {
public Rejuvenate copy() {return new Rejuvenate(this);
public class RemoteIsle extends CardImpl {
public RemoteIsle(UUID ownerId) {
public RemoteIsle(final RemoteIsle card) {
public RemoteIsle copy() {return new RemoteIsle(this);
public class Rescind extends CardImpl {
public Rescind(UUID ownerId) {
public Rescind(final Rescind card) {
public Rescind copy() {return new Rescind(this);
public class Retaliation extends CardImpl {
public Retaliation(UUID ownerId) {
public Retaliation(final Retaliation card) {
public Retaliation copy() {return new Retaliation(this);
public class Rewind extends CardImpl {
public Rewind(UUID ownerId) {
public Rewind(final Rewind card) {
public Rewind copy() {return new Rewind(this);return new RuneOfProtectionArtifacts(this);return new RuneOfProtectionArtifactsEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
private void preventDamage(GameEvent event, Ability source, UUID target, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class RuneOfProtectionBlack extends CardImpl {
public RuneOfProtectionBlack(UUID ownerId) {
public RuneOfProtectionBlack(final RuneOfProtectionBlack card) {
public RuneOfProtectionBlack copy() {return new RuneOfProtectionBlack(this);
class RuneOfProtectionBlackEffect extends PreventionEffectImpl {
public RuneOfProtectionBlackEffect() {
public RuneOfProtectionBlackEffect(final RuneOfProtectionBlackEffect effect) {
public RuneOfProtectionBlackEffect copy() {return new RuneOfProtectionBlackEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
private void preventDamage(GameEvent event, Ability source, UUID target, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class RuneOfProtectionBlue extends CardImpl {
public RuneOfProtectionBlue(UUID ownerId) {
public RuneOfProtectionBlue(final RuneOfProtectionBlue card) {
public RuneOfProtectionBlue copy() {return new RuneOfProtectionBlue(this);
class RuneOfProtectionBlueEffect extends PreventionEffectImpl {
public RuneOfProtectionBlueEffect() {
public RuneOfProtectionBlueEffect(final RuneOfProtectionBlueEffect effect) {
public RuneOfProtectionBlueEffect copy() {return new RuneOfProtectionBlueEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
private void preventDamage(GameEvent event, Ability source, UUID target, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class RuneOfProtectionGreen extends CardImpl {
public RuneOfProtectionGreen(UUID ownerId) {
public RuneOfProtectionGreen(final RuneOfProtectionGreen card) {
public RuneOfProtectionGreen copy() {return new RuneOfProtectionGreen(this);
class RuneOfProtectionGreenEffect extends PreventionEffectImpl {
public RuneOfProtectionGreenEffect() {
public RuneOfProtectionGreenEffect(final RuneOfProtectionGreenEffect effect) {
public RuneOfProtectionGreenEffect copy() {return new RuneOfProtectionGreenEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
private void preventDamage(GameEvent event, Ability source, UUID target, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class RuneOfProtectionWhite extends CardImpl {
public RuneOfProtectionWhite(UUID ownerId) {
public RuneOfProtectionWhite(final RuneOfProtectionWhite card) {
public RuneOfProtectionWhite copy() {return new RuneOfProtectionWhite(this);
class RuneOfProtectionWhiteEffect extends PreventionEffectImpl {
public RuneOfProtectionWhiteEffect() {
public RuneOfProtectionWhiteEffect(final RuneOfProtectionWhiteEffect effect) {
public RuneOfProtectionWhiteEffect copy() {return new RuneOfProtectionWhiteEffect(this);
public boolean apply(Game game, Ability source) {return true;
public void init(Ability source, Game game) {
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
private void preventDamage(GameEvent event, Ability source, UUID target, Game game) {
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class SanctumCustodian extends CardImpl {
public SanctumCustodian(UUID ownerId) {
public SanctumCustodian(final SanctumCustodian card) {
public SanctumCustodian copy() {return new SanctumCustodian(this);
public class SandbarMerfolk extends CardImpl {
public SandbarMerfolk(UUID ownerId) {
public SandbarMerfolk(final SandbarMerfolk card) {
public SandbarMerfolk copy() {return new SandbarMerfolk(this);
public class SandbarSerpent extends CardImpl {
public SandbarSerpent(UUID ownerId) {
public SandbarSerpent(final SandbarSerpent card) {
public SandbarSerpent copy() {return new SandbarSerpent(this);
public class SanguineGuard extends CardImpl{
public SanguineGuard(UUID ownerId) {
public SanguineGuard(final SanguineGuard card) {
public SanguineGuard copy() {return new SanguineGuard(this);
public class Scald extends CardImpl {
public Scald(UUID ownerId) {
public Scald(final Scald card) {
public Scald copy() {return new Scald(this);
public class Scrap extends CardImpl {
public Scrap(UUID ownerId) {
public Scrap(final Scrap card) {
public Scrap copy() {return new Scrap(this);
public class SerraAvatar extends CardImpl {
public SerraAvatar(UUID ownerId) {
public SerraAvatar(final SerraAvatar card) {
public SerraAvatar copy() {return new SerraAvatar(this);
public class SerrasSanctum extends CardImpl {
public SerrasSanctum(UUID ownerId) {
public SerrasSanctum(final SerrasSanctum card) {
public SerrasSanctum copy() {return new SerrasSanctum(this);
public class SerraZealot extends CardImpl {
public SerraZealot(UUID ownerId) {
public SerraZealot(final SerraZealot card) {
public SerraZealot copy() {return new SerraZealot(this);
public class ShimmeringBarrier extends CardImpl {
public ShimmeringBarrier(UUID ownerId) {
public ShimmeringBarrier(final ShimmeringBarrier card) {
public ShimmeringBarrier copy() {return new ShimmeringBarrier(this);
public class ShivanGorge extends CardImpl {
public ShivanGorge(UUID ownerId) {
public ShivanGorge(final ShivanGorge card) {
public ShivanGorge copy() {return new ShivanGorge(this);
public class ShivanRaptor extends CardImpl{
public ShivanRaptor(UUID ownerId) {
public ShivanRaptor(final ShivanRaptor card) {
public ShivanRaptor copy() {return new ShivanRaptor(this);
public class ShowAndTell extends CardImpl {
public ShowAndTell(UUID ownerId) {
public ShowAndTell(final ShowAndTell card) {
public ShowAndTell copy() {return new ShowAndTell(this);
class ShowAndTellEffect extends OneShotEffect {
public ShowAndTellEffect() {
public ShowAndTellEffect(final ShowAndTellEffect effect) {
public ShowAndTellEffect copy() {return new ShowAndTellEffect(this);
public boolean apply(Game game, Ability source) {return false;return controller.moveCards(cardsToPutIntoPlay, Zone.BATTLEFIELD, source, game, false, false, true, null);
public class Sicken extends CardImpl {
public Sicken(UUID ownerId) {
public Sicken(final Sicken card) {
public Sicken copy() {return new Sicken(this);
public class SilentAttendant extends CardImpl {
public SilentAttendant (UUID ownerId) {
public SilentAttendant (final SilentAttendant card) {
public SilentAttendant copy() {return new SilentAttendant(this);
public class SkitteringSkirge extends CardImpl {
public SkitteringSkirge(UUID ownerId) {
public SkitteringSkirge(final SkitteringSkirge card) {
public SkitteringSkirge copy() {return new SkitteringSkirge(this);
public class SleeperAgent extends CardImpl {
public SleeperAgent(UUID ownerId) {
public SleeperAgent(final SleeperAgent card) {
public SleeperAgent copy() {return new SleeperAgent(this);
class SleeperAgentChangeControlEffect extends ContinuousEffectImpl {
public SleeperAgentChangeControlEffect() {
public SleeperAgentChangeControlEffect(final SleeperAgentChangeControlEffect effect) {
public SleeperAgentChangeControlEffect copy() {return new SleeperAgentChangeControlEffect(this);
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(source.getFirstTarget(), game);return false;
public class SmolderingCrater extends CardImpl {
public SmolderingCrater(UUID ownerId) {
public SmolderingCrater(final SmolderingCrater card) {
public SmolderingCrater copy() {return new SmolderingCrater(this);
public class SneakAttack extends CardImpl {
public SneakAttack(UUID ownerId) {
public SneakAttack(final SneakAttack card) {
public SneakAttack copy() {return new SneakAttack(this);
class SneakAttackEffect extends OneShotEffect {
public SneakAttackEffect() {
public SneakAttackEffect(final SneakAttackEffect effect) {
public SneakAttackEffect copy() {return new SneakAttackEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return true;return false;
public class SpinedFluke extends CardImpl {
public SpinedFluke(UUID ownerId) {
public void build() {
public SpinedFluke(final SpinedFluke card) {
public SpinedFluke copy() {return new SpinedFluke(this);
public class SpireOwl extends CardImpl {
public SpireOwl(UUID ownerId) {
public SpireOwl(final SpireOwl card) {
public SpireOwl copy() {return new SpireOwl(this);
public class SpreadingAlgae extends CardImpl {
public SpreadingAlgae(UUID ownerId) {
public SpreadingAlgae(final SpreadingAlgae card) {
public SpreadingAlgae copy() {return new SpreadingAlgae(this);
public class SteamBlast extends CardImpl {
public SteamBlast(UUID ownerId) {
public SteamBlast(final SteamBlast card) {
public SteamBlast copy() {return new SteamBlast(this);
public class SternProctor extends CardImpl {
public SternProctor(UUID ownerId) {
public SternProctor(final SternProctor card) {
public SternProctor copy() {return new SternProctor(this);
public class StrokeOfGenius extends CardImpl {
public StrokeOfGenius (UUID ownerId) {
public StrokeOfGenius (final StrokeOfGenius card) {
public StrokeOfGenius copy() {return new StrokeOfGenius(this);
public class Sunder extends CardImpl {
public Sunder(UUID ownerId) {
public Sunder(final Sunder card) {
public Sunder copy() {return new Sunder(this);
class SunderEffect extends OneShotEffect {
public SunderEffect() {
public SunderEffect(final SunderEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public SunderEffect copy() {return new SunderEffect(this);
public class Symbiosis extends CardImpl {
public Symbiosis(UUID ownerId) {
public Symbiosis(final Symbiosis card) {
public Symbiosis copy() {return new Symbiosis(this);
public class TaintedAEther extends CardImpl {
public TaintedAEther(UUID ownerId) {
public TaintedAEther(final TaintedAEther card) {
public TaintedAEther copy() {return new TaintedAEther(this);
public class Telepathy extends CardImpl {
public Telepathy(UUID ownerId) {
public Telepathy(final Telepathy card) {
public Telepathy copy() {return new Telepathy(this);
public class ThranQuarry extends CardImpl {
public ThranQuarry(UUID ownerId) {
public ThranQuarry(final ThranQuarry card) {
public ThranQuarry copy() {return new ThranQuarry(this);
class ThranQuarryTriggeredAbility extends TriggeredAbilityImpl {
ThranQuarryTriggeredAbility() {
ThranQuarryTriggeredAbility(final ThranQuarryTriggeredAbility ability) {
public ThranQuarryTriggeredAbility copy() {return new ThranQuarryTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return !game.getBattlefield().contains(filter, controllerId, 1, game);
public String getRule() {return "At the beginning of the end step, if you control no creatures, sacrifice {this}.";
public class TimeSpiral extends CardImpl {
public TimeSpiral(UUID ownerId) {
public TimeSpiral(final TimeSpiral card) {
public TimeSpiral copy() {return new TimeSpiral(this);
class TimeSpiralEffect extends OneShotEffect {
public TimeSpiralEffect() {
public TimeSpiralEffect(final TimeSpiralEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public TimeSpiralEffect copy() {return new TimeSpiralEffect(this);
public class TitaniasBoon extends CardImpl {
public TitaniasBoon(UUID ownerId) {
public TitaniasBoon(final TitaniasBoon card) {
public TitaniasBoon copy() {return new TitaniasBoon(this);
public class TitaniasChosen extends CardImpl {
public TitaniasChosen(UUID ownerId) {
public TitaniasChosen(final TitaniasChosen card) {
public TitaniasChosen copy() {return new TitaniasChosen(this);
class TitaniasChosenAbility extends TriggeredAbilityImpl {
public TitaniasChosenAbility() {
public TitaniasChosenAbility(final TitaniasChosenAbility ability) {
public TitaniasChosenAbility copy() {return new TitaniasChosenAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).isGreen();
public String getRule() {return "Whenever a player casts a green spell, put a +1/+1 counter on Titania's Chosen.";
public class TolarianAcademy extends CardImpl {
public TolarianAcademy(UUID ownerId) {
public TolarianAcademy(final TolarianAcademy card) {
public TolarianAcademy copy() {return new TolarianAcademy(this);
public class TolarianWinds extends CardImpl {
public TolarianWinds(UUID ownerId) {
public TolarianWinds(final TolarianWinds card) {
public TolarianWinds copy() {return new TolarianWinds(this);
class TolarianWindsEffect extends OneShotEffect {
TolarianWindsEffect() {
TolarianWindsEffect(final TolarianWindsEffect effect) {
public TolarianWindsEffect copy() {return new TolarianWindsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TreetopRangers extends CardImpl {
public TreetopRangers(UUID ownerId) {
public TreetopRangers(final TreetopRangers card) {
public TreetopRangers copy() {return new TreetopRangers(this);
public class Turnabout extends CardImpl {
public Turnabout(UUID ownerId) {
public Turnabout(final Turnabout card) {
public Turnabout copy() {return new Turnabout(this);
class TurnaboutEffect extends OneShotEffect {
public TurnaboutEffect() {
public TurnaboutEffect(final TurnaboutEffect effect) {
public TurnaboutEffect copy() {return new TurnaboutEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class Unnerve extends CardImpl {
public Unnerve(UUID ownerId) {
public Unnerve(final Unnerve card) {
public Unnerve copy() {return new Unnerve(this);
public class UnworthyDead extends CardImpl{
public UnworthyDead(UUID ownerId) {
public UnworthyDead(final UnworthyDead card) {
public UnworthyDead copy() {return new UnworthyDead(this);
public class UrzasArmor extends CardImpl {
public UrzasArmor(UUID ownerId) {
public UrzasArmor(final UrzasArmor card) {
public UrzasArmor copy() {return new UrzasArmor(this);
class UrzasArmorEffect extends PreventionEffectImpl {
public UrzasArmorEffect() {
public UrzasArmorEffect(UrzasArmorEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_PLAYER);
public boolean applies(GameEvent event, Ability source, Game game) {return super.applies(event, source, game);return false;
public UrzasArmorEffect copy() {return new UrzasArmorEffect(this);
public class VampiricEmbrace extends CardImpl {
public VampiricEmbrace(UUID ownerId) {
public VampiricEmbrace(final VampiricEmbrace card) {
public VampiricEmbrace copy() {return new VampiricEmbrace(this);
public class VernalBloom extends CardImpl {
public VernalBloom(UUID ownerId) {
public VernalBloom(final VernalBloom card) {
public VernalBloom copy() {return new VernalBloom(this);
public class ViashinoOutrider extends CardImpl{
public ViashinoOutrider(UUID ownerId) {
public ViashinoOutrider(final ViashinoOutrider card) {
public ViashinoOutrider copy() {return new ViashinoOutrider(this);
public class ViashinoSandswimmer extends CardImpl {
public ViashinoSandswimmer(UUID ownerId) {
public ViashinoSandswimmer(final ViashinoSandswimmer card) {
public ViashinoSandswimmer copy() {return new ViashinoSandswimmer(this);
class ViashinoSandswimmerEffect extends OneShotEffect {
public ViashinoSandswimmerEffect() {staticText = "Flip a coin. If you win the flip, return {this} to its owner's hand. If you lose the flip, sacrifice {this}";
public ViashinoSandswimmerEffect(ViashinoSandswimmerEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public ViashinoSandswimmerEffect copy() {return new ViashinoSandswimmerEffect(this);
public class ViashinoWeaponsmith extends CardImpl {
public ViashinoWeaponsmith(UUID ownerId) {
public ViashinoWeaponsmith(final ViashinoWeaponsmith card) {
public ViashinoWeaponsmith copy() {return new ViashinoWeaponsmith(this);
public class VileRequiem extends CardImpl {
public VileRequiem(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public VileRequiem(final VileRequiem card) {
public VileRequiem copy() {return new VileRequiem(this);
public class VoiceOfGrace extends CardImpl {
public VoiceOfGrace(UUID ownerId) {
public VoiceOfGrace(final VoiceOfGrace card) {
public VoiceOfGrace copy() {return new VoiceOfGrace(this);
public class VoiceOfLaw extends CardImpl {
public VoiceOfLaw(UUID ownerId) {
public VoiceOfLaw(final VoiceOfLaw card) {
public VoiceOfLaw copy() {return new VoiceOfLaw(this);
public class VugLizard extends CardImpl{
public VugLizard(UUID ownerId) {
public VugLizard(final VugLizard card) {
public VugLizard copy() {return new VugLizard(this);
public class WesternPaladin extends CardImpl {
public WesternPaladin(UUID ownerId) {
public WesternPaladin(final WesternPaladin card) {
public WesternPaladin copy() {return new WesternPaladin(this);
public class Whetstone extends CardImpl {
public Whetstone(UUID ownerId) {
public Whetstone(final Whetstone card) {
public Whetstone copy() {return new Whetstone(this);
class WhetstoneEffect extends OneShotEffect {
WhetstoneEffect() {
WhetstoneEffect(final WhetstoneEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public WhetstoneEffect copy() {return new WhetstoneEffect(this);
public class Wildfire extends CardImpl {
public Wildfire(UUID ownerId) {
public Wildfire(final Wildfire card) {
public Wildfire copy() {return new Wildfire(this);
public class Windfall extends CardImpl {
public Windfall(UUID ownerId) {
public Windfall(final Windfall card) {
public Windfall copy() {return new Windfall(this);
class WindfallEffect extends OneShotEffect {
WindfallEffect() {
WindfallEffect(final WindfallEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public WindfallEffect copy() {return new WindfallEffect(this);
public class WizardMentor extends CardImpl {
public WizardMentor(UUID ownerId) {
public WizardMentor(final WizardMentor card) {
public WizardMentor copy() {return new WizardMentor(this);
public class WornPowerstone extends CardImpl {
public WornPowerstone(UUID ownerId) {
public WornPowerstone(final WornPowerstone card) {
public WornPowerstone copy() {return new WornPowerstone(this);
class WornPowerstoneAbility extends BasicManaAbility {
public WornPowerstoneAbility() {
public WornPowerstoneAbility(final WornPowerstoneAbility ability) {
public WornPowerstoneAbility copy() {return new WornPowerstoneAbility(this);
public class Worship extends CardImpl {
public Worship(UUID ownerId) {
public Worship(final Worship card) {
public Worship copy() {return new Worship(this);
class WorshipReplacementEffect extends ReplacementEffectImpl {
public WorshipReplacementEffect() {
public WorshipReplacementEffect(final WorshipReplacementEffect effect) {
public WorshipReplacementEffect copy() {return new WorshipReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DAMAGE_CAUSES_LIFE_LOSS;
public boolean applies(GameEvent event, Ability source, Game game) {
) {return false;
public boolean apply(Game game, Ability source) {return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class YawgmothsEdict extends CardImpl {
public YawgmothsEdict(UUID ownerId) {
public YawgmothsEdict(final YawgmothsEdict card) {
public YawgmothsEdict copy() {return new YawgmothsEdict(this);
public class YawgmothsWill extends CardImpl {
public YawgmothsWill(UUID ownerId) {
public YawgmothsWill(final YawgmothsWill card) {
public YawgmothsWill copy() {return new YawgmothsWill(this);
class CanPlayCardsFromGraveyardEffect extends ContinuousEffectImpl {
public CanPlayCardsFromGraveyardEffect() {
public CanPlayCardsFromGraveyardEffect(Duration duration) {
public CanPlayCardsFromGraveyardEffect(final CanPlayCardsFromGraveyardEffect effect) {
public CanPlayCardsFromGraveyardEffect copy() {return new CanPlayCardsFromGraveyardEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class YawgmothsWillReplacementEffect extends ReplacementEffectImpl {
public YawgmothsWillReplacementEffect() {
public YawgmothsWillReplacementEffect(final YawgmothsWillReplacementEffect effect) {
public YawgmothsWillReplacementEffect copy() {return new YawgmothsWillReplacementEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCardToExileWithInfo(permanent, null, "", source.getSourceId(), game, ((ZoneChangeEvent) event).getFromZone(), true);return controller.moveCardToExileWithInfo(card, null, "", source.getSourceId(), game, ((ZoneChangeEvent) event).getFromZone(), true);return false;return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public class Zephid extends CardImpl {
public Zephid(UUID ownerId) {
public Zephid(final Zephid card) {
public Zephid copy() {return new Zephid(this);
public class ZephidsEmbrace extends CardImpl {
public ZephidsEmbrace(UUID ownerId) {
public ZephidsEmbrace(final ZephidsEmbrace card) {
public ZephidsEmbrace copy() {return new ZephidsEmbrace(this);
public class AEtherMembrane extends CardImpl {
public AEtherMembrane(UUID ownerId) {effect.setText("return that creature to its owner's hand at end of combat");
public AEtherMembrane(final AEtherMembrane card) {
public AEtherMembrane copy() {return new AEtherMembrane(this);
public class AngelicShield extends CardImpl {
public AngelicShield(UUID ownerId) {
public AngelicShield(final AngelicShield card) {
public AngelicShield copy() {return new AngelicShield(this);
public class CoralFighters extends CardImpl {
public CoralFighters(UUID ownerId) {
public CoralFighters(final CoralFighters card) {
public CoralFighters copy() {return new CoralFighters(this);
class CoralFightersEffect extends OneShotEffect {
public CoralFightersEffect() {
public CoralFightersEffect(final CoralFightersEffect effect) {
public CoralFightersEffect copy() {return new CoralFightersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FloodPlain extends CardImpl {
public FloodPlain(UUID ownerId) {
public FloodPlain(final FloodPlain card) {
public FloodPlain copy() {return new FloodPlain(this);
public class GalepowderMage extends CardImpl {
public GalepowderMage(UUID ownerId) {
public GalepowderMage(final GalepowderMage card) {
public GalepowderMage copy() {return new GalepowderMage(this);
class GalepowderMageEffect extends OneShotEffect {
public GalepowderMageEffect() {
public GalepowderMageEffect(final GalepowderMageEffect effect) {
public GalepowderMageEffect copy() {return new GalepowderMageEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GreaterStoneSpirit extends CardImpl {
public GreaterStoneSpirit(UUID ownerId) {
public GreaterStoneSpirit(final GreaterStoneSpirit card) {
public GreaterStoneSpirit copy() {return new GreaterStoneSpirit(this);
public class Overrule extends CardImpl {
public Overrule(UUID ownerId) {
public Overrule(final Overrule card) {
public Overrule copy() {return new Overrule(this);
public class SawtoothLoon extends CardImpl {
public SawtoothLoon(UUID ownerId) {
public SawtoothLoon(final SawtoothLoon card) {
public SawtoothLoon copy() {return new SawtoothLoon(this);
class SawtoothLoonEffect extends OneShotEffect {
public SawtoothLoonEffect() {
public SawtoothLoonEffect(final SawtoothLoonEffect effect) {
public SawtoothLoonEffect copy() {return new SawtoothLoonEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Addle extends CardImpl {
public Addle(UUID ownerId) {
public Addle(final Addle card) {
public Addle copy() {return new Addle(this);
class AddleEffect extends OneShotEffect {
AddleEffect() {
AddleEffect(final AddleEffect effect) {
public AddleEffect copy() {return new AddleEffect(this);
public boolean apply(Game game, Ability source) {return effect.apply(game, source);return false;
public class BenevolentBodyguard extends CardImpl {
public BenevolentBodyguard(UUID ownerId) {
public BenevolentBodyguard(final BenevolentBodyguard card) {
public BenevolentBodyguard copy() {return new BenevolentBodyguard(this);
public class BragoKingEternal extends CardImpl {
public BragoKingEternal(UUID ownerId) {ability.addEffect(new ReturnFromExileEffect(this.getId(), Zone.BATTLEFIELD, ", then return those cards to the battlefield under their owner's control"));
public BragoKingEternal(final BragoKingEternal card) {
public BragoKingEternal copy() {return new BragoKingEternal(this);
public class ChokingSands extends CardImpl {
public ChokingSands(UUID ownerId) {
public ChokingSands(final ChokingSands card) {
public ChokingSands copy() {return new ChokingSands(this);
class ChokingSandsEffect extends OneShotEffect {
public ChokingSandsEffect() {
public ChokingSandsEffect(final ChokingSandsEffect effect) {
public ChokingSandsEffect copy() {return new ChokingSandsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class CityInABottle extends CardImpl {
public CityInABottle(UUID ownerId) {
public CityInABottle(final CityInABottle card) {
public CityInABottle copy() {return new CityInABottle(this);return namePredicatesArabianNights;
class CityInABottleStateTriggeredAbility extends StateTriggeredAbility {
CityInABottleStateTriggeredAbility() {
CityInABottleStateTriggeredAbility(final CityInABottleStateTriggeredAbility ability) {
public CityInABottleStateTriggeredAbility copy() {return new CityInABottleStateTriggeredAbility(this);
public boolean checkTrigger(GameEvent event, Game game) {return game.getBattlefield().contains(filter, this.getControllerId(), game, 1);
public String getRule() {return "Whenever a nontoken permanent originally printed in the Arabian Nights expansion other than City in a Bottle is on the battlefield, its controller sacrifices it";return new CityInABottleSacrificeEffect(this);
public boolean apply(Game game, Ability source) {return true;
CityInABottleCantPlayEffect() {
CityInABottleCantPlayEffect(final CityInABottleCantPlayEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public CityInABottleCantPlayEffect copy() {return new CityInABottleCantPlayEffect(this);
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't play cards originally printed in the Arabian Nights expansion";
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.PLAY_LAND || event.getType() == EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return card != null && filter.match(card, source.getSourceId(), source.getControllerId(), game);
public class ClawsOfWirewood extends CardImpl {
public ClawsOfWirewood(UUID ownerId) {
public ClawsOfWirewood(final ClawsOfWirewood card) {
public ClawsOfWirewood copy() {return new ClawsOfWirewood(this);
public class CouncilsJudgment extends CardImpl {
public CouncilsJudgment(UUID ownerId) {
public CouncilsJudgment(final CouncilsJudgment card) {
public CouncilsJudgment copy() {return new CouncilsJudgment(this);
class CouncilsJudgmentEffect extends OneShotEffect {
CouncilsJudgmentEffect() {
CouncilsJudgmentEffect(final CouncilsJudgmentEffect effect) {
public CouncilsJudgmentEffect copy() {return new CouncilsJudgmentEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new CrescendoOfWar(this);
public class CruelBargain extends CardImpl {
public CruelBargain(UUID ownerId) {
public CruelBargain(final CruelBargain card) {
public CruelBargain copy() {return new CruelBargain(this);
public class DacksDuplicate extends CardImpl {
public DacksDuplicate(UUID ownerId) {
public DacksDuplicate(final DacksDuplicate card) {
public DacksDuplicate copy() {return new DacksDuplicate(this);
class DacksDuplicateApplyToPermanent extends ApplyToPermanent {
public Boolean apply(Game game, Permanent permanent) {return true;
public Boolean apply(Game game, MageObject mageObject) {return true;
public class DecreeOfJustice extends CardImpl {
public DecreeOfJustice(UUID ownerId) {
public DecreeOfJustice(final DecreeOfJustice card) {
public DecreeOfJustice copy() {return new DecreeOfJustice(this);
class DecreeOfJusticeCycleEffect extends OneShotEffect {
DecreeOfJusticeCycleEffect() {
DecreeOfJusticeCycleEffect(final DecreeOfJusticeCycleEffect effect) {
public DecreeOfJusticeCycleEffect copy() {return new DecreeOfJusticeCycleEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class DeftbladeElite extends CardImpl {
public DeftbladeElite(UUID ownerId) {
public DeftbladeElite(final DeftbladeElite card) {
public DeftbladeElite copy() {return new DeftbladeElite(this);
public class DevoutWitness extends CardImpl {
public DevoutWitness(UUID ownerId) {
public DevoutWitness(final DevoutWitness card) {
public DevoutWitness copy() {return new DevoutWitness(this);
public class EmpyrialArmor extends CardImpl {
public EmpyrialArmor(UUID ownerId) {
public EmpyrialArmor(final EmpyrialArmor card) {
public EmpyrialArmor copy() {return new EmpyrialArmor(this);
public class Eureka extends CardImpl {
public Eureka(UUID ownerId) {
public Eureka(final Eureka card) {
public Eureka copy() {return new Eureka(this);
class EurekaEffect extends OneShotEffect {
public EurekaEffect() {
public EurekaEffect(final EurekaEffect effect) {
public EurekaEffect copy() {return new EurekaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class FlowstoneSculpture extends CardImpl {
public FlowstoneSculpture(UUID ownerId) {
public FlowstoneSculpture(final FlowstoneSculpture card) {
public FlowstoneSculpture copy() {return new FlowstoneSculpture(this);
class FlowstoneSculptureEffect extends OneShotEffect {
public FlowstoneSculptureEffect() {
public FlowstoneSculptureEffect(final FlowstoneSculptureEffect effect) {
public FlowstoneSculptureEffect copy() {return new FlowstoneSculptureEffect(this);
public boolean apply(Game game, Ability source) {return false;return new AddCountersSourceEffect(CounterType.P1P1.createInstance()).apply(game, source);return true;return false;
public class GildedLight extends CardImpl {
public GildedLight(UUID ownerId) {
public GildedLight(final GildedLight card) {
public GildedLight copy() {return new GildedLight(this);return new GoblinCommando(this);
public class GoblinGeneral extends CardImpl {
public GoblinGeneral(UUID ownerId) {
public GoblinGeneral(final GoblinGeneral card) {
public GoblinGeneral copy() {return new GoblinGeneral(this);
public class GoblinSettler extends CardImpl {
public GoblinSettler(UUID ownerId) {
public GoblinSettler(final GoblinSettler card) {
public GoblinSettler copy() {return new GoblinSettler(this);
public class GustcloakHarrier extends CardImpl {
public GustcloakHarrier(UUID ownerId) {
public GustcloakHarrier(final GustcloakHarrier card) {
public GustcloakHarrier copy() {return new GustcloakHarrier(this);return new KjeldoranOutpost(this);
public class KrosanVorine extends CardImpl {
public KrosanVorine(UUID ownerId) {
public KrosanVorine(final KrosanVorine card) {
public KrosanVorine copy() {return new KrosanVorine(this);
public class KrovikanSorcerer extends CardImpl {
public KrovikanSorcerer(UUID ownerId) {
public KrovikanSorcerer(final KrovikanSorcerer card) {
public KrovikanSorcerer copy() {return new KrovikanSorcerer(this);
class KrovikanSorcererEffect extends OneShotEffect {
KrovikanSorcererEffect() {
KrovikanSorcererEffect(final KrovikanSorcererEffect effect) {
public KrovikanSorcererEffect copy() {return new KrovikanSorcererEffect(this);
public boolean apply(Game game, Ability source) {return player.discard(card, source, game);return true;return false;
public class LakeOfTheDead extends CardImpl {
public LakeOfTheDead(UUID ownerId) {
public LakeOfTheDead(final LakeOfTheDead card) {
public LakeOfTheDead copy() {return new LakeOfTheDead(this);
public class LibraryOfAlexandria extends CardImpl {
public LibraryOfAlexandria(UUID ownerId) {
public LibraryOfAlexandria(final LibraryOfAlexandria card) {
public LibraryOfAlexandria copy() {return new LibraryOfAlexandria(this);
public class ManaCrypt extends CardImpl {
public ManaCrypt(UUID ownerId) {
public ManaCrypt(final ManaCrypt card) {
public ManaCrypt copy() {return new ManaCrypt(this);
class ManaCryptEffect extends OneShotEffect {
ManaCryptEffect() {
ManaCryptEffect(final ManaCryptEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ManaCryptEffect copy() {return new ManaCryptEffect(this);
public class ManaDrain extends CardImpl {
public ManaDrain(UUID ownerId) {
public ManaDrain(final ManaDrain card) {
public ManaDrain copy() {return new ManaDrain(this);
class ManaDrainCounterEffect extends OneShotEffect {
public ManaDrainCounterEffect() {
public ManaDrainCounterEffect(final ManaDrainCounterEffect effect) {
public ManaDrainCounterEffect copy() {return new ManaDrainCounterEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MarchesaTheBlackRose extends CardImpl {
public MarchesaTheBlackRose(UUID ownerId) {
public MarchesaTheBlackRose(final MarchesaTheBlackRose card) {
public MarchesaTheBlackRose copy() {return new MarchesaTheBlackRose(this);
class MarchesaTheBlackRoseTriggeredAbility extends TriggeredAbilityImpl {
public MarchesaTheBlackRoseTriggeredAbility() {
public MarchesaTheBlackRoseTriggeredAbility(final MarchesaTheBlackRoseTriggeredAbility ability) {
public MarchesaTheBlackRoseTriggeredAbility copy() {return new MarchesaTheBlackRoseTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control with a +1/+1 counter on it dies, " + super.getRule();
class MarchesaTheBlackRoseEffect extends OneShotEffect {
MarchesaTheBlackRoseEffect() {this.staticText = "return that card to the battlefield under your control at the beginning of the next end step.";
MarchesaTheBlackRoseEffect(final MarchesaTheBlackRoseEffect effect) {
public MarchesaTheBlackRoseEffect copy() {return new MarchesaTheBlackRoseEffect(this);
public boolean apply(Game game, Ability source) {effect.setText("return that card to the battlefield under your control at the beginning of the next end step");return true;return false;
public class MindsDesire extends CardImpl {
public MindsDesire(UUID ownerId) {
public MindsDesire(final MindsDesire card) {
public MindsDesire copy() {return new MindsDesire(this);
class MindsDesireEffect extends OneShotEffect {
MindsDesireEffect() {
MindsDesireEffect(final MindsDesireEffect effect) {
public MindsDesireEffect copy() {return new MindsDesireEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class MindsDesireCastFromExileEffect extends AsThoughEffectImpl {
MindsDesireCastFromExileEffect() {
MindsDesireCastFromExileEffect(final MindsDesireCastFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public MindsDesireCastFromExileEffect copy() {return new MindsDesireCastFromExileEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return true;return false;
public class MishrasWorkshop extends CardImpl {
public MishrasWorkshop(UUID ownerId) {
public MishrasWorkshop(final MishrasWorkshop card) {
public MishrasWorkshop copy() {return new MishrasWorkshop(this);return new MistmoonGriffin(this);this.staticText = ", then return the top creature card of your graveyard to the battlefield";return new MistmoonGriffinEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(lastCreatureCard, Zone.BATTLEFIELD, source, game);return true;return false;
public class NaturesRuin extends CardImpl {
public NaturesRuin(UUID ownerId) {
public NaturesRuin(final NaturesRuin card) {
public NaturesRuin copy() {return new NaturesRuin(this);
public class NorwoodPriestess extends CardImpl {
public NorwoodPriestess(UUID ownerId) {
public NorwoodPriestess(final NorwoodPriestess card) {
public NorwoodPriestess copy() {return new NorwoodPriestess(this);
class NorwoodPriestessEffect extends OneShotEffect {
public NorwoodPriestessEffect() {
public NorwoodPriestessEffect(final NorwoodPriestessEffect effect) {
public NorwoodPriestessEffect copy() {return new NorwoodPriestessEffect(this);
public boolean apply(Game game, Ability source) {return false;return controller.moveCards(card, Zone.BATTLEFIELD, source, game);return false;
public class Ophidian extends CardImpl {
public Ophidian(UUID ownerId) {
public Ophidian(final Ophidian card) {
public Ophidian copy() {return new Ophidian(this);
public class PillagingHorde extends CardImpl {
public PillagingHorde(UUID ownerId) {
public PillagingHorde(final PillagingHorde card) {
public PillagingHorde copy() {return new PillagingHorde(this);
public class PleaForPower extends CardImpl {
public PleaForPower(UUID ownerId) {
public PleaForPower(final PleaForPower card) {
public PleaForPower copy() {return new PleaForPower(this);
class PleaForPowerEffect extends OneShotEffect {
PleaForPowerEffect() {
PleaForPowerEffect(final PleaForPowerEffect effect) {
public PleaForPowerEffect copy() {return new PleaForPowerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class PredatoryNightstalker extends CardImpl {
public PredatoryNightstalker(UUID ownerId) {
public PredatoryNightstalker(final PredatoryNightstalker card) {
public PredatoryNightstalker copy() {return new PredatoryNightstalker(this);
public class Psychatog extends CardImpl {
public Psychatog(UUID ownerId) {
public Psychatog(final Psychatog card) {
public Psychatog copy() {return new Psychatog(this);
public class ScourgeOfTheThrone extends CardImpl {
public ScourgeOfTheThrone(UUID ownerId) {
public ScourgeOfTheThrone(final ScourgeOfTheThrone card) {
public ScourgeOfTheThrone copy() {return new ScourgeOfTheThrone(this);
class ScourgeOfTheThroneAttacksTriggeredAbility extends TriggeredAbilityImpl {
public ScourgeOfTheThroneAttacksTriggeredAbility(Effect effect, boolean optional) {
public ScourgeOfTheThroneAttacksTriggeredAbility(final ScourgeOfTheThroneAttacksTriggeredAbility ability) {
public void reset(Game game) {
public boolean checkInterveningIfClause(Game game) {return attackedPlayer.getLife() == mostLife;return false;
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks for the first time each turn, if it's attacking the player with the most life or tied for most life, " + super.getRule();
public ScourgeOfTheThroneAttacksTriggeredAbility copy() {return new ScourgeOfTheThroneAttacksTriggeredAbility(this);
class AdditionalCombatPhaseEffect extends OneShotEffect {
public AdditionalCombatPhaseEffect() {
public AdditionalCombatPhaseEffect(final AdditionalCombatPhaseEffect effect) {
public AdditionalCombatPhaseEffect copy() {return new AdditionalCombatPhaseEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class SelvalaExplorerReturned extends CardImpl {
public SelvalaExplorerReturned(UUID ownerId) {
public SelvalaExplorerReturned(final SelvalaExplorerReturned card) {
public SelvalaExplorerReturned copy() {return new SelvalaExplorerReturned(this);
class SelvalaExplorerReturnedEffect extends OneShotEffect {
public SelvalaExplorerReturnedEffect() {
public SelvalaExplorerReturnedEffect(final SelvalaExplorerReturnedEffect effect) {
public SelvalaExplorerReturnedEffect copy() {return new SelvalaExplorerReturnedEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SerendibEfreet extends CardImpl {
public SerendibEfreet(UUID ownerId) {
public SerendibEfreet(final SerendibEfreet card) {
public SerendibEfreet copy() {return new SerendibEfreet(this);
public class ShivanWurm extends CardImpl {
public ShivanWurm(UUID ownerId) {
public ShivanWurm(final ShivanWurm card) {
public ShivanWurm copy() {return new ShivanWurm(this);
public class SkirgeFamiliar extends CardImpl {
public SkirgeFamiliar(UUID ownerId) {
public SkirgeFamiliar(final SkirgeFamiliar card) {
public SkirgeFamiliar copy() {return new SkirgeFamiliar(this);
public class SparkSpray extends CardImpl {
public SparkSpray(UUID ownerId) {
public SparkSpray(final SparkSpray card) {
public SparkSpray copy() {return new SparkSpray(this);
public class SpinalGraft extends CardImpl {
public SpinalGraft(UUID ownerId) {
public SpinalGraft(final SpinalGraft card) {
public SpinalGraft copy() {return new SpinalGraft(this);
class SpinalGraftTriggeredAbility extends TriggeredAbilityImpl {
public SpinalGraftTriggeredAbility() {
public SpinalGraftTriggeredAbility(final SpinalGraftTriggeredAbility ability) {
public SpinalGraftTriggeredAbility copy() {return new SpinalGraftTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.TARGETED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When enchanted creature becomes the target of a spell or ability, destroy that creature. It can't be regenerated.";
public class SpiritCairn extends CardImpl {
public SpiritCairn(UUID ownerId) {
public SpiritCairn(final SpiritCairn card) {
public SpiritCairn copy() {return new SpiritCairn(this);
public class StoicChampion extends CardImpl {
public StoicChampion(UUID ownerId) {
public StoicChampion(final StoicChampion card) {
public StoicChampion copy() {return new StoicChampion(this);
public class SuChi extends CardImpl {
public SuChi(UUID ownerId) {
public SuChi(final SuChi card) {
public SuChi copy() {return new SuChi(this);
public class TerohsFaithful extends CardImpl {
public TerohsFaithful(UUID ownerId) {
public TerohsFaithful(final TerohsFaithful card) {
public TerohsFaithful copy() {return new TerohsFaithful(this);
public class ThawingGlaciers extends CardImpl {
public ThawingGlaciers(UUID ownerId) {
public ThawingGlaciers(final ThawingGlaciers card) {
public ThawingGlaciers copy() {return new ThawingGlaciers(this);
public class ThopterSquadron extends CardImpl {
public ThopterSquadron(UUID ownerId) {
public ThopterSquadron(final ThopterSquadron card) {
public ThopterSquadron copy() {return new ThopterSquadron(this);
public class TriangleOfWar extends CardImpl {
public TriangleOfWar(UUID ownerId) {
public TriangleOfWar(final TriangleOfWar card) {
public TriangleOfWar copy() {return new TriangleOfWar(this);return new VolrathsShapeshifter(this);return new VolrathsShapeshifterEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class YawgmothsBargain extends CardImpl {
public YawgmothsBargain(UUID ownerId) {
public YawgmothsBargain(final YawgmothsBargain card) {
public YawgmothsBargain copy() {return new YawgmothsBargain(this);
public class AnvilOfBogardan extends CardImpl {
public AnvilOfBogardan(UUID ownerId) {
public AnvilOfBogardan(final AnvilOfBogardan card) {
public AnvilOfBogardan copy() {return new AnvilOfBogardan(this);
class AnvilOfBogardanEffect extends OneShotEffect {
public AnvilOfBogardanEffect(final AnvilOfBogardanEffect effect) {
public AnvilOfBogardanEffect() {
public boolean apply(Game game, Ability source) {return true;return false;
public AnvilOfBogardanEffect copy() {return new AnvilOfBogardanEffect(this);
public class ArmyAnts extends CardImpl {
public ArmyAnts(UUID ownerId) {
public ArmyAnts(final ArmyAnts card) {
public ArmyAnts copy() {return new ArmyAnts(this);
public class Chronatog extends CardImpl {
public Chronatog(UUID ownerId) {
public Chronatog(final Chronatog card) {
public Chronatog copy() {return new Chronatog(this);
public class CityOfSolitude extends CardImpl {
public CityOfSolitude(UUID ownerId) {
public CityOfSolitude(final CityOfSolitude card) {
public CityOfSolitude copy() {return new CityOfSolitude(this);
CityOfSolitudeEffect() {
CityOfSolitudeEffect(final CityOfSolitudeEffect effect) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.CAST_SPELL || event.getType() == EventType.ACTIVATE_ABILITY;
public boolean applies(GameEvent event, Ability source, Game game) {return !game.getActivePlayerId().equals(event.getPlayerId());
public CityOfSolitudeEffect copy() {return new CityOfSolitudeEffect(this);
public class Coercion extends CardImpl {
public Coercion(UUID ownerId) {
public Coercion(final Coercion card) {
public Coercion copy() {return new Coercion(this);
public class CryptRats extends CardImpl {
public CryptRats(UUID ownerId) {
public CryptRats(final CryptRats card) {
public CryptRats copy() {return new CryptRats(this);return new DarajaGriffin(this);
public class Desertion extends CardImpl {
public Desertion(UUID ownerId) {
public Desertion(final Desertion card) {
public Desertion copy() {return new Desertion(this);
class DesertionEffect extends OneShotEffect {
public DesertionEffect() {
public DesertionEffect(final DesertionEffect effect) {
public DesertionEffect copy() {return new DesertionEffect(this);
public boolean apply(Game game, Ability source) {return game.getStack().counter(targetPointer.getFirst(game, source), source.getSourceId(), game, Zone.BATTLEFIELD, false, ZoneDetail.NONE);return false;
public class DragonMask extends CardImpl {
public DragonMask(UUID ownerId) {Effect returnEffect = new CreateDelayedTriggeredAbilityEffect(new AtTheBeginOfNextEndStepDelayedTriggeredAbility(new ReturnToHandTargetEffect()));returnEffect.setText("Return it to its owner's hand at the beginning of the next end step");ability.addEffect(returnEffect);
public DragonMask(final DragonMask card) {
public DragonMask copy() {return new DragonMask(this);
public class DwarvenVigilantes extends CardImpl {
public DwarvenVigilantes(UUID ownerId) {
public DwarvenVigilantes(final DwarvenVigilantes card) {
public DwarvenVigilantes copy() {return new DwarvenVigilantes(this);
public class ElephantGrass extends CardImpl {
public ElephantGrass(UUID ownerId) {
public ElephantGrass(final ElephantGrass card) {
public ElephantGrass copy() {return new ElephantGrass(this);
public class ElvenCache extends CardImpl {
public ElvenCache(UUID ownerId) {
public ElvenCache(final ElvenCache card) {
public ElvenCache copy() {return new ElvenCache(this);
public class EmeraldCharm extends CardImpl {
public EmeraldCharm(UUID ownerId) {
public EmeraldCharm(final EmeraldCharm card) {
public EmeraldCharm copy() {return new EmeraldCharm(this);
public class Equipoise extends CardImpl {
public Equipoise(UUID ownerId) {
public Equipoise(final Equipoise card) {
public Equipoise copy() {return new Equipoise(this);
class EquipoiseEffect extends OneShotEffect {
public EquipoiseEffect() {
public EquipoiseEffect(final EquipoiseEffect effect) {
public EquipoiseEffect copy() {return new EquipoiseEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
private void phaseOutCardType(Player controller, Player targetPlayer, CardType cardType, Ability source, Game game) {
public class FallenAskari extends CardImpl {
public FallenAskari(UUID ownerId) {
public FallenAskari(final FallenAskari card) {
public FallenAskari copy() {return new FallenAskari(this);
public class FemerefEnchantress extends CardImpl {
public FemerefEnchantress(UUID ownerId) {
public FemerefEnchantress(final FemerefEnchantress card) {
public FemerefEnchantress copy() {return new FemerefEnchantress(this);
public class FeralInstinct extends CardImpl {
public FeralInstinct(UUID ownerId) {
public FeralInstinct(final FeralInstinct card) {
public FeralInstinct copy() {return new FeralInstinct(this);
public class Fireblast extends CardImpl {
public Fireblast(UUID ownerId) {
public Fireblast(final Fireblast card) {
public Fireblast copy() {return new Fireblast(this);
public class FirestormHellkite extends CardImpl {
public FirestormHellkite(UUID ownerId) {
public FirestormHellkite(final FirestormHellkite card) {
public FirestormHellkite copy() {return new FirestormHellkite(this);
public class FloodedShoreline extends CardImpl {
public FloodedShoreline(UUID ownerId) {
public FloodedShoreline(final FloodedShoreline card) {
public FloodedShoreline copy() {return new FloodedShoreline(this);
public class GoblinSwineRider extends CardImpl {
public GoblinSwineRider(UUID ownerId) {
public GoblinSwineRider(final GoblinSwineRider card) {
public GoblinSwineRider copy() {return new GoblinSwineRider(this);
public class GossamerChains extends CardImpl {
public GossamerChains(UUID ownerId) {
public GossamerChains(final GossamerChains card) {
public GossamerChains copy() {return new GossamerChains(this);return new GriffinCanyon(this);return new GriffinCanyonEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class HearthCharm extends CardImpl {
public HearthCharm(UUID ownerId) {
public HearthCharm(final HearthCharm card) {
public HearthCharm copy() {return new HearthCharm(this);
public class HelmOfAwakening extends CardImpl {
public HelmOfAwakening(UUID ownerId) {
public HelmOfAwakening(final HelmOfAwakening card) {
public HelmOfAwakening copy() {return new HelmOfAwakening(this);
public class HopeCharm extends CardImpl {
public HopeCharm(UUID ownerId) {
public HopeCharm(final HopeCharm card) {
public HopeCharm copy() {return new HopeCharm(this);
public class HulkingCyclops extends CardImpl {
public HulkingCyclops(UUID ownerId) {
public HulkingCyclops(final HulkingCyclops card) {
public HulkingCyclops copy() {return new HulkingCyclops(this);
public class Impulse extends CardImpl {
public Impulse(UUID ownerId) {
public Impulse(final Impulse card) {
public Impulse copy() {return new Impulse(this);
public class JamuraanLion extends CardImpl {
public JamuraanLion(UUID ownerId) {
public JamuraanLion(final JamuraanLion card) {
public JamuraanLion copy() {return new JamuraanLion(this);
public class KeeperOfKookus extends CardImpl {
public KeeperOfKookus(UUID ownerId) {
public KeeperOfKookus(final KeeperOfKookus card) {
public KeeperOfKookus copy() {return new KeeperOfKookus(this);
public class KnightOfValor extends CardImpl {
public KnightOfValor(UUID ownerId) {
public KnightOfValor(final KnightOfValor card) {
public KnightOfValor copy() {return new KnightOfValor(this);
public class LightningCloud extends CardImpl {
public LightningCloud(UUID ownerId) {
public LightningCloud(final LightningCloud card) {
public LightningCloud copy() {return new LightningCloud(this);
public class MagmaMine extends CardImpl {
public MagmaMine(UUID ownerId) {
public MagmaMine(final MagmaMine card) {
public MagmaMine copy() {return new MagmaMine(this);
public class ManOWar extends CardImpl {
public ManOWar(UUID ownerId) {
public ManOWar(final ManOWar card) {
public ManOWar copy() {return new ManOWar(this);
public class MiraculousRecovery extends CardImpl {
public MiraculousRecovery(UUID ownerId) {
public MiraculousRecovery(final MiraculousRecovery card) {
public MiraculousRecovery copy() {return new MiraculousRecovery(this);
class MiraculousRecoveryEffect extends OneShotEffect {
public MiraculousRecoveryEffect() {
public MiraculousRecoveryEffect(final MiraculousRecoveryEffect effect) {
public MiraculousRecoveryEffect copy() {return new MiraculousRecoveryEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class MortalWound extends CardImpl {
public MortalWound(UUID ownerId) {
public MortalWound(final MortalWound card) {
public MortalWound copy() {return new MortalWound(this);
public class Mundungu extends CardImpl {
public Mundungu(UUID ownerId) {
public Mundungu(final Mundungu card) {
public Mundungu copy() {return new Mundungu(this);
public class MysticVeil extends CardImpl {
public MysticVeil(UUID ownerId) {
public MysticVeil(final MysticVeil card) {
public MysticVeil copy() {return new MysticVeil(this);
public class Necrosavant extends CardImpl {
public Necrosavant(UUID ownerId) {
public Necrosavant(final Necrosavant card) {
public Necrosavant copy() {return new Necrosavant(this);
public class PantherWarriors extends CardImpl {
public PantherWarriors(UUID ownerId) {
public PantherWarriors(final PantherWarriors card) {
public PantherWarriors copy() {return new PantherWarriors(this);
public class Parapet extends CardImpl {
public Parapet(UUID ownerId) {
public Parapet(final Parapet card) {
public Parapet copy() {return new Parapet(this);
public class PhyrexianMarauder extends CardImpl {
public PhyrexianMarauder(UUID ownerId) {
public PhyrexianMarauder(final PhyrexianMarauder card) {
public PhyrexianMarauder copy() {return new PhyrexianMarauder(this);
class PhyrexianMarauderCantAttackUnlessYouPayEffect extends CantAttackBlockUnlessPaysSourceEffect {
PhyrexianMarauderCantAttackUnlessYouPayEffect() {
PhyrexianMarauderCantAttackUnlessYouPayEffect(PhyrexianMarauderCantAttackUnlessYouPayEffect effect) {
public boolean applies(GameEvent event, Ability source, Game game) {return source.getSourceId().equals(event.getSourceId());
public ManaCosts getManaCostToPay(GameEvent event, Ability source, Game game) {return new ManaCostsImpl<>("{" + counter + "}");return null;
public PhyrexianMarauderCantAttackUnlessYouPayEffect copy() {return new PhyrexianMarauderCantAttackUnlessYouPayEffect(this);
public class PhyrexianWalker extends CardImpl {
public PhyrexianWalker(UUID ownerId) {
public PhyrexianWalker(final PhyrexianWalker card) {
public PhyrexianWalker copy() {return new PhyrexianWalker(this);
public class Python extends CardImpl {
public Python(UUID ownerId) {
public Python(final Python card) {
public Python copy() {return new Python(this);
public class QuirionRanger extends CardImpl {
public QuirionRanger(UUID ownerId) {
public QuirionRanger(final QuirionRanger card) {
public QuirionRanger copy() {return new QuirionRanger(this);
public class RagingGorilla extends CardImpl {
public RagingGorilla(UUID ownerId) {
public RagingGorilla(final RagingGorilla card) {
public RagingGorilla copy() {return new RagingGorilla(this);
public class RainbowEfreet extends CardImpl {
public RainbowEfreet(UUID ownerId) {
public RainbowEfreet(final RainbowEfreet card) {
public RainbowEfreet copy() {return new RainbowEfreet(this);
public class RelicWard extends CardImpl {
public RelicWard(UUID ownerId) {
public RelicWard(final RelicWard card) {
public RelicWard copy() {return new RelicWard(this);
public class Remedy extends CardImpl {
public Remedy(UUID ownerId) {
public Remedy(final Remedy card) {
public Remedy copy() {return new Remedy(this);
public class ResistanceFighter extends CardImpl {
public ResistanceFighter(UUID ownerId) {
public ResistanceFighter(final ResistanceFighter card) {
public ResistanceFighter copy() {return new ResistanceFighter(this);
public class RetributionOfTheMeek extends CardImpl {
public RetributionOfTheMeek (UUID ownerId) {
public RetributionOfTheMeek(final RetributionOfTheMeek card) {
public Card copy() {return new RetributionOfTheMeek(this);
public class RighteousAura extends CardImpl {
public RighteousAura(UUID ownerId) {
public RighteousAura(final RighteousAura card) {
public RighteousAura copy() {return new RighteousAura(this);
public class ScalebanesElite extends CardImpl {
public ScalebanesElite(UUID ownerId) {
public ScalebanesElite(final ScalebanesElite card) {
public ScalebanesElite copy() {return new ScalebanesElite(this);
public class ShriekingDrake extends CardImpl {
public ShriekingDrake(UUID ownerId) {
public ShriekingDrake(final ShriekingDrake card) {
public ShriekingDrake copy() {return new ShriekingDrake(this);
public class Simoon extends CardImpl {
public Simoon(UUID ownerId) {
public Simoon(final Simoon card) {
public Simoon copy() {return new Simoon(this);
class SimoonEffect extends OneShotEffect {
public SimoonEffect() {
public SimoonEffect(final SimoonEffect effect) {
public SimoonEffect copy() {return new SimoonEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SnakeBasket extends CardImpl {
public SnakeBasket(UUID ownerId) {
public SnakeBasket(final SnakeBasket card) {
public SnakeBasket copy() {return new SnakeBasket(this);
public class SpittingDrake extends CardImpl {
public SpittingDrake(UUID ownerId) {
public SpittingDrake(final SpittingDrake card) {
public SpittingDrake copy() {return new SpittingDrake(this);
public class SuqAtaAssassin extends CardImpl {
public SuqAtaAssassin(UUID ownerId) {
public SuqAtaAssassin(final SuqAtaAssassin card) {
public SuqAtaAssassin copy() {return new SuqAtaAssassin(this);
public class TalruumPiper extends CardImpl {
public TalruumPiper(UUID ownerId) {
public TalruumPiper(final TalruumPiper card) {
public TalruumPiper copy() {return new TalruumPiper(this);
class TalruumPiperEffect extends RequirementEffect {
public TalruumPiperEffect() {
public TalruumPiperEffect(TalruumPiperEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getAbilities().contains(FlyingAbility.getInstance())return false;
public boolean mustAttack(Game game) {return false;
public boolean mustBlock(Game game) {return true;
public UUID mustBlockAttacker(Ability source, Game game) {return source.getSourceId();
public TalruumPiperEffect copy() {return new TalruumPiperEffect(this);
public class TarPitWarrior extends CardImpl {
public TarPitWarrior(UUID ownerId) {
public TarPitWarrior(final TarPitWarrior card) {
public TarPitWarrior copy() {return new TarPitWarrior(this);
public class TeferisHonorGuard extends CardImpl {
public TeferisHonorGuard(UUID ownerId) {
public TeferisHonorGuard(final TeferisHonorGuard card) {
public TeferisHonorGuard copy() {return new TeferisHonorGuard(this);
public class TeferisRealm extends CardImpl {
public TeferisRealm(UUID ownerId) {
public TeferisRealm(final TeferisRealm card) {
public TeferisRealm copy() {return new TeferisRealm(this);
class TeferisRealmEffect extends OneShotEffect {
public TeferisRealmEffect() {
public TeferisRealmEffect(final TeferisRealmEffect effect) {
public TeferisRealmEffect copy() {return new TeferisRealmEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;return false;
public class TempestDrake extends CardImpl {
public TempestDrake(UUID ownerId) {
public TempestDrake(final TempestDrake card) {
public TempestDrake copy() {return new TempestDrake(this);
public class Tithe extends CardImpl {
public Tithe(UUID ownerId) {
public Tithe(final Tithe card) {
public Tithe copy() {return new Tithe(this);
class TitheEffect extends OneShotEffect {
TitheEffect() {
TitheEffect(final TitheEffect effect) {
public TitheEffect copy() {return new TitheEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class UktabiOrangutan extends CardImpl {
public UktabiOrangutan(UUID ownerId) {
public UktabiOrangutan(final UktabiOrangutan card) {
public UktabiOrangutan copy() {return new UktabiOrangutan(this);
public class UndiscoveredParadise extends CardImpl {
public UndiscoveredParadise(UUID ownerId) {
public UndiscoveredParadise(final UndiscoveredParadise card) {
public UndiscoveredParadise copy() {return new UndiscoveredParadise(this);
class UndiscoveredParadiseEffect extends OneShotEffect {
public UndiscoveredParadiseEffect() {staticText = "During your next untap step, as you untap your permanents, return {this} to its owner's hand";
public UndiscoveredParadiseEffect(final UndiscoveredParadiseEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public UndiscoveredParadiseEffect copy() {return new UndiscoveredParadiseEffect(this);
class AtBeginningOfUntapDelayedTriggeredAbility extends DelayedTriggeredAbility {
public AtBeginningOfUntapDelayedTriggeredAbility(Effect effect) {
public AtBeginningOfUntapDelayedTriggeredAbility(AtBeginningOfUntapDelayedTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.UNTAP_STEP_PRE ;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public AtBeginningOfUntapDelayedTriggeredAbility copy() {return new AtBeginningOfUntapDelayedTriggeredAbility(this);
public String getRule() {return "Return {this} to its owner's hand.";
public class UrborgMindsucker extends CardImpl {
public UrborgMindsucker(UUID ownerId) {
public UrborgMindsucker(final UrborgMindsucker card) {
public UrborgMindsucker copy() {return new UrborgMindsucker(this);
public class VampiricTutor extends CardImpl {
public VampiricTutor(UUID ownerId) {
public VampiricTutor(final VampiricTutor card) {
public VampiricTutor copy() {return new VampiricTutor(this);
public class WakeOfVultures extends CardImpl {
public WakeOfVultures(UUID ownerId) {
public WakeOfVultures(final WakeOfVultures card) {
public WakeOfVultures copy() {return new WakeOfVultures(this);
public class WandOfDenial extends CardImpl {
public WandOfDenial(UUID ownerId) {
public WandOfDenial(final WandOfDenial card) {
public WandOfDenial copy() {return new WandOfDenial(this);
class WandOfDenialEffect extends OneShotEffect {
public WandOfDenialEffect() {
public WandOfDenialEffect(final WandOfDenialEffect effect) {
public WandOfDenialEffect copy() {return new WandOfDenialEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Warthog extends CardImpl {
public Warthog(UUID ownerId) {
public Warthog(final Warthog card) {
public Warthog copy() {return new Warthog(this);
public class ZhalfirinCrusader extends CardImpl {
public ZhalfirinCrusader(UUID ownerId) {
public ZhalfirinCrusader(final ZhalfirinCrusader card) {
public ZhalfirinCrusader copy() {return new ZhalfirinCrusader(this);
public class Abduction extends CardImpl {
public Abduction(UUID ownerId) {
public Abduction(final Abduction card) {
public Abduction copy() {return new Abduction(this);
public class Abeyance extends CardImpl {
public Abeyance(UUID ownerId) {
public Abeyance(final Abeyance card) {
public Abeyance copy() {return new Abeyance(this);
public AbeyanceEffect() {
public AbeyanceEffect(final AbeyanceEffect effect) {
public AbeyanceEffect copy() {return new AbeyanceEffect(this);
public boolean apply(Game game, Ability source) {return true;
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast instant or sorcery spells or activate abilities that aren't mana abilities this turn (" + mageObject.getIdName() + ").";return null;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return true;return false;
public class AngelicRenewal extends CardImpl {
public AngelicRenewal(UUID ownerId) {
public AngelicRenewal(final AngelicRenewal card) {
public AngelicRenewal copy() {return new AngelicRenewal(this);
public class ArcticWolves extends CardImpl {
public ArcticWolves(UUID ownerId) {
public ArcticWolves(final ArcticWolves card) {
public ArcticWolves copy() {return new ArcticWolves(this);
public class ArgivianFind extends CardImpl {
public ArgivianFind(UUID ownerId) {
public ArgivianFind(final ArgivianFind card) {
public ArgivianFind copy() {return new ArgivianFind(this);
public class AuraOfSilence extends CardImpl {
public AuraOfSilence(UUID ownerId) {
public AuraOfSilence(final AuraOfSilence card) {
public AuraOfSilence copy() {return new AuraOfSilence(this);return true;return true;return false;return new AuraOfSilenceCostModificationEffect(this);
public class BarrowGhoul extends CardImpl {
public BarrowGhoul(UUID ownerId) {
public BarrowGhoul(final BarrowGhoul card) {
public BarrowGhoul copy() {return new BarrowGhoul(this);
public class BenalishMissionary extends CardImpl {
public BenalishMissionary(UUID ownerId) {
public BenalishMissionary(final BenalishMissionary card) {
public BenalishMissionary copy() {return new BenalishMissionary(this);
public class BoilingBlood extends CardImpl {
public BoilingBlood(UUID ownerId) {
public BoilingBlood(final BoilingBlood card) {
public BoilingBlood copy() {return new BoilingBlood(this);
public class BoneDancer extends CardImpl {
public BoneDancer(UUID ownerId) {
public BoneDancer(final BoneDancer card) {
public BoneDancer copy() {return new BoneDancer(this);
class BoneDancerEffect extends OneShotEffect {
public BoneDancerEffect() {
public BoneDancerEffect(final BoneDancerEffect effect) {
public BoneDancerEffect copy() {return new BoneDancerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BriarShield extends CardImpl {
public BriarShield(UUID ownerId) {
public BriarShield(final BriarShield card) {
public BriarShield copy() {return new BriarShield(this);
public class BubbleMatrix extends CardImpl {
public BubbleMatrix(UUID ownerId) {
public BubbleMatrix(final BubbleMatrix card) {
public BubbleMatrix copy() {return new BubbleMatrix(this);
public class CallOfTheWild extends CardImpl {
public CallOfTheWild(UUID ownerId) {
public CallOfTheWild(final CallOfTheWild card) {
public CallOfTheWild copy() {return new CallOfTheWild(this);
class CallOfTheWildEffect extends OneShotEffect {
public CallOfTheWildEffect() {
public CallOfTheWildEffect(final CallOfTheWildEffect effect) {
public CallOfTheWildEffect copy() {return new CallOfTheWildEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class ChimericSphere extends CardImpl {
public ChimericSphere(UUID ownerId) {
public ChimericSphere(final ChimericSphere card) {
public ChimericSphere copy() {return new ChimericSphere(this);
class ChimericSphereCreature1 extends Token {
public ChimericSphereCreature1() {
class ChimericSphereCreature2 extends Token {
public ChimericSphereCreature2() {
public class CinderGiant extends CardImpl {
public CinderGiant(UUID ownerId) {
public CinderGiant(final CinderGiant card) {
public CinderGiant copy() {return new CinderGiant(this);
public class CloudDjinn extends CardImpl {
public CloudDjinn(UUID ownerId) {
public CloudDjinn(final CloudDjinn card) {
public CloudDjinn copy() {return new CloudDjinn(this);
public class DenseFoliage extends CardImpl {
public DenseFoliage(UUID ownerId) {
public DenseFoliage(final DenseFoliage card) {
public DenseFoliage copy() {return new DenseFoliage(this);
public class Doomsday extends CardImpl {
public Doomsday(UUID ownerId) {
public Doomsday(final Doomsday card) {
public Doomsday copy() {return new Doomsday(this);
class DoomsdayEffect extends OneShotEffect {
public DoomsdayEffect() {
public DoomsdayEffect(final DoomsdayEffect effect) {
public DoomsdayEffect copy() {return new DoomsdayEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Downdraft extends CardImpl {
public Downdraft(UUID ownerId) {
public Downdraft(final Downdraft card) {
public Downdraft copy() {return new Downdraft(this);
public class DuskriderFalcon extends CardImpl {
public DuskriderFalcon(UUID ownerId) {
public DuskriderFalcon(final DuskriderFalcon card) {
public DuskriderFalcon copy() {return new DuskriderFalcon(this);
public class FallowWurm extends CardImpl {
public FallowWurm(UUID ownerId) {
public FallowWurm(final FallowWurm card) {
public FallowWurm copy() {return new FallowWurm(this);
public class FatalBlow extends CardImpl {
public FatalBlow(UUID ownerId) {
public FatalBlow(final FatalBlow card) {
public FatalBlow copy() {return new FatalBlow(this);
public class FesteringEvil extends CardImpl {
public FesteringEvil(UUID ownerId) {
public FesteringEvil(final FesteringEvil card) {
public FesteringEvil copy() {return new FesteringEvil(this);
public class Firestorm extends CardImpl {
public Firestorm(UUID ownerId) {
public Firestorm(final Firestorm card) {
public void adjustTargets(Ability ability, Game game) {
public Firestorm copy() {return new Firestorm(this);
class FirestormEffect extends OneShotEffect {
public FirestormEffect() {
public FirestormEffect(final FirestormEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public FirestormEffect copy() {return new FirestormEffect(this);
public class FitOfRage extends CardImpl {
public FitOfRage(UUID ownerId) {
public FitOfRage(final FitOfRage card) {
public FitOfRage copy() {return new FitOfRage(this);
public class FledglingDjinn extends CardImpl {
public FledglingDjinn(UUID ownerId) {
public FledglingDjinn(final FledglingDjinn card) {
public FledglingDjinn copy() {return new FledglingDjinn(this);
public class ForiysianBrigade extends CardImpl {
public ForiysianBrigade(UUID ownerId) {
public ForiysianBrigade(final ForiysianBrigade card) {
public ForiysianBrigade copy() {return new ForiysianBrigade(this);
public class Gallowbraid extends CardImpl {
public Gallowbraid(UUID ownerId) {
public Gallowbraid(final Gallowbraid card) {
public Gallowbraid copy() {return new Gallowbraid(this);
public class GoblinBomb extends CardImpl {
public GoblinBomb(UUID ownerId) {
public GoblinBomb(final GoblinBomb card) {
public GoblinBomb copy() {return new GoblinBomb(this);
class GoblinBombEffect extends OneShotEffect {
public GoblinBombEffect() {
public GoblinBombEffect(GoblinBombEffect effect) {
public boolean apply(Game game, Ability source) {return true;return true;return false;
public GoblinBombEffect copy() {return new GoblinBombEffect(this);
public class GoblinGrenadiers extends CardImpl {
public GoblinGrenadiers(UUID ownerId) {
public GoblinGrenadiers(final GoblinGrenadiers card) {
public GoblinGrenadiers copy() {return new GoblinGrenadiers(this);
public class GoblinVandal extends CardImpl {
public GoblinVandal(UUID ownerId) {
public GoblinVandal(final GoblinVandal card) {
public GoblinVandal copy() {return new GoblinVandal(this);
class GoblinVandalTriggeredAbility extends TriggeredAbilityImpl {
public GoblinVandalTriggeredAbility(Effect effect) {
public GoblinVandalTriggeredAbility(final GoblinVandalTriggeredAbility ability) {
public GoblinVandalTriggeredAbility copy() {return new GoblinVandalTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DECLARED_BLOCKERS;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} attacks and isn't blocked, you may pay {R}. If you do, destroy target artifact defending player controls and {this} assigns no combat damage this turn";
public class GuidedStrike extends CardImpl {
public GuidedStrike(UUID ownerId) {
public GuidedStrike(final GuidedStrike card) {
public GuidedStrike copy() {return new GuidedStrike(this);
public class HarvestWurm extends CardImpl {
public HarvestWurm(UUID ownerId) {
public HarvestWurm(final HarvestWurm card) {
public HarvestWurm copy() {return new HarvestWurm(this);
public class HauntingMisery extends CardImpl {
public HauntingMisery(UUID ownerId) {
public HauntingMisery(final HauntingMisery card) {
public HauntingMisery copy() {return new HauntingMisery(this);
public class JabarisBanner extends CardImpl {
public JabarisBanner(UUID ownerId) {
public JabarisBanner(final JabarisBanner card) {
public JabarisBanner copy() {return new JabarisBanner(this);
public class LavaHounds extends CardImpl {
public LavaHounds(UUID ownerId) {
public LavaHounds(final LavaHounds card) {
public LavaHounds copy() {return new LavaHounds(this);
public class LlanowarDruid extends CardImpl {
public LlanowarDruid(UUID ownerId) {
public LlanowarDruid(final LlanowarDruid card) {
public LlanowarDruid copy() {return new LlanowarDruid(this);
class LlanowarDruidEffect extends OneShotEffect {
public LlanowarDruidEffect() {
public LlanowarDruidEffect(final LlanowarDruidEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public LlanowarDruidEffect copy() {return new LlanowarDruidEffect(this);
public class LlanowarSentinel extends CardImpl {
public LlanowarSentinel(UUID ownerId) {
public LlanowarSentinel(final LlanowarSentinel card) {
public LlanowarSentinel copy() {return new LlanowarSentinel(this);
class LlanowarSentinelEffect extends OneShotEffect {
LlanowarSentinelEffect() {
LlanowarSentinelEffect(final LlanowarSentinelEffect effect) {
public LlanowarSentinelEffect copy() {return new LlanowarSentinelEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class MantaRay extends CardImpl {
public MantaRay(UUID ownerId) {
public MantaRay(final MantaRay card) {
public MantaRay copy() {return new MantaRay(this);
public class MaraxusOfKeld extends CardImpl {
public MaraxusOfKeld(UUID ownerId) {
public MaraxusOfKeld(final MaraxusOfKeld card) {
public MaraxusOfKeld copy() {return new MaraxusOfKeld(this);
public class MasterOfArms extends CardImpl {
public MasterOfArms(UUID ownerId) {
public MasterOfArms(final MasterOfArms card) {
public MasterOfArms copy() {return new MasterOfArms(this);
public class MerfolkTraders extends CardImpl {
public MerfolkTraders(UUID ownerId) {
public MerfolkTraders(final MerfolkTraders card) {
public MerfolkTraders copy() {return new MerfolkTraders(this);
public class MischievousPoltergeist extends CardImpl {
public MischievousPoltergeist(UUID ownerId) {
public MischievousPoltergeist(final MischievousPoltergeist card) {
public MischievousPoltergeist copy() {return new MischievousPoltergeist(this);
public class Morinfen extends CardImpl {
public Morinfen(UUID ownerId) {
public Morinfen(final Morinfen card) {
public Morinfen copy() {return new Morinfen(this);
public class MwonvuliOoze extends CardImpl {
public MwonvuliOoze(UUID ownerId) {
public MwonvuliOoze(final MwonvuliOoze card) {
public MwonvuliOoze copy() {return new MwonvuliOoze(this);
class MwonvuliOozePTValue extends CountersCount {
public MwonvuliOozePTValue() {
public MwonvuliOozePTValue(final MwonvuliOozePTValue value) {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return 2 * super.calculate(game, sourceAbility, effect) + 1;
public MwonvuliOozePTValue copy() {return new MwonvuliOozePTValue(this);
public String getMessage() {return "1 plus twice the number of age counters on it";
public class NaturesKiss extends CardImpl {
public NaturesKiss(UUID ownerId) {
public NaturesKiss(final NaturesKiss card) {
public NaturesKiss copy() {return new NaturesKiss(this);
public class Necratog extends CardImpl {
public Necratog(UUID ownerId) {
public Necratog(final Necratog card) {
public Necratog copy() {return new Necratog(this);
public class NullRod extends CardImpl {
public NullRod(UUID ownerId) {
public NullRod(final NullRod card) {
public NullRod copy() {return new NullRod(this);
class NullRodCantActivateEffect extends RestrictionEffect {
public NullRodCantActivateEffect() {
public NullRodCantActivateEffect(final NullRodCantActivateEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getCardType().contains(CardType.ARTIFACT);
public boolean canUseActivatedAbilities(Permanent permanent, Ability source, Game game) {return false;
public NullRodCantActivateEffect copy() {return new NullRodCantActivateEffect(this);
public class OdylicWraith extends CardImpl {
public OdylicWraith(UUID ownerId) {
public OdylicWraith(final OdylicWraith card) {
public OdylicWraith copy() {return new OdylicWraith(this);
public class OrcishSettlers extends CardImpl {
public OrcishSettlers(UUID ownerId) {
public OrcishSettlers(final OrcishSettlers card) {
public OrcishSettlers copy() {return new OrcishSettlers(this);
class OrcishSettlersEffect extends OneShotEffect {
public OrcishSettlersEffect() {
public OrcishSettlersEffect(final OrcishSettlersEffect effect) {
public OrcishSettlersEffect copy() {return new OrcishSettlersEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;return new ParadigmShift(this);
class ExileLibraryEffect extends OneShotEffect {
public ExileLibraryEffect() {
public ExileLibraryEffect copy() {return new ExileLibraryEffect();
public boolean apply(Game game, Ability source) {return true;return false;
public class Peacekeeper extends CardImpl {
public Peacekeeper(UUID ownerId) {
public Peacekeeper(final Peacekeeper card) {
public Peacekeeper copy() {return new Peacekeeper(this);
class PeacekeeperCantAttackEffect extends RestrictionEffect {
public PeacekeeperCantAttackEffect() {
public PeacekeeperCantAttackEffect(final PeacekeeperCantAttackEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.getCardType().contains(CardType.CREATURE);
public boolean canAttack(Game game) {return false;
public PeacekeeperCantAttackEffect copy() {return new PeacekeeperCantAttackEffect(this);
public class PendrellMists extends CardImpl {
public PendrellMists(UUID ownerId) {
public PendrellMists(final PendrellMists card) {
public PendrellMists copy() {return new PendrellMists(this);
public class PhyrexianFurnace extends CardImpl {
public PhyrexianFurnace(UUID ownerId) {
public PhyrexianFurnace(final PhyrexianFurnace card) {
public PhyrexianFurnace copy() {return new PhyrexianFurnace(this);
class PhyrexianFurnaceEffect extends OneShotEffect {
public PhyrexianFurnaceEffect() {
public PhyrexianFurnaceEffect(final PhyrexianFurnaceEffect effect) {
public PhyrexianFurnaceEffect copy() {return new PhyrexianFurnaceEffect(this);
public boolean apply(Game game, Ability source) {return player.moveCardToExileWithInfo(bottomCard, null, "", source.getSourceId(), game, Zone.GRAVEYARD, true);return true;return false;
public class PsychicVortex extends CardImpl {
public PsychicVortex(UUID ownerId) {
public PsychicVortex(final PsychicVortex card) {
public PsychicVortex copy() {return new PsychicVortex(this);
class PsychicVortexCost extends CostImpl {
PsychicVortexCost() {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return true;return false;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return controller.getLibrary().size() > 0;
public PsychicVortexCost copy() {return new PsychicVortexCost();
public class RedwoodTreefolk extends CardImpl {
public RedwoodTreefolk(UUID ownerId) {
public RedwoodTreefolk(final RedwoodTreefolk card) {
public RedwoodTreefolk copy() {return new RedwoodTreefolk(this);
public class RocHatchling extends CardImpl {
public RocHatchling(UUID ownerId) {
public RocHatchling(final RocHatchling card) {
public RocHatchling copy() {return new RocHatchling(this);
public class RogueElephant extends CardImpl {
public RogueElephant(UUID ownerId) {
public RogueElephant(final RogueElephant card) {
public RogueElephant copy() {return new RogueElephant(this);
public class ScorchedRuins extends CardImpl {
public ScorchedRuins(UUID ownerId) {
public ScorchedRuins(final ScorchedRuins card) {
public ScorchedRuins copy() {return new ScorchedRuins(this);
public class Serenity extends CardImpl {
public Serenity(UUID ownerId) {
public Serenity(final Serenity card) {
public Serenity copy() {return new Serenity(this);return new ShadowRider(this);
public class SoulShepherd extends CardImpl {
public SoulShepherd(UUID ownerId) {
public SoulShepherd(final SoulShepherd card) {
public SoulShepherd copy() {return new SoulShepherd(this);
public class SpinningDarkness extends CardImpl {
public SpinningDarkness(UUID ownerId) {
public SpinningDarkness(final SpinningDarkness card) {
public SpinningDarkness copy() {return new SpinningDarkness(this);
class SpinningDarknessCost extends CostImpl {
SpinningDarknessCost() {
SpinningDarknessCost(final SpinningDarknessCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return controller.getGraveyard().getCards(filter, game).size() >= 3;return false;
public SpinningDarknessCost copy() {return new SpinningDarknessCost(this);
public class StripedBears extends CardImpl {
public StripedBears(UUID ownerId) {
public StripedBears(final StripedBears card) {
public StripedBears copy() {return new StripedBears(this);return new Tariff(this);return new TariffEffect(this);
public boolean apply(Game game, Ability source) {return true;
private void processPlayer(Game game, Ability source, Player player) {return;
private List<Permanent> getPermanentsWithTheHighestCMC(Game game, UUID playerId, FilterPermanent filter) {return result;
private Permanent chooseOnePermanent(Game game, Player player, List<Permanent> permanents) {return permanent;
public class TendrilsOfDespair extends CardImpl {
public TendrilsOfDespair(UUID ownerId) {
public TendrilsOfDespair(final TendrilsOfDespair card) {
public TendrilsOfDespair copy() {return new TendrilsOfDespair(this);
public class TolarianDrake extends CardImpl {
public TolarianDrake(UUID ownerId) {
public TolarianDrake(final TolarianDrake card) {
public TolarianDrake copy() {return new TolarianDrake(this);
public class TolarianEntrancer extends CardImpl {
public TolarianEntrancer(UUID ownerId) {
public TolarianEntrancer(final TolarianEntrancer card) {
public TolarianEntrancer copy() {return new TolarianEntrancer(this);
class TolarianEntrancerDelayedTriggeredAbility extends DelayedTriggeredAbility {
public TolarianEntrancerDelayedTriggeredAbility() {
public TolarianEntrancerDelayedTriggeredAbility(final TolarianEntrancerDelayedTriggeredAbility ability) {
public TolarianEntrancerDelayedTriggeredAbility copy() {return new TolarianEntrancerDelayedTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_COMBAT_STEP_POST;
public boolean checkTrigger(GameEvent event, Game game) {return true;
public String getRule() {return "gain control of that creature at end of combat";
public class TolarianSerpent extends CardImpl {
public TolarianSerpent(UUID ownerId) {
public TolarianSerpent(final TolarianSerpent card) {
public TolarianSerpent copy() {return new TolarianSerpent(this);
public class Touchstone extends CardImpl {
public Touchstone(UUID ownerId) {
public Touchstone(final Touchstone card) {
public Touchstone copy() {return new Touchstone(this);
public class TranquilGrove extends CardImpl {
public TranquilGrove(UUID ownerId) {
public TranquilGrove(final TranquilGrove card) {
public TranquilGrove copy() {return new TranquilGrove(this);
public class UktabiEfreet extends CardImpl {
public UktabiEfreet(UUID ownerId) {
public UktabiEfreet(final UktabiEfreet card) {
public UktabiEfreet copy() {return new UktabiEfreet(this);
public class UrborgJustice extends CardImpl {
public UrborgJustice(UUID ownerId) {
public UrborgJustice(final UrborgJustice card) {
public UrborgJustice copy() {return new UrborgJustice(this);
class UrborgJusticeDynamicValue implements DynamicValue {
public UrborgJusticeDynamicValue copy() {return new UrborgJusticeDynamicValue();
public String toString() {return "1";
public String getMessage() {return "creature put into your graveyard from the battlefield this turn";
public int calculate(Game game, Ability sourceAbility, Effect effect) {return count;
public class Vitalize extends CardImpl {
public Vitalize(UUID ownerId) {
public Vitalize(final Vitalize card) {
public Vitalize copy() {return new Vitalize(this);
public class XanthicStatue extends CardImpl {
public XanthicStatue(UUID ownerId) {
public XanthicStatue(final XanthicStatue card) {
public XanthicStatue copy() {return new XanthicStatue(this);
class XanthicStatueCreature extends Token {
public XanthicStatueCreature() {
public class ZombieScavengers extends CardImpl {
public ZombieScavengers(UUID ownerId) {
public ZombieScavengers(final ZombieScavengers card) {
public ZombieScavengers copy() {return new ZombieScavengers(this);
public class AbyssalPersecutor extends CardImpl {
public AbyssalPersecutor(UUID ownerId) {
public AbyssalPersecutor(final AbyssalPersecutor card) {
public AbyssalPersecutor copy() {return new AbyssalPersecutor(this);
AbyssalPersecutorCannotWinEffect() {
AbyssalPersecutorCannotWinEffect ( final AbyssalPersecutorCannotWinEffect effect ) {
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.LOSES || event.getType() == EventType.WINS ;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public AbyssalPersecutorCannotWinEffect copy() {return new AbyssalPersecutorCannotWinEffect(this);
public class AdmonitionAngel extends CardImpl {
public AdmonitionAngel(UUID ownerId) {
public AdmonitionAngel(final AdmonitionAngel card) {
public AdmonitionAngel copy() {return new AdmonitionAngel(this);
public class AEtherTradewinds extends CardImpl {
public AEtherTradewinds(UUID ownerId) {
public AEtherTradewinds(final AEtherTradewinds card) {
public AEtherTradewinds copy() {return new AEtherTradewinds(this);
class AEtherTradewindsEffect extends OneShotEffect {
public AEtherTradewindsEffect() {
public AEtherTradewindsEffect(final AEtherTradewindsEffect effect) {
public AEtherTradewindsEffect copy() {return new AEtherTradewindsEffect(this);
public boolean apply(Game game, Ability source) {return result;
public class AgadeemOccultist extends CardImpl {
public AgadeemOccultist(UUID ownerId) {
public AgadeemOccultist(final AgadeemOccultist card) {
public AgadeemOccultist copy() {return new AgadeemOccultist(this);
class AgadeemOccultistEffect extends OneShotEffect {
public AgadeemOccultistEffect() {
public AgadeemOccultistEffect(final AgadeemOccultistEffect effect) {
public AgadeemOccultistEffect copy() {return new AgadeemOccultistEffect(this);
public boolean apply(Game game, Ability source) {return controller.moveCards(card, Zone.BATTLEFIELD, source, game);return true;return false;
public class AkoumBattlesinger extends CardImpl {
public AkoumBattlesinger(UUID ownerId) {
public AkoumBattlesinger(final AkoumBattlesinger card) {
public AkoumBattlesinger copy() {return new AkoumBattlesinger(this);
public class AmuletOfVigor extends CardImpl {
public AmuletOfVigor(UUID ownerId) {
public AmuletOfVigor(final AmuletOfVigor card) {
public AmuletOfVigor copy() {return new AmuletOfVigor(this);
class AmuletOfVigorTriggeredAbility extends TriggeredAbilityImpl {
AmuletOfVigorTriggeredAbility() {
AmuletOfVigorTriggeredAbility(final AmuletOfVigorTriggeredAbility ability) {
public AmuletOfVigorTriggeredAbility copy() {return new AmuletOfVigorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a permanent enters the battlefield tapped and under your control, untap it.";
public class AnowonTheRuinSage extends CardImpl {
public AnowonTheRuinSage(UUID ownerId) {
public AnowonTheRuinSage(final AnowonTheRuinSage card) {
public AnowonTheRuinSage copy() {return new AnowonTheRuinSage(this);
public class ApexHawks extends CardImpl {
public ApexHawks(UUID ownerId) {
public ApexHawks(final ApexHawks card) {
public ApexHawks copy() {return new ApexHawks(this);
public class ArborElf extends CardImpl {
public ArborElf(UUID ownerId) {
public ArborElf(final ArborElf card) {
public ArborElf copy() {return new ArborElf(this);
public class ArchonOfRedemption extends CardImpl {
public ArchonOfRedemption(UUID ownerId) {
public ArchonOfRedemption(final ArchonOfRedemption card) {
public ArchonOfRedemption copy() {return new ArchonOfRedemption(this);
class ArchonOfRedemptionTriggeredAbility extends TriggeredAbilityImpl {
ArchonOfRedemptionTriggeredAbility() {
ArchonOfRedemptionTriggeredAbility(final ArchonOfRedemptionTriggeredAbility ability) {
public ArchonOfRedemptionTriggeredAbility copy() {return new ArchonOfRedemptionTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} or another creature with flying enters the battlefield under your control, you may gain life equal to that creature's power";
class ArchonOfRedemptionEffect extends OneShotEffect {
ArchonOfRedemptionEffect() {
ArchonOfRedemptionEffect(final ArchonOfRedemptionEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public ArchonOfRedemptionEffect copy() {return new ArchonOfRedemptionEffect(this);
public class AvengerOfZendikar extends CardImpl {
public AvengerOfZendikar (UUID ownerId) {
public AvengerOfZendikar (final AvengerOfZendikar card) {
public AvengerOfZendikar copy() {return new AvengerOfZendikar(this);
public class BasiliskCollar extends CardImpl {
public BasiliskCollar(UUID ownerId) {
public BasiliskCollar(final BasiliskCollar card) {
public BasiliskCollar copy() {return new BasiliskCollar(this);
public class BattleHurda extends CardImpl {
public BattleHurda (UUID ownerId) {
public BattleHurda (final BattleHurda card) {
public BattleHurda copy() {return new BattleHurda(this);
public class BazaarTrader extends CardImpl {
public BazaarTrader(UUID ownerId) {
public BazaarTrader(final BazaarTrader card) {
public BazaarTrader copy() {return new BazaarTrader(this);
class BazaarTraderEffect extends ContinuousEffectImpl {
public BazaarTraderEffect() {
public BazaarTraderEffect(final BazaarTraderEffect effect) {
public BazaarTraderEffect copy() {return new BazaarTraderEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return permanent.changeControllerId(player.getId(), game);return false;
public class BestialMenace extends CardImpl {
public BestialMenace(UUID ownerId) {
public BestialMenace(final BestialMenace card) {
public BestialMenace copy() {return new BestialMenace(this);
public class BloodhuskRitualist extends CardImpl {
public BloodhuskRitualist (UUID ownerId) {
public BloodhuskRitualist (final BloodhuskRitualist card) {
public BloodhuskRitualist copy() {return new BloodhuskRitualist(this);
public class BrinkOfDisaster extends CardImpl {
public BrinkOfDisaster(UUID ownerId) {
public BrinkOfDisaster(final BrinkOfDisaster card) {
public BrinkOfDisaster copy() {return new BrinkOfDisaster(this);
public class BullRush extends CardImpl {
public BullRush (UUID ownerId) {
public BullRush (final BullRush card) {
public BullRush copy() {return new BullRush(this);
public class ButcherOfMalakir extends CardImpl {
public ButcherOfMalakir(UUID ownerId) {
public ButcherOfMalakir(final ButcherOfMalakir card) {
public ButcherOfMalakir copy() {return new ButcherOfMalakir(this);
public class CalciteSnapper extends CardImpl {
public CalciteSnapper(UUID ownerId) {
public CalciteSnapper(final CalciteSnapper card) {
public CalciteSnapper copy() {return new CalciteSnapper(this);
public class CanopyCover extends CardImpl {
public CanopyCover(UUID ownerId) {
public CanopyCover(final CanopyCover card) {
public CanopyCover copy() {return new CanopyCover(this);
class OrchardSpiritEffect extends RestrictionEffect {
public OrchardSpiritEffect() {
public OrchardSpiritEffect(final OrchardSpiritEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return blocker.getAbilities().contains(FlyingAbility.getInstance()) || blocker.getAbilities().contains(ReachAbility.getInstance());
public OrchardSpiritEffect copy() {return new OrchardSpiritEffect(this);
public class CausticCrawler extends CardImpl {
public CausticCrawler(UUID ownerId) {
public CausticCrawler(final CausticCrawler card) {
public CausticCrawler copy() {return new CausticCrawler(this);
public class CelestialColonnade extends CardImpl {
public CelestialColonnade(UUID ownerId) {
public CelestialColonnade(final CelestialColonnade card) {
public CelestialColonnade copy() {return new CelestialColonnade(this);
class CelestialColonnadeToken extends Token {
public CelestialColonnadeToken() {
public class ChainReaction extends CardImpl {
public ChainReaction(UUID ownerId) {
public ChainReaction(final ChainReaction card) {
public ChainReaction copy() {return new ChainReaction(this);
public class ClawsOfValakut extends CardImpl {
public ClawsOfValakut (UUID ownerId) {
public ClawsOfValakut (final ClawsOfValakut card) {
public ClawsOfValakut copy() {return new ClawsOfValakut(this);
public class CometStorm extends CardImpl {
public CometStorm(UUID ownerId) {
public CometStorm(final CometStorm card) {
public void adjustTargets(Ability ability, Game game) {
public CometStorm copy() {return new CometStorm(this);
class CometStormEffect extends OneShotEffect {
public CometStormEffect() {
public CometStormEffect(final CometStormEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CometStormEffect copy() {return new CometStormEffect(this);
public class CorruptedZendikon extends CardImpl {
public CorruptedZendikon(UUID ownerId) {
public CorruptedZendikon(final CorruptedZendikon card) {
public CorruptedZendikon copy() {return new CorruptedZendikon(this);
class OozeToken extends Token {
OozeToken() {
public class CosisRavager extends CardImpl {
public CosisRavager (UUID ownerId) {
public CosisRavager (final CosisRavager card) {
public CosisRavager copy() {return new CosisRavager(this);
public class CreepingTarPit extends CardImpl {
public CreepingTarPit (UUID ownerId) {
public CreepingTarPit (final CreepingTarPit card) {
public CreepingTarPit copy() {return new CreepingTarPit(this);
class CreepingTarPitToken extends Token {
public CreepingTarPitToken() {
public class CrusherZendikon extends CardImpl {
public CrusherZendikon(UUID ownerId) {
public CrusherZendikon(final CrusherZendikon card) {
public CrusherZendikon copy() {return new CrusherZendikon(this);
class BeastToken extends Token {
BeastToken() {
public class CunningSparkmage extends CardImpl {
public CunningSparkmage (UUID ownerId) {
public CunningSparkmage (final CunningSparkmage card) {
public CunningSparkmage copy() {return new CunningSparkmage(this);
public class DeadReckoning extends CardImpl {
public DeadReckoning(UUID ownerId) {
public DeadReckoning(final DeadReckoning card) {
public DeadReckoning copy() {return new DeadReckoning(this);
class DeadReckoningEffect extends OneShotEffect {
public DeadReckoningEffect() {
public DeadReckoningEffect(final DeadReckoningEffect effect) {
public DeadReckoningEffect copy() {return new DeadReckoningEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new DeathforgeShaman(this);return new DeathforgeShamanEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new DeathsShadow(this);
public class DreadStatuary extends CardImpl {
public DreadStatuary(UUID ownerId) {
public DreadStatuary(final DreadStatuary card) {
public DreadStatuary copy() {return new DreadStatuary(this);
class DreadStatuaryToken extends Token {
public DreadStatuaryToken() {
public class EnclaveElite extends CardImpl {
public EnclaveElite(UUID ownerId) {
public EnclaveElite(final EnclaveElite card) {
public EnclaveElite copy() {return new EnclaveElite(this);
public class EverflowingChalice extends CardImpl {
public EverflowingChalice(UUID ownerId) {
public EverflowingChalice(final EverflowingChalice card) {
public EverflowingChalice copy() {return new EverflowingChalice(this);
public class Explore extends CardImpl {
public Explore(UUID ownerId) {
public Explore(final Explore card) {
public Explore copy() {return new Explore(this);
public class EyeOfUgin extends CardImpl {
public EyeOfUgin (UUID ownerId) {
public EyeOfUgin (final EyeOfUgin card) {
public EyeOfUgin copy() {return new EyeOfUgin(this);
public class FeralContest extends CardImpl {
public FeralContest(UUID ownerId) {
public FeralContest(final FeralContest card) {
public FeralContest copy() {return new FeralContest(this);
class FeralContestEffect extends RequirementEffect {
public FeralContestEffect() {
public FeralContestEffect(Duration duration) {
public FeralContestEffect(final FeralContestEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.canBlock(source.getFirstTarget(), game);return false;
public boolean mustAttack(Game game) {return false;
public boolean mustBlock(Game game) {return true;
public UUID mustBlockAttacker(Ability source, Game game) {return source.getFirstTarget();
public FeralContestEffect copy() {return new FeralContestEffect(this);return new FledglingGriffin(this);
public class GnarlidPack extends CardImpl {
public GnarlidPack(UUID ownerId) {
public GnarlidPack(final GnarlidPack card) {
public GnarlidPack copy() {return new GnarlidPack(this);
public class GoblinRoughrider extends CardImpl {
public GoblinRoughrider (UUID ownerId) {
public GoblinRoughrider (final GoblinRoughrider card) {
public GoblinRoughrider copy() {return new GoblinRoughrider(this);
public class GoliathSphinx extends CardImpl {
public GoliathSphinx (UUID ownerId) {
public GoliathSphinx (final GoliathSphinx card) {
public GoliathSphinx copy() {return new GoliathSphinx(this);
public class GrapplerSpider extends CardImpl {
public GrapplerSpider (UUID ownerId) {
public GrapplerSpider (final GrapplerSpider card) {
public GrapplerSpider copy() {return new GrapplerSpider(this);
public class GraypeltHunter extends CardImpl {
public GraypeltHunter(UUID ownerId) {
public GraypeltHunter(final GraypeltHunter card) {
public GraypeltHunter copy() {return new GraypeltHunter(this);
public class GrotagThrasher extends CardImpl {
public GrotagThrasher(UUID ownerId) {
public GrotagThrasher(final GrotagThrasher card) {
public GrotagThrasher copy() {return new GrotagThrasher(this);
public class Groundswell extends CardImpl {
public Groundswell(UUID ownerId) {
public Groundswell(final Groundswell card) {
public Groundswell copy() {return new Groundswell(this);
public class GuardianZendikon extends CardImpl {
public GuardianZendikon(UUID ownerId) {
public GuardianZendikon(final GuardianZendikon card) {
public GuardianZendikon copy() {return new GuardianZendikon(this);
class WallToken extends Token {
WallToken() {
public class HadaFreeblade extends CardImpl {
public HadaFreeblade(UUID ownerId) {
public HadaFreeblade(final HadaFreeblade card) {
public HadaFreeblade copy() {return new HadaFreeblade(this);
public class HalimarDepths extends CardImpl {
public HalimarDepths(UUID ownerId) {
public HalimarDepths(final HalimarDepths card) {
public HalimarDepths copy() {return new HalimarDepths(this);
public class HalimarExcavator extends CardImpl {
public HalimarExcavator(UUID ownerId) {
public HalimarExcavator(final HalimarExcavator card) {
public HalimarExcavator copy() {return new HalimarExcavator(this);
public class HedronRover extends CardImpl {
public HedronRover (UUID ownerId) {
public HedronRover (final HedronRover card) {
public HedronRover copy() {return new HedronRover(this);
public class HorizonDrake extends CardImpl {
public HorizonDrake(UUID ownerId) {
public HorizonDrake(final HorizonDrake card) {
public HorizonDrake copy() {return new HorizonDrake(this);
public class IonasJudgment extends CardImpl {
public IonasJudgment (UUID ownerId) {
public IonasJudgment (final IonasJudgment card) {
public IonasJudgment copy() {return new IonasJudgment(this);
public class JaceTheMindSculptor extends CardImpl {
public JaceTheMindSculptor(UUID ownerId) {
public JaceTheMindSculptor(final JaceTheMindSculptor card) {
public JaceTheMindSculptor copy() {return new JaceTheMindSculptor(this);
class JaceTheMindSculptorEffect1 extends OneShotEffect {
public JaceTheMindSculptorEffect1() {
public JaceTheMindSculptorEffect1(final JaceTheMindSculptorEffect1 effect) {
public JaceTheMindSculptorEffect1 copy() {return new JaceTheMindSculptorEffect1(this);
public boolean apply(Game game, Ability source) {return true;return false;
class JaceTheMindSculptorEffect2 extends OneShotEffect {
public JaceTheMindSculptorEffect2() {
public JaceTheMindSculptorEffect2(final JaceTheMindSculptorEffect2 effect) {
public JaceTheMindSculptorEffect2 copy() {return new JaceTheMindSculptorEffect2(this);
public boolean apply(Game game, Ability source) {return true;return false;
class JaceTheMindSculptorEffect3 extends OneShotEffect {
public JaceTheMindSculptorEffect3() {
public JaceTheMindSculptorEffect3(final JaceTheMindSculptorEffect3 effect) {
public JaceTheMindSculptorEffect3 copy() {return new JaceTheMindSculptorEffect3(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class JagwaspSwarm extends CardImpl {
public JagwaspSwarm (UUID ownerId) {
public JagwaspSwarm (final JagwaspSwarm card) {
public JagwaspSwarm copy() {return new JagwaspSwarm(this);
public class JoinTheRanks extends CardImpl {
public JoinTheRanks (UUID ownerId) {
public JoinTheRanks (final JoinTheRanks card) {
public JoinTheRanks copy() {return new JoinTheRanks(this);
class JoinTheRanksSoldierToken extends Token {
public JoinTheRanksSoldierToken() {
public class JoragaWarcaller extends CardImpl {
public JoragaWarcaller(UUID ownerId) {
public JoragaWarcaller(final JoragaWarcaller card) {
public JoragaWarcaller copy() {return new JoragaWarcaller(this);
public class KalastriaHighborn extends CardImpl {
public KalastriaHighborn(UUID ownerId) {
public KalastriaHighborn(final KalastriaHighborn card) {
public KalastriaHighborn copy() {return new KalastriaHighborn(this);
class KalastriaHighbornTriggeredAbility extends TriggeredAbilityImpl {
KalastriaHighbornTriggeredAbility ( ) {
KalastriaHighbornTriggeredAbility ( KalastriaHighbornTriggeredAbility ability ) {
public KalastriaHighbornTriggeredAbility copy() {return new KalastriaHighbornTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean checkTrigger(GameEvent event, Game game) {return false;return permanent != null &&
public String getRule() {return "Whenever {this} or another Vampire you control is put"return new KazuulTyrantOfTheCliffs(this);return new KazuulTyrantOfTheCliffsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature an opponent controls attacks, if you're the defending player, put a 3/3 red Ogre creature token onto the battlefield unless that creature's controller pays {3}";
public boolean apply(Game game, Ability source) {return token.putOntoBattlefield(1, game, source.getSourceId(), source.getControllerId());return false;return new KazuulTyrantOfTheCliffsEffect(this);
class OgreToken extends Token {
OgreToken() {
public class KhalniGarden extends CardImpl {
public KhalniGarden(UUID ownerId) {
public KhalniGarden(final KhalniGarden card) {
public KhalniGarden copy() {return new KhalniGarden(this);
public class Kitesail extends CardImpl {
public Kitesail(UUID ownerId) {
public Kitesail(final Kitesail card) {
public Kitesail copy() {return new Kitesail(this);
public class KitesailApprentice extends CardImpl {
public KitesailApprentice(UUID ownerId) {
public KitesailApprentice(final KitesailApprentice card) {
public KitesailApprentice copy() {return new KitesailApprentice(this);
public class KorFirewalker extends CardImpl {
public KorFirewalker (UUID ownerId) {
public KorFirewalker (final KorFirewalker card) {
public KorFirewalker copy() {return new KorFirewalker(this);
class KorFirewalkerAbility extends TriggeredAbilityImpl {
public KorFirewalkerAbility() {
public KorFirewalkerAbility(final KorFirewalkerAbility ability) {
public KorFirewalkerAbility copy() {return new KorFirewalkerAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return spell != null && spell.getColor(game).isRed();
public String getRule() {return "Whenever a player casts a red spell, you may gain 1 life.";
public class LavaclawReaches extends CardImpl {
public LavaclawReaches(UUID ownerId) {
public LavaclawReaches(final LavaclawReaches card) {
public LavaclawReaches copy() {return new LavaclawReaches(this);
class LavaclawReachesToken extends Token {
public LavaclawReachesToken() {
public class LeatherbackBaloth extends CardImpl {
public LeatherbackBaloth (UUID ownerId) {
public LeatherbackBaloth (final LeatherbackBaloth card) {
public LeatherbackBaloth copy() {return new LeatherbackBaloth(this);
public class LightkeeperOfEmeria extends CardImpl {
public LightkeeperOfEmeria(UUID ownerId) {
public LightkeeperOfEmeria(final LightkeeperOfEmeria card) {
public LightkeeperOfEmeria copy() {return new LightkeeperOfEmeria(this);
public class LoamLion extends CardImpl {
public LoamLion(UUID ownerId) {
public LoamLion(final LoamLion card) {
public LoamLion copy() {return new LoamLion(this);
public class MarshThreader extends CardImpl {
public MarshThreader (UUID ownerId) {
public MarshThreader (final MarshThreader card) {
public MarshThreader copy() {return new MarshThreader(this);
public class MiresToll extends CardImpl {
public MiresToll(UUID ownerId) {
public MiresToll(final MiresToll card) {
public MiresToll copy() {return new MiresToll(this);
public class MordantDragon extends CardImpl {
public MordantDragon(UUID ownerId) {
public MordantDragon(final MordantDragon card) {
public MordantDragon copy() {return new MordantDragon(this);
class MordantDragonEffect extends OneShotEffect {
public MordantDragonEffect() {
public MordantDragonEffect(final MordantDragonEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public MordantDragonEffect copy() {return new MordantDragonEffect(this);
public class MysteriesOfTheDeep extends CardImpl {
public MysteriesOfTheDeep(UUID ownerId) {
public MysteriesOfTheDeep(final MysteriesOfTheDeep card) {
public MysteriesOfTheDeep copy() {return new MysteriesOfTheDeep(this);
public class NaturesClaim extends CardImpl {
public NaturesClaim(UUID ownerId) {
public NaturesClaim(final NaturesClaim card) {
public NaturesClaim copy() {return new NaturesClaim(this);
class NaturesClaimEffect extends OneShotEffect {
NaturesClaimEffect() {
NaturesClaimEffect(final NaturesClaimEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public NaturesClaimEffect copy() {return new NaturesClaimEffect(this);
public class NemesisTrap extends CardImpl {
public NemesisTrap(UUID ownerId) {
public NemesisTrap(final NemesisTrap card) {
public NemesisTrap copy() {return new NemesisTrap(this);
class NemesisTrapEffect extends OneShotEffect {
public NemesisTrapEffect() {
public NemesisTrapEffect(final NemesisTrapEffect effect) {
public NemesisTrapEffect copy() {return new NemesisTrapEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class NovablastWurm extends CardImpl {
public NovablastWurm(UUID ownerId) {
public NovablastWurm(final NovablastWurm card) {
public NovablastWurm copy() {return new NovablastWurm(this);
public class OmnathLocusOfMana extends CardImpl {
public OmnathLocusOfMana(UUID ownerId) {
public OmnathLocusOfMana(final OmnathLocusOfMana card) {
public OmnathLocusOfMana copy() {return new OmnathLocusOfMana(this);
class OmnathRuleEffect extends ContinuousEffectImpl {
public OmnathRuleEffect() {
public OmnathRuleEffect(final OmnathRuleEffect effect) {
public OmnathRuleEffect copy() {return new OmnathRuleEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return false; }
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.RulesEffects;
public class PerimeterCaptain extends CardImpl {
public PerimeterCaptain(UUID ownerId) {
public PerimeterCaptain(final PerimeterCaptain card) {
public PerimeterCaptain copy() {return new PerimeterCaptain(this);
class PerimeterCaptainTriggeredAbility extends TriggeredAbilityImpl {
public PerimeterCaptainTriggeredAbility(Effect effect, boolean optional) {
public PerimeterCaptainTriggeredAbility(final PerimeterCaptainTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.BLOCKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control with defender blocks, " + super.getRule();
public PerimeterCaptainTriggeredAbility copy() {return new PerimeterCaptainTriggeredAbility(this);
public class PermafrostTrap extends CardImpl {
public PermafrostTrap(UUID ownerId) {
public PermafrostTrap(final PermafrostTrap card) {
public PermafrostTrap copy() {return new PermafrostTrap(this);
class PermafrostTrapWatcher extends Watcher {
public PermafrostTrapWatcher() {
public PermafrostTrapWatcher(final PermafrostTrapWatcher watcher) {
public PermafrostTrapWatcher copy() {return new PermafrostTrapWatcher(this);
public void watch(GameEvent event, Game game) {
public class PilgrimsEye extends CardImpl {
public PilgrimsEye (UUID ownerId) {
public PilgrimsEye (final PilgrimsEye card) {
public PilgrimsEye copy() {return new PilgrimsEye(this);
public class PulseTracker extends CardImpl {
public PulseTracker(UUID ownerId) {
public PulseTracker(final PulseTracker card) {
public PulseTracker copy() {return new PulseTracker(this);
public boolean apply(Game game, Ability source) {return true;return new PulseTrackerLoseLifeEffect(this);
public class QuagVampires extends CardImpl {
public QuagVampires(UUID ownerId) {
public QuagVampires(final QuagVampires card) {
public QuagVampires copy() {return new QuagVampires(this);
public class QuestForRenewal extends CardImpl {
public QuestForRenewal(UUID ownerId) {
public QuestForRenewal(final QuestForRenewal card) {
public QuestForRenewal copy() {return new QuestForRenewal(this);
public class QuestForTheGoblinLord extends CardImpl {
public QuestForTheGoblinLord(UUID ownerId) {
public QuestForTheGoblinLord(final QuestForTheGoblinLord card) {
public QuestForTheGoblinLord copy() {return new QuestForTheGoblinLord(this);
public class QuestForTheNihilStone extends CardImpl {
public QuestForTheNihilStone(UUID ownerId) {
public QuestForTheNihilStone(final QuestForTheNihilStone card) {
public QuestForTheNihilStone copy() {return new QuestForTheNihilStone(this);
class QuestForTheNihilStoneTriggeredAbility extends TriggeredAbilityImpl {
public QuestForTheNihilStoneTriggeredAbility() {
public QuestForTheNihilStoneTriggeredAbility(final QuestForTheNihilStoneTriggeredAbility ability) {
public QuestForTheNihilStoneTriggeredAbility copy() {return new QuestForTheNihilStoneTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DISCARDED_CARD;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(controllerId).contains(event.getPlayerId());
public String getRule() {return "Whenever an opponent discards a card, you may put a quest counter on {this}.";
class QuestForTheNihilStoneTriggeredAbility2 extends TriggeredAbilityImpl {
public QuestForTheNihilStoneTriggeredAbility2() {
public QuestForTheNihilStoneTriggeredAbility2(final QuestForTheNihilStoneTriggeredAbility2 ability) {
public QuestForTheNihilStoneTriggeredAbility2 copy() {return new QuestForTheNihilStoneTriggeredAbility2(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "At the beginning of each opponent's upkeep, if that player has no cards in hand and {this} has two or more quest counters on it, you may have that player lose 5 life.";
public class QuestForUlasTemple extends CardImpl {
public QuestForUlasTemple(UUID ownerId) {
public QuestForUlasTemple(final QuestForUlasTemple card) {
public QuestForUlasTemple copy() {return new QuestForUlasTemple(this);
class QuestForUlasTempleEffect extends OneShotEffect {
public QuestForUlasTempleEffect() {
public QuestForUlasTempleEffect(final QuestForUlasTempleEffect effect) {
public QuestForUlasTempleEffect copy() {return new QuestForUlasTempleEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class QuestForUlasTempleTriggeredAbility extends TriggeredAbilityImpl {
public QuestForUlasTempleTriggeredAbility() {
public QuestForUlasTempleTriggeredAbility(final QuestForUlasTempleTriggeredAbility ability) {
public QuestForUlasTempleTriggeredAbility copy() {return new QuestForUlasTempleTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return quest != null && quest.getCounters().getCount(CounterType.QUEST) >= 3;
public String getRule() {return "At the beginning of each end step, if there are three or more quest counters on {this}, you may put a Kraken, Leviathan, Octopus, or Serpent creature card from your hand onto the battlefield.";
class QuestForUlasTempleEffect2 extends OneShotEffect {
QuestForUlasTempleEffect2() {
QuestForUlasTempleEffect2(final QuestForUlasTempleEffect2 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public QuestForUlasTempleEffect2 copy() {return new QuestForUlasTempleEffect2(this);
public class RagingRavine extends CardImpl {
public RagingRavine(UUID ownerId) {
public RagingRavine(final RagingRavine card) {
public RagingRavine copy() {return new RagingRavine(this);
class RagingRavineToken extends Token {
public RagingRavineToken() {
public class RestForTheWeary extends CardImpl {
public RestForTheWeary(UUID ownerId) {
public RestForTheWeary(final RestForTheWeary card) {
public RestForTheWeary copy() {return new RestForTheWeary(this);
public class RicochetTrap extends CardImpl {
public RicochetTrap(UUID ownerId) {
public RicochetTrap(final RicochetTrap card) {
public RicochetTrap copy() {return new RicochetTrap(this);
class RicochetTrapWatcher extends Watcher {
public RicochetTrapWatcher() {
public RicochetTrapWatcher(final RicochetTrapWatcher watcher) {
public RicochetTrapWatcher copy() {return new RicochetTrapWatcher(this);
public void watch(GameEvent event, Game game) {
public class RoilingTerrain extends CardImpl {
public RoilingTerrain(UUID ownerId) {
public RoilingTerrain(final RoilingTerrain card) {
public RoilingTerrain copy() {return new RoilingTerrain(this);
class RoilingTerrainEffect extends OneShotEffect {
public RoilingTerrainEffect() {
public RoilingTerrainEffect(final RoilingTerrainEffect effect) {
public RoilingTerrainEffect copy() {return new RoilingTerrainEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class RuinGhost extends CardImpl {
public RuinGhost(UUID ownerId) {
public RuinGhost(final RuinGhost card) {
public RuinGhost copy() {return new RuinGhost(this);
public class RumblingAftershocks extends CardImpl {
public RumblingAftershocks(UUID ownerId) {
public RumblingAftershocks(final RumblingAftershocks card) {
public RumblingAftershocks copy() {return new RumblingAftershocks(this);
class RumblingAftershocksTriggeredAbility extends TriggeredAbilityImpl {
RumblingAftershocksTriggeredAbility() {
RumblingAftershocksTriggeredAbility(final RumblingAftershocksTriggeredAbility ability) {
public RumblingAftershocksTriggeredAbility copy() {return new RumblingAftershocksTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever you cast a kicked spell, " + super.getRule();
class RumblingAftershocksDealDamageEffect extends OneShotEffect {
public RumblingAftershocksDealDamageEffect() {
public RumblingAftershocksDealDamageEffect(final RumblingAftershocksDealDamageEffect effect) {
public RumblingAftershocksDealDamageEffect copy() {return new RumblingAftershocksDealDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public class RuthlessCullblade extends CardImpl {
public RuthlessCullblade(UUID ownerId) {
public RuthlessCullblade(final RuthlessCullblade card) {
public RuthlessCullblade copy() {return new RuthlessCullblade(this);
public class ScribNibblers extends CardImpl {
public ScribNibblers(UUID ownerId) {
public ScribNibblers(final ScribNibblers card) {
public ScribNibblers copy() {return new ScribNibblers(this);
class ScribNibblersEffect extends OneShotEffect {
public ScribNibblersEffect() {
public ScribNibblersEffect(final ScribNibblersEffect effect) {
public ScribNibblersEffect copy() {return new ScribNibblersEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SearingBlaze extends CardImpl {
public SearingBlaze(UUID ownerId) {
public SearingBlaze(final SearingBlaze card) {
public SearingBlaze copy() {return new SearingBlaze(this);
class SearingBlazeEffect extends OneShotEffect {
public SearingBlazeEffect() {
public SearingBlazeEffect(final SearingBlazeEffect effect) {
public SearingBlazeEffect copy() {return new SearingBlazeEffect(this);
public boolean apply(Game game, Ability source) {return true;
class SearingBlazeTarget extends TargetPermanent {
public SearingBlazeTarget() {
public SearingBlazeTarget(final SearingBlazeTarget target) {
public boolean canTarget(UUID id, Ability source, Game game) {return super.canTarget(id, source, game);return false;
public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {return possibleTargets;
public SearingBlazeTarget copy() {return new SearingBlazeTarget(this);
public class SeersSundial extends CardImpl {
public SeersSundial(UUID ownerId) {
public class SejiriMerfolk extends CardImpl {
public SejiriMerfolk(UUID ownerId) {
public SejiriMerfolk(final SejiriMerfolk card) {
public SejiriMerfolk copy() {return new SejiriMerfolk(this);
public class SejiriSteppe extends CardImpl {
public SejiriSteppe(UUID ownerId) {
public SejiriSteppe(final SejiriSteppe card) {
public SejiriSteppe copy() {return new SejiriSteppe(this);
public class SelectiveMemory extends CardImpl {
public SelectiveMemory(UUID ownerId) {
public SelectiveMemory(final SelectiveMemory card) {
public SelectiveMemory copy() {return new SelectiveMemory(this);
class SelectiveMemoryEffect extends OneShotEffect {
public SelectiveMemoryEffect() {
public SelectiveMemoryEffect(final SelectiveMemoryEffect effect) {
public SelectiveMemoryEffect copy() {return new SelectiveMemoryEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ShorelineSalvager extends CardImpl {
public ShorelineSalvager(UUID ownerId) {
public ShorelineSalvager(final ShorelineSalvager card) {
public ShorelineSalvager copy() {return new ShorelineSalvager(this);
public class SkitterOfLizards extends CardImpl {
public SkitterOfLizards(UUID ownerId) {
public SkitterOfLizards(final SkitterOfLizards card) {
public SkitterOfLizards copy() {return new SkitterOfLizards(this);
public class SlaveringNulls extends CardImpl {
public SlaveringNulls(UUID ownerId) {
public SlaveringNulls(final SlaveringNulls card) {
public SlaveringNulls copy() {return new SlaveringNulls(this);
class SlaveringNullsTriggeredAbility extends TriggeredAbilityImpl {
public SlaveringNullsTriggeredAbility() {
public SlaveringNullsTriggeredAbility(final SlaveringNullsTriggeredAbility ability) {
public SlaveringNullsTriggeredAbility copy() {return new SlaveringNullsTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} deals combat damage to a player, if you control a Swamp, you may have that player discard a card.";
public class SlingbowTrap extends CardImpl {
public SlingbowTrap(UUID ownerId) {
public SlingbowTrap(final SlingbowTrap card) {
public SlingbowTrap copy() {return new SlingbowTrap(this);
class SlingbowTrapAlternativeCost extends AlternativeCostImpl<Cost> {
public SlingbowTrapAlternativeCost() {
public SlingbowTrapAlternativeCost(final SlingbowTrapAlternativeCost cost) {
public SlingbowTrapAlternativeCost copy() {return new SlingbowTrapAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return true;return false;
public String getText() {return "If a black creature with flying is attacking, you may pay {G} rather than pay Slingbow Trap's mana cost";
public class SmolderingSpires extends CardImpl {
public SmolderingSpires(UUID ownerId) {
public SmolderingSpires(final SmolderingSpires card) {
public SmolderingSpires copy() {return new SmolderingSpires(this);
public class Smother extends CardImpl {
public Smother(UUID ownerId) {
public Smother(final Smother card) {
public Smother copy() {return new Smother(this);
public class StirringWildwood extends CardImpl {
public StirringWildwood(UUID ownerId) {
public StirringWildwood(final StirringWildwood card) {
public StirringWildwood copy() {return new StirringWildwood(this);
class StirringWildwoodToken extends Token {
public StirringWildwoodToken() {return new StoneforgeMystic(this);return new StoneIdolTrap(this);return true;return game.getCard(abilityToModify.getSourceId()) != null;return false;return new StoneIdolTrapCostReductionEffect(this);return new StoneIdolTrapEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class StrengthOfTheTajuru extends CardImpl {
public StrengthOfTheTajuru(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public StrengthOfTheTajuru(final StrengthOfTheTajuru card) {
public StrengthOfTheTajuru copy() {return new StrengthOfTheTajuru(this);
class StrengthOfTheTajuruAddCountersTargetEffect extends OneShotEffect {
public StrengthOfTheTajuruAddCountersTargetEffect() {
public StrengthOfTheTajuruAddCountersTargetEffect(final StrengthOfTheTajuruAddCountersTargetEffect effect) {
public boolean apply(Game game, Ability source) {return affectedTargets > 0;
public StrengthOfTheTajuruAddCountersTargetEffect copy() {return new StrengthOfTheTajuruAddCountersTargetEffect(this);
public class SummitApes extends CardImpl {
public SummitApes(UUID ownerId) {
public SummitApes(final SummitApes card) {
public SummitApes copy() {return new SummitApes(this);
public class SurrakarBanisher extends CardImpl {
public SurrakarBanisher(UUID ownerId) {
public SurrakarBanisher(final SurrakarBanisher card) {
public SurrakarBanisher copy() {return new SurrakarBanisher(this);
public class TalusPaladin extends CardImpl {
public TalusPaladin(UUID ownerId) {
public TalusPaladin(final TalusPaladin card) {
public TalusPaladin copy() {return new TalusPaladin(this);
class TalusPaladinTriggeredAbility extends TriggeredAbilityImpl {
TalusPaladinTriggeredAbility() {
TalusPaladinTriggeredAbility(final TalusPaladinTriggeredAbility ability) {
public TalusPaladinTriggeredAbility copy() {return new TalusPaladinTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever {this} or another Ally enters the battlefield under your control, you may have Allies you control gain lifelink until end of turn, and you may put a +1/+1 counter on {this}.";
class TalusPaladinEffect extends OneShotEffect {
public TalusPaladinEffect() {
public TalusPaladinEffect(final TalusPaladinEffect effect) {
public boolean apply(Game game, Ability source) {return false;return false;
public TalusPaladinEffect copy() {return new TalusPaladinEffect(this);
public class TectonicEdge extends CardImpl {
public TectonicEdge(UUID ownerId) {
public TectonicEdge(final TectonicEdge card) {
public TectonicEdge copy() {return new TectonicEdge(this);
class TectonicEdgeCost extends CostImpl {
public TectonicEdgeCost() {
public TectonicEdgeCost(final TectonicEdgeCost cost) {
public TectonicEdgeCost copy() {return new TectonicEdgeCost(this);
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;return false;
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;return new Terastodon(this);return new TerastodonEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class TerraEternal extends CardImpl {
public TerraEternal(UUID ownerId) {
public TerraEternal(final TerraEternal card) {
public TerraEternal copy() {return new TerraEternal(this);
public class ThadaAdelAcquisitor extends CardImpl {
public ThadaAdelAcquisitor(UUID ownerId) {
public ThadaAdelAcquisitor(final ThadaAdelAcquisitor card) {
public ThadaAdelAcquisitor copy() {return new ThadaAdelAcquisitor(this);
class ThadaAdelAcquisitorEffect extends OneShotEffect {
ThadaAdelAcquisitorEffect() {
ThadaAdelAcquisitorEffect(final ThadaAdelAcquisitorEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public ThadaAdelAcquisitorEffect copy() {return new ThadaAdelAcquisitorEffect(this);
class ThadaAdelPlayFromExileEffect extends AsThoughEffectImpl {
public ThadaAdelPlayFromExileEffect() {
public ThadaAdelPlayFromExileEffect(final ThadaAdelPlayFromExileEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public ThadaAdelPlayFromExileEffect copy() {return new ThadaAdelPlayFromExileEffect(this);
public boolean applies(UUID sourceId, Ability source, UUID affectedControllerId, Game game) {return source.getControllerId().equals(affectedControllerId)return new TideforceElemental(this);
public class TombHex extends CardImpl {
public TombHex(UUID ownerId) {
public TombHex(final TombHex card) {
public TombHex copy() {return new TombHex(this);
public class TreasureHunt extends CardImpl {
public TreasureHunt(UUID ownerId) {
public TreasureHunt(final TreasureHunt card) {
public TreasureHunt copy() {return new TreasureHunt(this);
class TreasureHuntEffect extends OneShotEffect {
public TreasureHuntEffect() {
public TreasureHuntEffect(final TreasureHuntEffect effect) {
public TreasureHuntEffect copy() {return new TreasureHuntEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TuktukScrapper extends CardImpl {
public TuktukScrapper(UUID ownerId) {
public TuktukScrapper(final TuktukScrapper card) {
public TuktukScrapper copy() {return new TuktukScrapper(this);
class TuktukScrapperTriggeredAbility extends TriggeredAbilityImpl {
public TuktukScrapperTriggeredAbility() {
public TuktukScrapperTriggeredAbility(final TuktukScrapperTriggeredAbility ability) {
public TuktukScrapperTriggeredAbility copy() {return new TuktukScrapperTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return true;return false;
public String getRule() {return "Whenever {this} or another Ally enters the battlefield under your control, you may destroy target artifact. If that artifact is put into a graveyard this way, {this} deals damage to that artifact's controller equal to the number of Allies you control.";
class TuktukScrapperEffect extends OneShotEffect {
public TuktukScrapperEffect() {
public TuktukScrapperEffect(final TuktukScrapperEffect effect) {
public TuktukScrapperEffect copy() {return new TuktukScrapperEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class Twitch extends CardImpl {
public Twitch(UUID ownerId) {
public Twitch(final Twitch card) {
public Twitch copy() {return new Twitch(this);
public class UrgeToFeed extends CardImpl {
public UrgeToFeed(UUID ownerId) {
public UrgeToFeed(final UrgeToFeed card) {
public UrgeToFeed copy() {return new UrgeToFeed(this);
class UrgeToFeedEffect extends OneShotEffect {
public UrgeToFeedEffect() {
public UrgeToFeedEffect(UrgeToFeedEffect effect) {
public boolean apply(Game game, Ability source) {return true;
public UrgeToFeedEffect copy() {return new UrgeToFeedEffect(this);
public class VaporSnare extends CardImpl {
public VaporSnare(UUID ownerId) {
public VaporSnare(final VaporSnare card) {
public VaporSnare copy() {return new VaporSnare(this);
class VaporSnareEffect extends OneShotEffect {private static final String effectText = "sacrifice {this} unless you return a land you control to its owner's hand";
VaporSnareEffect( ) {
VaporSnareEffect(VaporSnareEffect effect ) {
public boolean apply(Game game, Ability source) {return false;
public VaporSnareEffect copy() {return new VaporSnareEffect(this);
public class VeteransReflexes extends CardImpl {
public VeteransReflexes (UUID ownerId) {
public VeteransReflexes (final VeteransReflexes card) {
public VeteransReflexes copy() {return new VeteransReflexes(this);
public class VoyagerDrake extends CardImpl {
public VoyagerDrake(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public VoyagerDrake(final VoyagerDrake card) {
public VoyagerDrake copy() {return new VoyagerDrake(this);
public class WalkingAtlas extends CardImpl {
public WalkingAtlas (UUID ownerId) {
public WalkingAtlas (final WalkingAtlas card) {
public WalkingAtlas copy() {return new WalkingAtlas(this);
public class WindZendikon extends CardImpl {
public WindZendikon(UUID ownerId) {
public WindZendikon(final WindZendikon card) {
public WindZendikon copy() {return new WindZendikon(this);
class ElementalToken extends Token {
ElementalToken() {
public class WolfbriarElemental extends CardImpl {
public WolfbriarElemental(UUID ownerId) {
public WolfbriarElemental(final WolfbriarElemental card) {
public WolfbriarElemental copy() {return new WolfbriarElemental(this);
public class WrexialTheRisenDeep extends CardImpl {
public WrexialTheRisenDeep(UUID ownerId) {
public WrexialTheRisenDeep(final WrexialTheRisenDeep card) {
public WrexialTheRisenDeep copy() {return new WrexialTheRisenDeep(this);
class WrexialEffect extends OneShotEffect {
public WrexialEffect() {
public WrexialEffect(final WrexialEffect effect) {
public WrexialEffect copy() {return new WrexialEffect(this);
public boolean apply(Game game, Ability source) {return false;
class WrexialReplacementEffect extends ReplacementEffectImpl {
public WrexialReplacementEffect(UUID cardid) {
public WrexialReplacementEffect(final WrexialReplacementEffect effect) {
public WrexialReplacementEffect copy() {return new WrexialReplacementEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return zEvent.getToZone() == Zone.GRAVEYARD
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return controller.moveCards((Card) card, null, Zone.EXILED, source, game);return false;
public class AdventuringGear extends CardImpl {
public AdventuringGear(UUID ownerId) {
public AdventuringGear(final AdventuringGear card) {
public AdventuringGear copy() {return new AdventuringGear(this);
class AdventuringGearAbility extends LandfallAbility {
public AdventuringGearAbility() {
public AdventuringGearAbility(final AdventuringGearAbility ability) {
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public AdventuringGearAbility copy() {return new AdventuringGearAbility(this);
public class AetherFigment extends CardImpl {
public AetherFigment(UUID ownerId) {
public AetherFigment(final AetherFigment card) {
public AetherFigment copy() {return new AetherFigment(this);
public class AkoumRefuge extends CardImpl {
public AkoumRefuge(UUID ownerId) {
public AkoumRefuge(final AkoumRefuge card) {
public AkoumRefuge copy() {return new AkoumRefuge(this);
public class ArchiveTrap extends CardImpl {
public ArchiveTrap(UUID ownerId) {
public ArchiveTrap(final ArchiveTrap card) {
public ArchiveTrap copy() {return new ArchiveTrap(this);
class ArchiveTrapWatcher extends Watcher {
public ArchiveTrapWatcher() {
public ArchiveTrapWatcher(final ArchiveTrapWatcher watcher) {
public ArchiveTrapWatcher copy() {return new ArchiveTrapWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
public Set<UUID> getPlayersSearchedLibrary() {return playerIds;
class OpponentSearchesLibCondition implements Condition {return fInstance;
public boolean apply(Game game, Ability source) {return true;return false;
public String toString() {return "If an opponent searched his or her library this turn";
public class ArchmageAscension extends CardImpl {
public ArchmageAscension(UUID ownerId) {
public ArchmageAscension(final ArchmageAscension card) {
public ArchmageAscension copy() {return new ArchmageAscension(this);
class ArchmageAscensionTriggeredAbility extends TriggeredAbilityImpl {
public ArchmageAscensionTriggeredAbility() {
public ArchmageAscensionTriggeredAbility(final ArchmageAscensionTriggeredAbility ability) {
public ArchmageAscensionTriggeredAbility copy() {return new ArchmageAscensionTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return archmage != null && watcher != null && watcher.conditionMet();
public String getRule() {return "At the beginning of each end step, if you drew two or more cards this turn, you may put a quest counter on {this}";
class CardsDrawnControllerWatcher extends Watcher {
public CardsDrawnControllerWatcher() {
public CardsDrawnControllerWatcher(final CardsDrawnControllerWatcher watcher) {
public void watch(GameEvent event, Game game) {
public void reset() {
public CardsDrawnControllerWatcher copy() {return new CardsDrawnControllerWatcher(this);
class ArchmageAscensionReplacementEffect extends ReplacementEffectImpl {
public ArchmageAscensionReplacementEffect() {
public ArchmageAscensionReplacementEffect(final ArchmageAscensionReplacementEffect effect) {
public ArchmageAscensionReplacementEffect copy() {return new ArchmageAscensionReplacementEffect(this);
public boolean apply(Game game, Ability source) {return true;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.DRAW_CARD;
public boolean applies(GameEvent event, Ability source, Game game) {return event.getPlayerId().equals(source.getControllerId())
public class AridMesa extends CardImpl {
public AridMesa(UUID ownerId) {
public AridMesa(final AridMesa card) {
public AridMesa copy() {return new AridMesa(this);
public class ArmamentMaster extends CardImpl {
public ArmamentMaster(UUID ownerId) {
public ArmamentMaster(final ArmamentMaster card) {
public ArmamentMaster copy() {return new ArmamentMaster(this);
class ArmamentMasterEffect extends ContinuousEffectImpl {
public ArmamentMasterEffect() {
public ArmamentMasterEffect(final ArmamentMasterEffect effect) {
public ArmamentMasterEffect copy() {return new ArmamentMasterEffect(this);
public boolean apply(Game game, Ability source) {return true;
private int countEquipment(Game game, Ability source) {return count;
public class ArrowVolleyTrap extends CardImpl {
public ArrowVolleyTrap(UUID ownerId) {
public ArrowVolleyTrap(final ArrowVolleyTrap card) {
public ArrowVolleyTrap copy() {return new ArrowVolleyTrap(this);
class ArrowVolleyTrapAlternativeCost extends AlternativeCostImpl {
public ArrowVolleyTrapAlternativeCost() {
public ArrowVolleyTrapAlternativeCost(final ArrowVolleyTrapAlternativeCost cost) {
public ArrowVolleyTrapAlternativeCost copy() {return new ArrowVolleyTrapAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return game.getCombat().getAttackers().size() > 3;
public String getText() {return "If four or more creatures are attacking, you may pay {1}{W} rather than pay {this}'s mana cost";
public class BalaGedThief extends CardImpl {
public BalaGedThief(UUID ownerId) {
public BalaGedThief(final BalaGedThief card) {
public BalaGedThief copy() {return new BalaGedThief(this);
class BalaGedThiefEffect extends OneShotEffect {
public BalaGedThiefEffect() {
public BalaGedThiefEffect(final BalaGedThiefEffect effect) {
public BalaGedThiefEffect copy() {return new BalaGedThiefEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class BalothCageTrap extends CardImpl {
public BalothCageTrap(UUID ownerId) {
public BalothCageTrap(final BalothCageTrap card) {
public BalothCageTrap copy() {return new BalothCageTrap(this);
class BalothCageTrapWatcher extends Watcher {
public BalothCageTrapWatcher() {
public BalothCageTrapWatcher(final BalothCageTrapWatcher watcher) {
public BalothCageTrapWatcher copy() {return new BalothCageTrapWatcher(this);
public void watch(GameEvent event, Game game) {
public class BalothWoodcrasher extends CardImpl {
public BalothWoodcrasher(UUID ownerId) {
public BalothWoodcrasher(final BalothWoodcrasher card) {
public BalothWoodcrasher copy() {return new BalothWoodcrasher(this);
public class BeastHunt extends CardImpl {
public BeastHunt(UUID ownerId) {
public BeastHunt(final BeastHunt card) {
public BeastHunt copy() {return new BeastHunt(this);
class BeastHuntEffect extends OneShotEffect {
public BeastHuntEffect() {
public BeastHuntEffect(final BeastHuntEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;
public BeastHuntEffect copy() {return new BeastHuntEffect(this);
public class BladetuskBoar extends CardImpl {
public BladetuskBoar (UUID ownerId) {
public BladetuskBoar (final BladetuskBoar card) {
public BladetuskBoar copy() {return new BladetuskBoar(this);
public class BlazingTorch extends CardImpl {
public BlazingTorch(UUID ownerId) {
public BlazingTorch(final BlazingTorch card) {
public BlazingTorch copy() {return new BlazingTorch(this);
class BlazingTorchEvasionEffect extends RestrictionEffect {
public BlazingTorchEvasionEffect() {
public BlazingTorchEvasionEffect(final BlazingTorchEvasionEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public boolean canBeBlocked(Permanent attacker, Permanent blocker, Ability source, Game game) {return !blocker.hasSubtype("Vampire") && !blocker.hasSubtype("Zombie");
public BlazingTorchEvasionEffect copy() {return new BlazingTorchEvasionEffect(this);
class BlazingTorchCost extends CostImpl {
public BlazingTorchCost() {
public BlazingTorchCost(BlazingTorchCost cost) {
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;return paid;
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return true;
public BlazingTorchCost copy() {return new BlazingTorchCost(this);
class BlazingTorchDamageEffect extends OneShotEffect {
public BlazingTorchDamageEffect() {
public BlazingTorchDamageEffect(final BlazingTorchDamageEffect effect) {
public BlazingTorchDamageEffect copy() {return new BlazingTorchDamageEffect(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
public void setSourceId(UUID sourceId) {
public class BloodchiefAscension extends CardImpl {
public BloodchiefAscension(UUID ownerId) {
public BloodchiefAscension(final BloodchiefAscension card) {
public BloodchiefAscension copy() {return new BloodchiefAscension(this);
public class Bloodghast extends CardImpl {
public Bloodghast(UUID ownerId) {
public Bloodghast(final Bloodghast card) {
public Bloodghast copy() {return new Bloodghast(this);
public class BloodSeeker extends CardImpl {
public BloodSeeker(UUID ownerId) {
public BloodSeeker(final BloodSeeker card) {
public BloodSeeker copy() {return new BloodSeeker(this);
class BloodSeekerTriggeredAbility extends TriggeredAbilityImpl {
BloodSeekerTriggeredAbility() {
BloodSeekerTriggeredAbility(final BloodSeekerTriggeredAbility ability) {
public BloodSeekerTriggeredAbility copy() {return new BloodSeekerTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature enters the battlefield under an opponent's control, you may have that player lose 1 life.";
public class BloodTribute extends CardImpl {
public BloodTribute(UUID ownerId) {
public BloodTribute(final BloodTribute card) {
public BloodTribute copy() {return new BloodTribute(this);return new BloodTributeLoseLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;return new BloodTributeGainLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class BogTatters extends CardImpl {
public BogTatters (UUID ownerId) {
public BogTatters (final BogTatters card) {
public BogTatters copy() {return new BogTatters(this);
public class BoldDefense extends CardImpl {
public BoldDefense(UUID ownerId) {
public BoldDefense(final BoldDefense card) {
public BoldDefense copy() {return new BoldDefense(this);
class BoldDefenseEffect extends OneShotEffect {
public BoldDefenseEffect() {
public BoldDefenseEffect(final BoldDefenseEffect effect) {
public BoldDefenseEffect copy() {return new BoldDefenseEffect(this);
public boolean apply(Game game, Ability source) {return false;
public class BraveTheElements extends CardImpl {
public BraveTheElements(UUID ownerId) {
public BraveTheElements(final BraveTheElements card) {
public BraveTheElements copy() {return new BraveTheElements(this);
public class BurstLightning extends CardImpl {
public BurstLightning(UUID ownerId) {
public BurstLightning(final BurstLightning card) {
public BurstLightning copy() {return new BurstLightning(this);
public class CallerOfGales extends CardImpl {
public CallerOfGales (UUID ownerId) {
public CallerOfGales (final CallerOfGales card) {
public CallerOfGales copy() {return new CallerOfGales(this);
public class CaravanHurda extends CardImpl {
public CaravanHurda (UUID ownerId) {
public CaravanHurda (final CaravanHurda card) {
public CaravanHurda copy() {return new CaravanHurda(this);
public class CarnageAltar extends CardImpl {
public CarnageAltar(UUID ownerId) {
public CarnageAltar(final CarnageAltar card) {
public CarnageAltar copy() {return new CarnageAltar(this);
public class CelestialMantle extends CardImpl {
public CelestialMantle(UUID ownerId) {
public CelestialMantle(final CelestialMantle card) {
public CelestialMantle copy() {return new CelestialMantle(this);
class CelestialMantleAbility extends TriggeredAbilityImpl {
public CelestialMantleAbility() {
public CelestialMantleAbility(final CelestialMantleAbility ability) {
public CelestialMantleAbility copy() {return new CelestialMantleAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return damageEvent.isCombatDamage() && p != null && p.getAttachments().contains(this.getSourceId());
public String getRule() {return "Whenever enchanted creature deals combat damage to a player, double its controller's life total.";
class CelestialMantleEffect extends OneShotEffect {
CelestialMantleEffect() {
CelestialMantleEffect(final CelestialMantleEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public CelestialMantleEffect copy() {return new CelestialMantleEffect(this);
public class ChandraAblaze extends CardImpl {
public ChandraAblaze(UUID ownerId) {
public ChandraAblaze(final ChandraAblaze card) {
public ChandraAblaze copy() {return new ChandraAblaze(this);
class ChandraAblazeEffect1 extends OneShotEffect {
public ChandraAblazeEffect1() {
public ChandraAblazeEffect1(final ChandraAblazeEffect1 effect) {
public ChandraAblazeEffect1 copy() {return new ChandraAblazeEffect1(this);
public boolean apply(Game game, Ability source) {return true;return false;
class ChandraAblazeEffect2 extends OneShotEffect {
public ChandraAblazeEffect2() {
public ChandraAblazeEffect2(final ChandraAblazeEffect2 effect) {
public ChandraAblazeEffect2 copy() {return new ChandraAblazeEffect2(this);
public boolean apply(Game game, Ability source) {return true;return true;return false;
class ChandraAblazeEffect5 extends OneShotEffect {
public ChandraAblazeEffect5() {
public ChandraAblazeEffect5(final ChandraAblazeEffect5 effect) {
public ChandraAblazeEffect5 copy() {return new ChandraAblazeEffect5(this);
public boolean apply(Game game, Ability source) {return true;return false;return new CliffThreader(this);
public class CobraTrap extends CardImpl {
public CobraTrap(UUID ownerId) {
public CobraTrap(final CobraTrap card) {
public CobraTrap copy() {return new CobraTrap(this);
class CobraTrapWatcher extends Watcher {
public CobraTrapWatcher() {
public CobraTrapWatcher(final CobraTrapWatcher watcher) {
public CobraTrapWatcher copy() {return new CobraTrapWatcher(this);
public void watch(GameEvent event, Game game) {
public class ConquerorsPledge extends CardImpl {
public ConquerorsPledge(UUID ownerId) {
public ConquerorsPledge(final ConquerorsPledge card) {
public ConquerorsPledge copy() {return new ConquerorsPledge(this);
public class CryptRipper extends CardImpl {
public CryptRipper(UUID ownerId) {
public CryptRipper(final CryptRipper card) {
public CryptRipper copy() {return new CryptRipper(this);
public class DayOfJudgment extends CardImpl {
public DayOfJudgment(UUID ownerId) {
public DayOfJudgment(final DayOfJudgment card) {
public DayOfJudgment copy() {return new DayOfJudgment(this);
public class DesecratedEarth extends CardImpl {
public DesecratedEarth(UUID ownerId) {
public DesecratedEarth(final DesecratedEarth card) {
public DesecratedEarth copy() {return new DesecratedEarth(this);
class DesecratedEarthEffect extends OneShotEffect {
public DesecratedEarthEffect() {
public DesecratedEarthEffect(final DesecratedEarthEffect effect) {
public DesecratedEarthEffect copy() {return new DesecratedEarthEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class DevoutLightcaster extends CardImpl {
public DevoutLightcaster(UUID ownerId) {
public DevoutLightcaster(final DevoutLightcaster card) {
public DevoutLightcaster copy() {return new DevoutLightcaster(this);
public class Disfigure extends CardImpl {
public Disfigure(UUID ownerId) {
public Disfigure(final Disfigure card) {
public Disfigure copy() {return new Disfigure(this);
public class EldraziMonument extends CardImpl {
public EldraziMonument(UUID ownerId) {
public EldraziMonument(final EldraziMonument card) {
public EldraziMonument copy() {return new EldraziMonument(this);
class EldraziMonumentEffect extends OneShotEffect {
public EldraziMonumentEffect() {
public EldraziMonumentEffect(final EldraziMonumentEffect ability) {
public EldraziMonumentEffect copy() {return new EldraziMonumentEffect(this);
public boolean apply(Game game, Ability source) {return permanent.sacrifice(source.getSourceId(), game);return permanent.sacrifice(source.getSourceId(), game);return false;
public class Electropotence extends CardImpl {
public Electropotence(UUID ownerId) {
public Electropotence(final Electropotence card) {
public Electropotence copy() {return new Electropotence(this);
class ElectropotenceTriggeredAbility extends TriggeredAbilityImpl {
public ElectropotenceTriggeredAbility() {
public ElectropotenceTriggeredAbility(ElectropotenceTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature enters the battlefield under your control, you may pay {2}{R}. If you do, that creature deals damage equal to its power to target creature or player.";
public ElectropotenceTriggeredAbility copy() {return new ElectropotenceTriggeredAbility(this);
class ElectropotenceEffect extends OneShotEffect {
public ElectropotenceEffect() {
public ElectropotenceEffect(final ElectropotenceEffect effect) {
public ElectropotenceEffect copy() {return new ElectropotenceEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ElementalAppeal extends CardImpl {
public ElementalAppeal(UUID ownerId) {
public ElementalAppeal(final ElementalAppeal card) {
public ElementalAppeal copy() {return new ElementalAppeal(this);
class ElementalAppealEffect extends OneShotEffect {
public ElementalAppealEffect() {
public ElementalAppealEffect(final ElementalAppealEffect effect) {
public ElementalAppealEffect copy() {return new ElementalAppealEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class EmeriaAngel extends CardImpl {
public EmeriaAngel(UUID ownerId) {
public EmeriaAngel(final EmeriaAngel card) {
public EmeriaAngel copy() {return new EmeriaAngel(this);
public class EmeriaTheSkyRuin extends CardImpl {
public EmeriaTheSkyRuin(UUID ownerId) {
public EmeriaTheSkyRuin(final EmeriaTheSkyRuin card) {
public EmeriaTheSkyRuin copy() {return new EmeriaTheSkyRuin(this);
class EmeriaTheSkyRuinTriggeredAbility extends TriggeredAbilityImpl {
public EmeriaTheSkyRuinTriggeredAbility() {
public EmeriaTheSkyRuinTriggeredAbility(final EmeriaTheSkyRuinTriggeredAbility ability) {
public EmeriaTheSkyRuinTriggeredAbility copy() {return new EmeriaTheSkyRuinTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public boolean checkInterveningIfClause(Game game) {return game.getBattlefield().countAll(filter, this.controllerId, game) >= 7;
public String getRule() {return "At the beginning of your upkeep, if you control seven or more Plains, you may return target creature card from your graveyard to the battlefield.";
public class EternityVessel extends CardImpl {
public EternityVessel(UUID ownerId) {
public EternityVessel(final EternityVessel card) {
public EternityVessel copy() {return new EternityVessel(this);
class EternityVesselEffect extends OneShotEffect {
public EternityVesselEffect() {
public EternityVesselEffect(final EternityVesselEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public EternityVesselEffect copy() {return new EternityVesselEffect(this);
class EternityVesselEffect2 extends OneShotEffect {
public EternityVesselEffect2() {
public EternityVesselEffect2(final EternityVesselEffect2 effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public EternityVesselEffect2 copy() {return new EternityVesselEffect2(this);
public class ExpeditionMap extends CardImpl {
public ExpeditionMap(UUID ownerId) {
public ExpeditionMap(final ExpeditionMap card) {
public ExpeditionMap copy() {return new ExpeditionMap(this);
public class ExplorersScope extends CardImpl {
public ExplorersScope(UUID ownerId) {
public ExplorersScope(final ExplorersScope card) {
public ExplorersScope copy() {return new ExplorersScope(this);
class ExplorersScopeEffect extends OneShotEffect {
public ExplorersScopeEffect() {
public ExplorersScopeEffect(final ExplorersScopeEffect effect) {
public ExplorersScopeEffect copy() {return new ExplorersScopeEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class FeastOfBlood extends CardImpl {
public FeastOfBlood(UUID ownerId) {
public FeastOfBlood(final FeastOfBlood card) {
public FeastOfBlood copy() {return new FeastOfBlood(this);
class FeastOfBloodCost extends CostImpl {
public FeastOfBloodCost() {
public FeastOfBloodCost(final FeastOfBloodCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return game.getBattlefield().contains(filter, controllerId, 2, game);
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public FeastOfBloodCost copy() {return new FeastOfBloodCost(this);
public class FelidarSovereign extends CardImpl {
public FelidarSovereign(UUID ownerId) {
public FelidarSovereign(final FelidarSovereign card) {
public FelidarSovereign copy() {return new FelidarSovereign(this);
public boolean apply(Game game, Ability source) {return game.getPlayer(source.getControllerId()).getLife() >= 40;
public class FrontierGuide extends CardImpl {
public FrontierGuide(UUID ownerId) {
public FrontierGuide(final FrontierGuide card) {
public FrontierGuide copy() {return new FrontierGuide(this);
public class GatekeeperOfMalakir extends CardImpl {
public GatekeeperOfMalakir(UUID ownerId) {
public GatekeeperOfMalakir(final GatekeeperOfMalakir card) {
public GatekeeperOfMalakir copy() {return new GatekeeperOfMalakir(this);
public class GeyserGlider extends CardImpl {
public GeyserGlider(UUID ownerId) {
public GeyserGlider(final GeyserGlider card) {
public GeyserGlider copy() {return new GeyserGlider(this);
public class GoblinBushwhacker extends CardImpl {
public GoblinBushwhacker(UUID ownerId) {
public GoblinBushwhacker(final GoblinBushwhacker card) {
public GoblinBushwhacker copy() {return new GoblinBushwhacker(this);
public class GoblinGuide extends CardImpl {
public GoblinGuide(UUID ownerId) {
public GoblinGuide(final GoblinGuide card) {
public GoblinGuide copy() {return new GoblinGuide(this);
class GoblinGuideTriggeredAbility extends TriggeredAbilityImpl {
public GoblinGuideTriggeredAbility(Effect effect, boolean optional) {
public GoblinGuideTriggeredAbility(Effect effect, boolean optional, String text) {
public GoblinGuideTriggeredAbility(final GoblinGuideTriggeredAbility ability) {
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ATTACKER_DECLARED;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "When {this} attacks, " + super.getRule();return text;
public GoblinGuideTriggeredAbility copy() {return new GoblinGuideTriggeredAbility(this);
class GoblinGuideEffect extends OneShotEffect {
public GoblinGuideEffect() {
public GoblinGuideEffect(final GoblinGuideEffect effect) {
public GoblinGuideEffect copy() {return new GoblinGuideEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class GoblinRuinblaster extends CardImpl {
public GoblinRuinblaster(UUID ownerId) {
public GoblinRuinblaster(final GoblinRuinblaster card) {
public GoblinRuinblaster copy() {return new GoblinRuinblaster(this);
public class GoblinShortcutter extends CardImpl {
public GoblinShortcutter(UUID ownerId) {
public GoblinShortcutter(final GoblinShortcutter card) {
public GoblinShortcutter copy() {return new GoblinShortcutter(this);
public class GoblinWarPaint extends CardImpl {
public GoblinWarPaint(UUID ownerId) {
public GoblinWarPaint(final GoblinWarPaint card) {
public GoblinWarPaint copy() {return new GoblinWarPaint(this);
class GoblinWarPaintEffect extends ContinuousEffectImpl {
public GoblinWarPaintEffect() {
public GoblinWarPaintEffect(final GoblinWarPaintEffect effect) {
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6 || layer == layer.PTChangingEffects_7;
public GoblinWarPaintEffect copy() {return new GoblinWarPaintEffect(this);
public class Gomazoa extends CardImpl {
public Gomazoa(UUID ownerId) {
public Gomazoa(final Gomazoa card) {
public Gomazoa copy() {return new Gomazoa(this);
class GomazoaEffect extends OneShotEffect {
public GomazoaEffect() {
public GomazoaEffect(final GomazoaEffect effect) {
public GomazoaEffect copy() {return new GomazoaEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
class BlockedByWatcher extends Watcher {
public BlockedByWatcher() {
public BlockedByWatcher(final BlockedByWatcher watcher) {
public BlockedByWatcher copy() {return new BlockedByWatcher(this);
public void watch(GameEvent event, Game game) {
public void reset() {
public class GrapplingHook extends CardImpl {
public GrapplingHook(UUID ownerId) {
public GrapplingHook(final GrapplingHook card) {
public GrapplingHook copy() {return new GrapplingHook(this);
class GrapplingHookEffect extends RequirementEffect {
public GrapplingHookEffect() {
public GrapplingHookEffect(Duration duration) {
public GrapplingHookEffect(final GrapplingHookEffect effect) {
public boolean applies(Permanent permanent, Ability source, Game game) {return permanent.canBlock(equipment.getAttachedTo(), game);return false;
public boolean mustAttack(Game game) {return false;
public boolean mustBlock(Game game) {return true;
public UUID mustBlockAttacker(Ability source, Game game) {return attachment != null ? attachment.getAttachedTo() : null;
public GrapplingHookEffect copy() {return new GrapplingHookEffect(this);
public class GraypeltRefuge extends CardImpl {
public GraypeltRefuge(UUID ownerId) {
public GraypeltRefuge(final GraypeltRefuge card) {
public GraypeltRefuge copy() {return new GraypeltRefuge(this);
public class GrazingGladehart extends CardImpl {
public GrazingGladehart(UUID ownerId) {
public GrazingGladehart(final GrazingGladehart card) {
public GrazingGladehart copy() {return new GrazingGladehart(this);
public class GreenweaverDruid extends CardImpl {
public GreenweaverDruid(UUID ownerId) {
public GreenweaverDruid(final GreenweaverDruid card) {
public GreenweaverDruid copy() {return new GreenweaverDruid(this);
public class GrimDiscovery extends CardImpl {
public GrimDiscovery(UUID ownerId) {
public GrimDiscovery(final GrimDiscovery card) {
public GrimDiscovery copy() {return new GrimDiscovery(this);
public class GuulDrazSpecter extends CardImpl {
public GuulDrazSpecter(UUID ownerId) {
public GuulDrazSpecter(final GuulDrazSpecter card) {
public GuulDrazSpecter copy() {return new GuulDrazSpecter(this);
class GuulDrazSpecterCondition implements Condition {
public boolean apply(Game game, Ability source) {return result;
public class GuulDrazVampire extends CardImpl {
public GuulDrazVampire(UUID ownerId) {
public GuulDrazVampire(final GuulDrazVampire card) {
public GuulDrazVampire copy() {return new GuulDrazVampire(this);
public class HagraCrocodile extends CardImpl {
public HagraCrocodile(UUID ownerId) {
public HagraCrocodile(final HagraCrocodile card) {
public HagraCrocodile copy() {return new HagraCrocodile(this);
public class HagraDiabolist extends CardImpl {
public HagraDiabolist(UUID ownerId) {
public HagraDiabolist(final HagraDiabolist card) {
public HagraDiabolist copy() {return new HagraDiabolist(this);
public class HaloHunter extends CardImpl {
public HaloHunter(UUID ownerId) {
public HaloHunter(final HaloHunter card) {
public HaloHunter copy() {return new HaloHunter(this);
public class Harrow extends CardImpl {
public Harrow(UUID ownerId){
public Harrow(final Harrow card) {
public Harrow copy() {return new Harrow(this);
public class HeartstabberMosquito extends CardImpl {
public HeartstabberMosquito(UUID ownerId) {
public HeartstabberMosquito(final HeartstabberMosquito card) {
public HeartstabberMosquito copy() {return new HeartstabberMosquito(this);
public class HellfireMongrel extends CardImpl {
public HellfireMongrel(UUID ownerId) {
public HellfireMongrel(final HellfireMongrel card) {
public HellfireMongrel copy() {return new HellfireMongrel(this);
class CardsInActivePlayersHandCondition implements Condition {
public boolean apply(Game game, Ability source) {return player != null && player.getHand().size() <= 2;
public class HellkiteCharger extends CardImpl {
public HellkiteCharger(UUID ownerId) {
public HellkiteCharger(final HellkiteCharger card) {
public HellkiteCharger copy() {return new HellkiteCharger(this);
class HellkiteChargerEffect extends OneShotEffect {
HellkiteChargerEffect() {
HellkiteChargerEffect(final HellkiteChargerEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public HellkiteChargerEffect copy() {return new HellkiteChargerEffect(this);
public class HideousEnd extends CardImpl {
public HideousEnd(UUID ownerId) {
public HideousEnd(final HideousEnd card) {
public HideousEnd copy() {return new HideousEnd(this);
public class HighlandBerserker extends CardImpl {
public HighlandBerserker(UUID ownerId) {
public HighlandBerserker(final HighlandBerserker card) {
public HighlandBerserker copy() {return new HighlandBerserker(this);
public class InfernoTrap extends CardImpl {
public InfernoTrap(UUID ownerId) {
public InfernoTrap(final InfernoTrap card) {
public InfernoTrap copy() {return new InfernoTrap(this);
class ControllerDamagedByCreatureWatcher extends Watcher {
public ControllerDamagedByCreatureWatcher() {
public ControllerDamagedByCreatureWatcher(final ControllerDamagedByCreatureWatcher watcher) {
public void watch(GameEvent event, Game game) {
public void reset() {
public ControllerDamagedByCreatureWatcher copy() {return new ControllerDamagedByCreatureWatcher(this);
class InfernoTrapAlternativeCost extends AlternativeCostImpl {
public InfernoTrapAlternativeCost() {
public InfernoTrapAlternativeCost(final InfernoTrapAlternativeCost cost) {
public InfernoTrapAlternativeCost copy() {return new InfernoTrapAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return true;return false;
public String getText() {return "If you've been dealt damage by two or more creatures this turn, you may pay {R} rather than pay Inferno Trap's mana cost";
public class IntoTheRoil extends CardImpl {
public IntoTheRoil(UUID ownerId) {
public IntoTheRoil(final IntoTheRoil card) {
public IntoTheRoil copy() {return new IntoTheRoil(this);
public class IonaShieldOfEmeria extends CardImpl {
public IonaShieldOfEmeria(UUID ownerId) {
public IonaShieldOfEmeria(final IonaShieldOfEmeria card) {
public IonaShieldOfEmeria copy() {return new IonaShieldOfEmeria(this);
IonaShieldOfEmeriaReplacementEffect() {
IonaShieldOfEmeriaReplacementEffect(final IonaShieldOfEmeriaReplacementEffect effect) {
public String getInfoMessage(Ability source, GameEvent event, Game game) {return "You can't cast " + chosenColor.toString() + " spells (" + mageObject.getIdName() + ").";return null;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.CAST_SPELL;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public IonaShieldOfEmeriaReplacementEffect copy() {return new IonaShieldOfEmeriaReplacementEffect(this);
public class IorRuinExpedition extends CardImpl {
public IorRuinExpedition(UUID ownerId) {
public IorRuinExpedition(final IorRuinExpedition card) {
public IorRuinExpedition copy() {return new IorRuinExpedition(this);
public class JoragaBard extends CardImpl {
public JoragaBard(UUID ownerId) {
public JoragaBard(final JoragaBard card) {
public JoragaBard copy() {return new JoragaBard(this);
public class JourneyToNowhere extends CardImpl {
public JourneyToNowhere(UUID ownerId) {
public JourneyToNowhere(final JourneyToNowhere card) {
public JourneyToNowhere copy() {return new JourneyToNowhere(this);
public class JwarIsleRefuge extends CardImpl {
public JwarIsleRefuge(UUID ownerId) {
public JwarIsleRefuge(final JwarIsleRefuge card) {
public JwarIsleRefuge copy() {return new JwarIsleRefuge(this);
public class KabiraCrossroads extends CardImpl {
public KabiraCrossroads(UUID ownerId) {
public KabiraCrossroads(final KabiraCrossroads card) {
public KabiraCrossroads copy() {return new KabiraCrossroads(this);
public class KabiraEvangel extends CardImpl {
public KabiraEvangel(UUID ownerId) {
public KabiraEvangel(final KabiraEvangel card) {
public KabiraEvangel copy() {return new KabiraEvangel(this);
public class KalitasBloodchiefOfGhet extends CardImpl {
public KalitasBloodchiefOfGhet(UUID ownerId) {
public KalitasBloodchiefOfGhet(final KalitasBloodchiefOfGhet card) {
public KalitasBloodchiefOfGhet copy() {return new KalitasBloodchiefOfGhet(this);
class KalitasDestroyEffect extends OneShotEffect {
public KalitasDestroyEffect() {
public KalitasDestroyEffect(final KalitasDestroyEffect effect) {
public KalitasDestroyEffect copy() {return new KalitasDestroyEffect(this);
public boolean apply(Game game, Ability source) {
public class KazanduBlademaster extends CardImpl {
public KazanduBlademaster(UUID ownerId) {
public KazanduBlademaster(final KazanduBlademaster card) {
public KazanduBlademaster copy() {return new KazanduBlademaster(this);
public class KazanduRefuge extends CardImpl {
public KazanduRefuge(UUID ownerId) {
public KazanduRefuge(final KazanduRefuge card) {
public KazanduRefuge copy() {return new KazanduRefuge(this);
public class KazuulWarlord extends CardImpl {
public KazuulWarlord(UUID ownerId) {
public KazuulWarlord(final KazuulWarlord card) {
public KazuulWarlord copy() {return new KazuulWarlord(this);
public class KhalniGem extends CardImpl {
public KhalniGem (UUID ownerId) {
public KhalniGem (final KhalniGem card) {
public KhalniGem copy() {return new KhalniGem(this);
class KhalniGemReturnToHandTargetEffect extends OneShotEffect {private static final String effectText = "return two lands you control to their owner's hand";
KhalniGemReturnToHandTargetEffect ( ) {
KhalniGemReturnToHandTargetEffect ( KhalniGemReturnToHandTargetEffect effect ) {
public boolean apply(Game game, Ability source) {return true;
public KhalniGemReturnToHandTargetEffect copy() {return new KhalniGemReturnToHandTargetEffect(this);
public class KorCartographer extends CardImpl {
public KorCartographer(UUID ownerId) {
public KorCartographer(final KorCartographer card) {
public KorCartographer copy() {return new KorCartographer(this);
public class KorDuelist extends CardImpl {
public KorDuelist(UUID ownerId) {
public KorDuelist(final KorDuelist card) {
public KorDuelist copy() {return new KorDuelist(this);
class SourceIsEquiped implements Condition {
public boolean apply(Game game, Ability source) {return true;return false;
public class KorHookmaster extends CardImpl {
public KorHookmaster(UUID ownerId) {
public KorHookmaster(final KorHookmaster card) {
public KorHookmaster copy() {return new KorHookmaster(this);
public class KorOutfitter extends CardImpl {
public KorOutfitter(UUID ownerId) {
public KorOutfitter(final KorOutfitter card) {
public KorOutfitter copy() {return new KorOutfitter(this);
class EquipEffect extends OneShotEffect {
public EquipEffect() {
public EquipEffect(final EquipEffect effect) {
public EquipEffect copy() {return new EquipEffect(this);
public boolean apply(Game game, Ability source) {return creature.addAttachment(equipment.getId(), game);return false;return new KorSanctifiers(this);
public class KorSkyfisher extends CardImpl {
public KorSkyfisher (UUID ownerId) {
public KorSkyfisher (final KorSkyfisher card) {
public KorSkyfisher copy() {return new KorSkyfisher(this);
public class KrakenHatchling extends CardImpl {
public KrakenHatchling(UUID ownerId) {
public KrakenHatchling(final KrakenHatchling card) {
public KrakenHatchling copy() {return new KrakenHatchling(this);
public class LandbindRitual extends CardImpl {
public LandbindRitual(UUID ownerId) {
public LandbindRitual(final LandbindRitual card) {
public LandbindRitual copy() {return new LandbindRitual(this);
public class LavaballTrap extends CardImpl {
public LavaballTrap(UUID ownerId) {
public LavaballTrap(final LavaballTrap card) {
public LavaballTrap copy() {return new LavaballTrap(this);
class LavaballTrapWatcher extends Watcher {
public LavaballTrapWatcher() {
public LavaballTrapWatcher(final LavaballTrapWatcher watcher) {
public LavaballTrapWatcher copy() {return new LavaballTrapWatcher(this);
public void watch(GameEvent event, Game game) {
public int maxLandsAnOpponentPlayedThisTurn(UUID playerId, Game game) {return maxLands;
public void reset() {
class LavaballTrapAlternativeCost extends AlternativeCostImpl<Cost> {
public LavaballTrapAlternativeCost() {
public LavaballTrapAlternativeCost(final LavaballTrapAlternativeCost cost) {
public LavaballTrapAlternativeCost copy() {return new LavaballTrapAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return true;return false;
public String getText() {return "If an opponent had two or more lands enter the battlefield under his or her control this turn, you may pay {3}{R}{R} rather than pay Lavaball Trap's mana cost";
public class LethargyTrap extends CardImpl {
public LethargyTrap(UUID ownerId) {
public LethargyTrap(final LethargyTrap card) {
public LethargyTrap copy() {return new LethargyTrap(this);
class LethargyTrapAlternativeCost extends AlternativeCostImpl<Cost> {
public LethargyTrapAlternativeCost() {
public LethargyTrapAlternativeCost(final LethargyTrapAlternativeCost cost) {
public LethargyTrapAlternativeCost copy() {return new LethargyTrapAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return true;return false;
public String getText() {return "If three or more creatures are attacking, you may pay {U} rather than pay Lethargy Trap's mana cost";
public class LivingTsunami extends CardImpl {
public LivingTsunami(UUID ownerId) {
public LivingTsunami(final LivingTsunami card) {
public LivingTsunami copy() {return new LivingTsunami(this);
public class LorthosTheTidemaker extends CardImpl {
public LorthosTheTidemaker(UUID ownerId) {
public LorthosTheTidemaker(final LorthosTheTidemaker card) {
public LorthosTheTidemaker copy() {return new LorthosTheTidemaker(this);
class LorthosTheTideMakerEffect extends OneShotEffect {
public LorthosTheTideMakerEffect() {
public LorthosTheTideMakerEffect(final LorthosTheTideMakerEffect effect) {
public LorthosTheTideMakerEffect copy() {return new LorthosTheTideMakerEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;
public class LotusCobra extends CardImpl {
public LotusCobra(UUID ownerId) {
public LotusCobra(final LotusCobra card) {
public LotusCobra copy() {return new LotusCobra(this);
public class LullmageMentor extends CardImpl {
public LullmageMentor(UUID ownerId) {
public LullmageMentor(final LullmageMentor card) {
public LullmageMentor copy() {return new LullmageMentor(this);
class LullmageMentorTriggeredAbility extends TriggeredAbilityImpl {
public LullmageMentorTriggeredAbility() {
public LullmageMentorTriggeredAbility(final LullmageMentorTriggeredAbility ability) {
public LullmageMentorTriggeredAbility copy() {return new LullmageMentorTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.COUNTERED;
public boolean checkTrigger(GameEvent event, Game game) {return controllerIdCounter != null && controllerIdCounter.equals(controllerId);
public String getRule() {return new StringBuilder("Whenever a spell or ability you control counters a spell, ").append(super.getRule()).toString();
class MerfolkToken extends Token {
public MerfolkToken() {
class CastedSpellsWithSpellTarget extends Watcher {
public CastedSpellsWithSpellTarget() {
public CastedSpellsWithSpellTarget(final CastedSpellsWithSpellTarget watcher) {
public void watch(GameEvent event, Game game) {
private String getKey(UUID targetId, UUID sourceId) {return new StringBuilder(targetId.toString()).append("_").append(sourceId.toString()).toString();
public UUID getControllerSpell(UUID sourceId, UUID counteredSpell) {return casted.get(getKey(counteredSpell, sourceId));return null;
public void reset() {
public CastedSpellsWithSpellTarget copy() {return new CastedSpellsWithSpellTarget(this);
public class LuminarchAscension extends CardImpl {
public LuminarchAscension(UUID ownerId) {
public LuminarchAscension(final LuminarchAscension card) {
public LuminarchAscension copy() {return new LuminarchAscension(this);
class LuminarchAscensionTriggeredAbility extends TriggeredAbilityImpl {
public LuminarchAscensionTriggeredAbility() {
public LuminarchAscensionTriggeredAbility(LuminarchAscensionTriggeredAbility ability) {
public LuminarchAscensionTriggeredAbility copy() {return new LuminarchAscensionTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.END_TURN_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(controllerId).contains(event.getPlayerId());
class SourceHasCountersCost extends CostImpl {
public SourceHasCountersCost(int counters, CounterType counterType) {
public SourceHasCountersCost(final SourceHasCountersCost cost) {
public boolean canPay(Ability ability, UUID sourceId, UUID controllerId, Game game) {return (game.getPermanent(sourceId).getCounters().getCount(counterType) >= counters);
public boolean pay(Ability ability, Game game, UUID sourceId, UUID controllerId, boolean noMana, Cost costToPay) {return paid;
public SourceHasCountersCost copy() {return new SourceHasCountersCost(this);return fInstance;
public boolean apply(Game game, Ability source) {return (watcher.getLiveLost(source.getControllerId()) == 0);return false;return new MagmaRift(this);
public class MagosiTheWaterveil extends CardImpl {
public MagosiTheWaterveil(UUID ownerId) {
public MagosiTheWaterveil(final MagosiTheWaterveil card) {
public MagosiTheWaterveil copy() {return new MagosiTheWaterveil(this);
public class MakindiShieldmate extends CardImpl {
public MakindiShieldmate(UUID ownerId) {
public MakindiShieldmate(final MakindiShieldmate card) {
public MakindiShieldmate copy() {return new MakindiShieldmate(this);
public class MarshCasualties extends CardImpl {
public MarshCasualties(UUID ownerId) {
public MarshCasualties(final MarshCasualties card) {
public MarshCasualties copy() {return new MarshCasualties(this);
class MarshCasualtiesEffect extends ContinuousEffectImpl {
public MarshCasualtiesEffect(int power, int toughness) {
public MarshCasualtiesEffect(final MarshCasualtiesEffect effect) {
public MarshCasualtiesEffect copy() {return new MarshCasualtiesEffect(this);
public void init(Ability source, Game game) {
public boolean apply(Game game, Ability source) {return true;
public class MarshFlats extends CardImpl {
public MarshFlats(UUID ownerId) {
public MarshFlats(final MarshFlats card) {
public MarshFlats copy() {return new MarshFlats(this);
public class MerfolkSeastalkers extends CardImpl {
public MerfolkSeastalkers(UUID ownerId) {
public MerfolkSeastalkers(final MerfolkSeastalkers card) {
public MerfolkSeastalkers copy() {return new MerfolkSeastalkers(this);
public class MerfolkWayfinder extends CardImpl {
public MerfolkWayfinder(UUID ownerId) {
public MerfolkWayfinder(final MerfolkWayfinder card) {
public MerfolkWayfinder copy() {return new MerfolkWayfinder(this);
class MerfolkWayfinderEffect extends OneShotEffect {
public MerfolkWayfinderEffect() {
public MerfolkWayfinderEffect(final MerfolkWayfinderEffect effect) {
public MerfolkWayfinderEffect copy() {return new MerfolkWayfinderEffect(this);
public boolean apply(Game game, Ability source) {return false;return true;
public class MindbreakTrap extends CardImpl {
public MindbreakTrap(UUID ownerId) {
public MindbreakTrap(final MindbreakTrap card) {
public MindbreakTrap copy() {return new MindbreakTrap(this);
class MindbreakTrapWatcher extends Watcher {
public MindbreakTrapWatcher() {
public MindbreakTrapWatcher(final MindbreakTrapWatcher watcher) {
public MindbreakTrapWatcher copy() {return new MindbreakTrapWatcher(this);
public void watch(GameEvent event, Game game) {
public class MindlessNull extends CardImpl {
public MindlessNull(UUID ownerId) {
public MindlessNull(final MindlessNull card) {
public MindlessNull copy() {return new MindlessNull(this);
class MindlessNullEffect extends RestrictionEffect {
public MindlessNullEffect() {
public MindlessNullEffect(final MindlessNullEffect effect) {
public MindlessNullEffect copy() {return new MindlessNullEffect(this);
public boolean canBlock(Permanent attacker, Permanent blocker, Ability source, Game game) {return false;
public boolean applies(Permanent permanent, Ability source, Game game) {return true;return false;
public class MindSludge extends CardImpl {
public MindSludge(UUID ownerId) {
public MindSludge(final MindSludge card) {
public MindSludge copy() {return new MindSludge(this);
public class MireBlight extends CardImpl {
public MireBlight(UUID ownerId) {
public MireBlight(final MireBlight card) {
public MireBlight copy() {return new MireBlight(this);return new MistyRainforest(this);
public class MoldShambler extends CardImpl {
public MoldShambler(UUID ownerId) {
public MoldShambler(final MoldShambler card) {
public MoldShambler copy() {return new MoldShambler(this);
public class MoltenRavager extends CardImpl {
public MoltenRavager(UUID ownerId) {
public MoltenRavager(final MoltenRavager card) {
public MoltenRavager copy() {return new MoltenRavager(this);
public class MurasaPyromancer extends CardImpl {
public MurasaPyromancer(UUID ownerId) {
public MurasaPyromancer(final MurasaPyromancer card) {
public MurasaPyromancer copy() {return new MurasaPyromancer(this);
public class NarrowEscape extends CardImpl {
public NarrowEscape (UUID ownerId) {
public NarrowEscape (final NarrowEscape card) {
public NarrowEscape copy() {return new NarrowEscape(this);
public class NeedlebiteTrap extends CardImpl {
public NeedlebiteTrap(UUID ownerId) {
public NeedlebiteTrap(final NeedlebiteTrap card) {
public NeedlebiteTrap copy() {return new NeedlebiteTrap(this);
class NeedlebiteTrapAlternativeCost extends AlternativeCostImpl {
public NeedlebiteTrapAlternativeCost() {
public NeedlebiteTrapAlternativeCost(final NeedlebiteTrapAlternativeCost cost) {
public NeedlebiteTrapAlternativeCost copy() {return new NeedlebiteTrapAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return true;return false;
public String getText() {return "If an opponent gained life this turn, you may pay {B} rather than pay {this}'s mana cost";
public class NimanaSellSword extends CardImpl {
public NimanaSellSword(UUID ownerId) {
public NimanaSellSword(final NimanaSellSword card) {
public NimanaSellSword copy() {return new NimanaSellSword(this);
public class NimbusWings extends CardImpl {
public NimbusWings (UUID ownerId) {
public NimbusWings (final NimbusWings card) {
public NimbusWings copy() {return new NimbusWings(this);
public class NissaRevane extends CardImpl {
public NissaRevane(UUID ownerId) {
public NissaRevane(final NissaRevane card) {
public NissaRevane copy() {return new NissaRevane(this);return new NissaRevaneGainLifeEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class NissasChosen extends CardImpl {
public NissasChosen(UUID ownerId) {
public NissasChosen(final NissasChosen card) {
public NissasChosen copy() {return new NissasChosen(this);
class NissasChosenEffect extends ReplacementEffectImpl {
public NissasChosenEffect() {
public NissasChosenEffect(final NissasChosenEffect effect) {
public NissasChosenEffect copy() {return new NissasChosenEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.ZONE_CHANGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;return false;
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;return false;
public class ObsidianFireheart extends CardImpl {
public ObsidianFireheart(UUID ownerId) {
public ObsidianFireheart(final ObsidianFireheart card) {
public ObsidianFireheart copy() {return new ObsidianFireheart(this);
class ObsidianFireheartGainAbilityEffect extends GainAbilityTargetEffect {
public ObsidianFireheartGainAbilityEffect(Ability ability, Duration duration, String rule) {
public ObsidianFireheartGainAbilityEffect(final ObsidianFireheartGainAbilityEffect effect) {
public boolean isInactive(Ability source, Game game) {return true;return false;
public ObsidianFireheartGainAbilityEffect copy() {return new ObsidianFireheartGainAbilityEffect(this);
public class OnduCleric extends CardImpl {
public OnduCleric(UUID ownerId) {
public OnduCleric(final OnduCleric card) {
public OnduCleric copy() {return new OnduCleric(this);
public class OracleOfMulDaya extends CardImpl {
public OracleOfMulDaya(UUID ownerId) {
public OracleOfMulDaya(final OracleOfMulDaya card) {
public OracleOfMulDaya copy() {return new OracleOfMulDaya(this);
public class OranRiefRecluse extends CardImpl {
public OranRiefRecluse(UUID ownerId) {
public OranRiefRecluse(final OranRiefRecluse card) {
public OranRiefRecluse copy() {return new OranRiefRecluse(this);
public class OranRiefSurvivalist extends CardImpl {
public OranRiefSurvivalist(UUID ownerId) {
public OranRiefSurvivalist(final OranRiefSurvivalist card) {
public OranRiefSurvivalist copy() {return new OranRiefSurvivalist(this);
public class OranRiefTheVastwood extends CardImpl {
public OranRiefTheVastwood(UUID ownerId) {
public OranRiefTheVastwood(final OranRiefTheVastwood card) {
public OranRiefTheVastwood copy() {return new OranRiefTheVastwood(this);
class OranRiefTheVastwoodEffect extends OneShotEffect {
public OranRiefTheVastwoodEffect() {
public OranRiefTheVastwoodEffect(final OranRiefTheVastwoodEffect effect) {
public OranRiefTheVastwoodEffect copy() {return new OranRiefTheVastwoodEffect(this);
public boolean apply(Game game, Ability source) {return true;
public class ParalyzingGrasp extends CardImpl {
public ParalyzingGrasp(UUID ownerId) {
public ParalyzingGrasp(final ParalyzingGrasp card) {
public ParalyzingGrasp copy() {return new ParalyzingGrasp(this);
public class PillarfieldOx extends CardImpl {
public PillarfieldOx (UUID ownerId) {
public PillarfieldOx (final PillarfieldOx card) {
public PillarfieldOx copy() {return new PillarfieldOx(this);
public class PiranhaMarsh extends CardImpl {
public PiranhaMarsh(UUID ownerId) {
public PiranhaMarsh(final PiranhaMarsh card) {
public PiranhaMarsh copy() {return new PiranhaMarsh(this);
public class PitfallTrap extends CardImpl {
public PitfallTrap(UUID ownerId) {
public PitfallTrap(final PitfallTrap card) {
public PitfallTrap copy() {return new PitfallTrap(this);
class PitfallTrapAlternativeCost extends AlternativeCostImpl {
public PitfallTrapAlternativeCost() {
public PitfallTrapAlternativeCost(final PitfallTrapAlternativeCost cost) {
public PitfallTrapAlternativeCost copy() {return new PitfallTrapAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return true;return false;
public String getText() {return "If exactly one creature is attacking, you may pay {W} rather than pay Pitfall Trap's mana cost";
public class PlatedGeopede extends CardImpl {
public PlatedGeopede (UUID ownerId) {
public PlatedGeopede (final PlatedGeopede card) {
public PlatedGeopede copy() {return new PlatedGeopede(this);
public class PredatoryUrge extends CardImpl {
public PredatoryUrge(UUID ownerId) {
public PredatoryUrge(final PredatoryUrge card) {
public PredatoryUrge copy() {return new PredatoryUrge(this);
public class PrimalBellow extends CardImpl {
public PrimalBellow(UUID ownerId) {
public PrimalBellow(final PrimalBellow card) {
public PrimalBellow copy() {return new PrimalBellow(this);
public class PunishingFire extends CardImpl {
public PunishingFire(UUID ownerId) {
public PunishingFire(final PunishingFire card) {
public PunishingFire copy() {return new PunishingFire(this);
class PunishingFireTriggeredAbility extends TriggeredAbilityImpl {
public PunishingFireTriggeredAbility() {
public PunishingFireTriggeredAbility(final PunishingFireTriggeredAbility ability) {
public PunishingFireTriggeredAbility copy() {return new PunishingFireTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.GAINED_LIFE;
public boolean checkTrigger(GameEvent event, Game game) {return game.getOpponents(this.controllerId).contains(event.getPlayerId());
public String getRule() {return "Whenever an opponent gains life, " + super.getRule();
public class PyromancerAscension extends CardImpl {
public PyromancerAscension(UUID ownerId) {
public PyromancerAscension(final PyromancerAscension card) {
public PyromancerAscension copy() {return new PyromancerAscension(this);
class PyromancerAscensionQuestTriggeredAbility extends TriggeredAbilityImpl {
PyromancerAscensionQuestTriggeredAbility() {
PyromancerAscensionQuestTriggeredAbility(final PyromancerAscensionQuestTriggeredAbility ability) {
public PyromancerAscensionQuestTriggeredAbility copy() {return new PyromancerAscensionQuestTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
private boolean isControlledInstantOrSorcery(Spell spell) {return spell != null &&
public String getRule() {return "Whenever you cast an instant or sorcery spell that has the same name as a card in your graveyard, you may put a quest counter on {this}.";
class PyromancerAscensionCopyTriggeredAbility extends TriggeredAbilityImpl {
PyromancerAscensionCopyTriggeredAbility() {
PyromancerAscensionCopyTriggeredAbility(final PyromancerAscensionCopyTriggeredAbility ability) {
public PyromancerAscensionCopyTriggeredAbility copy() {return new PyromancerAscensionCopyTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == GameEvent.EventType.SPELL_CAST;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
private boolean isControlledInstantOrSorcery(Spell spell) {return spell != null &&
public String getRule() {return "Whenever you cast an instant or sorcery spell while {this} has two or more quest counters on it, you may copy that spell. You may choose new targets for the copy.";
public class QuestForAncientSecrets extends CardImpl {
public QuestForAncientSecrets(UUID ownerId) {
public QuestForAncientSecrets(final QuestForAncientSecrets card) {
public QuestForAncientSecrets copy() {return new QuestForAncientSecrets(this);
class QuestForAncientSecretsEffect extends OneShotEffect {
public QuestForAncientSecretsEffect() {
public QuestForAncientSecretsEffect(final QuestForAncientSecretsEffect effect) {
public QuestForAncientSecretsEffect copy() {return new QuestForAncientSecretsEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class QuestForPureFlame extends CardImpl {
public QuestForPureFlame(UUID ownerId) {
public QuestForPureFlame(final QuestForPureFlame card) {
public QuestForPureFlame copy() {return new QuestForPureFlame(this);
class QuestForPureFlameTriggeredAbility extends TriggeredAbilityImpl {
public QuestForPureFlameTriggeredAbility() {
public QuestForPureFlameTriggeredAbility(final QuestForPureFlameTriggeredAbility ability) {
public QuestForPureFlameTriggeredAbility copy() {return new QuestForPureFlameTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_PLAYER;
public boolean checkTrigger(GameEvent event, Game game) {return getControllerId().equals(game.getControllerId(event.getSourceId()));return false;
public String getRule() {return "Whenever a source you control deals damage to an opponent, you may put a quest counter on {this}.";
class QuestForPureFlameEffect extends ReplacementEffectImpl {
public QuestForPureFlameEffect() {
public QuestForPureFlameEffect(final QuestForPureFlameEffect effect) {
public QuestForPureFlameEffect copy() {return new QuestForPureFlameEffect(this);
public boolean checksEventType(GameEvent event, Game game) {return event.getType().equals(GameEvent.EventType.DAMAGE_CREATURE) ||
public boolean applies(GameEvent event, Ability source, Game game) {return source.getControllerId().equals(game.getControllerId(event.getSourceId()));
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return false;
public class QuestForTheGemblades extends CardImpl {
public QuestForTheGemblades(UUID ownerId) {
public QuestForTheGemblades(final QuestForTheGemblades card) {
public QuestForTheGemblades copy() {return new QuestForTheGemblades(this);
class QuestForTheGembladesTriggeredAbility extends TriggeredAbilityImpl {
public QuestForTheGembladesTriggeredAbility() {
public QuestForTheGembladesTriggeredAbility(final QuestForTheGembladesTriggeredAbility ability) {
public QuestForTheGembladesTriggeredAbility copy() {return new QuestForTheGembladesTriggeredAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.DAMAGED_CREATURE;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public String getRule() {return "Whenever a creature you control deals combat damage to a creature, " + super.getRule();
public class RampagingBaloths extends CardImpl {
public RampagingBaloths(UUID ownerId) {
public RampagingBaloths(final RampagingBaloths card) {
public RampagingBaloths copy() {return new RampagingBaloths(this);
public class RavenousTrap extends CardImpl {
public RavenousTrap(UUID ownerId) {
public RavenousTrap(final RavenousTrap card) {
public RavenousTrap copy() {return new RavenousTrap(this);
class RavenousTrapAlternativeCost extends AlternativeCostImpl {
public RavenousTrapAlternativeCost() {
public RavenousTrapAlternativeCost(final RavenousTrapAlternativeCost cost) {
public RavenousTrapAlternativeCost copy() {return new RavenousTrapAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return true;return false;
public String getText() {return "If an opponent had three or more cards put into his or her graveyard from anywhere this turn, you may pay {0} rather than pay {this}'s mana cost";
public class RecklessScholar extends CardImpl {
public RecklessScholar(UUID ownerId) {
public RecklessScholar(final RecklessScholar card) {
public RecklessScholar copy() {return new RecklessScholar(this);
public class RelicCrush extends CardImpl {
public RelicCrush(UUID ownerId) {
public RelicCrush(final RelicCrush card) {
public RelicCrush copy() {return new RelicCrush(this);
public class RiteOfReplication extends CardImpl {
public RiteOfReplication(UUID ownerId) {
public RiteOfReplication(final RiteOfReplication card) {
public RiteOfReplication copy() {return new RiteOfReplication(this);
public class RiverBoa extends CardImpl {
public RiverBoa(UUID ownerId) {
public RiverBoa(final RiverBoa card) {
public RiverBoa copy() {return new RiverBoa(this);
public class RoilElemental extends CardImpl {
public RoilElemental(UUID ownerId) {
public RoilElemental(final RoilElemental card) {
public RoilElemental copy() {return new RoilElemental(this);
public class RuinousMinotaur extends CardImpl {
public RuinousMinotaur(UUID ownerId) {
public RuinousMinotaur(final RuinousMinotaur card) {
public RuinousMinotaur copy() {return new RuinousMinotaur(this);
public class RuneflareTrap extends CardImpl {
public RuneflareTrap(UUID ownerId) {
public RuneflareTrap(final RuneflareTrap card) {
public RuneflareTrap copy() {return new RuneflareTrap(this);
class TargetPlayerCardsInHandCount implements DynamicValue {
public int calculate(Game game, Ability sourceAbility, Effect effect) {return targetPlayer.getHand().size();return 0;
public DynamicValue copy() {return new TargetPlayerCardsInHandCount();
public String toString() {return "1";
public String getMessage() {return "target player's cards in hand";
class CardsDrawnOpponentWatcher extends Watcher {
public CardsDrawnOpponentWatcher() {
public CardsDrawnOpponentWatcher(final CardsDrawnOpponentWatcher watcher) {
public void watch(GameEvent event, Game game) {
public void reset() {
public CardsDrawnOpponentWatcher copy() {return new CardsDrawnOpponentWatcher(this);
class RuneflareTrapAlternativeCost extends AlternativeCostImpl<Cost> {
public RuneflareTrapAlternativeCost() {
public RuneflareTrapAlternativeCost(final RuneflareTrapAlternativeCost cost) {
public RuneflareTrapAlternativeCost copy() {return new RuneflareTrapAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return true;return false;
public String getText() {return "If an opponent drew three or more cards this turn, you may pay {R} rather than pay Runeflare Trap's mana cost";
public class SadisticSacrament extends CardImpl {
public SadisticSacrament(UUID ownerId) {
public SadisticSacrament(final SadisticSacrament card) {
public SadisticSacrament copy() {return new SadisticSacrament(this);
class SadisticSacramentEffect extends OneShotEffect {
public SadisticSacramentEffect(int amount) {
public SadisticSacramentEffect(final SadisticSacramentEffect effect) {
public SadisticSacramentEffect copy() {return new SadisticSacramentEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class SavageSilhouette extends CardImpl {
public SavageSilhouette(UUID ownerId) {
public SavageSilhouette(final SavageSilhouette card) {
public SavageSilhouette copy() {return new SavageSilhouette(this);
public class ScaldingTarn extends CardImpl {
public ScaldingTarn(UUID ownerId) {
public ScaldingTarn(final ScaldingTarn card) {
public ScaldingTarn copy() {return new ScaldingTarn(this);
public class ScuteMob extends CardImpl {
public ScuteMob(UUID ownerId) {
public ScuteMob(final ScuteMob card) {
public ScuteMob copy() {return new ScuteMob(this);
class ScuteMobAbility extends TriggeredAbilityImpl {
public ScuteMobAbility() {
public ScuteMobAbility(final ScuteMobAbility ability) {
public ScuteMobAbility copy() {return new ScuteMobAbility(this);
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.UPKEEP_STEP_PRE;
public boolean checkTrigger(GameEvent event, Game game) {return event.getPlayerId().equals(this.controllerId);
public boolean checkInterveningIfClause(Game game) {return game.getBattlefield().countAll(filter, this.controllerId, game) >= 5;
public String getRule() {return "At the beginning of your upkeep, if you control five or more lands, put four +1/+1 counters on {this}.";
public class ScytheTiger extends CardImpl {
public ScytheTiger(UUID ownerId) {
public ScytheTiger(final ScytheTiger card) {
public ScytheTiger copy() {return new ScytheTiger(this);
public class SeaGateLoremaster extends CardImpl {
public SeaGateLoremaster(UUID ownerId) {
public SeaGateLoremaster(final SeaGateLoremaster card) {
public SeaGateLoremaster copy() {return new SeaGateLoremaster(this);
public class SeascapeAerialist extends CardImpl {
public SeascapeAerialist(UUID ownerId) {
public SeascapeAerialist(final SeascapeAerialist card) {
public SeascapeAerialist copy() {return new SeascapeAerialist(this);
public class SeismicShudder extends CardImpl {
public SeismicShudder(UUID ownerId) {
public SeismicShudder(final SeismicShudder card) {
public SeismicShudder copy() {return new SeismicShudder(this);
public class SejiriRefuge extends CardImpl {
public SejiriRefuge(UUID ownerId) {
public SejiriRefuge(final SejiriRefuge card) {
public SejiriRefuge copy() {return new SejiriRefuge(this);
public class ShieldmatesBlessing extends CardImpl {
public ShieldmatesBlessing(UUID ownerId) {
public ShieldmatesBlessing(final ShieldmatesBlessing card) {
public ShieldmatesBlessing copy() {return new ShieldmatesBlessing(this);
public class ShoalSerpent extends CardImpl {
public ShoalSerpent(UUID ownerId) {
public ShoalSerpent(final ShoalSerpent card) {
public ShoalSerpent copy() {return new ShoalSerpent(this);
class ShoalSerpentEffect extends ContinuousEffectImpl {
public ShoalSerpentEffect() {
public ShoalSerpentEffect(final ShoalSerpentEffect effect) {
public ShoalSerpentEffect copy() {return new ShoalSerpentEffect(this);
public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {return true;return false;
public boolean apply(Game game, Ability source) {return false;
public boolean hasLayer(Layer layer) {return layer == Layer.AbilityAddingRemovingEffects_6;
public class SkyRuinDrake extends CardImpl {
public SkyRuinDrake(UUID ownerId) {
public SkyRuinDrake(final SkyRuinDrake card) {
public SkyRuinDrake copy() {return new SkyRuinDrake(this);
public class SlaughterCry extends CardImpl {
public SlaughterCry(UUID ownerId) {
public SlaughterCry(final SlaughterCry card) {
public SlaughterCry copy() {return new SlaughterCry(this);return new SoaringSeacliff(this);
public class SorinMarkov extends CardImpl {
public SorinMarkov(UUID ownerId) {
public SorinMarkov(final SorinMarkov card) {
public SorinMarkov copy() {return new SorinMarkov(this);
class SorinMarkovEffect extends OneShotEffect {
public SorinMarkovEffect() {
public SorinMarkovEffect(SorinMarkovEffect effect) {
public boolean apply(Game game, Ability source) {return true;return false;
public SorinMarkovEffect copy() {return new SorinMarkovEffect(this);
public class SoulStairExpedition extends CardImpl {
public SoulStairExpedition(UUID ownerId) {
public SoulStairExpedition(final SoulStairExpedition card) {
public SoulStairExpedition copy() {return new SoulStairExpedition(this);
public class SpellPierce extends CardImpl {
public SpellPierce(UUID ownerId) {
public SpellPierce(final SpellPierce card) {
public SpellPierce copy() {return new SpellPierce(this);
public class SphinxOfJwarIsle extends CardImpl {
public SphinxOfJwarIsle(UUID ownerId) {
public SphinxOfJwarIsle(final SphinxOfJwarIsle card) {
public SphinxOfJwarIsle copy() {return new SphinxOfJwarIsle(this);
class SphinxOfJwarIsleLookAbility extends ActivatedAbilityImpl {
public SphinxOfJwarIsleLookAbility() {
public SphinxOfJwarIsleLookAbility(SphinxOfJwarIsleLookAbility ability) {
public SphinxOfJwarIsleLookAbility copy() {return new SphinxOfJwarIsleLookAbility(this);
class SphinxOfJwarIsleEffect extends OneShotEffect {
public SphinxOfJwarIsleEffect() {
public SphinxOfJwarIsleEffect(final SphinxOfJwarIsleEffect effect) {
public SphinxOfJwarIsleEffect copy() {return new SphinxOfJwarIsleEffect(this);
public boolean apply(Game game, Ability source) {return false;return false;return true;
public class SphinxOfLostTruths extends CardImpl {
public SphinxOfLostTruths(UUID ownerId) {
public SphinxOfLostTruths(final SphinxOfLostTruths card) {
public SphinxOfLostTruths copy() {return new SphinxOfLostTruths(this);
public class SpidersilkNet extends CardImpl {
public SpidersilkNet(UUID ownerId) {
public SpidersilkNet(final SpidersilkNet card) {
public SpidersilkNet copy() {return new SpidersilkNet(this);
public class SpireBarrage extends CardImpl {
public SpireBarrage(UUID ownerId) {
public SpireBarrage(final SpireBarrage card) {
public SpireBarrage copy() {return new SpireBarrage(this);
public class SpreadingSeas extends CardImpl {
public SpreadingSeas(UUID ownerId) {
public SpreadingSeas(final SpreadingSeas card) {
public SpreadingSeas copy() {return new SpreadingSeas(this);
public class SteppeLynx extends CardImpl {
public SteppeLynx(UUID ownerId) {
public SteppeLynx(final SteppeLynx card) {
public SteppeLynx copy() {return new SteppeLynx(this);
public class StoneworkPuma extends CardImpl {
public StoneworkPuma(UUID ownerId) {
public StoneworkPuma(final StoneworkPuma card) {
public StoneworkPuma copy() {return new StoneworkPuma(this);
public class SummonersBane extends CardImpl {
public SummonersBane(UUID ownerId) {
public SummonersBane(final SummonersBane card) {
public SummonersBane copy() {return new SummonersBane(this);
class IllusionToken extends Token {
public IllusionToken() {
public class SummoningTrap extends CardImpl {
public SummoningTrap(UUID ownerId) {
public SummoningTrap(final SummoningTrap card) {
public SummoningTrap copy() {return new SummoningTrap(this);
class SummoningTrapWatcher extends Watcher {
public SummoningTrapWatcher() {
public SummoningTrapWatcher(final SummoningTrapWatcher watcher) {
public SummoningTrapWatcher copy() {return new SummoningTrapWatcher(this);
public void watch(GameEvent event, Game game) {
public class SunspringExpedition extends CardImpl {
public SunspringExpedition(UUID ownerId) {
public SunspringExpedition(final SunspringExpedition card) {
public SunspringExpedition copy() {return new SunspringExpedition(this);
public class Tanglesap extends CardImpl {
public Tanglesap(UUID ownerId) {
public Tanglesap(final Tanglesap card) {
public Tanglesap copy() {return new Tanglesap(this);
public class TeeteringPeaks extends CardImpl {
public TeeteringPeaks(UUID ownerId) {
public TeeteringPeaks(final TeeteringPeaks card) {
public TeeteringPeaks copy() {return new TeeteringPeaks(this);
public class TempestOwl extends CardImpl {
public TempestOwl(UUID ownerId) {
public TempestOwl(final TempestOwl card) {
public TempestOwl copy() {return new TempestOwl(this);
public class TerraStomper extends CardImpl {
public TerraStomper(UUID ownerId) {
public TerraStomper(final TerraStomper card) {
public TerraStomper copy() {return new TerraStomper(this);
public class TerritorialBaloth extends CardImpl {
public TerritorialBaloth(UUID ownerId) {
public TerritorialBaloth(final TerritorialBaloth card) {
public TerritorialBaloth copy() {return new TerritorialBaloth(this);
public class TimbermawLarva extends CardImpl {
public TimbermawLarva(UUID ownerId) {
public TimbermawLarva(final TimbermawLarva card) {
public TimbermawLarva copy() {return new TimbermawLarva(this);
public class TorchSlinger extends CardImpl {
public TorchSlinger(UUID ownerId) {
public TorchSlinger(final TorchSlinger card) {
public TorchSlinger copy() {return new TorchSlinger(this);
public class TrailblazersBoots extends CardImpl {
public TrailblazersBoots(UUID ownerId) {
public TrailblazersBoots(final TrailblazersBoots card) {
public TrailblazersBoots copy() {return new TrailblazersBoots(this);
class NonbasicLandwalkAbility extends LandwalkAbility {
public NonbasicLandwalkAbility() {
public NonbasicLandwalkAbility(final NonbasicLandwalkAbility ability) {
public NonbasicLandwalkAbility copy() {return new NonbasicLandwalkAbility(this);
public class TrapfindersTrick extends CardImpl {
public TrapfindersTrick(UUID ownerId) {
public TrapfindersTrick(final TrapfindersTrick card) {
public TrapfindersTrick copy() {return new TrapfindersTrick(this);
class TrapfindersTrickEffect extends OneShotEffect {
public TrapfindersTrickEffect() {
public TrapfindersTrickEffect(final TrapfindersTrickEffect effect) {
public TrapfindersTrickEffect copy() {return new TrapfindersTrickEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class TrapmakersSnare extends CardImpl {
public TrapmakersSnare(UUID ownerId) {
public TrapmakersSnare(final TrapmakersSnare card) {
public TrapmakersSnare copy() {return new TrapmakersSnare(this);
public class TrustyMachete extends CardImpl {
public TrustyMachete (UUID ownerId) {
public TrustyMachete (final TrustyMachete card) {
public TrustyMachete copy() {return new TrustyMachete(this);
public class TuktukGrunts extends CardImpl {
public TuktukGrunts(UUID ownerId) {
public TuktukGrunts(final TuktukGrunts card) {
public TuktukGrunts copy() {return new TuktukGrunts(this);
public class TurntimberBasilisk extends CardImpl {
public TurntimberBasilisk(UUID ownerId) {
public TurntimberBasilisk(final TurntimberBasilisk card) {
public TurntimberBasilisk copy() {return new TurntimberBasilisk(this);
public class TurntimberGrove extends CardImpl {
public TurntimberGrove(UUID ownerId) {
public TurntimberGrove(final TurntimberGrove card) {
public TurntimberGrove copy() {return new TurntimberGrove(this);
public class TurntimberRanger extends CardImpl {
public TurntimberRanger(UUID ownerId) {
public TurntimberRanger(final TurntimberRanger card) {
public TurntimberRanger copy() {return new TurntimberRanger(this);
public class UmaraRaptor extends CardImpl {
public UmaraRaptor(UUID ownerId) {
public UmaraRaptor(final UmaraRaptor card) {
public UmaraRaptor copy() {return new UmaraRaptor(this);
public class UnstableFooting extends CardImpl {
public UnstableFooting(UUID ownerId) {
public void adjustTargets(Ability ability, Game game) {
public UnstableFooting(final UnstableFooting card) {
public UnstableFooting copy() {return new UnstableFooting(this);
class UnstableFootingEffect extends ReplacementEffectImpl {
public UnstableFootingEffect() {
public UnstableFootingEffect(final UnstableFootingEffect effect) {
public UnstableFootingEffect copy() {return new UnstableFootingEffect(this);
public boolean replaceEvent(GameEvent event, Ability source, Game game) {return true;
public boolean checksEventType(GameEvent event, Game game) {return event.getType() == EventType.PREVENT_DAMAGE;
public boolean applies(GameEvent event, Ability source, Game game) {return true;
public class ValakutTheMoltenPinnacle extends CardImpl {
public ValakutTheMoltenPinnacle(UUID ownerId) {
public ValakutTheMoltenPinnacle(final ValakutTheMoltenPinnacle card) {
public ValakutTheMoltenPinnacle copy() {return new ValakutTheMoltenPinnacle(this);
class ValakutTheMoltenPinnacleTriggeredAbility extends TriggeredAbilityImpl {
ValakutTheMoltenPinnacleTriggeredAbility() {
ValakutTheMoltenPinnacleTriggeredAbility(ValakutTheMoltenPinnacleTriggeredAbility ability) {
public boolean checkInterveningIfClause(Game game) {return game.getBattlefield().count(ValakutTheMoltenPinnacle.filter, getSourceId(), getControllerId(), game) > 5;
public boolean checkEventType(GameEvent event, Game game) {return event.getType() == EventType.ENTERS_THE_BATTLEFIELD;
public boolean checkTrigger(GameEvent event, Game game) {return true;return false;
public ValakutTheMoltenPinnacleTriggeredAbility copy() {return new ValakutTheMoltenPinnacleTriggeredAbility(this);
public String getRule() {return "Whenever a Mountain enters the battlefield under your control, if you control at least five other Mountains, you may have {this} deal 3 damage to target creature or player.";
public class VampireNighthawk extends CardImpl {
public VampireNighthawk(UUID ownerId) {
public VampireNighthawk(final VampireNighthawk card) {
public VampireNighthawk copy() {return new VampireNighthawk(this);
public class VampiresBite extends CardImpl {
public VampiresBite(UUID ownerId) {
public VampiresBite(final VampiresBite card) {
public VampiresBite copy() {return new VampiresBite(this);
public class VastwoodGorger extends CardImpl {
public VastwoodGorger(UUID ownerId) {
public VastwoodGorger(final VastwoodGorger card) {
public VastwoodGorger copy() {return new VastwoodGorger(this);
public class VerdantCatacombs extends CardImpl {
public VerdantCatacombs(UUID ownerId) {
public VerdantCatacombs(final VerdantCatacombs card) {
public VerdantCatacombs copy() {return new VerdantCatacombs(this);
public class VinesOfVastwood extends CardImpl {
public VinesOfVastwood(UUID ownerId) {
public VinesOfVastwood(final VinesOfVastwood card) {
public VinesOfVastwood copy() {return new VinesOfVastwood(this);
public class WarrenInstigator extends CardImpl {
public WarrenInstigator(UUID ownerId) {
public WarrenInstigator(final WarrenInstigator card) {
public WarrenInstigator copy() {return new WarrenInstigator(this);
public class WelkinTern extends CardImpl {
public WelkinTern (UUID ownerId) {
public WelkinTern (final WelkinTern card) {
public WelkinTern copy() {return new WelkinTern(this);
public class WhiplashTrap extends CardImpl {
public WhiplashTrap(UUID ownerId) {
public WhiplashTrap(final WhiplashTrap card) {
public WhiplashTrap copy() {return new WhiplashTrap(this);
class WhiplashTrapWatcher extends Watcher {
public WhiplashTrapWatcher() {
public WhiplashTrapWatcher(final WhiplashTrapWatcher watcher) {
public WhiplashTrapWatcher copy() {return new WhiplashTrapWatcher(this);
public void watch(GameEvent event, Game game) {
public int maxCreaturesAnOpponentPlayedThisTurn(UUID playerId, Game game) {return maxCreatures;
public void reset() {
class WhiplashAlternativeCost extends AlternativeCostImpl {
public WhiplashAlternativeCost() {
public WhiplashAlternativeCost(final WhiplashAlternativeCost cost) {
public WhiplashAlternativeCost copy() {return new WhiplashAlternativeCost(this);
public boolean isAvailable(Game game, Ability source) {return true;return false;
public String getText() {return "If an opponent had two or more creatures enter the battlefield under his or her control this turn, you may pay {U} rather than pay {this}'s mana cost";
public class WindborneCharge extends CardImpl {
public WindborneCharge(UUID ownerId) {
public WindborneCharge(final WindborneCharge card) {
public WindborneCharge copy() {return new WindborneCharge(this);
public class WindriderEel extends CardImpl {
public WindriderEel (UUID ownerId) {
public WindriderEel (final WindriderEel card) {
public WindriderEel copy() {return new WindriderEel(this);
public class WorldQueller extends CardImpl {
public WorldQueller(UUID ownerId) {
public WorldQueller(final WorldQueller card) {
public WorldQueller copy() {return new WorldQueller(this);
class WorldQuellerEffect extends OneShotEffect {
public WorldQuellerEffect() {
public WorldQuellerEffect(final WorldQuellerEffect effect) {
public WorldQuellerEffect copy() {return new WorldQuellerEffect(this);
public boolean apply(Game game, Ability source) {return true;return false;
public class ZektarShrineExpedition extends CardImpl {
public ZektarShrineExpedition(UUID ownerId) {
public ZektarShrineExpedition(final ZektarShrineExpedition card) {
public ZektarShrineExpedition copy() {return new ZektarShrineExpedition(this);
class ZektarShrineExpeditionEffect extends OneShotEffect {
public ZektarShrineExpeditionEffect() {
public ZektarShrineExpeditionEffect(final ZektarShrineExpeditionEffect effect) {
public ZektarShrineExpeditionEffect copy() {return new ZektarShrineExpeditionEffect(this);
public boolean apply(Game game, Ability source) {return true;
class ElementalToken extends Token {
public ElementalToken() {
public class ZendikarFarguide extends CardImpl {
public ZendikarFarguide(UUID ownerId) {
public ZendikarFarguide(final ZendikarFarguide card) {
public ZendikarFarguide copy() {return new ZendikarFarguide(this);
public class ForerunnerOfSlaughter extends CardImpl {
public ForerunnerOfSlaughter(UUID ownerId) {
public ForerunnerOfSlaughter(final ForerunnerOfSlaughter card) {
public ForerunnerOfSlaughter copy() {return new ForerunnerOfSlaughter(this);
public class RetreatToKazandu extends CardImpl {
public RetreatToKazandu(UUID ownerId) {
public RetreatToKazandu(final RetreatToKazandu card) {
public RetreatToKazandu copy() {return new RetreatToKazandu(this);
public class SheerDrop extends CardImpl {
public SheerDrop(UUID ownerId) {
public SheerDrop(final SheerDrop card) {
public SheerDrop copy() {return new SheerDrop(this);
public class VeteranWarleader extends CardImpl {
public VeteranWarleader(UUID ownerId) {
public VeteranWarleader(final VeteranWarleader card) {
public VeteranWarleader copy() {return new VeteranWarleader(this);
class VeteranWarleaderEffect extends OneShotEffect {
VeteranWarleaderEffect() {
VeteranWarleaderEffect(final VeteranWarleaderEffect effect) {
public boolean apply(Game game, Ability source) {return false;return true;return false;
public VeteranWarleaderEffect copy() {return new VeteranWarleaderEffect(this);
